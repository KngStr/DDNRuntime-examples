// Aspose.Slides, Version=21.6.0.0, Culture=neutral, PublicKeyToken=716fcc553a201e56
//-----------------------------------------------------------//
//                                                           //
//     DDN.Aspose.Slides                            
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.Aspose.Slides;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.Aspose.Common;

type

{ enums }

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents types of accumulation of effect behaviors.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.BehaviorAccumulateType')]
  DNBehaviorAccumulateType = type Integer;
  DNBehaviorAccumulateTypeHelper = record helper for DNBehaviorAccumulateType
  public const
    ///<summary />
    Always = 0;
    ///<summary />
    None = 1;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents additive type for effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.BehaviorAdditiveType')]
  DNBehaviorAdditiveType = type Integer;
  DNBehaviorAdditiveTypeHelper = record helper for DNBehaviorAdditiveType
  public const
    ///<summary />
    None = 0;
    ///<summary />
    Base = 1;
    ///<summary />
    Sum = 2;
    ///<summary />
    Replace = 3;
    ///<summary />
    Multiply = 4;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Determines how text will appear on a shape during animation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.BuildType')]
  DNBuildType = type Integer;
  DNBuildTypeHelper = record helper for DNBuildType
  public const
    ///<summary>
    ///  With containing shape.
    ///</summary>
    AsOneObject = 0;
    ///<summary>
    ///  All paragraph.
    ///</summary>
    AllParagraphsAtOnce = 1;
    ///<summary>
    ///  By groups of paragraphs of depth 1.
    ///</summary>
    ByLevelParagraphs1 = 2;
    ///<summary>
    ///  By groups of paragraphs of depth 2.
    ///</summary>
    ByLevelParagraphs2 = 3;
    ///<summary>
    ///  By groups of paragraphs of depth 3.
    ///</summary>
    ByLevelParagraphs3 = 4;
    ///<summary>
    ///  By groups of paragraphs of depth 4.
    ///</summary>
    ByLevelParagraphs4 = 5;
    ///<summary>
    ///  By groups of paragraphs of depth 5.
    ///</summary>
    ByLevelParagraphs5 = 6;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents color direction for color effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ColorDirection')]
  DNColorDirection = type Integer;
  DNColorDirectionHelper = record helper for DNColorDirection
  public const
    ///<summary />
    Clockwise = 0;
    ///<summary />
    CounterClockwise = 1;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents color space for color effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ColorSpace')]
  DNColorSpace = type Integer;
  DNColorSpaceHelper = record helper for DNColorSpace
  public const
    ///<summary />
    RGB = 0;
    ///<summary />
    HSL = 1;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents command effect type for command effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.CommandEffectType')]
  DNCommandEffectType = type Integer;
  DNCommandEffectTypeHelper = record helper for DNCommandEffectType
  public const
    ///<summary />
    Event = 0;
    ///<summary />
    Call = 1;
    ///<summary />
    Verb = 2;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents the type of an animation effect for chart's element.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectChartMajorGroupingType')]
  DNEffectChartMajorGroupingType = type Integer;
  DNEffectChartMajorGroupingTypeHelper = record helper for DNEffectChartMajorGroupingType
  public const
    ///<summary>
    ///  Animate chart by series
    ///</summary>
    BySeries = 0;
    ///<summary>
    ///  Animate chart by category
    ///</summary>
    ByCategory = 1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents the type of an animation effect for chart's element in series or category.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectChartMinorGroupingType')]
  DNEffectChartMinorGroupingType = type Integer;
  DNEffectChartMinorGroupingTypeHelper = record helper for DNEffectChartMinorGroupingType
  public const
    ///<summary>
    ///  Animate chart by element in series
    ///</summary>
    ByElementInSeries = 0;
    ///<summary>
    ///  Animate chart by element in category
    ///</summary>
    ByElementInCategory = 1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent fill types.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectFillType')]
  DNEffectFillType = type Integer;
  DNEffectFillTypeHelper = record helper for DNEffectFillType
  public const
    ///<summary />
    Remove = 0;
    ///<summary />
    Freeze = 1;
    ///<summary />
    Hold = 2;
    ///<summary />
    Transition = 3;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent effect class types.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectPresetClassType')]
  DNEffectPresetClassType = type Integer;
  DNEffectPresetClassTypeHelper = record helper for DNEffectPresetClassType
  public const
    ///<summary><p>Entrance effects class.</p>
    ///  <p>Target shape types: All</p>
    ///</summary>
    Entrance = 0;
    ///<summary><p>Exit effects class.</p>
    ///  <p>Target shape types: All</p>
    ///</summary>
    Exit_ = 1;
    ///<summary><p>Emphasis effects class.</p>
    ///  <p>Target shape types: All</p>
    ///</summary>
    Emphasis = 2;
    ///<summary><p>Motion Paths class.</p>
    ///  <p>Target shape types: All</p>
    ///</summary>
    Path = 3;
    ///<summary><p>Media effects class.</p>
    ///  <p>Target shape types: <see cref="T:Aspose.Slides.IVideoFrame" />
    ///  , <see cref="T:Aspose.Slides.IAudioFrame" />
    ///</p>
    ///</summary>
    MediaCall = 4;
    ///<summary><p>OLE Action Verbs class.</p>
    ///  <p>Target shape types: <see cref="T:Aspose.Slides.IOleObjectFrame" />
    ///</p>
    ///</summary>
    OLEActionVerbs = 5;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent restart types for timing.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectRestartType')]
  DNEffectRestartType = type Integer;
  DNEffectRestartTypeHelper = record helper for DNEffectRestartType
  public const
    ///<summary />
    Always = 0;
    ///<summary />
    WhenNotActive = 1;
    ///<summary />
    Never = 2;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents subtypes of animation effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectSubtype')]
  DNEffectSubtype = type Integer;
  DNEffectSubtypeHelper = record helper for DNEffectSubtype
  public const
    ///<summary />
    None = 0;
    ///<summary />
    Across = 1;
    ///<summary />
    Bottom = 2;
    ///<summary />
    BottomLeft = 3;
    ///<summary />
    BottomRight = 4;
    ///<summary />
    Center = 5;
    ///<summary />
    Clockwise = 6;
    ///<summary />
    CounterClockwise = 7;
    ///<summary />
    GradualAndCycleClockwise = 8;
    ///<summary />
    GradualAndCycleCounterClockwise = 9;
    ///<summary />
    Down = 10;
    ///<summary />
    DownLeft = 11;
    ///<summary />
    DownRight = 12;
    ///<summary />
    FontAllCaps = 13;
    ///<summary />
    FontBold = 14;
    ///<summary />
    FontItalic = 15;
    ///<summary />
    FontShadow = 16;
    ///<summary />
    FontStrikethrough = 17;
    ///<summary />
    FontUnderline = 18;
    ///<summary />
    Gradual = 19;
    ///<summary />
    Horizontal = 20;
    ///<summary />
    HorizontalIn = 21;
    ///<summary />
    HorizontalOut = 22;
    ///<summary />
    In_ = 23;
    ///<summary />
    InBottom = 24;
    ///<summary />
    InCenter = 25;
    ///<summary />
    InSlightly = 26;
    ///<summary />
    Instant = 27;
    ///<summary />
    Left = 28;
    ///<summary />
    OrdinalMask = 29;
    ///<summary />
    Out_ = 30;
    ///<summary />
    OutBottom = 31;
    ///<summary />
    OutCenter = 32;
    ///<summary />
    OutSlightly = 33;
    ///<summary />
    Right = 34;
    ///<summary />
    Slightly = 35;
    ///<summary />
    Top = 36;
    ///<summary />
    TopLeft = 37;
    ///<summary />
    TopRight = 38;
    ///<summary />
    Up = 39;
    ///<summary />
    UpLeft = 40;
    ///<summary />
    UpRight = 41;
    ///<summary />
    Vertical = 42;
    ///<summary />
    VerticalIn = 43;
    ///<summary />
    VerticalOut = 44;
    ///<summary />
    Wheel1 = 45;
    ///<summary />
    Wheel2 = 46;
    ///<summary />
    Wheel3 = 47;
    ///<summary />
    Wheel4 = 48;
    ///<summary />
    Wheel8 = 49;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent trigger type of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectTriggerType')]
  DNEffectTriggerType = type Integer;
  DNEffectTriggerTypeHelper = record helper for DNEffectTriggerType
  public const
    ///<summary />
    AfterPrevious = 0;
    ///<summary />
    OnClick = 1;
    ///<summary />
    WithPrevious = 2;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents the type of an animation effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.EffectType')]
  DNEffectType = type Integer;
  DNEffectTypeHelper = record helper for DNEffectType
  public const
    ///<summary><p>Appear effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Appear = 0;
    ///<summary><p>CurveUpDown effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    CurveUpDown = 1;
    ///<summary><p>Ascend effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Ascend = 2;
    ///<summary><p>Blast effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Blast = 3;
    ///<summary><p>Blinds effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Horizontal</li><li>EffectSubtype.Vertical</li></ul></summary>
    Blinds = 4;
    ///<summary><p>Blink effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Blink = 5;
    ///<summary><p>BoldFlash effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    BoldFlash = 6;
    ///<summary><p>BoldReveal effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    BoldReveal = 7;
    ///<summary><p>Boomerang effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Boomerang = 8;
    ///<summary><p>Bounce effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Bounce = 9;
    ///<summary><p>Box effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.In</li><li>EffectSubtype.Out</li></ul></summary>
    Box = 10;
    ///<summary><p>BrushOnColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    BrushOnColor = 11;
    ///<summary><p>BrushOnUnderline effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    BrushOnUnderline = 12;
    ///<summary><p>CenterRevolve effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    CenterRevolve = 13;
    ///<summary><p>ChangeFillColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Instant</li><li>EffectSubtype.Gradual</li><li>EffectSubtype.GradualAndCycleClockwise</li><li>EffectSubtype.GradualAndCycleCounterClockwise</li></ul></summary>
    ChangeFillColor = 14;
    ///<summary><p>ChangeFont effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Instant</li><li>EffectSubtype.Gradual</li></ul></summary>
    ChangeFont = 15;
    ///<summary><p>ChangeFontColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Instant</li><li>EffectSubtype.Gradual</li><li>EffectSubtype.GradualAndCycleClockwise</li><li>EffectSubtype.GradualAndCycleCounterClockwise</li></ul></summary>
    ChangeFontColor = 16;
    ///<summary><p>ChangeFontSize effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Instant</li><li>EffectSubtype.Gradual</li></ul></summary>
    ChangeFontSize = 17;
    ///<summary><p>ChangeFontSize effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.FontBold</li><li>EffectSubtype.FontItalic</li><li>EffectSubtype.FontUnderline</li></ul></summary>
    ChangeFontStyle = 18;
    ///<summary><p>ChangeLineColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Instant</li><li>EffectSubtype.Gradual</li><li>EffectSubtype.GradualAndCycleClockwise</li><li>EffectSubtype.GradualAndCycleCounterClockwise</li></ul></summary>
    ChangeLineColor = 19;
    ///<summary><p>Checkerboard effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Vertical</li><li>EffectSubtype.Across</li></ul></summary>
    Checkerboard = 20;
    ///<summary><p>ColorBlend effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.In</li><li>EffectSubtype.Out</li></ul></summary>
    Circle = 21;
    ///<summary><p>BrushOnUnderline effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    ColorBlend = 22;
    ///<summary><p>Checkerboard effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    ColorTypewriter = 23;
    ///<summary><p>ColorWave effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    ColorWave = 24;
    ///<summary><p>ComplementaryColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    ComplementaryColor = 25;
    ///<summary><p>ComplementaryColor2 effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    ComplementaryColor2 = 26;
    ///<summary><p>Compress effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Compress = 27;
    ///<summary><p>ContrastingColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    ContrastingColor = 28;
    ///<summary><p>Crawl effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Right</li><li>EffectSubtype.Left</li><li>EffectSubtype.Top</li><li>EffectSubtype.Bottom</li></ul></summary>
    Crawl = 29;
    ///<summary><p>Credits effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Credits = 30;
    ///<summary><p>Custom effect.</p>
    ///</summary>
    Custom = 31;
    ///<summary><p>Darken effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Darken = 32;
    ///<summary><p>Desaturate effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Desaturate = 33;
    ///<summary><p>Descend effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Descend = 34;
    ///<summary><p>Diamond effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.In</li><li>EffectSubtype.Out</li></ul></summary>
    Diamond = 35;
    ///<summary><p>Dissolve effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Dissolve = 36;
    ///<summary><p>Dissolve effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    EaseInOut = 37;
    ///<summary><p>Expand effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Expand = 38;
    ///<summary><p>Fade effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Fade = 39;
    ///<summary><p>FadedSwivel effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    FadedSwivel = 40;
    ///<summary><p>FadedZoom effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    FadedZoom = 41;
    ///<summary><p>FlashBulb effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    FlashBulb = 42;
    ///<summary><p>FlashOnce effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    FlashOnce = 43;
    ///<summary><p>Flicker effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Flicker = 44;
    ///<summary><p>Flip effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Flip = 45;
    ///<summary><p>Float effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Float = 46;
    ///<summary><p>Fly effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Right</li><li>EffectSubtype.Left</li><li>EffectSubtype.Top</li><li>EffectSubtype.Bottom</li><li>EffectSubtype.TopLeft</li><li>EffectSubtype.TopRight</li><li>EffectSubtype.BottomLeft</li><li>EffectSubtype.BottomRight</li></ul></summary>
    Fly = 47;
    ///<summary><p>Fold effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Fold = 48;
    ///<summary><p>Glide effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Glide = 49;
    ///<summary><p>GrowAndTurn effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    GrowAndTurn = 50;
    ///<summary><p>GrowShrink effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    GrowShrink = 51;
    ///<summary><p>GrowWithColor effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    GrowWithColor = 52;
    ///<summary><p>Lighten effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Lighten = 53;
    ///<summary><p>LightSpeed effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    LightSpeed = 54;
    ///<summary><p>MediaPause effect. Class <b>Media</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    MediaPause = 55;
    ///<summary><p>MediaPlay effect. Class <b>Media</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    MediaPlay = 56;
    ///<summary><p>MediaStop effect. Class <b>Media</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    MediaStop = 57;
    ///<summary><p>Path4PointStar effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Path4PointStar = 58;
    ///<summary><p>Path5PointStar effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Path5PointStar = 59;
    ///<summary><p>Path6PointStar effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Path6PointStar = 60;
    ///<summary><p>Path8PointStar effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Path8PointStar = 61;
    ///<summary><p>PathArcDown effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathArcDown = 62;
    ///<summary><p>PathArcLeft effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathArcLeft = 63;
    ///<summary><p>PathArcRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathArcRight = 64;
    ///<summary><p>PathArcUp effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathArcUp = 65;
    ///<summary><p>PathBean effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathBean = 66;
    ///<summary><p>PathBounceLeft effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathBounceLeft = 67;
    ///<summary><p>PathBounceRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathBounceRight = 68;
    ///<summary><p>PathBuzzsaw effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathBuzzsaw = 69;
    ///<summary><p>PathCircle effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCircle = 70;
    ///<summary><p>PathCrescentMoon effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCrescentMoon = 71;
    ///<summary><p>PathCurvedSquare effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCurvedSquare = 72;
    ///<summary><p>PathCurvedX effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCurvedX = 73;
    ///<summary><p>PathCurvyLeft effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCurvyLeft = 74;
    ///<summary><p>PathCurvyRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCurvyRight = 75;
    ///<summary><p>PathCurvyStar effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathCurvyStar = 76;
    ///<summary><p>PathDecayingWave effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathDecayingWave = 77;
    ///<summary><p>PathDiagonalDownRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathDiagonalDownRight = 78;
    ///<summary><p>PathDiagonalUpRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathDiagonalUpRight = 79;
    ///<summary><p>PathDiamond effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathDiamond = 80;
    ///<summary><p>PathDown effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathDown = 81;
    ///<summary><p>PathEqualTriangle effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathEqualTriangle = 82;
    ///<summary><p>PathFigure8Four effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathFigure8Four = 83;
    ///<summary><p>PathFootball effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathFootball = 84;
    ///<summary><p>PathFunnel effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathFunnel = 85;
    ///<summary><p>PathHeart effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathHeart = 86;
    ///<summary><p>PathHeartbeat effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathHeartbeat = 87;
    ///<summary><p>PathHexagon effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathHexagon = 88;
    ///<summary><p>PathHorizontalFigure8 effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathHorizontalFigure8 = 89;
    ///<summary><p>PathInvertedSquare effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathInvertedSquare = 90;
    ///<summary><p>PathInvertedTriangle effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathInvertedTriangle = 91;
    ///<summary><p>PathLeft effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathLeft = 92;
    ///<summary><p>PathLoopdeLoop effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathLoopdeLoop = 93;
    ///<summary><p>PathNeutron effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathNeutron = 94;
    ///<summary><p>PathOctagon effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathOctagon = 95;
    ///<summary><p>PathParallelogram effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathParallelogram = 96;
    ///<summary><p>PathPeanut effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathPeanut = 97;
    ///<summary><p>PathPentagon effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathPentagon = 98;
    ///<summary><p>PathPlus effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathPlus = 99;
    ///<summary><p>PathPointyStar effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathPointyStar = 100;
    ///<summary><p>PathRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathRight = 101;
    ///<summary><p>PathRightTriangle effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathRightTriangle = 102;
    ///<summary><p>PathSCurve1 effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSCurve1 = 103;
    ///<summary><p>PathSCurve2 effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSCurve2 = 104;
    ///<summary><p>PathSineWave effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSineWave = 105;
    ///<summary><p>PathSpiralLeft effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSpiralLeft = 106;
    ///<summary><p>PathSpiralRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSpiralRight = 107;
    ///<summary><p>PathSpring effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSpring = 108;
    ///<summary><p>PathSquare effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSquare = 109;
    ///<summary><p>PathStairsDown effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathStairsDown = 110;
    ///<summary><p>PathSwoosh effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathSwoosh = 111;
    ///<summary><p>PathTeardrop effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathTeardrop = 112;
    ///<summary><p>PathTrapezoid effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathTrapezoid = 113;
    ///<summary><p>PathTurnDown effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathTurnDown = 114;
    ///<summary><p>PathTurnRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathTurnRight = 115;
    ///<summary><p>PathTurnUp effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathTurnUp = 116;
    ///<summary><p>PathTurnUpRight effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathTurnUpRight = 117;
    ///<summary><p>PathUp effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathUp = 118;
    ///<summary><p>PathUser effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathUser = 119;
    ///<summary><p>PathVerticalFigure8 effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathVerticalFigure8 = 120;
    ///<summary><p>PathWave effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathWave = 121;
    ///<summary><p>PathZigzag effect. Class <b>Path</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    PathZigzag = 122;
    ///<summary><p>Peek effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Peek = 123;
    ///<summary><p>Pinwheel effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Pinwheel = 124;
    ///<summary><p>Plus effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.In</li><li>EffectSubtype.Out</li></ul></summary>
    Plus = 125;
    ///<summary><p>RandomBars effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Horizontal</li><li>EffectSubtype.Vertical</li></ul></summary>
    RandomBars = 126;
    ///<summary><p>RandomEffects effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    RandomEffects = 127;
    ///<summary><p>RandomEffects effect. Class <b>Entrance</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    RiseUp = 128;
    ///<summary><p>Shimmer effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Shimmer = 129;
    ///<summary><p>RandomEffects effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Sling = 130;
    ///<summary><p>Spin effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Spin = 131;
    ///<summary><p>Spinner effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Spinner = 132;
    ///<summary><p>Spiral effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Spiral = 133;
    ///<summary><p>Split effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.HorizontalIn</li><li>EffectSubtype.HorizontalOut</li><li>EffectSubtype.VerticalIn</li><li>EffectSubtype.VerticalOut</li></ul></summary>
    Split = 134;
    ///<summary><p>Stretch effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Right</li><li>EffectSubtype.Left</li><li>EffectSubtype.Top</li><li>EffectSubtype.Bottom</li><li>EffectSubtype.Across</li></ul></summary>
    Stretch = 135;
    ///<summary><p>Stretch effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.UpLeft</li><li>EffectSubtype.UpRight</li><li>EffectSubtype.DownLeft</li><li>EffectSubtype.DownRight</li></ul></summary>
    Strips = 136;
    ///<summary><p>StyleEmphasis effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    StyleEmphasis = 137;
    ///<summary><p>Swish effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Swish = 138;
    ///<summary><p>Swivel effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Horizontal</li><li>EffectSubtype.Vertical</li></ul></summary>
    Swivel = 139;
    ///<summary><p>Teeter effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Teeter = 140;
    ///<summary><p>Thread effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Thread = 141;
    ///<summary><p>Transparency effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Transparency = 142;
    ///<summary><p>Unfold effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Unfold = 143;
    ///<summary><p>VerticalGrow effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    VerticalGrow = 144;
    ///<summary><p>Wave effect. Class <b>Emphasis</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Wave = 145;
    ///<summary><p>Wedge effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Wedge = 146;
    ///<summary><p>Wedge effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Wheel1</li><li>EffectSubtype.Wheel2</li><li>EffectSubtype.Wheel3</li><li>EffectSubtype.Wheel4</li><li>EffectSubtype.Wheel8</li></ul></summary>
    Wheel = 147;
    ///<summary><p>Whip effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Whip = 148;
    ///<summary><p>Wedge effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.Top</li><li>EffectSubtype.Right</li><li>EffectSubtype.Bottom</li><li>EffectSubtype.Left</li></ul></summary>
    Wipe = 149;
    ///<summary><p>Magnify effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    Magnify = 150;
    ///<summary><p>Zoom effect. Class <b>Entrance</b>
    ///  or <b>Exit</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.In</li><li>EffectSubtype.Out</li><li>EffectSubtype.InCenter - only for Entrance class</li><li>EffectSubtype.OutBottom - only for Entrance class</li><li>EffectSubtype.OutSlightly</li><li>EffectSubtype.InSlightly</li><li>EffectSubtype.OutCenter - only for Exit class</li><li>EffectSubtype.InBottom - only for Exit class</li></ul></summary>
    Zoom = 151;
    ///<summary><p>OLEObjectShow effect. Class <b>OLEActionVerbs</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    OLEObjectShow = 152;
    ///<summary><p>OLEObjectEdit effect. Class <b>OLEActionVerbs</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    OLEObjectEdit = 153;
    ///<summary><p>OLEObjectOpen effect. Class <b>OLEActionVerbs</b>
    ///  .</p>
    ///  <p>Valid subtypes:</p>
    ///<ul><li>EffectSubtype.None</li></ul></summary>
    OLEObjectOpen = 154;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents filter reveal type.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.FilterEffectRevealType')]
  DNFilterEffectRevealType = type Integer;
  DNFilterEffectRevealTypeHelper = record helper for DNFilterEffectRevealType
  public const
    ///<summary />
    None = 0;
    ///<summary />
    In_ = 1;
    ///<summary />
    Out_ = 2;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents filter effect subtypes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.FilterEffectSubtype')]
  DNFilterEffectSubtype = type Integer;
  DNFilterEffectSubtypeHelper = record helper for DNFilterEffectSubtype
  public const
    ///<summary />
    None = 0;
    ///<summary />
    Across = 1;
    ///<summary />
    Down = 2;
    ///<summary />
    DownLeft = 3;
    ///<summary />
    DownRight = 4;
    ///<summary />
    FromBottom = 5;
    ///<summary />
    FromLeft = 6;
    ///<summary />
    FromRight = 7;
    ///<summary />
    FromTop = 8;
    ///<summary />
    Horizontal = 9;
    ///<summary />
    In_ = 10;
    ///<summary />
    InHorizontal = 11;
    ///<summary />
    InVertical = 12;
    ///<summary />
    Left = 13;
    ///<summary />
    Out_ = 14;
    ///<summary />
    OutHorizontal = 15;
    ///<summary />
    OutVertical = 16;
    ///<summary />
    Right = 17;
    ///<summary />
    Spokes1 = 18;
    ///<summary />
    Spokes2 = 19;
    ///<summary />
    Spokes3 = 20;
    ///<summary />
    Spokes4 = 21;
    ///<summary />
    Spokes8 = 22;
    ///<summary />
    Up = 23;
    ///<summary />
    UpLeft = 24;
    ///<summary />
    UpRight = 25;
    ///<summary />
    Vertical = 26;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents filter effect types.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.FilterEffectType')]
  DNFilterEffectType = type Integer;
  DNFilterEffectTypeHelper = record helper for DNFilterEffectType
  public const
    ///<summary />
    None = 0;
    ///<summary />
    Barn = 1;
    ///<summary />
    Blinds = 2;
    ///<summary />
    Box = 3;
    ///<summary />
    Checkerboard = 4;
    ///<summary />
    Circle = 5;
    ///<summary />
    Diamond = 6;
    ///<summary />
    Dissolve = 7;
    ///<summary />
    Fade = 8;
    ///<summary />
    Image = 9;
    ///<summary />
    Pixelate = 10;
    ///<summary />
    Plus = 11;
    ///<summary />
    RandomBar = 12;
    ///<summary />
    Slide = 13;
    ///<summary />
    Stretch = 14;
    ///<summary />
    Strips = 15;
    ///<summary />
    Wedge = 16;
    ///<summary />
    Wheel = 17;
    ///<summary />
    Wipe = 18;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent types of command for animation motion effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionCommandPathType')]
  DNMotionCommandPathType = type Integer;
  DNMotionCommandPathTypeHelper = record helper for DNMotionCommandPathType
  public const
    ///<summary />
    MoveTo = 0;
    ///<summary />
    LineTo = 1;
    ///<summary />
    CurveTo = 2;
    ///<summary />
    CloseLoop = 3;
    ///<summary />
    End_ = 4;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Specifies what the origin of the motion path is relative to.
  ///  Such as the layout of the slide, or the parent.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionOriginType')]
  DNMotionOriginType = type Integer;
  DNMotionOriginTypeHelper = record helper for DNMotionOriginType
  public const
    ///<summary />
    Parent = 0;
    ///<summary />
    Layout = 1;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Specifies how the motion path moves when the target shape is moved
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionPathEditMode')]
  DNMotionPathEditMode = type Integer;
  DNMotionPathEditModeHelper = record helper for DNMotionPathEditMode
  public const
    ///<summary />
    Relative = 0;
    ///<summary />
    Fixed = 1;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent types of points in animation motion path.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionPathPointsType')]
  DNMotionPathPointsType = type Integer;
  DNMotionPathPointsTypeHelper = record helper for DNMotionPathPointsType
  public const
    ///<summary />
    None = 0;
    ///<summary />
    Auto = 1;
    ///<summary />
    Corner = 2;
    ///<summary />
    Straight = 3;
    ///<summary />
    Smooth = 4;
    ///<summary />
    CurveAuto = 5;
    ///<summary />
    CurveCorner = 6;
    ///<summary />
    CurveStraight = 7;
    ///<summary />
    CurveSmooth = 8;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent calc mode for animation property.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.PropertyCalcModeType')]
  DNPropertyCalcModeType = type Integer;
  DNPropertyCalcModeTypeHelper = record helper for DNPropertyCalcModeType
  public const
    ///<summary />
    Discrete = 0;
    ///<summary />
    Linear = 1;
    ///<summary />
    Formula = 2;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent property value types.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.PropertyValueType')]
  DNPropertyValueType = type Integer;
  DNPropertyValueTypeHelper = record helper for DNPropertyValueType
  public const
    ///<summary />
    String_ = 0;
    ///<summary />
    Number = 1;
    ///<summary />
    Color = 2;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define how a sound is played.
  ///</summary>
  [DNTypeName('Aspose.Slides.AudioPlayModePreset')]
  DNAudioPlayModePreset = type Integer;
  DNAudioPlayModePresetHelper = record helper for DNAudioPlayModePreset
  public const
    ///<summary>
    ///  Play automatically.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Play only when the icon is clicked on.
    ///</summary>
    OnClick = 1;
    ///<summary>
    ///  Play on all slides.
    ///  Please use <see cref="P:Aspose.Slides.IAudioFrame.PlayAcrossSlides" />
    ///  property instead.
    ///<remarks>This element is out of date since PowerPoint 2013.</remarks>
    ///</summary>
    AllSlides = 2;
    ///<summary>
    ///  Play automatically with a click.
    ///</summary>
    InClickSequence = 3;
    ///<summary></summary>
    Mixed = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define audio volume.
  ///</summary>
  [DNTypeName('Aspose.Slides.AudioVolumeMode')]
  DNAudioVolumeMode = type Integer;
  DNAudioVolumeModeHelper = record helper for DNAudioVolumeMode
  public const
    ///<summary>
    ///  Zero sound volume.
    ///</summary>
    Mute = 0;
    ///<summary>
    ///  Low sound volume.
    ///</summary>
    Low = 1;
    ///<summary>
    ///  Medium sound volume.
    ///</summary>
    Medium = 2;
    ///<summary>
    ///  Loud sound volume.
    ///</summary>
    Loud = 3;
    ///<summary></summary>
    Mixed = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines the slide background fill source.
  ///</summary>
  [DNTypeName('Aspose.Slides.BackgroundType')]
  DNBackgroundType = type Integer;
  DNBackgroundTypeHelper = record helper for DNBackgroundType
  public const
    ///<summary></summary>
    Themed = 0;
    ///<summary></summary>
    OwnBackground = 1;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define 3D bevel of shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.BevelPresetType')]
  DNBevelPresetType = type Integer;
  DNBevelPresetTypeHelper = record helper for DNBevelPresetType
  public const
    ///<summary />
    Angle = 0;
    ///<summary />
    ArtDeco = 1;
    ///<summary />
    Circle = 2;
    ///<summary />
    Convex = 3;
    ///<summary />
    CoolSlant = 4;
    ///<summary />
    Cross = 5;
    ///<summary />
    Divot = 6;
    ///<summary />
    HardEdge = 7;
    ///<summary />
    RelaxedInset = 8;
    ///<summary />
    Riblet = 9;
    ///<summary />
    Slope = 10;
    ///<summary />
    SoftRound = 11;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines how colored shape should be transformed into black and white.
  ///</summary>
  [DNTypeName('Aspose.Slides.BlackWhiteMode')]
  DNBlackWhiteMode = type Integer;
  DNBlackWhiteModeHelper = record helper for DNBlackWhiteMode
  public const
    ///<summary>
    ///  The object is rendered with normal coloring
    ///</summary>
    Color = 0;
    ///<summary>
    ///  The object is rendered with automatic coloring
    ///</summary>
    Automatic = 1;
    ///<summary>
    ///  The object is rendered with gray coloring
    ///</summary>
    Gray = 2;
    ///<summary>
    ///  The object is rendered with light gray coloring
    ///</summary>
    LightGray = 3;
    ///<summary>
    ///  The object is rendered with inverse gray coloring
    ///</summary>
    InverseGray = 4;
    ///<summary>
    ///  The object is rendered with gray and white coloring
    ///</summary>
    GrayWhite = 5;
    ///<summary>
    ///  The object is rendered with black and gray coloring
    ///</summary>
    BlackGray = 6;
    ///<summary>
    ///  The object is rendered with black and white coloring
    ///</summary>
    BlackWhite = 7;
    ///<summary>
    ///  The object is rendered only with black coloring
    ///</summary>
    Black = 8;
    ///<summary>
    ///  The object is rendered with white coloring
    ///</summary>
    White = 9;
    ///<summary>
    ///  The object is not rendered
    ///</summary>
    Hidden = 10;
    ///<summary>
    ///  The property isn't set
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the type of the extended bullets.
  ///</summary>
  [DNTypeName('Aspose.Slides.BulletType')]
  DNBulletType = type Integer;
  DNBulletTypeHelper = record helper for DNBulletType
  public const
    ///<summary></summary>
    None = 0;
    ///<summary>
    ///  Sysmbol bullets.
    ///</summary>
    Symbol = 1;
    ///<summary>
    ///  Numbered bullets.
    ///</summary>
    Numbered = 2;
    ///<summary>
    ///  Picture bullets.
    ///</summary>
    Picture = 3;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define camera preset type.
  ///</summary>
  [DNTypeName('Aspose.Slides.CameraPresetType')]
  DNCameraPresetType = type Integer;
  DNCameraPresetTypeHelper = record helper for DNCameraPresetType
  public const
    ///<summary />
    IsometricBottomDown = 0;
    ///<summary />
    IsometricBottomUp = 1;
    ///<summary />
    IsometricLeftDown = 2;
    ///<summary />
    IsometricLeftUp = 3;
    ///<summary />
    IsometricOffAxis1Left = 4;
    ///<summary />
    IsometricOffAxis1Right = 5;
    ///<summary />
    IsometricOffAxis1Top = 6;
    ///<summary />
    IsometricOffAxis2Left = 7;
    ///<summary />
    IsometricOffAxis2Right = 8;
    ///<summary />
    IsometricOffAxis2Top = 9;
    ///<summary />
    IsometricOffAxis3Bottom = 10;
    ///<summary />
    IsometricOffAxis3Left = 11;
    ///<summary />
    IsometricOffAxis3Right = 12;
    ///<summary />
    IsometricOffAxis4Bottom = 13;
    ///<summary />
    IsometricOffAxis4Left = 14;
    ///<summary />
    IsometricOffAxis4Right = 15;
    ///<summary />
    IsometricRightDown = 16;
    ///<summary />
    IsometricRightUp = 17;
    ///<summary />
    IsometricTopDown = 18;
    ///<summary />
    IsometricTopUp = 19;
    ///<summary />
    LegacyObliqueBottom = 20;
    ///<summary />
    LegacyObliqueBottomLeft = 21;
    ///<summary />
    LegacyObliqueBottomRight = 22;
    ///<summary />
    LegacyObliqueFront = 23;
    ///<summary />
    LegacyObliqueLeft = 24;
    ///<summary />
    LegacyObliqueRight = 25;
    ///<summary />
    LegacyObliqueTop = 26;
    ///<summary />
    LegacyObliqueTopLeft = 27;
    ///<summary />
    LegacyObliqueTopRight = 28;
    ///<summary />
    LegacyPerspectiveBottom = 29;
    ///<summary />
    LegacyPerspectiveBottomLeft = 30;
    ///<summary />
    LegacyPerspectiveBottomRight = 31;
    ///<summary />
    LegacyPerspectiveFront = 32;
    ///<summary />
    LegacyPerspectiveLeft = 33;
    ///<summary />
    LegacyPerspectiveRight = 34;
    ///<summary />
    LegacyPerspectiveTop = 35;
    ///<summary />
    LegacyPerspectiveTopLeft = 36;
    ///<summary />
    LegacyPerspectiveTopRight = 37;
    ///<summary />
    ObliqueBottom = 38;
    ///<summary />
    ObliqueBottomLeft = 39;
    ///<summary />
    ObliqueBottomRight = 40;
    ///<summary />
    ObliqueLeft = 41;
    ///<summary />
    ObliqueRight = 42;
    ///<summary />
    ObliqueTop = 43;
    ///<summary />
    ObliqueTopLeft = 44;
    ///<summary />
    ObliqueTopRight = 45;
    ///<summary />
    OrthographicFront = 46;
    ///<summary />
    PerspectiveAbove = 47;
    ///<summary />
    PerspectiveAboveLeftFacing = 48;
    ///<summary />
    PerspectiveAboveRightFacing = 49;
    ///<summary />
    PerspectiveBelow = 50;
    ///<summary />
    PerspectiveContrastingLeftFacing = 51;
    ///<summary />
    PerspectiveContrastingRightFacing = 52;
    ///<summary />
    PerspectiveFront = 53;
    ///<summary />
    PerspectiveHeroicExtremeLeftFacing = 54;
    ///<summary />
    PerspectiveHeroicExtremeRightFacing = 55;
    ///<summary />
    PerspectiveHeroicLeftFacing = 56;
    ///<summary />
    PerspectiveHeroicRightFacing = 57;
    ///<summary />
    PerspectiveLeft = 58;
    ///<summary />
    PerspectiveRelaxed = 59;
    ///<summary />
    PerspectiveRelaxedModerately = 60;
    ///<summary />
    PerspectiveRight = 61;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents aggregation type of category axis. Used with Histogram or HistogramPareto series only.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.AxisAggregationType')]
  DNAxisAggregationType = type Integer;
  DNAxisAggregationTypeHelper = record helper for DNAxisAggregationType
  public const
    ///<summary>
    ///  Aggregate by categories
    ///</summary>
    ByCategory = 0;
    ///<summary>
    ///  Aggregate categories automatically.
    ///</summary>
    Automatic = 1;
    ///<summary>
    ///  Aggregate categories by bin width. Property IAxis.BinWidth must be setted.
    ///</summary>
    ByBinWidth = 2;
    ///<summary>
    ///  Aggregate categories by number of bins. Property IAxis.NumberOfBins must be setted.
    ///</summary>
    ByNumberOfBins = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines a position of axis.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.AxisPositionType')]
  DNAxisPositionType = type Integer;
  DNAxisPositionTypeHelper = record helper for DNAxisPositionType
  public const
    ///<summary>
    ///  Specifies that the axis shall be displayed at the bottom of the plot area.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Specifies that the axis shall be displayed at the left of the plot area.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Specifies that the axis shall be displayed at the right of the plot area.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Specifies that the axis shall be displayed at the top of the plot area.
    ///</summary>
    Top = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Specifies the possible ways to represent data as bubble chart sizes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.BubbleSizeRepresentationType')]
  DNBubbleSizeRepresentationType = type Integer;
  DNBubbleSizeRepresentationTypeHelper = record helper for DNBubbleSizeRepresentationType
  public const
    ///<summary>
    ///  Specifies the area of the bubbles shall be proportional to the bubble size value.
    ///</summary>
    Area = 0;
    ///<summary>
    ///  Specifies the radius of the bubbles shall be proportional to the bubble size value.
    ///</summary>
    Width = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a type of a category axis.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.CategoryAxisType')]
  DNCategoryAxisType = type Integer;
  DNCategoryAxisTypeHelper = record helper for DNCategoryAxisType
  public const
    ///<summary>
    ///  Specifies category axis is a text axis.
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Specifies category axis is a date axis.
    ///</summary>
    Date = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a type of data source of the chart
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataSourceType')]
  DNChartDataSourceType = type Integer;
  DNChartDataSourceTypeHelper = record helper for DNChartDataSourceType
  public const
    ///<summary>
    ///  Internal data source.
    ///</summary>
    InternalWorkbook = 0;
    ///<summary>
    ///  External data source.
    ///</summary>
    ExternalWorkbook = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a shape of chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartShapeType')]
  DNChartShapeType = type Integer;
  DNChartShapeTypeHelper = record helper for DNChartShapeType
  public const
    ///<summary>
    ///  Specifies the chart shall be drawn with a box shape.
    ///</summary>
    Box = 0;
    ///<summary>
    ///  Specifies the chart shall be drawn as a cone, with the base of the cone on the floor and the point of the cone at the top of the data marker.
    ///</summary>
    Cone = 1;
    ///<summary>
    ///  Specifies the chart shall be drawn with truncated cones such that the point of the cone would be the maximum data value.
    ///</summary>
    ConeToMax = 2;
    ///<summary>
    ///  Specifies the chart shall be drawn as a cylinder.
    ///</summary>
    Cylinder = 3;
    ///<summary>
    ///  Specifies the chart shall be drawn as a rectangular pyramid, with the base of the pyramid on the floor and the point of the pyramid at the top of the data marker.
    ///</summary>
    Pyramid = 4;
    ///<summary>
    ///  Specifies the chart shall be drawn with truncated cones such that the point of the cone would be the maximum data value.
    ///</summary>
    PyramidToMaximum = 5;
    ///<summary>
    ///  Chart shape is not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a type of chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartType')]
  DNChartType = type Integer;
  DNChartTypeHelper = record helper for DNChartType
  public const
    ///<summary>
    ///  Represents Clustered Column Chart.
    ///</summary>
    ClusteredColumn = 0;
    ///<summary>
    ///  Represents Stacked Column Chart.
    ///</summary>
    StackedColumn = 1;
    ///<summary>
    ///  Represents 100% Stacked Column Chart.
    ///</summary>
    PercentsStackedColumn = 2;
    ///<summary>
    ///  Represents 3D Colustered Column Chart.
    ///</summary>
    ClusteredColumn3D = 3;
    ///<summary>
    ///  Represents 3D Stacked Column Chart.
    ///</summary>
    StackedColumn3D = 4;
    ///<summary>
    ///  Represents 3D 100% Stacked Column Chart.
    ///</summary>
    PercentsStackedColumn3D = 5;
    ///<summary>
    ///  Represents 3D Column Chart.
    ///</summary>
    Column3D = 6;
    ///<summary>
    ///  Represents Cylinder Chart.
    ///</summary>
    ClusteredCylinder = 7;
    ///<summary>
    ///  Represents Stacked Cylinder Chart.
    ///</summary>
    StackedCylinder = 8;
    ///<summary>
    ///  Represents 100% Stacked Cylinder Chart.
    ///</summary>
    PercentsStackedCylinder = 9;
    ///<summary>
    ///  Represents 3D Cylindrical Column Chart.
    ///</summary>
    Cylinder3D = 10;
    ///<summary>
    ///  Represents Cone Chart.
    ///</summary>
    ClusteredCone = 11;
    ///<summary>
    ///  Represents Stacked Cone Chart.
    ///</summary>
    StackedCone = 12;
    ///<summary>
    ///  Represents 100% Stacked Cone Chart.
    ///</summary>
    PercentsStackedCone = 13;
    ///<summary>
    ///  Represents 3D Conical Column Chart.
    ///</summary>
    Cone3D = 14;
    ///<summary>
    ///  Represents Pyramid Chart.
    ///</summary>
    ClusteredPyramid = 15;
    ///<summary>
    ///  Represents Stacked Pyramid Chart.
    ///</summary>
    StackedPyramid = 16;
    ///<summary>
    ///  Represents 100% Stacked Pyramid Chart.
    ///</summary>
    PercentsStackedPyramid = 17;
    ///<summary>
    ///  Represents 3D Pyramid Column Chart.
    ///</summary>
    Pyramid3D = 18;
    ///<summary>
    ///  Represents Line Chart.
    ///</summary>
    Line = 19;
    ///<summary>
    ///  Represents Stacked Line Chart.
    ///</summary>
    StackedLine = 20;
    ///<summary>
    ///  Represents 100% Stacked Line Chart.
    ///</summary>
    PercentsStackedLine = 21;
    ///<summary>
    ///  Represents Line Chart with data markers.
    ///</summary>
    LineWithMarkers = 22;
    ///<summary>
    ///  Represents Stacked Line Chart with data markers.
    ///</summary>
    StackedLineWithMarkers = 23;
    ///<summary>
    ///  Represents 100% Stacked Line Chart with data markers.
    ///</summary>
    PercentsStackedLineWithMarkers = 24;
    ///<summary>
    ///  Represents 3D Line Chart.
    ///</summary>
    Line3D = 25;
    ///<summary>
    ///  Represents Pie Chart.
    ///</summary>
    Pie = 26;
    ///<summary>
    ///  Represents 3D Pie Chart.
    ///</summary>
    Pie3D = 27;
    ///<summary>
    ///  Represents Pie of Pie Chart.
    ///</summary>
    PieOfPie = 28;
    ///<summary>
    ///  Represents Exploded Pie Chart.
    ///</summary>
    ExplodedPie = 29;
    ///<summary>
    ///  Represents 3D Exploded Pie Chart.
    ///</summary>
    ExplodedPie3D = 30;
    ///<summary>
    ///  Represents Bar of Pie Chart.
    ///</summary>
    BarOfPie = 31;
    ///<summary>
    ///  Represents 100% Stacked Bar Chart.
    ///</summary>
    PercentsStackedBar = 32;
    ///<summary>
    ///  Represents 3D Colustered Bar Chart.
    ///</summary>
    ClusteredBar3D = 33;
    ///<summary>
    ///  Represents Clustered Bar Chart.
    ///</summary>
    ClusteredBar = 34;
    ///<summary>
    ///  Represents Stacked Bar Chart.
    ///</summary>
    StackedBar = 35;
    ///<summary>
    ///  Represents 3D Stacked Bar Chart.
    ///</summary>
    StackedBar3D = 36;
    ///<summary>
    ///  Represents 3D 100% Stacked Bar Chart.
    ///</summary>
    PercentsStackedBar3D = 37;
    ///<summary>
    ///  Represents Cylindrical Bar Chart.
    ///</summary>
    ClusteredHorizontalCylinder = 38;
    ///<summary>
    ///  Represents Stacked Cylindrical Bar Chart.
    ///</summary>
    StackedHorizontalCylinder = 39;
    ///<summary>
    ///  Represents 100% Stacked Cylindrical Bar Chart.
    ///</summary>
    PercentsStackedHorizontalCylinder = 40;
    ///<summary>
    ///  Represents Conical Bar Chart.
    ///</summary>
    ClusteredHorizontalCone = 41;
    ///<summary>
    ///  Represents Stacked Conical Bar Chart.
    ///</summary>
    StackedHorizontalCone = 42;
    ///<summary>
    ///  Represents 100% Stacked Conical Bar Chart.
    ///</summary>
    PercentsStackedHorizontalCone = 43;
    ///<summary>
    ///  Represents Pyramid Bar Chart.
    ///</summary>
    ClusteredHorizontalPyramid = 44;
    ///<summary>
    ///  Represents Stacked Pyramid Bar Chart.
    ///</summary>
    StackedHorizontalPyramid = 45;
    ///<summary>
    ///  Represents 100% Stacked Pyramid Bar Chart.
    ///</summary>
    PercentsStackedHorizontalPyramid = 46;
    ///<summary>
    ///  Represents Area Chart.
    ///</summary>
    Area = 47;
    ///<summary>
    ///  Represents Stacked Area Chart.
    ///</summary>
    StackedArea = 48;
    ///<summary>
    ///  Represents 100% Stacked Area Chart.
    ///</summary>
    PercentsStackedArea = 49;
    ///<summary>
    ///  Represents 3D Area Chart.
    ///</summary>
    Area3D = 50;
    ///<summary>
    ///  Represents 3D Stacked Area Chart.
    ///</summary>
    StackedArea3D = 51;
    ///<summary>
    ///  Represents 3D 100% Stacked Area Chart.
    ///</summary>
    PercentsStackedArea3D = 52;
    ///<summary>
    ///  Represents Scatter Chart.
    ///</summary>
    ScatterWithMarkers = 53;
    ///<summary>
    ///  Represents Scatter Chart connected by curves, with data markers.
    ///</summary>
    ScatterWithSmoothLinesAndMarkers = 54;
    ///<summary>
    ///  Represents Scatter Chart connected by curves, without data markers.
    ///</summary>
    ScatterWithSmoothLines = 55;
    ///<summary>
    ///  Represents Scatter Chart connected by lines, with data markers.
    ///</summary>
    ScatterWithStraightLinesAndMarkers = 56;
    ///<summary>
    ///  Represents Scatter Chart connected by lines, without data markers.
    ///</summary>
    ScatterWithStraightLines = 57;
    ///<summary>
    ///  Represents High-Low-Close Stock Chart.
    ///</summary>
    HighLowClose = 58;
    ///<summary>
    ///  Represents Open-High-Low-Close Stock Chart.
    ///</summary>
    OpenHighLowClose = 59;
    ///<summary>
    ///  Represents Volume-High-Low-Close Stock Chart.
    ///</summary>
    VolumeHighLowClose = 60;
    ///<summary>
    ///  Represents Volume-Open-High-Low-Close Stock Chart.
    ///</summary>
    VolumeOpenHighLowClose = 61;
    ///<summary>
    ///  Represents 3D Surface Chart.
    ///</summary>
    Surface3D = 62;
    ///<summary>
    ///  Represents Wireframe 3D Surface Chart.
    ///</summary>
    WireframeSurface3D = 63;
    ///<summary>
    ///  Represents Contour Chart.
    ///</summary>
    Contour = 64;
    ///<summary>
    ///  Represents Wireframe Contour Chart.
    ///</summary>
    WireframeContour = 65;
    ///<summary>
    ///  Represents Doughnut Chart.
    ///</summary>
    Doughnut = 66;
    ///<summary>
    ///  Represents Exploded Doughnut Chart.
    ///</summary>
    ExplodedDoughnut = 67;
    ///<summary>
    ///  Represents Bubble Chart.
    ///</summary>
    Bubble = 68;
    ///<summary>
    ///  Represents 3D Bubble Chart.
    ///</summary>
    BubbleWith3D = 69;
    ///<summary>
    ///  Represents Radar Chart.
    ///</summary>
    Radar = 70;
    ///<summary>
    ///  Represents Radar Chart with data markers.
    ///</summary>
    RadarWithMarkers = 71;
    ///<summary>
    ///  Represents Filled Radar Chart.
    ///</summary>
    FilledRadar = 72;
    ///<summary>
    ///  This value only can be returned by ChartEx.Type property.
    ///  It mean that chart has series of mixed types.
    ///</summary>
    SeriesOfMixedTypes = 73;
    ///<summary>
    ///  Represents Treemap chart.
    ///</summary>
    Treemap = 74;
    ///<summary>
    ///  Represents Sunburst chart.
    ///</summary>
    Sunburst = 75;
    ///<summary>
    ///  Represents Histogram chart.
    ///</summary>
    Histogram = 76;
    ///<summary>
    ///  Represents Pareto line series type (Histogram Pareto chart).
    ///</summary>
    ParetoLine = 77;
    ///<summary>
    ///  Represents BoxAndWhisker chart.
    ///</summary>
    BoxAndWhisker = 78;
    ///<summary>
    ///  Represents Waterfall chart.
    ///</summary>
    Waterfall = 79;
    ///<summary>
    ///  Represents Funnel chart.
    ///</summary>
    Funnel = 80;
    ///<summary>
    ///  Represents Map chart.
    ///</summary>
    Map = 81;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Enumeration of groups of combinable series types.
  ///  Each element relates to group of types of chart series that can persist simultaneously in one ChartSeriesGroup.
  ///  For example: ChartType.PercentsStackedArea series cannot be simultaneously with ChartType.StackedArea series
  ///  in one ChartSeriesGroup. But two or more ChartType.PercentsStackedArea can be in one ChartSeriesGroup
  ///  simultaneously (CombinableSeriesTypesGroup.AreaChart_PercentsStackedArea). And ChartType.Line series can be
  ///  with ChartType.LineWithMarkers series simultaneously in one CombinableSeriesTypesGroup.LineChart_Line
  ///  ChartSeriesGroup.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.CombinableSeriesTypesGroup')]
  DNCombinableSeriesTypesGroup = type Integer;
  DNCombinableSeriesTypesGroupHelper = record helper for DNCombinableSeriesTypesGroup
  public const
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.BarOfPie }
    ///</summary>
    BarOfPieChart = 0;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PieOfPie }
    ///</summary>
    PieOfPieChart = 1;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Doughnut, ChartType.ExplodedDoughnut }
    ///</summary>
    DoughnutChart = 2;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Pie, ChartType.ExplodedPie }
    ///</summary>
    PieChart = 3;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Area }
    ///</summary>
    AreaChart_Area = 4;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedArea }
    ///</summary>
    AreaChart_PercentsStackedArea = 5;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedArea }
    ///</summary>
    AreaChart_StackedArea = 6;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ClusteredBar }
    ///</summary>
    BarChart_HorizClustered = 7;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedBar }
    ///</summary>
    BarChart_HorizStacked = 8;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedBar }
    ///</summary>
    BarChart_HorizPercentsStacked = 9;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ClusteredColumn }
    ///</summary>
    BarChart_VertClustered = 10;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedColumn }
    ///</summary>
    BarChart_VertStacked = 11;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedColumn }
    ///</summary>
    BarChart_VertPercentsStacked = 12;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Line, ChartType.LineWithMarkers }
    ///</summary>
    LineChart_Line = 13;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedLine, ChartType.StackedLineWithMarkers }
    ///</summary>
    LineChart_StackedLine = 14;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedLine, ChartType.PercentsStackedLineWithMarkers }
    ///</summary>
    LineChart_PercentsStackedLine = 15;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Radar, ChartType.RadarWithMarkers }
    ///</summary>
    RadarChart = 16;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.FilledRadar }
    ///</summary>
    FilledRadarChart = 17;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.HighLowClose }
    ///</summary>
    StockHighLowClose = 18;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.OpenHighLowClose }
    ///</summary>
    StockOpenHighLowClose = 19;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.VolumeHighLowClose }
    ///</summary>
    StockVolumeHighLowClose = 20;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.VolumeOpenHighLowClose }
    ///</summary>
    StockVolumeOpenHighLowClose = 21;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ScatterWithMarkers, ChartType.ScatterWithStraightLines, ChartType.ScatterWithStraightLinesAndMarkers }
    ///</summary>
    ScatterStraightMarker = 22;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ScatterWithSmoothLines, ChartType.ScatterWithSmoothLinesAndMarkers }
    ///</summary>
    ScatterSmoothMarker = 23;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Area3D }
    ///</summary>
    AreaChart_Area3D = 24;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedArea3D }
    ///</summary>
    AreaChart_StackedArea3D = 25;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedArea3D }
    ///</summary>
    AreaChart_PercentsStackedArea3D = 26;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Line3D }
    ///</summary>
    Line3DChart = 27;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Pie3D, ChartType.ExplodedPie3D }
    ///</summary>
    Pie3DChart = 28;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Column3D, ChartType.Cylinder3D, ChartType.Cone3D, ChartType.Pyramid3D }
    ///</summary>
    Bar3DChart_Vert = 29;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ClusteredColumn3D, ChartType.ClusteredCone, ChartType.ClusteredCylinder, ChartType.ClusteredPyramid }
    ///</summary>
    Bar3DChart_VertClustered = 30;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedColumn3D }
    ///</summary>
    Bar3DChart_VertPercentsStackedColumn3D = 31;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedCone }
    ///</summary>
    Bar3DChart_VertPercentsStackedCone = 32;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedCylinder }
    ///</summary>
    Bar3DChart_VertPercentsStackedCylinder = 33;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedPyramid }
    ///</summary>
    Bar3DChart_VertPercentsStackedPyramid = 34;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedColumn3D }
    ///</summary>
    Bar3DChart_VertStackedColumn3D = 35;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedCone }
    ///</summary>
    Bar3DChart_VertStackedCone = 36;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedCylinder }
    ///</summary>
    Bar3DChart_VertStackedCylinder = 37;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedPyramid }
    ///</summary>
    Bar3DChart_VertStackedPyramid = 38;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ClusteredBar3D, ChartType.ClusteredHorizontalCone, ChartType.ClusteredHorizontalCylinder, ChartType.ClusteredHorizontalPyramid }
    ///</summary>
    Bar3DChart_HorizClustered = 39;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedBar3D }
    ///</summary>
    Bar3DChart_HorizStackedBar3D = 40;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedHorizontalCone }
    ///</summary>
    Bar3DChart_HorizStackedCone = 41;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedHorizontalCylinder }
    ///</summary>
    Bar3DChart_HorizStackedCylinder = 42;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.StackedHorizontalPyramid }
    ///</summary>
    Bar3DChart_HorizStackedPyramid = 43;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedBar3D }
    ///</summary>
    Bar3DChart_HorizPercentsStackedBar3D = 44;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedHorizontalCone }
    ///</summary>
    Bar3DChart_HorizPercentsStackedCone = 45;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedHorizontalCylinder }
    ///</summary>
    Bar3DChart_HorizPercentsStackedCylinder = 46;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.PercentsStackedHorizontalPyramid }
    ///</summary>
    Bar3DChart_HorizPercentsStackedPyramid = 47;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Contour }
    ///</summary>
    SurfaceChart_Contour = 48;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.WireframeContour }
    ///</summary>
    SurfaceChart_WireframeContour = 49;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Surface3D }
    ///</summary>
    SurfaceChart_Surface3D = 50;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.WireframeSurface3D }
    ///</summary>
    SurfaceChart_WireframeSurface3D = 51;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Bubble, ChartType.BubbleWith3D }
    ///</summary>
    BubbleChart = 52;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Histogram }
    ///</summary>
    HistogramChart = 53;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.ParetoLine }
    ///</summary>
    ParetoLineChart = 54;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.BoxAndWhisker }
    ///</summary>
    BoxAndWhiskerChart = 55;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Waterfall }
    ///</summary>
    WaterfallChart = 56;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Funnel }
    ///</summary>
    FunnelChart = 57;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Treemap }
    ///</summary>
    TreemapChart = 58;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Map }
    ///</summary>
    MapChart = 59;
    ///<summary>
    ///  Groups this set of series types:
    ///  { ChartType.Sunburst }
    ///</summary>
    SunburstChart = 60;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines where axis will cross.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.CrossesType')]
  DNCrossesType = type Integer;
  DNCrossesTypeHelper = record helper for DNCrossesType
  public const
    ///<summary>
    ///  The category axis crosses at the zero point of the value axis (if possible), or the minimum value (if the minimum is greater than zero) or the maximum (if the maximum is less than zero).
    ///</summary>
    AxisCrossesAtZero = 0;
    ///<summary>
    ///  The axis crosses at the maximum value.
    ///</summary>
    Maximum = 1;
    ///<summary>
    ///  Custom value from property CrossAt
    ///</summary>
    Custom = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Data source types.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DataSourceType')]
  DNDataSourceType = type Integer;
  DNDataSourceTypeHelper = record helper for DNDataSourceType
  public const
    ///<summary>
    ///  Use CellXls objects for storing XValue, YValue, Value or BubbleSize of data point in worksheet.
    ///</summary>
    Worksheet = 0;
    ///<summary>
    ///  Use fast-access string variable for storing XValue, YValue, Value or BubbleSize of
    ///  data point. Worksheet is NOT used for storing values.
    ///</summary>
    StringLiterals = 1;
    ///<summary>
    ///  Use fast-access double variable for storing XValue, YValue, Value or BubbleSize of
    ///  data point. Worksheet is NOT used for storing values.
    ///</summary>
    DoubleLiterals = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines how missing data will be displayed.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DisplayBlanksAsType')]
  DNDisplayBlanksAsType = type Integer;
  DNDisplayBlanksAsTypeHelper = record helper for DNDisplayBlanksAsType
  public const
    ///<summary>
    ///  Specifies that blank values shall be left as a gap.
    ///</summary>
    Gap = 0;
    ///<summary>
    ///  Specifies that blank values shall be spanned with a line.
    ///</summary>
    Span = 1;
    ///<summary>
    ///  Specifies that blank values shall be treated as zero.
    ///</summary>
    Zero = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines multiplicity of the displayed data.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DisplayUnitType')]
  DNDisplayUnitType = type Integer;
  DNDisplayUnitTypeHelper = record helper for DNDisplayUnitType
  public const
    ///<summary>
    ///  Values will dislayed as is.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100.
    ///</summary>
    Hundreds = 1;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000.
    ///</summary>
    Thousands = 2;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 10,000.
    ///</summary>
    TenThousands = 3;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100,000.
    ///</summary>
    HundredThousands = 4;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000.
    ///</summary>
    Millions = 5;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 10,000,000.
    ///</summary>
    TenMillions = 6;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100,000,000.
    ///</summary>
    HundredMillions = 7;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000,000.
    ///</summary>
    Billions = 8;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000,000.
    ///</summary>
    Trillions = 9;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by a custom value.
    ///</summary>
    CustomValue = 10;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents type of error bar
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ErrorBarType')]
  DNErrorBarType = type Integer;
  DNErrorBarTypeHelper = record helper for DNErrorBarType
  public const
    ///<summary>
    ///  Specifies that error bars shall be shown in the positive and negative directions.
    ///</summary>
    Both = 0;
    ///<summary>
    ///  Specifies that error bars shall be shown in the negative direction only.
    ///</summary>
    Minus = 1;
    ///<summary>
    ///  Specifies that error bars shall be shown in the positive direction only.
    ///</summary>
    Plus = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents type of error bar value
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ErrorBarValueType')]
  DNErrorBarValueType = type Integer;
  DNErrorBarValueTypeHelper = record helper for DNErrorBarValueType
  public const
    ///<summary>
    ///  Specifies that the length of the error bars shall be determined by the Plus and Minus elements.
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Specifies that the length of the error bars shall be the fixed value determined by Error Bar Value.
    ///</summary>
    Fixed = 1;
    ///<summary>
    ///  Specifies that the length of the error bars shall be Error Bar Value percent of the data.
    ///</summary>
    Percentage = 2;
    ///<summary>
    ///  Specifies that the length of the error bars shall be Error Bar Value standard deviations of the data.
    ///</summary>
    StandardDeviation = 3;
    ///<summary>
    ///  Specifies that the length of the error bars shall be Error Bar Value standard errors of the data.
    ///</summary>
    StandardError = 4;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  If layout of the plot area defined manually this property specifies whether
  ///  to layout the plot area by its inside (not including axis and axis labels) or outside
  ///  (including axis and axis labels).
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.LayoutTargetType')]
  DNLayoutTargetType = type Integer;
  DNLayoutTargetTypeHelper = record helper for DNLayoutTargetType
  public const
    ///<summary>
    ///  Specifies that the plot area size shall determine the
    ///  size of the plot area, not including the tick marks and
    ///  axis labels.
    ///</summary>
    Inner = 0;
    ///<summary>
    ///  Specifies that the plot area size shall determine the
    ///  size of the plot area, the tick marks, and the axis
    ///  labels.
    ///</summary>
    Outer = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines position of data labels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.LegendDataLabelPosition')]
  DNLegendDataLabelPosition = type Integer;
  DNLegendDataLabelPositionHelper = record helper for DNLegendDataLabelPosition
  public const
    ///<summary>
    ///  Specifies that data labels shall be displayed below the data marker.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Specifies that data labels shall be displayed in the best position.
    ///</summary>
    BestFit = 1;
    ///<summary>
    ///  Specifies that data labels shall be displayed centered on the data marker.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Specifies that data labels shall be displayed inside the base of the data marker.
    ///</summary>
    InsideBase = 3;
    ///<summary>
    ///  Specifies that data labels shall be displayed inside the end of the data marker.
    ///</summary>
    InsideEnd = 4;
    ///<summary>
    ///  Specifies that data labels shall be displayed to the left of the data marker.
    ///</summary>
    Left = 5;
    ///<summary>
    ///  Specifies that data labels shall be displayed outside the end of the data marker.
    ///</summary>
    OutsideEnd = 6;
    ///<summary>
    ///  Specifies that data labels shall be displayed to the right of the data marker.
    ///</summary>
    Right = 7;
    ///<summary>
    ///  Specifies that data labels shall be displayed above the data marker.
    ///</summary>
    Top = 8;
    ///<summary>
    ///  Position is not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines a position of legend on a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.LegendPositionType')]
  DNLegendPositionType = type Integer;
  DNLegendPositionTypeHelper = record helper for DNLegendPositionType
  public const
    ///<summary>
    ///  Specifies that the legend shall be drawn at the bottom of the chart.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the left of the chart.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the right of the chart.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the top of the chart.
    ///</summary>
    Top = 3;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the top right of the chart.
    ///</summary>
    TopRight = 4;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines form of marker on chart's data point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.MarkerStyleType')]
  DNMarkerStyleType = type Integer;
  DNMarkerStyleTypeHelper = record helper for DNMarkerStyleType
  public const
    ///<summary>
    ///  Specifies a circle shall be drawn at each data point.
    ///</summary>
    Circle = 0;
    ///<summary>
    ///  Specifies a dash shall be drawn at each data point.
    ///</summary>
    Dash = 1;
    ///<summary>
    ///  Specifies a diamond shall be drawn at each data point.
    ///</summary>
    Diamond = 2;
    ///<summary>
    ///  Specifies a dot shall be drawn at each data point.
    ///</summary>
    Dot = 3;
    ///<summary>
    ///  Specifies nothing shall be drawn at each data point.
    ///</summary>
    None = 4;
    ///<summary>
    ///  Specifies a picture shall be drawn at each data point.
    ///</summary>
    Picture = 5;
    ///<summary>
    ///  Specifies a plus shall be drawn at each data point.
    ///</summary>
    Plus = 6;
    ///<summary>
    ///  Specifies a square shall be drawn at each data point.
    ///</summary>
    Square = 7;
    ///<summary>
    ///  Specifies a star shall be drawn at each data point.
    ///</summary>
    Star = 8;
    ///<summary>
    ///  Specifies a triangle shall be drawn at each data point.
    ///</summary>
    Triangle = 9;
    ///<summary>
    ///  Specifies an X shall be drawn at each data point.
    ///</summary>
    X = 10;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents layout of category data labels. Used with Treemap series only.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ParentLabelLayoutType')]
  DNParentLabelLayoutType = type Integer;
  DNParentLabelLayoutTypeHelper = record helper for DNParentLabelLayoutType
  public const
    ///<summary>
    ///  Specifies that parent category labels are shown as banner
    ///</summary>
    Banner = 0;
    ///<summary>
    ///  Specifies that parent category labels are not drawn
    ///</summary>
    None = 1;
    ///<summary>
    ///  Specifies that parent category labels are shown as overlapping
    ///</summary>
    Overlapping = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Determines mode of bar picture filling.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.PictureType')]
  DNPictureType = type Integer;
  DNPictureTypeHelper = record helper for DNPictureType
  public const
    ///<summary>
    ///  The picture is sized to repeat a maximum of 15 times in the longest stacked bar.
    ///</summary>
    Stack = 0;
    ///<summary>
    ///  The picture is sized to a specified number of units and repeated the length of the bar.
    ///</summary>
    StackScale = 1;
    ///<summary>
    ///  The picture is stretched the full length of the stacked bar.
    ///</summary>
    Stretch = 2;
    ///<summary>
    ///  Not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a type of splitting points in the second pie or bar
  ///  on a pie-of-pie or bar-of-pie chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.PieSplitType')]
  DNPieSplitType = type Integer;
  DNPieSplitTypeHelper = record helper for DNPieSplitType
  public const
    ///<summary>
    ///  Specifies the data points shall be split using the default
    ///  mechanism for this chart type.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies the data points shall be split between the
    ///  pie and the second chart according to the Custom Split values.
    ///</summary>
    Custom = 1;
    ///<summary>
    ///  Specifies the data points shall be split between the pie and the
    ///  second chart by putting the points with percentage less than
    ///  Split Position percent in the second chart.
    ///</summary>
    ByPercentage = 2;
    ///<summary>
    ///  Specifies the data points shall be split between the pie and the
    ///  second chart by putting the last Split Position of the data points
    ///  in the second chart.
    ///</summary>
    ByPos = 3;
    ///<summary>
    ///  Specifies the data points shall be split between the pie and the
    ///  second chart by putting the data points with value less than
    ///  Split Position in the second chart.
    ///</summary>
    ByValue = 4;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Returns type of quartile method
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.QuartileMethodType')]
  DNQuartileMethodType = type Integer;
  DNQuartileMethodTypeHelper = record helper for DNQuartileMethodType
  public const
    ///<summary>
    ///  Represents exclusive quartile method.
    ///</summary>
    Exclusive = 0;
    ///<summary>
    ///  Represents inclusive quartile method.
    ///</summary>
    Inclusive = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart style.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.StyleType')]
  DNStyleType = type Integer;
  DNStyleTypeHelper = record helper for DNStyleType
  public const
    ///<summary>
    ///  Style 1
    ///</summary>
    Style1 = 0;
    ///<summary>
    ///  Style 2
    ///</summary>
    Style2 = 1;
    ///<summary>
    ///  Style 3
    ///</summary>
    Style3 = 2;
    ///<summary>
    ///  Style 4
    ///</summary>
    Style4 = 3;
    ///<summary>
    ///  Style 5
    ///</summary>
    Style5 = 4;
    ///<summary>
    ///  Style 6
    ///</summary>
    Style6 = 5;
    ///<summary>
    ///  Style 7
    ///</summary>
    Style7 = 6;
    ///<summary>
    ///  Style 8
    ///</summary>
    Style8 = 7;
    ///<summary>
    ///  Style 9
    ///</summary>
    Style9 = 8;
    ///<summary>
    ///  Style 10
    ///</summary>
    Style10 = 9;
    ///<summary>
    ///  Style 11
    ///</summary>
    Style11 = 10;
    ///<summary>
    ///  Style 12
    ///</summary>
    Style12 = 11;
    ///<summary>
    ///  Style 13
    ///</summary>
    Style13 = 12;
    ///<summary>
    ///  Style 14
    ///</summary>
    Style14 = 13;
    ///<summary>
    ///  Style 15
    ///</summary>
    Style15 = 14;
    ///<summary>
    ///  Style 16
    ///</summary>
    Style16 = 15;
    ///<summary>
    ///  Style 17
    ///</summary>
    Style17 = 16;
    ///<summary>
    ///  Style 18
    ///</summary>
    Style18 = 17;
    ///<summary>
    ///  Style 19
    ///</summary>
    Style19 = 18;
    ///<summary>
    ///  Style 20
    ///</summary>
    Style20 = 19;
    ///<summary>
    ///  Style 21
    ///</summary>
    Style21 = 20;
    ///<summary>
    ///  Style 22
    ///</summary>
    Style22 = 21;
    ///<summary>
    ///  Style 23
    ///</summary>
    Style23 = 22;
    ///<summary>
    ///  Style 24
    ///</summary>
    Style24 = 23;
    ///<summary>
    ///  Style 25
    ///</summary>
    Style25 = 24;
    ///<summary>
    ///  Style 26
    ///</summary>
    Style26 = 25;
    ///<summary>
    ///  Style 27
    ///</summary>
    Style27 = 26;
    ///<summary>
    ///  Style 28
    ///</summary>
    Style28 = 27;
    ///<summary>
    ///  Style 29
    ///</summary>
    Style29 = 28;
    ///<summary>
    ///  Style 30
    ///</summary>
    Style30 = 29;
    ///<summary>
    ///  Style 31
    ///</summary>
    Style31 = 30;
    ///<summary>
    ///  Style 32
    ///</summary>
    Style32 = 31;
    ///<summary>
    ///  Style 33
    ///</summary>
    Style33 = 32;
    ///<summary>
    ///  Style 34
    ///</summary>
    Style34 = 33;
    ///<summary>
    ///  Style 35
    ///</summary>
    Style35 = 34;
    ///<summary>
    ///  Style 36
    ///</summary>
    Style36 = 35;
    ///<summary>
    ///  Style 37
    ///</summary>
    Style37 = 36;
    ///<summary>
    ///  Style 38
    ///</summary>
    Style38 = 37;
    ///<summary>
    ///  Style 39
    ///</summary>
    Style39 = 38;
    ///<summary>
    ///  Style 40
    ///</summary>
    Style40 = 39;
    ///<summary>
    ///  Style 41
    ///</summary>
    Style41 = 40;
    ///<summary>
    ///  Style 42
    ///</summary>
    Style42 = 41;
    ///<summary>
    ///  Style 43
    ///</summary>
    Style43 = 42;
    ///<summary>
    ///  Style 44
    ///</summary>
    Style44 = 43;
    ///<summary>
    ///  Style 45
    ///</summary>
    Style45 = 44;
    ///<summary>
    ///  Style 46
    ///</summary>
    Style46 = 45;
    ///<summary>
    ///  Style 47
    ///</summary>
    Style47 = 46;
    ///<summary>
    ///  Style 48
    ///</summary>
    Style48 = 47;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents the position type of tick-mark labels on the specified axis.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.TickLabelPositionType')]
  DNTickLabelPositionType = type Integer;
  DNTickLabelPositionTypeHelper = record helper for DNTickLabelPositionType
  public const
    ///<summary>
    ///  Specifies the axis labels shall be at the high end of the perpendicular axis.
    ///</summary>
    High = 0;
    ///<summary>
    ///  Specifies the axis labels shall be at the low end of the perpendicular axis.
    ///</summary>
    Low = 1;
    ///<summary>
    ///  Specifies the axis labels shall be next to the axis.
    ///</summary>
    NextTo = 2;
    ///<summary>
    ///  Specifies the axis labels are not drawn.
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents the tick mark type for the specified axis.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.TickMarkType')]
  DNTickMarkType = type Integer;
  DNTickMarkTypeHelper = record helper for DNTickMarkType
  public const
    ///<summary>
    ///  Specifies the tick marks shall cross the axis.
    ///</summary>
    Cross = 0;
    ///<summary>
    ///  Specifies the tick marks shall be inside the plot area.
    ///</summary>
    Inside = 1;
    ///<summary>
    ///  Specifies there shall be no tick marks.
    ///</summary>
    None = 2;
    ///<summary>
    ///  Specifies the tick marks shall be outside the plot area.
    ///</summary>
    Outside = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents the base unit for the category axis
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.TimeUnitType')]
  DNTimeUnitType = type Integer;
  DNTimeUnitTypeHelper = record helper for DNTimeUnitType
  public const
    ///<summary>
    ///  Specifies the chart data shall be shown in days.
    ///</summary>
    Days = 0;
    ///<summary>
    ///  Specifies the chart data shall be shown in months.
    ///</summary>
    Months = 1;
    ///<summary>
    ///  Specifies the chart data shall be shown in years.
    ///</summary>
    Years = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents type of trend line
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.TrendlineType')]
  DNTrendlineType = type Integer;
  DNTrendlineTypeHelper = record helper for DNTrendlineType
  public const
    ///<summary>
    ///  Specifies the trendline shall be an exponential curve in the form.
    ///</summary>
    Exponential = 0;
    ///<summary>
    ///  Specifies the trendline shall be a line in the form.
    ///</summary>
    Linear = 1;
    ///<summary>
    ///  Specifies the trendline shall be a logarithmic curve in  the form  , where log is the natural logarithm.
    ///</summary>
    Logarithmic = 2;
    ///<summary>
    ///  Specifies the trendline shall be a moving average of period Period.
    ///</summary>
    MovingAverage = 3;
    ///<summary>
    ///  Specifies the trendline shall be a polynomial curve of order Order in the form.
    ///</summary>
    Polynomial = 4;
    ///<summary>
    ///  Specifies the trendline shall be a power curve in the form.
    ///</summary>
    Power = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an index in a colorscheme.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorSchemeIndex')]
  DNColorSchemeIndex = type Integer;
  DNColorSchemeIndexHelper = record helper for DNColorSchemeIndex
  public const
    ///<summary>
    ///  Dark 1.
    ///</summary>
    Dark1 = 0;
    ///<summary>
    ///  Light 1.
    ///</summary>
    Light1 = 1;
    ///<summary>
    ///  Dark 2.
    ///</summary>
    Dark2 = 2;
    ///<summary>
    ///  Light 2.
    ///</summary>
    Light2 = 3;
    ///<summary>
    ///  Accent 1.
    ///</summary>
    Accent1 = 4;
    ///<summary>
    ///  Accent 2.
    ///</summary>
    Accent2 = 5;
    ///<summary>
    ///  Accent 3.
    ///</summary>
    Accent3 = 6;
    ///<summary>
    ///  Accent 4.
    ///</summary>
    Accent4 = 7;
    ///<summary>
    ///  Accent 5.
    ///</summary>
    Accent5 = 8;
    ///<summary>
    ///  Accent 6.
    ///</summary>
    Accent6 = 9;
    ///<summary>
    ///  Hyperlink.
    ///</summary>
    Hyperlink = 10;
    ///<summary>
    ///  Followed Hyperlink.
    ///</summary>
    FollowedHyperlink = 11;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a type of hyperlink action.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorStringFormat')]
  DNColorStringFormat = type Integer;
  DNColorStringFormatHelper = record helper for DNColorStringFormat
  public const
    ///<summary>
    ///  VML color string format.
    ///</summary>
    Vml = 0;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines color transform operation.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorTransformOperation')]
  DNColorTransformOperation = type Integer;
  DNColorTransformOperationHelper = record helper for DNColorTransformOperation
  public const
    ///<summary>
    ///  Tints the color. Parameter is in range between 0 (original color) and 1 (white).
    ///</summary>
    Tint = 0;
    ///<summary>
    ///  Shades the color. Parameter is in range between 0 (original color) and 1 (black).
    ///</summary>
    Shade = 1;
    ///<summary>
    ///  Changes the color to a RGB complementary one.
    ///  m = Max(r, g, b);
    ///  r = m - r;
    ///  g = m - g;
    ///  b = m - b;
    ///</summary>
    Complement = 2;
    ///<summary>
    ///  Changes the color to an inverted color.
    ///  r = 1 - r;
    ///  g = 1 - g;
    ///  b = 1 - b;
    ///</summary>
    Inverse = 3;
    ///<summary>
    ///  Changes the color to a gray one with same lightness. Parameter ignored.
    ///</summary>
    Grayscale = 4;
    ///<summary>
    ///  Defines an alpha component of the color. Parameter is in range between 0 (transparent) and 1 (opaque).
    ///</summary>
    SetAlpha = 5;
    ///<summary>
    ///  Adds a parameter's value to an alpha component of the color. Parameter is in range between -1 and 1.
    ///</summary>
    AddAlpha = 6;
    ///<summary>
    ///  Multiplies an alpha component to a parameter's value.
    ///</summary>
    MultiplyAlpha = 7;
    ///<summary>
    ///  Changes a hue component of the color to a parameter's value. Parameter is in range between 0 and 360.
    ///</summary>
    SetHue = 8;
    ///<summary>
    ///  Adds parameter's value to hue component of the color. Parameter is in range between -360 and 360.
    ///</summary>
    AddHue = 9;
    ///<summary>
    ///  Multiplies a hue component to a parameter's value.
    ///</summary>
    MultiplyHue = 10;
    ///<summary>
    ///  Changes a saturation component of the color to a parameter's value. Parameter is in range between 0 and 1.
    ///</summary>
    SetSaturation = 11;
    ///<summary>
    ///  Adds a parameter's value to a saturation component of the color. Parameter is in range between -1 and 1.
    ///</summary>
    AddSaturation = 12;
    ///<summary>
    ///  Multiplies a saturation component to a parameter's value.
    ///</summary>
    MultiplySaturation = 13;
    ///<summary>
    ///  Changes a luminance component of the color to a parameter's value. Parameter is in range between 0 and 1.
    ///</summary>
    SetLuminance = 14;
    ///<summary>
    ///  Adds a parameter's value to a luminance component of the color. Parameter is in range between -1 and 1.
    ///</summary>
    AddLuminance = 15;
    ///<summary>
    ///  Multiplies a luminance component to a parameter's value.
    ///</summary>
    MultiplyLuminance = 16;
    ///<summary>
    ///  Changes a red component of the color to a parameter's value. Parameter is in range between 0 and 1.
    ///</summary>
    SetRed = 17;
    ///<summary>
    ///  Adds a parameter's value to a red component of the color. Parameter is in range between -1 and 1.
    ///</summary>
    AddRed = 18;
    ///<summary>
    ///  Multiplies a red component to a parameter.
    ///</summary>
    MultiplyRed = 19;
    ///<summary>
    ///  Changes a green component of the color to a parameter's value value. Parameter is in range between 0 and 1.
    ///</summary>
    SetGreen = 20;
    ///<summary>
    ///  Adds a parameter to a green component of the color. Parameter is in range between -1 and 1.
    ///</summary>
    AddGreen = 21;
    ///<summary>
    ///  Multiplies a green component of the color to a parameter's value.
    ///</summary>
    MultiplyGreen = 22;
    ///<summary>
    ///  Changes a blue component of the color to a parameter's value. Parameter is in range between 0 and 360.
    ///</summary>
    SetBlue = 23;
    ///<summary>
    ///  Adds a parameter's value to a blue component of the color. Parameter is in range between -1 and 1.
    ///</summary>
    AddBlue = 24;
    ///<summary>
    ///  Multiplies a blue component of the color to a parameter's value.
    ///</summary>
    MultiplyBlue = 25;
    ///<summary>
    ///  Gamma correction. Parameter ignored.
    ///</summary>
    Gamma = 26;
    ///<summary>
    ///  Inverse gamma correction. Parameter ignored.
    ///</summary>
    InverseGamma = 27;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents different color modes.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorType')]
  DNColorType = type Integer;
  DNColorTypeHelper = record helper for DNColorType
  public const
    ///<summary>
    ///  Standard 24bit RGB color.
    ///</summary>
    RGB = 0;
    ///<summary>
    ///  High definition RGB color.
    ///</summary>
    RGBPercentage = 1;
    ///<summary>
    ///  High definition HSL color.
    ///</summary>
    HSL = 2;
    ///<summary>
    ///  Scheme color.
    ///</summary>
    Scheme = 3;
    ///<summary>
    ///  System color.
    ///</summary>
    System = 4;
    ///<summary>
    ///  Preset Color.
    ///</summary>
    Preset = 5;
    ///<summary>
    ///  Color is not defined at all.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines a control type which should be embedded by <see cref="M:Aspose.Slides.IControlCollection.AddControl(Aspose.Slides.ControlType,System.Single,System.Single,System.Single,System.Single)" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.ControlType')]
  DNControlType = type Integer;
  DNControlTypeHelper = record helper for DNControlType
  public const
    ///<summary>
    ///  Windows Media Player control.
    ///</summary>
    WindowsMediaPlayer = 0;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents the rule to render comments into exported document
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.CommentsPositions')]
  DNCommentsPositions = type Integer;
  DNCommentsPositionsHelper = record helper for DNCommentsPositions
  public const
    ///<summary>
    ///  Specifies that comments should not be displayed at all.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies that comments should be displayed at the bottom of the page.
    ///</summary>
    Bottom = 1;
    ///<summary>
    ///  Specifies that comments should be displayed to the right of the page.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Specifies the conformance class to which the PresentationML document conforms.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Conformance')]
  DNConformance = type Integer;
  DNConformanceHelper = record helper for DNConformance
  public const
    ///<summary>
    ///  Specifies that the document conforms to the ECMA376:2006.
    ///</summary>
    Ecma376_2006 = 0;
    ///<summary>
    ///  Specifies that the document conforms to the ISO/IEC 29500:2008 Transitional conformance class.
    ///</summary>
    Iso29500_2008_Transitional = 1;
    ///<summary>
    ///  Specifies that the document conforms to the ISO/IEC 29500:2008 Strict conformance class.
    ///</summary>
    Iso29500_2008_Strict = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents the rule to use for adding new embedding font into <see cref="T:Aspose.Slides.IPresentation" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.EmbedFontCharacters')]
  DNEmbedFontCharacters = type Integer;
  DNEmbedFontCharactersHelper = record helper for DNEmbedFontCharacters
  public const
    ///<summary>
    ///  Embed only the characters used in the presentation (best for reducing file size).
    ///</summary>
    OnlyUsed = 0;
    ///<summary>
    ///  Embed all characters (best for editing by other people).
    ///</summary>
    All = 1;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Specifies the pixel format for the generated images.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ImagePixelFormat')]
  DNImagePixelFormat = type Integer;
  DNImagePixelFormatHelper = record helper for DNImagePixelFormat
  public const
    ///<summary>
    ///  1 bits per pixel, indexed.
    ///</summary>
    Format1bppIndexed = 1;
    ///<summary>
    ///  4 bits per pixel, indexed.
    ///</summary>
    Format4bppIndexed = 4;
    ///<summary>
    ///  8 bits per pixel, indexed.
    ///</summary>
    Format8bppIndexed = 8;
    ///<summary>
    ///  24 bits per pixel, RGB.
    ///</summary>
    Format24bppRgb = 24;
    ///<summary>
    ///  32 bits per pixel, ARGB.
    ///</summary>
    Format32bppArgb = 32;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Determines how object will be processed during saving.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.LinkEmbedDecision')]
  DNLinkEmbedDecision = type Integer;
  DNLinkEmbedDecisionHelper = record helper for DNLinkEmbedDecision
  public const
    ///<summary>
    ///  Object will be stored externally, referrenced by URL
    ///</summary>
    Link = 0;
    ///<summary>
    ///  Object should be embedded to a generated file if possible. If embedding is imposible, GetUrl will be called and, depending on result, object will be referrenced by URL or ignored.
    ///</summary>
    Embed = 1;
    ///<summary>
    ///  Object will be ignored.
    ///</summary>
    Ignore = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents the rule to render notes into exported document
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.NotesPositions')]
  DNNotesPositions = type Integer;
  DNNotesPositionsHelper = record helper for DNNotesPositions
  public const
    ///<summary>
    ///  Specifies that notes should not be displayed at all.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies that notes should be full displayed using additional pages as it is needed.
    ///</summary>
    BottomFull = 1;
    ///<summary>
    ///  Specifies that notes should be displayed in only one page.
    ///</summary>
    BottomTruncated = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Contains a set of flags specifying which access permissions should be granted when the document is opened with
  ///  user access.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PdfAccessPermissions')]
  DNPdfAccessPermissions = type Integer;
  DNPdfAccessPermissionsHelper = record helper for DNPdfAccessPermissions
  public const
    ///<summary>
    ///  Specifies that a user does not have access permissions.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies whether a user may print the document (possibly not at the highest quality level, depending on
    ///  whether bit <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.HighQualityPrint" />
    ///  is also set).
    ///</summary>
    PrintDocument = 4;
    ///<summary>
    ///  Specifies whether a user may modify the contents of the document by operations other than those controlled
    ///  by bits <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.AddOrModifyFields" />
    ///  , <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.FillExistingFields" />
    ///  , <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.AssembleDocument" />
    ///  .
    ///</summary>
    ModifyContent = 8;
    ///<summary>
    ///  Specifies whether a user may copy or otherwise extract text and graphics from the document by operations
    ///  other than that controlled by bit <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.ExtractTextAndGraphics" />
    ///  .
    ///</summary>
    CopyTextAndGraphics = 16;
    ///<summary>
    ///  Specifies whether a user may add or modify text annotations, fill in interactive form fields, and, if bit
    ///<see cref="F:Aspose.Slides.Export.PdfAccessPermissions.ModifyContent" />
    ///  is also set, create or modify interactive form fields (including signature
    ///  fields).
    ///</summary>
    AddOrModifyFields = 32;
    ///<summary>
    ///  Specifies whether a user may fill in existing interactive form fields (including signature fields), even if
    ///  bit <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.AddOrModifyFields" />
    ///  is clear.
    ///</summary>
    FillExistingFields = 256;
    ///<summary>
    ///  Specifies whether a user may extract text and graphics in support of accessibility to users with disabilities
    ///  or for other purposes.
    ///</summary>
    ExtractTextAndGraphics = 512;
    ///<summary>
    ///  Specifies whether a user may assemble the document (insert, rotate, or delete pages and create bookmarks or
    ///  thumbnail images), even if bit <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.ModifyContent" />
    ///  is clear.
    ///</summary>
    AssembleDocument = 1024;
    ///<summary>
    ///  Specifies whether a user may print the document to a representation from which a faithful digital copy of
    ///  the PDF content could be generated. When this bit is clear (and bit <see cref="F:Aspose.Slides.Export.PdfAccessPermissions.PrintDocument" />
    ///  is set),
    ///  printing is limited to a low-level representation of the appearance, possibly of degraded quality.
    ///</summary>
    HighQualityPrint = 2048;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Constants which define the PDF standards compliance level.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PdfCompliance')]
  DNPdfCompliance = type Integer;
  DNPdfComplianceHelper = record helper for DNPdfCompliance
  public const
    ///<summary>
    ///  The output file will comply with the PDF 1.5 standard.
    ///</summary>
    Pdf15 = 0;
    ///<summary>
    ///  The output file will comply with the PDF/A-1b standard.
    ///</summary>
    PdfA1b = 1;
    ///<summary>
    ///  The output file will comply with the PDF/A-1a standard.
    ///</summary>
    PdfA1a = 2;
    ///<summary>
    ///  The output file will comply with the PDF/UA standard.
    ///</summary>
    PdfUa = 3;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Constants which define the type of a compression applied to all content in the PDF file except images.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PdfTextCompression')]
  DNPdfTextCompression = type Integer;
  DNPdfTextCompressionHelper = record helper for DNPdfTextCompression
  public const
    ///<summary>
    ///  No compression.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Flate (ZIP) compression.
    ///</summary>
    Flate = 1;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents the pictures compression level
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PicturesCompression')]
  DNPicturesCompression = type Integer;
  DNPicturesCompressionHelper = record helper for DNPicturesCompression
  public const
    ///<summary>
    ///  Good quality for high-definition (HD) displays
    ///</summary>
    Dpi330 = 0;
    ///<summary>
    ///  Excellent quality on most printers and screens
    ///</summary>
    Dpi220 = 1;
    ///<summary>
    ///  Good for web pages and projectors
    ///</summary>
    Dpi150 = 2;
    ///<summary>
    ///  Minimize document size for sharing
    ///</summary>
    Dpi96 = 3;
    ///<summary>
    ///  Default compression level
    ///</summary>
    Dpi72 = 4;
    ///<summary>
    ///  Use document resolution - the picture will not be compressed and used in document as-is
    ///</summary>
    DocumentResolution = 5;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Constants which define the format of a saved presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    ///<summary>
    ///  Save presentation in PPT format.
    ///</summary>
    Ppt = 0;
    ///<summary>
    ///  Save presentation in PDF format.
    ///</summary>
    Pdf = 1;
    ///<summary>
    ///  Save presentation in XPS format.
    ///</summary>
    Xps = 2;
    ///<summary>
    ///  Save presentation in PPTX format.
    ///</summary>
    Pptx = 3;
    ///<summary>
    ///  Save presentation in PPSX (slideshow) format.
    ///</summary>
    Ppsx = 4;
    ///<summary>
    ///  Save presentation as multi-page TIFF image.
    ///</summary>
    Tiff = 5;
    ///<summary>
    ///  Save presentation in ODP format.
    ///</summary>
    Odp = 6;
    ///<summary>
    ///  Save presentation in PPTM (macro-enabled presentation) format.
    ///</summary>
    Pptm = 7;
    ///<summary>
    ///  Save presentation in PPSM (macro-enabled slideshow) format.
    ///</summary>
    Ppsm = 9;
    ///<summary>
    ///  Save presentation in POTX (template) format.
    ///</summary>
    Potx = 10;
    ///<summary>
    ///  Save presentation in POTM (macro-enabled template) format.
    ///</summary>
    Potm = 11;
    ///<summary>
    ///  Save presentation in HTML format.
    ///</summary>
    Html = 13;
    ///<summary>
    ///  Save presentation in SWF format.
    ///</summary>
    Swf = 15;
    ///<summary>
    ///  Save presentation in OTP (presentation template) format.
    ///</summary>
    Otp = 17;
    ///<summary>
    ///  Save presentation in PPS format.
    ///</summary>
    Pps = 19;
    ///<summary>
    ///  Save presentation in POT format.
    ///</summary>
    Pot = 20;
    ///<summary>
    ///  Save presentation in FODP format.
    ///</summary>
    Fodp = 21;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents CSS2 coordinate units used to define SVG coordinates.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SvgCoordinateUnit')]
  DNSvgCoordinateUnit = type Integer;
  DNSvgCoordinateUnitHelper = record helper for DNSvgCoordinateUnit
  public const
    ///<summary>
    ///  Inch
    ///</summary>
    Inch = 0;
    ///<summary>
    ///  Centimeter.
    ///</summary>
    Centimeter = 1;
    ///<summary>
    ///  Millimeter.
    ///</summary>
    Millimeter = 2;
    ///<summary>
    ///  Point (1/72 of inch),
    ///</summary>
    Point = 3;
    ///<summary>
    ///  Pica (1/6 of inch).
    ///</summary>
    Pica = 4;
    ///<summary>
    ///  Em size of a font of containing element.
    ///</summary>
    Em = 5;
    ///<summary>
    ///  Ex size (size of lowercase letter, usualy "x") of font of containing element.
    ///</summary>
    Ex = 6;
    ///<summary>
    ///  Pixel size.
    ///</summary>
    Pixel = 7;
    ///<summary>
    ///  Percent.
    ///</summary>
    Percent = 8;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents options for SVG shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SvgEvent')]
  DNSvgEvent = type Integer;
  DNSvgEventHelper = record helper for DNSvgEvent
  public const
    ///<summary>
    ///  Occurs when an element receives focus, such as when a text becomes selected.
    ///</summary>
    OnFocusIn = 0;
    ///<summary>
    ///  Occurs when an element loses focus, such as when a text becomes unselected.
    ///</summary>
    OnFocusOut = 1;
    ///<summary>
    ///  Occurs when an element is activated, for instance, through a mouse click or a keypress.
    ///</summary>
    OnActivate = 2;
    ///<summary>
    ///  Occurs when the pointing device button is clicked over an element.
    ///</summary>
    OnClick = 3;
    ///<summary>
    ///  Occurs when the pointing device button is pressed over an element.
    ///</summary>
    OnMouseDown = 4;
    ///<summary>
    ///  Occurs when the pointing device button is released over an element.
    ///</summary>
    OnMouseUp = 5;
    ///<summary>
    ///  Occurs when the pointing device is moved onto an element.
    ///</summary>
    OnMouseOver = 6;
    ///<summary>
    ///  Occurs when the pointing device is moved while it is over an element.
    ///</summary>
    OnMouseMove = 7;
    ///<summary>
    ///  Occurs when the pointing device is moved away from an element.
    ///</summary>
    OnMouseOut = 8;
    ///<summary>
    ///  Occurs when the user agent has fully parsed the element and its descendants and all referrenced resurces, required to render it.
    ///</summary>
    OnLoad = 9;
    ///<summary>
    ///  Occurs when the DOM implementation removes a document from a window or frame. Only applicable to outermost svg elements.
    ///</summary>
    OnUnload = 10;
    ///<summary>
    ///  Occurs when page loading is stopped before an element has been allowed to load completely.
    ///</summary>
    OnAbort = 11;
    ///<summary>
    ///  Occurs when an element does not load properly or when an error occurs during script execution.
    ///</summary>
    OnError = 12;
    ///<summary>
    ///  Occurs when a document view is being resized. Only applicable to outermost svg elements.
    ///</summary>
    OnResize = 13;
    ///<summary>
    ///  Occurs when a document view is being shifted along the X or Y or both axis. Only applicable to outermost svg elements.
    ///</summary>
    OnScroll = 14;
    ///<summary>
    ///  Occurs when the zoom level of a document view is being changed. Only applicable to outermost svg elements.
    ///</summary>
    OnZoom = 15;
    ///<summary>
    ///  Occurs when an animation element begins.
    ///</summary>
    OnBegin = 16;
    ///<summary>
    ///  Occurs when an animation element ends.
    ///</summary>
    OnEnd = 17;
    ///<summary>
    ///  Occurs when an animation element repeats.
    ///</summary>
    OnRepeat = 18;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents a way to handle external fonts used for text drawing.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SvgExternalFontsHandling')]
  DNSvgExternalFontsHandling = type Integer;
  DNSvgExternalFontsHandlingHelper = record helper for DNSvgExternalFontsHandling
  public const
    ///<summary>
    ///  Add links to separate font files to style section of SVG file.
    ///</summary>
    AddLinksToFontFiles = 0;
    ///<summary>
    ///  Save fonts data directly to SVG file. Please check all external fonts license agreements before using this option.
    ///</summary>
    Embed = 1;
    ///<summary>
    ///  Save all text using external fonts as graphics.
    ///</summary>
    Vectorize = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Controls the depth of the text properties inheritance.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.TextInheritanceLimit')]
  DNTextInheritanceLimit = type Integer;
  DNTextInheritanceLimitHelper = record helper for DNTextInheritanceLimit
  public const
    ///<summary>
    ///  Inherit all text properties.
    ///</summary>
    All = 0;
    ///<summary>
    ///  Inherit only from TextFrameEx's style.
    ///</summary>
    TextBox = 1;
    ///<summary>
    ///  Use only properties defined for paragraph.
    ///</summary>
    ParagraphOnly = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation is compressed in TIFF format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.TiffCompressionTypes')]
  DNTiffCompressionTypes = type Integer;
  DNTiffCompressionTypesHelper = record helper for DNTiffCompressionTypes
  public const
    ///<summary>
    ///  Specifies the default compression scheme (LZW).
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies no compression.
    ///</summary>
    None = 1;
    ///<summary>
    ///  Specifies the CCITT3 compression scheme.
    ///</summary>
    CCITT3 = 2;
    ///<summary>
    ///  Specifies the CCITT4 compression scheme.
    ///</summary>
    CCITT4 = 3;
    ///<summary>
    ///  Specifies the LZW compression scheme (Default).
    ///</summary>
    LZW = 4;
    ///<summary>
    ///  Specifies the RLE compression scheme.
    ///</summary>
    RLE = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines blend mode.
  ///</summary>
  [DNTypeName('Aspose.Slides.FillBlendMode')]
  DNFillBlendMode = type Integer;
  DNFillBlendModeHelper = record helper for DNFillBlendMode
  public const
    ///<summary>
    ///  Darken blend mode.
    ///</summary>
    Darken = 0;
    ///<summary>
    ///  Lighten blend mode.
    ///</summary>
    Lighten = 1;
    ///<summary>
    ///  Multiply blend mode.
    ///</summary>
    Multiply = 2;
    ///<summary>
    ///  Overlay blend mode.
    ///</summary>
    Overlay = 3;
    ///<summary>
    ///  Screen blend mode.
    ///</summary>
    Screen = 4;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Specifies the interior fill type of various visual objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.FillType')]
  DNFillType = type Integer;
  DNFillTypeHelper = record helper for DNFillType
  public const
    ///<summary>
    ///  No fill applied.
    ///</summary>
    NoFill = 0;
    ///<summary>
    ///  Filled with a solid color.
    ///</summary>
    Solid = 1;
    ///<summary>
    ///  The fill is gradient.
    ///</summary>
    Gradient = 2;
    ///<summary>
    ///  Repeating pattern is used to fill the object.
    ///</summary>
    Pattern = 3;
    ///<summary>
    ///  A single picture is used to fill the object.
    ///</summary>
    Picture = 4;
    ///<summary>
    ///  The visual object inherits the fill properties from the group.
    ///</summary>
    Group = 5;
    ///<summary>
    ///  The fill type is not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents vertical font alignment.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontAlignment')]
  DNFontAlignment = type Integer;
  DNFontAlignmentHelper = record helper for DNFontAlignment
  public const
    ///<summary></summary>
    Automatic = 0;
    ///<summary></summary>
    Top = 1;
    ///<summary></summary>
    Center = 2;
    ///<summary></summary>
    Bottom = 3;
    ///<summary></summary>
    Baseline = 4;
    ///<summary></summary>
    Default_ = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents font's index in a collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontCollectionIndex')]
  DNFontCollectionIndex = type Integer;
  DNFontCollectionIndexHelper = record helper for DNFontCollectionIndex
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    Minor = 1;
    ///<summary></summary>
    Major = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a rule fot font substitution
  ///</summary>
  [DNTypeName('Aspose.Slides.FontSubstCondition')]
  DNFontSubstCondition = type Integer;
  DNFontSubstConditionHelper = record helper for DNFontSubstCondition
  public const
    ///<summary>
    ///  Substitute when font is not found
    ///</summary>
    WhenInaccessible = 0;
    ///<summary>
    ///  Substitute always
    ///</summary>
    Always = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the gradient style.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientDirection')]
  DNGradientDirection = type Integer;
  DNGradientDirectionHelper = record helper for DNGradientDirection
  public const
    ///<summary>
    ///  From Top Left Corner
    ///</summary>
    FromCorner1 = 0;
    ///<summary>
    ///  From Top Right Corner
    ///</summary>
    FromCorner2 = 1;
    ///<summary>
    ///  From Bottom Left Corner
    ///</summary>
    FromCorner3 = 2;
    ///<summary>
    ///  From Bottom Right Corner
    ///</summary>
    FromCorner4 = 3;
    ///<summary>
    ///  From Center
    ///</summary>
    FromCenter = 4;
    ///<summary>
    ///  Not defined
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the shape of gradient fill.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientShape')]
  DNGradientShape = type Integer;
  DNGradientShapeHelper = record helper for DNGradientShape
  public const
    ///<summary></summary>
    Linear = 0;
    ///<summary></summary>
    Rectangle = 1;
    ///<summary></summary>
    Radial = 2;
    ///<summary></summary>
    Path = 3;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a type of hyperlink action.
  ///</summary>
  [DNTypeName('Aspose.Slides.HyperlinkActionType')]
  DNHyperlinkActionType = type Integer;
  DNHyperlinkActionTypeHelper = record helper for DNHyperlinkActionType
  public const
    ///<summary>
    ///  No action.
    ///</summary>
    NoAction = 0;
    ///<summary>
    ///  Usual hyperlink.
    ///</summary>
    Hyperlink = 1;
    ///<summary>
    ///  Jump to the first slide of the presentation.
    ///</summary>
    JumpFirstSlide = 2;
    ///<summary>
    ///  Jump to the previous slide.
    ///</summary>
    JumpPreviousSlide = 3;
    ///<summary>
    ///  Jubp to the next slide.
    ///</summary>
    JumpNextSlide = 4;
    ///<summary>
    ///  Jump to the last slide of the presentation.
    ///</summary>
    JumpLastSlide = 5;
    ///<summary>
    ///  Jump to the end of slideshow.
    ///</summary>
    JumpEndShow = 6;
    ///<summary>
    ///  Jump to the last viewed slide.
    ///</summary>
    JumpLastViewedSlide = 7;
    ///<summary>
    ///  Jump to the specific slide, referred by <see cref="P:Aspose.Slides.IHyperlink.TargetSlide" />
    ///  property.
    ///</summary>
    JumpSpecificSlide = 8;
    ///<summary>
    ///  Start custom slideshow.
    ///</summary>
    StartCustomSlideShow = 9;
    ///<summary>
    ///  Open referrenced file.
    ///</summary>
    OpenFile = 10;
    ///<summary>
    ///  Open referrenced presentation.
    ///</summary>
    OpenPresentation = 11;
    ///<summary>
    ///  Start/stop playing mediafile.
    ///</summary>
    StartStopMedia = 12;
    ///<summary>
    ///  Start executing macro script.
    ///</summary>
    StartMacro = 13;
    ///<summary>
    ///  Start program.
    ///</summary>
    StartProgram = 14;
    ///<summary>
    ///  Unrecognized action type.
    ///</summary>
    Unknown = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents source of hyperlink color.
  ///</summary>
  [DNTypeName('Aspose.Slides.HyperlinkColorSource')]
  DNHyperlinkColorSource = type Integer;
  DNHyperlinkColorSourceHelper = record helper for DNHyperlinkColorSource
  public const
    ///<summary>
    ///  Styles.
    ///</summary>
    Styles = 0;
    ///<summary>
    ///  Portion format.
    ///</summary>
    PortionFormat = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define light directions.
  ///</summary>
  [DNTypeName('Aspose.Slides.LightingDirection')]
  DNLightingDirection = type Integer;
  DNLightingDirectionHelper = record helper for DNLightingDirection
  public const
    ///<summary></summary>
    TopLeft = 0;
    ///<summary></summary>
    Top = 1;
    ///<summary></summary>
    TopRight = 2;
    ///<summary></summary>
    Right = 3;
    ///<summary></summary>
    BottomRight = 4;
    ///<summary></summary>
    Bottom = 5;
    ///<summary></summary>
    BottomLeft = 6;
    ///<summary></summary>
    Left = 7;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define light preset types.
  ///</summary>
  [DNTypeName('Aspose.Slides.LightRigPresetType')]
  DNLightRigPresetType = type Integer;
  DNLightRigPresetTypeHelper = record helper for DNLightRigPresetType
  public const
    ///<summary />
    Balanced = 0;
    ///<summary />
    BrightRoom = 1;
    ///<summary />
    Chilly = 2;
    ///<summary />
    Contrasting = 3;
    ///<summary />
    Flat = 4;
    ///<summary />
    Flood = 5;
    ///<summary />
    Freezing = 6;
    ///<summary />
    Glow = 7;
    ///<summary />
    Harsh = 8;
    ///<summary />
    LegacyFlat1 = 9;
    ///<summary />
    LegacyFlat2 = 10;
    ///<summary />
    LegacyFlat3 = 11;
    ///<summary />
    LegacyFlat4 = 12;
    ///<summary />
    LegacyHarsh1 = 13;
    ///<summary />
    LegacyHarsh2 = 14;
    ///<summary />
    LegacyHarsh3 = 15;
    ///<summary />
    LegacyHarsh4 = 16;
    ///<summary />
    LegacyNormal1 = 17;
    ///<summary />
    LegacyNormal2 = 18;
    ///<summary />
    LegacyNormal3 = 19;
    ///<summary />
    LegacyNormal4 = 20;
    ///<summary />
    Morning = 21;
    ///<summary />
    Soft = 22;
    ///<summary />
    Sunrise = 23;
    ///<summary />
    Sunset = 24;
    ///<summary />
    ThreePt = 25;
    ///<summary />
    TwoPt = 26;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the lines alignment type.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineAlignment')]
  DNLineAlignment = type Integer;
  DNLineAlignmentHelper = record helper for DNLineAlignment
  public const
    ///<summary></summary>
    Center = 0;
    ///<summary></summary>
    Inset = 1;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the length of an arrowhead.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineArrowheadLength')]
  DNLineArrowheadLength = type Integer;
  DNLineArrowheadLengthHelper = record helper for DNLineArrowheadLength
  public const
    ///<summary></summary>
    Short = 0;
    ///<summary></summary>
    Medium = 1;
    ///<summary></summary>
    Long = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the style of an arrowhead.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineArrowheadStyle')]
  DNLineArrowheadStyle = type Integer;
  DNLineArrowheadStyleHelper = record helper for DNLineArrowheadStyle
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    Triangle = 1;
    ///<summary></summary>
    Stealth = 2;
    ///<summary></summary>
    Diamond = 3;
    ///<summary></summary>
    Oval = 4;
    ///<summary></summary>
    Open = 5;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the width of an arrowhead.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineArrowheadWidth')]
  DNLineArrowheadWidth = type Integer;
  DNLineArrowheadWidthHelper = record helper for DNLineArrowheadWidth
  public const
    ///<summary></summary>
    Narrow = 0;
    ///<summary></summary>
    Medium = 1;
    ///<summary></summary>
    Wide = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the line cap style.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineCapStyle')]
  DNLineCapStyle = type Integer;
  DNLineCapStyleHelper = record helper for DNLineCapStyle
  public const
    ///<summary></summary>
    Round = 0;
    ///<summary></summary>
    Square = 1;
    ///<summary></summary>
    Flat = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the line dash style.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineDashStyle')]
  DNLineDashStyle = type Integer;
  DNLineDashStyleHelper = record helper for DNLineDashStyle
  public const
    ///<summary></summary>
    Solid = 0;
    ///<summary></summary>
    Dot = 1;
    ///<summary></summary>
    Dash = 2;
    ///<summary></summary>
    LargeDash = 3;
    ///<summary></summary>
    DashDot = 4;
    ///<summary></summary>
    LargeDashDot = 5;
    ///<summary></summary>
    LargeDashDotDot = 6;
    ///<summary></summary>
    SystemDash = 7;
    ///<summary></summary>
    SystemDot = 8;
    ///<summary></summary>
    SystemDashDot = 9;
    ///<summary></summary>
    SystemDashDotDot = 10;
    ///<summary></summary>
    Custom = 11;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the lines join style.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineJoinStyle')]
  DNLineJoinStyle = type Integer;
  DNLineJoinStyleHelper = record helper for DNLineJoinStyle
  public const
    ///<summary></summary>
    Round = 0;
    ///<summary></summary>
    Bevel = 1;
    ///<summary></summary>
    Miter = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents which sketch type or effect a shape has been assigned.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineSketchType')]
  DNLineSketchType = type Integer;
  DNLineSketchTypeHelper = record helper for DNLineSketchType
  public const
    ///<summary>
    ///  Specifies that a shape has no Sketch effect. This is equivalent to this property being empty.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies that a shape has the Curved effect, which turns each edge of the shape into one big gentle curve.
    ///</summary>
    Curved = 1;
    ///<summary>
    ///  Specifies that a shape has the Freehand effect, which most closely resembles an imperfectly drawn line.
    ///</summary>
    Freehand = 2;
    ///<summary>
    ///  Specifies that a shape has the Scribble effect, which has exaggerated oscillation as if drawn purposely messy.
    ///</summary>
    Scribble = 3;
    ///<summary>
    ///  Specifies that a shape Sketch effect is undefined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the style of a line.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineStyle')]
  DNLineStyle = type Integer;
  DNLineStyleHelper = record helper for DNLineStyle
  public const
    ///<summary></summary>
    Single = 0;
    ///<summary></summary>
    ThinThin = 1;
    ///<summary></summary>
    ThickThin = 2;
    ///<summary></summary>
    ThinThick = 3;
    ///<summary></summary>
    ThickBetweenThin = 4;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Indicates the format of the document that is to be loaded.
  ///</summary>
  [DNTypeName('Aspose.Slides.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    ///<summary>
    ///  Instructs Aspose.Slides to recognize the format automatically.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Microsoft PowerPoint 97-2003 Presentation.
    ///</summary>
    Ppt = 1;
    ///<summary>
    ///  Microsoft PowerPoint 97-2003 SlideShow.
    ///</summary>
    Pps = 2;
    ///<summary>
    ///  Microsoft Office Open XML PresentationML Document.
    ///</summary>
    Pptx = 3;
    ///<summary>
    ///  Microsoft Office Open XML PresentationML SlideShow.
    ///</summary>
    Ppsx = 4;
    ///<summary>
    ///  OpenOffice ODF Presentation.
    ///</summary>
    Odp = 5;
    ///<summary>
    ///  Microsoft Office Open XML PresentationML Template.
    ///</summary>
    Potx = 6;
    ///<summary>
    ///  Microsoft Office Open XML PresentationML Macro-enabled Document.
    ///</summary>
    Pptm = 7;
    ///<summary>
    ///  Microsoft Office Open XML PresentationML Macro-enabled SlideShow.
    ///</summary>
    Ppsm = 8;
    ///<summary>
    ///  Microsoft Office Open XML PresentationML Macro-enabled Template.
    ///</summary>
    Potm = 9;
    ///<summary>
    ///  OpenOffice OTP Presentation template.
    ///</summary>
    Otp = 10;
    ///<summary>
    ///  Microsoft PowerPoint 95 Presentation.
    ///</summary>
    Ppt95 = 11;
    ///<summary>
    ///  Microsoft PowerPoint 97-2003 Presentation Template.
    ///</summary>
    Pot = 12;
    ///<summary>
    ///  Flat XML ODF Presentation.
    ///</summary>
    Fodp = 13;
    ///<summary>
    ///  Unknown file format
    ///</summary>
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  The <see cref="T:System.IO.Stream" />
  ///  passed to a method is considered as a Binary Large Object (BLOB) (see
  ///<see cref="T:Aspose.Slides.IBlobManagementOptions" />
  ///  description). Values of this enumeration identify how
  ///  the <see cref="T:System.IO.Stream" />
  ///  should be treated when it passed to the method. Depending on the
  ///  requirements, different decisions could be made to provide the most efficient behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.LoadingStreamBehavior')]
  DNLoadingStreamBehavior = type Integer;
  DNLoadingStreamBehaviorHelper = record helper for DNLoadingStreamBehavior
  public const
    ///<summary>
    ///  The stream will be read to the end and then released - i.e. it will be guaranteed that this stream
    ///  will not be used by <see cref="T:Aspose.Slides.IPresentation" />
    ///  instance in the future. It can be closed by the client
    ///  code or used in any other way.
    ///</summary>
    ///<example><code>
    ///  using (Presentation pres = new Presentation()) {
    ///  FileStream fileStream = new FileStream("video.avi", FileMode.Open);
    ///  pres.Videos.AddVideo(fileStream, LoadingStreamBehavior.ReadStreamAndRelease);
    ///  fileStream.Close(); // the stream can be closed, it's no longer needed for the "pres" object.
    ///  }
    ///</code></example>
    ReadStreamAndRelease = 0;
    ///<summary>
    ///  The stream will be locked inside the <see cref="T:Aspose.Slides.IPresentation" />
    ///  object, i.e. the ownership of
    ///  the stream will be transferred. The <see cref="T:Aspose.Slides.IPresentation" />
    ///  object will be responsible to
    ///  correctly dispose the stream when this object will be disposed itself.
    ///  This behavior is extremely useful when you need to serialize a large BLOB file (such as a large
    ///  video or audio -see <see cref="T:Aspose.Slides.IBlobManagementOptions" />
    ///  description) and want to prevent loading
    ///  this file into memory or other performance issues. You may just open the <see cref="T:System.IO.FileStream" />
    ///  for this file and pass to a method, choosing <see cref="F:Aspose.Slides.LoadingStreamBehavior.KeepLocked" />
    ///  LoadingStreamBehavior.
    ///</summary>
    ///<example><code>
    ///  using (Presentation pres = new Presentation()) {
    ///  FileStream fileStream = new FileStream("Huge Monster Sized Video.avi", FileMode.Open);
    ///  pres.Videos.AddVideo(fileStream, LoadingStreamBehavior.KeepLocked);
    ///  // fileStream.Close(); // You should not close the stream or interact with it in any other way, it will lead to an error in Save method.
    ///  // The fileStream will be used for saving, what will prevent high memory consumption
    ///  pres.Save("My Presentation With Huge Monster Sized Video.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    KeepLocked = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define material of shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.MaterialPresetType')]
  DNMaterialPresetType = type Integer;
  DNMaterialPresetTypeHelper = record helper for DNMaterialPresetType
  public const
    ///<summary />
    Clear = 0;
    ///<summary />
    DkEdge = 1;
    ///<summary />
    Flat = 2;
    ///<summary />
    LegacyMatte = 3;
    ///<summary />
    LegacyMetal = 4;
    ///<summary />
    LegacyPlastic = 5;
    ///<summary />
    LegacyWireframe = 6;
    ///<summary />
    Matte = 7;
    ///<summary />
    Metal = 8;
    ///<summary />
    Plastic = 9;
    ///<summary />
    Powder = 10;
    ///<summary />
    SoftEdge = 11;
    ///<summary />
    Softmetal = 12;
    ///<summary />
    TranslucentPowder = 13;
    ///<summary />
    WarmMatte = 14;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  The location and size of the delimiters relative to the content of the operands
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathDelimiterShape')]
  DNMathDelimiterShape = type Integer;
  DNMathDelimiterShapeHelper = record helper for DNMathDelimiterShape
  public const
    ///<summary>
    ///  Centered to math axis
    ///</summary>
    Centered = 0;
    ///<summary>
    ///  Match to content
    ///</summary>
    Match = 1;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Fraction Types
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathFractionTypes')]
  DNMathFractionTypes = type Integer;
  DNMathFractionTypesHelper = record helper for DNMathFractionTypes
  public const
    ///<summary>
    ///  Bar Fraction
    ///</summary>
    Bar = 1;
    ///<summary>
    ///  Skewed
    ///</summary>
    Skewed = 2;
    ///<summary>
    ///  Linear Fraction
    ///</summary>
    Linear = 3;
    ///<summary>
    ///  No-Bar Fraction (Stack)
    ///</summary>
    NoBar = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Common mathematical functions of one argument
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathFunctionsOfOneArgument')]
  DNMathFunctionsOfOneArgument = type Integer;
  DNMathFunctionsOfOneArgumentHelper = record helper for DNMathFunctionsOfOneArgument
  public const
    ///<summary>
    ///  Sine
    ///</summary>
    Sin = 0;
    ///<summary>
    ///  Cosine
    ///</summary>
    Cos = 1;
    ///<summary>
    ///  Tangent
    ///</summary>
    Tan = 2;
    ///<summary>
    ///  Сosecant
    ///</summary>
    Csc = 3;
    ///<summary>
    ///  Secant
    ///</summary>
    Sec = 4;
    ///<summary>
    ///  Cotangent
    ///</summary>
    Cot = 5;
    ///<summary>
    ///  Hyperbolic sine
    ///</summary>
    HyperbolicSin = 6;
    ///<summary>
    ///  Hyperbolic Cosine
    ///</summary>
    HyperbolicCos = 7;
    ///<summary>
    ///  Hyperbolic Tangent
    ///</summary>
    HyperbolicTan = 8;
    ///<summary>
    ///  Hyperbolic Сosecant
    ///</summary>
    HyperbolicCsc = 9;
    ///<summary>
    ///  Hyperbolic Secant
    ///</summary>
    HyperbolicSec = 10;
    ///<summary>
    ///  Hyperbolic Cotangent
    ///</summary>
    HyperbolicCot = 11;
    ///<summary>
    ///  Decimal logarithm
    ///</summary>
    Lg = 12;
    ///<summary>
    ///  Natural logarithm
    ///</summary>
    Ln = 13;
    ///<summary>
    ///  Arcsine
    ///</summary>
    ArcSin = 14;
    ///<summary>
    ///  Arccosine
    ///</summary>
    ArcCos = 15;
    ///<summary>
    ///  Arctangent
    ///</summary>
    ArcTan = 16;
    ///<summary>
    ///  Arccosecant
    ///</summary>
    ArcCsc = 17;
    ///<summary>
    ///  Arcsecant
    ///</summary>
    ArcSec = 18;
    ///<summary>
    ///  Arccotangent
    ///</summary>
    ArcCot = 19;
    ///<summary>
    ///  Hyperbolic arcsine
    ///</summary>
    HyperbolicArcSin = 20;
    ///<summary>
    ///  Hyperbolic arccosine
    ///</summary>
    HyperbolicArcCos = 21;
    ///<summary>
    ///  Hyperbolic arctangent
    ///</summary>
    HyperbolicArcTan = 22;
    ///<summary>
    ///  Hyperbolic arccosecant
    ///</summary>
    HyperbolicArcCsc = 23;
    ///<summary>
    ///  Hyperbolic arcsecant
    ///</summary>
    HyperbolicArcSec = 24;
    ///<summary>
    ///  Hyperbolic arccotangent
    ///</summary>
    HyperbolicArcCot = 25;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Common mathematical functions of two arguments
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathFunctionsOfTwoArguments')]
  DNMathFunctionsOfTwoArguments = type Integer;
  DNMathFunctionsOfTwoArgumentsHelper = record helper for DNMathFunctionsOfTwoArguments
  public const
    ///<summary>
    ///  Log
    ///</summary>
    Log = 0;
    ///<summary>
    ///  Limit
    ///</summary>
    Lim = 1;
    ///<summary>
    ///  Minimum
    ///</summary>
    Min = 2;
    ///<summary>
    ///  Maximum
    ///</summary>
    Max = 3;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Horizontal Alignment
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathHorizontalAlignment')]
  DNMathHorizontalAlignment = type Integer;
  DNMathHorizontalAlignmentHelper = record helper for DNMathHorizontalAlignment
  public const
    ///<summary>
    ///  Value is not defined
    ///</summary>
    NotDefined = 0;
    ///<summary>
    ///  Left Justification
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Center
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Right
    ///</summary>
    Right = 3;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Mathematical integral types
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathIntegralTypes')]
  DNMathIntegralTypes = type Integer;
  DNMathIntegralTypesHelper = record helper for DNMathIntegralTypes
  public const
    ///<summary>
    ///  Integral: '∫'
    ///</summary>
    Simple = 0;
    ///<summary>
    ///  Double Integral: '∬'
    ///</summary>
    Double = 1;
    ///<summary>
    ///  Triple Integral: '∭'
    ///</summary>
    Triple = 2;
    ///<summary>
    ///  Contour Integral: '∮'
    ///</summary>
    Contour = 3;
    ///<summary>
    ///  Surface Integral: '∯'
    ///</summary>
    Surface = 4;
    ///<summary>
    ///  VolumeIntegral: '∰'
    ///</summary>
    Volume = 5;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies justification of the math paragraph (a series of adjacent instances of mathematical text within the same paragraph)
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathJustification')]
  DNMathJustification = type Integer;
  DNMathJustificationHelper = record helper for DNMathJustification
  public const
    ///<summary>
    ///  Align mathematical text to the left
    ///</summary>
    LeftJustified = 1;
    ///<summary>
    ///  Align mathematical text to the right
    ///</summary>
    RightJustified = 2;
    ///<summary>
    ///  Align mathematical text to the center
    ///</summary>
    Centered = 3;
    ///<summary>
    ///  Center on the page the entire group of math blocks as a single unit.
    ///  This means that the instances of mathematical text can be aligned with respect to each other,
    ///  but the entire group of mathematical text is centered as a whole.
    ///</summary>
    CenteredAsGroup = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Location of limits (subscript/superscript) in n-ary operators.
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathLimitLocations')]
  DNMathLimitLocations = type Integer;
  DNMathLimitLocationsHelper = record helper for DNMathLimitLocations
  public const
    ///<summary>
    ///  Not defined
    ///</summary>
    NotDefined = 0;
    ///<summary>
    ///  Limits draw at top and bottom of the operator symbol
    ///</summary>
    UnderOver = 1;
    ///<summary>
    ///  Limits draw as subscript and superscript
    ///</summary>
    SubscriptSuperscript = 2;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Nary operator IMathNaryOperator types (excluding integrals)
  ///  For integrals <see cref="T:Aspose.Slides.MathText.MathIntegralTypes" />
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathNaryOperatorTypes')]
  DNMathNaryOperatorTypes = type Integer;
  DNMathNaryOperatorTypesHelper = record helper for DNMathNaryOperatorTypes
  public const
    ///<summary>
    ///  Summation: '∑'
    ///</summary>
    Summation = 0;
    ///<summary>
    ///  Product: '∏'
    ///</summary>
    Product = 1;
    ///<summary>
    ///  Coproduct: '∐'
    ///</summary>
    CoProduct = 2;
    ///<summary>
    ///  Intersection: '∩'
    ///</summary>
    Intersection = 3;
    ///<summary>
    ///  Union: '∪'
    ///</summary>
    Union = 4;
    ///<summary>
    ///  Logical And: '∧'
    ///</summary>
    LogicalAnd = 5;
    ///<summary>
    ///  Logical Or: '∨'
    ///</summary>
    LogicalOr = 6;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  The type of vertical spacing between columns in a matrix or array
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathRowSpacingRule')]
  DNMathRowSpacingRule = type Integer;
  DNMathRowSpacingRuleHelper = record helper for DNMathRowSpacingRule
  public const
    ///<summary>
    ///  single line gap
    ///</summary>
    SingleLineGap = 0;
    ///<summary>
    ///  One and a half line gap
    ///</summary>
    OneAndAHalfLineGap = 1;
    ///<summary>
    ///  Two lines gap
    ///</summary>
    TwoLineGap = 2;
    ///<summary>
    ///  Exactly (rely on value of the RowSpacing property, measured in points)
    ///</summary>
    Exactly = 3;
    ///<summary>
    ///  Multiple (rely on value of the RowSpacing property, measured in lines)
    ///</summary>
    Multiple = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Types of gap (horizontal spacing) between columns of a matrix
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathSpacingRules')]
  DNMathSpacingRules = type Integer;
  DNMathSpacingRulesHelper = record helper for DNMathSpacingRules
  public const
    ///<summary>
    ///  Single (1 em for columns or 1 line for rows)
    ///</summary>
    SingleSpacingGap = 0;
    ///<summary>
    ///  One and a half (1.5 ems for columns or 1.5 lines for rows)
    ///</summary>
    OneAndHalfSpacingGap = 1;
    ///<summary>
    ///  Double spacing (2 ems for columns or 2 lines for rows)
    ///</summary>
    DoubleSpacingGap = 2;
    ///<summary>
    ///  Exactly value
    ///  For columns, rely on value of ColumnGap, measured in twips
    ///  For rows, rely on value of RowGap, measured in twips
    ///</summary>
    Exactly = 3;
    ///<summary>
    ///  Multiple
    ///  For columns, rely on value of ColumnGap, measured in 0.5 em increments
    ///  For rows, rely on value of RowGap, measured in lines
    ///</summary>
    Multiple = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Top/bottom positions enumeration
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathTopBotPositions')]
  DNMathTopBotPositions = type Integer;
  DNMathTopBotPositionsHelper = record helper for DNMathTopBotPositions
  public const
    ///<summary>
    ///  Not defined
    ///</summary>
    NotDefined = 0;
    ///<summary>
    ///  Top
    ///</summary>
    Top = 1;
    ///<summary>
    ///  Bottom
    ///</summary>
    Bottom = 2;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Vertical Alignment
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathVerticalAlignment')]
  DNMathVerticalAlignment = type Integer;
  DNMathVerticalAlignmentHelper = record helper for DNMathVerticalAlignment
  public const
    ///<summary>
    ///  Value is not defined
    ///</summary>
    NotDefined = 0;
    ///<summary>
    ///  Top
    ///</summary>
    Top = 1;
    ///<summary>
    ///  Center
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Bottom
    ///</summary>
    Bottom = 3;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents triple boolean values.
  ///</summary>
  [DNTypeName('Aspose.Slides.NullableBool')]
  DNNullableBool = type Integer;
  DNNullableBoolHelper = record helper for DNNullableBool
  public const
    ///<summary>
    ///  False value.
    ///</summary>
    False = 0;
    ///<summary>
    ///  True value.
    ///</summary>
    True = 1;
    ///<summary>
    ///  Boolean value is undefined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the style of the numbered bullets.
  ///</summary>
  [DNTypeName('Aspose.Slides.NumberedBulletStyle')]
  DNNumberedBulletStyle = type Integer;
  DNNumberedBulletStyleHelper = record helper for DNNumberedBulletStyle
  public const
    ///<summary>
    ///  Lowercase alphabetical characters with a period. Sample: a., b., c., ...
    ///</summary>
    BulletAlphaLCPeriod = 0;
    ///<summary>
    ///  Uppercase alphabetical characters with a period. Sample: A., B., C., ...
    ///</summary>
    BulletAlphaUCPeriod = 1;
    ///<summary>
    ///  Arabic numerals with closing parenthesis. Sample: 1), 2), 3), ...
    ///</summary>
    BulletArabicParenRight = 2;
    ///<summary>
    ///  Arabic numerals with a period. Sample: 1., 2., 3., ...
    ///</summary>
    BulletArabicPeriod = 3;
    ///<summary>
    ///  Lowercase Roman numerals with both parentheses. Sample: (i), (ii), (iii), ...
    ///</summary>
    BulletRomanLCParenBoth = 4;
    ///<summary>
    ///  Lowercase Roman numerals with closing parenthesis. Sample: i), ii), iii), ...
    ///</summary>
    BulletRomanLCParenRight = 5;
    ///<summary>
    ///  Lowercase Roman numerals with period. Sample: i., ii., iii., ...
    ///</summary>
    BulletRomanLCPeriod = 6;
    ///<summary>
    ///  Uppercase Roman numerals with period. Sample: I., II., III., ...
    ///</summary>
    BulletRomanUCPeriod = 7;
    ///<summary>
    ///  Lowercase alphabetical characters with both parentheses. Sample: (a), (b), (c), ...
    ///</summary>
    BulletAlphaLCParenBoth = 8;
    ///<summary>
    ///  Lowercase alphabetical characters with closing parenthesis. Sample: a), b), c), ...
    ///</summary>
    BulletAlphaLCParenRight = 9;
    ///<summary>
    ///  Uppercase alphabetical characters with both parentheses. Sample: (A), (B), (C), ...
    ///</summary>
    BulletAlphaUCParenBoth = 10;
    ///<summary>
    ///  Uppercase alphabetical characters with closing parenthesis. Sample: A), B), C), ...
    ///</summary>
    BulletAlphaUCParenRight = 11;
    ///<summary>
    ///  Arabic numerals with both parentheses. Sample: (1), (2), (3), ...
    ///</summary>
    BulletArabicParenBoth = 12;
    ///<summary>
    ///  Arabic numerals. Sample: 1, 2, 3, ...
    ///</summary>
    BulletArabicPlain = 13;
    ///<summary>
    ///  Uppercase Roman numerals with both parentheses. Sample: (I), (II), (III), ...
    ///</summary>
    BulletRomanUCParenBoth = 14;
    ///<summary>
    ///  Uppercase Roman numerals with closing parenthesis. Sample: I), II), III), ...
    ///</summary>
    BulletRomanUCParenRight = 15;
    ///<summary>
    ///  Simplified Chinese without a period.
    ///</summary>
    BulletSimpChinPlain = 16;
    ///<summary>
    ///  Simplified Chinese with a period.
    ///</summary>
    BulletSimpChinPeriod = 17;
    ///<summary>
    ///  Double-byte circled number for values up to 10, from  11 - arabic numbers.
    ///</summary>
    BulletCircleNumDBPlain = 18;
    ///<summary>
    ///  Text colored number with same color circle drawn around it (Wingdings white circle numbers). From  11 - arabic numbers.
    ///</summary>
    BulletCircleNumWDWhitePlain = 19;
    ///<summary>
    ///  Shadow color number with circular background of normal text color (Wingdings black circle numbers).
    ///</summary>
    BulletCircleNumWDBlackPlain = 20;
    ///<summary>
    ///  Traditional Chinese without a period.
    ///</summary>
    BulletTradChinPlain = 21;
    ///<summary>
    ///  Traditional Chinese with a period.
    ///</summary>
    BulletTradChinPeriod = 22;
    ///<summary>
    ///  Arabic language alphabetical characters with a dash.
    ///</summary>
    BulletArabicAlphaDash = 23;
    ///<summary>
    ///  Arabic Abjad alphabets with a dash.
    ///</summary>
    BulletArabicAbjadDash = 24;
    ///<summary>
    ///  Hebrew language alphabetical characters with a dash.
    ///</summary>
    BulletHebrewAlphaDash = 25;
    ///<summary>
    ///  Japanese/Korean numbers without a period.
    ///</summary>
    BulletKanjiKoreanPlain = 26;
    ///<summary>
    ///  Japanese/Korean numbers with a period.
    ///</summary>
    BulletKanjiKoreanPeriod = 27;
    ///<summary>
    ///  Double-byte Arabic numbering scheme (no punctuation).
    ///</summary>
    BulletArabicDBPlain = 28;
    ///<summary>
    ///  Double-byte Arabic numbering scheme with double-byte period.
    ///</summary>
    BulletArabicDBPeriod = 29;
    ///<summary>
    ///  Thai alphabet period.
    ///</summary>
    BulletThaiAlphaPeriod = 30;
    ///<summary>
    ///  Thai alphabet parentheses - right.
    ///</summary>
    BulletThaiAlphaParenRight = 31;
    ///<summary>
    ///  Thai alphabet parentheses - both.
    ///</summary>
    BulletThaiAlphaParenBoth = 32;
    ///<summary>
    ///  Thai numerical period.
    ///</summary>
    BulletThaiNumPeriod = 33;
    ///<summary>
    ///  Thai numerical parentheses - right.
    ///</summary>
    BulletThaiNumParenRight = 34;
    ///<summary>
    ///  Thai numerical parentheses - both.
    ///</summary>
    BulletThaiNumParenBoth = 35;
    ///<summary>
    ///  Hindi alphabet period - vowels.
    ///</summary>
    BulletHindiAlphaPeriod = 36;
    ///<summary>
    ///  Hindi numerical period.
    ///</summary>
    BulletHindiNumPeriod = 37;
    ///<summary>
    ///  Kanji Simple Chinese DBPeriod.
    ///</summary>
    BulletKanjiSimpChinDBPeriod = 38;
    ///<summary>
    ///  Hindi numerical parentheses - right.
    ///</summary>
    BulletHindiNumParenRight = 39;
    ///<summary>
    ///  Hindi alphabet period - consonants.
    ///</summary>
    BulletHindiAlpha1Period = 40;
    ///<summary>
    ///  Not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the orientation of a shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.Orientation')]
  DNOrientation = type Integer;
  DNOrientationHelper = record helper for DNOrientation
  public const
    ///<summary>
    ///  Horizontal.
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  Vertical.
    ///</summary>
    Vertical = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents graphics path commands
  ///</summary>
  [DNTypeName('Aspose.Slides.PathCommandType')]
  DNPathCommandType = type Integer;
  DNPathCommandTypeHelper = record helper for DNPathCommandType
  public const
    ///<summary>
    ///  Closes geometry path
    ///</summary>
    Close = 0;
    ///<summary>
    ///  Sets next point position of the geometry path
    ///</summary>
    MoveTo = 1;
    ///<summary>
    ///  Appends line to the geometry path
    ///</summary>
    LineTo = 2;
    ///<summary>
    ///  Appends the specified arc to the geometry path.
    ///</summary>
    ArcTo = 3;
    ///<summary>
    ///  Appends quadratic Bezier curve to the geometry path
    ///</summary>
    QuadBezierTo = 4;
    ///<summary>
    ///  Appends cubic Bezier curve to the geometry path
    ///</summary>
    CubicBezierTo = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Specifies the manner in which a path should be filled
  ///</summary>
  [DNTypeName('Aspose.Slides.PathFillModeType')]
  DNPathFillModeType = type Integer;
  DNPathFillModeTypeHelper = record helper for DNPathFillModeType
  public const
    ///<summary>
    ///  No Path Fill
    ///  This specifies that the corresponding path should have no fill.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Normal Path Fill
    ///  This specifies that the corresponding path should have a normally shaded color applied to it’s fill.
    ///</summary>
    Normal = 1;
    ///<summary>
    ///  Lighten Path Fill
    ///  This specifies that the corresponding path should have  a lightly shaded color applied to it’s fill.
    ///</summary>
    Lighten = 2;
    ///<summary>
    ///  Lighten Path Fill Less
    ///  This specifies that the corresponding path should have a slightly lighter shaded color applied to it’s fill.
    ///</summary>
    LightenLess = 3;
    ///<summary>
    ///  Darken Path Fill
    ///  This specifies that the corresponding path should have a darker shaded color applied to it’s fill.
    ///</summary>
    Darken = 4;
    ///<summary>
    ///  Darken Path Fill Less
    ///  This specifies that the corresponding path should have a slightly darker shaded color applied to it’s fill.
    ///</summary>
    DarkenLess = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the pattern style.
  ///</summary>
  [DNTypeName('Aspose.Slides.PatternStyle')]
  DNPatternStyle = type Integer;
  DNPatternStyleHelper = record helper for DNPatternStyle
  public const
    ///<summary></summary>
    Unknown = 0;
    ///<summary></summary>
    Percent05 = 1;
    ///<summary></summary>
    Percent10 = 2;
    ///<summary></summary>
    Percent20 = 3;
    ///<summary></summary>
    Percent25 = 4;
    ///<summary></summary>
    Percent30 = 5;
    ///<summary></summary>
    Percent40 = 6;
    ///<summary></summary>
    Percent50 = 7;
    ///<summary></summary>
    Percent60 = 8;
    ///<summary></summary>
    Percent70 = 9;
    ///<summary></summary>
    Percent75 = 10;
    ///<summary></summary>
    Percent80 = 11;
    ///<summary></summary>
    Percent90 = 12;
    ///<summary></summary>
    DarkHorizontal = 13;
    ///<summary></summary>
    DarkVertical = 14;
    ///<summary></summary>
    DarkDownwardDiagonal = 15;
    ///<summary></summary>
    DarkUpwardDiagonal = 16;
    ///<summary></summary>
    SmallCheckerBoard = 17;
    ///<summary></summary>
    Trellis = 18;
    ///<summary></summary>
    LightHorizontal = 19;
    ///<summary></summary>
    LightVertical = 20;
    ///<summary></summary>
    LightDownwardDiagonal = 21;
    ///<summary></summary>
    LightUpwardDiagonal = 22;
    ///<summary></summary>
    SmallGrid = 23;
    ///<summary></summary>
    DottedDiamond = 24;
    ///<summary></summary>
    WideDownwardDiagonal = 25;
    ///<summary></summary>
    WideUpwardDiagonal = 26;
    ///<summary></summary>
    DashedDownwardDiagonal = 27;
    ///<summary></summary>
    DashedUpwardDiagonal = 28;
    ///<summary></summary>
    NarrowVertical = 29;
    ///<summary></summary>
    NarrowHorizontal = 30;
    ///<summary></summary>
    DashedVertical = 31;
    ///<summary></summary>
    DashedHorizontal = 32;
    ///<summary></summary>
    LargeConfetti = 33;
    ///<summary></summary>
    LargeGrid = 34;
    ///<summary></summary>
    HorizontalBrick = 35;
    ///<summary></summary>
    LargeCheckerBoard = 36;
    ///<summary></summary>
    SmallConfetti = 37;
    ///<summary></summary>
    Zigzag = 38;
    ///<summary></summary>
    SolidDiamond = 39;
    ///<summary></summary>
    DiagonalBrick = 40;
    ///<summary></summary>
    OutlinedDiamond = 41;
    ///<summary></summary>
    Plaid = 42;
    ///<summary></summary>
    Sphere = 43;
    ///<summary></summary>
    Weave = 44;
    ///<summary></summary>
    DottedGrid = 45;
    ///<summary></summary>
    Divot = 46;
    ///<summary></summary>
    Shingle = 47;
    ///<summary></summary>
    Wave = 48;
    ///<summary></summary>
    Horizontal = 49;
    ///<summary></summary>
    Vertical = 50;
    ///<summary></summary>
    Cross = 51;
    ///<summary></summary>
    DownwardDiagonal = 52;
    ///<summary></summary>
    UpwardDiagonal = 53;
    ///<summary></summary>
    DiagonalCross = 54;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Specifies the method used to store properties of the ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Slides.PersistenceType')]
  DNPersistenceType = type Integer;
  DNPersistenceTypeHelper = record helper for DNPersistenceType
  public const
    ///<summary>
    ///  Specifies that the ActiveX control is persisted using property-bag-based persistence.
    ///  Property-bag-based persistence stores an ActiveX control by means of a collection of name
    ///  and value pairs which specify the data persisted by the ActiveX control.
    ///</summary>
    PersistPropertyBag = 0;
    ///<summary>
    ///  Specifies that the ActiveX control is persisted using a stream-based persistence
    ///  that does not support initialization of the ActiveX control to a default state.
    ///</summary>
    PersistStream = 1;
    ///<summary>
    ///  Specifies that the ActiveX control is persisted using a stream-based persistence
    ///  that supports initialization of the ActiveX control to a default state.
    ///</summary>
    PersistStreamInit = 2;
    ///<summary>
    ///  Specifies that the ActiveX control is persisted using storage-based persistence.
    ///</summary>
    PersistStorage = 3;
    ///<summary>
    ///  Persistance id not specified.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines how picture will fill area.
  ///</summary>
  [DNTypeName('Aspose.Slides.PictureFillMode')]
  DNPictureFillMode = type Integer;
  DNPictureFillModeHelper = record helper for DNPictureFillMode
  public const
    ///<summary></summary>
    Tile = 0;
    ///<summary></summary>
    Stretch = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the size of a placeholder.
  ///</summary>
  [DNTypeName('Aspose.Slides.PlaceholderSize')]
  DNPlaceholderSize = type Integer;
  DNPlaceholderSizeHelper = record helper for DNPlaceholderSize
  public const
    ///<summary>
    ///  Full.
    ///</summary>
    Full = 0;
    ///<summary>
    ///  Half.
    ///</summary>
    Half = 1;
    ///<summary>
    ///  Quarter.
    ///</summary>
    Quarter = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the type of a placeholder.
  ///</summary>
  [DNTypeName('Aspose.Slides.PlaceholderType')]
  DNPlaceholderType = type Integer;
  DNPlaceholderTypeHelper = record helper for DNPlaceholderType
  public const
    ///<summary>
    ///  Title.
    ///</summary>
    Title = 0;
    ///<summary>
    ///  Body.
    ///</summary>
    Body = 1;
    ///<summary>
    ///  Centered Title.
    ///</summary>
    CenteredTitle = 2;
    ///<summary>
    ///  Subtitle.
    ///</summary>
    Subtitle = 3;
    ///<summary>
    ///  Date and Time.
    ///</summary>
    DateAndTime = 4;
    ///<summary>
    ///  Slide Number.
    ///</summary>
    SlideNumber = 5;
    ///<summary>
    ///  Footer.
    ///</summary>
    Footer = 6;
    ///<summary>
    ///  Header.
    ///</summary>
    Header = 7;
    ///<summary>
    ///  Object.
    ///</summary>
    Object_ = 8;
    ///<summary>
    ///  Chart.
    ///</summary>
    Chart = 9;
    ///<summary>
    ///  Table.
    ///</summary>
    Table = 10;
    ///<summary>
    ///  Clip Art.
    ///</summary>
    ClipArt = 11;
    ///<summary>
    ///  Diagram.
    ///</summary>
    Diagram = 12;
    ///<summary>
    ///  Media.
    ///</summary>
    Media = 13;
    ///<summary>
    ///  Slide Image.
    ///</summary>
    SlideImage = 14;
    ///<summary>
    ///  Picture.
    ///</summary>
    Picture = 15;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Image formats. This enum is replacement for <c>System.Drawing.Imaging.ImageFormat</c> class.
  ///  It's needed for COM compatibility.
  ///</summary>
  [DNTypeName('Aspose.Slides.PPImageFormat')]
  DNPPImageFormat = type Integer;
  DNPPImageFormatHelper = record helper for DNPPImageFormat
  public const
    ///<summary>
    ///  Gets the bitmap (BMP) image format.
    ///</summary>
    Bmp = 0;
    ///<summary>
    ///  Gets the enhanced metafile (EMF) image format.
    ///</summary>
    Emf = 1;
    ///<summary>
    ///  Gets the Exchangeable Image File (Exif) format.
    ///</summary>
    Exif = 2;
    ///<summary>
    ///  Gets the Graphics Interchange Format (GIF) image format.
    ///</summary>
    Gif = 3;
    ///<summary>
    ///  Gets the Windows icon image format.
    ///</summary>
    Icon = 4;
    ///<summary>
    ///  Gets the Joint Photographic Experts Group (JPEG) image format.
    ///</summary>
    Jpeg = 5;
    ///<summary>
    ///  Gets the format of a bitmap in memory.
    ///</summary>
    MemoryBmp = 6;
    ///<summary>
    ///  Gets the W3C Portable Network Graphics (PNG) image format.
    ///</summary>
    Png = 7;
    ///<summary>
    ///  Gets the Tagged Image File Format (TIFF) image format.
    ///</summary>
    Tiff = 8;
    ///<summary>
    ///  Gets the Windows metafile (WMF) image format.
    ///</summary>
    Wmf = 9;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the behavior regarding treating the <see cref="T:Aspose.Slides.IPresentation" />
  ///  source (file or
  ///<see cref="T:System.IO.Stream" />
  ///  ) while loading and working with an instance of <see cref="T:Aspose.Slides.IPresentation" />
  ///  .
  ///<remarks>The source is the parameter passed to the <see cref="T:Aspose.Slides.IPresentation" />
  ///  constructor. In the
  ///  example below, the source is the "pres.pptx" file:
  ///<example><code>
  ///  LoadOptions loadOptions = new LoadOptions {
  ///  BlobManagementOptions = { PresentationLockingBehavior = PresentationLockingBehavior.KeepLocked } };
  ///  using (IPresentation pres = new Presentation("pres.pptx", loadOptions)) { }
  ///</code></example>
  ///  For this example, the source ("pres.pptx" file) will be locked for a <see cref="T:Aspose.Slides.IPresentation" />
  ///  instance lifetime, i.e. can't be changed or deleted by the other process.
  ///</remarks>
  ///</summary>
  [DNTypeName('Aspose.Slides.PresentationLockingBehavior')]
  DNPresentationLockingBehavior = type Integer;
  DNPresentationLockingBehaviorHelper = record helper for DNPresentationLockingBehavior
  public const
    ///<summary>
    ///  The source will be locked only for a time of <see cref="T:Aspose.Slides.IPresentation" />
    ///  constructor execution.
    ///<remarks>If <see cref="P:Aspose.Slides.IBlobManagementOptions.IsTemporaryFilesAllowed" />
    ///  is set to false, all BLOBs
    ///  will be loaded into memory. Otherwise, other means such a temporary files might be used.</remarks>
    ///<remarks>This behavior is slower than <see cref="F:Aspose.Slides.PresentationLockingBehavior.KeepLocked" />
    ///  , and if it is possible to pass the
    ///  ownership of the source to <see cref="T:Aspose.Slides.IPresentation" />
    ///  , it is recommended to use <see cref="F:Aspose.Slides.PresentationLockingBehavior.KeepLocked" />
    ///  .
    ///</remarks>
    ///</summary>
    LoadAndRelease = 0;
    ///<summary>
    ///  The source will be locked for a whole lifetime of <see cref="T:Aspose.Slides.IPresentation" />
    ///  instance, until it will
    ///  be disposed.
    ///<remarks><see cref="P:Aspose.Slides.IBlobManagementOptions.IsTemporaryFilesAllowed" />
    ///  is must be set to true for using
    ///  this behavior, otherwise exception will be thrown.</remarks>
    ///<remarks>This behavior is recommended, it is faster and consumes less memory than <see cref="F:Aspose.Slides.PresentationLockingBehavior.LoadAndRelease" />
    ///  .
    ///</remarks>
    ///</summary>
    KeepLocked = 1;
    ///<summary>
    ///  The source will be locked only for a time of <see cref="T:Aspose.Slides.IPresentation" />
    ///  constructor execution, all BLOBs
    ///  will be loaded into memory.
    ///  This behavior is the legacy behavior to provide backward compatibility. The same behavior can be achieved
    ///  by using <see cref="F:Aspose.Slides.PresentationLockingBehavior.LoadAndRelease" />
    ///  and set <see cref="P:Aspose.Slides.IBlobManagementOptions.IsTemporaryFilesAllowed" />
    ///  to false.
    ///  Please consider choosing the <see cref="F:Aspose.Slides.PresentationLockingBehavior.LoadAndRelease" />
    ///  or <see cref="F:Aspose.Slides.PresentationLockingBehavior.KeepLocked" />
    ///  behavior, what is
    ///  the most suitable for you.
    ///  After <see cref="F:Aspose.Slides.PresentationLockingBehavior.LoadAndRelease_Legacy_TemporaryDefault" />
    ///  will be removed, <see cref="F:Aspose.Slides.PresentationLockingBehavior.KeepLocked" />
    ///  will be the default behavior.
    ///</summary>
    LoadAndRelease_Legacy_TemporaryDefault = 255;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents predefined color presets.
  ///</summary>
  [DNTypeName('Aspose.Slides.PresetColor')]
  DNPresetColor = type Integer;
  DNPresetColorHelper = record helper for DNPresetColor
  public const
    ///<summary></summary>
    AliceBlue = 0;
    ///<summary></summary>
    AntiqueWhite = 1;
    ///<summary></summary>
    Aqua = 2;
    ///<summary></summary>
    Aquamarine = 3;
    ///<summary></summary>
    Azure = 4;
    ///<summary></summary>
    Beige = 5;
    ///<summary></summary>
    Bisque = 6;
    ///<summary></summary>
    Black = 7;
    ///<summary></summary>
    BlanchedAlmond = 8;
    ///<summary></summary>
    Blue = 9;
    ///<summary></summary>
    BlueViolet = 10;
    ///<summary></summary>
    Brown = 11;
    ///<summary></summary>
    BurlyWood = 12;
    ///<summary></summary>
    CadetBlue = 13;
    ///<summary></summary>
    Chartreuse = 14;
    ///<summary></summary>
    Chocolate = 15;
    ///<summary></summary>
    Coral = 16;
    ///<summary></summary>
    CornflowerBlue = 17;
    ///<summary></summary>
    Cornsilk = 18;
    ///<summary></summary>
    Crimson = 19;
    ///<summary></summary>
    Cyan = 20;
    ///<summary></summary>
    DarkBlue = 21;
    ///<summary></summary>
    DarkCyan = 22;
    ///<summary></summary>
    DarkGoldenrod = 23;
    ///<summary></summary>
    DarkGray = 24;
    ///<summary></summary>
    DarkGreen = 25;
    ///<summary></summary>
    DarkKhaki = 26;
    ///<summary></summary>
    DarkMagenta = 27;
    ///<summary></summary>
    DarkOliveGreen = 28;
    ///<summary></summary>
    DarkOrange = 29;
    ///<summary></summary>
    DarkOrchid = 30;
    ///<summary></summary>
    DarkRed = 31;
    ///<summary></summary>
    DarkSalmon = 32;
    ///<summary></summary>
    DarkSeaGreen = 33;
    ///<summary></summary>
    DarkSlateBlue = 34;
    ///<summary></summary>
    DarkSlateGray = 35;
    ///<summary></summary>
    DarkTurquoise = 36;
    ///<summary></summary>
    DarkViolet = 37;
    ///<summary></summary>
    DeepPink = 38;
    ///<summary></summary>
    DeepSkyBlue = 39;
    ///<summary></summary>
    DimGray = 40;
    ///<summary></summary>
    DodgerBlue = 41;
    ///<summary></summary>
    Firebrick = 42;
    ///<summary></summary>
    FloralWhite = 43;
    ///<summary></summary>
    ForestGreen = 44;
    ///<summary></summary>
    Fuchsia = 45;
    ///<summary></summary>
    Gainsboro = 46;
    ///<summary></summary>
    GhostWhite = 47;
    ///<summary></summary>
    Gold = 48;
    ///<summary></summary>
    Goldenrod = 49;
    ///<summary></summary>
    Gray = 50;
    ///<summary></summary>
    Green = 51;
    ///<summary></summary>
    GreenYellow = 52;
    ///<summary></summary>
    Honeydew = 53;
    ///<summary></summary>
    HotPink = 54;
    ///<summary></summary>
    IndianRed = 55;
    ///<summary></summary>
    Indigo = 56;
    ///<summary></summary>
    Ivory = 57;
    ///<summary></summary>
    Khaki = 58;
    ///<summary></summary>
    Lavender = 59;
    ///<summary></summary>
    LavenderBlush = 60;
    ///<summary></summary>
    LawnGreen = 61;
    ///<summary></summary>
    LemonChiffon = 62;
    ///<summary></summary>
    LightBlue = 63;
    ///<summary></summary>
    LightCoral = 64;
    ///<summary></summary>
    LightCyan = 65;
    ///<summary></summary>
    LightGoldenrodYellow = 66;
    ///<summary></summary>
    LightGray = 67;
    ///<summary></summary>
    LightGreen = 68;
    ///<summary></summary>
    LightPink = 69;
    ///<summary></summary>
    LightSalmon = 70;
    ///<summary></summary>
    LightSeaGreen = 71;
    ///<summary></summary>
    LightSkyBlue = 72;
    ///<summary></summary>
    LightSlateGray = 73;
    ///<summary></summary>
    LightSteelBlue = 74;
    ///<summary></summary>
    LightYellow = 75;
    ///<summary></summary>
    Lime = 76;
    ///<summary></summary>
    LimeGreen = 77;
    ///<summary></summary>
    Linen = 78;
    ///<summary></summary>
    Magenta = 79;
    ///<summary></summary>
    Maroon = 80;
    ///<summary></summary>
    MediumAquamarine = 81;
    ///<summary></summary>
    MediumBlue = 82;
    ///<summary></summary>
    MediumOrchid = 83;
    ///<summary></summary>
    MediumPurple = 84;
    ///<summary></summary>
    MediumSeaGreen = 85;
    ///<summary></summary>
    MediumSlateBlue = 86;
    ///<summary></summary>
    MediumSpringGreen = 87;
    ///<summary></summary>
    MediumTurquoise = 88;
    ///<summary></summary>
    MediumVioletRed = 89;
    ///<summary></summary>
    MidnightBlue = 90;
    ///<summary></summary>
    MintCream = 91;
    ///<summary></summary>
    MistyRose = 92;
    ///<summary></summary>
    Moccasin = 93;
    ///<summary></summary>
    NavajoWhite = 94;
    ///<summary></summary>
    Navy = 95;
    ///<summary></summary>
    OldLace = 96;
    ///<summary></summary>
    Olive = 97;
    ///<summary></summary>
    OliveDrab = 98;
    ///<summary></summary>
    Orange = 99;
    ///<summary></summary>
    OrangeRed = 100;
    ///<summary></summary>
    Orchid = 101;
    ///<summary></summary>
    PaleGoldenrod = 102;
    ///<summary></summary>
    PaleGreen = 103;
    ///<summary></summary>
    PaleTurquoise = 104;
    ///<summary></summary>
    PaleVioletRed = 105;
    ///<summary></summary>
    PapayaWhip = 106;
    ///<summary></summary>
    PeachPuff = 107;
    ///<summary></summary>
    Peru = 108;
    ///<summary></summary>
    Pink = 109;
    ///<summary></summary>
    Plum = 110;
    ///<summary></summary>
    PowderBlue = 111;
    ///<summary></summary>
    Purple = 112;
    ///<summary></summary>
    Red = 113;
    ///<summary></summary>
    RosyBrown = 114;
    ///<summary></summary>
    RoyalBlue = 115;
    ///<summary></summary>
    SaddleBrown = 116;
    ///<summary></summary>
    Salmon = 117;
    ///<summary></summary>
    SandyBrown = 118;
    ///<summary></summary>
    SeaGreen = 119;
    ///<summary></summary>
    SeaShell = 120;
    ///<summary></summary>
    Sienna = 121;
    ///<summary></summary>
    Silver = 122;
    ///<summary></summary>
    SkyBlue = 123;
    ///<summary></summary>
    SlateBlue = 124;
    ///<summary></summary>
    SlateGray = 125;
    ///<summary></summary>
    Snow = 126;
    ///<summary></summary>
    SpringGreen = 127;
    ///<summary></summary>
    SteelBlue = 128;
    ///<summary></summary>
    Tan = 129;
    ///<summary></summary>
    Teal = 130;
    ///<summary></summary>
    Thistle = 131;
    ///<summary></summary>
    Tomato = 132;
    ///<summary></summary>
    Turquoise = 133;
    ///<summary></summary>
    Violet = 134;
    ///<summary></summary>
    Wheat = 135;
    ///<summary></summary>
    White = 136;
    ///<summary></summary>
    WhiteSmoke = 137;
    ///<summary></summary>
    Yellow = 138;
    ///<summary></summary>
    YellowGreen = 139;
    ///<summary>
    ///  Color preset is not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a preset for a shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.PresetShadowType')]
  DNPresetShadowType = type Integer;
  DNPresetShadowTypeHelper = record helper for DNPresetShadowType
  public const
    ///<summary>
    ///  Represents Top Left Drop Shadow.
    ///</summary>
    TopLeftDropShadow = 0;
    ///<summary>
    ///  Represents Top Left Large Drop Shadow.
    ///</summary>
    TopLeftLargeDropShadow = 1;
    ///<summary>
    ///  Represents Back Left Long Perspective Shadow
    ///</summary>
    BackLeftLongPerspectiveShadow = 2;
    ///<summary>
    ///  Represents Back Right Long Perspective Shadow
    ///</summary>
    BackRightLongPerspectiveShadow = 3;
    ///<summary>
    ///  Represents Top Left Double Drop Shadow.
    ///</summary>
    TopLeftDoubleDropShadow = 4;
    ///<summary>
    ///  Represents Bottom Right Small Drop Shadow.
    ///</summary>
    BottomRightSmallDropShadow = 5;
    ///<summary>
    ///  Represents Front Left Long Perspective Shadow.
    ///</summary>
    FrontLeftLongPerspectiveShadow = 6;
    ///<summary>
    ///  Represents Front Right Long Perspective Shadow.
    ///</summary>
    FrontRightLongPerspectiveShadow = 7;
    ///<summary>
    ///  Represents Outer Box Shadow 3D.
    ///</summary>
    OuterBoxShadow3D = 8;
    ///<summary>
    ///  Represents Inner Box Shadow 3D.
    ///</summary>
    InnerBoxShadow3D = 9;
    ///<summary>
    ///  Represents Back Center Perspective Shadow.
    ///</summary>
    BackCenterPerspectiveShadow = 10;
    ///<summary>
    ///  Represents Top Right Drop Shadow.
    ///</summary>
    TopRightDropShadow = 11;
    ///<summary>
    ///  Represents Front Bottom Shadow.
    ///</summary>
    FrontBottomShadow = 12;
    ///<summary>
    ///  Represents Back Left Perspective Shadow.
    ///</summary>
    BackLeftPerspectiveShadow = 13;
    ///<summary>
    ///  Represents Back Right Perspective Shadow.
    ///</summary>
    BackRightPerspectiveShadow = 14;
    ///<summary>
    ///  Represents Bottom Left Drop Shadow.
    ///</summary>
    BottomLeftDropShadow = 15;
    ///<summary>
    ///  Represents Bottom Right Drop Shadow.
    ///</summary>
    BottomRightDropShadow = 16;
    ///<summary>
    ///  Represents Front Left Perspective Shadow.
    ///</summary>
    FrontLeftPerspectiveShadow = 17;
    ///<summary>
    ///  Represents Front Right Perspective Shadow.
    ///</summary>
    FrontRightPerspectiveShadow = 18;
    ///<summary>
    ///  Represents Top Left Small Drop Shadow.
    ///</summary>
    TopLeftSmallDropShadow = 19;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines 2-dimension allignment.
  ///</summary>
  [DNTypeName('Aspose.Slides.RectangleAlignment')]
  DNRectangleAlignment = type Integer;
  DNRectangleAlignmentHelper = record helper for DNRectangleAlignment
  public const
    ///<summary></summary>
    TopLeft = 0;
    ///<summary></summary>
    Top = 1;
    ///<summary></summary>
    TopRight = 2;
    ///<summary></summary>
    Left = 3;
    ///<summary></summary>
    Center = 4;
    ///<summary></summary>
    Right = 5;
    ///<summary></summary>
    BottomLeft = 6;
    ///<summary></summary>
    Bottom = 7;
    ///<summary></summary>
    BottomRight = 8;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Specifies the mode of external resource loading.
  ///</summary>
  [DNTypeName('Aspose.Slides.ResourceLoadingAction')]
  DNResourceLoadingAction = type Integer;
  DNResourceLoadingActionHelper = record helper for DNResourceLoadingAction
  public const
    ///<summary>
    ///  Aspose.Slides will load external resource as usual.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Aspose.Slides will skip loading of external resource. Only link without data will be stored for an image.
    ///</summary>
    Skip = 1;
    ///<summary>
    ///  Aspose.Slides will use byte array provided by user in <see cref="M:Aspose.Slides.IResourceLoadingArgs.SetData(System.Byte[])" />
    ///  as image data.
    ///</summary>
    UserProvided = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents colors in a color scheme.
  ///</summary>
  [DNTypeName('Aspose.Slides.SchemeColor')]
  DNSchemeColor = type Integer;
  DNSchemeColorHelper = record helper for DNSchemeColor
  public const
    ///<summary></summary>
    Background1 = 0;
    ///<summary></summary>
    Text1 = 1;
    ///<summary></summary>
    Background2 = 2;
    ///<summary></summary>
    Text2 = 3;
    ///<summary></summary>
    Accent1 = 4;
    ///<summary></summary>
    Accent2 = 5;
    ///<summary></summary>
    Accent3 = 6;
    ///<summary></summary>
    Accent4 = 7;
    ///<summary></summary>
    Accent5 = 8;
    ///<summary></summary>
    Accent6 = 9;
    ///<summary></summary>
    Hyperlink = 10;
    ///<summary></summary>
    FollowedHyperlink = 11;
    ///<summary></summary>
    StyleColor = 12;
    ///<summary></summary>
    Dark1 = 13;
    ///<summary></summary>
    Light1 = 14;
    ///<summary></summary>
    Dark2 = 15;
    ///<summary></summary>
    Light2 = 16;
    ///<summary>
    ///  Color scheme is not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents how shape element should be filled.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeElementFillSource')]
  DNShapeElementFillSource = type Integer;
  DNShapeElementFillSourceHelper = record helper for DNShapeElementFillSource
  public const
    ///<summary>
    ///  Don't fill primitive.
    ///</summary>
    NoFill = 0;
    ///<summary>
    ///  Use shape's fill.
    ///</summary>
    Shape = 1;
    ///<summary>
    ///  Use lighten shape's fill.
    ///</summary>
    Lighten = 2;
    ///<summary>
    ///  Use less lighten shape's fill.
    ///</summary>
    LightenLess = 3;
    ///<summary>
    ///  Use darken shape's fill.
    ///</summary>
    Darken = 4;
    ///<summary>
    ///  Use less darken shape's fill.
    ///</summary>
    DarkenLess = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents how shape element should be drawn.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeElementStrokeSource')]
  DNShapeElementStrokeSource = type Integer;
  DNShapeElementStrokeSourceHelper = record helper for DNShapeElementStrokeSource
  public const
    ///<summary>
    ///  Don't stroke primitive.
    ///</summary>
    NoStroke = 0;
    ///<summary>
    ///  Use shape's LineFormat.
    ///</summary>
    Shape = 1;
    ///<summary>
    ///  Use own stroke.
    ///</summary>
    OwnStroke = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines a way to change the placement of selected shapes on the slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapesAlignmentType')]
  DNShapesAlignmentType = type Integer;
  DNShapesAlignmentTypeHelper = record helper for DNShapesAlignmentType
  public const
    ///<summary>
    ///  Align left
    ///</summary>
    AlignLeft = 0;
    ///<summary>
    ///  Align right
    ///</summary>
    AlignRight = 1;
    ///<summary>
    ///  Align center
    ///</summary>
    AlignCenter = 2;
    ///<summary>
    ///  Align top
    ///</summary>
    AlignTop = 3;
    ///<summary>
    ///  Align middle
    ///</summary>
    AlignMiddle = 4;
    ///<summary>
    ///  Align bottom
    ///</summary>
    AlignBottom = 5;
    ///<summary>
    ///  Distribute horizontally
    ///</summary>
    DistributeHorizontally = 6;
    ///<summary>
    ///  Distribute vertically
    ///</summary>
    DistributeVertically = 7;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Enumeration of types of shape thumbnail bounds.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeThumbnailBounds')]
  DNShapeThumbnailBounds = type Integer;
  DNShapeThumbnailBoundsHelper = record helper for DNShapeThumbnailBounds
  public const
    ///<summary>
    ///  Shape thumbnail will have the size equal to slide size.
    ///  Shape position will be saved.
    ///</summary>
    Slide = 0;
    ///<summary>
    ///  Shape thumbnail will have size equal to the shape bounds rectangle
    ///  with taking into account shape outline settings.
    ///</summary>
    Shape = 1;
    ///<summary>
    ///  Shape thumbnail will have size equal to the shape appearance (in bounds of a slide).
    ///  It can be cases when shape appearance doesn't fit into the shape bounds. E.g.
    ///  rotation, miter join of acute angle , 3D effects, etc.
    ///</summary>
    Appearance = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents preset geometry of geometry shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeType')]
  DNShapeType = type Integer;
  DNShapeTypeHelper = record helper for DNShapeType
  public const
    ///<summary>
    ///  Custom shape.
    ///  This is return-only value.
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Line Shape.
    ///</summary>
    Line = 1;
    ///<summary>
    ///  Line Inverse Shape.
    ///</summary>
    LineInverse = 2;
    ///<summary>
    ///  Triangle Shape.
    ///</summary>
    Triangle = 3;
    ///<summary>
    ///  Right Triangle Shape.
    ///</summary>
    RightTriangle = 4;
    ///<summary>
    ///  Rectangle Shape.
    ///</summary>
    Rectangle = 5;
    ///<summary>
    ///  Diamond Shape.
    ///</summary>
    Diamond = 6;
    ///<summary>
    ///  Parallelogram Shape.
    ///</summary>
    Parallelogram = 7;
    ///<summary>
    ///  Trapezoid Shape.
    ///</summary>
    Trapezoid = 8;
    ///<summary>
    ///  Non-Isosceles Trapezoid Shape.
    ///</summary>
    NonIsoscelesTrapezoid = 9;
    ///<summary>
    ///  Pentagon Shape.
    ///</summary>
    Pentagon = 10;
    ///<summary>
    ///  Hexagon Shape.
    ///</summary>
    Hexagon = 11;
    ///<summary>
    ///  Heptagon Shape.
    ///</summary>
    Heptagon = 12;
    ///<summary>
    ///  Octagon Shape.
    ///</summary>
    Octagon = 13;
    ///<summary>
    ///  Decagon Shape.
    ///</summary>
    Decagon = 14;
    ///<summary>
    ///  Dodecagon Shape.
    ///</summary>
    Dodecagon = 15;
    ///<summary>
    ///  Four Pointed Star Shape.
    ///</summary>
    FourPointedStar = 16;
    ///<summary>
    ///  Five Pointed Star Shape.
    ///</summary>
    FivePointedStar = 17;
    ///<summary>
    ///  Six Pointed Star Shape.
    ///</summary>
    SixPointedStar = 18;
    ///<summary>
    ///  Seven Pointed Star Shape.
    ///</summary>
    SevenPointedStar = 19;
    ///<summary>
    ///  Eight Pointed Star Shape.
    ///</summary>
    EightPointedStar = 20;
    ///<summary>
    ///  Ten Pointed Star Shape.
    ///</summary>
    TenPointedStar = 21;
    ///<summary>
    ///  Twelve Pointed Star Shape.
    ///</summary>
    TwelvePointedStar = 22;
    ///<summary>
    ///  Sixteen Pointed Star Shape.
    ///</summary>
    SixteenPointedStar = 23;
    ///<summary>
    ///  Twenty Four Pointed Star Shape.
    ///</summary>
    TwentyFourPointedStar = 24;
    ///<summary>
    ///  Thirty Two Pointed Star Shape.
    ///</summary>
    ThirtyTwoPointedStar = 25;
    ///<summary>
    ///  Round Corner Rectangle Shape.
    ///</summary>
    RoundCornerRectangle = 26;
    ///<summary>
    ///  One Round Corner Rectangle Shape.
    ///</summary>
    OneRoundCornerRectangle = 27;
    ///<summary>
    ///  Two Same-side Round Corner Rectangle Shape.
    ///</summary>
    TwoSamesideRoundCornerRectangle = 28;
    ///<summary>
    ///  Two Diagonal Round Corner Rectangle Shape.
    ///</summary>
    TwoDiagonalRoundCornerRectangle = 29;
    ///<summary>
    ///  One Snip One Round Corner Rectangle Shape.
    ///</summary>
    OneSnipOneRoundCornerRectangle = 30;
    ///<summary>
    ///  One Snip Corner Rectangle Shape.
    ///</summary>
    OneSnipCornerRectangle = 31;
    ///<summary>
    ///  Two Same-side Snip Corner Rectangle Shape.
    ///</summary>
    TwoSamesideSnipCornerRectangle = 32;
    ///<summary>
    ///  Two Diagonal Snip Corner Rectangle Shape.
    ///</summary>
    TwoDiagonalSnipCornerRectangle = 33;
    ///<summary>
    ///  Plaque Shape.
    ///</summary>
    Plaque = 34;
    ///<summary>
    ///  Ellipse Shape.
    ///</summary>
    Ellipse = 35;
    ///<summary>
    ///  Teardrop Shape.
    ///</summary>
    Teardrop = 36;
    ///<summary>
    ///  Home Plate Shape.
    ///</summary>
    HomePlate = 37;
    ///<summary>
    ///  Chevron Shape.
    ///</summary>
    Chevron = 38;
    ///<summary>
    ///  Pie Wedge Shape.
    ///</summary>
    PieWedge = 39;
    ///<summary>
    ///  Pie Shape.
    ///</summary>
    Pie = 40;
    ///<summary>
    ///  Block Arc Shape.
    ///</summary>
    BlockArc = 41;
    ///<summary>
    ///  Donut Shape.
    ///</summary>
    Donut = 42;
    ///<summary>
    ///  No Smoking Shape.
    ///</summary>
    NoSmoking = 43;
    ///<summary>
    ///  Right Arrow Shape.
    ///</summary>
    RightArrow = 44;
    ///<summary>
    ///  Left Arrow Shape.
    ///</summary>
    LeftArrow = 45;
    ///<summary>
    ///  Up Arrow Shape.
    ///</summary>
    UpArrow = 46;
    ///<summary>
    ///  Down Arrow Shape.
    ///</summary>
    DownArrow = 47;
    ///<summary>
    ///  Striped Right Arrow Shape.
    ///</summary>
    StripedRightArrow = 48;
    ///<summary>
    ///  Notched Right Arrow Shape.
    ///</summary>
    NotchedRightArrow = 49;
    ///<summary>
    ///  Bent Up Arrow Shape.
    ///</summary>
    BentUpArrow = 50;
    ///<summary>
    ///  Left Right Arrow Shape.
    ///</summary>
    LeftRightArrow = 51;
    ///<summary>
    ///  Up Down Arrow Shape.
    ///</summary>
    UpDownArrow = 52;
    ///<summary>
    ///  Left Up Arrow Shape.
    ///</summary>
    LeftUpArrow = 53;
    ///<summary>
    ///  Left Right Up Arrow Shape.
    ///</summary>
    LeftRightUpArrow = 54;
    ///<summary>
    ///  Quad-Arrow Shape.
    ///</summary>
    QuadArrow = 55;
    ///<summary>
    ///  Callout Left Arrow Shape.
    ///</summary>
    CalloutLeftArrow = 56;
    ///<summary>
    ///  Callout Right Arrow Shape.
    ///</summary>
    CalloutRightArrow = 57;
    ///<summary>
    ///  Callout Up Arrow Shape.
    ///</summary>
    CalloutUpArrow = 58;
    ///<summary>
    ///  Callout Down Arrow Shape.
    ///</summary>
    CalloutDownArrow = 59;
    ///<summary>
    ///  Callout Left Right Arrow Shape.
    ///</summary>
    CalloutLeftRightArrow = 60;
    ///<summary>
    ///  Callout Up Down Arrow Shape.
    ///</summary>
    CalloutUpDownArrow = 61;
    ///<summary>
    ///  Callout Quad-Arrow Shape.
    ///</summary>
    CalloutQuadArrow = 62;
    ///<summary>
    ///  Bent Arrow Shape.
    ///</summary>
    BentArrow = 63;
    ///<summary>
    ///  U-Turn Arrow Shape.
    ///</summary>
    UTurnArrow = 64;
    ///<summary>
    ///  Circular Arrow Shape.
    ///</summary>
    CircularArrow = 65;
    ///<summary>
    ///  Left Circular Arrow Shape.
    ///</summary>
    LeftCircularArrow = 66;
    ///<summary>
    ///  Left Right Circular Arrow Shape.
    ///</summary>
    LeftRightCircularArrow = 67;
    ///<summary>
    ///  Curved Right Arrow Shape.
    ///</summary>
    CurvedRightArrow = 68;
    ///<summary>
    ///  Curved Left Arrow Shape.
    ///</summary>
    CurvedLeftArrow = 69;
    ///<summary>
    ///  Curved Up Arrow Shape.
    ///</summary>
    CurvedUpArrow = 70;
    ///<summary>
    ///  Curved Down Arrow Shape.
    ///</summary>
    CurvedDownArrow = 71;
    ///<summary>
    ///  Swoosh Arrow Shape.
    ///</summary>
    SwooshArrow = 72;
    ///<summary>
    ///  Cube Shape.
    ///</summary>
    Cube = 73;
    ///<summary>
    ///  Can Shape.
    ///</summary>
    Can = 74;
    ///<summary>
    ///  Lightning Bolt Shape.
    ///</summary>
    LightningBolt = 75;
    ///<summary>
    ///  Heart Shape.
    ///</summary>
    Heart = 76;
    ///<summary>
    ///  Sun Shape.
    ///</summary>
    Sun = 77;
    ///<summary>
    ///  Moon Shape.
    ///</summary>
    Moon = 78;
    ///<summary>
    ///  Smiley Face Shape.
    ///</summary>
    SmileyFace = 79;
    ///<summary>
    ///  Irregular Seal 1 Shape.
    ///</summary>
    IrregularSeal1 = 80;
    ///<summary>
    ///  Irregular Seal 2 Shape.
    ///</summary>
    IrregularSeal2 = 81;
    ///<summary>
    ///  Folded Corner Shape.
    ///</summary>
    FoldedCorner = 82;
    ///<summary>
    ///  Bevel Shape.
    ///</summary>
    Bevel = 83;
    ///<summary>
    ///  Frame Shape.
    ///</summary>
    Frame = 84;
    ///<summary>
    ///  Half Frame Shape.
    ///</summary>
    HalfFrame = 85;
    ///<summary>
    ///  Corner Shape.
    ///</summary>
    Corner = 86;
    ///<summary>
    ///  Diagonal Stripe Shape.
    ///</summary>
    DiagonalStripe = 87;
    ///<summary>
    ///  Chord Shape.
    ///</summary>
    Chord = 88;
    ///<summary>
    ///  Curved Arc Shape.
    ///</summary>
    CurvedArc = 89;
    ///<summary>
    ///  Left Bracket Shape.
    ///</summary>
    LeftBracket = 90;
    ///<summary>
    ///  Right Bracket Shape.
    ///</summary>
    RightBracket = 91;
    ///<summary>
    ///  Left Brace Shape.
    ///</summary>
    LeftBrace = 92;
    ///<summary>
    ///  Right Brace Shape.
    ///</summary>
    RightBrace = 93;
    ///<summary>
    ///  Bracket Pair Shape.
    ///</summary>
    BracketPair = 94;
    ///<summary>
    ///  Brace Pair Shape.
    ///</summary>
    BracePair = 95;
    ///<summary>
    ///  Straight Connector 1 Shape.
    ///</summary>
    StraightConnector1 = 96;
    ///<summary>
    ///  Bent Connector 2 Shape.
    ///</summary>
    BentConnector2 = 97;
    ///<summary>
    ///  Bent Connector 3 Shape.
    ///</summary>
    BentConnector3 = 98;
    ///<summary>
    ///  Bent Connector 4 Shape.
    ///</summary>
    BentConnector4 = 99;
    ///<summary>
    ///  Bent Connector 5 Shape.
    ///</summary>
    BentConnector5 = 100;
    ///<summary>
    ///  Curved Connector 2 Shape.
    ///</summary>
    CurvedConnector2 = 101;
    ///<summary>
    ///  Curved Connector 3 Shape.
    ///</summary>
    CurvedConnector3 = 102;
    ///<summary>
    ///  Curved Connector 4 Shape.
    ///</summary>
    CurvedConnector4 = 103;
    ///<summary>
    ///  Curved Connector 5 Shape.
    ///</summary>
    CurvedConnector5 = 104;
    ///<summary>
    ///  Callout 1 Shape.
    ///</summary>
    Callout1 = 105;
    ///<summary>
    ///  Callout 2 Shape.
    ///</summary>
    Callout2 = 106;
    ///<summary>
    ///  Callout 3 Shape.
    ///</summary>
    Callout3 = 107;
    ///<summary>
    ///  Callout 1 with Accent Shape.
    ///</summary>
    Callout1WithAccent = 108;
    ///<summary>
    ///  Callout 2 with Accent Shape.
    ///</summary>
    Callout2WithAccent = 109;
    ///<summary>
    ///  Callout 3 with Accent Shape.
    ///</summary>
    Callout3WithAccent = 110;
    ///<summary>
    ///  Callout 1 with Border Shape.
    ///</summary>
    Callout1WithBorder = 111;
    ///<summary>
    ///  Callout 2 with Border Shape.
    ///</summary>
    Callout2WithBorder = 112;
    ///<summary>
    ///  Callout 3 with Border Shape.
    ///</summary>
    Callout3WithBorder = 113;
    ///<summary>
    ///  Callout 1 with Border and Accent Shape.
    ///</summary>
    Callout1WithBorderAndAccent = 114;
    ///<summary>
    ///  Callout 2 with Border and Accent Shape.
    ///</summary>
    Callout2WithBorderAndAccent = 115;
    ///<summary>
    ///  Callout 3 with Border and Accent Shape.
    ///</summary>
    Callout3WithBorderAndAccent = 116;
    ///<summary>
    ///  Callout Wedge Rectangle Shape.
    ///</summary>
    CalloutWedgeRectangle = 117;
    ///<summary>
    ///  Callout Wedge Round Rectangle Shape.
    ///</summary>
    CalloutWedgeRoundRectangle = 118;
    ///<summary>
    ///  Callout Wedge Ellipse Shape.
    ///</summary>
    CalloutWedgeEllipse = 119;
    ///<summary>
    ///  Callout Cloud Shape.
    ///</summary>
    CalloutCloud = 120;
    ///<summary>
    ///  Cloud Shape.
    ///</summary>
    Cloud = 121;
    ///<summary>
    ///  Ribbon Shape.
    ///</summary>
    Ribbon = 122;
    ///<summary>
    ///  Ribbon 2 Shape.
    ///</summary>
    Ribbon2 = 123;
    ///<summary>
    ///  Ellipse Ribbon Shape.
    ///</summary>
    EllipseRibbon = 124;
    ///<summary>
    ///  Ellipse Ribbon 2 Shape.
    ///</summary>
    EllipseRibbon2 = 125;
    ///<summary>
    ///  Left Right Ribbon Shape.
    ///</summary>
    LeftRightRibbon = 126;
    ///<summary>
    ///  Vertical Scroll Shape.
    ///</summary>
    VerticalScroll = 127;
    ///<summary>
    ///  Horizontal Scroll Shape.
    ///</summary>
    HorizontalScroll = 128;
    ///<summary>
    ///  Wave Shape.
    ///</summary>
    Wave = 129;
    ///<summary>
    ///  Double Wave Shape.
    ///</summary>
    DoubleWave = 130;
    ///<summary>
    ///  Plus Shape.
    ///</summary>
    Plus = 131;
    ///<summary>
    ///  Process Flow Shape.
    ///</summary>
    ProcessFlow = 132;
    ///<summary>
    ///  Decision Flow Shape.
    ///</summary>
    DecisionFlow = 133;
    ///<summary>
    ///  Input Output Flow Shape.
    ///</summary>
    InputOutputFlow = 134;
    ///<summary>
    ///  Predefined Process Flow Shape.
    ///</summary>
    PredefinedProcessFlow = 135;
    ///<summary>
    ///  Internal Storage Flow Shape.
    ///</summary>
    InternalStorageFlow = 136;
    ///<summary>
    ///  Document Flow Shape.
    ///</summary>
    DocumentFlow = 137;
    ///<summary>
    ///  Multi-Document Flow Shape.
    ///</summary>
    MultiDocumentFlow = 138;
    ///<summary>
    ///  Terminator Flow Shape.
    ///</summary>
    TerminatorFlow = 139;
    ///<summary>
    ///  Preparation Flow Shape.
    ///</summary>
    PreparationFlow = 140;
    ///<summary>
    ///  Manual Input Flow Shape.
    ///</summary>
    ManualInputFlow = 141;
    ///<summary>
    ///  Manual Operation Flow Shape.
    ///</summary>
    ManualOperationFlow = 142;
    ///<summary>
    ///  Connector Flow Shape.
    ///</summary>
    ConnectorFlow = 143;
    ///<summary>
    ///  Punched Card Flow Shape.
    ///</summary>
    PunchedCardFlow = 144;
    ///<summary>
    ///  Punched Tape Flow Shape.
    ///</summary>
    PunchedTapeFlow = 145;
    ///<summary>
    ///  Summing Junction Flow Shape.
    ///</summary>
    SummingJunctionFlow = 146;
    ///<summary>
    ///  Or Flow Shape.
    ///</summary>
    OrFlow = 147;
    ///<summary>
    ///  Collate Flow Shape.
    ///</summary>
    CollateFlow = 148;
    ///<summary>
    ///  Sort Flow Shape.
    ///</summary>
    SortFlow = 149;
    ///<summary>
    ///  Extract Flow Shape.
    ///</summary>
    ExtractFlow = 150;
    ///<summary>
    ///  Merge Flow Shape.
    ///</summary>
    MergeFlow = 151;
    ///<summary>
    ///  Offline Storage Flow Shape.
    ///</summary>
    OfflineStorageFlow = 152;
    ///<summary>
    ///  Online Storage Flow Shape.
    ///</summary>
    OnlineStorageFlow = 153;
    ///<summary>
    ///  Magnetic Tape Flow Shape.
    ///</summary>
    MagneticTapeFlow = 154;
    ///<summary>
    ///  Magnetic Disk Flow Shape.
    ///</summary>
    MagneticDiskFlow = 155;
    ///<summary>
    ///  Magnetic Drum Flow Shape.
    ///</summary>
    MagneticDrumFlow = 156;
    ///<summary>
    ///  Display Flow Shape.
    ///</summary>
    DisplayFlow = 157;
    ///<summary>
    ///  Delay Flow Shape.
    ///</summary>
    DelayFlow = 158;
    ///<summary>
    ///  Alternate Process Flow Shape.
    ///</summary>
    AlternateProcessFlow = 159;
    ///<summary>
    ///  Off-Page Connector Flow Shape.
    ///</summary>
    OffPageConnectorFlow = 160;
    ///<summary>
    ///  Blank Button Shape.
    ///</summary>
    BlankButton = 161;
    ///<summary>
    ///  Home Button Shape.
    ///</summary>
    HomeButton = 162;
    ///<summary>
    ///  Help Button Shape.
    ///</summary>
    HelpButton = 163;
    ///<summary>
    ///  Information Button Shape.
    ///</summary>
    InformationButton = 164;
    ///<summary>
    ///  Forward or Next Button Shape.
    ///</summary>
    ForwardOrNextButton = 165;
    ///<summary>
    ///  Back or Previous Button Shape.
    ///</summary>
    BackOrPreviousButton = 166;
    ///<summary>
    ///  End Button Shape.
    ///</summary>
    EndButton = 167;
    ///<summary>
    ///  Beginning Button Shape.
    ///</summary>
    BeginningButton = 168;
    ///<summary>
    ///  Return Button Shape.
    ///</summary>
    ReturnButton = 169;
    ///<summary>
    ///  Document Button Shape.
    ///</summary>
    DocumentButton = 170;
    ///<summary>
    ///  Sound Button Shape.
    ///</summary>
    SoundButton = 171;
    ///<summary>
    ///  Movie Button Shape.
    ///</summary>
    MovieButton = 172;
    ///<summary>
    ///  Gear 6 Shape.
    ///</summary>
    Gear6 = 173;
    ///<summary>
    ///  Gear 9 Shape.
    ///</summary>
    Gear9 = 174;
    ///<summary>
    ///  Funnel Shape.
    ///</summary>
    Funnel = 175;
    ///<summary>
    ///  Plus Math Shape.
    ///</summary>
    PlusMath = 176;
    ///<summary>
    ///  Minus Math Shape.
    ///</summary>
    MinusMath = 177;
    ///<summary>
    ///  Multiply Math Shape.
    ///</summary>
    MultiplyMath = 178;
    ///<summary>
    ///  Divide Math Shape.
    ///</summary>
    DivideMath = 179;
    ///<summary>
    ///  Equal Math Shape.
    ///</summary>
    EqualMath = 180;
    ///<summary>
    ///  Not Equal Math Shape.
    ///</summary>
    NotEqualMath = 181;
    ///<summary>
    ///  Corner Tabs Shape.
    ///</summary>
    CornerTabs = 182;
    ///<summary>
    ///  Square Tabs Shape.
    ///</summary>
    SquareTabs = 183;
    ///<summary>
    ///  Plaque Tabs Shape.
    ///</summary>
    PlaqueTabs = 184;
    ///<summary>
    ///  Chart X Shape.
    ///</summary>
    ChartX = 185;
    ///<summary>
    ///  Chart Star Shape.
    ///</summary>
    ChartStar = 186;
    ///<summary>
    ///  Chart Plus Shape.
    ///</summary>
    ChartPlus = 187;
    ///<summary>
    ///  Not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the slide layout type.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideLayoutType')]
  DNSlideLayoutType = type Integer;
  DNSlideLayoutTypeHelper = record helper for DNSlideLayoutType
  public const
    ///<summary>
    ///  Title
    ///</summary>
    Title = 0;
    ///<summary>
    ///  Text
    ///</summary>
    Text = 1;
    ///<summary>
    ///  Two Column Text
    ///</summary>
    TwoColumnText = 2;
    ///<summary>
    ///  Table
    ///</summary>
    Table = 3;
    ///<summary>
    ///  Text and Chart
    ///</summary>
    TextAndChart = 4;
    ///<summary>
    ///  Chart and Text
    ///</summary>
    ChartAndText = 5;
    ///<summary>
    ///  Diagram
    ///</summary>
    Diagram = 6;
    ///<summary>
    ///  Chart
    ///</summary>
    Chart = 7;
    ///<summary>
    ///  Text and Clip Art
    ///</summary>
    TextAndClipArt = 8;
    ///<summary>
    ///  Clip Art and Text
    ///</summary>
    ClipArtAndText = 9;
    ///<summary>
    ///  Title Only
    ///</summary>
    TitleOnly = 10;
    ///<summary>
    ///  Blank
    ///</summary>
    Blank = 11;
    ///<summary>
    ///  Text and Object
    ///</summary>
    TextAndObject = 12;
    ///<summary>
    ///  Object and Text
    ///</summary>
    ObjectAndText = 13;
    ///<summary>
    ///  Object
    ///</summary>
    Object_ = 14;
    ///<summary>
    ///  Title and Object
    ///</summary>
    TitleAndObject = 15;
    ///<summary>
    ///  Text and Media
    ///</summary>
    TextAndMedia = 16;
    ///<summary>
    ///  Media and Text
    ///</summary>
    MediaAndText = 17;
    ///<summary>
    ///  Object over Text
    ///</summary>
    ObjectOverText = 18;
    ///<summary>
    ///  Text over Object
    ///</summary>
    TextOverObject = 19;
    ///<summary>
    ///  Text and Two Objects
    ///</summary>
    TextAndTwoObjects = 20;
    ///<summary>
    ///  Two Objects and Text
    ///</summary>
    TwoObjectsAndText = 21;
    ///<summary>
    ///  Two Objects over Text
    ///</summary>
    TwoObjectsOverText = 22;
    ///<summary>
    ///  Four Objects
    ///</summary>
    FourObjects = 23;
    ///<summary>
    ///  Vertical Text
    ///</summary>
    VerticalText = 24;
    ///<summary>
    ///  Clip Art and Vertical Text
    ///</summary>
    ClipArtAndVerticalText = 25;
    ///<summary>
    ///  Vertical Title and Text
    ///</summary>
    VerticalTitleAndText = 26;
    ///<summary>
    ///  Vertical Title and Text Over Chart
    ///</summary>
    VerticalTitleAndTextOverChart = 27;
    ///<summary>
    ///  Two Objects
    ///</summary>
    TwoObjects = 28;
    ///<summary>
    ///  Object and Two Object
    ///</summary>
    ObjectAndTwoObject = 29;
    ///<summary>
    ///  Two Objects and Object
    ///</summary>
    TwoObjectsAndObject = 30;
    ///<summary>
    ///  Section Header
    ///</summary>
    SectionHeader = 31;
    ///<summary>
    ///  Two Text and Two Objects
    ///</summary>
    TwoTextAndTwoObjects = 32;
    ///<summary>
    ///  Title, Object, and Caption
    ///</summary>
    TitleObjectAndCaption = 33;
    ///<summary>
    ///  Picture and Caption
    ///</summary>
    PictureAndCaption = 34;
    ///<summary>
    ///  Custom
    ///</summary>
    Custom = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the slide orientation.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideOrienation')]
  DNSlideOrienation = type Integer;
  DNSlideOrienationHelper = record helper for DNSlideOrienation
  public const
    ///<summary>
    ///  Landscape orientation.
    ///</summary>
    Landscape = 0;
    ///<summary>
    ///  Portrait orientation.
    ///</summary>
    Portrait = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Specifies a direction restricted to the corners and center.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionCornerAndCenterDirectionType')]
  DNTransitionCornerAndCenterDirectionType = type Integer;
  DNTransitionCornerAndCenterDirectionTypeHelper = record helper for DNTransitionCornerAndCenterDirectionType
  public const
    ///<summary />
    LeftDown = 0;
    ///<summary />
    LeftUp = 1;
    ///<summary />
    RightDown = 2;
    ///<summary />
    RightUp = 3;
    ///<summary />
    Center = 4;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent corner direction transition types.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionCornerDirectionType')]
  DNTransitionCornerDirectionType = type Integer;
  DNTransitionCornerDirectionTypeHelper = record helper for DNTransitionCornerDirectionType
  public const
    ///<summary />
    LeftDown = 0;
    ///<summary />
    LeftUp = 1;
    ///<summary />
    RightDown = 2;
    ///<summary />
    RightUp = 3;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent eight direction transition types.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionEightDirectionType')]
  DNTransitionEightDirectionType = type Integer;
  DNTransitionEightDirectionTypeHelper = record helper for DNTransitionEightDirectionType
  public const
    ///<summary />
    LeftDown = 0;
    ///<summary />
    LeftUp = 1;
    ///<summary />
    RightDown = 2;
    ///<summary />
    RightUp = 3;
    ///<summary />
    Left = 4;
    ///<summary />
    Up = 5;
    ///<summary />
    Down = 6;
    ///<summary />
    Right = 7;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent in or out direction transition types.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionInOutDirectionType')]
  DNTransitionInOutDirectionType = type Integer;
  DNTransitionInOutDirectionTypeHelper = record helper for DNTransitionInOutDirectionType
  public const
    ///<summary />
    In_ = 0;
    ///<summary />
    Out_ = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Specifies a direction restricted to the values of left and right.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionLeftRightDirectionType')]
  DNTransitionLeftRightDirectionType = type Integer;
  DNTransitionLeftRightDirectionTypeHelper = record helper for DNTransitionLeftRightDirectionType
  public const
    ///<summary />
    Left = 0;
    ///<summary />
    Right = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent a type of morph transition.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionMorphType')]
  DNTransitionMorphType = type Integer;
  DNTransitionMorphTypeHelper = record helper for DNTransitionMorphType
  public const
    ///<summary>
    ///  Morph transition will be performed considering shapes as indivisible objects.
    ///</summary>
    ByObject = 0;
    ///<summary>
    ///  Morph transition will be performed with transferring text by words where possible.
    ///</summary>
    ByWord = 1;
    ///<summary>
    ///  Morph transition will be performed with transferring text by characters where possible.
    ///</summary>
    ByChar = 2;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Specifies a geometric pattern that tiles together to fill a larger area.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionPattern')]
  DNTransitionPattern = type Integer;
  DNTransitionPatternHelper = record helper for DNTransitionPattern
  public const
    ///<summary>
    ///  Diamond tile pattern
    ///</summary>
    Diamond = 0;
    ///<summary>
    ///  Hexagon tile pattern
    ///</summary>
    Hexagon = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Specifies a geometric shape that tiles together to fill a larger area.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionShredPattern')]
  DNTransitionShredPattern = type Integer;
  DNTransitionShredPatternHelper = record helper for DNTransitionShredPattern
  public const
    ///<summary>
    ///  Vertical strips
    ///</summary>
    Strip = 0;
    ///<summary>
    ///  Small rectangles
    ///</summary>
    Rectangle = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent side direction transition types.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionSideDirectionType')]
  DNTransitionSideDirectionType = type Integer;
  DNTransitionSideDirectionTypeHelper = record helper for DNTransitionSideDirectionType
  public const
    ///<summary />
    Left = 0;
    ///<summary />
    Up = 1;
    ///<summary />
    Down = 2;
    ///<summary />
    Right = 3;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent sound mode of transition.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionSoundMode')]
  DNTransitionSoundMode = type Integer;
  DNTransitionSoundModeHelper = record helper for DNTransitionSoundMode
  public const
    ///<summary />
    StartSound = 0;
    ///<summary />
    StopPrevoiusSound = 1;
    ///<summary />
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent transition speed types.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionSpeed')]
  DNTransitionSpeed = type Integer;
  DNTransitionSpeedHelper = record helper for DNTransitionSpeed
  public const
    ///<summary />
    Fast = 0;
    ///<summary />
    Medium = 1;
    ///<summary />
    Slow = 2;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represent slide show transition type.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionType')]
  DNTransitionType = type Integer;
  DNTransitionTypeHelper = record helper for DNTransitionType
  public const
    ///<summary />
    None = 0;
    ///<summary />
    Blinds = 1;
    ///<summary />
    Checker = 2;
    ///<summary>
    ///  Relates to transition Shape (with option Circle) in PowerPoint 2010.
    ///</summary>
    Circle = 3;
    ///<summary />
    Comb = 4;
    ///<summary />
    Cover = 5;
    ///<summary />
    Cut = 6;
    ///<summary>
    ///  Relates to transition Shape (with option Diamond) in PowerPoint 2010.
    ///</summary>
    Diamond = 7;
    ///<summary />
    Dissolve = 8;
    ///<summary />
    Fade = 9;
    ///<summary />
    Newsflash = 10;
    ///<summary>
    ///  Relates to transition Shape (with option Plus) in PowerPoint 2010.
    ///</summary>
    Plus = 11;
    ///<summary />
    Pull = 12;
    ///<summary />
    Push = 13;
    ///<summary />
    Random = 14;
    ///<summary />
    RandomBar = 15;
    ///<summary>
    ///  Equivalent to transition Wipe in PowerPoint 2010.
    ///</summary>
    Split = 16;
    ///<summary />
    Strips = 17;
    ///<summary>
    ///  Relates to transition Clock (with option Wedge) in PowerPoint 2010.
    ///</summary>
    Wedge = 18;
    ///<summary>
    ///  Relates to transition Clock (with option Clockwise) in PowerPoint 2010.
    ///</summary>
    Wheel = 19;
    ///<summary />
    Wipe = 20;
    ///<summary>
    ///  Relates to transition Shape (with options In/Out) in PowerPoint 2010.
    ///  See also <see cref="F:Aspose.Slides.SlideShow.TransitionType.Warp" />
    ///  that relates to transition Zoom in PowerPoint 2010.
    ///</summary>
    Zoom = 21;
    ///<summary>Available in PowerPoint 2010.</summary>
    Vortex = 22;
    ///<summary>Available in PowerPoint 2010.</summary>
    Switch = 23;
    ///<summary>Available in PowerPoint 2010.</summary>
    Flip = 24;
    ///<summary>Available in PowerPoint 2010.</summary>
    Ripple = 25;
    ///<summary>Available in PowerPoint 2010.</summary>
    Honeycomb = 26;
    ///<summary>Available in PowerPoint 2010.</summary>
    Cube = 27;
    ///<summary>Available in PowerPoint 2010.</summary>
    Box = 28;
    ///<summary>Available in PowerPoint 2010.</summary>
    Rotate = 29;
    ///<summary>Available in PowerPoint 2010.</summary>
    Orbit = 30;
    ///<summary>Available in PowerPoint 2010.</summary>
    Doors = 31;
    ///<summary>Available in PowerPoint 2010.</summary>
    Window = 32;
    ///<summary>Available in PowerPoint 2010.</summary>
    Ferris = 33;
    ///<summary>Available in PowerPoint 2010.</summary>
    Gallery = 34;
    ///<summary>Available in PowerPoint 2010.</summary>
    Conveyor = 35;
    ///<summary>Available in PowerPoint 2010.</summary>
    Pan = 36;
    ///<summary>Available in PowerPoint 2010.</summary>
    Glitter = 37;
    ///<summary>
    ///  Relates to transition Zoom in PowerPoint 2010.
    ///  Available in PowerPoint 2010.
    ///</summary>
    Warp = 38;
    ///<summary>Available in PowerPoint 2010.</summary>
    Flythrough = 39;
    ///<summary>Available in PowerPoint 2010.</summary>
    Flash = 40;
    ///<summary>Available in PowerPoint 2010.</summary>
    Shred = 41;
    ///<summary>Available in PowerPoint 2010.</summary>
    Reveal = 42;
    ///<summary>
    ///  Relates to transition Clock (with option Counterclockwise) in PowerPoint 2010.
    ///  Available in PowerPoint 2010.
    ///</summary>
    WheelReverse = 43;
    ///<summary>Available in PowerPoint 2013.</summary>
    FallOver = 44;
    ///<summary>Available in PowerPoint 2013.</summary>
    Drape = 45;
    ///<summary>Available in PowerPoint 2013.</summary>
    Curtains = 46;
    ///<summary>Available in PowerPoint 2013.</summary>
    Wind = 47;
    ///<summary>Available in PowerPoint 2013.</summary>
    Prestige = 48;
    ///<summary>Available in PowerPoint 2013.</summary>
    Fracture = 49;
    ///<summary>Available in PowerPoint 2013.</summary>
    Crush = 50;
    ///<summary>Available in PowerPoint 2013.</summary>
    PeelOff = 51;
    ///<summary>Available in PowerPoint 2013.</summary>
    PageCurlDouble = 52;
    ///<summary>Available in PowerPoint 2013.</summary>
    PageCurlSingle = 53;
    ///<summary>Available in PowerPoint 2013.</summary>
    Airplane = 54;
    ///<summary>Available in PowerPoint 2013.</summary>
    Origami = 55;
    ///<summary>Relates to transition Morph (with option Type) in PowerPoint 2019.</summary>
    Morph = 56;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the scale type of slide content.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideSizeScaleType')]
  DNSlideSizeScaleType = type Integer;
  DNSlideSizeScaleTypeHelper = record helper for DNSlideSizeScaleType
  public const
    ///<summary>
    ///  Do not scale.
    ///</summary>
    DoNotScale = 0;
    ///<summary>
    ///  Scale to ensure fit.
    ///</summary>
    EnsureFit = 1;
    ///<summary>
    ///  Maximize size of content.
    ///</summary>
    Maximize = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the slide size preset.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideSizeType')]
  DNSlideSizeType = type Integer;
  DNSlideSizeTypeHelper = record helper for DNSlideSizeType
  public const
    ///<summary>
    ///  On screen 4x3
    ///</summary>
    OnScreen = 0;
    ///<summary>
    ///  Letter
    ///</summary>
    LetterPaper = 1;
    ///<summary>
    ///  A4
    ///</summary>
    A4Paper = 2;
    ///<summary>
    ///  Slide 35mm
    ///</summary>
    Slide35mm = 3;
    ///<summary>
    ///  Overhead
    ///</summary>
    Overhead = 4;
    ///<summary>
    ///  Banner
    ///</summary>
    Banner = 5;
    ///<summary>
    ///  Custom size
    ///</summary>
    Custom = 6;
    ///<summary>
    ///  Ledger
    ///</summary>
    Ledger = 7;
    ///<summary>
    ///  A3
    ///</summary>
    A3Paper = 8;
    ///<summary>
    ///  B4 ISO
    ///</summary>
    B4IsoPaper = 9;
    ///<summary>
    ///  B5 ISO
    ///</summary>
    B5IsoPaper = 10;
    ///<summary>
    ///  B4 JIS
    ///</summary>
    B4JisPaper = 11;
    ///<summary>
    ///  B5 JIS
    ///</summary>
    B5JisPaper = 12;
    ///<summary>
    ///  Hagaki card
    ///</summary>
    HagakiCard = 13;
    ///<summary>
    ///  On screen 16x9
    ///</summary>
    OnScreen16x9 = 14;
    ///<summary>
    ///  On Screen 16x10
    ///</summary>
    OnScreen16x10 = 15;
    ///<summary>
    ///  Widescreen
    ///</summary>
    Widescreen = 16;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents formatting type the child nodes in an organization chart
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.OrganizationChartLayoutType')]
  DNOrganizationChartLayoutType = type Integer;
  DNOrganizationChartLayoutTypeHelper = record helper for DNOrganizationChartLayoutType
  public const
    ///<summary>
    ///  Initial layout type
    ///</summary>
    Initial = 0;
    ///<summary>
    ///  Places child nodes horizontally below the parent node.
    ///</summary>
    Standart = 1;
    ///<summary>
    ///  Places child nodes vertically below the parent node on both the left and the right side.
    ///</summary>
    BothHanging = 2;
    ///<summary>
    ///  Places child nodes vertically below the parent node on the left side.
    ///</summary>
    LeftHanging = 3;
    ///<summary>
    ///  Places child nodes vertically below the parent node on the right side.
    ///</summary>
    RightHanging = 4;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents color scheme of a SmartArt diagram.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtColorType')]
  DNSmartArtColorType = type Integer;
  DNSmartArtColorTypeHelper = record helper for DNSmartArtColorType
  public const
    ///<summary>
    ///  Dark1Outline
    ///</summary>
    Dark1Outline = 0;
    ///<summary>
    ///  Dark2Outline
    ///</summary>
    Dark2Outline = 1;
    ///<summary>
    ///  DarkFill
    ///</summary>
    DarkFill = 2;
    ///<summary>
    ///  ColorfulAccentColors
    ///</summary>
    ColorfulAccentColors = 3;
    ///<summary>
    ///  ColorfulAccentColors2to3
    ///</summary>
    ColorfulAccentColors2to3 = 4;
    ///<summary>
    ///  ColorfulAccentColors3to4
    ///</summary>
    ColorfulAccentColors3to4 = 5;
    ///<summary>
    ///  ColorfulAccentColors4to5
    ///</summary>
    ColorfulAccentColors4to5 = 6;
    ///<summary>
    ///  ColorfulAccentColors5to6
    ///</summary>
    ColorfulAccentColors5to6 = 7;
    ///<summary>
    ///  ColoredOutlineAccent1
    ///</summary>
    ColoredOutlineAccent1 = 8;
    ///<summary>
    ///  ColoredFillAccent1
    ///</summary>
    ColoredFillAccent1 = 9;
    ///<summary>
    ///  GradientRangeAccent1
    ///</summary>
    GradientRangeAccent1 = 10;
    ///<summary>
    ///  GradientLoopAccent1
    ///</summary>
    GradientLoopAccent1 = 11;
    ///<summary>
    ///  TransparentGradientRangeAccent1
    ///</summary>
    TransparentGradientRangeAccent1 = 12;
    ///<summary>
    ///  ColoredOutlineAccent2
    ///</summary>
    ColoredOutlineAccent2 = 13;
    ///<summary>
    ///  ColoredFillAccent2
    ///</summary>
    ColoredFillAccent2 = 14;
    ///<summary>
    ///  GradientRangeAccent2
    ///</summary>
    GradientRangeAccent2 = 15;
    ///<summary>
    ///  GradientLoopAccent2
    ///</summary>
    GradientLoopAccent2 = 16;
    ///<summary>
    ///  TransparentGradientRangeAccent2
    ///</summary>
    TransparentGradientRangeAccent2 = 17;
    ///<summary>
    ///  ColoredOutlineAccent3
    ///</summary>
    ColoredOutlineAccent3 = 18;
    ///<summary>
    ///  ColoredFillAccent3
    ///</summary>
    ColoredFillAccent3 = 19;
    ///<summary>
    ///  GradientRangeAccent3
    ///</summary>
    GradientRangeAccent3 = 20;
    ///<summary>
    ///  GradientLoopAccent3
    ///</summary>
    GradientLoopAccent3 = 21;
    ///<summary>
    ///  TransparentGradientRangeAccent3
    ///</summary>
    TransparentGradientRangeAccent3 = 22;
    ///<summary>
    ///  ColoredOutlineAccent4
    ///</summary>
    ColoredOutlineAccent4 = 23;
    ///<summary>
    ///  ColoredFillAccent4
    ///</summary>
    ColoredFillAccent4 = 24;
    ///<summary>
    ///  GradientRangeAccent4
    ///</summary>
    GradientRangeAccent4 = 25;
    ///<summary>
    ///  GradientLoopAccent4
    ///</summary>
    GradientLoopAccent4 = 26;
    ///<summary>
    ///  TransparentGradientRangeAccent4
    ///</summary>
    TransparentGradientRangeAccent4 = 27;
    ///<summary>
    ///  ColoredOutlineAccent5
    ///</summary>
    ColoredOutlineAccent5 = 28;
    ///<summary>
    ///  ColoredFillAccent5
    ///</summary>
    ColoredFillAccent5 = 29;
    ///<summary>
    ///  GradientRangeAccent5
    ///</summary>
    GradientRangeAccent5 = 30;
    ///<summary>
    ///  GradientLoopAccent5
    ///</summary>
    GradientLoopAccent5 = 31;
    ///<summary>
    ///  TransparentGradientRangeAccent5
    ///</summary>
    TransparentGradientRangeAccent5 = 32;
    ///<summary>
    ///  ColoredOutlineAccent6
    ///</summary>
    ColoredOutlineAccent6 = 33;
    ///<summary>
    ///  ColoredFillAccent6
    ///</summary>
    ColoredFillAccent6 = 34;
    ///<summary>
    ///  GradientRangeAccent6
    ///</summary>
    GradientRangeAccent6 = 35;
    ///<summary>
    ///  GradientLoopAccent6
    ///</summary>
    GradientLoopAccent6 = 36;
    ///<summary>
    ///  TransparentGradientRangeAccent6
    ///</summary>
    TransparentGradientRangeAccent6 = 37;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents layout type of a SmartArt diagram.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtLayoutType')]
  DNSmartArtLayoutType = type Integer;
  DNSmartArtLayoutTypeHelper = record helper for DNSmartArtLayoutType
  public const
    ///<summary>
    ///  Use to show a progression, a timeline, or sequential steps in a task, process, or workflow. Works well for illustrating both Level 1 and Level 2 text.
    ///</summary>
    AccentProcess = 0;
    ///<summary>
    ///  Use to show a central, photographic idea with related ideas on the side. The top Level 1 text appears over the central picture. Corresponding text for other Level 1 shapes appear next to the small circular pictures. This layout also works well with no text.
    ///</summary>
    AccentedPicture = 1;
    ///<summary>
    ///  Use to show groups of information or sequential steps in a task, process, or workflow. Emphasizes the interaction or relationships among the groups of information.
    ///</summary>
    AlternatingFlow = 2;
    ///<summary>
    ///  Use to represent a series of interconnected ideas. Level 1 text appears inside the hexagons. Level 2 text appears outside the shapes.
    ///</summary>
    AlternatingHexagons = 3;
    ///<summary>
    ///  Use to show a series of pictures from top to bottom. Text appears alternately on the right or left of the picture.
    ///</summary>
    AlternatingPictureBlocks = 4;
    ///<summary>
    ///  Use to show a set of pictures with text. The corresponding text appears in the central circles with the images alternating from left to right.
    ///</summary>
    AlternatingPictureCircles = 5;
    ///<summary>
    ///  Use to show either related or contrasting concepts with some connection, such as opposing forces. The first two lines of Level 1 text are used for text in the arrows. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    ArrowRibbon = 6;
    ///<summary>
    ///  Use to show an ascending series of pictures with descriptive text. Works best with a small amount of text.
    ///</summary>
    AscendingPictureAccentProcess = 7;
    ///<summary>
    ///  Use to compare or show the relationship between two ideas. Each of the first two lines of Level 1 text corresponds to text at the top of one side of the center point. Emphasizes Level 2 text, which is limited to four shapes on each side of the center point. The balance tips towards the side with the most shapes containing Level 2 text. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    Balance = 8;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow. Maximizes both horizontal and vertical display space for shapes.
    ///</summary>
    BasicBendingProcess = 9;
    ///<summary>
    ///  Use to show non-sequential or grouped blocks of information. Maximizes both horizontal and vertical display space for shapes.
    ///</summary>
    BasicBlockList = 10;
    ///<summary>
    ///  Use to show a progression; a timeline; sequential steps in a task, process, or workflow; or to emphasize movement or direction. Level 1 text appears inside an arrow shape while Level 2 text appears below the arrow shapes.
    ///</summary>
    BasicChevronProcess = 11;
    ///<summary>
    ///  Use to represent a continuing sequence of stages, tasks, or events in a circular flow. Emphasizes the stages or steps rather than the connecting arrows or flow. Works best with Level 1 text only.
    ///</summary>
    BasicCycle = 12;
    ///<summary>
    ///  Use to show the relationship of components to a whole in quadrants. The first four lines of Level 1 text appear in the quadrants. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    BasicMatrix = 13;
    ///<summary>
    ///  Use to show how individual parts form a whole. The first seven lines of Level 1 text correspond to the evenly distributed wedge or pie shapes. The top Level 1 text shape appears outside of the rest of the pie for emphasis. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    BasicPie = 14;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow.
    ///</summary>
    BasicProcess = 15;
    ///<summary>
    ///  Use to show proportional, interconnected, or hierarchical relationships with the largest component on the bottom and narrowing up. Level 1 text appears in the pyramid segments and Level 2 text appears in shapes alongside each segment.
    ///</summary>
    BasicPyramid = 16;
    ///<summary>
    ///  Use to show the relationship to a central idea in a cycle. The first line of Level 1 text corresponds to the central shape, and its Level 2 text corresponds to the surrounding circular shapes. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    BasicRadial = 17;
    ///<summary>
    ///  Use to show containment, gradations, or hierarchical relationships. The first five lines of Level 1 text are associated with a circle. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    BasicTarget = 18;
    ///<summary>
    ///  Use to show sequential steps in a task, process, or workflow, or to show timeline information. Works well with both Level 1 and Level 2 text.
    ///</summary>
    BasicTimeline = 19;
    ///<summary>
    ///  Use to show overlapping or interconnected relationships. The first seven lines of Level 1 text correspond with a circle. If there are four or fewer lines of Level 1 text, the text is inside the circles. If there are more than four lines of Level 1 text, the text is outside of the circles. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    BasicVenn = 20;
    ///<summary>
    ///  Use to show non-sequential or grouped blocks of information. The small circular shapes are designed to contain pictures. Works well for illustrating both Level 1 and Level 2 text. Maximizes both horizontal and vertical display space for shapes.
    ///</summary>
    BendingPictureAccentList = 21;
    ///<summary>
    ///  Use to show a series of pictures. The box covering the bottom corner can contain small amounts of text.
    ///</summary>
    BendingPictureBlocks = 22;
    ///<summary>
    ///  Use to show a sequential series of pictures. The box covering the bottom corner can contain small amounts of text.
    ///</summary>
    BendingPictureCaption = 23;
    ///<summary>
    ///  Use to show a series of pictures. The title and description appear in a callout shape under each picture.
    ///</summary>
    BendingPictureCaptionList = 24;
    ///<summary>
    ///  Use to show a series of pictures. A semi-transparent box covers the lower portion of the picture and contains all levels of text.
    ///</summary>
    BendingPictureSemiTransparentText = 25;
    ///<summary>
    ///  Use to represent a continuing sequence of stages, tasks, or events in a circular flow. Emphasizes the stages or steps rather than the connecting arrows or flow.
    ///</summary>
    BlockCycle = 26;
    ///<summary>
    ///  Use to show a series of pictures. Can contain up to eight Level 1 pictures. Unused text and pictures do not appear, but remain available if you switch layouts. Works best with small amounts of text.
    ///</summary>
    BubblePictureList = 27;
    ///<summary>
    ///  Use to show pictures with multiple levels of text.  Works best with a small amount of Level 1 text and a medium amount of Level 2 text.
    ///</summary>
    CaptionedPictures = 28;
    ///<summary>
    ///  Use to show a progression through several processes that make up an overall workflow. Also works for illustrating contrasting processes. The Level 1 text corresponds to the first arrow shape on the left, while the Level 2 text corresponds to horizontal sub-steps for each shape that contains Level 1 text.
    ///</summary>
    ChevronList = 29;
    ///<summary>
    ///  Use to show a series of events or timeline information. Level 1 text appears next to larger circular shapes. Level 2 text appears next to smaller circular shapes.
    ///</summary>
    CircleAccentTimeline = 30;
    ///<summary>
    ///  Use to show sequential items with supporting text for each item. This diagram works best with small amounts of Level 1 text.
    ///</summary>
    CircleArrowProcess = 31;
    ///<summary>
    ///  Use to show hierarchical information or reporting relationships in an organization. Pictures appear in circles and corresponding text appears next to the pictures.
    ///</summary>
    CirclePictureHierarchy = 32;
    ///<summary>
    ///  Use to show the relationship to or from a central idea. Level 2 text is added non-sequentially and is limited to five items. There can only be one Level 1 item.
    ///</summary>
    CircleRelationship = 33;
    ///<summary>
    ///  Use to show a long or non-linear sequence or steps in a task, process, or workflow. Works best with Level 1 text only. Maximizes both horizontal and vertical display space for shapes.
    ///</summary>
    CircularBendingProcess = 34;
    ///<summary>
    ///  Use to show a central idea and sub-ideas or related items. The text for the first picture covers the lower portion of the picture. The corresponding text for other Level 1 shapes appears next to the small circular pictures. This diagram also works well with no text.
    ///</summary>
    CircularPictureCallout = 35;
    ///<summary>
    ///  Use to show a progression, a timeline, or sequential steps in a task, process, or workflow, or to emphasize movement or direction. Can be used to emphasize information in the starting shape. Works best with Level 1 text only.
    ///</summary>
    ClosedChevronProcess = 36;
    ///<summary>
    ///  Use to show a timeline or sequential steps in a task, process, or workflow. Works best with Level 1 text because each line of Level 1 text appears inside the arrow shape. Level 2 text appears outside the arrow shape.
    ///</summary>
    ContinuousArrowProcess = 37;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow. Works best with minimal Level 1 and Level 2 text.
    ///</summary>
    ContinuousBlockProcess = 38;
    ///<summary>
    ///  Use to represent a continuing sequence of stages, tasks, or events in a circular flow. Emphasizes the connection between all components. Works best with Level 1 text only.
    ///</summary>
    ContinuousCycle = 39;
    ///<summary>
    ///  Use to show groups of interconnected information. The circular shapes are designed to contain pictures.
    ///</summary>
    ContinuousPictureList = 40;
    ///<summary>
    ///  Use to show ideas or concepts that converge to a central point. Works best with Level 1 text only.
    ///</summary>
    ConvergingArrows = 41;
    ///<summary>
    ///  Use to show relationships of concepts or components to a central idea in a cycle. The first line of Level 1 text corresponds to the central circular shape and the lines of Level 2 text correspond to the surrounding rectangular shapes. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    ConvergingRadial = 42;
    ///<summary>
    ///  Use to show two opposing ideas or concepts. Each of the first two lines of Level 1 text corresponds to an arrow and works well with Level 2 text. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    CounterbalanceArrows = 43;
    ///<summary>
    ///  Use to show the relationship to a central idea in a cyclical progression. Each of the first four lines of Level 1 text corresponds to a wedge or pie shape, and Level 2 text appears in a rectangular shape to the side of the wedge or pie shape. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    CycleMatrix = 44;
    ///<summary>
    ///  Use to show groups of related ideas or lists of information. The text shapes decrease in height sequentially, and the Level 1 text displays vertically.
    ///</summary>
    DescendingBlockList = 45;
    ///<summary>
    ///  Use to show a descending series of events. The first Level 1 text is at the top of arrow, and the last Level 1 text displays at the bottom of the arrow. Only the first seven Level 1 items appear. Works best with small to medium amounts of text.
    ///</summary>
    DescendingProcess = 46;
    ///<summary>
    ///  Use with large amounts of Level 2 text to show a progression through stages.
    ///</summary>
    DetailedProcess = 47;
    ///<summary>
    ///  Use to show ideas or concepts that progress outward from a central source. Works best with Level 1 text only.
    ///</summary>
    DivergingArrows = 48;
    ///<summary>
    ///  Use to show relationships to a central idea in a cycle. The first Level 1 line of text corresponds to the central circular shape. Emphasizes the surrounding circles rather than the central idea. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    DivergingRadial = 49;
    ///<summary>
    ///  Use to show sequential steps or tasks that depict a plan or result. The last Level 1 line of text appears after the equals sign (=).Works best with Level 1 text only.
    ///</summary>
    Equation = 50;
    ///<summary>
    ///  Use to show pictures with corresponding Level 1 text displayed in a frame.
    ///</summary>
    FramedTextPicture = 51;
    ///<summary>
    ///  Use to show the filtering of information or how parts merge into a whole. Emphasizes the final outcome. Can contain up to four lines of Level 1 text; the last of these four Level 1 text lines appears below the funnel and the other lines  correspond to a circular shape. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    Funnel = 52;
    ///<summary>
    ///  Use to show interlocking ideas. Each of the first three lines of Level 1 text corresponds to a gear shape, and their corresponding Level 2 text appears in rectangles next to the gear shape. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    Gear = 53;
    ///<summary>
    ///  Use to show the placement of concepts along two axes. Emphasizes the individual components rather than the whole. The first four lines of Level 1 text appear in the quadrants. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    GridMatrix = 54;
    ///<summary>
    ///  Use to show groups and sub-groups of information, or steps and sub-steps in a task, process, or workflow. Level 1 text corresponds to the top level horizontal shapes, and Level 2 text corresponds to vertical sub-steps under each related top level shape. Works well for emphasizing sub-groups or sub-steps, hierarchical information, or multiple lists of information.
    ///</summary>
    GroupedList = 55;
    ///<summary>
    ///  Use to show hierarchical information or reporting relationships in an organization. The assistant shapes and Org Chart hanging layouts are available with this layout.
    ///</summary>
    HalfCircleOrganizationChart = 56;
    ///<summary>
    ///  Use to show pictures with associated descriptive text. Small hexagons indicate the picture and text pair. Works best with small amounts of text.
    ///</summary>
    HexagonCluster = 57;
    ///<summary>
    ///  Use to show hierarchical relationships progressing from top to bottom.
    ///</summary>
    Hierarchy = 58;
    ///<summary>
    ///  Use to show hierarchical relationships progressing across groups. Can also be used to group or list information.
    ///</summary>
    HierarchyList = 59;
    ///<summary>
    ///  Use to show non-sequential or grouped lists of information. Works well with large amounts of text. All text has the same level of emphasis, and direction is not implied.
    ///</summary>
    HorizontalBulletList = 60;
    ///<summary>
    ///  Use to show hierarchical relationships progressing horizontally. Works well for decision trees.
    ///</summary>
    HorizontalHierarchy = 61;
    ///<summary>
    ///  Use to show hierarchical relationships progressing horizontally and grouped hierarchically. Emphasizes heading or level 1 text. The first line of Level 1 text appears in the shape at the beginning of the hierarchy, and the second and all subsequent lines of Level 1 text appear at the top of the tall rectangles.
    ///</summary>
    HorizontalLabeledHierarchy = 62;
    ///<summary>
    ///  Use to show large amounts of hierarchical information progressing horizontally. The top of the hierarchy is displayed vertically. This layout supports many levels in the hierarchy.
    ///</summary>
    HorizontalMultiLevelHierarchy = 63;
    ///<summary>
    ///  Use to show hierarchical information horizontally or reporting relationships in an organization. The assistant shape and the Org Chart hanging layouts are available with this layout.
    ///</summary>
    HorizontalOrganizationChart = 64;
    ///<summary>
    ///  Use to show non-sequential or grouped information with an emphasis on related pictures. The top shapes are designed to contain pictures.
    ///</summary>
    HorizontalPictureList = 65;
    ///<summary>
    ///  Use to show sequential and overlapping steps in a process. Limited to five Level 1 items. Level 2 can contain large amounts of text.
    ///</summary>
    IncreasingArrowsProcess = 66;
    ///<summary>
    ///  Use to show a series of steps, with the interior of the circle increasing with each step. Limited to seven Level 1 steps but unlimited Level 2 items. Works well with large amounts of Level 2 text.
    ///</summary>
    IncreasingCircleProcess = 67;
    ///<summary>
    ///  Use to show proportional, interconnected, or hierarchical relationships with the largest component on the top and narrowing down. Level 1 text appears in the pyramid segments and Level 2 text appears in shapes alongside each segment.
    ///</summary>
    InvertedPyramid = 68;
    ///<summary>
    ///  Use to show hierarchical relationships progressing from top to bottom and grouped hierarchically. Emphasizes heading or level 1 text. The first line of Level 1 text appears in the shape at the beginning of the hierarchy, and all subsequent lines of Level 1 text appear to the left of the long rectangles.
    ///</summary>
    LabeledHierarchy = 69;
    ///<summary>
    ///  Use to show overlapping relationships in a sequence. Works best with Level 1 text only.
    ///</summary>
    LinearVenn = 70;
    ///<summary>
    ///  Use to show large amounts of text divided into categories and subcategories. Works well with multiple levels of text. Text at the same level is separated by lines.
    ///</summary>
    LinedList = 71;
    ///<summary>
    ///  Use to represent a continuing sequence of stages, tasks, or events that can occur in any direction.
    ///</summary>
    MultidirectionalCycle = 72;
    ///<summary>
    ///  Use to show hierarchical information or reporting relationships in an organization. To enter text in the title box, type directly in the smaller rectangular shape. The assistant shape and Org Chart hanging layouts are available with this layout.
    ///</summary>
    NameandTitleOrganizationChart = 73;
    ///<summary>
    ///  Use to show containment relationships. Each of the first three lines of Level 1 text correspond to the upper left text in the shapes, and Level 2 text corresponds to the smaller shapes. Works best with minimal Level 2 lines of text. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    NestedTarget = 74;
    ///<summary>
    ///  Use to represent a continuing sequence of stages, tasks, or events in a circular flow. Each shape has the same level of importance. Works well when direction does not need to be indicated.
    ///</summary>
    NondirectionalCycle = 75;
    ///<summary>
    ///  Use to show two opposing ideas, or ideas that diverge from a central point. Each of the first two lines of Level 1 text corresponds to an arrow. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    OpposingArrows = 76;
    ///<summary>
    ///  Use to show two opposing or contrasting ideas. Can have one or two Level 1 items. Each Level 1 text can contain multiple sub-levels. Works well with large amounts of text.
    ///</summary>
    OpposingIdeas = 77;
    ///<summary>
    ///  Use to show hierarchical information or reporting relationships in an organization. The assistant shape and the Org Chart hanging layouts are available with this layout.
    ///</summary>
    OrganizationChart = 78;
    ///<summary>
    ///  Use to show three phases of a process. Limited to three Level 1 items. The first two Level 1 items can each contain four Level 2 items, and the third Level 1 item can contain an unlimited number of Level 2 items.  Works best with small amounts of text.
    ///</summary>
    PhasedProcess = 79;
    ///<summary>
    ///  Use to show a group of pictures in blocks starting from the corner. The corresponding text displays vertically. Works well as an accent on title or sub-title slides or for section breaks of a document.
    ///</summary>
    PictureAccentBlocks = 80;
    ///<summary>
    ///  Use to show grouped or related information. The small shapes on the upper corners are designed to contain pictures. Emphasizes Level 2 text over Level 1 text, and is a good choice for large amounts of Level 2 text.
    ///</summary>
    PictureAccentList = 81;
    ///<summary>
    ///  Use to show sequential steps in a task, process, or workflow. The rectangular shapes in the background are designed to contain pictures.
    ///</summary>
    PictureAccentProcess = 82;
    ///<summary>
    ///  Use to show non-sequential or grouped blocks of information. The top shapes are designed to contain pictures and pictures are emphasized over text. Works well for pictures with short text captions.
    ///</summary>
    PictureCaptionList = 83;
    ///<summary>
    ///  Use to show pictures laid out on a square grid. Best with a small amount of Level 1 text, which appears above the picture.
    ///</summary>
    PictureGrid = 84;
    ///<summary>
    ///  Use to show a series of pictures side by side. Level 1 text covers the top of the picture. Level 2 text appears below the picture.
    ///</summary>
    PictureLineup = 85;
    ///<summary>
    ///  Use to show a series of pictures from top to bottom with Level 1 text beside each.
    ///</summary>
    PictureStrips = 86;
    ///<summary>
    ///  Use to show steps in a process with each pie slice increasing in size up to seven shapes.  Level 1 text displays vertically.
    ///</summary>
    PieProcess = 87;
    ///<summary>
    ///  Use to show the pros and cons of  two ideas. Each Level 1 text can contain multiple sub-levels. Works well with large amounts of text. Limited to two Level 1 items.
    ///</summary>
    PlusandMinus = 88;
    ///<summary>
    ///  Use to show information illustrating a process or workflow. Level 1 text appears in the circular shapes and Level 2 text appears in the arrow shapes. Works best for minimal text and to emphasize movement or direction.
    ///</summary>
    ProcessArrows = 89;
    ///<summary>
    ///  Use to show multiple groups of information or steps and sub-steps in a task, process, or workflow. Level 1 text corresponds to the top horizontal shapes, and Level 2 text corresponds to vertical sub-steps under each related top level shape.
    ///</summary>
    ProcessList = 90;
    ///<summary>
    ///  Use to show proportional, interconnected, or hierarchical relationships. Text appears in the rectangular shapes on top of the pyramid background.
    ///</summary>
    PyramidList = 91;
    ///<summary>
    ///  Use to show data that relates to a central idea or theme. The top Level 1 text appears in the center. Level 2 text appears in surrounding shapes. Can contain up to seven Level 2 shapes. Unused text does not appear, but remains available if you switch layouts. Works best with small amounts of text.
    ///</summary>
    RadialCluster = 92;
    ///<summary>
    ///  Use to show the relationship to a central idea. Emphasizes both information in the center circle and how information in the outer ring of circles contributes to the central idea. The first Level 1 line of text corresponds to the central circle, and its Level 2 text corresponds to the outer ring of circles. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    RadialCycle = 93;
    ///<summary>
    ///  Use to show relationships to a central idea in a cycle. The center shape can contain a picture. Level 1 text appears in the smaller circles and any related Level 2 text appears to the side of the smaller circles.
    ///</summary>
    RadialList = 94;
    ///<summary>
    ///  Use to show both overlapping relationships and the relationship to a central idea in a cycle. The first line of Level 1 text corresponds to the central shape and the lines of Level 2 text correspond to the surrounding circular shapes. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    RadialVenn = 95;
    ///<summary>
    ///  Use to show, through a series of steps, how several chaotic  ideas can result in a unified goal or idea. Supports multiple items of Level 1 text, but the first and last Level 1 corresponding shapes are fixed. Works best with small amounts of Level 1 text and medium amounts of Level 2 text.
    ///</summary>
    RandomToResultProcess = 96;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow. Maximizes both horizontal and vertical display space for shapes.
    ///</summary>
    RepeatingBendingProcess = 97;
    ///<summary>
    ///  Use to change between two items. Only the first two items of text display, and each item can contain a large amount of text. Works well to show a change between two items or shift in order.
    ///</summary>
    ReverseList = 98;
    ///<summary>
    ///  Use to show a progression or a sequence of stages, tasks, or events in a circular flow. Emphasizes the interconnected pieces. Each of the first seven lines of Level 1 text corresponds to a wedge or pie shape. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    SegmentedCycle = 99;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow. Emphasizes Level 2 text, since each line appears in a separate shape.
    ///</summary>
    SegmentedProcess = 100;
    ///<summary>
    ///  Use to show containment, proportional, or interconnected relationships. The first nine lines of Level 1 text appear in the triangular shapes. Unused text does not appear, but remains available if you switch layouts. Works best with Level 1 text only.
    ///</summary>
    SegmentedPyramid = 101;
    ///<summary>
    ///  Use to show pictures with explanatory text. Level 2 text can display lists of information. Works well with a large amount of  text.
    ///</summary>
    SnapshotPictureList = 102;
    ///<summary>
    ///  Use to show a series of up to five pictures with corresponding Level 1 captions that spiral in to the center.
    ///</summary>
    SpiralPicture = 103;
    ///<summary>
    ///  Use to show lists of information divided into categories. Level 2 text appears beside a small square shape. Works well with large amounts of Level 2 text.
    ///</summary>
    SquareAccentList = 104;
    ///<summary>
    ///  Use to show groups of information or steps in a task, process, or workflow. Circular shapes contain Level 1 text, and the corresponding rectangles contain Level 2 text. Works well for numerous details and minimal Level 1 text.
    ///</summary>
    StackedList = 105;
    ///<summary>
    ///  Use to show overlapping relationships. A good choice for emphasizing growth or gradation. Works best with Level 1 text only. The first seven lines of Level 1 text correspond to a circular shape. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    StackedVenn = 106;
    ///<summary>
    ///  Use to show a downward progression through stages. Each of the first five lines of Level 1 text corresponds with a rectangle. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    StaggeredProcess = 107;
    ///<summary>
    ///  Use to show a descending process with multiple steps and sub-steps. Works best with small amounts of text.
    ///</summary>
    StepDownProcess = 108;
    ///<summary>
    ///  Use to show an ascending series of steps or lists of information.
    ///</summary>
    StepUpProcess = 109;
    ///<summary>
    ///  Use to show a multi-step process with sub-steps between each instance of Level 1 text. Works best with small amounts of text and is limited to seven Level 1 steps. Each Level 1 step can have unlimited sub-steps.
    ///</summary>
    SubStepProcess = 110;
    ///<summary>
    ///  Use to show groups of information built from top to bottom, and the hierarchies within each group. This layout does not contain connecting lines.
    ///</summary>
    TableHierarchy = 111;
    ///<summary>
    ///  Use to show grouped or related information of equal value. The first Level 1 line of text corresponds to the top shape and its Level 2 text is used for the subsequent lists.
    ///</summary>
    TableList = 112;
    ///<summary>
    ///  Use to show interrelated or overlapping information. Each of the first seven lines of Level 1 text appears in the rectangular shape. Unused text does not appear, but remains available if you switch layouts. Works well with both Level 1 and Level 2 text.
    ///</summary>
    TargetList = 113;
    ///<summary>
    ///  Use to represent a continuing sequence of stages, tasks, or events in a circular flow. Emphasizes the arrows or flow rather than the stages or steps. Works best with Level 1 text only.
    ///</summary>
    TextCycle = 114;
    ///<summary>
    ///  Use to show a series of pictures that each have their own title and description. Level 1 text appears in the box above the picture. Level 2 text appears below the picture.
    ///</summary>
    TitlePictureLineup = 115;
    ///<summary>
    ///  Use to show the relationships of four quadrants to a whole. The first line of Level 1 text corresponds to the central shape, and the first four lines of Level 2 text appear in the quadrants. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    TitledMatrix = 116;
    ///<summary>
    ///  Use to show lists of information with an accent picture for each Level 2 text. Level 1 text displays in a separate box at the top of the list.
    ///</summary>
    TitledPictureAccentList = 117;
    ///<summary>
    ///  Use to show a series of pictures. Level 1 text appears above each picture. Level 2 text appears to the side and slightly overlapping each picture.
    ///</summary>
    TitledPictureBlocks = 118;
    ///<summary>
    ///  Use to show grouped or related information of equal value. Works well with large amounts of text.
    ///</summary>
    TrapezoidList = 119;
    ///<summary>
    ///  Use to show a progression or steps that trend upward in a task, process, or workflow. Each of the first five lines of Level 1 text corresponds to a point on the arrow. Works best with minimal text. Unused text does not appear, but remains available if you switch layouts.
    ///</summary>
    UpwardArrow = 120;
    ///<summary>
    ///  Use to show lists of information. Level 2 text appears in rectangular shapes over vertical chevrons. Emphasizes Level 2 text over Level 1 text, and is a good choice for medium amounts of Level 2 text.
    ///</summary>
    VerticalAccentList = 121;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow that move toward a common goal. Works well for bulleted lists of information.
    ///</summary>
    VerticalArrowList = 122;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow. Maximizes both horizontal and vertical display space for shapes. Places more emphasis on the interrelationships among the shapes than on direction or movement.
    ///</summary>
    VerticalBendingProcess = 123;
    ///<summary>
    ///  Use to show groups of information or steps in a task, process, or workflow. Works well with large amounts of Level 2 text. A good choice for text with a main point and multiple sub-points.
    ///</summary>
    VerticalBlockList = 124;
    ///<summary>
    ///  Use to show several groups of information, especially groups with large amounts of Level 2 text. A good choice for bulleted lists of information.
    ///</summary>
    VerticalBoxList = 125;
    ///<summary>
    ///  Use to show non-sequential or grouped blocks of information. Works well for lists with long headings or top level information.
    ///</summary>
    VerticalBulletList = 126;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow, or to emphasize movement or direction. Emphasizes Level 2 text over Level 1 text, and is a good choice for large amounts of Level 2 text.
    ///</summary>
    VerticalChevronList = 127;
    ///<summary>
    ///  Use to show sequential or grouped data. Works best for Level 1 text, which displays next to a large circular shape. Lower levels of text are separated with smaller circular shapes.
    ///</summary>
    VerticalCircleList = 128;
    ///<summary>
    ///  Use to show a curved list of information. To add pictures to the accent circle shapes, apply a picture fill.
    ///</summary>
    VerticalCurvedList = 129;
    ///<summary>
    ///  Use to show sequential steps or tasks that depict a plan or result. The last Level 1 line of text appears after the arrow. Works best with Level 1 text only.
    ///</summary>
    VerticalEquation = 130;
    ///<summary>
    ///  Use to show non-sequential or grouped blocks of information. The small circles are designed to contain pictures.
    ///</summary>
    VerticalPictureAccentList = 131;
    ///<summary>
    ///  Use to show non-sequential or grouped blocks of information. The small shapes on the left are designed to contain pictures.
    ///</summary>
    VerticalPictureList = 132;
    ///<summary>
    ///  Use to show a progression or sequential steps in a task, process, or workflow from top to bottom. Works best with Level 1 text, since the vertical space is limited.
    ///</summary>
    VerticalProcess = 133;
    ///<summary>
    ///  Represents a SmartArt diagram with custom layout template
    ///</summary>
    Custom = 134;
    ///<summary>
    ///  Use to show hierarchical information or reporting relationships in an organization, with corresponding pictures. The assistant shape and Org Chart hanging layouts are available with this layout.
    ///</summary>
    PictureOrganizationChart = 135;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents style scheme of a SmartArt diagram.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtQuickStyleType')]
  DNSmartArtQuickStyleType = type Integer;
  DNSmartArtQuickStyleTypeHelper = record helper for DNSmartArtQuickStyleType
  public const
    ///<summary>
    ///  SimpleFill
    ///</summary>
    SimpleFill = 0;
    ///<summary>
    ///  WhiteOutline
    ///</summary>
    WhiteOutline = 1;
    ///<summary>
    ///  SubtleEffect
    ///</summary>
    SubtleEffect = 2;
    ///<summary>
    ///  ModerateEffect
    ///</summary>
    ModerateEffect = 3;
    ///<summary>
    ///  IntenceEffect
    ///</summary>
    IntenceEffect = 4;
    ///<summary>
    ///  Polished
    ///</summary>
    Polished = 5;
    ///<summary>
    ///  Inset
    ///</summary>
    Inset = 6;
    ///<summary>
    ///  Cartoon
    ///</summary>
    Cartoon = 7;
    ///<summary>
    ///  Powder
    ///</summary>
    Powder = 8;
    ///<summary>
    ///  BrickScene
    ///</summary>
    BrickScene = 9;
    ///<summary>
    ///  FlatScene
    ///</summary>
    FlatScene = 10;
    ///<summary>
    ///  MetallicScene
    ///</summary>
    MetallicScene = 11;
    ///<summary>
    ///  SunsetScene
    ///</summary>
    SunsetScene = 12;
    ///<summary>
    ///  BirdsEyeScene
    ///</summary>
    BirdsEyeScene = 13;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents source file format.
  ///</summary>
  [DNTypeName('Aspose.Slides.SourceFormat')]
  DNSourceFormat = type Integer;
  DNSourceFormatHelper = record helper for DNSourceFormat
  public const
    ///<summary>
    ///  PPT format.
    ///</summary>
    Ppt = 0;
    ///<summary>
    ///  Pptx format.
    ///</summary>
    Pptx = 1;
    ///<summary>
    ///  Odp format.
    ///</summary>
    Odp = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Specifies the state that the splitter bar should be shown in. The splitter bar separates a primary and
  ///  secondary region within a viewing area.
  ///</summary>
  [DNTypeName('Aspose.Slides.SplitterBarStateType')]
  DNSplitterBarStateType = type Integer;
  DNSplitterBarStateTypeHelper = record helper for DNSplitterBarStateType
  public const
    ///<summary>
    ///  The primary region occupies the least amount of the viewing area allowed by the application.
    ///</summary>
    Minimized = 0;
    ///<summary>
    ///  The primary region has a specific intermediate size.
    ///</summary>
    Restored = 1;
    ///<summary>
    ///  The primary region occupies the greatest amount of the viewing area allowed by the application.
    ///</summary>
    Maximized = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents predefined system colors.
  ///</summary>
  [DNTypeName('Aspose.Slides.SystemColor')]
  DNSystemColor = type Integer;
  DNSystemColorHelper = record helper for DNSystemColor
  public const
    ///<summary></summary>
    ScrollBar = 0;
    ///<summary></summary>
    Background = 1;
    ///<summary></summary>
    ActiveCaption = 2;
    ///<summary></summary>
    InactiveCaption = 3;
    ///<summary></summary>
    Menu = 4;
    ///<summary></summary>
    Window = 5;
    ///<summary></summary>
    WindowFrame = 6;
    ///<summary></summary>
    MenuText = 7;
    ///<summary></summary>
    WindowText = 8;
    ///<summary></summary>
    CaptionText = 9;
    ///<summary></summary>
    ActiveBorder = 10;
    ///<summary></summary>
    InactiveBorder = 11;
    ///<summary></summary>
    AppWorkspace = 12;
    ///<summary></summary>
    Highlight = 13;
    ///<summary></summary>
    HighlightText = 14;
    ///<summary></summary>
    BtnFace = 15;
    ///<summary></summary>
    BtnShadow = 16;
    ///<summary></summary>
    GrayText = 17;
    ///<summary></summary>
    BtnText = 18;
    ///<summary></summary>
    InactiveCaptionText = 19;
    ///<summary></summary>
    BtnHighlight = 20;
    ///<summary></summary>
    ThreeDDkShadow = 21;
    ///<summary></summary>
    ThreeDLight = 22;
    ///<summary></summary>
    InfoText = 23;
    ///<summary></summary>
    InfoBk = 24;
    ///<summary></summary>
    HotLight = 26;
    ///<summary></summary>
    GradientActiveCaption = 27;
    ///<summary></summary>
    GradientInactiveCaption = 28;
    ///<summary></summary>
    MenuHighlight = 29;
    ///<summary></summary>
    MenuBar = 30;
    ///<summary>
    ///  System color is not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the tab alignment.
  ///</summary>
  [DNTypeName('Aspose.Slides.TabAlignment')]
  DNTabAlignment = type Integer;
  DNTabAlignmentHelper = record helper for DNTabAlignment
  public const
    ///<summary>
    ///  Left alignment
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Center alignment
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Right alignment
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Decimal alignment
    ///</summary>
    Decimal = 3;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents builtin table styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.TableStylePreset')]
  DNTableStylePreset = type Integer;
  DNTableStylePresetHelper = record helper for DNTableStylePreset
  public const
    ///<summary>
    ///  No style.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Medium Style 2 - Accent 1.
    ///</summary>
    MediumStyle2Accent1 = 1;
    ///<summary>
    ///  Medium Style 2.
    ///</summary>
    MediumStyle2 = 2;
    ///<summary>
    ///  No Style, No Grid.
    ///</summary>
    NoStyleNoGrid = 3;
    ///<summary>
    ///  Themed Style 1 - Accent 1.
    ///</summary>
    ThemedStyle1Accent1 = 4;
    ///<summary>
    ///  Themed Style 1 - Accent 2.
    ///</summary>
    ThemedStyle1Accent2 = 5;
    ///<summary>
    ///  Themed Style 1 - Accent 3.
    ///</summary>
    ThemedStyle1Accent3 = 6;
    ///<summary>
    ///  Themed Style 1 - Accent 4.
    ///</summary>
    ThemedStyle1Accent4 = 7;
    ///<summary>
    ///  Themed Style 1 - Accent 5.
    ///</summary>
    ThemedStyle1Accent5 = 8;
    ///<summary>
    ///  Themed Style 1 - Accent 6.
    ///</summary>
    ThemedStyle1Accent6 = 9;
    ///<summary>
    ///  No Style, Table Grid.
    ///</summary>
    NoStyleTableGrid = 10;
    ///<summary>
    ///  Themed Style 2 - Accent 1.
    ///</summary>
    ThemedStyle2Accent1 = 11;
    ///<summary>
    ///  Themed Style 2 - Accent 2.
    ///</summary>
    ThemedStyle2Accent2 = 12;
    ///<summary>
    ///  Themed Style 2 - Accent 3.
    ///</summary>
    ThemedStyle2Accent3 = 13;
    ///<summary>
    ///  Themed Style 2 - Accent 4.
    ///</summary>
    ThemedStyle2Accent4 = 14;
    ///<summary>
    ///  Themed Style 2 - Accent 5.
    ///</summary>
    ThemedStyle2Accent5 = 15;
    ///<summary>
    ///  Themed Style 2 - Accent 6.
    ///</summary>
    ThemedStyle2Accent6 = 16;
    ///<summary>
    ///  Light Style 1
    ///</summary>
    LightStyle1 = 17;
    ///<summary>
    ///  Light Style 1 - Accent 1.
    ///</summary>
    LightStyle1Accent1 = 18;
    ///<summary>
    ///  Light Style 1 - Accent 2.
    ///</summary>
    LightStyle1Accent2 = 19;
    ///<summary>
    ///  Light Style 1 - Accent 3.
    ///</summary>
    LightStyle1Accent3 = 20;
    ///<summary>
    ///  Light Style 1 - Accent 4.
    ///</summary>
    LightStyle1Accent4 = 21;
    ///<summary>
    ///  Light Style 2 - Accent 5.
    ///</summary>
    LightStyle2Accent5 = 22;
    ///<summary>
    ///  Light Style 1 - Accent 6.
    ///</summary>
    LightStyle1Accent6 = 23;
    ///<summary>
    ///  Light Style 2.
    ///</summary>
    LightStyle2 = 24;
    ///<summary>
    ///  Light Style 2 - Accent 1.
    ///</summary>
    LightStyle2Accent1 = 25;
    ///<summary>
    ///  Light Style 2 - Accent 2.
    ///</summary>
    LightStyle2Accent2 = 26;
    ///<summary>
    ///  Light Style 2 - Accent 3.
    ///</summary>
    LightStyle2Accent3 = 27;
    ///<summary>
    ///  Medium Style 2 - Accent 3.
    ///</summary>
    MediumStyle2Accent3 = 28;
    ///<summary>
    ///  Medium Style 2 - Accent 4.
    ///</summary>
    MediumStyle2Accent4 = 29;
    ///<summary>
    ///  Medium Style 2 - Accent 5.
    ///</summary>
    MediumStyle2Accent5 = 30;
    ///<summary>
    ///  Light Style 2 - Accent 6.
    ///</summary>
    LightStyle2Accent6 = 31;
    ///<summary>
    ///  Light Style 2 - Accent 4.
    ///</summary>
    LightStyle2Accent4 = 32;
    ///<summary>
    ///  Light Style 3.
    ///</summary>
    LightStyle3 = 33;
    ///<summary>
    ///  Light Style 3 - Accent 1.
    ///</summary>
    LightStyle3Accent1 = 34;
    ///<summary>
    ///  Medium Style 2 - Accent 2.
    ///</summary>
    MediumStyle2Accent2 = 35;
    ///<summary>
    ///  Light Style 3 - Accent 2.
    ///</summary>
    LightStyle3Accent2 = 36;
    ///<summary>
    ///  Light Style 3 - Accent 3.
    ///</summary>
    LightStyle3Accent3 = 37;
    ///<summary>
    ///  Light Style 3 - Accent 4.
    ///</summary>
    LightStyle3Accent4 = 38;
    ///<summary>
    ///  Light Style 3 - Accent 5.
    ///</summary>
    LightStyle3Accent5 = 39;
    ///<summary>
    ///  Light Style 3 - Accent 6.
    ///</summary>
    LightStyle3Accent6 = 40;
    ///<summary>
    ///  Medium Style 1.
    ///</summary>
    MediumStyle1 = 41;
    ///<summary>
    ///  Medium Style 1 - Accent 1.
    ///</summary>
    MediumStyle1Accent1 = 42;
    ///<summary>
    ///  Medium Style 1 - Accent 2.
    ///</summary>
    MediumStyle1Accent2 = 43;
    ///<summary>
    ///  Medium Style 1 - Accent 3.
    ///</summary>
    MediumStyle1Accent3 = 44;
    ///<summary>
    ///  Medium Style 1 - Accent 4.
    ///</summary>
    MediumStyle1Accent4 = 45;
    ///<summary>
    ///  Medium Style 1 - Accent 5.
    ///</summary>
    MediumStyle1Accent5 = 46;
    ///<summary>
    ///  Medium Style 1 - Accent 6.
    ///</summary>
    MediumStyle1Accent6 = 47;
    ///<summary>
    ///  Medium Style 2 - Accent 6.
    ///</summary>
    MediumStyle2Accent6 = 48;
    ///<summary>
    ///  Medium Style 3.
    ///</summary>
    MediumStyle3 = 49;
    ///<summary>
    ///  Medium Style 3 - Accent 1.
    ///</summary>
    MediumStyle3Accent1 = 50;
    ///<summary>
    ///  Medium Style 3 - Accent 2.
    ///</summary>
    MediumStyle3Accent2 = 51;
    ///<summary>
    ///  Medium Style 3 - Accent 3.
    ///</summary>
    MediumStyle3Accent3 = 52;
    ///<summary>
    ///  Medium Style 3 - Accent 4.
    ///</summary>
    MediumStyle3Accent4 = 53;
    ///<summary>
    ///  Medium Style 3 - Accent 5.
    ///</summary>
    MediumStyle3Accent5 = 54;
    ///<summary>
    ///  Medium Style 3 - Accent 6.
    ///</summary>
    MediumStyle3Accent6 = 55;
    ///<summary>
    ///  Medium Style 4.
    ///</summary>
    MediumStyle4 = 56;
    ///<summary>
    ///  Medium Style 4 - Accent 1.
    ///</summary>
    MediumStyle4Accent1 = 57;
    ///<summary>
    ///  Medium Style 4 - Accent 2.
    ///</summary>
    MediumStyle4Accent2 = 58;
    ///<summary>
    ///  Medium Style 4 - Accent 3.
    ///</summary>
    MediumStyle4Accent3 = 59;
    ///<summary>
    ///  Medium Style 4 - Accent 4.
    ///</summary>
    MediumStyle4Accent4 = 60;
    ///<summary>
    ///  Medium Style 4 - Accent 5.
    ///</summary>
    MediumStyle4Accent5 = 61;
    ///<summary>
    ///  Medium Style 4 - Accent 6.
    ///</summary>
    MediumStyle4Accent6 = 62;
    ///<summary>
    ///  Dark Style 1.
    ///</summary>
    DarkStyle1 = 63;
    ///<summary>
    ///  Dark Style 1 - Accent 1.
    ///</summary>
    DarkStyle1Accent1 = 64;
    ///<summary>
    ///  Dark Style 1 - Accent 2.
    ///</summary>
    DarkStyle1Accent2 = 65;
    ///<summary>
    ///  Dark Style 1 - Accent 3.
    ///</summary>
    DarkStyle1Accent3 = 66;
    ///<summary>
    ///  Dark Style 1 - Accent 4.
    ///</summary>
    DarkStyle1Accent4 = 67;
    ///<summary>
    ///  Dark Style 1 - Accent 5.
    ///</summary>
    DarkStyle1Accent5 = 68;
    ///<summary>
    ///  Dark Style 1 - Accent 6.
    ///</summary>
    DarkStyle1Accent6 = 69;
    ///<summary>
    ///  Dark Style 2.
    ///</summary>
    DarkStyle2 = 70;
    ///<summary>
    ///  Dark Style 2 - Accent 1/Accent 2.
    ///</summary>
    DarkStyle2Accent1Accent2 = 71;
    ///<summary>
    ///  Dark Style 2 - Accent 3/Accent 4.
    ///</summary>
    DarkStyle2Accent3Accent4 = 72;
    ///<summary>
    ///  Dark Style 2 - Accent 5/Accent 6.
    ///</summary>
    DarkStyle2Accent5Accent6 = 73;
    ///<summary>
    ///  Light Style 1 - Accent 5.
    ///</summary>
    LightStyle1Accent5 = 74;
    ///<summary>
    ///  Table has a custom style.
    ///  This is return-only value.
    ///</summary>
    Custom = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents different text alignment styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextAlignment')]
  DNTextAlignment = type Integer;
  DNTextAlignmentHelper = record helper for DNTextAlignment
  public const
    ///<summary>
    ///  Left alignment.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Center alignment.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Right alignment.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Justify alignment.
    ///</summary>
    Justify = 3;
    ///<summary>
    ///  Kashida justify low.
    ///</summary>
    JustifyLow = 4;
    ///<summary>
    ///  Distributed alignment.
    ///</summary>
    Distributed = 5;
    ///<summary>
    ///  Default aligment.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  text box alignment within a text area.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextAnchorType')]
  DNTextAnchorType = type Integer;
  DNTextAnchorTypeHelper = record helper for DNTextAnchorType
  public const
    ///<summary></summary>
    Top = 0;
    ///<summary></summary>
    Center = 1;
    ///<summary></summary>
    Bottom = 2;
    ///<summary></summary>
    Justified = 3;
    ///<summary></summary>
    Distributed = 4;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents text autofit mode.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextAutofitType')]
  DNTextAutofitType = type Integer;
  DNTextAutofitTypeHelper = record helper for DNTextAutofitType
  public const
    ///<summary>
    ///  No autofit.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Normal autofit. Font size and line spacing will be reduced to fit the shape.
    ///</summary>
    Normal = 1;
    ///<summary>
    ///  Shape autofit. Shape size will be changed to fit the text.
    ///</summary>
    Shape = 2;
    ///<summary>
    ///  Not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the type of text capitalisation.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextCapType')]
  DNTextCapType = type Integer;
  DNTextCapTypeHelper = record helper for DNTextCapType
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    Small = 1;
    ///<summary></summary>
    All = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the mode to use during text extraction
  ///</summary>
  [DNTypeName('Aspose.Slides.TextExtractionArrangingMode')]
  DNTextExtractionArrangingMode = type Integer;
  DNTextExtractionArrangingModeHelper = record helper for DNTextExtractionArrangingMode
  public const
    ///<summary>
    ///  The raw text with no respect to position on the slide
    ///</summary>
    Unarranged = 0;
    ///<summary>
    ///  The text is positioned in the same order as on the slide
    ///</summary>
    Arranged = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents text wrapping shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextShapeType')]
  DNTextShapeType = type Integer;
  DNTextShapeTypeHelper = record helper for DNTextShapeType
  public const
    ///<summary>
    ///  No shape
    ///</summary>
    None = 0;
    ///<summary>
    ///  Plain
    ///</summary>
    Plain = 1;
    ///<summary>
    ///  Stop Sign
    ///</summary>
    Stop = 2;
    ///<summary>
    ///  Triangle
    ///</summary>
    Triangle = 3;
    ///<summary>
    ///  Inverted Triangle
    ///</summary>
    TriangleInverted = 4;
    ///<summary>
    ///  Chevron
    ///</summary>
    Chevron = 5;
    ///<summary>
    ///  Inverted Chevron
    ///</summary>
    ChevronInverted = 6;
    ///<summary>
    ///  Inside Ring
    ///</summary>
    RingInside = 7;
    ///<summary>
    ///  Outside Ring
    ///</summary>
    RingOutside = 8;
    ///<summary>
    ///  Upward Arch
    ///</summary>
    ArchUp = 9;
    ///<summary>
    ///  Downward Arch
    ///</summary>
    ArchDown = 10;
    ///<summary>
    ///  Circle
    ///</summary>
    Circle = 11;
    ///<summary>
    ///  Button
    ///</summary>
    Button = 12;
    ///<summary>
    ///  Upward Pour Arch
    ///</summary>
    ArchUpPour = 13;
    ///<summary>
    ///  Downward Pour Arch
    ///</summary>
    ArchDownPour = 14;
    ///<summary>
    ///  Circle Pour
    ///</summary>
    CirclePour = 15;
    ///<summary>
    ///  Button Pour
    ///</summary>
    ButtonPour = 16;
    ///<summary>
    ///  Upward Curve
    ///</summary>
    CurveUp = 17;
    ///<summary>
    ///  Downward Curve
    ///</summary>
    CurveDown = 18;
    ///<summary>
    ///  Upward Can
    ///</summary>
    CanUp = 19;
    ///<summary>
    ///  Downward Can
    ///</summary>
    CanDown = 20;
    ///<summary>
    ///  Wave 1
    ///</summary>
    Wave1 = 21;
    ///<summary>
    ///  Wave 2
    ///</summary>
    Wave2 = 22;
    ///<summary>
    ///  Double Wave 1
    ///</summary>
    DoubleWave1 = 23;
    ///<summary>
    ///  Wave 4
    ///</summary>
    Wave4 = 24;
    ///<summary>
    ///  Inflate
    ///</summary>
    Inflate = 25;
    ///<summary>
    ///  Deflate
    ///</summary>
    Deflate = 26;
    ///<summary>
    ///  Bottom Inflate
    ///</summary>
    InflateBottom = 27;
    ///<summary>
    ///  Bottom Deflate
    ///</summary>
    DeflateBottom = 28;
    ///<summary>
    ///  Top Inflate
    ///</summary>
    InflateTop = 29;
    ///<summary>
    ///  Top Deflate
    ///</summary>
    DeflateTop = 30;
    ///<summary>
    ///  Deflate-Inflate
    ///</summary>
    DeflateInflate = 31;
    ///<summary>
    ///  Deflate-Inflate-Deflate
    ///</summary>
    DeflateInflateDeflate = 32;
    ///<summary>
    ///  Right Fade
    ///</summary>
    FadeRight = 33;
    ///<summary>
    ///  Left Fade
    ///</summary>
    FadeLeft = 34;
    ///<summary>
    ///  Upward Fade
    ///</summary>
    FadeUp = 35;
    ///<summary>
    ///  Downward Fade
    ///</summary>
    FadeDown = 36;
    ///<summary>
    ///  Upward Slant
    ///</summary>
    SlantUp = 37;
    ///<summary>
    ///  Downward Slant
    ///</summary>
    SlantDown = 38;
    ///<summary>
    ///  Upward Cascade
    ///</summary>
    CascadeUp = 39;
    ///<summary>
    ///  Downward Cascade
    ///</summary>
    CascadeDown = 40;
    ///<summary>
    ///  Custom
    ///</summary>
    Custom = 41;
    ///<summary>
    ///  Not defined
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the type of text strikethrough.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextStrikethroughType')]
  DNTextStrikethroughType = type Integer;
  DNTextStrikethroughTypeHelper = record helper for DNTextStrikethroughType
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    Single = 1;
    ///<summary></summary>
    Double = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the type of text underline.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextUnderlineType')]
  DNTextUnderlineType = type Integer;
  DNTextUnderlineTypeHelper = record helper for DNTextUnderlineType
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    Words = 1;
    ///<summary></summary>
    Single = 2;
    ///<summary></summary>
    Double = 3;
    ///<summary></summary>
    Heavy = 4;
    ///<summary></summary>
    Dotted = 5;
    ///<summary></summary>
    HeavyDotted = 6;
    ///<summary></summary>
    Dashed = 7;
    ///<summary></summary>
    HeavyDashed = 8;
    ///<summary></summary>
    LongDashed = 9;
    ///<summary></summary>
    HeavyLongDashed = 10;
    ///<summary></summary>
    DotDash = 11;
    ///<summary></summary>
    HeavyDotDash = 12;
    ///<summary></summary>
    DotDotDash = 13;
    ///<summary></summary>
    HeavyDotDotDash = 14;
    ///<summary></summary>
    Wavy = 15;
    ///<summary></summary>
    HeavyWavy = 16;
    ///<summary></summary>
    DoubleWavy = 17;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents text vertical overflow type.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextVerticalOverflowType')]
  DNTextVerticalOverflowType = type Integer;
  DNTextVerticalOverflowTypeHelper = record helper for DNTextVerticalOverflowType
  public const
    ///<summary></summary>
    Overflow = 0;
    ///<summary></summary>
    Ellipsis = 1;
    ///<summary></summary>
    Clip = 2;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines vertical writing mode for a text.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextVerticalType')]
  DNTextVerticalType = type Integer;
  DNTextVerticalTypeHelper = record helper for DNTextVerticalType
  public const
    ///<summary>
    ///  Horizontal text.
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  Vertical text.
    ///</summary>
    Vertical = 1;
    ///<summary>
    ///  Vertical 270 degrees text.
    ///</summary>
    Vertical270 = 2;
    ///<summary>
    ///  WordArt vertical text.
    ///</summary>
    WordArtVertical = 3;
    ///<summary>
    ///  East asian vertical text.
    ///</summary>
    EastAsianVertical = 4;
    ///<summary>
    ///  Mongolian vertical text.
    ///</summary>
    MongolianVertical = 5;
    ///<summary>
    ///  WordArt vertical right to left text.
    ///</summary>
    WordArtVerticalRightToLeft = 6;
    ///<summary>
    ///  Not defined.
    ///</summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines tile flipping mode.
  ///</summary>
  [DNTypeName('Aspose.Slides.TileFlip')]
  DNTileFlip = type Integer;
  DNTileFlipHelper = record helper for DNTileFlip
  public const
    ///<summary></summary>
    NoFlip = 0;
    ///<summary></summary>
    FlipX = 1;
    ///<summary></summary>
    FlipY = 2;
    ///<summary></summary>
    FlipBoth = 3;
    ///<summary></summary>
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Constants which define how a video is played.
  ///</summary>
  [DNTypeName('Aspose.Slides.VideoPlayModePreset')]
  DNVideoPlayModePreset = type Integer;
  DNVideoPlayModePresetHelper = record helper for DNVideoPlayModePreset
  public const
    ///<summary>
    ///  Play automatically.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Play only when the video frame is clicked on.
    ///</summary>
    OnClick = 1;
    ///<summary>
    ///  Play on all slides.
    ///</summary>
    AllSlides = 2;
    ///<summary>
    ///  Play automatically with a click.
    ///</summary>
    InClickSequence = 3;
    ///<summary></summary>
    Mixed = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Presentation view types
  ///</summary>
  [DNTypeName('Aspose.Slides.ViewType')]
  DNViewType = type Integer;
  DNViewTypeHelper = record helper for DNViewType
  public const
    ///<summary>
    ///  Value is not defined
    ///</summary>
    NotDefined = 0;
    ///<summary>
    ///  Normal Slide View
    ///</summary>
    SlideView = 1;
    ///<summary>
    ///  Slide Master View
    ///</summary>
    SlideMasterView = 2;
    ///<summary>
    ///  Notes View
    ///</summary>
    NotesView = 3;
    ///<summary>
    ///  Handout View
    ///</summary>
    HandoutView = 4;
    ///<summary>
    ///  Notes Master View
    ///</summary>
    NotesMasterView = 5;
    ///<summary>
    ///  Outline View
    ///</summary>
    OutlineView = 6;
    ///<summary>
    ///  Slide Sorter View
    ///</summary>
    SlideSorterView = 7;
    ///<summary>
    ///  Slide Thumbnail View
    ///</summary>
    SlideThumbnailView = 8;
  end;


  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  Represents warning callback decision options.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.ReturnAction')]
  DNReturnAction = type Integer;
  DNReturnActionHelper = record helper for DNReturnAction
  public const
    ///<summary>
    ///  Operation should be continued.
    ///</summary>
    Continue_ = 0;
    ///<summary>
    ///  Operation should be aborted.
    ///</summary>
    Abort_ = 1;
  end;


  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  Represents a type of warning.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    ///<summary>
    ///  An issue has been detected in the source document which makes it very likely the document will be not be able to be opened if saved in it's original format.
    ///</summary>
    SourceFileCorruption = 0;
    ///<summary>
    ///  Text/chart/image or other data will be completely missing from either the documet tree following load, or the created document following save.
    ///</summary>
    DataLoss = 1;
    ///<summary>
    ///  Major formatting loss.
    ///</summary>
    MajorFormattingLoss = 2;
    ///<summary>
    ///  Minor formatting loss.
    ///</summary>
    MinorFormattingLoss = 3;
    ///<summary>
    ///  This is known issue that will prevent the document being opened by certain user agents, or previous versions of user agents.
    ///</summary>
    CompatibilityIssue = 4;
    ///<summary>
    ///  Some content in the source document could not be recognised (i.e. is unsupported), this may or may not cause issues or result in data/formatting loss.
    ///</summary>
    UnexpectedContent = 99;
  end;


  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines whether the Zoom object is using the slide preview or a cover image.
  ///</summary>
  [DNTypeName('Aspose.Slides.ZoomImageType')]
  DNZoomImageType = type Integer;
  DNZoomImageTypeHelper = record helper for DNZoomImageType
  public const
    ///<summary>
    ///  Use the image of the slide or section.
    ///</summary>
    Preview = 1;
    ///<summary>
    ///  Use a custom image.
    ///</summary>
    Cover = 2;
  end;




type


{ declares }

  DNAdjustValue = interface; // type: Aspose.Slides.AdjustValue, namespace: Aspose.Slides
  DNAdjustValueCollection = interface; // type: Aspose.Slides.AdjustValueCollection, namespace: Aspose.Slides
  DNAnimationTimeLine = interface; // type: Aspose.Slides.Animation.AnimationTimeLine, namespace: Aspose.Slides.Animation
  DNBehavior = interface; // type: Aspose.Slides.Animation.Behavior, namespace: Aspose.Slides.Animation
  DNColorEffect = interface; // type: Aspose.Slides.Animation.ColorEffect, namespace: Aspose.Slides.Animation
  DNCommandEffect = interface; // type: Aspose.Slides.Animation.CommandEffect, namespace: Aspose.Slides.Animation
  DNFilterEffect = interface; // type: Aspose.Slides.Animation.FilterEffect, namespace: Aspose.Slides.Animation
  DNMotionEffect = interface; // type: Aspose.Slides.Animation.MotionEffect, namespace: Aspose.Slides.Animation
  DNPropertyEffect = interface; // type: Aspose.Slides.Animation.PropertyEffect, namespace: Aspose.Slides.Animation
  DNRotationEffect = interface; // type: Aspose.Slides.Animation.RotationEffect, namespace: Aspose.Slides.Animation
  DNScaleEffect = interface; // type: Aspose.Slides.Animation.ScaleEffect, namespace: Aspose.Slides.Animation
  DNSetEffect = interface; // type: Aspose.Slides.Animation.SetEffect, namespace: Aspose.Slides.Animation
  DNBehaviorCollection = interface; // type: Aspose.Slides.Animation.BehaviorCollection, namespace: Aspose.Slides.Animation
  DNBehaviorFactory = interface; // type: Aspose.Slides.Animation.BehaviorFactory, namespace: Aspose.Slides.Animation
  DNBehaviorProperty = interface; // type: Aspose.Slides.Animation.BehaviorProperty, namespace: Aspose.Slides.Animation
  DNBehaviorPropertyCollection = interface; // type: Aspose.Slides.Animation.BehaviorPropertyCollection, namespace: Aspose.Slides.Animation
  DNColorOffset = interface; // type: Aspose.Slides.Animation.ColorOffset, namespace: Aspose.Slides.Animation
  DNEffect = interface; // type: Aspose.Slides.Animation.Effect, namespace: Aspose.Slides.Animation
  DNIBehavior = interface; // type: Aspose.Slides.Animation.IBehavior, namespace: Aspose.Slides.Animation
  DNIColorEffect = interface; // type: Aspose.Slides.Animation.IColorEffect, namespace: Aspose.Slides.Animation
  DNICommandEffect = interface; // type: Aspose.Slides.Animation.ICommandEffect, namespace: Aspose.Slides.Animation
  DNIFilterEffect = interface; // type: Aspose.Slides.Animation.IFilterEffect, namespace: Aspose.Slides.Animation
  DNIMotionEffect = interface; // type: Aspose.Slides.Animation.IMotionEffect, namespace: Aspose.Slides.Animation
  DNIPropertyEffect = interface; // type: Aspose.Slides.Animation.IPropertyEffect, namespace: Aspose.Slides.Animation
  DNIRotationEffect = interface; // type: Aspose.Slides.Animation.IRotationEffect, namespace: Aspose.Slides.Animation
  DNIScaleEffect = interface; // type: Aspose.Slides.Animation.IScaleEffect, namespace: Aspose.Slides.Animation
  DNISetEffect = interface; // type: Aspose.Slides.Animation.ISetEffect, namespace: Aspose.Slides.Animation
  DNIBehaviorFactory = interface; // type: Aspose.Slides.Animation.IBehaviorFactory, namespace: Aspose.Slides.Animation
  DNIBehaviorProperty = interface; // type: Aspose.Slides.Animation.IBehaviorProperty, namespace: Aspose.Slides.Animation
  DNIColorOffset = interface; // type: Aspose.Slides.Animation.IColorOffset, namespace: Aspose.Slides.Animation
  DNIEffect = interface; // type: Aspose.Slides.Animation.IEffect, namespace: Aspose.Slides.Animation
  DNIMotionCmdPath = interface; // type: Aspose.Slides.Animation.IMotionCmdPath, namespace: Aspose.Slides.Animation
  DNIPoint = interface; // type: Aspose.Slides.Animation.IPoint, namespace: Aspose.Slides.Animation
  DNITextAnimation = interface; // type: Aspose.Slides.Animation.ITextAnimation, namespace: Aspose.Slides.Animation
  DNITiming = interface; // type: Aspose.Slides.Animation.ITiming, namespace: Aspose.Slides.Animation
  DNMotionCmdPath = interface; // type: Aspose.Slides.Animation.MotionCmdPath, namespace: Aspose.Slides.Animation
  DNMotionPath = interface; // type: Aspose.Slides.Animation.MotionPath, namespace: Aspose.Slides.Animation
  DNPoint = interface; // type: Aspose.Slides.Animation.Point, namespace: Aspose.Slides.Animation
  DNPointCollection = interface; // type: Aspose.Slides.Animation.PointCollection, namespace: Aspose.Slides.Animation
  DNSequence = interface; // type: Aspose.Slides.Animation.Sequence, namespace: Aspose.Slides.Animation
  DNSequenceCollection = interface; // type: Aspose.Slides.Animation.SequenceCollection, namespace: Aspose.Slides.Animation
  DNTextAnimation = interface; // type: Aspose.Slides.Animation.TextAnimation, namespace: Aspose.Slides.Animation
  DNTextAnimationCollection = interface; // type: Aspose.Slides.Animation.TextAnimationCollection, namespace: Aspose.Slides.Animation
  DNTiming = interface; // type: Aspose.Slides.Animation.Timing, namespace: Aspose.Slides.Animation
  DNAudio = interface; // type: Aspose.Slides.Audio, namespace: Aspose.Slides
  DNAudioCollection = interface; // type: Aspose.Slides.AudioCollection, namespace: Aspose.Slides
  DNBaseHeaderFooterManager = interface; // type: Aspose.Slides.BaseHeaderFooterManager, namespace: Aspose.Slides
  DNBaseSlideHeaderFooterManager = interface; // type: Aspose.Slides.BaseSlideHeaderFooterManager, namespace: Aspose.Slides
  DNBaseHandoutNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.BaseHandoutNotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNMasterHandoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.MasterHandoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNMasterNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.MasterNotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.NotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNLayoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.LayoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNMasterSlideHeaderFooterManager = interface; // type: Aspose.Slides.MasterSlideHeaderFooterManager, namespace: Aspose.Slides
  DNSlideHeaderFooterManager = interface; // type: Aspose.Slides.SlideHeaderFooterManager, namespace: Aspose.Slides
  DNPresentationHeaderFooterManager = interface; // type: Aspose.Slides.PresentationHeaderFooterManager, namespace: Aspose.Slides
  DNBaseShapeLock = interface; // type: Aspose.Slides.BaseShapeLock, namespace: Aspose.Slides
  DNAutoShapeLock = interface; // type: Aspose.Slides.AutoShapeLock, namespace: Aspose.Slides
  DNConnectorLock = interface; // type: Aspose.Slides.ConnectorLock, namespace: Aspose.Slides
  DNGraphicalObjectLock = interface; // type: Aspose.Slides.GraphicalObjectLock, namespace: Aspose.Slides
  DNGroupShapeLock = interface; // type: Aspose.Slides.GroupShapeLock, namespace: Aspose.Slides
  DNPictureFrameLock = interface; // type: Aspose.Slides.PictureFrameLock, namespace: Aspose.Slides
  DNBaseSlide = interface; // type: Aspose.Slides.BaseSlide, namespace: Aspose.Slides
  DNLayoutSlide = interface; // type: Aspose.Slides.LayoutSlide, namespace: Aspose.Slides
  DNMasterHandoutSlide = interface; // type: Aspose.Slides.MasterHandoutSlide, namespace: Aspose.Slides
  DNMasterNotesSlide = interface; // type: Aspose.Slides.MasterNotesSlide, namespace: Aspose.Slides
  DNMasterSlide = interface; // type: Aspose.Slides.MasterSlide, namespace: Aspose.Slides
  DNNotesSlide = interface; // type: Aspose.Slides.NotesSlide, namespace: Aspose.Slides
  DNSlide = interface; // type: Aspose.Slides.Slide, namespace: Aspose.Slides
  DNBlobManagementOptions = interface; // type: Aspose.Slides.BlobManagementOptions, namespace: Aspose.Slides
  DNBuildVersionInfo = interface; // type: Aspose.Slides.BuildVersionInfo, namespace: Aspose.Slides
  DNCell = interface; // type: Aspose.Slides.Cell, namespace: Aspose.Slides
  DNCellCollection = interface; // type: Aspose.Slides.CellCollection, namespace: Aspose.Slides
  DNColumn = interface; // type: Aspose.Slides.Column, namespace: Aspose.Slides
  DNRow = interface; // type: Aspose.Slides.Row, namespace: Aspose.Slides
  DNAxesManager = interface; // type: Aspose.Slides.Charts.AxesManager, namespace: Aspose.Slides.Charts
  DNAxis = interface; // type: Aspose.Slides.Charts.Axis, namespace: Aspose.Slides.Charts
  DNAxisFormat = interface; // type: Aspose.Slides.Charts.AxisFormat, namespace: Aspose.Slides.Charts
  DNBaseChartValue = interface; // type: Aspose.Slides.Charts.BaseChartValue, namespace: Aspose.Slides.Charts
  DNDoubleChartValue = interface; // type: Aspose.Slides.Charts.DoubleChartValue, namespace: Aspose.Slides.Charts
  DNStringChartValue = interface; // type: Aspose.Slides.Charts.StringChartValue, namespace: Aspose.Slides.Charts
  DNStringOrDoubleChartValue = interface; // type: Aspose.Slides.Charts.StringOrDoubleChartValue, namespace: Aspose.Slides.Charts
  DNChartCategory = interface; // type: Aspose.Slides.Charts.ChartCategory, namespace: Aspose.Slides.Charts
  DNChartCategoryCollection = interface; // type: Aspose.Slides.Charts.ChartCategoryCollection, namespace: Aspose.Slides.Charts
  DNChartCategoryLevelsManager = interface; // type: Aspose.Slides.Charts.ChartCategoryLevelsManager, namespace: Aspose.Slides.Charts
  DNChartCellCollection = interface; // type: Aspose.Slides.Charts.ChartCellCollection, namespace: Aspose.Slides.Charts
  DNChartData = interface; // type: Aspose.Slides.Charts.ChartData, namespace: Aspose.Slides.Charts
  DNChartDataCell = interface; // type: Aspose.Slides.Charts.ChartDataCell, namespace: Aspose.Slides.Charts
  DNChartDataPoint = interface; // type: Aspose.Slides.Charts.ChartDataPoint, namespace: Aspose.Slides.Charts
  DNChartDataPointCollection = interface; // type: Aspose.Slides.Charts.ChartDataPointCollection, namespace: Aspose.Slides.Charts
  DNChartDataPointLevel = interface; // type: Aspose.Slides.Charts.ChartDataPointLevel, namespace: Aspose.Slides.Charts
  DNChartDataPointLevelsManager = interface; // type: Aspose.Slides.Charts.ChartDataPointLevelsManager, namespace: Aspose.Slides.Charts
  DNChartDataWorkbook = interface; // type: Aspose.Slides.Charts.ChartDataWorkbook, namespace: Aspose.Slides.Charts
  DNChartDataWorksheet = interface; // type: Aspose.Slides.Charts.ChartDataWorksheet, namespace: Aspose.Slides.Charts
  DNChartLinesFormat = interface; // type: Aspose.Slides.Charts.ChartLinesFormat, namespace: Aspose.Slides.Charts
  DNChartPlotArea = interface; // type: Aspose.Slides.Charts.ChartPlotArea, namespace: Aspose.Slides.Charts
  DNChartSeries = interface; // type: Aspose.Slides.Charts.ChartSeries, namespace: Aspose.Slides.Charts
  DNChartSeriesCollection = interface; // type: Aspose.Slides.Charts.ChartSeriesCollection, namespace: Aspose.Slides.Charts
  DNChartSeriesGroup = interface; // type: Aspose.Slides.Charts.ChartSeriesGroup, namespace: Aspose.Slides.Charts
  DNChartTextFormat = interface; // type: Aspose.Slides.Charts.ChartTextFormat, namespace: Aspose.Slides.Charts
  DNChartTitle = interface; // type: Aspose.Slides.Charts.ChartTitle, namespace: Aspose.Slides.Charts
  DNChartTypeCharacterizer = interface; // type: Aspose.Slides.Charts.ChartTypeCharacterizer, namespace: Aspose.Slides.Charts
  DNChartWall = interface; // type: Aspose.Slides.Charts.ChartWall, namespace: Aspose.Slides.Charts
  DNDataLabel = interface; // type: Aspose.Slides.Charts.DataLabel, namespace: Aspose.Slides.Charts
  DNDataLabelCollection = interface; // type: Aspose.Slides.Charts.DataLabelCollection, namespace: Aspose.Slides.Charts
  DNDataSourceTypeForErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.DataSourceTypeForErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNDataTable = interface; // type: Aspose.Slides.Charts.DataTable, namespace: Aspose.Slides.Charts
  DNErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.ErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNErrorBarsFormat = interface; // type: Aspose.Slides.Charts.ErrorBarsFormat, namespace: Aspose.Slides.Charts
  DNIActualLayout = interface; // type: Aspose.Slides.Charts.IActualLayout, namespace: Aspose.Slides.Charts
  DNIChartDataPoint = interface; // type: Aspose.Slides.Charts.IChartDataPoint, namespace: Aspose.Slides.Charts
  DNIAxesManager = interface; // type: Aspose.Slides.Charts.IAxesManager, namespace: Aspose.Slides.Charts
  DNIAxisFormat = interface; // type: Aspose.Slides.Charts.IAxisFormat, namespace: Aspose.Slides.Charts
  DNIBaseChartValue = interface; // type: Aspose.Slides.Charts.IBaseChartValue, namespace: Aspose.Slides.Charts
  DNIDoubleChartValue = interface; // type: Aspose.Slides.Charts.IDoubleChartValue, namespace: Aspose.Slides.Charts
  DNIMultipleCellChartValue = interface; // type: Aspose.Slides.Charts.IMultipleCellChartValue, namespace: Aspose.Slides.Charts
  DNISingleCellChartValue = interface; // type: Aspose.Slides.Charts.ISingleCellChartValue, namespace: Aspose.Slides.Charts
  DNIStringChartValue = interface; // type: Aspose.Slides.Charts.IStringChartValue, namespace: Aspose.Slides.Charts
  DNIStringOrDoubleChartValue = interface; // type: Aspose.Slides.Charts.IStringOrDoubleChartValue, namespace: Aspose.Slides.Charts
  DNIChartCategory = interface; // type: Aspose.Slides.Charts.IChartCategory, namespace: Aspose.Slides.Charts
  DNIChartCategoryLevelsManager = interface; // type: Aspose.Slides.Charts.IChartCategoryLevelsManager, namespace: Aspose.Slides.Charts
  DNIChartData = interface; // type: Aspose.Slides.Charts.IChartData, namespace: Aspose.Slides.Charts
  DNIChartDataCell = interface; // type: Aspose.Slides.Charts.IChartDataCell, namespace: Aspose.Slides.Charts
  DNIChartDataPointLevel = interface; // type: Aspose.Slides.Charts.IChartDataPointLevel, namespace: Aspose.Slides.Charts
  DNIChartDataPointLevelsManager = interface; // type: Aspose.Slides.Charts.IChartDataPointLevelsManager, namespace: Aspose.Slides.Charts
  DNIChartDataWorkbook = interface; // type: Aspose.Slides.Charts.IChartDataWorkbook, namespace: Aspose.Slides.Charts
  DNIChartDataWorksheet = interface; // type: Aspose.Slides.Charts.IChartDataWorksheet, namespace: Aspose.Slides.Charts
  DNIChartLinesFormat = interface; // type: Aspose.Slides.Charts.IChartLinesFormat, namespace: Aspose.Slides.Charts
  DNIChartParagraphFormat = interface; // type: Aspose.Slides.Charts.IChartParagraphFormat, namespace: Aspose.Slides.Charts
  DNIChartTextBlockFormat = interface; // type: Aspose.Slides.Charts.IChartTextBlockFormat, namespace: Aspose.Slides.Charts
  DNIChartTextFormat = interface; // type: Aspose.Slides.Charts.IChartTextFormat, namespace: Aspose.Slides.Charts
  DNIChartWall = interface; // type: Aspose.Slides.Charts.IChartWall, namespace: Aspose.Slides.Charts
  DNIDataSourceTypeForErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.IDataSourceTypeForErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNIErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.IErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNIFormat = interface; // type: Aspose.Slides.Charts.IFormat, namespace: Aspose.Slides.Charts
  DNILegendEntryCollection = interface; // type: Aspose.Slides.Charts.ILegendEntryCollection, namespace: Aspose.Slides.Charts
  DNIMarker = interface; // type: Aspose.Slides.Charts.IMarker, namespace: Aspose.Slides.Charts
  DNIRotation3D = interface; // type: Aspose.Slides.Charts.IRotation3D, namespace: Aspose.Slides.Charts
  DNIUpDownBarsManager = interface; // type: Aspose.Slides.Charts.IUpDownBarsManager, namespace: Aspose.Slides.Charts
  DNLegend = interface; // type: Aspose.Slides.Charts.Legend, namespace: Aspose.Slides.Charts
  DNLegendEntryCollection = interface; // type: Aspose.Slides.Charts.LegendEntryCollection, namespace: Aspose.Slides.Charts
  DNLegendEntryProperties = interface; // type: Aspose.Slides.Charts.LegendEntryProperties, namespace: Aspose.Slides.Charts
  DNMarker = interface; // type: Aspose.Slides.Charts.Marker, namespace: Aspose.Slides.Charts
  DNPieSplitCustomPointCollection = interface; // type: Aspose.Slides.Charts.PieSplitCustomPointCollection, namespace: Aspose.Slides.Charts
  DNRotation3D = interface; // type: Aspose.Slides.Charts.Rotation3D, namespace: Aspose.Slides.Charts
  DNTrendline = interface; // type: Aspose.Slides.Charts.Trendline, namespace: Aspose.Slides.Charts
  DNTrendlineCollection = interface; // type: Aspose.Slides.Charts.TrendlineCollection, namespace: Aspose.Slides.Charts
  DNUpDownBarsManager = interface; // type: Aspose.Slides.Charts.UpDownBarsManager, namespace: Aspose.Slides.Charts
  DNColorOperation = interface; // type: Aspose.Slides.ColorOperation, namespace: Aspose.Slides
  DNColorOperationCollection = interface; // type: Aspose.Slides.ColorOperationCollection, namespace: Aspose.Slides
  DNColumnCollection = interface; // type: Aspose.Slides.ColumnCollection, namespace: Aspose.Slides
  DNColumnFormat = interface; // type: Aspose.Slides.ColumnFormat, namespace: Aspose.Slides
  DNComment = interface; // type: Aspose.Slides.Comment, namespace: Aspose.Slides
  DNCommentAuthor = interface; // type: Aspose.Slides.CommentAuthor, namespace: Aspose.Slides
  DNCommentAuthorCollection = interface; // type: Aspose.Slides.CommentAuthorCollection, namespace: Aspose.Slides
  DNCommentCollection = interface; // type: Aspose.Slides.CommentCollection, namespace: Aspose.Slides
  DNCommonSlideViewProperties = interface; // type: Aspose.Slides.CommonSlideViewProperties, namespace: Aspose.Slides
  DNControl = interface; // type: Aspose.Slides.Control, namespace: Aspose.Slides
  DNControlCollection = interface; // type: Aspose.Slides.ControlCollection, namespace: Aspose.Slides
  DNControlPropertiesCollection = interface; // type: Aspose.Slides.ControlPropertiesCollection, namespace: Aspose.Slides
  DNCustomData = interface; // type: Aspose.Slides.CustomData, namespace: Aspose.Slides
  DNCustomXmlPart = interface; // type: Aspose.Slides.CustomXmlPart, namespace: Aspose.Slides
  DNCustomXmlPartCollection = interface; // type: Aspose.Slides.CustomXmlPartCollection, namespace: Aspose.Slides
  DNDigitalSignature = interface; // type: Aspose.Slides.DigitalSignature, namespace: Aspose.Slides
  DNDigitalSignatureCollection = interface; // type: Aspose.Slides.DigitalSignatureCollection, namespace: Aspose.Slides
  DNDocumentProperties = interface; // type: Aspose.Slides.DocumentProperties, namespace: Aspose.Slides
  DNOleEmbeddedDataInfo = interface; // type: Aspose.Slides.DOM.Ole.OleEmbeddedDataInfo, namespace: Aspose.Slides.DOM.Ole
  DNEffectEffectiveData = interface; // type: Aspose.Slides.Effects.EffectEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaBiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaCeilingEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaCeilingEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaFloorEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaFloorEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaInverseEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaInverseEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaModulateEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaModulateEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaModulateFixedEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaModulateFixedEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.BiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNBlurEffectiveData = interface; // type: Aspose.Slides.Effects.BlurEffectiveData, namespace: Aspose.Slides.Effects
  DNColorChangeEffectiveData = interface; // type: Aspose.Slides.Effects.ColorChangeEffectiveData, namespace: Aspose.Slides.Effects
  DNColorReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.ColorReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNDuotoneEffectiveData = interface; // type: Aspose.Slides.Effects.DuotoneEffectiveData, namespace: Aspose.Slides.Effects
  DNFillOverlayEffectiveData = interface; // type: Aspose.Slides.Effects.FillOverlayEffectiveData, namespace: Aspose.Slides.Effects
  DNGlowEffectiveData = interface; // type: Aspose.Slides.Effects.GlowEffectiveData, namespace: Aspose.Slides.Effects
  DNGrayScaleEffectiveData = interface; // type: Aspose.Slides.Effects.GrayScaleEffectiveData, namespace: Aspose.Slides.Effects
  DNHSLEffectiveData = interface; // type: Aspose.Slides.Effects.HSLEffectiveData, namespace: Aspose.Slides.Effects
  DNInnerShadowEffectiveData = interface; // type: Aspose.Slides.Effects.InnerShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNLuminanceEffectiveData = interface; // type: Aspose.Slides.Effects.LuminanceEffectiveData, namespace: Aspose.Slides.Effects
  DNOuterShadowEffectiveData = interface; // type: Aspose.Slides.Effects.OuterShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNPresetShadowEffectiveData = interface; // type: Aspose.Slides.Effects.PresetShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNReflectionEffectiveData = interface; // type: Aspose.Slides.Effects.ReflectionEffectiveData, namespace: Aspose.Slides.Effects
  DNSoftEdgeEffectiveData = interface; // type: Aspose.Slides.Effects.SoftEdgeEffectiveData, namespace: Aspose.Slides.Effects
  DNTintEffectiveData = interface; // type: Aspose.Slides.Effects.TintEffectiveData, namespace: Aspose.Slides.Effects
  DNEffectFactory = interface; // type: Aspose.Slides.Effects.EffectFactory, namespace: Aspose.Slides.Effects
  DNGlow = interface; // type: Aspose.Slides.Effects.Glow, namespace: Aspose.Slides.Effects
  DNIAlphaBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaBiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaCeilingEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaCeilingEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaFloorEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaFloorEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaInverseEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaInverseEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaModulateEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaModulateEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaModulateFixedEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaModulateFixedEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNIBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.IBiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNIBlurEffectiveData = interface; // type: Aspose.Slides.Effects.IBlurEffectiveData, namespace: Aspose.Slides.Effects
  DNIColorChangeEffectiveData = interface; // type: Aspose.Slides.Effects.IColorChangeEffectiveData, namespace: Aspose.Slides.Effects
  DNIColorReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.IColorReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNIDuotoneEffectiveData = interface; // type: Aspose.Slides.Effects.IDuotoneEffectiveData, namespace: Aspose.Slides.Effects
  DNIEffectEffectiveData = interface; // type: Aspose.Slides.Effects.IEffectEffectiveData, namespace: Aspose.Slides.Effects
  DNIEffectFactory = interface; // type: Aspose.Slides.Effects.IEffectFactory, namespace: Aspose.Slides.Effects
  DNIFillOverlayEffectiveData = interface; // type: Aspose.Slides.Effects.IFillOverlayEffectiveData, namespace: Aspose.Slides.Effects
  DNIGlow = interface; // type: Aspose.Slides.Effects.IGlow, namespace: Aspose.Slides.Effects
  DNIGlowEffectiveData = interface; // type: Aspose.Slides.Effects.IGlowEffectiveData, namespace: Aspose.Slides.Effects
  DNIGrayScaleEffectiveData = interface; // type: Aspose.Slides.Effects.IGrayScaleEffectiveData, namespace: Aspose.Slides.Effects
  DNIHSLEffectiveData = interface; // type: Aspose.Slides.Effects.IHSLEffectiveData, namespace: Aspose.Slides.Effects
  DNIImageTransformOperation = interface; // type: Aspose.Slides.Effects.IImageTransformOperation, namespace: Aspose.Slides.Effects
  DNIAlphaBiLevel = interface; // type: Aspose.Slides.Effects.IAlphaBiLevel, namespace: Aspose.Slides.Effects
  DNIAlphaCeiling = interface; // type: Aspose.Slides.Effects.IAlphaCeiling, namespace: Aspose.Slides.Effects
  DNIAlphaFloor = interface; // type: Aspose.Slides.Effects.IAlphaFloor, namespace: Aspose.Slides.Effects
  DNIAlphaInverse = interface; // type: Aspose.Slides.Effects.IAlphaInverse, namespace: Aspose.Slides.Effects
  DNIAlphaModulate = interface; // type: Aspose.Slides.Effects.IAlphaModulate, namespace: Aspose.Slides.Effects
  DNIAlphaModulateFixed = interface; // type: Aspose.Slides.Effects.IAlphaModulateFixed, namespace: Aspose.Slides.Effects
  DNIAlphaReplace = interface; // type: Aspose.Slides.Effects.IAlphaReplace, namespace: Aspose.Slides.Effects
  DNIBiLevel = interface; // type: Aspose.Slides.Effects.IBiLevel, namespace: Aspose.Slides.Effects
  DNIBlur = interface; // type: Aspose.Slides.Effects.IBlur, namespace: Aspose.Slides.Effects
  DNIColorChange = interface; // type: Aspose.Slides.Effects.IColorChange, namespace: Aspose.Slides.Effects
  DNIColorReplace = interface; // type: Aspose.Slides.Effects.IColorReplace, namespace: Aspose.Slides.Effects
  DNIDuotone = interface; // type: Aspose.Slides.Effects.IDuotone, namespace: Aspose.Slides.Effects
  DNIFillOverlay = interface; // type: Aspose.Slides.Effects.IFillOverlay, namespace: Aspose.Slides.Effects
  DNIGrayScale = interface; // type: Aspose.Slides.Effects.IGrayScale, namespace: Aspose.Slides.Effects
  DNIHSL = interface; // type: Aspose.Slides.Effects.IHSL, namespace: Aspose.Slides.Effects
  DNILuminance = interface; // type: Aspose.Slides.Effects.ILuminance, namespace: Aspose.Slides.Effects
  DNITint = interface; // type: Aspose.Slides.Effects.ITint, namespace: Aspose.Slides.Effects
  DNIImageTransformOperationFactory = interface; // type: Aspose.Slides.Effects.IImageTransformOperationFactory, namespace: Aspose.Slides.Effects
  DNIInnerShadow = interface; // type: Aspose.Slides.Effects.IInnerShadow, namespace: Aspose.Slides.Effects
  DNIInnerShadowEffectiveData = interface; // type: Aspose.Slides.Effects.IInnerShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNILuminanceEffectiveData = interface; // type: Aspose.Slides.Effects.ILuminanceEffectiveData, namespace: Aspose.Slides.Effects
  DNImageTransformOCollectionEffectiveData = interface; // type: Aspose.Slides.Effects.ImageTransformOCollectionEffectiveData, namespace: Aspose.Slides.Effects
  DNImageTransformOperationFactory = interface; // type: Aspose.Slides.Effects.ImageTransformOperationFactory, namespace: Aspose.Slides.Effects
  DNInnerShadow = interface; // type: Aspose.Slides.Effects.InnerShadow, namespace: Aspose.Slides.Effects
  DNIOuterShadow = interface; // type: Aspose.Slides.Effects.IOuterShadow, namespace: Aspose.Slides.Effects
  DNIOuterShadowEffectiveData = interface; // type: Aspose.Slides.Effects.IOuterShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNIPresetShadow = interface; // type: Aspose.Slides.Effects.IPresetShadow, namespace: Aspose.Slides.Effects
  DNIPresetShadowEffectiveData = interface; // type: Aspose.Slides.Effects.IPresetShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNIReflection = interface; // type: Aspose.Slides.Effects.IReflection, namespace: Aspose.Slides.Effects
  DNIReflectionEffectiveData = interface; // type: Aspose.Slides.Effects.IReflectionEffectiveData, namespace: Aspose.Slides.Effects
  DNISoftEdge = interface; // type: Aspose.Slides.Effects.ISoftEdge, namespace: Aspose.Slides.Effects
  DNISoftEdgeEffectiveData = interface; // type: Aspose.Slides.Effects.ISoftEdgeEffectiveData, namespace: Aspose.Slides.Effects
  DNITintEffectiveData = interface; // type: Aspose.Slides.Effects.ITintEffectiveData, namespace: Aspose.Slides.Effects
  DNOuterShadow = interface; // type: Aspose.Slides.Effects.OuterShadow, namespace: Aspose.Slides.Effects
  DNPresetShadow = interface; // type: Aspose.Slides.Effects.PresetShadow, namespace: Aspose.Slides.Effects
  DNReflection = interface; // type: Aspose.Slides.Effects.Reflection, namespace: Aspose.Slides.Effects
  DNSoftEdge = interface; // type: Aspose.Slides.Effects.SoftEdge, namespace: Aspose.Slides.Effects
  DNEmbedAllFontsHtmlController = interface; // type: Aspose.Slides.Export.EmbedAllFontsHtmlController, namespace: Aspose.Slides.Export
  DNEmbeddedEotFontsHtmlController = interface; // type: Aspose.Slides.Export.EmbeddedEotFontsHtmlController, namespace: Aspose.Slides.Export
  DNEmbeddedWoffFontsHtmlController = interface; // type: Aspose.Slides.Export.EmbeddedWoffFontsHtmlController, namespace: Aspose.Slides.Export
  DNHtmlFormatter = interface; // type: Aspose.Slides.Export.HtmlFormatter, namespace: Aspose.Slides.Export
  DNHtmlGenerator = interface; // type: Aspose.Slides.Export.HtmlGenerator, namespace: Aspose.Slides.Export
  DNIHtmlFormatter = interface; // type: Aspose.Slides.Export.IHtmlFormatter, namespace: Aspose.Slides.Export
  DNIHtmlFormattingController = interface; // type: Aspose.Slides.Export.IHtmlFormattingController, namespace: Aspose.Slides.Export
  DNIEmbeddedEotFontsHtmlController = interface; // type: Aspose.Slides.Export.IEmbeddedEotFontsHtmlController, namespace: Aspose.Slides.Export
  DNIEmbeddedWoffFontsHtmlController = interface; // type: Aspose.Slides.Export.IEmbeddedWoffFontsHtmlController, namespace: Aspose.Slides.Export
  DNIResponsiveHtmlController = interface; // type: Aspose.Slides.Export.IResponsiveHtmlController, namespace: Aspose.Slides.Export
  DNIHtmlGenerator = interface; // type: Aspose.Slides.Export.IHtmlGenerator, namespace: Aspose.Slides.Export
  DNILinkEmbedController = interface; // type: Aspose.Slides.Export.ILinkEmbedController, namespace: Aspose.Slides.Export
  DNIVideoPlayerHtmlController = interface; // type: Aspose.Slides.Export.IVideoPlayerHtmlController, namespace: Aspose.Slides.Export
  DNINotesCommentsLayoutingOptions = interface; // type: Aspose.Slides.Export.INotesCommentsLayoutingOptions, namespace: Aspose.Slides.Export
  DNISaveOptions = interface; // type: Aspose.Slides.Export.ISaveOptions, namespace: Aspose.Slides.Export
  DNIHtmlOptions = interface; // type: Aspose.Slides.Export.IHtmlOptions, namespace: Aspose.Slides.Export
  DNIPdfOptions = interface; // type: Aspose.Slides.Export.IPdfOptions, namespace: Aspose.Slides.Export
  DNIPptOptions = interface; // type: Aspose.Slides.Export.IPptOptions, namespace: Aspose.Slides.Export
  DNIPptxOptions = interface; // type: Aspose.Slides.Export.IPptxOptions, namespace: Aspose.Slides.Export
  DNIRenderingOptions = interface; // type: Aspose.Slides.Export.IRenderingOptions, namespace: Aspose.Slides.Export
  DNISVGOptions = interface; // type: Aspose.Slides.Export.ISVGOptions, namespace: Aspose.Slides.Export
  DNISwfOptions = interface; // type: Aspose.Slides.Export.ISwfOptions, namespace: Aspose.Slides.Export
  DNITiffOptions = interface; // type: Aspose.Slides.Export.ITiffOptions, namespace: Aspose.Slides.Export
  DNIXpsOptions = interface; // type: Aspose.Slides.Export.IXpsOptions, namespace: Aspose.Slides.Export
  DNIXamlOptions = interface; // type: Aspose.Slides.Export.Xaml.IXamlOptions, namespace: Aspose.Slides.Export.Xaml
  DNISaveOptionsFactory = interface; // type: Aspose.Slides.Export.ISaveOptionsFactory, namespace: Aspose.Slides.Export
  DNISlideImageFormat = interface; // type: Aspose.Slides.Export.ISlideImageFormat, namespace: Aspose.Slides.Export
  DNISvgShape = interface; // type: Aspose.Slides.Export.ISvgShape, namespace: Aspose.Slides.Export
  DNISvgShapeFormattingController = interface; // type: Aspose.Slides.Export.ISvgShapeFormattingController, namespace: Aspose.Slides.Export
  DNISvgShapeAndTextFormattingController = interface; // type: Aspose.Slides.Export.ISvgShapeAndTextFormattingController, namespace: Aspose.Slides.Export
  DNISvgTSpan = interface; // type: Aspose.Slides.Export.ISvgTSpan, namespace: Aspose.Slides.Export
  DNITextToHtmlConversionOptions = interface; // type: Aspose.Slides.Export.ITextToHtmlConversionOptions, namespace: Aspose.Slides.Export
  DNIVideoPlayerHtmlControllerFactory = interface; // type: Aspose.Slides.Export.IVideoPlayerHtmlControllerFactory, namespace: Aspose.Slides.Export
  DNNotesCommentsLayoutingOptions = interface; // type: Aspose.Slides.Export.NotesCommentsLayoutingOptions, namespace: Aspose.Slides.Export
  DNResponsiveHtmlController = interface; // type: Aspose.Slides.Export.ResponsiveHtmlController, namespace: Aspose.Slides.Export
  DNSaveOptions = interface; // type: Aspose.Slides.Export.SaveOptions, namespace: Aspose.Slides.Export
  DNHtmlOptions = interface; // type: Aspose.Slides.Export.HtmlOptions, namespace: Aspose.Slides.Export
  DNPdfOptions = interface; // type: Aspose.Slides.Export.PdfOptions, namespace: Aspose.Slides.Export
  DNPptOptions = interface; // type: Aspose.Slides.Export.PptOptions, namespace: Aspose.Slides.Export
  DNPptxOptions = interface; // type: Aspose.Slides.Export.PptxOptions, namespace: Aspose.Slides.Export
  DNRenderingOptions = interface; // type: Aspose.Slides.Export.RenderingOptions, namespace: Aspose.Slides.Export
  DNSVGOptions = interface; // type: Aspose.Slides.Export.SVGOptions, namespace: Aspose.Slides.Export
  DNSwfOptions = interface; // type: Aspose.Slides.Export.SwfOptions, namespace: Aspose.Slides.Export
  DNTiffOptions = interface; // type: Aspose.Slides.Export.TiffOptions, namespace: Aspose.Slides.Export
  DNXamlOptions = interface; // type: Aspose.Slides.Export.Xaml.XamlOptions, namespace: Aspose.Slides.Export.Xaml
  DNXpsOptions = interface; // type: Aspose.Slides.Export.XpsOptions, namespace: Aspose.Slides.Export
  DNSaveOptionsFactory = interface; // type: Aspose.Slides.Export.SaveOptionsFactory, namespace: Aspose.Slides.Export
  DNSlideImageFormat = interface; // type: Aspose.Slides.Export.SlideImageFormat, namespace: Aspose.Slides.Export
  DNSvgShape = interface; // type: Aspose.Slides.Export.SvgShape, namespace: Aspose.Slides.Export
  DNSvgTSpan = interface; // type: Aspose.Slides.Export.SvgTSpan, namespace: Aspose.Slides.Export
  DNTextToHtmlConversionOptions = interface; // type: Aspose.Slides.Export.TextToHtmlConversionOptions, namespace: Aspose.Slides.Export
  DNVideoPlayerHtmlController = interface; // type: Aspose.Slides.Export.VideoPlayerHtmlController, namespace: Aspose.Slides.Export
  DNVideoPlayerHtmlControllerFactory = interface; // type: Aspose.Slides.Export.VideoPlayerHtmlControllerFactory, namespace: Aspose.Slides.Export
  DNInput = interface; // type: Aspose.Slides.Export.Web.Input, namespace: Aspose.Slides.Export.Web
  DNIOutputFile = interface; // type: Aspose.Slides.Export.Web.IOutputFile, namespace: Aspose.Slides.Export.Web
  DNIOutputSaver = interface; // type: Aspose.Slides.Export.Web.IOutputSaver, namespace: Aspose.Slides.Export.Web
  DNITemplateEngine = interface; // type: Aspose.Slides.Export.Web.ITemplateEngine, namespace: Aspose.Slides.Export.Web
  DNOutput = interface; // type: Aspose.Slides.Export.Web.Output, namespace: Aspose.Slides.Export.Web
  DNOutputFile = interface; // type: Aspose.Slides.Export.Web.OutputFile, namespace: Aspose.Slides.Export.Web
  DNStorage = interface; // type: Aspose.Slides.Export.Web.Storage, namespace: Aspose.Slides.Export.Web
  DNWebDocument = interface; // type: Aspose.Slides.Export.Web.WebDocument, namespace: Aspose.Slides.Export.Web
  DNWebDocumentOptions = interface; // type: Aspose.Slides.Export.Web.WebDocumentOptions, namespace: Aspose.Slides.Export.Web
  DNIXamlOutputSaver = interface; // type: Aspose.Slides.Export.Xaml.IXamlOutputSaver, namespace: Aspose.Slides.Export.Xaml
  DNField = interface; // type: Aspose.Slides.Field, namespace: Aspose.Slides
  DNFieldType = interface; // type: Aspose.Slides.FieldType, namespace: Aspose.Slides
  DNFontData = interface; // type: Aspose.Slides.FontData, namespace: Aspose.Slides
  DNFontDataFactory = interface; // type: Aspose.Slides.FontDataFactory, namespace: Aspose.Slides
  DNFontFallBackRule = interface; // type: Aspose.Slides.FontFallBackRule, namespace: Aspose.Slides
  DNFontFallBackRulesCollection = interface; // type: Aspose.Slides.FontFallBackRulesCollection, namespace: Aspose.Slides
  DNFonts = interface; // type: Aspose.Slides.Fonts, namespace: Aspose.Slides
  DNFontsLoader = interface; // type: Aspose.Slides.FontsLoader, namespace: Aspose.Slides
  DNFontsManager = interface; // type: Aspose.Slides.FontsManager, namespace: Aspose.Slides
  DNFontSources = interface; // type: Aspose.Slides.FontSources, namespace: Aspose.Slides
  DNFontSubstRule = interface; // type: Aspose.Slides.FontSubstRule, namespace: Aspose.Slides
  DNFontSubstRuleCollection = interface; // type: Aspose.Slides.FontSubstRuleCollection, namespace: Aspose.Slides
  DNFormatFactory = interface; // type: Aspose.Slides.FormatFactory, namespace: Aspose.Slides
  DNGeometryPath = interface; // type: Aspose.Slides.GeometryPath, namespace: Aspose.Slides
  DNGradientStopCollectionEffectiveData = interface; // type: Aspose.Slides.GradientStopCollectionEffectiveData, namespace: Aspose.Slides
  DNGradientStopEffectiveData = interface; // type: Aspose.Slides.GradientStopEffectiveData, namespace: Aspose.Slides
  DNHyperlinkManager = interface; // type: Aspose.Slides.HyperlinkManager, namespace: Aspose.Slides
  DNHyperlinkQueries = interface; // type: Aspose.Slides.HyperlinkQueries, namespace: Aspose.Slides
  DNIAdjustValue = interface; // type: Aspose.Slides.IAdjustValue, namespace: Aspose.Slides
  DNIAnimationTimeLine = interface; // type: Aspose.Slides.IAnimationTimeLine, namespace: Aspose.Slides
  DNIAudio = interface; // type: Aspose.Slides.IAudio, namespace: Aspose.Slides
  DNIBackdrop3DScene = interface; // type: Aspose.Slides.IBackdrop3DScene, namespace: Aspose.Slides
  DNIBaseHeaderFooterManager = interface; // type: Aspose.Slides.IBaseHeaderFooterManager, namespace: Aspose.Slides
  DNIBaseSlideHeaderFooterManager = interface; // type: Aspose.Slides.IBaseSlideHeaderFooterManager, namespace: Aspose.Slides
  DNIBaseHandoutNotesSlideHeaderFooterManag = interface; // type: Aspose.Slides.IBaseHandoutNotesSlideHeaderFooterManag, namespace: Aspose.Slides
  DNIMasterHandoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.IMasterHandoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNIMasterNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.IMasterNotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNINotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.INotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNILayoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.ILayoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNIMasterSlideHeaderFooterManager = interface; // type: Aspose.Slides.IMasterSlideHeaderFooterManager, namespace: Aspose.Slides
  DNISlideHeaderFooterManager = interface; // type: Aspose.Slides.ISlideHeaderFooterManager, namespace: Aspose.Slides
  DNIPresentationHeaderFooterManager = interface; // type: Aspose.Slides.IPresentationHeaderFooterManager, namespace: Aspose.Slides
  DNIBasePortionFormat = interface; // type: Aspose.Slides.IBasePortionFormat, namespace: Aspose.Slides
  DNIChartPortionFormat = interface; // type: Aspose.Slides.Charts.IChartPortionFormat, namespace: Aspose.Slides.Charts
  DNIPortionFormat = interface; // type: Aspose.Slides.IPortionFormat, namespace: Aspose.Slides
  DNIBasePortionFormatEffectiveData = interface; // type: Aspose.Slides.IBasePortionFormatEffectiveData, namespace: Aspose.Slides
  DNIPortionFormatEffectiveData = interface; // type: Aspose.Slides.IPortionFormatEffectiveData, namespace: Aspose.Slides
  DNIBaseShapeLock = interface; // type: Aspose.Slides.IBaseShapeLock, namespace: Aspose.Slides
  DNIAutoShapeLock = interface; // type: Aspose.Slides.IAutoShapeLock, namespace: Aspose.Slides
  DNIConnectorLock = interface; // type: Aspose.Slides.IConnectorLock, namespace: Aspose.Slides
  DNIGraphicalObjectLock = interface; // type: Aspose.Slides.IGraphicalObjectLock, namespace: Aspose.Slides
  DNIGroupShapeLock = interface; // type: Aspose.Slides.IGroupShapeLock, namespace: Aspose.Slides
  DNIPictureFrameLock = interface; // type: Aspose.Slides.IPictureFrameLock, namespace: Aspose.Slides
  DNIBaseTableFormatEffectiveData = interface; // type: Aspose.Slides.IBaseTableFormatEffectiveData, namespace: Aspose.Slides
  DNICellFormatEffectiveData = interface; // type: Aspose.Slides.ICellFormatEffectiveData, namespace: Aspose.Slides
  DNIColumnFormatEffectiveData = interface; // type: Aspose.Slides.IColumnFormatEffectiveData, namespace: Aspose.Slides
  DNIRowFormatEffectiveData = interface; // type: Aspose.Slides.IRowFormatEffectiveData, namespace: Aspose.Slides
  DNITableFormatEffectiveData = interface; // type: Aspose.Slides.ITableFormatEffectiveData, namespace: Aspose.Slides
  DNIBlobManagementOptions = interface; // type: Aspose.Slides.IBlobManagementOptions, namespace: Aspose.Slides
  DNIBulkTextFormattable = interface; // type: Aspose.Slides.IBulkTextFormattable, namespace: Aspose.Slides
  DNIBulletFormat = interface; // type: Aspose.Slides.IBulletFormat, namespace: Aspose.Slides
  DNIBulletFormatEffectiveData = interface; // type: Aspose.Slides.IBulletFormatEffectiveData, namespace: Aspose.Slides
  DNICamera = interface; // type: Aspose.Slides.ICamera, namespace: Aspose.Slides
  DNICameraEffectiveData = interface; // type: Aspose.Slides.ICameraEffectiveData, namespace: Aspose.Slides
  DNICellFormat = interface; // type: Aspose.Slides.ICellFormat, namespace: Aspose.Slides
  DNIColorOperation = interface; // type: Aspose.Slides.IColorOperation, namespace: Aspose.Slides
  DNIColumnFormat = interface; // type: Aspose.Slides.IColumnFormat, namespace: Aspose.Slides
  DNIComment = interface; // type: Aspose.Slides.IComment, namespace: Aspose.Slides
  DNICommentAuthor = interface; // type: Aspose.Slides.ICommentAuthor, namespace: Aspose.Slides
  DNICommonSlideViewProperties = interface; // type: Aspose.Slides.ICommonSlideViewProperties, namespace: Aspose.Slides
  DNICustomData = interface; // type: Aspose.Slides.ICustomData, namespace: Aspose.Slides
  DNICustomXmlPart = interface; // type: Aspose.Slides.ICustomXmlPart, namespace: Aspose.Slides
  DNIDigitalSignature = interface; // type: Aspose.Slides.IDigitalSignature, namespace: Aspose.Slides
  DNIDocumentProperties = interface; // type: Aspose.Slides.IDocumentProperties, namespace: Aspose.Slides
  DNIEffectParamSource = interface; // type: Aspose.Slides.IEffectParamSource, namespace: Aspose.Slides
  DNIEffectFormat = interface; // type: Aspose.Slides.IEffectFormat, namespace: Aspose.Slides
  DNIEffectFormatEffectiveData = interface; // type: Aspose.Slides.IEffectFormatEffectiveData, namespace: Aspose.Slides
  DNIFieldType = interface; // type: Aspose.Slides.IFieldType, namespace: Aspose.Slides
  DNIFillParamSource = interface; // type: Aspose.Slides.IFillParamSource, namespace: Aspose.Slides
  DNIBackgroundEffectiveData = interface; // type: Aspose.Slides.IBackgroundEffectiveData, namespace: Aspose.Slides
  DNIColorFormat = interface; // type: Aspose.Slides.IColorFormat, namespace: Aspose.Slides
  DNIFillFormat = interface; // type: Aspose.Slides.IFillFormat, namespace: Aspose.Slides
  DNIFillFormatEffectiveData = interface; // type: Aspose.Slides.IFillFormatEffectiveData, namespace: Aspose.Slides
  DNIGradientFormat = interface; // type: Aspose.Slides.IGradientFormat, namespace: Aspose.Slides
  DNIGradientFormatEffectiveData = interface; // type: Aspose.Slides.IGradientFormatEffectiveData, namespace: Aspose.Slides
  DNILineFillFormat = interface; // type: Aspose.Slides.ILineFillFormat, namespace: Aspose.Slides
  DNILineFillFormatEffectiveData = interface; // type: Aspose.Slides.ILineFillFormatEffectiveData, namespace: Aspose.Slides
  DNIPictureFillFormat = interface; // type: Aspose.Slides.IPictureFillFormat, namespace: Aspose.Slides
  DNIPictureFillFormatEffectiveData = interface; // type: Aspose.Slides.IPictureFillFormatEffectiveData, namespace: Aspose.Slides
  DNIFontData = interface; // type: Aspose.Slides.IFontData, namespace: Aspose.Slides
  DNIFontDataFactory = interface; // type: Aspose.Slides.IFontDataFactory, namespace: Aspose.Slides
  DNIFontFallBackRule = interface; // type: Aspose.Slides.IFontFallBackRule, namespace: Aspose.Slides
  DNIFonts = interface; // type: Aspose.Slides.IFonts, namespace: Aspose.Slides
  DNIFontsEffectiveData = interface; // type: Aspose.Slides.IFontsEffectiveData, namespace: Aspose.Slides
  DNIFontsLoader = interface; // type: Aspose.Slides.IFontsLoader, namespace: Aspose.Slides
  DNIFontsManager = interface; // type: Aspose.Slides.IFontsManager, namespace: Aspose.Slides
  DNIFontSources = interface; // type: Aspose.Slides.IFontSources, namespace: Aspose.Slides
  DNIFontSubstRule = interface; // type: Aspose.Slides.IFontSubstRule, namespace: Aspose.Slides
  DNIFormatFactory = interface; // type: Aspose.Slides.IFormatFactory, namespace: Aspose.Slides
  DNIGeometryPath = interface; // type: Aspose.Slides.IGeometryPath, namespace: Aspose.Slides
  DNIGradientStop = interface; // type: Aspose.Slides.IGradientStop, namespace: Aspose.Slides
  DNIGradientStopEffectiveData = interface; // type: Aspose.Slides.IGradientStopEffectiveData, namespace: Aspose.Slides
  DNIHyperlink = interface; // type: Aspose.Slides.IHyperlink, namespace: Aspose.Slides
  DNIHyperlinkContainer = interface; // type: Aspose.Slides.IHyperlinkContainer, namespace: Aspose.Slides
  DNIHyperlinkManager = interface; // type: Aspose.Slides.IHyperlinkManager, namespace: Aspose.Slides
  DNIHyperlinkQueries = interface; // type: Aspose.Slides.IHyperlinkQueries, namespace: Aspose.Slides
  DNIImageWrapperFactory = interface; // type: Aspose.Slides.IImageWrapperFactory, namespace: Aspose.Slides
  DNIInterruptionToken = interface; // type: Aspose.Slides.IInterruptionToken, namespace: Aspose.Slides
  DNIInterruptionTokenSource = interface; // type: Aspose.Slides.IInterruptionTokenSource, namespace: Aspose.Slides
  DNILicense = interface; // type: Aspose.Slides.ILicense, namespace: Aspose.Slides
  DNILightRig = interface; // type: Aspose.Slides.ILightRig, namespace: Aspose.Slides
  DNILightRigEffectiveData = interface; // type: Aspose.Slides.ILightRigEffectiveData, namespace: Aspose.Slides
  DNILineParamSource = interface; // type: Aspose.Slides.ILineParamSource, namespace: Aspose.Slides
  DNILineFormat = interface; // type: Aspose.Slides.ILineFormat, namespace: Aspose.Slides
  DNILineFormatEffectiveData = interface; // type: Aspose.Slides.ILineFormatEffectiveData, namespace: Aspose.Slides
  DNILoadOptions = interface; // type: Aspose.Slides.ILoadOptions, namespace: Aspose.Slides
  DNImageCollection = interface; // type: Aspose.Slides.ImageCollection, namespace: Aspose.Slides
  DNImageWrapper = interface; // type: Aspose.Slides.ImageWrapper, namespace: Aspose.Slides
  DNImageWrapperFactory = interface; // type: Aspose.Slides.ImageWrapperFactory, namespace: Aspose.Slides
  DNIMasterHandoutSlideManager = interface; // type: Aspose.Slides.IMasterHandoutSlideManager, namespace: Aspose.Slides
  DNIMasterNotesSlideManager = interface; // type: Aspose.Slides.IMasterNotesSlideManager, namespace: Aspose.Slides
  DNIMetered = interface; // type: Aspose.Slides.IMetered, namespace: Aspose.Slides
  DNExternalResourceResolver = interface; // type: Aspose.Slides.Import.ExternalResourceResolver, namespace: Aspose.Slides.Import
  DNHtmlExternalResolver = interface; // type: Aspose.Slides.Import.HtmlExternalResolver, namespace: Aspose.Slides.Import
  DNIExternalResourceResolver = interface; // type: Aspose.Slides.Import.IExternalResourceResolver, namespace: Aspose.Slides.Import
  DNIHtmlExternalResolver = interface; // type: Aspose.Slides.Import.IHtmlExternalResolver, namespace: Aspose.Slides.Import
  DNINormalViewProperties = interface; // type: Aspose.Slides.INormalViewProperties, namespace: Aspose.Slides
  DNINormalViewRestoredProperties = interface; // type: Aspose.Slides.INormalViewRestoredProperties, namespace: Aspose.Slides
  DNINotesSize = interface; // type: Aspose.Slides.INotesSize, namespace: Aspose.Slides
  DNINotesSlideManager = interface; // type: Aspose.Slides.INotesSlideManager, namespace: Aspose.Slides
  DNInterruptionToken = interface; // type: Aspose.Slides.InterruptionToken, namespace: Aspose.Slides
  DNInterruptionTokenSource = interface; // type: Aspose.Slides.InterruptionTokenSource, namespace: Aspose.Slides
  DNIOleEmbeddedDataInfo = interface; // type: Aspose.Slides.IOleEmbeddedDataInfo, namespace: Aspose.Slides
  DNIParagraphFactory = interface; // type: Aspose.Slides.IParagraphFactory, namespace: Aspose.Slides
  DNIParagraphFormat = interface; // type: Aspose.Slides.IParagraphFormat, namespace: Aspose.Slides
  DNIParagraphFormatEffectiveData = interface; // type: Aspose.Slides.IParagraphFormatEffectiveData, namespace: Aspose.Slides
  DNIPathSegment = interface; // type: Aspose.Slides.IPathSegment, namespace: Aspose.Slides
  DNIPatternFormat = interface; // type: Aspose.Slides.IPatternFormat, namespace: Aspose.Slides
  DNIPatternFormatEffectiveData = interface; // type: Aspose.Slides.IPatternFormatEffectiveData, namespace: Aspose.Slides
  DNIPictureEffectiveData = interface; // type: Aspose.Slides.IPictureEffectiveData, namespace: Aspose.Slides
  DNIPlaceholder = interface; // type: Aspose.Slides.IPlaceholder, namespace: Aspose.Slides
  DNIPortionFactory = interface; // type: Aspose.Slides.IPortionFactory, namespace: Aspose.Slides
  DNIPPImage = interface; // type: Aspose.Slides.IPPImage, namespace: Aspose.Slides
  DNIPresentationComponent = interface; // type: Aspose.Slides.IPresentationComponent, namespace: Aspose.Slides
  DNISlideComponent = interface; // type: Aspose.Slides.ISlideComponent, namespace: Aspose.Slides
  DNIAxis = interface; // type: Aspose.Slides.Charts.IAxis, namespace: Aspose.Slides.Charts
  DNIChart = interface; // type: Aspose.Slides.Charts.IChart, namespace: Aspose.Slides.Charts
  DNIChartComponent = interface; // type: Aspose.Slides.Charts.IChartComponent, namespace: Aspose.Slides.Charts
  DNIChartSeries = interface; // type: Aspose.Slides.Charts.IChartSeries, namespace: Aspose.Slides.Charts
  DNIChartSeriesGroup = interface; // type: Aspose.Slides.Charts.IChartSeriesGroup, namespace: Aspose.Slides.Charts
  DNIDataLabelFormat = interface; // type: Aspose.Slides.Charts.IDataLabelFormat, namespace: Aspose.Slides.Charts
  DNIDataTable = interface; // type: Aspose.Slides.Charts.IDataTable, namespace: Aspose.Slides.Charts
  DNIErrorBarsFormat = interface; // type: Aspose.Slides.Charts.IErrorBarsFormat, namespace: Aspose.Slides.Charts
  DNIFormattedTextContainer = interface; // type: Aspose.Slides.Charts.IFormattedTextContainer, namespace: Aspose.Slides.Charts
  DNILayoutable = interface; // type: Aspose.Slides.Charts.ILayoutable, namespace: Aspose.Slides.Charts
  DNIChartPlotArea = interface; // type: Aspose.Slides.Charts.IChartPlotArea, namespace: Aspose.Slides.Charts
  DNIChartTitle = interface; // type: Aspose.Slides.Charts.IChartTitle, namespace: Aspose.Slides.Charts
  DNIDataLabel = interface; // type: Aspose.Slides.Charts.IDataLabel, namespace: Aspose.Slides.Charts
  DNILegend = interface; // type: Aspose.Slides.Charts.ILegend, namespace: Aspose.Slides.Charts
  DNILegendEntryProperties = interface; // type: Aspose.Slides.Charts.ILegendEntryProperties, namespace: Aspose.Slides.Charts
  DNIOverridableText = interface; // type: Aspose.Slides.Charts.IOverridableText, namespace: Aspose.Slides.Charts
  DNITrendline = interface; // type: Aspose.Slides.Charts.ITrendline, namespace: Aspose.Slides.Charts
  DNIAudioFrame = interface; // type: Aspose.Slides.IAudioFrame, namespace: Aspose.Slides
  DNIAutoShape = interface; // type: Aspose.Slides.IAutoShape, namespace: Aspose.Slides
  DNIBackground = interface; // type: Aspose.Slides.IBackground, namespace: Aspose.Slides
  DNIBaseSlide = interface; // type: Aspose.Slides.IBaseSlide, namespace: Aspose.Slides
  DNILayoutSlide = interface; // type: Aspose.Slides.ILayoutSlide, namespace: Aspose.Slides
  DNIMasterHandoutSlide = interface; // type: Aspose.Slides.IMasterHandoutSlide, namespace: Aspose.Slides
  DNIMasterNotesSlide = interface; // type: Aspose.Slides.IMasterNotesSlide, namespace: Aspose.Slides
  DNIMasterSlide = interface; // type: Aspose.Slides.IMasterSlide, namespace: Aspose.Slides
  DNINotesSlide = interface; // type: Aspose.Slides.INotesSlide, namespace: Aspose.Slides
  DNISlide = interface; // type: Aspose.Slides.ISlide, namespace: Aspose.Slides
  DNICell = interface; // type: Aspose.Slides.ICell, namespace: Aspose.Slides
  DNIConnector = interface; // type: Aspose.Slides.IConnector, namespace: Aspose.Slides
  DNIControl = interface; // type: Aspose.Slides.IControl, namespace: Aspose.Slides
  DNIField = interface; // type: Aspose.Slides.IField, namespace: Aspose.Slides
  DNIGeometryShape = interface; // type: Aspose.Slides.IGeometryShape, namespace: Aspose.Slides
  DNIGraphicalObject = interface; // type: Aspose.Slides.IGraphicalObject, namespace: Aspose.Slides
  DNIGroupShape = interface; // type: Aspose.Slides.IGroupShape, namespace: Aspose.Slides
  DNILegacyDiagram = interface; // type: Aspose.Slides.ILegacyDiagram, namespace: Aspose.Slides
  DNIInk = interface; // type: Aspose.Slides.Ink.IInk, namespace: Aspose.Slides.Ink
  DNIOleObjectFrame = interface; // type: Aspose.Slides.IOleObjectFrame, namespace: Aspose.Slides
  DNIParagraph = interface; // type: Aspose.Slides.IParagraph, namespace: Aspose.Slides
  DNIPictureFrame = interface; // type: Aspose.Slides.IPictureFrame, namespace: Aspose.Slides
  DNIPortion = interface; // type: Aspose.Slides.IPortion, namespace: Aspose.Slides
  DNIShape = interface; // type: Aspose.Slides.IShape, namespace: Aspose.Slides
  DNITable = interface; // type: Aspose.Slides.ITable, namespace: Aspose.Slides
  DNITextFrame = interface; // type: Aspose.Slides.ITextFrame, namespace: Aspose.Slides
  DNIVideoFrame = interface; // type: Aspose.Slides.IVideoFrame, namespace: Aspose.Slides
  DNIZoomFrame = interface; // type: Aspose.Slides.IZoomFrame, namespace: Aspose.Slides
  DNISmartArt = interface; // type: Aspose.Slides.SmartArt.ISmartArt, namespace: Aspose.Slides.SmartArt
  DNISmartArtShape = interface; // type: Aspose.Slides.SmartArt.ISmartArtShape, namespace: Aspose.Slides.SmartArt
  DNIColorScheme = interface; // type: Aspose.Slides.Theme.IColorScheme, namespace: Aspose.Slides.Theme
  DNIFormatScheme = interface; // type: Aspose.Slides.Theme.IFormatScheme, namespace: Aspose.Slides.Theme
  DNIMasterThemeable = interface; // type: Aspose.Slides.Theme.IMasterThemeable, namespace: Aspose.Slides.Theme
  DNIOverrideThemeable = interface; // type: Aspose.Slides.Theme.IOverrideThemeable, namespace: Aspose.Slides.Theme
  DNIThemeable = interface; // type: Aspose.Slides.Theme.IThemeable, namespace: Aspose.Slides.Theme
  DNISlidesPicture = interface; // type: Aspose.Slides.ISlidesPicture, namespace: Aspose.Slides
  DNIMasterTheme = interface; // type: Aspose.Slides.Theme.IMasterTheme, namespace: Aspose.Slides.Theme
  DNIOverrideTheme = interface; // type: Aspose.Slides.Theme.IOverrideTheme, namespace: Aspose.Slides.Theme
  DNITheme = interface; // type: Aspose.Slides.Theme.ITheme, namespace: Aspose.Slides.Theme
  DNIPresentationFactory = interface; // type: Aspose.Slides.IPresentationFactory, namespace: Aspose.Slides
  DNIPresentationInfo = interface; // type: Aspose.Slides.IPresentationInfo, namespace: Aspose.Slides
  DNIPresentationText = interface; // type: Aspose.Slides.IPresentationText, namespace: Aspose.Slides
  DNIProgressCallback = interface; // type: Aspose.Slides.IProgressCallback, namespace: Aspose.Slides
  DNIProtectionManager = interface; // type: Aspose.Slides.IProtectionManager, namespace: Aspose.Slides
  DNIResourceLoadingArgs = interface; // type: Aspose.Slides.IResourceLoadingArgs, namespace: Aspose.Slides
  DNIResourceLoadingCallback = interface; // type: Aspose.Slides.IResourceLoadingCallback, namespace: Aspose.Slides
  DNIRowFormat = interface; // type: Aspose.Slides.IRowFormat, namespace: Aspose.Slides
  DNISection = interface; // type: Aspose.Slides.ISection, namespace: Aspose.Slides
  DNIShapeBevel = interface; // type: Aspose.Slides.IShapeBevel, namespace: Aspose.Slides
  DNIShapeBevelEffectiveData = interface; // type: Aspose.Slides.IShapeBevelEffectiveData, namespace: Aspose.Slides
  DNIShapeElement = interface; // type: Aspose.Slides.IShapeElement, namespace: Aspose.Slides
  DNIShapeStyle = interface; // type: Aspose.Slides.IShapeStyle, namespace: Aspose.Slides
  DNISketchFormat = interface; // type: Aspose.Slides.ISketchFormat, namespace: Aspose.Slides
  DNISketchFormatEffectiveData = interface; // type: Aspose.Slides.ISketchFormatEffectiveData, namespace: Aspose.Slides
  DNISlideShowTransition = interface; // type: Aspose.Slides.ISlideShowTransition, namespace: Aspose.Slides
  DNISlideSize = interface; // type: Aspose.Slides.ISlideSize, namespace: Aspose.Slides
  DNISlideText = interface; // type: Aspose.Slides.ISlideText, namespace: Aspose.Slides
  DNISpreadsheetOptions = interface; // type: Aspose.Slides.ISpreadsheetOptions, namespace: Aspose.Slides
  DNIStreamWrapperFactory = interface; // type: Aspose.Slides.IStreamWrapperFactory, namespace: Aspose.Slides
  DNISvgImage = interface; // type: Aspose.Slides.ISvgImage, namespace: Aspose.Slides
  DNITabFactory = interface; // type: Aspose.Slides.ITabFactory, namespace: Aspose.Slides
  DNITableFormat = interface; // type: Aspose.Slides.ITableFormat, namespace: Aspose.Slides
  DNITextFrameFormat = interface; // type: Aspose.Slides.ITextFrameFormat, namespace: Aspose.Slides
  DNITextFrameFormatEffectiveData = interface; // type: Aspose.Slides.ITextFrameFormatEffectiveData, namespace: Aspose.Slides
  DNITextHighlightingOptions = interface; // type: Aspose.Slides.ITextHighlightingOptions, namespace: Aspose.Slides
  DNITextStyle = interface; // type: Aspose.Slides.ITextStyle, namespace: Aspose.Slides
  DNITextStyleEffectiveData = interface; // type: Aspose.Slides.ITextStyleEffectiveData, namespace: Aspose.Slides
  DNIThreeDParamSource = interface; // type: Aspose.Slides.IThreeDParamSource, namespace: Aspose.Slides
  DNIThreeDFormat = interface; // type: Aspose.Slides.IThreeDFormat, namespace: Aspose.Slides
  DNIThreeDFormatEffectiveData = interface; // type: Aspose.Slides.IThreeDFormatEffectiveData, namespace: Aspose.Slides
  DNIVideo = interface; // type: Aspose.Slides.IVideo, namespace: Aspose.Slides
  DNIViewProperties = interface; // type: Aspose.Slides.IViewProperties, namespace: Aspose.Slides
  DNLayoutSlideCollection = interface; // type: Aspose.Slides.LayoutSlideCollection, namespace: Aspose.Slides
  DNGlobalLayoutSlideCollection = interface; // type: Aspose.Slides.GlobalLayoutSlideCollection, namespace: Aspose.Slides
  DNMasterLayoutSlideCollection = interface; // type: Aspose.Slides.MasterLayoutSlideCollection, namespace: Aspose.Slides
  DNLicense = interface; // type: Aspose.Slides.License, namespace: Aspose.Slides
  DNLoadOptions = interface; // type: Aspose.Slides.LoadOptions, namespace: Aspose.Slides
  DNMasterSlideCollection = interface; // type: Aspose.Slides.MasterSlideCollection, namespace: Aspose.Slides
  DNIMathAccentFactory = interface; // type: Aspose.Slides.MathText.IMathAccentFactory, namespace: Aspose.Slides.MathText
  DNIMathArrayFactory = interface; // type: Aspose.Slides.MathText.IMathArrayFactory, namespace: Aspose.Slides.MathText
  DNIMathBarFactory = interface; // type: Aspose.Slides.MathText.IMathBarFactory, namespace: Aspose.Slides.MathText
  DNIMathBlockFactory = interface; // type: Aspose.Slides.MathText.IMathBlockFactory, namespace: Aspose.Slides.MathText
  DNIMathBorderBoxFactory = interface; // type: Aspose.Slides.MathText.IMathBorderBoxFactory, namespace: Aspose.Slides.MathText
  DNIMathBoxFactory = interface; // type: Aspose.Slides.MathText.IMathBoxFactory, namespace: Aspose.Slides.MathText
  DNIMathDelimiterFactory = interface; // type: Aspose.Slides.MathText.IMathDelimiterFactory, namespace: Aspose.Slides.MathText
  DNIMathElement = interface; // type: Aspose.Slides.MathText.IMathElement, namespace: Aspose.Slides.MathText
  DNIMathAccent = interface; // type: Aspose.Slides.MathText.IMathAccent, namespace: Aspose.Slides.MathText
  DNIMathArray = interface; // type: Aspose.Slides.MathText.IMathArray, namespace: Aspose.Slides.MathText
  DNIMathBar = interface; // type: Aspose.Slides.MathText.IMathBar, namespace: Aspose.Slides.MathText
  DNIMathBorderBox = interface; // type: Aspose.Slides.MathText.IMathBorderBox, namespace: Aspose.Slides.MathText
  DNIMathBox = interface; // type: Aspose.Slides.MathText.IMathBox, namespace: Aspose.Slides.MathText
  DNIMathDelimiter = interface; // type: Aspose.Slides.MathText.IMathDelimiter, namespace: Aspose.Slides.MathText
  DNIMathematicalText = interface; // type: Aspose.Slides.MathText.IMathematicalText, namespace: Aspose.Slides.MathText
  DNIMathFraction = interface; // type: Aspose.Slides.MathText.IMathFraction, namespace: Aspose.Slides.MathText
  DNIMathFunction = interface; // type: Aspose.Slides.MathText.IMathFunction, namespace: Aspose.Slides.MathText
  DNIMathGroupingCharacter = interface; // type: Aspose.Slides.MathText.IMathGroupingCharacter, namespace: Aspose.Slides.MathText
  DNIMathLeftSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.IMathLeftSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNIMathLimit = interface; // type: Aspose.Slides.MathText.IMathLimit, namespace: Aspose.Slides.MathText
  DNIMathMatrix = interface; // type: Aspose.Slides.MathText.IMathMatrix, namespace: Aspose.Slides.MathText
  DNIMathNaryOperator = interface; // type: Aspose.Slides.MathText.IMathNaryOperator, namespace: Aspose.Slides.MathText
  DNIMathRadical = interface; // type: Aspose.Slides.MathText.IMathRadical, namespace: Aspose.Slides.MathText
  DNIMathRightSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.IMathRightSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNIMathSubscriptElement = interface; // type: Aspose.Slides.MathText.IMathSubscriptElement, namespace: Aspose.Slides.MathText
  DNIMathSuperscriptElement = interface; // type: Aspose.Slides.MathText.IMathSuperscriptElement, namespace: Aspose.Slides.MathText
  DNIMathematicalTextFactory = interface; // type: Aspose.Slides.MathText.IMathematicalTextFactory, namespace: Aspose.Slides.MathText
  DNIMathFractionFactory = interface; // type: Aspose.Slides.MathText.IMathFractionFactory, namespace: Aspose.Slides.MathText
  DNIMathFunctionFactory = interface; // type: Aspose.Slides.MathText.IMathFunctionFactory, namespace: Aspose.Slides.MathText
  DNIMathGroupingCharacterFactory = interface; // type: Aspose.Slides.MathText.IMathGroupingCharacterFactory, namespace: Aspose.Slides.MathText
  DNIMathLeftSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathLeftSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNIMathLimitFactory = interface; // type: Aspose.Slides.MathText.IMathLimitFactory, namespace: Aspose.Slides.MathText
  DNIMathMatrixFactory = interface; // type: Aspose.Slides.MathText.IMathMatrixFactory, namespace: Aspose.Slides.MathText
  DNIMathNaryOperatorFactory = interface; // type: Aspose.Slides.MathText.IMathNaryOperatorFactory, namespace: Aspose.Slides.MathText
  DNIMathNaryOperatorProperties = interface; // type: Aspose.Slides.MathText.IMathNaryOperatorProperties, namespace: Aspose.Slides.MathText
  DNIMathParagraphFactory = interface; // type: Aspose.Slides.MathText.IMathParagraphFactory, namespace: Aspose.Slides.MathText
  DNIMathPortion = interface; // type: Aspose.Slides.MathText.IMathPortion, namespace: Aspose.Slides.MathText
  DNIMathRadicalFactory = interface; // type: Aspose.Slides.MathText.IMathRadicalFactory, namespace: Aspose.Slides.MathText
  DNIMathRightSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathRightSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNIMathSubscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathSubscriptElementFactory, namespace: Aspose.Slides.MathText
  DNIMathSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathAccentFactory = interface; // type: Aspose.Slides.MathText.MathAccentFactory, namespace: Aspose.Slides.MathText
  DNMathArrayFactory = interface; // type: Aspose.Slides.MathText.MathArrayFactory, namespace: Aspose.Slides.MathText
  DNMathBarFactory = interface; // type: Aspose.Slides.MathText.MathBarFactory, namespace: Aspose.Slides.MathText
  DNMathBlockFactory = interface; // type: Aspose.Slides.MathText.MathBlockFactory, namespace: Aspose.Slides.MathText
  DNMathBorderBoxFactory = interface; // type: Aspose.Slides.MathText.MathBorderBoxFactory, namespace: Aspose.Slides.MathText
  DNMathBoxFactory = interface; // type: Aspose.Slides.MathText.MathBoxFactory, namespace: Aspose.Slides.MathText
  DNMathDelimiterFactory = interface; // type: Aspose.Slides.MathText.MathDelimiterFactory, namespace: Aspose.Slides.MathText
  DNMathElementBase = interface; // type: Aspose.Slides.MathText.MathElementBase, namespace: Aspose.Slides.MathText
  DNBaseScript = interface; // type: Aspose.Slides.MathText.BaseScript, namespace: Aspose.Slides.MathText
  DNMathLeftSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.MathLeftSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNMathRightSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.MathRightSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNMathSubscriptElement = interface; // type: Aspose.Slides.MathText.MathSubscriptElement, namespace: Aspose.Slides.MathText
  DNMathSuperscriptElement = interface; // type: Aspose.Slides.MathText.MathSuperscriptElement, namespace: Aspose.Slides.MathText
  DNMathAccent = interface; // type: Aspose.Slides.MathText.MathAccent, namespace: Aspose.Slides.MathText
  DNMathArray = interface; // type: Aspose.Slides.MathText.MathArray, namespace: Aspose.Slides.MathText
  DNMathBar = interface; // type: Aspose.Slides.MathText.MathBar, namespace: Aspose.Slides.MathText
  DNMathBlock = interface; // type: Aspose.Slides.MathText.MathBlock, namespace: Aspose.Slides.MathText
  DNMathBorderBox = interface; // type: Aspose.Slides.MathText.MathBorderBox, namespace: Aspose.Slides.MathText
  DNMathBox = interface; // type: Aspose.Slides.MathText.MathBox, namespace: Aspose.Slides.MathText
  DNMathDelimiter = interface; // type: Aspose.Slides.MathText.MathDelimiter, namespace: Aspose.Slides.MathText
  DNMathematicalText = interface; // type: Aspose.Slides.MathText.MathematicalText, namespace: Aspose.Slides.MathText
  DNMathFraction = interface; // type: Aspose.Slides.MathText.MathFraction, namespace: Aspose.Slides.MathText
  DNMathFunction = interface; // type: Aspose.Slides.MathText.MathFunction, namespace: Aspose.Slides.MathText
  DNMathGroupingCharacter = interface; // type: Aspose.Slides.MathText.MathGroupingCharacter, namespace: Aspose.Slides.MathText
  DNMathLimit = interface; // type: Aspose.Slides.MathText.MathLimit, namespace: Aspose.Slides.MathText
  DNMathMatrix = interface; // type: Aspose.Slides.MathText.MathMatrix, namespace: Aspose.Slides.MathText
  DNMathNaryOperator = interface; // type: Aspose.Slides.MathText.MathNaryOperator, namespace: Aspose.Slides.MathText
  DNMathRadical = interface; // type: Aspose.Slides.MathText.MathRadical, namespace: Aspose.Slides.MathText
  DNMathematicalTextFactory = interface; // type: Aspose.Slides.MathText.MathematicalTextFactory, namespace: Aspose.Slides.MathText
  DNMathFractionFactory = interface; // type: Aspose.Slides.MathText.MathFractionFactory, namespace: Aspose.Slides.MathText
  DNMathFunctionFactory = interface; // type: Aspose.Slides.MathText.MathFunctionFactory, namespace: Aspose.Slides.MathText
  DNMathGroupingCharacterFactory = interface; // type: Aspose.Slides.MathText.MathGroupingCharacterFactory, namespace: Aspose.Slides.MathText
  DNMathLeftSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathLeftSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathLimitFactory = interface; // type: Aspose.Slides.MathText.MathLimitFactory, namespace: Aspose.Slides.MathText
  DNMathMatrixFactory = interface; // type: Aspose.Slides.MathText.MathMatrixFactory, namespace: Aspose.Slides.MathText
  DNMathNaryOperatorFactory = interface; // type: Aspose.Slides.MathText.MathNaryOperatorFactory, namespace: Aspose.Slides.MathText
  DNMathParagraph = interface; // type: Aspose.Slides.MathText.MathParagraph, namespace: Aspose.Slides.MathText
  DNMathParagraphFactory = interface; // type: Aspose.Slides.MathText.MathParagraphFactory, namespace: Aspose.Slides.MathText
  DNMathRadicalFactory = interface; // type: Aspose.Slides.MathText.MathRadicalFactory, namespace: Aspose.Slides.MathText
  DNMathRightSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathRightSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathSubscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathSubscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMetered = interface; // type: Aspose.Slides.Metered, namespace: Aspose.Slides
  DNNormalViewProperties = interface; // type: Aspose.Slides.NormalViewProperties, namespace: Aspose.Slides
  DNNormalViewRestoredProperties = interface; // type: Aspose.Slides.NormalViewRestoredProperties, namespace: Aspose.Slides
  DNNotesSize = interface; // type: Aspose.Slides.NotesSize, namespace: Aspose.Slides
  DNNotesSlideManager = interface; // type: Aspose.Slides.NotesSlideManager, namespace: Aspose.Slides
  DNParagraph = interface; // type: Aspose.Slides.Paragraph, namespace: Aspose.Slides
  DNParagraphCollection = interface; // type: Aspose.Slides.ParagraphCollection, namespace: Aspose.Slides
  DNParagraphFactory = interface; // type: Aspose.Slides.ParagraphFactory, namespace: Aspose.Slides
  DNPathSegment = interface; // type: Aspose.Slides.PathSegment, namespace: Aspose.Slides
  DNPlaceholder = interface; // type: Aspose.Slides.Placeholder, namespace: Aspose.Slides
  DNPortion = interface; // type: Aspose.Slides.Portion, namespace: Aspose.Slides
  DNMathPortion = interface; // type: Aspose.Slides.MathText.MathPortion, namespace: Aspose.Slides.MathText
  DNPortionCollection = interface; // type: Aspose.Slides.PortionCollection, namespace: Aspose.Slides
  DNPortionFactory = interface; // type: Aspose.Slides.PortionFactory, namespace: Aspose.Slides
  DNPPImage = interface; // type: Aspose.Slides.PPImage, namespace: Aspose.Slides
  DNPresentation = interface; // type: Aspose.Slides.Presentation, namespace: Aspose.Slides
  DNPresentationFactory = interface; // type: Aspose.Slides.PresentationFactory, namespace: Aspose.Slides
  DNPresentationInfo = interface; // type: Aspose.Slides.PresentationInfo, namespace: Aspose.Slides
  DNPresentationText = interface; // type: Aspose.Slides.PresentationText, namespace: Aspose.Slides
  DNProtectionManager = interface; // type: Aspose.Slides.ProtectionManager, namespace: Aspose.Slides
  DNPVIObject = interface; // type: Aspose.Slides.PVIObject, namespace: Aspose.Slides
  DNBackdrop3DScene = interface; // type: Aspose.Slides.Backdrop3DScene, namespace: Aspose.Slides
  DNBackground = interface; // type: Aspose.Slides.Background, namespace: Aspose.Slides
  DNBasePortionFormat = interface; // type: Aspose.Slides.BasePortionFormat, namespace: Aspose.Slides
  DNChartPortionFormat = interface; // type: Aspose.Slides.Charts.ChartPortionFormat, namespace: Aspose.Slides.Charts
  DNPortionFormat = interface; // type: Aspose.Slides.PortionFormat, namespace: Aspose.Slides
  DNBulletFormat = interface; // type: Aspose.Slides.BulletFormat, namespace: Aspose.Slides
  DNCamera = interface; // type: Aspose.Slides.Camera, namespace: Aspose.Slides
  DNCellFormat = interface; // type: Aspose.Slides.CellFormat, namespace: Aspose.Slides
  DNDataLabelFormat = interface; // type: Aspose.Slides.Charts.DataLabelFormat, namespace: Aspose.Slides.Charts
  DNFormat = interface; // type: Aspose.Slides.Charts.Format, namespace: Aspose.Slides.Charts
  DNColorFormat = interface; // type: Aspose.Slides.ColorFormat, namespace: Aspose.Slides
  DNEffectFormat = interface; // type: Aspose.Slides.EffectFormat, namespace: Aspose.Slides
  DNImageTransformOperation = interface; // type: Aspose.Slides.Effects.ImageTransformOperation, namespace: Aspose.Slides.Effects
  DNAlphaBiLevel = interface; // type: Aspose.Slides.Effects.AlphaBiLevel, namespace: Aspose.Slides.Effects
  DNAlphaCeiling = interface; // type: Aspose.Slides.Effects.AlphaCeiling, namespace: Aspose.Slides.Effects
  DNAlphaFloor = interface; // type: Aspose.Slides.Effects.AlphaFloor, namespace: Aspose.Slides.Effects
  DNAlphaInverse = interface; // type: Aspose.Slides.Effects.AlphaInverse, namespace: Aspose.Slides.Effects
  DNAlphaModulate = interface; // type: Aspose.Slides.Effects.AlphaModulate, namespace: Aspose.Slides.Effects
  DNAlphaModulateFixed = interface; // type: Aspose.Slides.Effects.AlphaModulateFixed, namespace: Aspose.Slides.Effects
  DNAlphaReplace = interface; // type: Aspose.Slides.Effects.AlphaReplace, namespace: Aspose.Slides.Effects
  DNBiLevel = interface; // type: Aspose.Slides.Effects.BiLevel, namespace: Aspose.Slides.Effects
  DNBlur = interface; // type: Aspose.Slides.Effects.Blur, namespace: Aspose.Slides.Effects
  DNColorChange = interface; // type: Aspose.Slides.Effects.ColorChange, namespace: Aspose.Slides.Effects
  DNColorReplace = interface; // type: Aspose.Slides.Effects.ColorReplace, namespace: Aspose.Slides.Effects
  DNDuotone = interface; // type: Aspose.Slides.Effects.Duotone, namespace: Aspose.Slides.Effects
  DNFillOverlay = interface; // type: Aspose.Slides.Effects.FillOverlay, namespace: Aspose.Slides.Effects
  DNGrayScale = interface; // type: Aspose.Slides.Effects.GrayScale, namespace: Aspose.Slides.Effects
  DNHSL = interface; // type: Aspose.Slides.Effects.HSL, namespace: Aspose.Slides.Effects
  DNLuminance = interface; // type: Aspose.Slides.Effects.Luminance, namespace: Aspose.Slides.Effects
  DNTint = interface; // type: Aspose.Slides.Effects.Tint, namespace: Aspose.Slides.Effects
  DNImageTransformOperationCollection = interface; // type: Aspose.Slides.Effects.ImageTransformOperationCollection, namespace: Aspose.Slides.Effects
  DNFillFormat = interface; // type: Aspose.Slides.FillFormat, namespace: Aspose.Slides
  DNGradientFormat = interface; // type: Aspose.Slides.GradientFormat, namespace: Aspose.Slides
  DNGradientStop = interface; // type: Aspose.Slides.GradientStop, namespace: Aspose.Slides
  DNGradientStopCollection = interface; // type: Aspose.Slides.GradientStopCollection, namespace: Aspose.Slides
  DNHyperlink = interface; // type: Aspose.Slides.Hyperlink, namespace: Aspose.Slides
  DNLightRig = interface; // type: Aspose.Slides.LightRig, namespace: Aspose.Slides
  DNLineFillFormat = interface; // type: Aspose.Slides.LineFillFormat, namespace: Aspose.Slides
  DNLineFormat = interface; // type: Aspose.Slides.LineFormat, namespace: Aspose.Slides
  DNParagraphFormat = interface; // type: Aspose.Slides.ParagraphFormat, namespace: Aspose.Slides
  DNPatternFormat = interface; // type: Aspose.Slides.PatternFormat, namespace: Aspose.Slides
  DNPicture = interface; // type: Aspose.Slides.Picture, namespace: Aspose.Slides
  DNPictureFillFormat = interface; // type: Aspose.Slides.PictureFillFormat, namespace: Aspose.Slides
  DNShapeBevel = interface; // type: Aspose.Slides.ShapeBevel, namespace: Aspose.Slides
  DNSketchFormat = interface; // type: Aspose.Slides.SketchFormat, namespace: Aspose.Slides
  DNTab = interface; // type: Aspose.Slides.Tab, namespace: Aspose.Slides
  DNTextFrameFormat = interface; // type: Aspose.Slides.TextFrameFormat, namespace: Aspose.Slides
  DNTextStyle = interface; // type: Aspose.Slides.TextStyle, namespace: Aspose.Slides
  DNThreeDFormat = interface; // type: Aspose.Slides.ThreeDFormat, namespace: Aspose.Slides
  DNRowCollection = interface; // type: Aspose.Slides.RowCollection, namespace: Aspose.Slides
  DNRowFormat = interface; // type: Aspose.Slides.RowFormat, namespace: Aspose.Slides
  DNSection = interface; // type: Aspose.Slides.Section, namespace: Aspose.Slides
  DNSectionCollection = interface; // type: Aspose.Slides.SectionCollection, namespace: Aspose.Slides
  DNSectionSlideCollection = interface; // type: Aspose.Slides.SectionSlideCollection, namespace: Aspose.Slides
  DNShape = interface; // type: Aspose.Slides.Shape, namespace: Aspose.Slides
  DNGeometryShape = interface; // type: Aspose.Slides.GeometryShape, namespace: Aspose.Slides
  DNAutoShape = interface; // type: Aspose.Slides.AutoShape, namespace: Aspose.Slides
  DNConnector = interface; // type: Aspose.Slides.Connector, namespace: Aspose.Slides
  DNPictureFrame = interface; // type: Aspose.Slides.PictureFrame, namespace: Aspose.Slides
  DNAudioFrame = interface; // type: Aspose.Slides.AudioFrame, namespace: Aspose.Slides
  DNVideoFrame = interface; // type: Aspose.Slides.VideoFrame, namespace: Aspose.Slides
  DNSmartArtShape = interface; // type: Aspose.Slides.SmartArt.SmartArtShape, namespace: Aspose.Slides.SmartArt
  DNGraphicalObject = interface; // type: Aspose.Slides.GraphicalObject, namespace: Aspose.Slides
  DNChart = interface; // type: Aspose.Slides.Charts.Chart, namespace: Aspose.Slides.Charts
  DNInk = interface; // type: Aspose.Slides.Ink.Ink, namespace: Aspose.Slides.Ink
  DNLegacyDiagram = interface; // type: Aspose.Slides.LegacyDiagram, namespace: Aspose.Slides
  DNOleObjectFrame = interface; // type: Aspose.Slides.OleObjectFrame, namespace: Aspose.Slides
  DNSmartArt = interface; // type: Aspose.Slides.SmartArt.SmartArt, namespace: Aspose.Slides.SmartArt
  DNTable = interface; // type: Aspose.Slides.Table, namespace: Aspose.Slides
  DNZoomFrame = interface; // type: Aspose.Slides.ZoomFrame, namespace: Aspose.Slides
  DNGroupShape = interface; // type: Aspose.Slides.GroupShape, namespace: Aspose.Slides
  DNShapeCollection = interface; // type: Aspose.Slides.ShapeCollection, namespace: Aspose.Slides
  DNShapeElement = interface; // type: Aspose.Slides.ShapeElement, namespace: Aspose.Slides
  DNShapeFrame = interface; // type: Aspose.Slides.ShapeFrame, namespace: Aspose.Slides
  DNShapeStyle = interface; // type: Aspose.Slides.ShapeStyle, namespace: Aspose.Slides
  DNSlideCollection = interface; // type: Aspose.Slides.SlideCollection, namespace: Aspose.Slides
  DNITransitionValueBase = interface; // type: Aspose.Slides.SlideShow.ITransitionValueBase, namespace: Aspose.Slides.SlideShow
  DNICornerDirectionTransition = interface; // type: Aspose.Slides.SlideShow.ICornerDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNIEightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.IEightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNIEmptyTransition = interface; // type: Aspose.Slides.SlideShow.IEmptyTransition, namespace: Aspose.Slides.SlideShow
  DNIFlyThroughTransition = interface; // type: Aspose.Slides.SlideShow.IFlyThroughTransition, namespace: Aspose.Slides.SlideShow
  DNIGlitterTransition = interface; // type: Aspose.Slides.SlideShow.IGlitterTransition, namespace: Aspose.Slides.SlideShow
  DNIInOutTransition = interface; // type: Aspose.Slides.SlideShow.IInOutTransition, namespace: Aspose.Slides.SlideShow
  DNILeftRightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.ILeftRightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNIMorphTransition = interface; // type: Aspose.Slides.SlideShow.IMorphTransition, namespace: Aspose.Slides.SlideShow
  DNIOptionalBlackTransition = interface; // type: Aspose.Slides.SlideShow.IOptionalBlackTransition, namespace: Aspose.Slides.SlideShow
  DNIOrientationTransition = interface; // type: Aspose.Slides.SlideShow.IOrientationTransition, namespace: Aspose.Slides.SlideShow
  DNIRevealTransition = interface; // type: Aspose.Slides.SlideShow.IRevealTransition, namespace: Aspose.Slides.SlideShow
  DNIRippleTransition = interface; // type: Aspose.Slides.SlideShow.IRippleTransition, namespace: Aspose.Slides.SlideShow
  DNIShredTransition = interface; // type: Aspose.Slides.SlideShow.IShredTransition, namespace: Aspose.Slides.SlideShow
  DNISideDirectionTransition = interface; // type: Aspose.Slides.SlideShow.ISideDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNISplitTransition = interface; // type: Aspose.Slides.SlideShow.ISplitTransition, namespace: Aspose.Slides.SlideShow
  DNIWheelTransition = interface; // type: Aspose.Slides.SlideShow.IWheelTransition, namespace: Aspose.Slides.SlideShow
  DNSlideShowTransition = interface; // type: Aspose.Slides.SlideShow.SlideShowTransition, namespace: Aspose.Slides.SlideShow
  DNTransitionValueBase = interface; // type: Aspose.Slides.SlideShow.TransitionValueBase, namespace: Aspose.Slides.SlideShow
  DNCornerDirectionTransition = interface; // type: Aspose.Slides.SlideShow.CornerDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNEightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.EightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNEmptyTransition = interface; // type: Aspose.Slides.SlideShow.EmptyTransition, namespace: Aspose.Slides.SlideShow
  DNFlyThroughTransition = interface; // type: Aspose.Slides.SlideShow.FlyThroughTransition, namespace: Aspose.Slides.SlideShow
  DNGlitterTransition = interface; // type: Aspose.Slides.SlideShow.GlitterTransition, namespace: Aspose.Slides.SlideShow
  DNInOutTransition = interface; // type: Aspose.Slides.SlideShow.InOutTransition, namespace: Aspose.Slides.SlideShow
  DNLeftRightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.LeftRightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNMorphTransition = interface; // type: Aspose.Slides.SlideShow.MorphTransition, namespace: Aspose.Slides.SlideShow
  DNOptionalBlackTransition = interface; // type: Aspose.Slides.SlideShow.OptionalBlackTransition, namespace: Aspose.Slides.SlideShow
  DNOrientationTransition = interface; // type: Aspose.Slides.SlideShow.OrientationTransition, namespace: Aspose.Slides.SlideShow
  DNRevealTransition = interface; // type: Aspose.Slides.SlideShow.RevealTransition, namespace: Aspose.Slides.SlideShow
  DNRippleTransition = interface; // type: Aspose.Slides.SlideShow.RippleTransition, namespace: Aspose.Slides.SlideShow
  DNShredTransition = interface; // type: Aspose.Slides.SlideShow.ShredTransition, namespace: Aspose.Slides.SlideShow
  DNSideDirectionTransition = interface; // type: Aspose.Slides.SlideShow.SideDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNSplitTransition = interface; // type: Aspose.Slides.SlideShow.SplitTransition, namespace: Aspose.Slides.SlideShow
  DNWheelTransition = interface; // type: Aspose.Slides.SlideShow.WheelTransition, namespace: Aspose.Slides.SlideShow
  DNSlideSize = interface; // type: Aspose.Slides.SlideSize, namespace: Aspose.Slides
  DNISmartArtNode = interface; // type: Aspose.Slides.SmartArt.ISmartArtNode, namespace: Aspose.Slides.SmartArt
  DNSmartArtNode = interface; // type: Aspose.Slides.SmartArt.SmartArtNode, namespace: Aspose.Slides.SmartArt
  DNSmartArtNodeCollection = interface; // type: Aspose.Slides.SmartArt.SmartArtNodeCollection, namespace: Aspose.Slides.SmartArt
  DNSmartArtShapeCollection = interface; // type: Aspose.Slides.SmartArt.SmartArtShapeCollection, namespace: Aspose.Slides.SmartArt
  DNSpreadsheetOptions = interface; // type: Aspose.Slides.SpreadsheetOptions, namespace: Aspose.Slides
  DNStreamWrapper = interface; // type: Aspose.Slides.StreamWrapper, namespace: Aspose.Slides
  DNStreamWrapperFactory = interface; // type: Aspose.Slides.StreamWrapperFactory, namespace: Aspose.Slides
  DNSvgImage = interface; // type: Aspose.Slides.SvgImage, namespace: Aspose.Slides
  DNTabCollection = interface; // type: Aspose.Slides.TabCollection, namespace: Aspose.Slides
  DNTabFactory = interface; // type: Aspose.Slides.TabFactory, namespace: Aspose.Slides
  DNTableFormat = interface; // type: Aspose.Slides.TableFormat, namespace: Aspose.Slides
  DNTagCollection = interface; // type: Aspose.Slides.TagCollection, namespace: Aspose.Slides
  DNTextFrame = interface; // type: Aspose.Slides.TextFrame, namespace: Aspose.Slides
  DNTextHighlightingOptions = interface; // type: Aspose.Slides.TextHighlightingOptions, namespace: Aspose.Slides
  DNBaseThemeManager = interface; // type: Aspose.Slides.Theme.BaseThemeManager, namespace: Aspose.Slides.Theme
  DNBaseOverrideThemeManager = interface; // type: Aspose.Slides.Theme.BaseOverrideThemeManager, namespace: Aspose.Slides.Theme
  DNChartThemeManager = interface; // type: Aspose.Slides.Theme.ChartThemeManager, namespace: Aspose.Slides.Theme
  DNLayoutSlideThemeManager = interface; // type: Aspose.Slides.Theme.LayoutSlideThemeManager, namespace: Aspose.Slides.Theme
  DNNotesSlideThemeManager = interface; // type: Aspose.Slides.Theme.NotesSlideThemeManager, namespace: Aspose.Slides.Theme
  DNSlideThemeManager = interface; // type: Aspose.Slides.Theme.SlideThemeManager, namespace: Aspose.Slides.Theme
  DNMasterThemeManager = interface; // type: Aspose.Slides.Theme.MasterThemeManager, namespace: Aspose.Slides.Theme
  DNColorScheme = interface; // type: Aspose.Slides.Theme.ColorScheme, namespace: Aspose.Slides.Theme
  DNEffectStyle = interface; // type: Aspose.Slides.Theme.EffectStyle, namespace: Aspose.Slides.Theme
  DNEffectStyleCollection = interface; // type: Aspose.Slides.Theme.EffectStyleCollection, namespace: Aspose.Slides.Theme
  DNExtraColorScheme = interface; // type: Aspose.Slides.Theme.ExtraColorScheme, namespace: Aspose.Slides.Theme
  DNExtraColorSchemeCollection = interface; // type: Aspose.Slides.Theme.ExtraColorSchemeCollection, namespace: Aspose.Slides.Theme
  DNFillFormatCollection = interface; // type: Aspose.Slides.Theme.FillFormatCollection, namespace: Aspose.Slides.Theme
  DNFontScheme = interface; // type: Aspose.Slides.Theme.FontScheme, namespace: Aspose.Slides.Theme
  DNFormatScheme = interface; // type: Aspose.Slides.Theme.FormatScheme, namespace: Aspose.Slides.Theme
  DNIColorSchemeEffectiveData = interface; // type: Aspose.Slides.Theme.IColorSchemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIEffectStyle = interface; // type: Aspose.Slides.Theme.IEffectStyle, namespace: Aspose.Slides.Theme
  DNIEffectStyleEffectiveData = interface; // type: Aspose.Slides.Theme.IEffectStyleEffectiveData, namespace: Aspose.Slides.Theme
  DNIExtraColorScheme = interface; // type: Aspose.Slides.Theme.IExtraColorScheme, namespace: Aspose.Slides.Theme
  DNIFontScheme = interface; // type: Aspose.Slides.Theme.IFontScheme, namespace: Aspose.Slides.Theme
  DNIFontSchemeEffectiveData = interface; // type: Aspose.Slides.Theme.IFontSchemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIFormatSchemeEffectiveData = interface; // type: Aspose.Slides.Theme.IFormatSchemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIThemeEffectiveData = interface; // type: Aspose.Slides.Theme.IThemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIThemeManager = interface; // type: Aspose.Slides.Theme.IThemeManager, namespace: Aspose.Slides.Theme
  DNIMasterThemeManager = interface; // type: Aspose.Slides.Theme.IMasterThemeManager, namespace: Aspose.Slides.Theme
  DNIOverrideThemeManager = interface; // type: Aspose.Slides.Theme.IOverrideThemeManager, namespace: Aspose.Slides.Theme
  DNLineFormatCollection = interface; // type: Aspose.Slides.Theme.LineFormatCollection, namespace: Aspose.Slides.Theme
  DNTheme = interface; // type: Aspose.Slides.Theme.Theme, namespace: Aspose.Slides.Theme
  DNMasterTheme = interface; // type: Aspose.Slides.Theme.MasterTheme, namespace: Aspose.Slides.Theme
  DNOverrideTheme = interface; // type: Aspose.Slides.Theme.OverrideTheme, namespace: Aspose.Slides.Theme
  DNShapeUtil = interface; // type: Aspose.Slides.Util.ShapeUtil, namespace: Aspose.Slides.Util
  DNSlideUtil = interface; // type: Aspose.Slides.Util.SlideUtil, namespace: Aspose.Slides.Util
  DNIVbaModule = interface; // type: Aspose.Slides.Vba.IVbaModule, namespace: Aspose.Slides.Vba
  DNIVbaProject = interface; // type: Aspose.Slides.Vba.IVbaProject, namespace: Aspose.Slides.Vba
  DNIVbaProjectFactory = interface; // type: Aspose.Slides.Vba.IVbaProjectFactory, namespace: Aspose.Slides.Vba
  DNIVbaReference = interface; // type: Aspose.Slides.Vba.IVbaReference, namespace: Aspose.Slides.Vba
  DNIVbaReferenceOleTwiddledTypeLib = interface; // type: Aspose.Slides.Vba.IVbaReferenceOleTwiddledTypeLib, namespace: Aspose.Slides.Vba
  DNIVbaReferenceOleTypeLib = interface; // type: Aspose.Slides.Vba.IVbaReferenceOleTypeLib, namespace: Aspose.Slides.Vba
  DNIVbaReferenceProject = interface; // type: Aspose.Slides.Vba.IVbaReferenceProject, namespace: Aspose.Slides.Vba
  DNIVbaReferenceFactory = interface; // type: Aspose.Slides.Vba.IVbaReferenceFactory, namespace: Aspose.Slides.Vba
  DNVbaModule = interface; // type: Aspose.Slides.Vba.VbaModule, namespace: Aspose.Slides.Vba
  DNVbaModuleCollection = interface; // type: Aspose.Slides.Vba.VbaModuleCollection, namespace: Aspose.Slides.Vba
  DNVbaProject = interface; // type: Aspose.Slides.Vba.VbaProject, namespace: Aspose.Slides.Vba
  DNVbaProjectFactory = interface; // type: Aspose.Slides.Vba.VbaProjectFactory, namespace: Aspose.Slides.Vba
  DNVbaReferenceCollection = interface; // type: Aspose.Slides.Vba.VbaReferenceCollection, namespace: Aspose.Slides.Vba
  DNVbaReferenceFactory = interface; // type: Aspose.Slides.Vba.VbaReferenceFactory, namespace: Aspose.Slides.Vba
  DNVbaReferenceOleTypeLib = interface; // type: Aspose.Slides.Vba.VbaReferenceOleTypeLib, namespace: Aspose.Slides.Vba
  DNVideo = interface; // type: Aspose.Slides.Video, namespace: Aspose.Slides
  DNVideoCollection = interface; // type: Aspose.Slides.VideoCollection, namespace: Aspose.Slides
  DNViewProperties = interface; // type: Aspose.Slides.ViewProperties, namespace: Aspose.Slides
  DNIWarningCallback = interface; // type: Aspose.Slides.Warnings.IWarningCallback, namespace: Aspose.Slides.Warnings
  DNIWarningInfo = interface; // type: Aspose.Slides.Warnings.IWarningInfo, namespace: Aspose.Slides.Warnings
  DNIKnownIssueWarningInfo = interface; // type: Aspose.Slides.Warnings.IKnownIssueWarningInfo, namespace: Aspose.Slides.Warnings
  DNINotImplementedWarningInfo = interface; // type: Aspose.Slides.Warnings.INotImplementedWarningInfo, namespace: Aspose.Slides.Warnings
  DNIObsoletePresLockingBehaviorWarningInfo = interface; // type: Aspose.Slides.Warnings.IObsoletePresLockingBehaviorWarningInfo, namespace: Aspose.Slides.Warnings
  DNIPresentationSignedWarningInfo = interface; // type: Aspose.Slides.Warnings.IPresentationSignedWarningInfo, namespace: Aspose.Slides.Warnings
  DNIBehaviorCollection = interface; // type: Aspose.Slides.Animation.IBehaviorCollection, namespace: Aspose.Slides.Animation
  DNIBehaviorPropertyCollection = interface; // type: Aspose.Slides.Animation.IBehaviorPropertyCollection, namespace: Aspose.Slides.Animation
  DNIMotionPath = interface; // type: Aspose.Slides.Animation.IMotionPath, namespace: Aspose.Slides.Animation
  DNIPointCollection = interface; // type: Aspose.Slides.Animation.IPointCollection, namespace: Aspose.Slides.Animation
  DNISequence = interface; // type: Aspose.Slides.Animation.ISequence, namespace: Aspose.Slides.Animation
  DNISequenceCollection = interface; // type: Aspose.Slides.Animation.ISequenceCollection, namespace: Aspose.Slides.Animation
  DNIChartCellCollection = interface; // type: Aspose.Slides.Charts.IChartCellCollection, namespace: Aspose.Slides.Charts
  DNIDataLabelCollection = interface; // type: Aspose.Slides.Charts.IDataLabelCollection, namespace: Aspose.Slides.Charts
  DNIPieSplitCustomPointCollection = interface; // type: Aspose.Slides.Charts.IPieSplitCustomPointCollection, namespace: Aspose.Slides.Charts
  DNITrendlineCollection = interface; // type: Aspose.Slides.Charts.ITrendlineCollection, namespace: Aspose.Slides.Charts
  DNIImageTransformOperationCollection = interface; // type: Aspose.Slides.Effects.IImageTransformOperationCollection, namespace: Aspose.Slides.Effects
  DNIControlPropertiesCollection = interface; // type: Aspose.Slides.IControlPropertiesCollection, namespace: Aspose.Slides
  DNIPortionCollection = interface; // type: Aspose.Slides.IPortionCollection, namespace: Aspose.Slides
  DNIMathBlock = interface; // type: Aspose.Slides.MathText.IMathBlock, namespace: Aspose.Slides.MathText
  DNIMathBlockCollection = interface; // type: Aspose.Slides.MathText.IMathBlockCollection, namespace: Aspose.Slides.MathText
  DNIMathElementCollection = interface; // type: Aspose.Slides.MathText.IMathElementCollection, namespace: Aspose.Slides.MathText
  DNIMathParagraph = interface; // type: Aspose.Slides.MathText.IMathParagraph, namespace: Aspose.Slides.MathText
  DNIChartSeriesCollection = interface; // type: Aspose.Slides.Charts.IChartSeriesCollection, namespace: Aspose.Slides.Charts
  DNIChartSeriesReadonlyCollection = interface; // type: Aspose.Slides.Charts.IChartSeriesReadonlyCollection, namespace: Aspose.Slides.Charts
  DNIParagraphCollection = interface; // type: Aspose.Slides.IParagraphCollection, namespace: Aspose.Slides
  DNITextAnimationCollection = interface; // type: Aspose.Slides.Animation.ITextAnimationCollection, namespace: Aspose.Slides.Animation
  DNIChartCategoryCollection = interface; // type: Aspose.Slides.Charts.IChartCategoryCollection, namespace: Aspose.Slides.Charts
  DNIChartDataPointCollection = interface; // type: Aspose.Slides.Charts.IChartDataPointCollection, namespace: Aspose.Slides.Charts
  DNIChartSeriesGroupCollection = interface; // type: Aspose.Slides.Charts.IChartSeriesGroupCollection, namespace: Aspose.Slides.Charts
  DNIImageTransformOCollectionEffectiveData = interface; // type: Aspose.Slides.Effects.IImageTransformOCollectionEffectiveData, namespace: Aspose.Slides.Effects
  DNIAdjustValueCollection = interface; // type: Aspose.Slides.IAdjustValueCollection, namespace: Aspose.Slides
  DNIAudioCollection = interface; // type: Aspose.Slides.IAudioCollection, namespace: Aspose.Slides
  DNICellCollection = interface; // type: Aspose.Slides.ICellCollection, namespace: Aspose.Slides
  DNIColorOperationCollection = interface; // type: Aspose.Slides.IColorOperationCollection, namespace: Aspose.Slides
  DNIColumn = interface; // type: Aspose.Slides.IColumn, namespace: Aspose.Slides
  DNIColumnCollection = interface; // type: Aspose.Slides.IColumnCollection, namespace: Aspose.Slides
  DNICommentAuthorCollection = interface; // type: Aspose.Slides.ICommentAuthorCollection, namespace: Aspose.Slides
  DNICommentCollection = interface; // type: Aspose.Slides.ICommentCollection, namespace: Aspose.Slides
  DNIControlCollection = interface; // type: Aspose.Slides.IControlCollection, namespace: Aspose.Slides
  DNICustomXmlPartCollection = interface; // type: Aspose.Slides.ICustomXmlPartCollection, namespace: Aspose.Slides
  DNIDigitalSignatureCollection = interface; // type: Aspose.Slides.IDigitalSignatureCollection, namespace: Aspose.Slides
  DNIFontFallBackRulesCollection = interface; // type: Aspose.Slides.IFontFallBackRulesCollection, namespace: Aspose.Slides
  DNIFontSubstRuleCollection = interface; // type: Aspose.Slides.IFontSubstRuleCollection, namespace: Aspose.Slides
  DNIGenericCollection<T> = interface; // type: Aspose.Slides.IGenericCollection`1, namespace: Aspose.Slides
  DNIGlobalLayoutSlideCollection = interface; // type: Aspose.Slides.IGlobalLayoutSlideCollection, namespace: Aspose.Slides
  DNIGradientStopCollection = interface; // type: Aspose.Slides.IGradientStopCollection, namespace: Aspose.Slides
  DNIGradientStopCollectionEffectiveData = interface; // type: Aspose.Slides.IGradientStopCollectionEffectiveData, namespace: Aspose.Slides
  DNIImageCollection = interface; // type: Aspose.Slides.IImageCollection, namespace: Aspose.Slides
  DNILayoutSlideCollection = interface; // type: Aspose.Slides.ILayoutSlideCollection, namespace: Aspose.Slides
  DNIMasterLayoutSlideCollection = interface; // type: Aspose.Slides.IMasterLayoutSlideCollection, namespace: Aspose.Slides
  DNIMasterSlideCollection = interface; // type: Aspose.Slides.IMasterSlideCollection, namespace: Aspose.Slides
  DNIRow = interface; // type: Aspose.Slides.IRow, namespace: Aspose.Slides
  DNIRowCollection = interface; // type: Aspose.Slides.IRowCollection, namespace: Aspose.Slides
  DNISectionCollection = interface; // type: Aspose.Slides.ISectionCollection, namespace: Aspose.Slides
  DNISectionSlideCollection = interface; // type: Aspose.Slides.ISectionSlideCollection, namespace: Aspose.Slides
  DNIShapeCollection = interface; // type: Aspose.Slides.IShapeCollection, namespace: Aspose.Slides
  DNISlideCollection = interface; // type: Aspose.Slides.ISlideCollection, namespace: Aspose.Slides
  DNITabCollection = interface; // type: Aspose.Slides.ITabCollection, namespace: Aspose.Slides
  DNITagCollection = interface; // type: Aspose.Slides.ITagCollection, namespace: Aspose.Slides
  DNIVideoCollection = interface; // type: Aspose.Slides.IVideoCollection, namespace: Aspose.Slides
  DNISmartArtNodeCollection = interface; // type: Aspose.Slides.SmartArt.ISmartArtNodeCollection, namespace: Aspose.Slides.SmartArt
  DNISmartArtShapeCollection = interface; // type: Aspose.Slides.SmartArt.ISmartArtShapeCollection, namespace: Aspose.Slides.SmartArt
  DNIEffectStyleCollection = interface; // type: Aspose.Slides.Theme.IEffectStyleCollection, namespace: Aspose.Slides.Theme
  DNIEffectStyleCollectionEffectiveData = interface; // type: Aspose.Slides.Theme.IEffectStyleCollectionEffectiveData, namespace: Aspose.Slides.Theme
  DNIExtraColorSchemeCollection = interface; // type: Aspose.Slides.Theme.IExtraColorSchemeCollection, namespace: Aspose.Slides.Theme
  DNIFillFormatCollection = interface; // type: Aspose.Slides.Theme.IFillFormatCollection, namespace: Aspose.Slides.Theme
  DNIFillFormatCollectionEffectiveData = interface; // type: Aspose.Slides.Theme.IFillFormatCollectionEffectiveData, namespace: Aspose.Slides.Theme
  DNILineFormatCollection = interface; // type: Aspose.Slides.Theme.ILineFormatCollection, namespace: Aspose.Slides.Theme
  DNILineFormatCollectionEffectiveData = interface; // type: Aspose.Slides.Theme.ILineFormatCollectionEffectiveData, namespace: Aspose.Slides.Theme
  DNIVbaModuleCollection = interface; // type: Aspose.Slides.Vba.IVbaModuleCollection, namespace: Aspose.Slides.Vba
  DNIVbaReferenceCollection = interface; // type: Aspose.Slides.Vba.IVbaReferenceCollection, namespace: Aspose.Slides.Vba
  DNInvalidPasswordException = interface; // type: Aspose.Slides.InvalidPasswordException, namespace: Aspose.Slides
  DNOdpException = interface; // type: Aspose.Slides.OdpException, namespace: Aspose.Slides
  DNOdpReadException = interface; // type: Aspose.Slides.OdpReadException, namespace: Aspose.Slides
  DNOOXMLException = interface; // type: Aspose.Slides.OOXMLException, namespace: Aspose.Slides
  DNOOXMLCorruptFileException = interface; // type: Aspose.Slides.OOXMLCorruptFileException, namespace: Aspose.Slides
  DNPptxException = interface; // type: Aspose.Slides.PptxException, namespace: Aspose.Slides
  DNPptxEditException = interface; // type: Aspose.Slides.PptxEditException, namespace: Aspose.Slides
  DNCellCircularReferenceException = interface; // type: Aspose.Slides.Spreadsheet.CellCircularReferenceException, namespace: Aspose.Slides.Spreadsheet
  DNCellInvalidFormulaException = interface; // type: Aspose.Slides.Spreadsheet.CellInvalidFormulaException, namespace: Aspose.Slides.Spreadsheet
  DNCellInvalidReferenceException = interface; // type: Aspose.Slides.Spreadsheet.CellInvalidReferenceException, namespace: Aspose.Slides.Spreadsheet
  DNCellUnsupportedDataException = interface; // type: Aspose.Slides.Spreadsheet.CellUnsupportedDataException, namespace: Aspose.Slides.Spreadsheet
  DNPptxReadException = interface; // type: Aspose.Slides.PptxReadException, namespace: Aspose.Slides
  DNPptxCorruptFileException = interface; // type: Aspose.Slides.PptxCorruptFileException, namespace: Aspose.Slides
  DNPptxUnsupportedFormatException = interface; // type: Aspose.Slides.PptxUnsupportedFormatException, namespace: Aspose.Slides
  DNPptException = interface; // type: Aspose.Slides.PptException, namespace: Aspose.Slides
  DNPptEditException = interface; // type: Aspose.Slides.PptEditException, namespace: Aspose.Slides
  DNPptReadException = interface; // type: Aspose.Slides.PptReadException, namespace: Aspose.Slides
  DNPptCorruptFileException = interface; // type: Aspose.Slides.PptCorruptFileException, namespace: Aspose.Slides
  DNPptUnsupportedFormatException = interface; // type: Aspose.Slides.PptUnsupportedFormatException, namespace: Aspose.Slides
  DNAxesCompositionNotCombinableException = interface; // type: Aspose.Slides.Charts.AxesCompositionNotCombinableException, namespace: Aspose.Slides.Charts
  DNCannotCombine2DAnd3DChartsException = interface; // type: Aspose.Slides.Charts.CannotCombine2DAnd3DChartsException, namespace: Aspose.Slides.Charts
  DNIGenericCloneable<T> = interface; // type: Aspose.Slides.IGenericCloneable`1, namespace: Aspose.Slides
  DNIShapeFrame = interface; // type: Aspose.Slides.IShapeFrame, namespace: Aspose.Slides
  DNITab = interface; // type: Aspose.Slides.ITab, namespace: Aspose.Slides
  DNITabEffectiveData = interface; // type: Aspose.Slides.ITabEffectiveData, namespace: Aspose.Slides
  DNIImageWrapper = interface; // type: Aspose.Slides.IImageWrapper, namespace: Aspose.Slides
  DNIPresentation = interface; // type: Aspose.Slides.IPresentation, namespace: Aspose.Slides
  DNIStreamWrapper = interface; // type: Aspose.Slides.IStreamWrapper, namespace: Aspose.Slides


{ objects }

  //-------------namespace: Aspose.Slides----------------
  DNAdjustValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A26195D9-E782-52BF-B7A4-226A75F08AAD}']
  end;

  ///<summary>
  ///  Represents a geometry shape's adjustment value.
  ///  These values affect shape's form.
  ///</summary>
  [DNTypeName('Aspose.Slides.AdjustValue')]
  DNAdjustValue = interface(DDN.mscorlib.DNObject)
  ['{64CA3736-4574-37B6-ACBA-46F9C3D370ED}']
  { getters & setters } 

    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);
    function get_AngleValue: Single;
    procedure set_AngleValue(value: Single);
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets ajustment value "as is".
    ///  Read/write <see cref="T:System.Int64" />
    ///  .
    ///</summary>
    property RawValue: Int64 read get_RawValue write set_RawValue;
    ///<summary>
    ///  Returns or sets value, interpreting it as angle in degrees.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property AngleValue: Single read get_AngleValue write set_AngleValue;
    ///<summary>
    ///  Returns a name of this adjustment value.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
  end;

  TDNAdjustValue = class(TDNGenericImport<DNAdjustValueClass, DNAdjustValue>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAdjustValueCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0EE3A7EB-C155-5BD0-B0FF-FD97898B3C5F}']
  end;

  ///<summary>
  ///  Reprasents a collection of shape's adjustments.
  ///</summary>
  [DNTypeName('Aspose.Slides.AdjustValueCollection')]
  DNAdjustValueCollection = interface(DDN.mscorlib.DNObject)
  ['{FB3DB5BA-0C7D-3CBA-9025-E519BBC0A85E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Return a number of adjustments.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNAdjustValueCollection = class(TDNGenericImport<DNAdjustValueCollectionClass, DNAdjustValueCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNAnimationTimeLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28736BC0-FD72-5229-A44D-E39DA16980F1}']
  end;

  ///<summary>
  ///  Represents timeline of animation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.AnimationTimeLine')]
  DNAnimationTimeLine = interface(DDN.mscorlib.DNObject)
  ['{240FBC72-C65D-3C7D-99D6-1BBE2ACC8884}']
  { getters & setters } 

    function get_InteractiveSequences: DNISequenceCollection;
    function get_MainSequence: DNISequence;
    function get_TextAnimationCollection: DNITextAnimationCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns collection of interactive sequences.
    ///  This sequences may contain only effects by "click on shape" with specifies target shape.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ISequenceCollection" />
    ///  .
    ///</summary>
    property InteractiveSequences: DNISequenceCollection read get_InteractiveSequences;
    ///<summary>
    ///  Returns main sequence which may contain only main effects collection.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ISequence" />
    ///  .
    ///</summary>
    property MainSequence: DNISequence read get_MainSequence;
    ///<summary>
    ///  Returns collection of text animations.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ITextAnimationCollection" />
    ///  .
    ///</summary>
    property TextAnimationCollection: DNITextAnimationCollection read get_TextAnimationCollection;
  end;

  TDNAnimationTimeLine = class(TDNGenericImport<DNAnimationTimeLineClass, DNAnimationTimeLine>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6277071D-8AF8-5924-AB64-C120D291F876}']
  end;

  ///<summary>
  ///  Represent base class behavior of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.Behavior')]
  DNBehavior = interface(DDN.mscorlib.DNObject)
  ['{5C788F14-505F-3470-B0B4-82AF23664577}']
  { getters & setters } 

    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNBehavior = class(TDNGenericImport<DNBehaviorClass, DNBehavior>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNColorEffectClass = interface(DNBehaviorClass)
  ['{912B68AF-A382-505E-984C-008090060A58}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    {class} function init: DNColorEffect;

  end;

  ///<summary>
  ///  Represents a color effect for an animation behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ColorEffect')]
  DNColorEffect = interface(DNBehavior)
  ['{252D8725-1F81-4507-B866-5EC798290221}']
  { getters & setters } 

    function get_From: DNIColorFormat;
    procedure set_From(value: DNIColorFormat);
    function get_To: DNIColorFormat;
    procedure set_To(value: DNIColorFormat);
    function get_By: DNIColorOffset;
    procedure set_By(value: DNIColorOffset);
    function get_ColorSpace: DNColorSpace;
    procedure set_ColorSpace(value: DNColorSpace);
    function get_Direction: DNColorDirection;
    procedure set_Direction(value: DNColorDirection);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This value is used to specify the starting color of behavior.
    ///  Read/write <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property From: DNIColorFormat read get_From write set_From;
    ///<summary>
    ///  Describes resulting color for the animation color change.
    ///  Read/write <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property &To: DNIColorFormat read get_To write set_To;
    ///<summary>
    ///  Describes the relative offset value for the color animation.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IColorOffset" />
    ///  .
    ///</summary>
    property By: DNIColorOffset read get_By write set_By;
    ///<summary>
    ///  Represent color space of behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ColorSpace" />
    ///  .
    ///</summary>
    property ColorSpace: DNColorSpace read get_ColorSpace write set_ColorSpace;
    ///<summary>
    ///  Specifies which direction to cycle the hue around the color wheel.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ColorDirection" />
    ///  .
    ///</summary>
    property Direction: DNColorDirection read get_Direction write set_Direction;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNColorEffect = class(TDNGenericImport<DNColorEffectClass, DNColorEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNCommandEffectClass = interface(DNBehaviorClass)
  ['{1B905149-6BA8-564F-8EC9-B081F881D838}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    {class} function init: DNCommandEffect;

  end;

  ///<summary>
  ///  Represents a command effect for an animation behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.CommandEffect')]
  DNCommandEffect = interface(DNBehavior)
  ['{E1E881A2-1C86-4BA4-B201-5145DC1F7D05}']
  { getters & setters } 

    function get_Type: DNCommandEffectType;
    procedure set_Type(value: DNCommandEffectType);
    function get_CommandString: string;
    procedure set_CommandString(value: string);
    function get_ShapeTarget: DNIShape;
    procedure set_ShapeTarget(value: DNIShape);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Defines command effect type of behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.CommandEffectType" />
    ///  .
    ///</summary>
    property &Type: DNCommandEffectType read get_Type write set_Type;
    ///<summary>
    ///  Defines command string.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property CommandString: string read get_CommandString write set_CommandString;
    ///<summary>
    ///  Defines shape target of command effect.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    property ShapeTarget: DNIShape read get_ShapeTarget write set_ShapeTarget;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNCommandEffect = class(TDNGenericImport<DNCommandEffectClass, DNCommandEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNFilterEffectClass = interface(DNBehaviorClass)
  ['{140B7064-8388-5486-AE4A-F7A1A84E2D99}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNFilterEffect;

  end;

  ///<summary>
  ///  Represent filter effect of behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.FilterEffect')]
  DNFilterEffect = interface(DNBehavior)
  ['{DD102C99-F6E5-440B-A9E9-978BBAFF6724}']
  { getters & setters } 

    function get_Reveal: DNFilterEffectRevealType;
    procedure set_Reveal(value: DNFilterEffectRevealType);
    function get_Type: DNFilterEffectType;
    procedure set_Type(value: DNFilterEffectType);
    function get_Subtype: DNFilterEffectSubtype;
    procedure set_Subtype(value: DNFilterEffectSubtype);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents that effect with behavior must reveal (in/out)
    ///  Read/write <see cref="T:Aspose.Slides.Animation.FilterEffectRevealType" />
    ///  .
    ///</summary>
    property Reveal: DNFilterEffectRevealType read get_Reveal write set_Reveal;
    ///<summary>
    ///  Represents type of filter effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.FilterEffectType" />
    ///  .
    ///</summary>
    property &Type: DNFilterEffectType read get_Type write set_Type;
    ///<summary>
    ///  Represents subtype of filter effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.FilterEffectSubtype" />
    ///  .
    ///</summary>
    property Subtype: DNFilterEffectSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNFilterEffect = class(TDNGenericImport<DNFilterEffectClass, DNFilterEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNMotionEffectClass = interface(DNBehaviorClass)
  ['{02B7BA0E-12ED-56B9-A6D8-71A6BA976092}']
  { constructors } 

    {class} function init: DNMotionEffect;

  end;

  ///<summary>
  ///  Represent motion effect behavior of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionEffect')]
  DNMotionEffect = interface(DNBehavior)
  ['{3F39AAD1-65AD-4B2D-8584-E836994C7389}']
  { getters & setters } 

    function get_From: DDN.Aspose.Common.DNPointF;
    procedure set_From(value: DDN.Aspose.Common.DNPointF);
    function get_To: DDN.Aspose.Common.DNPointF;
    procedure set_To(value: DDN.Aspose.Common.DNPointF);
    function get_By: DDN.Aspose.Common.DNPointF;
    procedure set_By(value: DDN.Aspose.Common.DNPointF);
    function get_RotationCenter: DDN.Aspose.Common.DNPointF;
    procedure set_RotationCenter(value: DDN.Aspose.Common.DNPointF);
    function get_Origin: DNMotionOriginType;
    procedure set_Origin(value: DNMotionOriginType);
    function get_Path: DNIMotionPath;
    procedure set_Path(value: DNIMotionPath);
    function get_PathEditMode: DNMotionPathEditMode;
    procedure set_PathEditMode(value: DNMotionPathEditMode);
    function get_Angle: Single;
    procedure set_Angle(value: Single);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies an x/y co-ordinate to start the animation from (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property From: DDN.Aspose.Common.DNPointF read get_From write set_From;
    ///<summary>
    ///  Specifies the target location for an animation motion effect (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property &To: DDN.Aspose.Common.DNPointF read get_To write set_To;
    ///<summary>
    ///  Describes the relative offset value for the animation (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property By: DDN.Aspose.Common.DNPointF read get_By write set_By;
    ///<summary>
    ///  Describes the center of the rotation used to rotate a motion path by X angle.
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property RotationCenter: DDN.Aspose.Common.DNPointF read get_RotationCenter write set_RotationCenter;
    ///<summary>
    ///  Specifies what the origin of the motion path is relative to such as the layout of the slide,
    ///  or the parent.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionOriginType" />
    ///  .
    ///</summary>
    property Origin: DNMotionOriginType read get_Origin write set_Origin;
    ///<summary>
    ///  Specifies the path primitive followed by coordinates for the animation motion.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IMotionPath" />
    ///  .
    ///</summary>
    property Path: DNIMotionPath read get_Path write set_Path;
    ///<summary>
    ///  Specifies how the motion path moves when shape is moved.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionPathEditMode" />
    ///  .
    ///</summary>
    property PathEditMode: DNMotionPathEditMode read get_PathEditMode write set_PathEditMode;
    ///<summary>
    ///  Describes the relative angle of the motion path.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Angle: Single read get_Angle write set_Angle;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNMotionEffect = class(TDNGenericImport<DNMotionEffectClass, DNMotionEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNPropertyEffectClass = interface(DNBehaviorClass)
  ['{E1D24442-9E76-5969-BD44-B658B95F7F87}']
  { constructors } 

    {class} function init: DNPropertyEffect;

  end;

  ///<summary>
  ///  Represent property effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.PropertyEffect')]
  DNPropertyEffect = interface(DNBehavior)
  ['{FF69F8CD-F5E3-4B0C-9012-653F93890460}']
  { getters & setters } 

    function get_From: string;
    procedure set_From(value: string);
    function get_To: string;
    procedure set_To(value: string);
    function get_By: string;
    procedure set_By(value: string);
    function get_ValueType: DNPropertyValueType;
    procedure set_ValueType(value: DNPropertyValueType);
    function get_CalcMode: DNPropertyCalcModeType;
    procedure set_CalcMode(value: DNPropertyCalcModeType);
    function get_Points: DNIPointCollection;
    procedure set_Points(value: DNIPointCollection);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the starting value of the animation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property From: string read get_From write set_From;
    ///<summary>
    ///  Specifies the ending value for the animation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property &To: string read get_To write set_To;
    ///<summary>
    ///  Specifies a relative offset value for the animation with respect to its
    ///  position before the start of the animation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property By: string read get_By write set_By;
    ///<summary>
    ///  Specifies the type of a property value.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.PropertyValueType" />
    ///  .
    ///</summary>
    property ValueType: DNPropertyValueType read get_ValueType write set_ValueType;
    ///<summary>
    ///  Specifies the interpolation mode for the animation
    ///  Read/write <see cref="T:Aspose.Slides.Animation.PropertyCalcModeType" />
    ///  .
    ///</summary>
    property CalcMode: DNPropertyCalcModeType read get_CalcMode write set_CalcMode;
    ///<summary>
    ///  Specifies the points of the animation.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IPointCollection" />
    ///  .
    ///</summary>
    property Points: DNIPointCollection read get_Points write set_Points;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNPropertyEffect = class(TDNGenericImport<DNPropertyEffectClass, DNPropertyEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNRotationEffectClass = interface(DNBehaviorClass)
  ['{51F23571-F61B-5787-8527-90A256B0903A}']
  { constructors } 

    {class} function init: DNRotationEffect;

  end;

  ///<summary>
  ///  Represent rotation behavior of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.RotationEffect')]
  DNRotationEffect = interface(DNBehavior)
  ['{83C5425F-6F22-41A2-B8C9-95A46C00162F}']
  { getters & setters } 

    function get_From: Single;
    procedure set_From(value: Single);
    function get_To: Single;
    procedure set_To(value: Single);
    function get_By: Single;
    procedure set_By(value: Single);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Describes the starting value for the animation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property From: Single read get_From write set_From;
    ///<summary>
    ///  Describes the ending value for the animation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property &To: Single read get_To write set_To;
    ///<summary>
    ///  Describes the relative offset value for the animation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property By: Single read get_By write set_By;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNRotationEffect = class(TDNGenericImport<DNRotationEffectClass, DNRotationEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNScaleEffectClass = interface(DNBehaviorClass)
  ['{9AB9B7F6-7A34-5329-97CC-5A46E397F4C9}']
  { constructors } 

    {class} function init: DNScaleEffect;

  end;

  ///<summary>
  ///  Represents animation scale effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ScaleEffect')]
  DNScaleEffect = interface(DNBehavior)
  ['{F38C5F58-D358-4903-A1D2-6A4D7DCA9697}']
  { getters & setters } 

    function get_ZoomContent: DNNullableBool;
    procedure set_ZoomContent(value: DNNullableBool);
    function get_From: DDN.Aspose.Common.DNPointF;
    procedure set_From(value: DDN.Aspose.Common.DNPointF);
    function get_To: DDN.Aspose.Common.DNPointF;
    procedure set_To(value: DDN.Aspose.Common.DNPointF);
    function get_By: DDN.Aspose.Common.DNPointF;
    procedure set_By(value: DDN.Aspose.Common.DNPointF);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether a content should be zoomed.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ZoomContent: DNNullableBool read get_ZoomContent write set_ZoomContent;
    ///<summary>
    ///  Specifies an x/y co-ordinate to start the animation from (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property From: DDN.Aspose.Common.DNPointF read get_From write set_From;
    ///<summary>
    ///  Specifies the target location for an animation scale effect (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property &To: DDN.Aspose.Common.DNPointF read get_To write set_To;
    ///<summary>
    ///  describes the relative offset value for the animation (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property By: DDN.Aspose.Common.DNPointF read get_By write set_By;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNScaleEffect = class(TDNGenericImport<DNScaleEffectClass, DNScaleEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNSetEffectClass = interface(DNBehaviorClass)
  ['{53765956-3977-5A63-9C9E-97246989A74B}']
  { constructors } 

    {class} function init: DNSetEffect;

  end;

  ///<summary>
  ///  Represents a set effect for an animation behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.SetEffect')]
  DNSetEffect = interface(DNBehavior)
  ['{CBBFF247-5BA0-46FF-A413-76B35FFFBCD8}']
  { getters & setters } 

    function get_To: DDN.mscorlib.DNObject;
    procedure set_To(value: DDN.mscorlib.DNObject);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the certain attribute of a effect after an animation effect.
    ///  Represents point value.
    ///  Only: bool, ColorFormat, float, int, string.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property &To: DDN.mscorlib.DNObject read get_To write set_To;
    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNSetEffect = class(TDNGenericImport<DNSetEffectClass, DNSetEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C2E4F41-0880-5C78-947E-7009BDE9078B}']
  end;

  ///<summary>
  ///  Represents collection of behavior effects.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.BehaviorCollection')]
  DNBehaviorCollection = interface(DDN.mscorlib.DNObject)
  ['{B8EB4E4E-0EFF-3B9C-8A93-B0CE6A322119}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the list; otherwise, -1.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .</param>
    function IndexOf(item: DNIBehavior): Int32;
    ///<summary>
    ///  Inserts new behavior to a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index where new behavior should be inserted.</param>
    ///  <param name="item">Behavior to insert.</param>
    procedure Insert(index: Int32; item: DNIBehavior);
    ///<summary>
    ///  Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular <see cref="T:System.Array" />
    ///  index.
    ///</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="arrayIndex">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is greater than the available space from <paramref name="arrayIndex" />
    ///  to the end of the destination <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNIBehavior>; arrayIndex: Int32);
    ///<summary>
    ///  Removes behavior from a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index of a behavior to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIBehavior): Boolean;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIBehavior>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of behaviors in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only; otherwise, false.
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBehaviorCollection = class(TDNGenericImport<DNBehaviorCollectionClass, DNBehaviorCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB052847-E4CD-569E-8C8B-6BE2726BB5F8}']
  { constructors } 

    {class} function init: DNBehaviorFactory;

  end;

  ///<summary>
  ///  Allows to create animation effects
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Animation.BehaviorFactory')]
  DNBehaviorFactory = interface(DDN.mscorlib.DNObject)
  ['{ECF922F5-8512-493E-AF56-750D2E443E2D}']
  { methods } 

    ///<summary>
    ///  Creates color effect.
    ///</summary>
    ///<returns>Color effect.</returns>
    function CreateColorEffect: DNIColorEffect;
    ///<summary>
    ///  Creates command effect.
    ///</summary>
    ///<returns>Command effect.</returns>
    function CreateCommandEffect: DNICommandEffect;
    ///<summary>
    ///  Creates filter effect.
    ///</summary>
    ///<returns>Filter effect.</returns>
    function CreateFilterEffect: DNIFilterEffect;
    ///<summary>
    ///  Creates motion effect.
    ///</summary>
    ///<returns>Motion effect.</returns>
    function CreateMotionEffect: DNIMotionEffect;
    ///<summary>
    ///  Creates property effect.
    ///</summary>
    ///<returns>Property effect.</returns>
    function CreatePropertyEffect: DNIPropertyEffect;
    ///<summary>
    ///  Creates rotation effect.
    ///</summary>
    ///<returns>Rotation effect.</returns>
    function CreateRotationEffect: DNIRotationEffect;
    ///<summary>
    ///  Creates scale effect.
    ///</summary>
    ///<returns>Scale effect.</returns>
    function CreateScaleEffect: DNIScaleEffect;
    ///<summary>
    ///  Creates set effect.
    ///</summary>
    ///<returns>Set effect.</returns>
    function CreateSetEffect: DNISetEffect;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBehaviorFactory = class(TDNGenericImport<DNBehaviorFactoryClass, DNBehaviorFactory>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3C2854C-1982-5D45-92F9-C5E1308F4D58}']
  { static getter & setter } 

    {class} function get_PptX: DNBehaviorProperty;
    {class} function get_PptY: DNBehaviorProperty;
    {class} function get_PptW: DNBehaviorProperty;
    {class} function get_PptH: DNBehaviorProperty;
    {class} function get_PptC: DNBehaviorProperty;
    {class} function get_PptR: DNBehaviorProperty;
    {class} function get_XShear: DNBehaviorProperty;
    {class} function get_YShear: DNBehaviorProperty;
    {class} function get_Image: DNBehaviorProperty;
    {class} function get_ScaleX: DNBehaviorProperty;
    {class} function get_ScaleY: DNBehaviorProperty;
    {class} function get_R: DNBehaviorProperty;
    {class} function get_FillColor: DNBehaviorProperty;
    {class} function get_StyleOpacity: DNBehaviorProperty;
    {class} function get_StyleRotation: DNBehaviorProperty;
    {class} function get_StyleVisibility: DNBehaviorProperty;
    {class} function get_StyleColor: DNBehaviorProperty;
    {class} function get_StyleFontSize: DNBehaviorProperty;
    {class} function get_StyleFontWeight: DNBehaviorProperty;
    {class} function get_StyleFontStyle: DNBehaviorProperty;
    {class} function get_StyleFontFamily: DNBehaviorProperty;
    {class} function get_StyleTextEffectEmboss: DNBehaviorProperty;
    {class} function get_StyleTextShadow: DNBehaviorProperty;
    {class} function get_StyleTextTransform: DNBehaviorProperty;
    {class} function get_StyleTextDecorationUnderline: DNBehaviorProperty;
    {class} function get_StyleTextEffectOutline: DNBehaviorProperty;
    {class} function get_StyleTextDecorationLineThrough: DNBehaviorProperty;
    {class} function get_StyleSRotation: DNBehaviorProperty;
    {class} function get_ImageDataCropTop: DNBehaviorProperty;
    {class} function get_ImageDataCropBottom: DNBehaviorProperty;
    {class} function get_ImageDataCropLeft: DNBehaviorProperty;
    {class} function get_ImageDataCropRight: DNBehaviorProperty;
    {class} function get_ImageDataGain: DNBehaviorProperty;
    {class} function get_ImageDataBlacklevel: DNBehaviorProperty;
    {class} function get_ImageDataGamma: DNBehaviorProperty;
    {class} function get_ImageDataGrayscale: DNBehaviorProperty;
    {class} function get_ImageDataChromakey: DNBehaviorProperty;
    {class} function get_FillOn: DNBehaviorProperty;
    {class} function get_FillType: DNBehaviorProperty;
    {class} function get_Fill_Color: DNBehaviorProperty;
    {class} function get_FillOpacity: DNBehaviorProperty;
    {class} function get_FillColor2: DNBehaviorProperty;
    {class} function get_FillMethod: DNBehaviorProperty;
    {class} function get_FillOpacity2: DNBehaviorProperty;
    {class} function get_FillAngle: DNBehaviorProperty;
    {class} function get_FillFocus: DNBehaviorProperty;
    {class} function get_FillFocusPositionX: DNBehaviorProperty;
    {class} function get_FillFocusPositionY: DNBehaviorProperty;
    {class} function get_FillFocusSizeX: DNBehaviorProperty;
    {class} function get_FillFocusSizeY: DNBehaviorProperty;
    {class} function get_StrokeOn: DNBehaviorProperty;
    {class} function get_StrokeColor: DNBehaviorProperty;
    {class} function get_StrokeWeight: DNBehaviorProperty;
    {class} function get_StrokeOpacity: DNBehaviorProperty;
    {class} function get_StrokeLineStyle: DNBehaviorProperty;
    {class} function get_StrokeDashStyle: DNBehaviorProperty;
    {class} function get_StrokeFillType: DNBehaviorProperty;
    {class} function get_StrokeSrc: DNBehaviorProperty;
    {class} function get_StrokeColor2: DNBehaviorProperty;
    {class} function get_StrokeImageSizeX: DNBehaviorProperty;
    {class} function get_StrokeImageSizeY: DNBehaviorProperty;
    {class} function get_StrokeStartArrow: DNBehaviorProperty;
    {class} function get_StrokeEndArrow: DNBehaviorProperty;
    {class} function get_StrokeStartArrowWidth: DNBehaviorProperty;
    {class} function get_StrokeStartArrowLength: DNBehaviorProperty;
    {class} function get_StrokeEndArrowWidth: DNBehaviorProperty;
    {class} function get_StrokeEndArrowLength: DNBehaviorProperty;
    {class} function get_ShadowOn: DNBehaviorProperty;
    {class} function get_ShadowType: DNBehaviorProperty;
    {class} function get_ShadowColor: DNBehaviorProperty;
    {class} function get_ShadowColor2: DNBehaviorProperty;
    {class} function get_ShadowOpacity: DNBehaviorProperty;
    {class} function get_ShadowOffsetX: DNBehaviorProperty;
    {class} function get_ShadowOffsetY: DNBehaviorProperty;
    {class} function get_ShadowOffset2X: DNBehaviorProperty;
    {class} function get_ShadowOffset2Y: DNBehaviorProperty;
    {class} function get_ShadowOriginX: DNBehaviorProperty;
    {class} function get_ShadowOriginY: DNBehaviorProperty;
    {class} function get_ShadowMatrixXtoX: DNBehaviorProperty;
    {class} function get_ShadowMatrixXtoY: DNBehaviorProperty;
    {class} function get_ShadowMatrixYtoX: DNBehaviorProperty;
    {class} function get_ShadowMatrixYtoY: DNBehaviorProperty;
    {class} function get_ShadowMatrixPerspectiveX: DNBehaviorProperty;
    {class} function get_ShadowMatrixPerspectiveY: DNBehaviorProperty;
    {class} function get_SkewOn: DNBehaviorProperty;
    {class} function get_SkewOffsetX: DNBehaviorProperty;
    {class} function get_SkewOffsetY: DNBehaviorProperty;
    {class} function get_SkewOriginX: DNBehaviorProperty;
    {class} function get_SkewOriginY: DNBehaviorProperty;
    {class} function get_SkewMatrixXtoX: DNBehaviorProperty;
    {class} function get_SkewMatrixXtoY: DNBehaviorProperty;
    {class} function get_SkewMatrixYtoX: DNBehaviorProperty;
    {class} function get_SkewMatrixYtoY: DNBehaviorProperty;
    {class} function get_SkewMatrixPerspectiveX: DNBehaviorProperty;
    {class} function get_SkewMatrixPerspectiveY: DNBehaviorProperty;
    {class} function get_ExtrusionOn: DNBehaviorProperty;
    {class} function get_ExtrusionType: DNBehaviorProperty;
    {class} function get_ExtrusionRender: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointOriginX: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointOriginY: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointX: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointY: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointZ: DNBehaviorProperty;
    {class} function get_ExtrusionPlane: DNBehaviorProperty;
    {class} function get_ExtrusionSkewAngle: DNBehaviorProperty;
    {class} function get_ExtrusionSkewAmt: DNBehaviorProperty;
    {class} function get_ExtrusionBackDepth: DNBehaviorProperty;
    {class} function get_ExtrusionForeDepth: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationX: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationY: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationZ: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationAngle: DNBehaviorProperty;
    {class} function get_ExtrusionColor: DNBehaviorProperty;
    {class} function get_ExtrusionRotationAngleX: DNBehaviorProperty;
    {class} function get_ExtrusionRotationAngleY: DNBehaviorProperty;
    {class} function get_ExtrusionLockRotationCenter: DNBehaviorProperty;
    {class} function get_ExtrusionAutoRotationCenter: DNBehaviorProperty;
    {class} function get_ExtrusionRotationCenterX: DNBehaviorProperty;
    {class} function get_ExtrusionRotationCenterY: DNBehaviorProperty;
    {class} function get_ExtrusionRotationCenterZ: DNBehaviorProperty;
    {class} function get_ExtrusionColorMode: DNBehaviorProperty;

  { static methods } 

    ///<summary>
    ///  Looks for existing behavior property by value or creates new custom one with the specified value
    ///</summary>
    ///  <param name="propertyValue">value of the property</param>
    ///<returns>instance of BehaviorProperty</returns>
    {class} function GetOrCreateByValue(propertyValue: string): DNBehaviorProperty;

  { static propertys } 

    ///<summary>
    ///  Represents 'ppt_x' property
    ///</summary>
    {class} property PptX: DNBehaviorProperty read get_PptX;
    ///<summary>
    ///  Represents 'ppt_y' property
    ///</summary>
    {class} property PptY: DNBehaviorProperty read get_PptY;
    ///<summary>
    ///  Represents 'ppt_w' property
    ///</summary>
    {class} property PptW: DNBehaviorProperty read get_PptW;
    ///<summary>
    ///  Represents 'ppt_h' property
    ///</summary>
    {class} property PptH: DNBehaviorProperty read get_PptH;
    ///<summary>
    ///  Represents 'ppt_c' property
    ///</summary>
    {class} property PptC: DNBehaviorProperty read get_PptC;
    ///<summary>
    ///  Represents 'ppt_r' property
    ///</summary>
    {class} property PptR: DNBehaviorProperty read get_PptR;
    ///<summary>
    ///  Represents 'xshear' property
    ///</summary>
    {class} property XShear: DNBehaviorProperty read get_XShear;
    ///<summary>
    ///  Represents 'yshear' property
    ///</summary>
    {class} property YShear: DNBehaviorProperty read get_YShear;
    ///<summary>
    ///  Represents 'image' property
    ///</summary>
    {class} property Image: DNBehaviorProperty read get_Image;
    ///<summary>
    ///  Represents 'ScaleX' property
    ///</summary>
    {class} property ScaleX: DNBehaviorProperty read get_ScaleX;
    ///<summary>
    ///  Represents 'ScaleY' property
    ///</summary>
    {class} property ScaleY: DNBehaviorProperty read get_ScaleY;
    ///<summary>
    ///  Represents 'r' property
    ///</summary>
    {class} property R: DNBehaviorProperty read get_R;
    ///<summary>
    ///  Represents 'fillcolor' property
    ///</summary>
    {class} property FillColor: DNBehaviorProperty read get_FillColor;
    ///<summary>
    ///  Represents 'style.opacity' property
    ///</summary>
    {class} property StyleOpacity: DNBehaviorProperty read get_StyleOpacity;
    ///<summary>
    ///  Represents 'style.rotation' property
    ///</summary>
    {class} property StyleRotation: DNBehaviorProperty read get_StyleRotation;
    ///<summary>
    ///  Represents 'style.visibility' property
    ///</summary>
    {class} property StyleVisibility: DNBehaviorProperty read get_StyleVisibility;
    ///<summary>
    ///  Represents 'style.color' property
    ///</summary>
    {class} property StyleColor: DNBehaviorProperty read get_StyleColor;
    ///<summary>
    ///  Represents 'style.fontSize' property
    ///</summary>
    {class} property StyleFontSize: DNBehaviorProperty read get_StyleFontSize;
    ///<summary>
    ///  Represents 'style.fontWeight' property
    ///</summary>
    {class} property StyleFontWeight: DNBehaviorProperty read get_StyleFontWeight;
    ///<summary>
    ///  Represents 'style.fontStyle' property
    ///</summary>
    {class} property StyleFontStyle: DNBehaviorProperty read get_StyleFontStyle;
    ///<summary>
    ///  Represents 'style.fontFamily' property
    ///</summary>
    {class} property StyleFontFamily: DNBehaviorProperty read get_StyleFontFamily;
    ///<summary>
    ///  Represents 'style.textEffectEmboss' property
    ///</summary>
    {class} property StyleTextEffectEmboss: DNBehaviorProperty read get_StyleTextEffectEmboss;
    ///<summary>
    ///  Represents 'style.textShadow' property
    ///</summary>
    {class} property StyleTextShadow: DNBehaviorProperty read get_StyleTextShadow;
    ///<summary>
    ///  Represents 'style.textTransform' property
    ///</summary>
    {class} property StyleTextTransform: DNBehaviorProperty read get_StyleTextTransform;
    ///<summary>
    ///  Represents 'style.textDecorationUnderline' property
    ///</summary>
    {class} property StyleTextDecorationUnderline: DNBehaviorProperty read get_StyleTextDecorationUnderline;
    ///<summary>
    ///  Represents 'style.textEffectOutline' property
    ///</summary>
    {class} property StyleTextEffectOutline: DNBehaviorProperty read get_StyleTextEffectOutline;
    ///<summary>
    ///  Represents 'style.textDecorationLineThrough' property
    ///</summary>
    {class} property StyleTextDecorationLineThrough: DNBehaviorProperty read get_StyleTextDecorationLineThrough;
    ///<summary>
    ///  Represents 'style.sRotation' property
    ///</summary>
    {class} property StyleSRotation: DNBehaviorProperty read get_StyleSRotation;
    ///<summary>
    ///  Represents 'imageData.cropTop' property
    ///</summary>
    {class} property ImageDataCropTop: DNBehaviorProperty read get_ImageDataCropTop;
    ///<summary>
    ///  Represents 'imageData.cropBottom' property
    ///</summary>
    {class} property ImageDataCropBottom: DNBehaviorProperty read get_ImageDataCropBottom;
    ///<summary>
    ///  Represents 'imageData.cropLeft' property
    ///</summary>
    {class} property ImageDataCropLeft: DNBehaviorProperty read get_ImageDataCropLeft;
    ///<summary>
    ///  Represents 'imageData.cropRight' property
    ///</summary>
    {class} property ImageDataCropRight: DNBehaviorProperty read get_ImageDataCropRight;
    ///<summary>
    ///  Represents 'imageData.gain' property
    ///</summary>
    {class} property ImageDataGain: DNBehaviorProperty read get_ImageDataGain;
    ///<summary>
    ///  Represents 'imageData.blacklevel' property
    ///</summary>
    {class} property ImageDataBlacklevel: DNBehaviorProperty read get_ImageDataBlacklevel;
    ///<summary>
    ///  Represents 'imageData.gamma' property
    ///</summary>
    {class} property ImageDataGamma: DNBehaviorProperty read get_ImageDataGamma;
    ///<summary>
    ///  Represents 'imageData.grayscale' property
    ///</summary>
    {class} property ImageDataGrayscale: DNBehaviorProperty read get_ImageDataGrayscale;
    ///<summary>
    ///  Represents 'imageData.chromakey' property
    ///</summary>
    {class} property ImageDataChromakey: DNBehaviorProperty read get_ImageDataChromakey;
    ///<summary>
    ///  Represents 'fill.on' property
    ///</summary>
    {class} property FillOn: DNBehaviorProperty read get_FillOn;
    ///<summary>
    ///  Represents 'fill.type' property
    ///</summary>
    {class} property FillType: DNBehaviorProperty read get_FillType;
    ///<summary>
    ///  Represents 'fill.color' property
    ///</summary>
    {class} property Fill_Color: DNBehaviorProperty read get_Fill_Color;
    ///<summary>
    ///  Represents 'fill.opacity' property
    ///</summary>
    {class} property FillOpacity: DNBehaviorProperty read get_FillOpacity;
    ///<summary>
    ///  Represents 'fill.color2' property
    ///</summary>
    {class} property FillColor2: DNBehaviorProperty read get_FillColor2;
    ///<summary>
    ///  Represents 'fill.method' property
    ///</summary>
    {class} property FillMethod: DNBehaviorProperty read get_FillMethod;
    ///<summary>
    ///  Represents 'fill.opacity2' property
    ///</summary>
    {class} property FillOpacity2: DNBehaviorProperty read get_FillOpacity2;
    ///<summary>
    ///  Represents 'fill.angle' property
    ///</summary>
    {class} property FillAngle: DNBehaviorProperty read get_FillAngle;
    ///<summary>
    ///  Represents 'fill.focus' property
    ///</summary>
    {class} property FillFocus: DNBehaviorProperty read get_FillFocus;
    ///<summary>
    ///  Represents 'fill.focusposition.x' property
    ///</summary>
    {class} property FillFocusPositionX: DNBehaviorProperty read get_FillFocusPositionX;
    ///<summary>
    ///  Represents 'fill.focusposition.y' property
    ///</summary>
    {class} property FillFocusPositionY: DNBehaviorProperty read get_FillFocusPositionY;
    ///<summary>
    ///  Represents 'fill.focussize.x' property
    ///</summary>
    {class} property FillFocusSizeX: DNBehaviorProperty read get_FillFocusSizeX;
    ///<summary>
    ///  Represents 'fill.focussize.y' property
    ///</summary>
    {class} property FillFocusSizeY: DNBehaviorProperty read get_FillFocusSizeY;
    ///<summary>
    ///  Represents 'stroke.on' property
    ///</summary>
    {class} property StrokeOn: DNBehaviorProperty read get_StrokeOn;
    ///<summary>
    ///  Represents 'stroke.color' property
    ///</summary>
    {class} property StrokeColor: DNBehaviorProperty read get_StrokeColor;
    ///<summary>
    ///  Represents 'stroke.weight' property
    ///</summary>
    {class} property StrokeWeight: DNBehaviorProperty read get_StrokeWeight;
    ///<summary>
    ///  Represents 'stroke.opacity' property
    ///</summary>
    {class} property StrokeOpacity: DNBehaviorProperty read get_StrokeOpacity;
    ///<summary>
    ///  Represents 'stroke.linestyle' property
    ///</summary>
    {class} property StrokeLineStyle: DNBehaviorProperty read get_StrokeLineStyle;
    ///<summary>
    ///  Represents 'stroke.dashstyle' property
    ///</summary>
    {class} property StrokeDashStyle: DNBehaviorProperty read get_StrokeDashStyle;
    ///<summary>
    ///  Represents 'stroke.filltype' property
    ///</summary>
    {class} property StrokeFillType: DNBehaviorProperty read get_StrokeFillType;
    ///<summary>
    ///  Represents 'stroke.src' property
    ///</summary>
    {class} property StrokeSrc: DNBehaviorProperty read get_StrokeSrc;
    ///<summary>
    ///  Represents 'stroke.color2' property
    ///</summary>
    {class} property StrokeColor2: DNBehaviorProperty read get_StrokeColor2;
    ///<summary>
    ///  Represents 'stroke.imagesize.x' property
    ///</summary>
    {class} property StrokeImageSizeX: DNBehaviorProperty read get_StrokeImageSizeX;
    ///<summary>
    ///  Represents 'stroke.imagesize.y' property
    ///</summary>
    {class} property StrokeImageSizeY: DNBehaviorProperty read get_StrokeImageSizeY;
    ///<summary>
    ///  Represents 'stroke.startArrow' property
    ///</summary>
    {class} property StrokeStartArrow: DNBehaviorProperty read get_StrokeStartArrow;
    ///<summary>
    ///  Represents 'stroke.endArrow' property
    ///</summary>
    {class} property StrokeEndArrow: DNBehaviorProperty read get_StrokeEndArrow;
    ///<summary>
    ///  Represents 'stroke.startArrowWidth' property
    ///</summary>
    {class} property StrokeStartArrowWidth: DNBehaviorProperty read get_StrokeStartArrowWidth;
    ///<summary>
    ///  Represents 'stroke.startArrowLength' property
    ///</summary>
    {class} property StrokeStartArrowLength: DNBehaviorProperty read get_StrokeStartArrowLength;
    ///<summary>
    ///  Represents 'stroke.endArrowWidth' property
    ///</summary>
    {class} property StrokeEndArrowWidth: DNBehaviorProperty read get_StrokeEndArrowWidth;
    ///<summary>
    ///  Represents 'stroke.endArrowLength' property
    ///</summary>
    {class} property StrokeEndArrowLength: DNBehaviorProperty read get_StrokeEndArrowLength;
    ///<summary>
    ///  Represents 'shadow.on' property
    ///</summary>
    {class} property ShadowOn: DNBehaviorProperty read get_ShadowOn;
    ///<summary>
    ///  Represents 'shadow.type' property
    ///</summary>
    {class} property ShadowType: DNBehaviorProperty read get_ShadowType;
    ///<summary>
    ///  Represents 'shadow.color' property
    ///</summary>
    {class} property ShadowColor: DNBehaviorProperty read get_ShadowColor;
    ///<summary>
    ///  Represents 'shadow.color2' property
    ///</summary>
    {class} property ShadowColor2: DNBehaviorProperty read get_ShadowColor2;
    ///<summary>
    ///  Represents 'shadow.opacity' property
    ///</summary>
    {class} property ShadowOpacity: DNBehaviorProperty read get_ShadowOpacity;
    ///<summary>
    ///  Represents 'shadow.offset.x' property
    ///</summary>
    {class} property ShadowOffsetX: DNBehaviorProperty read get_ShadowOffsetX;
    ///<summary>
    ///  Represents 'shadow.offset.y' property
    ///</summary>
    {class} property ShadowOffsetY: DNBehaviorProperty read get_ShadowOffsetY;
    ///<summary>
    ///  Represents 'shadow.offset2.x' property
    ///</summary>
    {class} property ShadowOffset2X: DNBehaviorProperty read get_ShadowOffset2X;
    ///<summary>
    ///  Represents 'shadow.offset2.y' property
    ///</summary>
    {class} property ShadowOffset2Y: DNBehaviorProperty read get_ShadowOffset2Y;
    ///<summary>
    ///  Represents 'shadow.origin.x' property
    ///</summary>
    {class} property ShadowOriginX: DNBehaviorProperty read get_ShadowOriginX;
    ///<summary>
    ///  Represents 'shadow.origin.y' property
    ///</summary>
    {class} property ShadowOriginY: DNBehaviorProperty read get_ShadowOriginY;
    ///<summary>
    ///  Represents 'shadow.matrix.xtox' property
    ///</summary>
    {class} property ShadowMatrixXtoX: DNBehaviorProperty read get_ShadowMatrixXtoX;
    ///<summary>
    ///  Represents 'shadow.matrix.xtoy' property
    ///</summary>
    {class} property ShadowMatrixXtoY: DNBehaviorProperty read get_ShadowMatrixXtoY;
    ///<summary>
    ///  Represents 'shadow.matrix.ytox' property
    ///</summary>
    {class} property ShadowMatrixYtoX: DNBehaviorProperty read get_ShadowMatrixYtoX;
    ///<summary>
    ///  Represents 'shadow.matrix.ytoy' property
    ///</summary>
    {class} property ShadowMatrixYtoY: DNBehaviorProperty read get_ShadowMatrixYtoY;
    ///<summary>
    ///  Represents 'shadow.matrix.perspectiveX' property
    ///</summary>
    {class} property ShadowMatrixPerspectiveX: DNBehaviorProperty read get_ShadowMatrixPerspectiveX;
    ///<summary>
    ///  Represents 'shadow.matrix.perspectiveY' property
    ///</summary>
    {class} property ShadowMatrixPerspectiveY: DNBehaviorProperty read get_ShadowMatrixPerspectiveY;
    ///<summary>
    ///  Represents 'skew.on' property
    ///</summary>
    {class} property SkewOn: DNBehaviorProperty read get_SkewOn;
    ///<summary>
    ///  Represents 'skew.offset.x' property
    ///</summary>
    {class} property SkewOffsetX: DNBehaviorProperty read get_SkewOffsetX;
    ///<summary>
    ///  Represents 'skew.offset.y' property
    ///</summary>
    {class} property SkewOffsetY: DNBehaviorProperty read get_SkewOffsetY;
    ///<summary>
    ///  Represents 'skew.origin.x' property
    ///</summary>
    {class} property SkewOriginX: DNBehaviorProperty read get_SkewOriginX;
    ///<summary>
    ///  Represents 'skew.origin.y' property
    ///</summary>
    {class} property SkewOriginY: DNBehaviorProperty read get_SkewOriginY;
    ///<summary>
    ///  Represents 'skew.matrix.xtox' property
    ///</summary>
    {class} property SkewMatrixXtoX: DNBehaviorProperty read get_SkewMatrixXtoX;
    ///<summary>
    ///  Represents 'skew.matrix.xtoy' property
    ///</summary>
    {class} property SkewMatrixXtoY: DNBehaviorProperty read get_SkewMatrixXtoY;
    ///<summary>
    ///  Represents 'skew.matrix.ytox' property
    ///</summary>
    {class} property SkewMatrixYtoX: DNBehaviorProperty read get_SkewMatrixYtoX;
    ///<summary>
    ///  Represents 'skew.matrix.ytoy' property
    ///</summary>
    {class} property SkewMatrixYtoY: DNBehaviorProperty read get_SkewMatrixYtoY;
    ///<summary>
    ///  Represents 'skew.matrix.perspectiveX' property
    ///</summary>
    {class} property SkewMatrixPerspectiveX: DNBehaviorProperty read get_SkewMatrixPerspectiveX;
    ///<summary>
    ///  Represents 'skew.matrix.perspectiveY' property
    ///</summary>
    {class} property SkewMatrixPerspectiveY: DNBehaviorProperty read get_SkewMatrixPerspectiveY;
    ///<summary>
    ///  Represents 'extrusion.on' property
    ///</summary>
    {class} property ExtrusionOn: DNBehaviorProperty read get_ExtrusionOn;
    ///<summary>
    ///  Represents 'extrusion.type' property
    ///</summary>
    {class} property ExtrusionType: DNBehaviorProperty read get_ExtrusionType;
    ///<summary>
    ///  Represents 'extrusion.render' property
    ///</summary>
    {class} property ExtrusionRender: DNBehaviorProperty read get_ExtrusionRender;
    ///<summary>
    ///  Represents 'extrusion.viewpointorigin.x' property
    ///</summary>
    {class} property ExtrusionViewPointOriginX: DNBehaviorProperty read get_ExtrusionViewPointOriginX;
    ///<summary>
    ///  Represents 'extrusion.viewpointorigin.y' property
    ///</summary>
    {class} property ExtrusionViewPointOriginY: DNBehaviorProperty read get_ExtrusionViewPointOriginY;
    ///<summary>
    ///  Represents 'extrusion.viewpoint.x' property
    ///</summary>
    {class} property ExtrusionViewPointX: DNBehaviorProperty read get_ExtrusionViewPointX;
    ///<summary>
    ///  Represents 'extrusion.viewpoint.y' property
    ///</summary>
    {class} property ExtrusionViewPointY: DNBehaviorProperty read get_ExtrusionViewPointY;
    ///<summary>
    ///  Represents 'extrusion.viewpoint.z' property
    ///</summary>
    {class} property ExtrusionViewPointZ: DNBehaviorProperty read get_ExtrusionViewPointZ;
    ///<summary>
    ///  Represents 'extrusion.plane' property
    ///</summary>
    {class} property ExtrusionPlane: DNBehaviorProperty read get_ExtrusionPlane;
    ///<summary>
    ///  Represents 'extrusion.skewangle' property
    ///</summary>
    {class} property ExtrusionSkewAngle: DNBehaviorProperty read get_ExtrusionSkewAngle;
    ///<summary>
    ///  Represents 'extrusion.skewamt' property
    ///</summary>
    {class} property ExtrusionSkewAmt: DNBehaviorProperty read get_ExtrusionSkewAmt;
    ///<summary>
    ///  Represents 'extrusion.backdepth' property
    ///</summary>
    {class} property ExtrusionBackDepth: DNBehaviorProperty read get_ExtrusionBackDepth;
    ///<summary>
    ///  Represents 'extrusion.foredepth' property
    ///</summary>
    {class} property ExtrusionForeDepth: DNBehaviorProperty read get_ExtrusionForeDepth;
    ///<summary>
    ///  Represents 'extrusion.orientation.x' property
    ///</summary>
    {class} property ExtrusionOrientationX: DNBehaviorProperty read get_ExtrusionOrientationX;
    ///<summary>
    ///  Represents 'extrusion.orientation.y' property
    ///</summary>
    {class} property ExtrusionOrientationY: DNBehaviorProperty read get_ExtrusionOrientationY;
    ///<summary>
    ///  Represents 'extrusion.orientation.z' property
    ///</summary>
    {class} property ExtrusionOrientationZ: DNBehaviorProperty read get_ExtrusionOrientationZ;
    ///<summary>
    ///  Represents 'extrusion.orientationangle' property
    ///</summary>
    {class} property ExtrusionOrientationAngle: DNBehaviorProperty read get_ExtrusionOrientationAngle;
    ///<summary>
    ///  Represents 'extrusion.color' property
    ///</summary>
    {class} property ExtrusionColor: DNBehaviorProperty read get_ExtrusionColor;
    ///<summary>
    ///  Represents 'extrusion.rotationangle.x' property
    ///</summary>
    {class} property ExtrusionRotationAngleX: DNBehaviorProperty read get_ExtrusionRotationAngleX;
    ///<summary>
    ///  Represents 'extrusion.rotationangle.y' property
    ///</summary>
    {class} property ExtrusionRotationAngleY: DNBehaviorProperty read get_ExtrusionRotationAngleY;
    ///<summary>
    ///  Represents 'extrusion.lockrotationcenter' property
    ///</summary>
    {class} property ExtrusionLockRotationCenter: DNBehaviorProperty read get_ExtrusionLockRotationCenter;
    ///<summary>
    ///  Represents 'extrusion.autorotationcenter' property
    ///</summary>
    {class} property ExtrusionAutoRotationCenter: DNBehaviorProperty read get_ExtrusionAutoRotationCenter;
    ///<summary>
    ///  Represents 'extrusion.rotationcenter.x' property
    ///</summary>
    {class} property ExtrusionRotationCenterX: DNBehaviorProperty read get_ExtrusionRotationCenterX;
    ///<summary>
    ///  Represents 'extrusion.rotationcenter.y' property
    ///</summary>
    {class} property ExtrusionRotationCenterY: DNBehaviorProperty read get_ExtrusionRotationCenterY;
    ///<summary>
    ///  Represents 'extrusion.rotationcenter.z' property
    ///</summary>
    {class} property ExtrusionRotationCenterZ: DNBehaviorProperty read get_ExtrusionRotationCenterZ;
    ///<summary>
    ///  Represents 'extrusion.colormode' property
    ///</summary>
    {class} property ExtrusionColorMode: DNBehaviorProperty read get_ExtrusionColorMode;
  end;

  ///<summary>
  ///  Represent property types for animation behavior.
  ///  Follows the list of properties from https://msdn.microsoft.com/en-us/library/dd949052(v=office.15).aspx
  ///  and https://msdn.microsoft.com/en-us/library/documentformat.openxml.presentation.attributename(v=office.15).aspx
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.BehaviorProperty')]
  DNBehaviorProperty = interface(DDN.mscorlib.DNObject)
  ['{047AF247-3FF3-4DA6-996B-D694B92C691F}']
  { getters & setters } 

    function get_Value: string;
    function get_IsCustom: Boolean;

  { methods } 

    ///<summary>
    ///  Checks if this object is equal to another.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True if objects are equal.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Calculates and returns hach code based on the <see cref="P:Aspose.Slides.Animation.BehaviorProperty.Value" />
    ///  property
    ///</summary>
    ///<returns>Returns hash code for this object</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Value of the property
    ///</summary>
    property Value: string read get_Value;
    ///<summary>
    ///  Shows if this property does not belong to the predefined properties list in the specification:
    ///  https://msdn.microsoft.com/en-us/library/dd949052(v=office.15).aspx
    ///</summary>
    property IsCustom: Boolean read get_IsCustom;
  end;

  TDNBehaviorProperty = class(TDNGenericImport<DNBehaviorPropertyClass, DNBehaviorProperty>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorPropertyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8647B62E-3DA0-5474-8E22-7C2B858B1E0D}']
  end;

  ///<summary>
  ///  Represents timing properties for the effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.BehaviorPropertyCollection')]
  DNBehaviorPropertyCollection = interface(DDN.mscorlib.DNObject)
  ['{49B48AA5-A0A9-32E3-9E4B-E7A32E14A260}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .</param>
    ///<returns>The index of <paramref name="item" />
    ///  if found in the list; otherwise, -1.</returns>
    function IndexOf(item: DNIBehaviorProperty): Int32; overload;
    ///<summary>
    ///  Determines the index of a specific item by property value in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///  <param name="propertyValue">value of the property</param>
    ///<returns>The index of the property with the specified value</returns>
    function IndexOf(propertyValue: string): Int32; overload;
    ///<summary>
    ///  Inserts a new property to the collection at the specified index.
    ///</summary>
    ///  <param name="index">Index where a new property should be inserted.</param>
    ///  <param name="item">Property to add.</param>
    procedure Insert(index: Int32; item: DNIBehaviorProperty); overload;
    ///<summary>
    ///  Inserts a new property (with the specified property value) to the collection at the specified index.
    ///</summary>
    ///  <param name="index">Index where a new property should be inserted.</param>
    ///  <param name="propertyValue">Value of the property to add.</param>
    procedure Insert(index: Int32; propertyValue: string); overload;
    ///<summary>
    ///  Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular <see cref="T:System.Array" />
    ///  index.
    ///</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="arrayIndex">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is greater than the available space from <paramref name="arrayIndex" />
    ///  to the end of the destination <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNIBehaviorProperty>; arrayIndex: Int32);
    ///<summary>
    ///  Removes property at the specified index.
    ///</summary>
    ///  <param name="index">Index of the property which should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The property to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIBehaviorProperty): Boolean; overload;
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="propertyValue" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="propertyValue">Value of the property to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(propertyValue: string): Boolean; overload;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIBehaviorProperty>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of properties stored in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only; otherwise, false.
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBehaviorPropertyCollection = class(TDNGenericImport<DNBehaviorPropertyCollectionClass, DNBehaviorPropertyCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNColorOffsetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CCF4377D-1B79-55FB-A8B8-1207DCB4402D}']
  { constructors } 

    {class} function init: DNColorOffset;

  end;

  ///<summary>
  ///  Represent color offset.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ColorOffset')]
  DNColorOffset = interface(DDN.mscorlib.DNObject)
  ['{CADD381F-75AA-423E-8EF5-A0AD26A0B60B}']
  { getters & setters } 

    function get_Value0: Single;
    procedure set_Value0(value: Single);
    function get_Value1: Single;
    procedure set_Value1(value: Single);
    function get_Value2: Single;
    procedure set_Value2(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Defines first value of offset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value0: Single read get_Value0 write set_Value0;
    ///<summary>
    ///  Defines second value of offset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value1: Single read get_Value1 write set_Value1;
    ///<summary>
    ///  Defines third value of offset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value2: Single read get_Value2 write set_Value2;
  end;

  TDNColorOffset = class(TDNGenericImport<DNColorOffsetClass, DNColorOffset>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A41830B1-4CE8-5CE8-A583-8DCA8F0AD573}']
  end;

  ///<summary>
  ///  Represents animation effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.Effect')]
  DNEffect = interface(DDN.mscorlib.DNObject)
  ['{EC1899AE-F0B5-34BB-ABCB-FAEFF864EF53}']
  { getters & setters } 

    function get_Sequence: DNISequence;
    function get_TextAnimation: DNITextAnimation;
    function get_PresetClassType: DNEffectPresetClassType;
    procedure set_PresetClassType(value: DNEffectPresetClassType);
    function get_Type: DNEffectType;
    procedure set_Type(value: DNEffectType);
    function get_Subtype: DNEffectSubtype;
    procedure set_Subtype(value: DNEffectSubtype);
    function get_Behaviors: DNIBehaviorCollection;
    procedure set_Behaviors(value: DNIBehaviorCollection);
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);
    function get_TargetShape: DNIShape;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a sequence for an effect.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ISequence" />
    ///  .
    ///</summary>
    property Sequence: DNISequence read get_Sequence;
    ///<summary>
    ///  TextAnimation
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ITextAnimation" />
    ///  .
    ///</summary>
    property TextAnimation: DNITextAnimation read get_TextAnimation;
    ///<summary>
    ///  Defines class of effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectPresetClassType" />
    ///  .
    ///</summary>
    property PresetClassType: DNEffectPresetClassType read get_PresetClassType write set_PresetClassType;
    ///<summary>
    ///  Defines type of effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///  .
    ///</summary>
    property &Type: DNEffectType read get_Type write set_Type;
    ///<summary>
    ///  Defines subtype of effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///  .
    ///</summary>
    property Subtype: DNEffectSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Returns collection of behavior for effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IBehaviorCollection" />
    ///  .
    ///</summary>
    property Behaviors: DNIBehaviorCollection read get_Behaviors write set_Behaviors;
    ///<summary>
    ///  Defines timing value for effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
    ///<summary>
    ///  Returns target shape for effect.
    ///  Read-only <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    property TargetShape: DNIShape read get_TargetShape;
  end;

  TDNEffect = class(TDNGenericImport<DNEffectClass, DNEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent base class behavior of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IBehavior')]
  DNIBehavior = interface(DDN.mscorlib.DNObject)
  ['{CF485DFA-7880-4D6F-A9FF-03971721BDBC}']
  { getters & setters } 

    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { propertys } 

    ///<summary>
    ///  Represents whether animation behaviors are accumulated.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    ///<summary>
    ///  Represents whether the current animation behavior is combined with other running animations.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BehaviorAdditiveType" />
    ///  .
    ///</summary>
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    ///<summary>
    ///  Represents properties of behavior.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehaviorPropertyCollection" />
    ///  .
    ///</summary>
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    ///<summary>
    ///  Represents timing properties for the effect behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents a color effect for an animation behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IColorEffect')]
  DNIColorEffect = interface(DNIBehavior)
  ['{FA35FF58-EE77-445A-B74B-26935CB87652}']
  { getters & setters } 

    function get_From: DNIColorFormat;
    procedure set_From(value: DNIColorFormat);
    function get_To: DNIColorFormat;
    procedure set_To(value: DNIColorFormat);
    function get_By: DNIColorOffset;
    procedure set_By(value: DNIColorOffset);
    function get_ColorSpace: DNColorSpace;
    procedure set_ColorSpace(value: DNColorSpace);
    function get_Direction: DNColorDirection;
    procedure set_Direction(value: DNColorDirection);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  This value is used to specify the starting color of behavior.
    ///  Read/write <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property From: DNIColorFormat read get_From write set_From;
    ///<summary>
    ///  Describes resulting color for the animation color change.
    ///  Read/write <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property &To: DNIColorFormat read get_To write set_To;
    ///<summary>
    ///  Describes the relative offset value for the color animation.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IColorOffset" />
    ///  .
    ///</summary>
    property By: DNIColorOffset read get_By write set_By;
    ///<summary>
    ///  Represent color space of behavior.
    ///  Read/write <see cref="P:Aspose.Slides.Animation.IColorEffect.ColorSpace" />
    ///  .
    ///</summary>
    property ColorSpace: DNColorSpace read get_ColorSpace write set_ColorSpace;
    ///<summary>
    ///  Specifies which direction to cycle the hue around the color wheel.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ColorDirection" />
    ///  .
    ///</summary>
    property Direction: DNColorDirection read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents a command effect for an animation behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ICommandEffect')]
  DNICommandEffect = interface(DNIBehavior)
  ['{9123DB43-ECB8-4B40-8227-751BB0D2BA83}']
  { getters & setters } 

    function get_Type: DNCommandEffectType;
    procedure set_Type(value: DNCommandEffectType);
    function get_CommandString: string;
    procedure set_CommandString(value: string);
    function get_ShapeTarget: DNIShape;
    procedure set_ShapeTarget(value: DNIShape);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Defines command effect type of behavior.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.CommandEffectType" />
    ///  .
    ///</summary>
    property &Type: DNCommandEffectType read get_Type write set_Type;
    ///<summary>
    ///  Defines command string.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property CommandString: string read get_CommandString write set_CommandString;
    ///<summary>
    ///  Defines shape target of command effect.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    property ShapeTarget: DNIShape read get_ShapeTarget write set_ShapeTarget;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent filter effect of behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IFilterEffect')]
  DNIFilterEffect = interface(DNIBehavior)
  ['{A3C08970-949B-41C1-AE5A-97F6189A3E10}']
  { getters & setters } 

    function get_Reveal: DNFilterEffectRevealType;
    procedure set_Reveal(value: DNFilterEffectRevealType);
    function get_Type: DNFilterEffectType;
    procedure set_Type(value: DNFilterEffectType);
    function get_Subtype: DNFilterEffectSubtype;
    procedure set_Subtype(value: DNFilterEffectSubtype);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Represents that effect with behavior must reveal (in/out)
    ///  Read/write <see cref="T:Aspose.Slides.Animation.FilterEffectRevealType" />
    ///  .
    ///</summary>
    property Reveal: DNFilterEffectRevealType read get_Reveal write set_Reveal;
    ///<summary>
    ///  Represents type of filter effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.FilterEffectType" />
    ///  .
    ///</summary>
    property &Type: DNFilterEffectType read get_Type write set_Type;
    ///<summary>
    ///  Represents subtype of filter effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.FilterEffectSubtype" />
    ///  .
    ///</summary>
    property Subtype: DNFilterEffectSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent motion effect behavior of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IMotionEffect')]
  DNIMotionEffect = interface(DNIBehavior)
  ['{9D9FF911-CCB2-40E7-81D8-35EF9FE3DB57}']
  { getters & setters } 

    function get_From: DDN.Aspose.Common.DNPointF;
    procedure set_From(value: DDN.Aspose.Common.DNPointF);
    function get_To: DDN.Aspose.Common.DNPointF;
    procedure set_To(value: DDN.Aspose.Common.DNPointF);
    function get_By: DDN.Aspose.Common.DNPointF;
    procedure set_By(value: DDN.Aspose.Common.DNPointF);
    function get_RotationCenter: DDN.Aspose.Common.DNPointF;
    procedure set_RotationCenter(value: DDN.Aspose.Common.DNPointF);
    function get_Origin: DNMotionOriginType;
    procedure set_Origin(value: DNMotionOriginType);
    function get_Path: DNIMotionPath;
    procedure set_Path(value: DNIMotionPath);
    function get_PathEditMode: DNMotionPathEditMode;
    procedure set_PathEditMode(value: DNMotionPathEditMode);
    function get_Angle: Single;
    procedure set_Angle(value: Single);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Specifies an x/y co-ordinate to start the animation from (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property From: DDN.Aspose.Common.DNPointF read get_From write set_From;
    ///<summary>
    ///  Specifies the target location for an animation motion effect (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property &To: DDN.Aspose.Common.DNPointF read get_To write set_To;
    ///<summary>
    ///  Describes the relative offset value for the animation (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property By: DDN.Aspose.Common.DNPointF read get_By write set_By;
    ///<summary>
    ///  Describes the center of the rotation used to rotate a motion path by X angle.
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property RotationCenter: DDN.Aspose.Common.DNPointF read get_RotationCenter write set_RotationCenter;
    ///<summary>
    ///  Specifies what the origin of the motion path is relative to such as the layout of the slide,
    ///  or the parent.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionOriginType" />
    ///  .
    ///</summary>
    property Origin: DNMotionOriginType read get_Origin write set_Origin;
    ///<summary>
    ///  Specifies the path primitive followed by coordinates for the animation motion.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IMotionPath" />
    ///  .
    ///</summary>
    property Path: DNIMotionPath read get_Path write set_Path;
    ///<summary>
    ///  Specifies how the motion path moves when shape is moved.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionPathEditMode" />
    ///  .
    ///</summary>
    property PathEditMode: DNMotionPathEditMode read get_PathEditMode write set_PathEditMode;
    ///<summary>
    ///  Describes the relative angle of the motion path.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Angle: Single read get_Angle write set_Angle;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent property effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IPropertyEffect')]
  DNIPropertyEffect = interface(DNIBehavior)
  ['{B960E21D-82F9-4B23-8C4B-280D913D39E2}']
  { getters & setters } 

    function get_From: string;
    procedure set_From(value: string);
    function get_To: string;
    procedure set_To(value: string);
    function get_By: string;
    procedure set_By(value: string);
    function get_ValueType: DNPropertyValueType;
    procedure set_ValueType(value: DNPropertyValueType);
    function get_CalcMode: DNPropertyCalcModeType;
    procedure set_CalcMode(value: DNPropertyCalcModeType);
    function get_Points: DNIPointCollection;
    procedure set_Points(value: DNIPointCollection);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Specifies the starting value of the animation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property From: string read get_From write set_From;
    ///<summary>
    ///  Specifies the ending value for the animation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property &To: string read get_To write set_To;
    ///<summary>
    ///  Specifies a relative offset value for the animation with respect to its
    ///  position before the start of the animation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property By: string read get_By write set_By;
    ///<summary>
    ///  Specifies the type of a property value.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.PropertyValueType" />
    ///  .
    ///</summary>
    property ValueType: DNPropertyValueType read get_ValueType write set_ValueType;
    ///<summary>
    ///  Specifies the interpolation mode for the animation
    ///  Read/write <see cref="T:Aspose.Slides.Animation.PropertyCalcModeType" />
    ///  .
    ///</summary>
    property CalcMode: DNPropertyCalcModeType read get_CalcMode write set_CalcMode;
    ///<summary>
    ///  Specifies the points of the animation.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IPointCollection" />
    ///  .
    ///</summary>
    property Points: DNIPointCollection read get_Points write set_Points;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent rotation behavior of effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IRotationEffect')]
  DNIRotationEffect = interface(DNIBehavior)
  ['{1E3B9AAF-7AD4-4A74-A4CA-5DC36B36FC86}']
  { getters & setters } 

    function get_From: Single;
    procedure set_From(value: Single);
    function get_To: Single;
    procedure set_To(value: Single);
    function get_By: Single;
    procedure set_By(value: Single);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Describes the starting value for the animation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property From: Single read get_From write set_From;
    ///<summary>
    ///  Describes the ending value for the animation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property &To: Single read get_To write set_To;
    ///<summary>
    ///  Describes the relative offset value for the animation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property By: Single read get_By write set_By;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents animation scale effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IScaleEffect')]
  DNIScaleEffect = interface(DNIBehavior)
  ['{F798C9F2-A45F-4560-8AF0-69374680EA9C}']
  { getters & setters } 

    function get_ZoomContent: DNNullableBool;
    procedure set_ZoomContent(value: DNNullableBool);
    function get_From: DDN.Aspose.Common.DNPointF;
    procedure set_From(value: DDN.Aspose.Common.DNPointF);
    function get_To: DDN.Aspose.Common.DNPointF;
    procedure set_To(value: DDN.Aspose.Common.DNPointF);
    function get_By: DDN.Aspose.Common.DNPointF;
    procedure set_By(value: DDN.Aspose.Common.DNPointF);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Determines whether a content should be zoomed.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ZoomContent: DNNullableBool read get_ZoomContent write set_ZoomContent;
    ///<summary>
    ///  Specifies an x/y co-ordinate to start the animation from (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property From: DDN.Aspose.Common.DNPointF read get_From write set_From;
    ///<summary>
    ///  Specifies the target location for an animation scale effect (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property &To: DDN.Aspose.Common.DNPointF read get_To write set_To;
    ///<summary>
    ///  describes the relative offset value for the animation (in percents).
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property By: DDN.Aspose.Common.DNPointF read get_By write set_By;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents a set effect for an animation behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ISetEffect')]
  DNISetEffect = interface(DNIBehavior)
  ['{CC1A4D7F-0860-4B66-9F75-2537896277DF}']
  { getters & setters } 

    function get_To: DDN.mscorlib.DNObject;
    procedure set_To(value: DDN.mscorlib.DNObject);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    ///<summary>
    ///  Specifies the certain attribute of a effect after an animation effect.
    ///  Represents point value.
    ///  Only: bool, ColorFormat, float, int, string.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property &To: DDN.mscorlib.DNObject read get_To write set_To;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.IBehavior" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Allows to create animation effects
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Animation.IBehaviorFactory')]
  DNIBehaviorFactory = interface(DDN.mscorlib.DNObject)
  ['{D4C36C85-F519-40A1-99B7-07A15FFBB22E}']
  { methods } 

    ///<summary>
    ///  Creates color effect.
    ///</summary>
    ///<returns>Color effect.</returns>
    function CreateColorEffect: DNIColorEffect;
    ///<summary>
    ///  Creates command effect.
    ///</summary>
    ///<returns>Command effect.</returns>
    function CreateCommandEffect: DNICommandEffect;
    ///<summary>
    ///  Creates filter effect.
    ///</summary>
    ///<returns>Filter effect.</returns>
    function CreateFilterEffect: DNIFilterEffect;
    ///<summary>
    ///  Creates motion effect.
    ///</summary>
    ///<returns>Motion effect.</returns>
    function CreateMotionEffect: DNIMotionEffect;
    ///<summary>
    ///  Creates property effect.
    ///</summary>
    ///<returns>Property effect.</returns>
    function CreatePropertyEffect: DNIPropertyEffect;
    ///<summary>
    ///  Creates rotation effect.
    ///</summary>
    ///<returns>Rotation effect.</returns>
    function CreateRotationEffect: DNIRotationEffect;
    ///<summary>
    ///  Creates scale effect.
    ///</summary>
    ///<returns>Scale effect.</returns>
    function CreateScaleEffect: DNIScaleEffect;
    ///<summary>
    ///  Creates set effect.
    ///</summary>
    ///<returns>Set effect.</returns>
    function CreateSetEffect: DNISetEffect;

  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent property types for animation behavior.
  ///  Follows the list of properties from https://msdn.microsoft.com/en-us/library/dd949052(v=office.15).aspx
  ///  and https://msdn.microsoft.com/en-us/library/documentformat.openxml.presentation.attributename(v=office.15).aspx
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IBehaviorProperty')]
  DNIBehaviorProperty = interface(DDN.mscorlib.DNObject)
  ['{9897A30A-1056-40D9-A3AD-6B01DAAA8135}']
  { getters & setters } 

    function get_Value: string;
    function get_IsCustom: Boolean;

  { propertys } 

    ///<summary>
    ///  Value of the property
    ///</summary>
    property Value: string read get_Value;
    ///<summary>
    ///  Shows if this property does not belong to the predefined properties list in the specification:
    ///  https://msdn.microsoft.com/en-us/library/dd949052(v=office.15).aspx
    ///</summary>
    property IsCustom: Boolean read get_IsCustom;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent color offset.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IColorOffset')]
  DNIColorOffset = interface(DDN.mscorlib.DNObject)
  ['{DF2681E2-F6B3-4ABC-A6EB-3E76D44BB0AA}']
  { getters & setters } 

    function get_Value0: Single;
    procedure set_Value0(value: Single);
    function get_Value1: Single;
    procedure set_Value1(value: Single);
    function get_Value2: Single;
    procedure set_Value2(value: Single);

  { propertys } 

    ///<summary>
    ///  Defines first value of offset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value0: Single read get_Value0 write set_Value0;
    ///<summary>
    ///  Defines second value of offset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value1: Single read get_Value1 write set_Value1;
    ///<summary>
    ///  Defines third value of offset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value2: Single read get_Value2 write set_Value2;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents animation effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IEffect')]
  DNIEffect = interface(DDN.mscorlib.DNObject)
  ['{26A4550E-EDF0-413C-9770-2DD7CF36222A}']
  { getters & setters } 

    function get_Sequence: DNISequence;
    function get_TextAnimation: DNITextAnimation;
    function get_PresetClassType: DNEffectPresetClassType;
    procedure set_PresetClassType(value: DNEffectPresetClassType);
    function get_Type: DNEffectType;
    procedure set_Type(value: DNEffectType);
    function get_Subtype: DNEffectSubtype;
    procedure set_Subtype(value: DNEffectSubtype);
    function get_Behaviors: DNIBehaviorCollection;
    procedure set_Behaviors(value: DNIBehaviorCollection);
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);
    function get_TargetShape: DNIShape;

  { propertys } 

    ///<summary>
    ///  Returns a sequence for an effect.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ISequence" />
    ///  .
    ///</summary>
    property Sequence: DNISequence read get_Sequence;
    ///<summary>
    ///  Returns text animation.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ITextAnimation" />
    ///  .
    ///</summary>
    property TextAnimation: DNITextAnimation read get_TextAnimation;
    ///<summary>
    ///  Defines class of effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectPresetClassType" />
    ///  .
    ///</summary>
    property PresetClassType: DNEffectPresetClassType read get_PresetClassType write set_PresetClassType;
    ///<summary>
    ///  Defines type of effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///  .
    ///</summary>
    property &Type: DNEffectType read get_Type write set_Type;
    ///<summary>
    ///  Defines subtype of effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///  .
    ///</summary>
    property Subtype: DNEffectSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Returns collection of behavior for effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IBehaviorCollection" />
    ///  .
    ///</summary>
    property Behaviors: DNIBehaviorCollection read get_Behaviors write set_Behaviors;
    ///<summary>
    ///  Defines timing value for effect.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.ITiming" />
    ///  .
    ///</summary>
    property Timing: DNITiming read get_Timing write set_Timing;
    ///<summary>
    ///  Returns target shape for effect.
    ///  Read-only <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    property TargetShape: DNIShape read get_TargetShape;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent one command of a path.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IMotionCmdPath')]
  DNIMotionCmdPath = interface(DDN.mscorlib.DNObject)
  ['{8D35EC46-596F-4D71-BBD3-94C322355EBF}']
  { getters & setters } 

    function get_Points: TArray<DDN.Aspose.Common.DNPointF>;
    procedure set_Points(value: TArray<DDN.Aspose.Common.DNPointF>);
    function get_CommandType: DNMotionCommandPathType;
    procedure set_CommandType(value: DNMotionCommandPathType);
    function get_IsRelative: Boolean;
    procedure set_IsRelative(value: Boolean);
    function get_PointsType: DNMotionPathPointsType;
    procedure set_PointsType(value: DNMotionPathPointsType);

  { propertys } 

    ///<summary>
    ///  Specifies points of command.
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  [].
    ///</summary>
    property Points: TArray<DDN.Aspose.Common.DNPointF> read get_Points write set_Points;
    ///<summary>
    ///  Specifies command type.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionCommandPathType" />
    ///  .
    ///</summary>
    property CommandType: DNMotionCommandPathType read get_CommandType write set_CommandType;
    ///<summary>
    ///  Determine command coordinates relative or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsRelative: Boolean read get_IsRelative write set_IsRelative;
    ///<summary>
    ///  Specifies command points type
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionPathPointsType" />
    ///  .
    ///</summary>
    property PointsType: DNMotionPathPointsType read get_PointsType write set_PointsType;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent animation point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IPoint')]
  DNIPoint = interface(DDN.mscorlib.DNObject)
  ['{910B8ADB-70C6-4115-B901-727EA03819CA}']
  { getters & setters } 

    function get_Time: Single;
    procedure set_Time(value: Single);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);

  { propertys } 

    ///<summary>
    ///  Represents time value.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Time: Single read get_Time write set_Time;
    ///<summary>
    ///  Represents point value.
    ///  Only: bool, ColorFormat, float, int, string.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Formulas within values, from, to, by attributes can be made up of these:
    ///  Standard arithmetic operators: ‘+’, ‘-‘, ‘*’, ‘/’, ‘^’, ‘%’ (mod)
    ///  Constants: ‘pi’ ‘e’
    ///  Conditional operators: ‘abs’, ‘min’, ‘max’, ‘?’ (if)
    ///  Comparison operators: '==', '&gt;=', '', '!=', '!'
    ///  Trigonometric operators: ‘sin()’, ‘cos()’, ‘tan()’, ‘asin()’, ‘acos()’, ‘atan()’
    ///  Natural logarithm ‘ln()’
    ///  Property references (host supported properties)
    ///  for example: "#ppt_x+(cos(-2*pi*(1-$))*-#ppt_x-sin(-2*pi*(1-$))*(1-#ppt_y))*(1-$)"
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Formula: string read get_Formula write set_Formula;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent text animation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ITextAnimation')]
  DNITextAnimation = interface(DDN.mscorlib.DNObject)
  ['{34998711-9FE7-496C-85E8-8B0F1CB64993}']
  { getters & setters } 

    function get_BuildType: DNBuildType;
    procedure set_BuildType(value: DNBuildType);
    function get_EffectAnimateBackgroundShape: DNIEffect;
    procedure set_EffectAnimateBackgroundShape(value: DNIEffect);

  { methods } 

    ///<summary>
    ///  Add new effect to the end of current sequence to end of group text animations.
    ///  Only valid if count of text paragraphs equal or greater of counts effect of this group!
    ///</summary>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect;

  { propertys } 

    ///<summary>
    ///  List of build type (for exp. Paragraph 1,2,3, All at Once) of text animation.
    ///  Read/write <see cref="P:Aspose.Slides.Animation.ITextAnimation.BuildType" />
    ///  .
    ///</summary>
    property BuildType: DNBuildType read get_BuildType write set_BuildType;
    ///<summary>
    ///  Linked shape effect with group or not (null)
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///  .
    ///</summary>
    property EffectAnimateBackgroundShape: DNIEffect read get_EffectAnimateBackgroundShape write set_EffectAnimateBackgroundShape;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents animation timing.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ITiming')]
  DNITiming = interface(DDN.mscorlib.DNObject)
  ['{2DF4DBC3-F981-4E75-8608-F014384110F7}']
  { getters & setters } 

    function get_Accelerate: Single;
    procedure set_Accelerate(value: Single);
    function get_Decelerate: Single;
    procedure set_Decelerate(value: Single);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_Duration: Single;
    procedure set_Duration(value: Single);
    function get_RepeatCount: Single;
    procedure set_RepeatCount(value: Single);
    function get_RepeatDuration: Single;
    procedure set_RepeatDuration(value: Single);
    function get_Restart: DNEffectRestartType;
    procedure set_Restart(value: DNEffectRestartType);
    function get_Speed: Single;
    procedure set_Speed(value: Single);
    function get_TriggerDelayTime: Single;
    procedure set_TriggerDelayTime(value: Single);
    function get_TriggerType: DNEffectTriggerType;
    procedure set_TriggerType(value: DNEffectTriggerType);

  { propertys } 

    ///<summary>
    ///  Describes the percentage of duration accelerate behavior effect.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Accelerate: Single read get_Accelerate write set_Accelerate;
    ///<summary>
    ///  Describes the percentage of duration decelerate behavior effect.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Decelerate: Single read get_Decelerate write set_Decelerate;
    ///<summary>
    ///  Describes whether to automatically play the animation in reverse after
    ///  playing it in the forward direction.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    ///<summary>
    ///  Describes the duration of animation effect.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Duration: Single read get_Duration write set_Duration;
    ///<summary>
    ///  Describes the number of times the effect should repeat.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RepeatCount: Single read get_RepeatCount write set_RepeatCount;
    ///<summary>
    ///  Describes the number of times the effect should repeat.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RepeatDuration: Single read get_RepeatDuration write set_RepeatDuration;
    ///<summary>
    ///  Specifies if a effect is to restart after complete.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectRestartType" />
    ///  .
    ///</summary>
    property Restart: DNEffectRestartType read get_Restart write set_Restart;
    ///<summary>
    ///  Specifies the percentage by which to speed up (or slow down) the timing.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Speed: Single read get_Speed write set_Speed;
    ///<summary>
    ///  Describes delay time after trigger.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property TriggerDelayTime: Single read get_TriggerDelayTime write set_TriggerDelayTime;
    ///<summary>
    ///  Describes trigger type.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///  .
    ///</summary>
    property TriggerType: DNEffectTriggerType read get_TriggerType write set_TriggerType;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNMotionCmdPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF9B1499-643F-5002-A6AA-593147D555AE}']
  end;

  ///<summary>
  ///  Represent one command of a path.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionCmdPath')]
  DNMotionCmdPath = interface(DDN.mscorlib.DNObject)
  ['{04B90C84-8CF8-3A16-ABD0-3A140B070809}']
  { getters & setters } 

    function get_Points: TArray<DDN.Aspose.Common.DNPointF>;
    procedure set_Points(value: TArray<DDN.Aspose.Common.DNPointF>);
    function get_CommandType: DNMotionCommandPathType;
    procedure set_CommandType(value: DNMotionCommandPathType);
    function get_IsRelative: Boolean;
    procedure set_IsRelative(value: Boolean);
    function get_PointsType: DNMotionPathPointsType;
    procedure set_PointsType(value: DNMotionPathPointsType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies points of command.
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  [].
    ///</summary>
    property Points: TArray<DDN.Aspose.Common.DNPointF> read get_Points write set_Points;
    ///<summary>
    ///  Specifies command type.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionCommandPathType" />
    ///  .
    ///</summary>
    property CommandType: DNMotionCommandPathType read get_CommandType write set_CommandType;
    ///<summary>
    ///  Determine command coordinates relative or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsRelative: Boolean read get_IsRelative write set_IsRelative;
    ///<summary>
    ///  Specifies command points type
    ///  Read/write <see cref="T:Aspose.Slides.Animation.MotionPathPointsType" />
    ///  .
    ///</summary>
    property PointsType: DNMotionPathPointsType read get_PointsType write set_PointsType;
  end;

  TDNMotionCmdPath = class(TDNGenericImport<DNMotionCmdPathClass, DNMotionCmdPath>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNMotionPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EE6DD16-438E-5035-B72C-772FA6DC9A46}']
  { constructors } 

    {class} function init: DNMotionPath;

  end;

  ///<summary>
  ///  Represent motion path.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.MotionPath')]
  DNMotionPath = interface(DDN.mscorlib.DNObject)
  ['{564D7ED4-4219-4DA7-A9EB-BED07E257CED}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Insert new command to path
    ///</summary>
    ///  <param name="index"></param>
    ///  <param name="type"></param>
    ///  <param name="pts"></param>
    ///  <param name="ptsType"></param>
    ///  <param name="bRelativeCoord"></param>
    procedure Insert(index: Int32; &type: DNMotionCommandPathType; pts: TArray<DDN.Aspose.Common.DNPointF>; ptsType: DNMotionPathPointsType; bRelativeCoord: Boolean);
    ///<summary>
    ///  Removes a command at the specified index.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIMotionCmdPath>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of paths in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNMotionPath = class(TDNGenericImport<DNMotionPathClass, DNMotionPath>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7150421E-D746-5326-A50D-592C58B07938}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPoint; overload;
    ///<summary>
    ///  Create animation point with time, value and formula.
    ///</summary>
    ///  <param name="time"></param>
    ///  <param name="value"></param>
    ///  <param name="formula"></param>
    {class} function init(time: Single; value: DDN.mscorlib.DNObject; formula: string): DNPoint; overload;

  end;

  ///<summary>
  ///  Represent animation point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.Point')]
  DNPoint = interface(DDN.mscorlib.DNObject)
  ['{9FA02C54-AF92-4AAF-8E6D-7EE9DA10B48E}']
  { getters & setters } 

    function get_Time: Single;
    procedure set_Time(value: Single);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents time value.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Time: Single read get_Time write set_Time;
    ///<summary>
    ///  Represents point value.
    ///  Only: bool, ColorFormat, float, int, string.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Formulas within values, from, to, by attributes can be made up of these:
    ///  Standard arithmetic operators: ‘+’, ‘-‘, ‘*’, ‘/’, ‘^’, ‘%’ (mod)
    ///  Constants: ‘pi’ ‘e’
    ///  Conditional operators: ‘abs’, ‘min’, ‘max’, ‘?’ (if)
    ///  Comparison operators: '==', '&gt;=', '', '!=', '!'
    ///  Trigonometric operators: ‘sin()’, ‘cos()’, ‘tan()’, ‘asin()’, ‘acos()’, ‘atan()’
    ///  Natural logarithm ‘ln()’
    ///  Property references (host supported properties)
    ///  for example: "#ppt_x+(cos(-2*pi*(1-$))*-#ppt_x-sin(-2*pi*(1-$))*(1-#ppt_y))*(1-$)"
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Formula: string read get_Formula write set_Formula;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BDC357BC-2BCF-5B15-8E9E-203B992A6AAF}']
  { constructors } 

    {class} function init: DNPointCollection;

  end;

  ///<summary>
  ///  Represent collection of animation points.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.PointCollection')]
  DNPointCollection = interface(DDN.mscorlib.DNObject)
  ['{F5FA705F-CC61-4B57-A634-4F5ACBDAE875}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPoint>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of points in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNPointCollection = class(TDNGenericImport<DNPointCollectionClass, DNPointCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNSequenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC1305A6-D3E0-53E8-8D05-31B064946E7A}']
  end;

  ///<summary>
  ///  Represents sequence (collection of effects).
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.Sequence')]
  DNSequence = interface(DDN.mscorlib.DNObject)
  ['{C49BF10C-6D6A-30D1-B185-F27AADB35CE3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_TriggerShape: DNIShape;
    procedure set_TriggerShape(value: DNIShape);

  { methods } 

    ///<summary>
    ///  Removes an effect from a collection.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIEffect>;
    ///<summary>
    ///  Remove effect for the specified shape.
    ///</summary>
    procedure RemoveByShape(shape: DNIShape);
    ///<summary>
    ///  Returns array of effects for the specified shape.
    ///</summary>
    function GetEffectsByShape(shape: DNIShape): TArray<DNIEffect>;
    ///<summary>
    ///  Returns array of effects for the specified paragraph.
    ///</summary>
    function GetEffectsByParagraph(paragraph: DNIParagraph): TArray<DNIEffect>;
    ///<summary>
    ///  Returns count of effects for the specified shape.
    ///</summary>
    function GetCount(shape: DNIShape): Int32;
    ///<summary>
    ///  Add new effect to the end of sequence.
    ///</summary>
    ///  <param name="shape">Shape object <see cref="T:Aspose.Slides.IShape" />
    ///  for adding an effect</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(shape: DNIShape; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    ///<summary>
    ///  Add new animation effect for paragraph to the end of sequence.
    ///</summary>
    ///  <param name="paragraph">Paragraph object <see cref="T:Aspose.Slides.IParagraph" />
    ///</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    ///<example><code>
    ///  [C#]
    ///  using(Presentation presentation = new Presentation(path + "input.pptx"))
    ///  {
    ///  // select paragraph to add effect
    ///  IAutoShape autoShape = (IAutoShape)presentation.Slides[0].Shapes[0];
    ///  IParagraph paragraph = autoShape.TextFrame.Paragraphs[0];
    ///  // add Fly animation effect to selected paragraph
    ///  IEffect effect = presentation.Slides[0].Timeline.MainSequence.AddEffect(
    ///  paragraph, EffectType.Fly, EffectSubtype.Left, EffectTriggerType.OnClick);
    ///  }
    ///</code></example>
    function AddEffect(paragraph: DNIParagraph; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    ///<summary>
    ///  Adds the new chart animation effect for category or series to the end of sequence.
    ///</summary>
    ///  <param name="chart">Chart object <see cref="T:Aspose.Slides.Charts.IChart" />
    ///</param>
    ///  <param name="type">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectChartMinorGroupingType" />
    ///</param>
    ///  <param name="index">Index <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(chart: DNIChart; &type: DNEffectChartMajorGroupingType; index: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    ///<summary>
    ///  Adds the new chart animation effect for elements in category or series to the end of sequence.
    ///</summary>
    ///  <param name="chart">Chart object <see cref="T:Aspose.Slides.Charts.IChart" />
    ///</param>
    ///  <param name="type">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectChartMinorGroupingType" />
    ///</param>
    ///  <param name="seriesIndex">Index of chart series <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="categoriesIndex">Index of category <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(chart: DNIChart; &type: DNEffectChartMinorGroupingType; seriesIndex: Int32; categoriesIndex: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of effects in a sequense.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns or sets shape target for INTERACTIVE sequence.
    ///  If sequence is not interactive then returns null.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    property TriggerShape: DNIShape read get_TriggerShape write set_TriggerShape;
  end;

  TDNSequence = class(TDNGenericImport<DNSequenceClass, DNSequence>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNSequenceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6448537D-4B2D-59DA-A186-24195F162985}']
  end;

  ///<summary>
  ///  Represents collection of interactive sequences.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.SequenceCollection')]
  DNSequenceCollection = interface(DDN.mscorlib.DNObject)
  ['{7B8E1828-20F1-3953-A30C-5A05246750F7}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Removes sequence at the specified index.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISequence>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of elements in a collection
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNSequenceCollection = class(TDNGenericImport<DNSequenceCollectionClass, DNSequenceCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNTextAnimationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8693E43-9648-5300-8D77-0E578472B5B4}']
  { constructors } 

    {class} function init: DNTextAnimation;

  end;

  ///<summary>
  ///  Represent text animation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.TextAnimation')]
  DNTextAnimation = interface(DDN.mscorlib.DNObject)
  ['{59738259-8EAE-43C8-9706-3F497D83C51F}']
  { getters & setters } 

    function get_BuildType: DNBuildType;
    procedure set_BuildType(value: DNBuildType);
    function get_EffectAnimateBackgroundShape: DNIEffect;
    procedure set_EffectAnimateBackgroundShape(value: DNIEffect);

  { methods } 

    ///<summary>
    ///  Add new effect to the end of current sequence to end of group text animations.
    ///  Only valid if count of text paragraphs equal or greater of counts effect of this group!
    ///</summary>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  List of build type (for exp. Paragraph 1,2,3, All at Once) of text animation.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.BuildType" />
    ///  .
    ///</summary>
    property BuildType: DNBuildType read get_BuildType write set_BuildType;
    ///<summary>
    ///  Linked shape effect with group or not (null).
    ///  Read/write <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///  .
    ///</summary>
    property EffectAnimateBackgroundShape: DNIEffect read get_EffectAnimateBackgroundShape write set_EffectAnimateBackgroundShape;
  end;

  TDNTextAnimation = class(TDNGenericImport<DNTextAnimationClass, DNTextAnimation>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNTextAnimationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{891AA777-EA84-52A9-AB11-E9C8211BAD8C}']
  { constructors } 

    {class} function init: DNTextAnimationCollection;

  end;

  ///<summary>
  ///  Represents collection of text animations.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.TextAnimationCollection')]
  DNTextAnimationCollection = interface(DDN.mscorlib.DNObject)
  ['{79B05421-F59C-47C5-8243-2B7ED665241D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds new text animation to the collection.
    ///</summary>
    ///<returns>Added <c>TextAnimation</c></returns>
    function Add: DNTextAnimation;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNITextAnimation>;
    ///<summary>
    ///  Copies all elements from the collection into the specified array.
    ///</summary>
    ///  <param name="array">Array to fill.</param>
    ///  <param name="index">Starting position in target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of elements in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNTextAnimationCollection = class(TDNGenericImport<DNTextAnimationCollectionClass, DNTextAnimationCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNTimingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{529DBCB9-118D-51E4-B888-58C0A90EC429}']
  { constructors } 

    {class} function init: DNTiming;

  end;

  ///<summary>
  ///  Represents animation timing.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.Timing')]
  DNTiming = interface(DDN.mscorlib.DNObject)
  ['{CF27B728-1DA1-4424-8E8E-A93C1CC535B4}']
  { getters & setters } 

    function get_Accelerate: Single;
    procedure set_Accelerate(value: Single);
    function get_Decelerate: Single;
    procedure set_Decelerate(value: Single);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_Duration: Single;
    procedure set_Duration(value: Single);
    function get_RepeatCount: Single;
    procedure set_RepeatCount(value: Single);
    function get_RepeatDuration: Single;
    procedure set_RepeatDuration(value: Single);
    function get_Restart: DNEffectRestartType;
    procedure set_Restart(value: DNEffectRestartType);
    function get_Speed: Single;
    procedure set_Speed(value: Single);
    function get_TriggerDelayTime: Single;
    procedure set_TriggerDelayTime(value: Single);
    function get_TriggerType: DNEffectTriggerType;
    procedure set_TriggerType(value: DNEffectTriggerType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Describes the percentage of duration accelerate behavior effect.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Accelerate: Single read get_Accelerate write set_Accelerate;
    ///<summary>
    ///  Describes the percentage of duration decelerate behavior effect.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Decelerate: Single read get_Decelerate write set_Decelerate;
    ///<summary>
    ///  Describes whether to automatically play the animation in reverse after
    ///  playing it in the forward direction.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    ///<summary>
    ///  Describes the duration of animation effect.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Duration: Single read get_Duration write set_Duration;
    ///<summary>
    ///  Describes the number of times the effect should repeat.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RepeatCount: Single read get_RepeatCount write set_RepeatCount;
    ///<summary>
    ///  Describes the number of times the effect should repeat.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RepeatDuration: Single read get_RepeatDuration write set_RepeatDuration;
    ///<summary>
    ///  Specifies if a effect is to restart after complete.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectRestartType" />
    ///  .
    ///</summary>
    property Restart: DNEffectRestartType read get_Restart write set_Restart;
    ///<summary>
    ///  Specifies the percentage by which to speed up (or slow down) the timing.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Speed: Single read get_Speed write set_Speed;
    ///<summary>
    ///  Describes delay time after trigger.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property TriggerDelayTime: Single read get_TriggerDelayTime write set_TriggerDelayTime;
    ///<summary>
    ///  Describes trigger type.
    ///  Read/write <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///  .
    ///</summary>
    property TriggerType: DNEffectTriggerType read get_TriggerType write set_TriggerType;
  end;

  TDNTiming = class(TDNGenericImport<DNTimingClass, DNTiming>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAudioClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D049C7D9-3815-5D86-AD27-F1BFC65AE66B}']
  end;

  ///<summary>
  ///  Represents an embedded audio file.
  ///</summary>
  [DNTypeName('Aspose.Slides.Audio')]
  DNAudio = interface(DDN.mscorlib.DNObject)
  ['{7FB08F4E-F02C-31B6-B9AC-2278FBBD3019}']
  { getters & setters } 

    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_BinaryData: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  Returns Stream stream for reading.
    ///  Use 'using' or close stream after using.
    ///</summary>
    ///<returns>Stream for reading.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a MIME type of an audio, encoded in <see cref="P:Aspose.Slides.Audio.BinaryData" />
    ///  .
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  Returns the copy of an audio's data. In case of large amount of data consider
    ///  using of <see cref="M:Aspose.Slides.Audio.GetStream" />
    ///  method to prevent unnecessary  loading of audio's
    ///  data into memory or even OutOfMemoryException.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  TDNAudio = class(TDNGenericImport<DNAudioClass, DNAudio>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAudioCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A018AD97-214D-50A9-BD29-B86FC17969A4}']
  end;

  ///<summary>
  ///  Represents a collection of embedded audio files.
  ///</summary>
  [DNTypeName('Aspose.Slides.AudioCollection')]
  DNAudioCollection = interface(DDN.mscorlib.DNObject)
  ['{65B92ABA-4026-389A-A6DF-7FA21949EC98}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of an audio file from an another presentation.
    ///</summary>
    ///  <param name="audio">Source audio.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(audio: DNIAudio): DNIAudio; overload;
    ///<summary>
    ///  Creates and adds a audio to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add audio from.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(stream: DDN.mscorlib.DNStream): DNIAudio; overload;
    ///<summary>
    ///  Creates and adds a audio to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add video audio from.</param>
    ///  <param name="loadingStreamBehavior">The behavior which will be applied to the stream.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIAudio; overload;
    ///<summary>
    ///  Creates and adds a audio to a presentation from byte array.
    ///</summary>
    ///  <param name="audioData">Audio bytes.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(audioData: TArray<Byte>): DNIAudio; overload;
    ///<summary>
    ///  Copies audios to specified array starting from specified index.
    ///</summary>
    ///  <param name="array">Array.</param>
    ///  <param name="index">Index.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIAudio>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of audio files in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNAudioCollection = class(TDNGenericImport<DNAudioCollectionClass, DNAudioCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseHeaderFooterManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D0331415-1237-5939-B2B1-EE415A10D953}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.
  ///</summary>
  [DNTypeName('Aspose.Slides.BaseHeaderFooterManager')]
  DNBaseHeaderFooterManager = interface(DDN.mscorlib.DNObject)
  ['{F5BA929A-D85A-3D33-850D-61FED4B77BB6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseHeaderFooterManager = class(TDNGenericImport<DNBaseHeaderFooterManagerClass, DNBaseHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseSlideHeaderFooterManagerClass = interface(DNBaseHeaderFooterManagerClass)
  ['{FFC54AAF-778F-59FD-87E6-2E0AA50322D7}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.
  ///</summary>
  [DNTypeName('Aspose.Slides.BaseSlideHeaderFooterManager')]
  DNBaseSlideHeaderFooterManager = interface(DNBaseHeaderFooterManager)
  ['{2C8C2A45-157D-3917-89D5-3A627D9C7B86}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes slide footer placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholder visible, otherwise - hides it.</param>
    procedure SetFooterVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide page number placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholder visible, otherwise - hides it.</param>
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide date-time placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholder visible, otherwise - hides it.</param>
    procedure SetDateTimeVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide footer placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterText(text: string);
    ///<summary>
    ///  Sets text to slide date-time placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a footer placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    ///<summary>
    ///  Gets value indicating that a page number placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    ///<summary>
    ///  Gets value indicating that a date-time placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNBaseSlideHeaderFooterManager = class(TDNGenericImport<DNBaseSlideHeaderFooterManagerClass, DNBaseSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseHandoutNotesSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{1E585A45-B423-5A68-B202-A376517F4A07}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the placeholders, including header placeholder for all types handout and notes slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.BaseHandoutNotesSlideHeaderFooterManager')]
  DNBaseHandoutNotesSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{895ECC2A-B5E3-3138-84AC-4400EFA253B3}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes slide header placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholder visible, otherwise - hides it.</param>
    procedure SetHeaderVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide header placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderText(text: string);
    ///<summary>
    ///  Changes slide footer placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholder visible, otherwise - hides it.</param>
    procedure SetFooterVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide page number placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholder visible, otherwise - hides it.</param>
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide date-time placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholder visible, otherwise - hides it.</param>
    procedure SetDateTimeVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide footer placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterText(text: string);
    ///<summary>
    ///  Sets text to slide date-time placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a header placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    ///<summary>
    ///  Gets value indicating that a footer placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    ///<summary>
    ///  Gets value indicating that a page number placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    ///<summary>
    ///  Gets value indicating that a date-time placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNBaseHandoutNotesSlideHeaderFooterManager = class(TDNGenericImport<DNBaseHandoutNotesSlideHeaderFooterManagerClass, DNBaseHandoutNotesSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterHandoutSlideHeaderFooterManagerClass = interface(DNBaseHandoutNotesSlideHeaderFooterManagerClass)
  ['{1A45C2AC-D7C4-54EA-A43C-D3E131CDFFF8}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the master handout slide placeholders, including header placeholder.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterHandoutSlideHeaderFooterManager')]
  DNMasterHandoutSlideHeaderFooterManager = interface(DNBaseHandoutNotesSlideHeaderFooterManager)
  ['{10E1B10E-AF27-36F2-8D1E-A5C96745F93B}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes slide header placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholder visible, otherwise - hides it.</param>
    procedure SetHeaderVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide header placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a header placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNMasterHandoutSlideHeaderFooterManager = class(TDNGenericImport<DNMasterHandoutSlideHeaderFooterManagerClass, DNMasterHandoutSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterNotesSlideHeaderFooterManagerClass = interface(DNBaseHandoutNotesSlideHeaderFooterManagerClass)
  ['{6E396598-6690-505C-8E69-B7E6539CEC62}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the master notes slide footer, date-time, page number placeholders and all child placeholders.
  ///  Child placeholders mean placeholders are contained on depending notes slides.
  ///  Depending notes slides use and depend on master notes slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterNotesSlideHeaderFooterManager')]
  DNMasterNotesSlideHeaderFooterManager = interface(DNBaseHandoutNotesSlideHeaderFooterManager)
  ['{4BB4B4C5-3993-33CF-97E4-0873CD2B2BF9}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes master notes slide header placeholder and all child header placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholders visible, otherwise - hides them.</param>
    procedure SetHeaderAndChildHeadersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to master notes slide header placeholder and all child header placeholders.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderAndChildHeadersText(text: string);
    ///<summary>
    ///  Changes master slide footer placeholder and all child footer placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master slide page number placeholder and all child page number placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master slide date-time placeholder and all child date-time placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to master slide footer placeholder and all child footer placeholders.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterAndChildFootersText(text: string);
    ///<summary>
    ///  Sets text to master slide date-time placeholder and all child date-time placeholders.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeAndChildDateTimesText(text: string);
    ///<summary>
    ///  Changes slide header placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholder visible, otherwise - hides it.</param>
    procedure SetHeaderVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide header placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a header placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNMasterNotesSlideHeaderFooterManager = class(TDNGenericImport<DNMasterNotesSlideHeaderFooterManagerClass, DNMasterNotesSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSlideHeaderFooterManagerClass = interface(DNBaseHandoutNotesSlideHeaderFooterManagerClass)
  ['{7067BDE1-0B36-5DEA-B40C-4F1B82F8D30C}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the notes slide placeholders, including header placeholder.
  ///</summary>
  [DNTypeName('Aspose.Slides.NotesSlideHeaderFooterManager')]
  DNNotesSlideHeaderFooterManager = interface(DNBaseHandoutNotesSlideHeaderFooterManager)
  ['{FD13F041-2EE6-3899-9F8E-36B563ED0F23}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes slide header placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholder visible, otherwise - hides it.</param>
    procedure SetHeaderVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide header placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a header placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNNotesSlideHeaderFooterManager = class(TDNGenericImport<DNNotesSlideHeaderFooterManagerClass, DNNotesSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLayoutSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{9233F512-A637-504D-B0EA-F006A3C81C51}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the layout slide footer, date-time, page number placeholders and all child placeholders.
  ///  Child placeholders mean placeholders are contained on depending slides.
  ///  Depending slides use and depend on layout slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.LayoutSlideHeaderFooterManager')]
  DNLayoutSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{BF25B65B-13ED-35A5-AB9A-5882A5523839}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes layout slide footer placeholder and all child footer placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes layout slide page number placeholder and all child page number placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes layout slide date-time placeholder and all child date-time placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to layout slide footer placeholder and all child footer placeholders.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterAndChildFootersText(text: string);
    ///<summary>
    ///  Sets text to layout slide date-time placeholder and all child date-time placeholders.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeAndChildDateTimesText(text: string);
    ///<summary>
    ///  Changes slide footer placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholder visible, otherwise - hides it.</param>
    procedure SetFooterVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide page number placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholder visible, otherwise - hides it.</param>
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide date-time placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholder visible, otherwise - hides it.</param>
    procedure SetDateTimeVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide footer placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterText(text: string);
    ///<summary>
    ///  Sets text to slide date-time placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a footer placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    ///<summary>
    ///  Gets value indicating that a page number placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    ///<summary>
    ///  Gets value indicating that a date-time placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNLayoutSlideHeaderFooterManager = class(TDNGenericImport<DNLayoutSlideHeaderFooterManagerClass, DNLayoutSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{78DF095C-950D-59BB-9ED0-409405528698}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the master slide footer, date-time, page number placeholders and all child placeholders.
  ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
  ///  Depending layout slides and slides use and depend on master slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterSlideHeaderFooterManager')]
  DNMasterSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{87F905AD-B639-3598-B143-2C5C0E6232B3}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes master slide footer placeholder and all child footer placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master slide page number placeholder and all child page number placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master slide date-time placeholder and all child date-time placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to master slide footer placeholder and all child footer placeholders.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterAndChildFootersText(text: string);
    ///<summary>
    ///  Sets text to master slide date-time placeholder and all child date-time placeholders.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeAndChildDateTimesText(text: string);
    ///<summary>
    ///  Changes slide footer placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholder visible, otherwise - hides it.</param>
    procedure SetFooterVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide page number placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholder visible, otherwise - hides it.</param>
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide date-time placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholder visible, otherwise - hides it.</param>
    procedure SetDateTimeVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide footer placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterText(text: string);
    ///<summary>
    ///  Sets text to slide date-time placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a footer placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    ///<summary>
    ///  Gets value indicating that a page number placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    ///<summary>
    ///  Gets value indicating that a date-time placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNMasterSlideHeaderFooterManager = class(TDNGenericImport<DNMasterSlideHeaderFooterManagerClass, DNMasterSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{615F81FE-F42A-5A85-B90E-B03A1A11186A}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of the slide footer, date-time, page number placeholders.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideHeaderFooterManager')]
  DNSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{B1CC3E2B-C403-37FE-AF2C-20B7A6EA8620}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Changes slide footer placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholder visible, otherwise - hides it.</param>
    procedure SetFooterVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide page number placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholder visible, otherwise - hides it.</param>
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide date-time placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholder visible, otherwise - hides it.</param>
    procedure SetDateTimeVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide footer placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterText(text: string);
    ///<summary>
    ///  Sets text to slide date-time placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a footer placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    ///<summary>
    ///  Gets value indicating that a page number placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    ///<summary>
    ///  Gets value indicating that a date-time placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNSlideHeaderFooterManager = class(TDNGenericImport<DNSlideHeaderFooterManagerClass, DNSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationHeaderFooterManagerClass = interface(DNBaseHeaderFooterManagerClass)
  ['{5E9BEE21-24FA-58E6-B73C-51F39AD14C5E}']
  end;

  ///<summary>
  ///  Represents manager which holds behavior of all footer, date-time and page number placeholders of presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.PresentationHeaderFooterManager')]
  DNPresentationHeaderFooterManager = interface(DNBaseHeaderFooterManager)
  ['{387D2894-27E5-3D09-95F1-A61060F0EC25}']
  { methods } 

    ///<summary>
    ///  Changes all header placeholders visibility, including notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholders visible, otherwise - hides them.</param>
    procedure SetAllHeadersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes all footer placeholders visibility, including master slides, layout slides, slides,
    ///  notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetAllFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes all page number placeholders visibility, including master slides, layout slides, slides,
    ///  notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetAllSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes all date-time placeholders visibility, including master slides, layout slides, slides,
    ///  notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetAllDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to all header placeholders, including notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetAllHeadersText(text: string);
    ///<summary>
    ///  Sets text to all footer placeholders, including master slides, layout slides, slides,
    ///  notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetAllFootersText(text: string);
    ///<summary>
    ///  Sets text to all date-time placeholders, including master slides, layout slides, slides,
    ///  notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetAllDateTimesText(text: string);
    ///<summary>
    ///  Changes the footer, date-time and page number placeholders visibility for all title slides and for first layout slide.
    ///  Title slides – slides based on first layout slide (regardless of type of this first layout).
    ///</summary>
    ///  <param name="isVisible">true - makes a placeholders visible, otherwise - hides them.</param>
    procedure SetVisibilityOnAllTitleSlides(isVisible: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPresentationHeaderFooterManager = class(TDNGenericImport<DNPresentationHeaderFooterManagerClass, DNPresentationHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseShapeLockClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD332F5A-27CA-5B63-8A71-C84D62E460AF}']
  end;

  ///<summary>
  ///  Represents a base class for locks (disabled operation).
  ///</summary>
  [DNTypeName('Aspose.Slides.BaseShapeLock')]
  DNBaseShapeLock = interface(DDN.mscorlib.DNObject)
  ['{EB6FCA1B-2DDB-3BA8-A881-7479F9D94610}']
  { getters & setters } 

    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNBaseShapeLock = class(TDNGenericImport<DNBaseShapeLockClass, DNBaseShapeLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAutoShapeLockClass = interface(DNBaseShapeLockClass)
  ['{33F7BFFA-6BE6-5E36-9CA9-37C329676FEC}']
  end;

  ///<summary>
  ///  Determines which operations are disabled on the parent AutoshapeEx.
  ///</summary>
  [DNTypeName('Aspose.Slides.AutoShapeLock')]
  DNAutoShapeLock = interface(DNBaseShapeLock)
  ['{95D36C4E-1C54-3B07-8DE2-7403A41A528D}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_TextLocked: Boolean;
    procedure set_TextLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether an adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether a selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether a changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    ///<summary>
    ///  Determines whether a shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether a moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether a resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Determines whether a direct changing of contour of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    ///<summary>
    ///  Determines whether a changing adjust values is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    ///<summary>
    ///  Determines whether a changing arrowheads is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    ///<summary>
    ///  Determines whether a changing of a shape type is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    ///<summary>
    ///  Determines whether an editing of text is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property TextLocked: Boolean read get_TextLocked write set_TextLocked;
    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNAutoShapeLock = class(TDNGenericImport<DNAutoShapeLockClass, DNAutoShapeLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNConnectorLockClass = interface(DNBaseShapeLockClass)
  ['{43712512-585D-5805-9609-0EE1F6EB6448}']
  end;

  ///<summary>
  ///  Determines which operations are disabled on the parent Connector.
  ///</summary>
  [DNTypeName('Aspose.Slides.ConnectorLock')]
  DNConnectorLock = interface(DNBaseShapeLock)
  ['{164D4E0D-1D41-3B29-9A18-D61B137A8F4C}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionMove: Boolean;
    procedure set_PositionMove(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether an adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether a selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether a changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    ///<summary>
    ///  Determines whether a shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether a moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionMove: Boolean read get_PositionMove write set_PositionMove;
    ///<summary>
    ///  Determines whether a resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Determines whether a direct changing of contour of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    ///<summary>
    ///  Determines whether a changing adjust values is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    ///<summary>
    ///  Determines whether a changing arrowheads is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    ///<summary>
    ///  Determines whether a changing of a shape type is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNConnectorLock = class(TDNGenericImport<DNConnectorLockClass, DNConnectorLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGraphicalObjectLockClass = interface(DNBaseShapeLockClass)
  ['{1B05B290-D56C-5D31-BAB4-A8423F96B130}']
  end;

  ///<summary>
  ///  Determines which operations are disabled on the parent GraphicalObject.
  ///</summary>
  [DNTypeName('Aspose.Slides.GraphicalObjectLock')]
  DNGraphicalObjectLock = interface(DNBaseShapeLock)
  ['{61A6E782-4825-3C4E-8F4C-29316F8025C3}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_DrilldownLocked: Boolean;
    procedure set_DrilldownLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether selecting subshapes of this object is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DrilldownLocked: Boolean read get_DrilldownLocked write set_DrilldownLocked;
    ///<summary>
    ///  Determines whether selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNGraphicalObjectLock = class(TDNGenericImport<DNGraphicalObjectLockClass, DNGraphicalObjectLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGroupShapeLockClass = interface(DNBaseShapeLockClass)
  ['{4E68DFD5-3A12-5E48-95D2-5D05B17B9123}']
  end;

  ///<summary>
  ///  Determines which operations are disabled on the parent GroupShape.
  ///</summary>
  [DNTypeName('Aspose.Slides.GroupShapeLock')]
  DNGroupShapeLock = interface(DNBaseShapeLock)
  ['{AF8F4078-8F82-3108-8A31-45BACFD34884}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_UngroupingLocked: Boolean;
    procedure set_UngroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether splitting this groupshape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UngroupingLocked: Boolean read get_UngroupingLocked write set_UngroupingLocked;
    ///<summary>
    ///  Determines whether selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    ///<summary>
    ///  Determines whether shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNGroupShapeLock = class(TDNGenericImport<DNGroupShapeLockClass, DNGroupShapeLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureFrameLockClass = interface(DNBaseShapeLockClass)
  ['{8F52277C-28BD-5BC2-AB28-1F0C07DBFEA5}']
  end;

  ///<summary>
  ///  Determines which operations are disabled on the parent PictureFrame.
  ///</summary>
  [DNTypeName('Aspose.Slides.PictureFrameLock')]
  DNPictureFrameLock = interface(DNBaseShapeLock)
  ['{16A41EBA-4A30-3A6F-8FC9-F8C7639B6BB7}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_CropLocked: Boolean;
    procedure set_CropLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether an adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether a selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether a changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    ///<summary>
    ///  Determines whether a shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether a moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether a resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Determines whether a direct changing of contour of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    ///<summary>
    ///  Determines whether a changing adjust values is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    ///<summary>
    ///  Determines whether a changing arrowheads is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    ///<summary>
    ///  Determines whether a changing of a shape type is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    ///<summary>
    ///  Determines whether an image cropping is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CropLocked: Boolean read get_CropLocked write set_CropLocked;
    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNPictureFrameLock = class(TDNGenericImport<DNPictureFrameLockClass, DNPictureFrameLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseSlideClass = interface(DDN.mscorlib.DNObjectClass)
  ['{074A9D29-AE66-518F-8202-CC6DD9FE1ED1}']
  end;

  ///<summary>
  ///  Represents common data for all slide types.
  ///</summary>
  [DNTypeName('Aspose.Slides.BaseSlide')]
  DNBaseSlide = interface(DDN.mscorlib.DNObject)
  ['{417A38EF-51DD-3A80-9A3F-1F822A1F7C07}']
  { getters & setters } 

    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  For master slide itself this property always returns <c>false</c>.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">Thrown if set <c>true</c> for master slide.</exception>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNBaseSlide = class(TDNGenericImport<DNBaseSlideClass, DNBaseSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLayoutSlideClass = interface(DNBaseSlideClass)
  ['{9B2E23BE-DB09-5B91-812E-14B58548E77C}']
  end;

  ///<summary>
  ///  Represents a layout slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.LayoutSlide')]
  DNLayoutSlide = interface(DNBaseSlide)
  ['{724A61C2-A9C7-3F23-B778-58CA7E09DA03}']
  { getters & setters } 

    function get_HeaderFooterManager: DNILayoutSlideHeaderFooterManager;
    function get_MasterSlide: DNIMasterSlide;
    procedure set_MasterSlide(value: DNIMasterSlide);
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_LayoutType: DNSlideLayoutType;
    function get_HasDependingSlides: Boolean;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Returns an array with all slides, which depend on this layout slide.
    ///</summary>
    ///<returns></returns>
    function GetDependingSlides: TArray<DNISlide>;
    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the layout slide.
    ///  Read-only <see cref="T:Aspose.Slides.ILayoutSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNILayoutSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns or sets the master slide for a layout.
    ///  Read/write <see cref="T:Aspose.Slides.IMasterSlide" />
    ///  .
    ///</summary>
    property MasterSlide: DNIMasterSlide read get_MasterSlide write set_MasterSlide;
    ///<summary>
    ///  Returns the overriding theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns layout type of this layout slide.
    ///  Read-only <see cref="T:Aspose.Slides.SlideLayoutType" />
    ///  .
    ///</summary>
    property LayoutType: DNSlideLayoutType read get_LayoutType;
    ///<summary>
    ///  Returns true if there exists at least one slide that depends on this layout slide.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNLayoutSlide = class(TDNGenericImport<DNLayoutSlideClass, DNLayoutSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterHandoutSlideClass = interface(DNBaseSlideClass)
  ['{F89E381A-8F26-5238-B409-1BAA4AAA17A6}']
  end;

  ///<summary>
  ///  Represents master slide for handouts.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterHandoutSlide')]
  DNMasterHandoutSlide = interface(DNBaseSlide)
  ['{3677F475-914F-3855-8131-553E8FF32513}']
  { getters & setters } 

    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager;
    function get_ThemeManager: DNIMasterThemeManager;
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  For master slide itself this property always returns <c>false</c>.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">Thrown if set <c>true</c> for master slide.</exception>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns HeaderFooter manager of the master handout slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterHandoutSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns the theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterHandoutSlide = class(TDNGenericImport<DNMasterHandoutSlideClass, DNMasterHandoutSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterNotesSlideClass = interface(DNBaseSlideClass)
  ['{2DBBF7D4-DABC-5987-82A5-D5D236FAA18B}']
  end;

  ///<summary>
  ///  Represents master slide for notes.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterNotesSlide')]
  DNMasterNotesSlide = interface(DNBaseSlide)
  ['{99A32AE6-66F8-3105-85D5-EA653D38A00C}']
  { getters & setters } 

    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager;
    function get_ThemeManager: DNIMasterThemeManager;
    function get_NotesStyle: DNITextStyle;
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  For master slide itself this property always returns <c>false</c>.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">Thrown if set <c>true</c> for master slide.</exception>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns HeaderFooter manager of the master notes slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterHandoutSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns the theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns the style of a notes text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property NotesStyle: DNITextStyle read get_NotesStyle;
    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterNotesSlide = class(TDNGenericImport<DNMasterNotesSlideClass, DNMasterNotesSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterSlideClass = interface(DNBaseSlideClass)
  ['{082B1536-D238-529A-806F-DC977FF26B50}']
  end;

  ///<summary>
  ///  Represents a master slide in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterSlide')]
  DNMasterSlide = interface(DNBaseSlide)
  ['{D15FFD94-209F-36C1-A86F-209BA6FB912E}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterSlideHeaderFooterManager;
    function get_TitleStyle: DNITextStyle;
    function get_BodyStyle: DNITextStyle;
    function get_OtherStyle: DNITextStyle;
    function get_LayoutSlides: DNIMasterLayoutSlideCollection;
    function get_Preserve: Boolean;
    procedure set_Preserve(value: Boolean);
    function get_HasDependingSlides: Boolean;
    function get_ThemeManager: DNIMasterThemeManager;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Creates a new master slide based on the current one, applying an external theme to it
    ///  and applies the created master slide to all dependent slides.
    ///</summary>
    ///  <param name="fname">Path to the external theme file (.thmx).</param>
    ///<exception cref="T:Aspose.Slides.PptxReadException">When external theme cannot be applied.</exception><returns>New themed MasterSlide.</returns>
    function ApplyExternalThemeToDependingSlides(fname: string): DNIMasterSlide;
    ///<summary>
    ///  Returns an array with all slides, which depend on this master slide.
    ///</summary>
    ///<returns></returns>
    function GetDependingSlides: TArray<DNISlide>;
    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the master slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIMasterSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns the style of a title text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property TitleStyle: DNITextStyle read get_TitleStyle;
    ///<summary>
    ///  Returns the style of a body text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property BodyStyle: DNITextStyle read get_BodyStyle;
    ///<summary>
    ///  Returns the style of an other text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property OtherStyle: DNITextStyle read get_OtherStyle;
    ///<summary>
    ///  Returns the collection of child layout slides for this master slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterLayoutSlideCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  You can access to alternative API for adding/inserting/removing/cloning layout slides
    ///  by using <see cref="P:Aspose.Slides.IPresentation.LayoutSlides" />
    ///  property.
    ///</remarks>
    property LayoutSlides: DNIMasterLayoutSlideCollection read get_LayoutSlides;
    ///<summary>
    ///  Determines whether the corresponding master is deleted when all the slides that follow that master are deleted.
    ///  Note: Aspose.Slides will never remove any unused master by itself, to actually remove unused masters call <see cref="M:Aspose.Slides.MasterSlideCollection.RemoveUnused(System.Boolean)" />
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Preserve: Boolean read get_Preserve write set_Preserve;
    ///<summary>
    ///  Returns true if there exists at least one slide that depends on this master slide.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    ///<summary>
    ///  Returns the theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns or sets the name of a master slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  For master slide itself this property always returns <c>false</c>.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">Thrown if set <c>true</c> for master slide.</exception>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterSlide = class(TDNGenericImport<DNMasterSlideClass, DNMasterSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSlideClass = interface(DNBaseSlideClass)
  ['{74D694CD-C61E-56F6-B976-B333263E91A0}']
  end;

  ///<summary>
  ///  Represents a notes slide in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.NotesSlide')]
  DNNotesSlide = interface(DNBaseSlide)
  ['{25DC4200-AFC1-33AE-A96B-3FB4922BA253}']
  { getters & setters } 

    function get_HeaderFooterManager: DNINotesSlideHeaderFooterManager;
    function get_NotesTextFrame: DNITextFrame;
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_ParentSlide: DNISlide;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the notes slide.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNINotesSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns a TextFrame with notes' text if there is one.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property NotesTextFrame: DNITextFrame read get_NotesTextFrame;
    ///<summary>
    ///  Returns the overriding theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns the parent slide.
    ///  Read-only <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    property ParentSlide: DNISlide read get_ParentSlide;
    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNNotesSlide = class(TDNGenericImport<DNNotesSlideClass, DNNotesSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideClass = interface(DNBaseSlideClass)
  ['{C9F1929A-A5B7-5400-B063-3448FDDB8040}']
  end;

  ///<summary>
  ///  Represents a slide in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Slide')]
  DNSlide = interface(DNBaseSlide)
  ['{A99E2439-2B9A-34B0-83FA-84BAD58CCB48}']
  { getters & setters } 

    function get_HeaderFooterManager: DNISlideHeaderFooterManager;
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_SlideNumber: Int32;
    procedure set_SlideNumber(value: Int32);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_LayoutSlide: DNILayoutSlide;
    procedure set_LayoutSlide(value: DNILayoutSlide);
    function get_NotesSlideManager: DNINotesSlideManager;
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Returns a Thumbnail Bitmap object with custom scaling.
    ///</summary>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap object.</returns>
    function GetThumbnail(scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Image object (20% of real size).
    ///</summary>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with specified size.
    ///</summary>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap object.</returns>
    function GetThumbnail(imageSize: DDN.Aspose.Common.DNSize): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail tiff bitmap object with specified parameters.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///<returns>Bitmap object.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when options.NotesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull.</exception>
    function GetThumbnail(options: DNITiffOptions): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with custom scaling.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with specified size.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; imageSize: DDN.Aspose.Common.DNSize): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(options: DNIRenderingOptions): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with custom scaling.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with specified size.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when options.NotesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(options: DNIRenderingOptions; imageSize: DDN.Aspose.Common.DNSize): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object using specified size.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="width">The maximum width (in pixels) that can be occupied by the rendered slide.</param>
    ///  <param name="height">The maximum height (in pixels) that can be occupied by the rendered slide.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.Aspose.Common.DNGraphics; width: Int32; height: Int32); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object using specified scale.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="scale">The scale for rendering the slide (1.0 is 100%).</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.Aspose.Common.DNGraphics; scale: Single); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.Aspose.Common.DNGraphics); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.Aspose.Common.DNGraphics); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object with custom scaling.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="scaleX">The scale for rendering the slide (1.0 is 100%) in the x-axis direction.</param>
    ///  <param name="scaleY">The scale for rendering the slide (1.0 is 100%) in the y-axis direction.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.Aspose.Common.DNGraphics; scaleX: Single; scaleY: Single); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object using specified size.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="renderingSize">The maximum dimensions (in pixels) that can be occupied by the rendered slide.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.Aspose.Common.DNGraphics; renderingSize: DDN.Aspose.Common.DNSize); overload;
    ///<summary>
    ///  Saves content of slide as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of slide as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    ///<summary>
    ///  Resets position, size and formatting of every shape that has a prototype on LayoutSlide.
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  Returns all slide comments added by specific author.
    ///</summary>
    ///  <param name="author">Author of comments to find or null to return all comments.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.Comment" />
    ///  .</returns>
    function GetSlideComments(author: DNICommentAuthor): TArray<DNIComment>;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting; overload;
    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    ///<summary>
    ///  Returns an effective theme for this slide.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>Shape object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNISlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns the overriding theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns a number of slide.
    ///  Index of slide in <see cref="P:Aspose.Slides.Presentation.Slides" />
    ///  collection is always equal to SlideNumber - Presentation.FirstSlideNumber.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property SlideNumber: Int32 read get_SlideNumber write set_SlideNumber;
    ///<summary>
    ///  Determines whether the specified slide is hidden during a slide show.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Returns or sets the layout slide for the current slide.
    ///  Read/write <see cref="T:Aspose.Slides.ILayoutSlide" />
    ///  .
    ///</summary>
    property LayoutSlide: DNILayoutSlide read get_LayoutSlide write set_LayoutSlide;
    ///<summary>
    ///  Allow to access notes slide, add and remove it.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSlideManager" />
    ///  .
    ///</summary>
    property NotesSlideManager: DNINotesSlideManager read get_NotesSlideManager;
    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the Transition object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns IPresentation interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNSlide = class(TDNGenericImport<DNSlideClass, DNSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBlobManagementOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03A092D2-6D6B-5465-AFA6-4E07DEE9FB4F}']
  { constructors } 

    ///<summary>
    ///  Creates new default blob management options.
    ///</summary>
    {class} function init: DNBlobManagementOptions;

  end;

  ///<summary>
  ///  Represents options which can be used to manage BLOB handling rules and other BLOB settings.
  ///</summary>
  [DNTypeName('Aspose.Slides.BlobManagementOptions')]
  DNBlobManagementOptions = interface(DDN.mscorlib.DNObject)
  ['{0C1C9350-276A-4B5F-946A-67E9F691C4E5}']
  { getters & setters } 

    function get_PresentationLockingBehavior: DNPresentationLockingBehavior;
    procedure set_PresentationLockingBehavior(value: DNPresentationLockingBehavior);
    function get_IsTemporaryFilesAllowed: Boolean;
    procedure set_IsTemporaryFilesAllowed(value: Boolean);
    function get_TempFilesRootPath: string;
    procedure set_TempFilesRootPath(value: string);
    function get_MaxBlobsBytesInMemory: UInt64;
    procedure set_MaxBlobsBytesInMemory(value: UInt64);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the locking behavior for the presentation's source (stream or file).
    ///</summary>
    property PresentationLockingBehavior: DNPresentationLockingBehavior read get_PresentationLockingBehavior write set_PresentationLockingBehavior;
    ///<summary>
    ///  Set that using of temporary files is not allowed to optimize memory consumption while working with
    ///  large amounts of data during presentation's lifetime. If false, OutOfMemoryException can be thrown.
    ///</summary>
    property IsTemporaryFilesAllowed: Boolean read get_IsTemporaryFilesAllowed write set_IsTemporaryFilesAllowed;
    ///<summary>
    ///  Represents the root path on the filesystem, where the temporary files will be stored. System
    ///  temorary directory will be used by default.
    ///</summary>
    property TempFilesRootPath: string read get_TempFilesRootPath write set_TempFilesRootPath;
    ///<summary>
    ///  A threshold that indicates the maximum amount of bytes which BLOBs can occupied in memory. After
    ///  this threshold was reached, all new BLOBs will be placed in temporary files and will not affect the
    ///  total memory consumption of the process.
    ///<see cref="P:Aspose.Slides.BlobManagementOptions.IsTemporaryFilesAllowed" />
    ///  should be set to true to use this property.
    ///</summary>
    property MaxBlobsBytesInMemory: UInt64 read get_MaxBlobsBytesInMemory write set_MaxBlobsBytesInMemory;
  end;

  TDNBlobManagementOptions = class(TDNGenericImport<DNBlobManagementOptionsClass, DNBlobManagementOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBuildVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B9DAA28A-C3B0-53E1-A608-401DAFCFEBDE}']
  { static fields getter & setter } 

   function __fakeFieldGet_AssemblyVersion: string;
   function __fakeFieldGet_FileVersion: string;
   function __fakeFieldGet_Product: string;
   function __fakeFieldGet_ProductMajor: Int32;
   function __fakeFieldGet_ProductMinor: Int32;
   function __fakeFieldGet_ReleaseDate: DDN.mscorlib.DNDateTime;

  { static fields } 

    ///<summary>
    ///  Version of Aspose.Slides assembly.
    ///</summary>
    {class} property AssemblyVersion: string read __fakeFieldGet_AssemblyVersion;
    ///<summary>
    ///  Version of assembly file.
    ///</summary>
    {class} property FileVersion: string read __fakeFieldGet_FileVersion;
    ///<summary>
    ///  Product name of Aspose.Slides
    ///</summary>
    {class} property Product: string read __fakeFieldGet_Product;
    ///<summary>
    ///  Major version number.
    ///</summary>
    {class} property ProductMajor: Int32 read __fakeFieldGet_ProductMajor;
    ///<summary>
    ///  Minor version number.
    ///</summary>
    {class} property ProductMinor: Int32 read __fakeFieldGet_ProductMinor;
    ///<summary>
    ///  Release date of the assembly.
    ///</summary>
    {class} property ReleaseDate: DDN.mscorlib.DNDateTime read __fakeFieldGet_ReleaseDate;

  end;

  ///<summary>
  ///  Contains information about version of Aspose.Slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.BuildVersionInfo')]
  DNBuildVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{7ED8EE34-7758-3B9C-BA33-700BF730D605}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBuildVersionInfo = class(TDNGenericImport<DNBuildVersionInfoClass, DNBuildVersionInfo>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E4B55AED-6796-5D6D-8B76-9A302D81D118}']
  end;

  ///<summary>
  ///  Represents a cell of a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.Cell')]
  DNCell = interface(DDN.mscorlib.DNObject)
  ['{92F63CCF-6453-3745-8F44-4271F032CD05}']
  { getters & setters } 

    function get_OffsetX: Double;
    function get_OffsetY: Double;
    function get_FirstRowIndex: Int32;
    function get_FirstColumnIndex: Int32;
    function get_Width: Double;
    function get_Height: Double;
    function get_MinimalHeight: Double;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_TextAnchorType: DNTextAnchorType;
    procedure set_TextAnchorType(value: DNTextAnchorType);
    function get_AnchorCenter: Boolean;
    procedure set_AnchorCenter(value: Boolean);
    function get_FirstRow: DNIRow;
    function get_FirstColumn: DNIColumn;
    function get_ColSpan: Int32;
    function get_RowSpan: Int32;
    function get_TextFrame: DNITextFrame;
    function get_Table: DNITable;
    function get_IsMergedCell: Boolean;
    function get_CellFormat: DNICellFormat;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Splits the cell to two cells by index of column.
    ///</summary>
    ///  <param name="index">Index of column.</param>
    procedure SplitByColSpan(index: Int32);
    ///<summary>
    ///  Splits the cell to two cells by index of row.
    ///</summary>
    ///  <param name="index">Index of row.</param>
    procedure SplitByRowSpan(index: Int32);
    ///<summary>
    ///  Splits the cell by height.
    ///</summary>
    ///  <param name="height">Height of a row.</param>
    procedure SplitByHeight(height: Double);
    ///<summary>
    ///  Splits the cell by width.
    ///</summary>
    ///  <param name="width">Width of a column.</param>
    procedure SplitByWidth(width: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a distance from left side of a table to left side of a cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property OffsetX: Double read get_OffsetX;
    ///<summary>
    ///  Returns a distance from top side of a table to top side of a cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property OffsetY: Double read get_OffsetY;
    ///<summary>
    ///  Returns an index of first row, covered by the cell.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property FirstRowIndex: Int32 read get_FirstRowIndex;
    ///<summary>
    ///  Returns an index of first column, covered by the cell.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property FirstColumnIndex: Int32 read get_FirstColumnIndex;
    ///<summary>
    ///  Returns the width of the cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width;
    ///<summary>
    ///  Returns the height of the cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  Returns the minimum height of a cell.
    ///  This is a sum of minimal heights of all rows cowered by the cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinimalHeight: Double read get_MinimalHeight;
    ///<summary>
    ///  Returns or sets the left margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets the top margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    ///<summary>
    ///  Returns or sets the bottom margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    ///<summary>
    ///  Returns or sets the type of vertical text.
    ///  Read/write <see cref="T:Aspose.Slides.TextVerticalType" />
    ///  .
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    ///<summary>
    ///  Returns or sets the text anchor type.
    ///  Read/write <see cref="T:Aspose.Slides.TextAnchorType" />
    ///  .
    ///</summary>
    property TextAnchorType: DNTextAnchorType read get_TextAnchorType write set_TextAnchorType;
    ///<summary>
    ///  Determines whether or not text box centered inside a cell.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AnchorCenter: Boolean read get_AnchorCenter write set_AnchorCenter;
    ///<summary>
    ///  Gets first row of cell.
    ///  Read-only <see cref="T:Aspose.Slides.IRow" />
    ///  .
    ///</summary>
    property FirstRow: DNIRow read get_FirstRow;
    ///<summary>
    ///  Gets first column of cell.
    ///  Read-only <see cref="T:Aspose.Slides.IColumn" />
    ///  .
    ///</summary>
    property FirstColumn: DNIColumn read get_FirstColumn;
    ///<summary>
    ///  Returns the number of grid columns in the parent table's table grid
    ///  which shall be spanned by the current cell. This property allows cells
    ///  to have the appearance of being merged, as they span vertical boundaries
    ///  of other cells in the table.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ColSpan: Int32 read get_ColSpan;
    ///<summary>
    ///  Returns the number of rows that a merged cell spans. This is used in combination
    ///  with the vMerge attribute on other cells in order to specify the beginning cell
    ///  of a horizontal merge.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property RowSpan: Int32 read get_RowSpan;
    ///<summary>
    ///  Returns the text frame of a cell.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Returns the parent Table object for a cell.
    ///  Read-only <see cref="T:Aspose.Slides.ITable" />
    ///  .
    ///</summary>
    property Table: DNITable read get_Table;
    ///<summary>
    ///  Returns true if the cell is merged with any adjusted cell, false otherwise.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsMergedCell: Boolean read get_IsMergedCell;
    ///<summary>
    ///  Returns the CellFormat object that contains formatting properties for this cell.
    ///  Read-only <see cref="T:Aspose.Slides.ICellFormat" />
    ///  .
    ///</summary>
    property CellFormat: DNICellFormat read get_CellFormat;
    ///<summary>
    ///  Returns the parent slide of a cell.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a cell.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCellCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3648188-3AB8-5513-95D3-4E8D2EC65C00}']
  end;

  ///<summary>
  ///  Represents a collection of cells.
  ///</summary>
  [DNTypeName('Aspose.Slides.CellCollection')]
  DNCellCollection = interface(DDN.mscorlib.DNObject)
  ['{C28D19B4-F836-3B5E-8F93-5F418D9D921C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICell>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of cells in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns the parent slide of a CellCollection.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a CellCollection.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCellCollection = class(TDNGenericImport<DNCellCollectionClass, DNCellCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColumnClass = interface(DNCellCollectionClass)
  ['{A7A1C751-125C-5537-B3FC-BC1BE23BE18F}']
  end;

  ///<summary>
  ///  Represents a column in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.Column')]
  DNColumn = interface(DNCellCollection)
  ['{31CDBA34-8B29-3F38-9792-80BB926F1BAC}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_ColumnFormat: DNIColumnFormat;
    function get_Count: Int32;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Sets defined portion format properties to all column cells' portions.
    ///</summary>
    ///  <param name="source">IPortionFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIPortionFormat); overload;
    ///<summary>
    ///  Sets defined paragraph format properties to all column cells' paragraphs.
    ///</summary>
    ///  <param name="source">IParagraphFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    ///<summary>
    ///  Sets defined text frame format properties to all column cells' text frames.
    ///</summary>
    ///  <param name="source">ITextFrameFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNITextFrameFormat); overload;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICell>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the width of a column.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Returns the ColumnFormat object that contains formatting properties for this column.
    ///  Read-only <see cref="T:Aspose.Slides.IColumnFormat" />
    ///  .
    ///</summary>
    property ColumnFormat: DNIColumnFormat read get_ColumnFormat;
    ///<summary>
    ///  Returns the number of cells in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns the parent slide of a CellCollection.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a CellCollection.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNColumn = class(TDNGenericImport<DNColumnClass, DNColumn>) end;

  //-------------namespace: Aspose.Slides----------------
  DNRowClass = interface(DNCellCollectionClass)
  ['{50DFBA96-E4FC-5DA8-8AF1-6AEF529A2025}']
  end;

  ///<summary>
  ///  Represents a row in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.Row')]
  DNRow = interface(DNCellCollection)
  ['{A1A1828C-F999-30BB-99BD-52057B04FC1D}']
  { getters & setters } 

    function get_Height: Double;
    function get_MinimalHeight: Double;
    procedure set_MinimalHeight(value: Double);
    function get_RowFormat: DNIRowFormat;
    function get_Count: Int32;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Sets defined portion format properties to all row cells' portions.
    ///</summary>
    ///  <param name="source">IPortionFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIPortionFormat); overload;
    ///<summary>
    ///  Sets defined paragraph format properties to all row cells' paragraphs.
    ///</summary>
    ///  <param name="source">IParagraphFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    ///<summary>
    ///  Sets defined text frame format properties to all row cells' text frames.
    ///</summary>
    ///  <param name="source">ITextFrameFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNITextFrameFormat); overload;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICell>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the height of a row.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  Returns or sets the minimal possible height of a row.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinimalHeight: Double read get_MinimalHeight write set_MinimalHeight;
    ///<summary>
    ///  Returns the RowFormat object that contains formatting properties for this row.
    ///  Read-only <see cref="T:Aspose.Slides.IRowFormat" />
    ///  .
    ///</summary>
    property RowFormat: DNIRowFormat read get_RowFormat;
    ///<summary>
    ///  Returns the number of cells in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns the parent slide of a CellCollection.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a CellCollection.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxesManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{747694C6-B73B-59AE-8965-82FEAEBB8C1B}']
  end;

  ///<summary>
  ///  Provides access to chart axes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.AxesManager')]
  DNAxesManager = interface(DDN.mscorlib.DNObject)
  ['{0E94793E-3A1E-38B5-A6BD-2CBD674383E1}']
  { getters & setters } 

    function get_HorizontalAxis: DNIAxis;
    function get_SecondaryHorizontalAxis: DNIAxis;
    function get_VerticalAxis: DNIAxis;
    function get_SecondaryVerticalAxis: DNIAxis;
    function get_SeriesAxis: DNIAxis;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the chart's horizontal axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property HorizontalAxis: DNIAxis read get_HorizontalAxis;
    ///<summary>
    ///  Gets the chart's secondary horizontal axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property SecondaryHorizontalAxis: DNIAxis read get_SecondaryHorizontalAxis;
    ///<summary>
    ///  Gets the chart's vertical axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property VerticalAxis: DNIAxis read get_VerticalAxis;
    ///<summary>
    ///  Gets the chart's secondary vertical axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property SecondaryVerticalAxis: DNIAxis read get_SecondaryVerticalAxis;
    ///<summary>
    ///  Gets the chart's series axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property SeriesAxis: DNIAxis read get_SeriesAxis;
  end;

  TDNAxesManager = class(TDNGenericImport<DNAxesManagerClass, DNAxesManager>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxisClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6412DF94-0C0A-52CA-A4C5-56A1359CDF4F}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a chart's axis.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Axis')]
  DNAxis = interface(DDN.mscorlib.DNObject)
  ['{7F7278D4-A813-3E1F-BCF4-E100176762E6}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_CategoryAxisType: DNCategoryAxisType;
    procedure set_CategoryAxisType(value: DNCategoryAxisType);
    function get_CrossAt: Single;
    procedure set_CrossAt(value: Single);
    function get_DisplayUnit: DNDisplayUnitType;
    procedure set_DisplayUnit(value: DNDisplayUnitType);
    function get_ActualMaxValue: Double;
    function get_ActualMinValue: Double;
    function get_ActualMajorUnit: Double;
    function get_ActualMinorUnit: Double;
    function get_ActualMajorUnitScale: DNTimeUnitType;
    function get_ActualMinorUnitScale: DNTimeUnitType;
    function get_IsAutomaticMaxValue: Boolean;
    procedure set_IsAutomaticMaxValue(value: Boolean);
    function get_MaxValue: Double;
    procedure set_MaxValue(value: Double);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_IsAutomaticMinorUnit: Boolean;
    procedure set_IsAutomaticMinorUnit(value: Boolean);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_IsAutomaticMajorUnit: Boolean;
    procedure set_IsAutomaticMajorUnit(value: Boolean);
    function get_IsAutomaticMinValue: Boolean;
    procedure set_IsAutomaticMinValue(value: Boolean);
    function get_MinValue: Double;
    procedure set_MinValue(value: Double);
    function get_IsLogarithmic: Boolean;
    procedure set_IsLogarithmic(value: Boolean);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_IsPlotOrderReversed: Boolean;
    procedure set_IsPlotOrderReversed(value: Boolean);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_MajorTickMark: DNTickMarkType;
    procedure set_MajorTickMark(value: DNTickMarkType);
    function get_MinorTickMark: DNTickMarkType;
    procedure set_MinorTickMark(value: DNTickMarkType);
    function get_TickLabelPosition: DNTickLabelPositionType;
    procedure set_TickLabelPosition(value: DNTickLabelPositionType);
    function get_MajorUnitScale: DNTimeUnitType;
    procedure set_MajorUnitScale(value: DNTimeUnitType);
    function get_MinorUnitScale: DNTimeUnitType;
    procedure set_MinorUnitScale(value: DNTimeUnitType);
    function get_BaseUnitScale: DNTimeUnitType;
    procedure set_BaseUnitScale(value: DNTimeUnitType);
    function get_MinorGridLinesFormat: DNIChartLinesFormat;
    function get_MajorGridLinesFormat: DNIChartLinesFormat;
    function get_ShowMinorGridLines: Boolean;
    function get_ShowMajorGridLines: Boolean;
    function get_Format: DNIAxisFormat;
    function get_TextFormat: DNIChartTextFormat;
    function get_Title: DNIChartTitle;
    function get_CrossType: DNCrossesType;
    procedure set_CrossType(value: DNCrossesType);
    function get_Position: DNAxisPositionType;
    procedure set_Position(value: DNAxisPositionType);
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_TickLabelRotationAngle: Single;
    procedure set_TickLabelRotationAngle(value: Single);
    function get_TickLabelSpacing: UInt32;
    procedure set_TickLabelSpacing(value: UInt32);
    function get_IsAutomaticTickLabelSpacing: Boolean;
    procedure set_IsAutomaticTickLabelSpacing(value: Boolean);
    function get_TickMarksSpacing: UInt32;
    procedure set_TickMarksSpacing(value: UInt32);
    function get_IsAutomaticTickMarksSpacing: Boolean;
    procedure set_IsAutomaticTickMarksSpacing(value: Boolean);
    function get_LabelOffset: UInt16;
    procedure set_LabelOffset(value: UInt16);
    function get_AggregationType: DNAxisAggregationType;
    procedure set_AggregationType(value: DNAxisAggregationType);
    function get_BinWidth: Double;
    procedure set_BinWidth(value: Double);
    function get_NumberOfBins: UInt32;
    procedure set_NumberOfBins(value: UInt32);
    function get_IsOverflowBin: Boolean;
    procedure set_IsOverflowBin(value: Boolean);
    function get_IsAutomaticOverflowBin: Boolean;
    procedure set_IsAutomaticOverflowBin(value: Boolean);
    function get_OverflowBin: Double;
    procedure set_OverflowBin(value: Double);
    function get_IsUnderflowBin: Boolean;
    procedure set_IsUnderflowBin(value: Boolean);
    function get_IsAutomaticUnderflowBin: Boolean;
    procedure set_IsAutomaticUnderflowBin(value: Boolean);
    function get_UnderflowBin: Double;
    procedure set_UnderflowBin(value: Double);

  { methods } 

    ///<summary>
    ///  Sets IAxis.CategoryAxisType property with a value that is automatically determined based on axis data.
    ///</summary>
    procedure SetCategoryAxisTypeAutomatically;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  Represents if the value axis crosses the category axis between categories.
    ///  This property applies only to category axes, and it doesn't apply to 3-D charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    ///<summary>
    ///  Specifies the type of the category axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.CategoryAxisType" />
    ///  .
    ///</summary>
    property CategoryAxisType: DNCategoryAxisType read get_CategoryAxisType write set_CategoryAxisType;
    ///<summary>
    ///  Represents the point on the axis where the perpendicular axis crosses it.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CrossAt: Single read get_CrossAt write set_CrossAt;
    ///<summary>
    ///  Specifies the scaling value of the display units for the value axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DisplayUnitType" />
    ///  .
    ///</summary>
    property DisplayUnit: DNDisplayUnitType read get_DisplayUnit write set_DisplayUnit;
    ///<summary>
    ///  Specifies actual maximum value on the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMaxValue: Double read get_ActualMaxValue;
    ///<summary>
    ///  Specifies actual minimum value on the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMinValue: Double read get_ActualMinValue;
    ///<summary>
    ///  Specifies actual major unit of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMajorUnit: Double read get_ActualMajorUnit;
    ///<summary>
    ///  Specifies actual minor unit of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMinorUnit: Double read get_ActualMinorUnit;
    ///<summary>
    ///  Specifies actual major unit scale of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMajorUnitScale: DNTimeUnitType read get_ActualMajorUnitScale;
    ///<summary>
    ///  Specifies actual minor unit scale of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMinorUnitScale: DNTimeUnitType read get_ActualMinorUnitScale;
    ///<summary>
    ///  Indicates whether the max value is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMaxValue: Boolean read get_IsAutomaticMaxValue write set_IsAutomaticMaxValue;
    ///<summary>
    ///  Represents the maximum value on the value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MaxValue: Double read get_MaxValue write set_MaxValue;
    ///<summary>
    ///  Represents the minor units for the date or value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    ///<summary>
    ///  Indicates whether the minor unit of the axis is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMinorUnit: Boolean read get_IsAutomaticMinorUnit write set_IsAutomaticMinorUnit;
    ///<summary>
    ///  Represents the major units for the date or value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    ///<summary>
    ///  Indicates whether the major unit of the axis is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMajorUnit: Boolean read get_IsAutomaticMajorUnit write set_IsAutomaticMajorUnit;
    ///<summary>
    ///  Indicates whether the min value is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMinValue: Boolean read get_IsAutomaticMinValue write set_IsAutomaticMinValue;
    ///<summary>
    ///  Represents the minimum value on the value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinValue: Double read get_MinValue write set_MinValue;
    ///<summary>
    ///  Represents if the value axis scale type is logarithmic or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsLogarithmic: Boolean read get_IsLogarithmic write set_IsLogarithmic;
    ///<summary>
    ///  Represents the logarithmic base. Default value is 10.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property LogBase: Double read get_LogBase write set_LogBase;
    ///<summary>
    ///  Represents if MS PowerPoint plots data points from last to first.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsPlotOrderReversed: Boolean read get_IsPlotOrderReversed write set_IsPlotOrderReversed;
    ///<summary>
    ///  Represents if the axis is visible.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Represents the type of major tick mark for the specified axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TickMarkType" />
    ///  .
    ///</summary>
    property MajorTickMark: DNTickMarkType read get_MajorTickMark write set_MajorTickMark;
    ///<summary>
    ///  Represents the type of minor tick mark for the specified axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TickMarkType" />
    ///  .
    ///</summary>
    property MinorTickMark: DNTickMarkType read get_MinorTickMark write set_MinorTickMark;
    ///<summary>
    ///  Represents the position of tick-mark labels on the specified axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TickLabelPositionType" />
    ///  .
    ///</summary>
    property TickLabelPosition: DNTickLabelPositionType read get_TickLabelPosition write set_TickLabelPosition;
    ///<summary>
    ///  Represents the major unit scale for the date axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TimeUnitType" />
    ///  .
    ///</summary>
    property MajorUnitScale: DNTimeUnitType read get_MajorUnitScale write set_MajorUnitScale;
    ///<summary>
    ///  Represents the major unit scale for the date axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TimeUnitType" />
    ///  .
    ///</summary>
    property MinorUnitScale: DNTimeUnitType read get_MinorUnitScale write set_MinorUnitScale;
    ///<summary>
    ///  Specifies the smallest time unit that is represented on the date axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TimeUnitType" />
    ///  .
    ///</summary>
    property BaseUnitScale: DNTimeUnitType read get_BaseUnitScale write set_BaseUnitScale;
    ///<summary>
    ///  Represents minor gridlines format on a chart axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartLinesFormat" />
    ///  .
    ///</summary>
    property MinorGridLinesFormat: DNIChartLinesFormat read get_MinorGridLinesFormat;
    ///<summary>
    ///  Represents major gridlines format on a chart axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartLinesFormat" />
    ///  .
    ///</summary>
    property MajorGridLinesFormat: DNIChartLinesFormat read get_MajorGridLinesFormat;
    ///<summary>
    ///  To hide minor gridline set MinorGridLinesFormat.Line.FillFormat.FillType to FillType.NoFill.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMinorGridLines: Boolean read get_ShowMinorGridLines;
    ///<summary>
    ///  To hide major gridline set MajorGridLinesFormat.Line.FillFormat.FillType to FillType.NoFill.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMajorGridLines: Boolean read get_ShowMajorGridLines;
    ///<summary>
    ///  Represents format of axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxisFormat" />
    ///  .
    ///</summary>
    property Format: DNIAxisFormat read get_Format;
    ///<summary>
    ///  Represents format of text.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Gets the axis' title.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTitle" />
    ///  .
    ///</summary>
    property Title: DNIChartTitle read get_Title;
    ///<summary>
    ///  Represents the CrossType on the specified axis where the other axis crosses.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.CrossesType" />
    ///  .
    ///</summary>
    property CrossType: DNCrossesType read get_CrossType write set_CrossType;
    ///<summary>
    ///  Represents position of axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.AxisPositionType" />
    ///  .
    ///</summary>
    property Position: DNAxisPositionType read get_Position write set_Position;
    ///<summary>
    ///  Determines whether a axis has a visible title.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    ///<summary>
    ///  Represents the format string for the Axis Labels.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Indicates whether the format is linked source data.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    ///<summary>
    ///  Represents the rotation angle of tick labels.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property TickLabelRotationAngle: Single read get_TickLabelRotationAngle write set_TickLabelRotationAngle;
    ///<summary>
    ///  Specifies how many tick labels to skip between label that is drawn. Applied to category or series axis.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property TickLabelSpacing: UInt32 read get_TickLabelSpacing write set_TickLabelSpacing;
    ///<summary>
    ///  Specifies automatic tick label spacing value. If false: use TickLabelSpacing property.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticTickLabelSpacing: Boolean read get_IsAutomaticTickLabelSpacing write set_IsAutomaticTickLabelSpacing;
    ///<summary>
    ///  Specifies how many tick marks shall be skipped before the next one shall be
    ///  drawn. Applied to category or series axis.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property TickMarksSpacing: UInt32 read get_TickMarksSpacing write set_TickMarksSpacing;
    ///<summary>
    ///  Specifies automatic tick marks spacing value. If false: use TickMarksSpacing property.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticTickMarksSpacing: Boolean read get_IsAutomaticTickMarksSpacing write set_IsAutomaticTickMarksSpacing;
    ///<summary>
    ///  Specifies the distance of labels from the axis. Applied to category or date axis. Value must be between 0% and 1000%.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property LabelOffset: UInt16 read get_LabelOffset write set_LabelOffset;
    ///<summary>
    ///  Represents aggregation type of category axis (binning). Applied to category. Used with Histogram or HistogramPareto series only.
    ///</summary>
    property AggregationType: DNAxisAggregationType read get_AggregationType write set_AggregationType;
    ///<summary>
    ///  Specifies bin width when AggregationType property value setted to AxisAggregationType.ByBinWidth.
    ///  Applied to category axes. Used with Histogram or HistogramPareto series only.
    ///</summary>
    property BinWidth: Double read get_BinWidth write set_BinWidth;
    ///<summary>
    ///  Specifies number of bins when AggregationType property value setted to AxisAggregationType.ByNumberOfBins.
    ///  Applied to category axes. Used with Histogram or HistogramPareto series only.
    ///</summary>
    property NumberOfBins: UInt32 read get_NumberOfBins write set_NumberOfBins;
    ///<summary>
    ///  Specifies if overflow bin applied. Use IsAutomaticOverflowBin and OverflowBin to adjust overflow bin value.
    ///</summary>
    property IsOverflowBin: Boolean read get_IsOverflowBin write set_IsOverflowBin;
    ///<summary>
    ///  Specifies automatic overflow bin value. If false: use OverflowBin property.
    ///</summary>
    property IsAutomaticOverflowBin: Boolean read get_IsAutomaticOverflowBin write set_IsAutomaticOverflowBin;
    ///<summary>
    ///  Specifies overflow bin custom value. Applied when IsAutomaticOverflowBin property setted to false and IsOverflowBin property equals true.
    ///</summary>
    property OverflowBin: Double read get_OverflowBin write set_OverflowBin;
    ///<summary>
    ///  Specifies if underflow bin applied. Use IsAutomaticUnderflowBin and UnderflowBin to adjust underflow bin value.
    ///</summary>
    property IsUnderflowBin: Boolean read get_IsUnderflowBin write set_IsUnderflowBin;
    ///<summary>
    ///  Specifies automatic underflow bin value. If false: use UnderflowBin property.
    ///</summary>
    property IsAutomaticUnderflowBin: Boolean read get_IsAutomaticUnderflowBin write set_IsAutomaticUnderflowBin;
    ///<summary>
    ///  Specifies underflow bin custom value. Applied when IsAutomaticUnderflowBin property setted to false and IsUnderflowBin property equals true.
    ///</summary>
    property UnderflowBin: Double read get_UnderflowBin write set_UnderflowBin;
  end;

  TDNAxis = class(TDNGenericImport<DNAxisClass, DNAxis>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxisFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2EFA8F8C-C514-51FA-B34C-594D4489C26E}']
  end;

  ///<summary>
  ///  Represents chart format properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.AxisFormat')]
  DNAxisFormat = interface(DDN.mscorlib.DNObject)
  ['{B3FA9428-99FD-3555-A906-C7814076950F}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns fill style properties of an axis.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property Fill: DNIFillFormat read get_Fill;
    ///<summary>
    ///  Returns line style properties of an axis.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property Line: DNILineFormat read get_Line;
    ///<summary>
    ///  Returns effects used for an axis.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property Effect: DNIEffectFormat read get_Effect;
  end;

  TDNAxisFormat = class(TDNGenericImport<DNAxisFormatClass, DNAxisFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNBaseChartValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D020277F-0561-5BF9-A6A3-29338B76931F}']
  end;

  ///<summary>
  ///  Represents a value of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.BaseChartValue')]
  DNBaseChartValue = interface(DDN.mscorlib.DNObject)
  ['{D4DC9C77-D0F2-3881-814D-BD26A32A7D5F}']
  { getters & setters } 

    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether AsCell, AsCells, AsLiteralString or AsLiteralDouble
    ///  property is actual in descendants. In other words it specifies the type
    ///  of value of the Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For points in ChartDataPointCollection this property is read-only.
    ///  In this case for changing value of this property you can use one of the
    ///  ChartDataPointCollection.DataSourceTypeFor&lt;...&gt; properties.
    ///</remarks>
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
    ///<summary>
    ///  Data.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
  end;

  TDNBaseChartValue = class(TDNGenericImport<DNBaseChartValueClass, DNBaseChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDoubleChartValueClass = interface(DNBaseChartValueClass)
  ['{E3D15271-FBF3-55B3-8633-20782ACD4557}']
  end;

  ///<summary>
  ///  Represent double value which can be stored in pptx presentation document in two ways:
  ///  1) in cell/cells of workbook related to chart;
  ///  2) as literal value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DoubleChartValue')]
  DNDoubleChartValue = interface(DNBaseChartValue)
  ['{C4A2AE82-7910-3C3D-A922-CB0FAB76EC92}']
  { getters & setters } 

    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);
    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);

  { methods } 

    ///<summary>
    ///  Converts to <see cref="T:System.Double" />
    ///  .
    ///</summary>
    ///<returns>
    ///  Returns LiteralDouble if DataSourceType equals DoubleLiterals.
    ///  If DataSourceType equals Worksheet returns successfully converted to double cell value, otherwise returns NaN.
    ///</returns>
    function ToDouble: Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets chart data cell.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  .
    ///</summary>
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    ///<summary>
    ///  Returns or sets value as literal double.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    ///<summary>
    ///  Returns or sets Data object.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
    ///<summary>
    ///  Specifies whether AsCell, AsCells, AsLiteralString or AsLiteralDouble
    ///  property is actual in descendants. In other words it specifies the type
    ///  of value of the Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For points in ChartDataPointCollection this property is read-only.
    ///  In this case for changing value of this property you can use one of the
    ///  ChartDataPointCollection.DataSourceTypeFor&lt;...&gt; properties.
    ///</remarks>
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
  end;

  TDNDoubleChartValue = class(TDNGenericImport<DNDoubleChartValueClass, DNDoubleChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNStringChartValueClass = interface(DNBaseChartValueClass)
  ['{7D6E8E43-5F79-5A6D-BA7B-85346A7E1022}']
  end;

  ///<summary>
  ///  Represent string value which can be stored in pptx presentation document in two ways:
  ///  1) in cell/cells of workbook related to chart;
  ///  2) as literal value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.StringChartValue')]
  DNStringChartValue = interface(DNBaseChartValue)
  ['{FBE06C17-A71B-30E7-90BA-7506CA230887}']
  { getters & setters } 

    function get_AsCells: DNIChartCellCollection;
    procedure set_AsCells(value: DNIChartCellCollection);
    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);
    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);

  { methods } 

    ///<summary>
    ///  Returns string value data.
    ///  Return null if DataSourceType is false and no string value was assigned.
    ///</summary>
    function ToString: string;
    ///<summary>
    ///  Sets value from specified cell.
    ///</summary>
    ///  <param name="cell">Cell.</param>
    procedure SetFromOneCell(cell: DNIChartDataCell);
    ///<summary>
    ///  If DataSourceType property is DataSourceType.Worksheet then this method returns address
    ///  of the cells in workbook which represent the string data. Otherwise return
    ///  empty string.
    ///</summary>
    function GetCellsAddressInWorkbook: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Null value assigning is not allowed.
    ///  Returning value always is not null.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartCellCollection" />
    ///  .
    ///</summary>
    property AsCells: DNIChartCellCollection read get_AsCells write set_AsCells;
    ///<summary>
    ///  Returns or sets value as literal string.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    ///<summary>
    ///  Returns or sets Data object.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
    ///<summary>
    ///  Specifies whether AsCell, AsCells, AsLiteralString or AsLiteralDouble
    ///  property is actual in descendants. In other words it specifies the type
    ///  of value of the Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For points in ChartDataPointCollection this property is read-only.
    ///  In this case for changing value of this property you can use one of the
    ///  ChartDataPointCollection.DataSourceTypeFor&lt;...&gt; properties.
    ///</remarks>
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
  end;

  TDNStringChartValue = class(TDNGenericImport<DNStringChartValueClass, DNStringChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNStringOrDoubleChartValueClass = interface(DNBaseChartValueClass)
  ['{0B2036D5-79B7-50D3-BF45-F4BAC2B66BFB}']
  end;

  ///<summary>
  ///  Represent string or double value which can be stored in pptx presentation document in two ways:
  ///  1) in cell/cells of workbook related to chart;
  ///  2) as literal value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.StringOrDoubleChartValue')]
  DNStringOrDoubleChartValue = interface(DNBaseChartValue)
  ['{3E58B255-5743-3606-BE8B-CCEB06976D96}']
  { getters & setters } 

    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);
    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);

  { methods } 

    ///<summary>
    ///  Converts to double.
    ///</summary>
    ///<returns>Double value.</returns>
    function ToDouble: Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets chart data cell.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  .
    ///</summary>
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    ///<summary>
    ///  Returns or sets value as literal string.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    ///<summary>
    ///  Returns or sets value as literal double.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    ///<summary>
    ///  Returns or sets Data object.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
    ///<summary>
    ///  Specifies whether AsCell, AsCells, AsLiteralString or AsLiteralDouble
    ///  property is actual in descendants. In other words it specifies the type
    ///  of value of the Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For points in ChartDataPointCollection this property is read-only.
    ///  In this case for changing value of this property you can use one of the
    ///  ChartDataPointCollection.DataSourceTypeFor&lt;...&gt; properties.
    ///</remarks>
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
  end;

  TDNStringOrDoubleChartValue = class(TDNGenericImport<DNStringOrDoubleChartValueClass, DNStringOrDoubleChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCategoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{126E0D79-6460-5865-9819-37A13C87C2C8}']
  end;

  ///<summary>
  ///  Represents chart categories.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartCategory')]
  DNChartCategory = interface(DDN.mscorlib.DNObject)
  ['{2467F818-9B2F-3A6F-AA93-8368C835A8D8}']
  { getters & setters } 

    function get_UseCell: Boolean;
    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteral: DDN.mscorlib.DNObject;
    procedure set_AsLiteral(value: DDN.mscorlib.DNObject);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_GroupingLevels: DNIChartCategoryLevelsManager;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If true then AsCell property is actual. In other words, worksheet is used for
    ///  storing category (this case supports a multi-level category).
    ///  If false then AsLiteral property is actual. In other words, worksheet is NOT used
    ///  for storing category (and this case doesn't support a multi-level categories).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For change value of this property (for all categories in collection) set new
    ///  value to ChartCategoryCollection.UseCells property.
    ///</remarks>
    property UseCell: Boolean read get_UseCell;
    ///<summary>
    ///  Returns or sets IChartDataCell object.
    ///  If category is multi-level then used IChartDataCell object for level "0".
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  .
    ///</summary>
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    ///<summary>
    ///  Returns or sets AsLiteral object.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property AsLiteral: DDN.mscorlib.DNObject read get_AsLiteral write set_AsLiteral;
    ///<summary>
    ///  If UseCell is true then this property represents AsCell.Value property.
    ///  If UseCell is false then this property represents AsLiteral property.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Managed container of the values of the chart category grouping levels.
    ///  Multi-level category contain more then one grouping level.
    ///  Grouping levels indexing is zero-based.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartCategoryLevelsManager" />
    ///  .
    ///</summary>
    property GroupingLevels: DNIChartCategoryLevelsManager read get_GroupingLevels;
  end;

  TDNChartCategory = class(TDNGenericImport<DNChartCategoryClass, DNChartCategory>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCategoryCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9711775A-FAA1-5115-9889-43EE683E478B}']
  end;

  ///<summary>
  ///  Represents collection of <see cref="T:Aspose.Slides.Charts.ChartCategory" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartCategoryCollection')]
  DNChartCategoryCollection = interface(DDN.mscorlib.DNObject)
  ['{76390BCE-63C6-3D95-9AA0-09FA0E3A9B55}']
  { getters & setters } 

    function get_UseCells: Boolean;
    procedure set_UseCells(value: Boolean);
    function get_GroupingLevelCount: Int32;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Searches for the specified <see cref="T:Aspose.Slides.Charts.ChartCategory" />
    ///  and returns the zero-based index of the first occurrence within the entire Collection.
    ///</summary>
    ///  <param name="value">Chart category.</param>
    ///<returns>The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.</returns>
    function IndexOf(value: DNIChartCategory): Int32;
    ///<summary>
    ///  Removes the element at the given index.
    ///</summary>
    ///  <param name="index">Index of a category to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartCategory>;
    ///<summary>
    ///  Copies all elements of the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If true then worksheet is used for storing categories (this case supports a multi-level categories).
    ///  If false then worksheet is NOT used for storing values (and this case doesn't support a
    ///  multi-level categories).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UseCells: Boolean read get_UseCells write set_UseCells;
    ///<summary>
    ///  Returns count of category grouping levels used.
    ///  Is more then one for multilevel categories.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property GroupingLevelCount: Int32 read get_GroupingLevelCount;
    ///<summary>
    ///  Returns a number of elements int the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the List is synchronized (thread safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns an object that can be used to synchronize access to the collection.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNChartCategoryCollection = class(TDNGenericImport<DNChartCategoryCollectionClass, DNChartCategoryCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCategoryLevelsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{410A16FB-1E24-5D37-ADBA-B4E6D529F2F9}']
  end;

  ///<summary>
  ///  Managed container of the values of the chart category levels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartCategoryLevelsManager')]
  DNChartCategoryLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{1547FB67-F9B2-31F2-A239-9E58B1F17D1E}']
  { methods } 

    ///<summary>
    ///  Sets grouping item for defined level.
    ///</summary>
    procedure SetGroupingItem(level: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Delete grouping item for defined level.
    ///</summary>
    procedure DeleteGroupingItem(level: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChartCategoryLevelsManager = class(TDNGenericImport<DNChartCategoryLevelsManagerClass, DNChartCategoryLevelsManager>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCellCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66521374-ED29-5F75-BE54-4A299FE1051C}']
  end;

  ///<summary>
  ///  Represents collection of a cells with data.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartCellCollection')]
  DNChartCellCollection = interface(DDN.mscorlib.DNObject)
  ['{BD651C93-D3A0-3FAE-8158-EAE43EED51E7}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns address of the set of cells in workbook.
    ///</summary>
    function GetCellsAddress: string;
    ///<summary>
    ///  Concatenation string from all cells string values.
    ///</summary>
    function GetConcatenatedValuesFromCells: string;
    ///<summary>
    ///  Removes a cell from the collection by index.
    ///</summary>
    ///  <param name="index">Index of a cell to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartDataCell>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of cells in collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNChartCellCollection = class(TDNGenericImport<DNChartCellCollectionClass, DNChartCellCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EA5FE4A-2D7A-5118-AD15-3682B0A63913}']
  end;

  ///<summary>
  ///  Represents data used for a chart plotting.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartData')]
  DNChartData = interface(DDN.mscorlib.DNObject)
  ['{C411A3CD-0292-344D-8564-432FD776B05C}']
  { getters & setters } 

    function get_ChartDataWorkbook: DNIChartDataWorkbook;
    function get_Series: DNIChartSeriesCollection;
    function get_SeriesGroups: DNIChartSeriesGroupCollection;
    function get_Categories: DNIChartCategoryCollection;
    function get_UseSecondaryCategories: Boolean;
    procedure set_UseSecondaryCategories(value: Boolean);
    function get_SecondaryCategories: DNIChartCategoryCollection;
    function get_DataSourceType: DNChartDataSourceType;
    function get_ExternalWorkbookPath: string;

  { methods } 

    function ReadWorkbookStream: DDN.mscorlib.DNMemoryStream;
    ///<summary>
    ///  Initializes the internally contained Excel workbook with user-specified value.
    ///</summary>
    ///  <param name="ms">
    ///  The user-supplied stream containing the entire Excel workbook.
    ///</param>
    procedure WriteWorkbookStream(ms: DDN.mscorlib.DNMemoryStream);
    ///<summary>
    ///  Gets chart data range.
    ///</summary>
    ///<returns>Cells data range formula. E.g: "Sheet1!$A$1:$C$4"</returns>
    ///<exception cref="T:System.InvalidOperationException">Chart doesn't use workbook as a data source</exception><example>
    ///  Example C#
    ///<code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.PercentsStackedBar, 0, 0, 100, 100);
    ///  string result = (chart.ChartData as ChartData).GetRange();
    ///  }
    ///</code></example>
    function GetRange: string;
    ///<summary>
    ///  Set chart data range. Series and categories will be updated based on new data range.
    ///  If amount of series in data range greater than count of series in the chart data then additional series with the same type
    ///  as a last series in the current collection will be added to the end of the collection.
    ///</summary>
    ///  <param name="formula">The cells data range formula. E.g: "Sheet1!$A$1:$C$4" , "SomeSheetName!A1:B100", "Sheet1!$A$1:$B$5;Sheet1!$D$1:$D$5".</param>
    ///<exception cref="T:System.ArgumentNullException">formula is null.</exception><exception cref="T:System.InvalidOperationException">Unsupported chart type</exception><exception cref="T:System.ArgumentException">formula has incorrect format.</exception>
    procedure SetRange(formula: string);
    ///<summary>
    ///  Sets external workbook as a data source for the chart. Chart data will be updated from the target workbook.
    ///</summary>
    ///  <param name="workbookPath">Path to the target workbook</param>
    ///<exception cref="T:System.InvalidOperationException">External workbook is not available or can't be loaded.</exception><example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Pie, 50, 50, 400, 600, true);
    ///  IChartData chartData = chart.ChartData;
    ///  (chartData as ChartData).SetExternalWorkbook("../../workbook.xlsx");
    ///  }
    ///</code></example>
    procedure SetExternalWorkbook(workbookPath: string); overload;
    ///<summary>
    ///  Sets external workbook as a data source for the chart.
    ///</summary>
    ///  <param name="workbookPath">Path to the target workbook</param>
    ///  <param name="updateChartData"> If value is false only workbook path will be updated.
    ///  Chart data won't be loaded and updated from the target workbook. Can be used when target workbook doesn't exist or it's not available.
    ///  If value is true chart data will be updated from the target workbook. </param>
    ///<exception cref="T:System.InvalidOperationException">External workbook is not available or can't be loaded.</exception><example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Pie, 50, 50, 400, 600, true);
    ///  IChartData chartData = chart.ChartData;
    ///  (chartData as ChartData).SetExternalWorkbook("http://path/doesnt/exists", false);
    ///  }
    ///</code></example>
    procedure SetExternalWorkbook(workbookPath: string; updateChartData: Boolean); overload;
    ///<summary>
    ///  Swap the data over the axis.
    ///  Data being charted on the X axis will move to the Y axis and vice versa.
    ///</summary>
    procedure SwitchRowColumn;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the cells factory to create cells used for chart series or categories.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartDataWorkbook" />
    ///  .
    ///</summary>
    property ChartDataWorkbook: DNIChartDataWorkbook read get_ChartDataWorkbook;
    ///<summary>
    ///  Gets the series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesCollection" />
    ///  .
    ///</summary>
    property Series: DNIChartSeriesCollection read get_Series;
    ///<summary>
    ///  Gets the groups of series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesGroupCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  1) Each group of series contains series with combinable types. Groups of
    ///  combinable series types defined and described with CombinableSeriesTypesGroup
    ///  enum.
    ///  Also each group of series contains series witch is plotted whether
    ///  on primary axes or on secondary axes (not both cases in one group).
    ///  So, principle of series grouping is a grouping by type groups mentioned
    ///  above and by primary/secondary plotting type.
    ///  2) Group of series contains some series properies whitch is common for
    ///  each series in group ("series group properties").
    ///  "Series group properties" in ChartSeriesGroup class is read/write.
    ///  Each of "series group properties" can have a read-only projection in ChartSeries class.
    ///</remarks>
    property SeriesGroups: DNIChartSeriesGroupCollection read get_SeriesGroups;
    ///<summary>
    ///  Gets the primary categories (or both primary and secondary categories
    ///  if <see cref="P:Aspose.Slides.Charts.ChartData.UseSecondaryCategories" />
    ///  property is false).
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartCategoryCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If <see cref="P:Aspose.Slides.Charts.ChartData.UseSecondaryCategories" />
    ///  property is false then <see cref="P:Aspose.Slides.Charts.ChartData.SecondaryCategories" />
    ///  property return null and data in this <see cref="P:Aspose.Slides.Charts.ChartData.Categories" />
    ///  property is used both for primary
    ///  and secondary series.
    ///  If <see cref="P:Aspose.Slides.Charts.ChartData.UseSecondaryCategories" />
    ///  property is true then data in <see cref="P:Aspose.Slides.Charts.ChartData.SecondaryCategories" />
    ///  property is used for secondary series and data in this <see cref="P:Aspose.Slides.Charts.ChartData.Categories" />
    ///  property is used
    ///  for primary series.
    ///</remarks>
    ///<example>
    ///  Example. What categories are related to series - ChartData.Categories or ChartData.SecondaryCategories?
    ///<code>
    ///  if (series.PlotOnSecondAxis &amp;&amp; series.Chart.ChartData.UseSecondaryCategories)
    ///  {
    ///  // related categories are series.Chart.ChartData.SecondaryCategories
    ///  }
    ///  else
    ///  {
    ///  // related categories are series.Chart.ChartData.Categories
    ///  }
    ///</code></example>
    property Categories: DNIChartCategoryCollection read get_Categories;
    ///<summary>
    ///  If false then <see cref="P:Aspose.Slides.Charts.ChartData.SecondaryCategories" />
    ///  property return null and data
    ///  in <see cref="P:Aspose.Slides.Charts.ChartData.Categories" />
    ///  property is used both for primary and secondary series.
    ///  If true then data in <see cref="P:Aspose.Slides.Charts.ChartData.SecondaryCategories" />
    ///  property is used for secondary series and data
    ///  in <see cref="P:Aspose.Slides.Charts.ChartData.Categories" />
    ///  property is used for primary series.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example>
    ///  Example. What categories are related to series - ChartData.Categories or ChartData.SecondaryCategories?
    ///<code>
    ///  if (series.PlotOnSecondAxis &amp;&amp; series.Chart.ChartData.UseSecondaryCategories)
    ///  {
    ///  // related categories are series.Chart.ChartData.SecondaryCategories
    ///  }
    ///  else
    ///  {
    ///  // related categories are series.Chart.ChartData.Categories
    ///  }
    ///</code></example>
    property UseSecondaryCategories: Boolean read get_UseSecondaryCategories write set_UseSecondaryCategories;
    ///<summary>
    ///  Gets the secondary categories if <see cref="P:Aspose.Slides.Charts.ChartData.UseSecondaryCategories" />
    ///  property is true.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartCategoryCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If <see cref="P:Aspose.Slides.Charts.ChartData.UseSecondaryCategories" />
    ///  property is false then this <see cref="P:Aspose.Slides.Charts.ChartData.SecondaryCategories" />
    ///  property return null and data in <see cref="P:Aspose.Slides.Charts.ChartData.Categories" />
    ///  property is used both for primary
    ///  and secondary series.
    ///  If <see cref="P:Aspose.Slides.Charts.ChartData.UseSecondaryCategories" />
    ///  property is true then data in
    ///  this <see cref="P:Aspose.Slides.Charts.ChartData.SecondaryCategories" />
    ///  property is used for secondary series and data
    ///  in <see cref="P:Aspose.Slides.Charts.ChartData.Categories" />
    ///  property is used for primary series.
    ///</remarks>
    ///<example>
    ///  Example. What categories are related to series - ChartData.Categories or ChartData.SecondaryCategories?
    ///<code>
    ///  if (series.PlotOnSecondAxis &amp;&amp; series.Chart.ChartData.UseSecondaryCategories)
    ///  {
    ///  // related categories are series.Chart.ChartData.SecondaryCategories
    ///  }
    ///  else
    ///  {
    ///  // related categories are series.Chart.ChartData.Categories
    ///  }
    ///</code></example>
    property SecondaryCategories: DNIChartCategoryCollection read get_SecondaryCategories;
    ///<summary>
    ///  Represents external workbook path if external data source, null otherwise
    ///</summary>
    property DataSourceType: DNChartDataSourceType read get_DataSourceType;
    ///<summary>
    ///  Represents data source of the chart
    ///</summary>
    property ExternalWorkbookPath: string read get_ExternalWorkbookPath;
  end;

  TDNChartData = class(TDNGenericImport<DNChartDataClass, DNChartData>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43758D76-84C3-56E9-B7A9-B327F1FFE411}']
  end;

  ///<summary>
  ///  Represents cell for chart data.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataCell')]
  DNChartDataCell = interface(DDN.mscorlib.DNObject)
  ['{47479CCF-6A34-3CA2-B717-CA9B3EB3F678}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_R1C1Formula: string;
    procedure set_R1C1Formula(value: string);
    function get_ChartDataWorksheet: DNIChartDataWorksheet;
    function get_IsHidden: Boolean;
    function get_CustomNumberFormat: string;
    procedure set_CustomNumberFormat(value: string);
    function get_PresetNumberFormat: Byte;
    procedure set_PresetNumberFormat(value: Byte);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the index of the row of worksheet in which the cell is located.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Returns the index of the column of worksheet in which the cell is located.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Gets or sets the value.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets the formula in A1-style.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IChartDataCell cell = workbook.GetCell(0, "B2");
    ///  cell.Formula = "1 + SUM(F2:H5)";
    ///</code></example>
    property Formula: string read get_Formula write set_Formula;
    ///<summary>
    ///  Gets or sets the formula in R1C1-style.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IChartDataCell cell = workbook.GetCell(0, "C2");
    ///  cell.R1C1Formula = "MAX(R2C6:R5C8) / 3";
    ///</code></example>
    property R1C1Formula: string read get_R1C1Formula write set_R1C1Formula;
    ///<summary>
    ///  Gets the worksheet.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartDataWorksheet" />
    ///  .
    ///</summary>
    property ChartDataWorksheet: DNIChartDataWorksheet read get_ChartDataWorksheet;
    ///<summary>
    ///  Determines whether the cell is hidden.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHidden: Boolean read get_IsHidden;
    ///<summary>
    ///  Gets or sets the custom display format of numbers and dates.
    ///  If value is empty will be used PresetNumberFormat value.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentNullException">Thrown if value is <c>null</c>.</exception>
    property CustomNumberFormat: string read get_CustomNumberFormat write set_CustomNumberFormat;
    ///<summary>
    ///  Gets or sets the built-in display format of numbers and dates. Preset number must be in [0..22] or [37..49]".
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  0	General
    ///  1	0
    ///  2	0.00
    ///  3	#,##0
    ///  4	#,##0.00
    ///  5	$#,##0;$-#,##0
    ///  6	$#,##0;[Red]$-#,##0
    ///  7	$#,##0.00;$-#,##0.00
    ///  8	$#,##0.00;[Red]$-#,##0.00
    ///  9	0%
    ///  10	0.00%
    ///  11	0.00E+00
    ///  12	# ?/?
    ///  13	# /
    ///  14	m/d/yy
    ///  15	d-mmm-yy
    ///  16	d-mmm
    ///  17	mmm-yy
    ///  18	h:mm AM/PM
    ///  19	h:mm:ss AM/PM
    ///  20	h:mm
    ///  21	h:mm:ss
    ///  22	m/d/yy h:mm
    ///  37	#,##0;-#,##0
    ///  38	#,##0;[Red]-#,##0
    ///  39	#,##0.00;-#,##0.00
    ///  40	#,##0.00;[Red]-#,##0.00
    ///  41	_ * #,##0_ ;_ * "_ ;_ @_
    ///  42	_ $* #,##0_ ;_ $* "_ ;_ @_
    ///  43	_ * #,##0.00_ ;_ * "??_ ;_ @_
    ///  44	_("$"* # ##0,00_);_("$"* (# ##0,00);_("$"* "-"??_);_(@_)
    ///  45	mm:ss
    ///  46	h :mm:ss
    ///  47	mm:ss.0
    ///  48	##0.0E+00
    ///  49	@
    ///</code></example>
    property PresetNumberFormat: Byte read get_PresetNumberFormat write set_PresetNumberFormat;
  end;

  TDNChartDataCell = class(TDNGenericImport<DNChartDataCellClass, DNChartDataCell>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1674392D-78E8-5FA1-BDBF-A72D26A78440}']
  end;

  ///<summary>
  ///  Represents series data point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataPoint')]
  DNChartDataPoint = interface(DDN.mscorlib.DNObject)
  ['{877550C5-23A3-3A29-8B52-66E4B75EE98B}']
  { getters & setters } 

    function get_XValue: DNIStringOrDoubleChartValue;
    function get_YValue: DNIDoubleChartValue;
    function get_BubbleSize: DNIDoubleChartValue;
    function get_Value: DNIDoubleChartValue;
    function get_SizeValue: DNIDoubleChartValue;
    function get_ColorValue: DNIDoubleChartValue;
    function get_ErrorBarsCustomValues: DNIErrorBarsCustomValues;
    function get_Label: DNIDataLabel;
    function get_IsBubble3D: Boolean;
    procedure set_IsBubble3D(value: Boolean);
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Marker: DNIMarker;
    function get_SetAsTotal: Boolean;
    procedure set_SetAsTotal(value: Boolean);
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_DataPointLevels: DNIChartDataPointLevelsManager;
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { methods } 

    ///<summary>
    ///  Returns an automatic color of data point based on series index, data point index, ParentSeriesGroup.IsColorVaried propery and chart style.
    ///  This color is used by default if FillType equals NotDefined.
    ///</summary>
    function GetAutomaticDataPointColor: DDN.Aspose.Common.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  XValue.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IStringOrDoubleChartValue" />
    ///  .
    ///</summary>
    property XValue: DNIStringOrDoubleChartValue read get_XValue;
    ///<summary>
    ///  YValue.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property YValue: DNIDoubleChartValue read get_YValue;
    ///<summary>
    ///  BubbleSize.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property BubbleSize: DNIDoubleChartValue read get_BubbleSize;
    ///<summary>
    ///  Value.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property Value: DNIDoubleChartValue read get_Value;
    ///<summary>
    ///  Returns the size value of chart data point.
    ///  Used with Treemap and Sunburst charts.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property SizeValue: DNIDoubleChartValue read get_SizeValue;
    ///<summary>
    ///  Returns the color value of chart data point.
    ///  Used with Map charts.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property ColorValue: DNIDoubleChartValue read get_ColorValue;
    ///<summary>
    ///  Represents series error bars values in case of Custom value type.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IErrorBarsCustomValues" />
    ///  .
    ///</summary>
    property ErrorBarsCustomValues: DNIErrorBarsCustomValues read get_ErrorBarsCustomValues;
    ///<summary>
    ///  Label.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabel" />
    ///  .
    ///</summary>
    property &Label: DNIDataLabel read get_Label;
    ///<summary>
    ///  Specifies that the bubbles have a 3-D effect applied to them.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsBubble3D: Boolean read get_IsBubble3D write set_IsBubble3D;
    ///<summary>
    ///  Specifies the amount the data point shall be moved from the center of the pie.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  Represents the formatting properties.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format write set_Format;
    ///<summary>
    ///  Specifies a data marker.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IMarker" />
    ///  .
    ///</summary>
    property Marker: DNIMarker read get_Marker;
    ///<summary>
    ///  Sets data point as total. Applied for Waterfall series type only.
    ///</summary>
    property SetAsTotal: Boolean read get_SetAsTotal write set_SetAsTotal;
    ///<summary>
    ///  Properties of corresponding legend entry in case of chart type from this list:
    ///  ChartType.BarOfPie,
    ///  ChartType.ExplodedPie,
    ///  ChartType.ExplodedPie3D,
    ///  ChartType.Pie,
    ///  ChartType.Pie3D,
    ///  ChartType.PieOfPie.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryProperties" />
    ///  .
    ///</summary>
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    ///<summary>
    ///  Returns container of  data point levels. Applied for Treeamp and Sunburst series.
    ///  Data point levels indexing is zero-based.
    ///</summary>
    property DataPointLevels: DNIChartDataPointLevelsManager read get_DataPointLevels;
    ///<summary>
    ///  Specifies the data point shall invert its colors if the value is negative.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Specifies actual x location (left) of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualX: Single read get_ActualX;
    ///<summary>
    ///  Specifies actual top of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualY: Single read get_ActualY;
    ///<summary>
    ///  Specifies actual width of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualWidth: Single read get_ActualWidth;
    ///<summary>
    ///  Specifies actual height of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualHeight: Single read get_ActualHeight;
  end;

  TDNChartDataPoint = class(TDNGenericImport<DNChartDataPointClass, DNChartDataPoint>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D07B2A28-049B-5DC4-B250-C47C10C7D5A6}']
  end;

  ///<summary>
  ///  Represents collection of a series data point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataPointCollection')]
  DNChartDataPointCollection = interface(DDN.mscorlib.DNObject)
  ['{F79C2999-5E51-3DAC-AA77-76BA506484B7}']
  { getters & setters } 

    function get_DataSourceTypeForXValues: DNDataSourceType;
    procedure set_DataSourceTypeForXValues(value: DNDataSourceType);
    function get_DataSourceTypeForYValues: DNDataSourceType;
    procedure set_DataSourceTypeForYValues(value: DNDataSourceType);
    function get_DataSourceTypeForBubbleSizes: DNDataSourceType;
    procedure set_DataSourceTypeForBubbleSizes(value: DNDataSourceType);
    function get_DataSourceTypeForValues: DNDataSourceType;
    procedure set_DataSourceTypeForValues(value: DNDataSourceType);
    function get_DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  If collection already contains data point with index <paramref name="index" />
    ///  then returns this data point.
    ///  If collection doesn't contains data point with index <paramref name="index" />
    ///  ==N (when number of data points in this collection is less or equal then N) then adds deficient data points and returns last (which has requested index). For example, collection indexes are {0, 1, 2}, and requested index is 5. Then method adds deficient data points: {0, 1, 2, 3, 4, 5}. And returns data point with index 5.
    ///</summary>
    ///  <param name="index">Index.</param>
    ///<returns>Returns data point with requested index.</returns>
    function GetOrCreateDataPointByIdx(index: UInt32): DNIChartDataPoint;
    ///<summary>
    ///  Copy to specified array.
    ///</summary>
    ///  <param name="array">Array to copy to.</param>
    ///  <param name="arrayIndex">Index to begin copying.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartDataPoint>;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Stock subtypes
    ///  (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeStock(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForStockSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Stock subtypes
    ///  (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeStock(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForStockSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Line subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeLine(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForLineSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Line subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeLine(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForLineSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: Double; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: string; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: Double; yValue: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeScatter(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: string; yValue: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Radar subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeRadar(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForRadarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Radar subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeRadar(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForRadarSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Column or Bar subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeColumn(Aspose.Slides.Charts.ChartType)" />
    ///  and <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBar(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Column or Bar subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeColumn(Aspose.Slides.Charts.ChartType)" />
    ///  and <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBar(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBarSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Area subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeArea(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForAreaSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Area subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeArea(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForAreaSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Pie subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypePie(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForPieSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Pie subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypePie(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForPieSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Doughnut subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeDoughnut(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForDoughnutSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Doughnut subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeDoughnut(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForDoughnutSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeBubble(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Surface subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeSurface(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForSurfaceSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Surface subtypes (see also <see cref="M:Aspose.Slides.Charts.ChartTypeCharacterizer.IsChartTypeSurface(Aspose.Slides.Charts.ChartType)" />
    ///  method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForSurfaceSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Sunburst.
    ///</summary>
    ///  <param name="sizeValue">Data point SizeValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForSunburstSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Treemap.
    ///</summary>
    ///  <param name="sizeValue">Data point SizeValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForTreemapSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is BoxAndWhisker.
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBoxAndWhiskerSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Waterfall.
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForWaterfallSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Histogram.
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForHistogramSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Funnel.
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForFunnelSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Map.
    ///</summary>
    ///  <param name="value">Data point ColorValue</param>
    ///<returns>New data point.</returns>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Map, 50, 50, 500, 400, false);
    ///  IChartDataWorkbook wb = chart.ChartData.ChartDataWorkbook;
    ///  IChartSeries series = chart.ChartData.Series.Add(ChartType.Map);
    ///  series.DataPoints.AddDataPointForMapSeries(wb.GetCell(0, "B2", 5));
    ///  series.DataPoints.AddDataPointForMapSeries(wb.GetCell(0, "B3", 1));
    ///  series.DataPoints.AddDataPointForMapSeries(wb.GetCell(0, "B4", 10));
    ///  }
    ///</code></example>
    function AddDataPointForMapSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Removes the element at the given index.
    ///</summary>
    ///  <param name="index">Index of a data point to remove.</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points XValue property object. In other words it specifies
    ///  the type of value of ChartDataPoint.XValue.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForXValues: DNDataSourceType read get_DataSourceTypeForXValues write set_DataSourceTypeForXValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points YValue property object. In other words it specifies
    ///  the type of value of ChartDataPoint.YValue.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForYValues: DNDataSourceType read get_DataSourceTypeForYValues write set_DataSourceTypeForYValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points BubbleSize property object. In other words it specifies
    ///  the type of value of ChartDataPoint.BubbleSize.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForBubbleSizes: DNDataSourceType read get_DataSourceTypeForBubbleSizes write set_DataSourceTypeForBubbleSizes;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points Value property object. In other words it specifies
    ///  the type of value of ChartDataPoint.Value.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForValues: DNDataSourceType read get_DataSourceTypeForValues write set_DataSourceTypeForValues;
    ///<summary>
    ///  Specifies types of values in ChartDataPoint.ErrorBarsCustomValues properties list.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataSourceTypeForErrorBarsCustomValues" />
    ///  .
    ///</summary>
    property DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues read get_DataSourceTypeForErrorBarsCustomValues;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNChartDataPointCollection = class(TDNGenericImport<DNChartDataPointCollectionClass, DNChartDataPointCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{23BB4D25-563D-5D30-BCE8-F2358D0A33C4}']
  end;

  ///<summary>
  ///  Represents data point level. Applies for Treemap and Sunburst chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataPointLevel')]
  DNChartDataPointLevel = interface(DDN.mscorlib.DNObject)
  ['{D2AD6771-5E0B-3967-A06C-2EB654169946}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_Label: DNIDataLabel;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents formatting properties of data point level.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Treemap, 50, 50, 500, 400);
    ///  IChartSeries series = chart.ChartData.Series[0];
    ///  IChartDataPointLevel dataPointLevel = series.DataPoints[7].DataPointLevels[2];
    ///  dataPointLevel.Format.Fill.FillType = FillType.Solid;
    ///  dataPointLevel.Format.Fill.SolidFillColor.Color = Color.Red;
    ///  }
    ///</code></example>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Represents data label of data point level. Applied for Treemap and  Sunburst sereis types.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabel" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Sunburst, 50, 50, 500, 400);
    ///  IChartSeries series = chart.ChartData.Series[0];
    ///  IChartDataPointLevel dataPointLevel = series.DataPoints[0].DataPointLevels[1];
    ///  dataPointLevel.Label.DataLabelFormat.ShowCategoryName = false;
    ///  dataPointLevel.Label.DataLabelFormat.ShowValue = true;
    ///  dataPointLevel.Label.DataLabelFormat.ShowSeriesName = true;
    ///  dataPointLevel = series.DataPoints[12].DataPointLevels[1];
    ///  dataPointLevel.Label.TextFormat.PortionFormat.FillFormat.FillType = FillType.Solid;
    ///  dataPointLevel.Label.TextFormat.PortionFormat.FillFormat.SolidFillColor.Color = Color.Red;
    ///  }
    ///</code></example>
    property &Label: DNIDataLabel read get_Label;
  end;

  TDNChartDataPointLevel = class(TDNGenericImport<DNChartDataPointLevelClass, DNChartDataPointLevel>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointLevelsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6800F631-7BF7-5044-8F81-B1F72AFE9362}']
  end;

  ///<summary>
  ///  Container of data point levels. Applied for Treeamp and Sunburst series.
  ///  Data point levels indexing is zero-based.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataPointLevelsManager')]
  DNChartDataPointLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{8B529FC0-1FF2-3052-8B75-40B4A3E435D8}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns data point levels count.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNChartDataPointLevelsManager = class(TDNGenericImport<DNChartDataPointLevelsManagerClass, DNChartDataPointLevelsManager>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataWorkbookClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7561469C-BEE8-5EA8-8386-31D5D66BAEA1}']
  end;

  ///<summary>
  ///  Provides access to embedded Excel workbook
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataWorkbook')]
  DNChartDataWorkbook = interface(DDN.mscorlib.DNObject)
  ['{0A4A0FDC-5B02-3B7A-AAE5-547B800CC8F3}']
  { methods } 

    ///<summary>
    ///  Gets the set of cells.
    ///</summary>
    ///  <param name="formula">Excel formula like "Sheet1!$A$2:$A$5".</param>
    ///  <param name="skipHiddenCells">If true then method returns collection without hidden cells.</param>
    function GetCellCollection(formula: string; skipHiddenCells: Boolean): DNIChartCellCollection;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetName">Name of the worksheet.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetName: string; row: Int32; column: Int32): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="cellName">Name of the cell.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetIndex: Int32; cellName: string): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="cellName">Name of the cell.</param>
    ///  <param name="value">The value.</param>
    ///<returns>
    ///  Cell object
    ///</returns>
    function GetCell(worksheetIndex: Int32; cellName: string; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///  <param name="value">The value.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChartDataWorkbook = class(TDNGenericImport<DNChartDataWorkbookClass, DNChartDataWorkbook>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataWorksheetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFF5651B-D76A-5F02-82CA-E3DCB3B58B8D}']
  end;

  ///<summary>
  ///  Represents worksheet associated with <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartDataWorksheet')]
  DNChartDataWorksheet = interface(DDN.mscorlib.DNObject)
  ['{6E7F26DA-4C90-3AEC-AACB-7A36507382A4}']
  { getters & setters } 

    function get_Name: string;
    function get_Index: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the name of the worksheet.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the index of the worksheet.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Index: Int32 read get_Index;
  end;

  TDNChartDataWorksheet = class(TDNGenericImport<DNChartDataWorksheetClass, DNChartDataWorksheet>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartLinesFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0131C84B-7C85-5CEB-8D4C-B1B376DCA7DB}']
  end;

  ///<summary>
  ///  Represents gridlines format properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartLinesFormat')]
  DNChartLinesFormat = interface(DDN.mscorlib.DNObject)
  ['{D00DF7BD-667E-3FC3-A9A2-D8389DE93F5D}']
  { getters & setters } 

    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns line style properties of a chart line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property Line: DNILineFormat read get_Line;
    ///<summary>
    ///  Returns effects used for a chart line.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property Effect: DNIEffectFormat read get_Effect;
  end;

  TDNChartLinesFormat = class(TDNGenericImport<DNChartLinesFormatClass, DNChartLinesFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartPlotAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F5C6C28-A3D0-5223-98DB-DC37C073182A}']
  end;

  ///<summary>
  ///  Represents rectangle where chart should be plotted.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartPlotArea')]
  DNChartPlotArea = interface(DDN.mscorlib.DNObject)
  ['{929FB9D9-279E-3816-8128-E68130D75AC3}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_Chart: DNIChart;
    function get_IsLocationAutocalculated: Boolean;
    function get_LayoutTargetType: DNLayoutTargetType;
    procedure set_LayoutTargetType(value: DNLayoutTargetType);
    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the format of a plot area.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Returns or sets the x coordinate of the upper left corner of plot area bounding box as a fraction of the width of the chart (from 0 to 1).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y coordinate of the upper left corner of plot area bounding box as a fraction of the height of the chart (from 0 to 1).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of a plot area bounding box as a fraction of the width of the chart (from 0 to 1).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of a plot area bounding box as a fraction of the height of the chart (from 0 to 1).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Right.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Right: Single read get_Right;
    ///<summary>
    ///  Bottom.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  Chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  Defines how location should be calculated: true – calculated automatically; defined by the X, Y, Width, Height properties.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsLocationAutocalculated: Boolean read get_IsLocationAutocalculated;
    ///<summary>
    ///  If layout of the plot area defined manually this property specifies whether
    ///  to layout the plot area by its inside (not including axis and axis labels) or outside
    ///  (including axis and axis labels).
    ///  Read/write <see cref="P:Aspose.Slides.Charts.ChartPlotArea.LayoutTargetType" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  using (Presentation presentation = new Presentation())
    ///  {
    ///  ISlide slide = presentation.Slides[0];
    ///  IChart chart = slide.Shapes.AddChart(ChartType.ClusteredColumn, 20, 100, 600, 400);
    ///  chart.PlotArea.AsILayoutable.X = 0.2f;
    ///  chart.PlotArea.AsILayoutable.Y = 0.2f;
    ///  chart.PlotArea.AsILayoutable.Width = 0.7f;
    ///  chart.PlotArea.AsILayoutable.Height = 0.7f;
    ///  chart.PlotArea.LayoutTargetType = LayoutTargetType.Inner;
    ///  ...
    ///  }
    ///</code></example>
    property LayoutTargetType: DNLayoutTargetType read get_LayoutTargetType write set_LayoutTargetType;
    ///<summary>
    ///  Specifies actual x location (left) of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualX: Single read get_ActualX;
    ///<summary>
    ///  Specifies actual top of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualY: Single read get_ActualY;
    ///<summary>
    ///  Specifies actual width of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualWidth: Single read get_ActualWidth;
    ///<summary>
    ///  Specifies actual height of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualHeight: Single read get_ActualHeight;
  end;

  TDNChartPlotArea = class(TDNGenericImport<DNChartPlotAreaClass, DNChartPlotArea>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartSeriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A429F33-D24F-5E41-AE8A-5E9A277DFE7A}']
  end;

  ///<summary>
  ///  Represents a chart series.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartSeries')]
  DNChartSeries = interface(DDN.mscorlib.DNObject)
  ['{21880A75-3FE9-34AF-878C-052D7CBFE8BE}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_Name: DNIStringChartValue;
    function get_DataPoints: DNIChartDataPointCollection;
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_PlotOnSecondAxis: Boolean;
    procedure set_PlotOnSecondAxis(value: Boolean);
    function get_ParentSeriesGroup: DNIChartSeriesGroup;
    function get_Format: DNIFormat;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Labels: DNIDataLabelCollection;
    function get_TrendLines: DNITrendlineCollection;
    function get_ErrorBarsXFormat: DNIErrorBarsFormat;
    function get_ErrorBarsYFormat: DNIErrorBarsFormat;
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_NumberFormatOfValues: string;
    procedure set_NumberFormatOfValues(value: string);
    function get_NumberFormatOfXValues: string;
    procedure set_NumberFormatOfXValues(value: string);
    function get_NumberFormatOfYValues: string;
    procedure set_NumberFormatOfYValues(value: string);
    function get_NumberFormatOfBubbleSizes: string;
    procedure set_NumberFormatOfBubbleSizes(value: string);
    function get_Marker: DNIMarker;
    function get_Bar3DShape: DNChartShapeType;
    procedure set_Bar3DShape(value: DNChartShapeType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_InvertedSolidFillColor: DNIColorFormat;
    function get_ShowInnerPoints: Boolean;
    procedure set_ShowInnerPoints(value: Boolean);
    function get_ShowOutlierPoints: Boolean;
    procedure set_ShowOutlierPoints(value: Boolean);
    function get_ShowMeanMarkers: Boolean;
    procedure set_ShowMeanMarkers(value: Boolean);
    function get_ShowMeanLine: Boolean;
    procedure set_ShowMeanLine(value: Boolean);
    function get_QuartileMethod: DNQuartileMethodType;
    procedure set_QuartileMethod(value: DNQuartileMethodType);
    function get_ShowConnectorLines: Boolean;
    procedure set_ShowConnectorLines(value: Boolean);
    function get_ParentLabelLayout: DNParentLabelLayoutType;
    procedure set_ParentLabelLayout(value: DNParentLabelLayoutType);
    function get_HasUpDownBars: Boolean;
    function get_GapWidth: Int32;
    function get_GapDepth: Int32;
    function get_FirstSliceAngle: UInt16;
    function get_DoughnutHoleSize: Byte;
    function get_Overlap: SByte;
    function get_SecondPieSize: UInt16;
    function get_HasSeriesLines: Boolean;
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    function get_PieSplitPosition: Double;
    function get_PieSplitBy: DNPieSplitType;
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_IsColorVaried: Boolean;
    function get_BubbleSizeScale: Int32;

  { methods } 

    ///<summary>
    ///  Returns an automatic color of series based on series index and chart style. This color is used by default if FillType equals NotDefined.
    ///</summary>
    ///<returns></returns>
    function GetAutomaticSeriesColor: DDN.Aspose.Common.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  Represents curve smoothing. True if curve smoothing is turned on for the line chart or scatter chart.
    ///  Applies only to line and scatter connected by lines charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Smooth: Boolean read get_Smooth write set_Smooth;
    ///<summary>
    ///  Return series name.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IStringChartValue" />
    ///  .
    ///</summary>
    property Name: DNIStringChartValue read get_Name;
    ///<summary>
    ///  Returns collection of data points of this series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartDataPointCollection" />
    ///  .
    ///</summary>
    property DataPoints: DNIChartDataPointCollection read get_DataPoints;
    ///<summary>
    ///  Returns a type of this series.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ChartType" />
    ///  .
    ///</summary>
    property &Type: DNChartType read get_Type write set_Type;
    ///<summary>
    ///  Indicates if this series is plotted on secondary axis.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis write set_PlotOnSecondAxis;
    ///<summary>
    ///  ParentSeriesGroup.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesGroup" />
    ///  .
    ///</summary>
    property ParentSeriesGroup: DNIChartSeriesGroup read get_ParentSeriesGroup;
    ///<summary>
    ///  Returns the format of a series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Returns the order of a series.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Order: Int32 read get_Order write set_Order;
    ///<summary>
    ///  Returns the Labels of a series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabelCollection" />
    ///  .
    ///</summary>
    property Labels: DNIDataLabelCollection read get_Labels;
    ///<summary>
    ///  Collection of series trend lines.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ITrendlineCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  TrendLines are available (not null) for data series in unstacked 2-D area, bar, column, line,
    ///  stock, xy (scatter), and bubble charts. A trendline are not available for data series
    ///  in any chart type that is stacked or 3-D. Trendlines are also not available for radar,
    ///  pie, surface, or doughnut charts.
    ///</remarks>
    property TrendLines: DNITrendlineCollection read get_TrendLines;
    ///<summary>
    ///  Represents ErrorBars of series with derection X.
    ///<remarks>
    ///  ErrorBars with X direction are avalible for series of type area, bar, scatter and bubble.
    ///  For any other types of chart this property returns null (including 3D charts).
    ///  In case of custom values use DataPoints collection to specify value
    ///  (with <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
    ///  property).
    ///</remarks>
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IErrorBarsFormat" />
    ///  .
    ///</summary>
    property ErrorBarsXFormat: DNIErrorBarsFormat read get_ErrorBarsXFormat;
    ///<summary>
    ///  Represents ErrorBars of series with derection Y.
    ///<remarks>
    ///  ErrorBars with Y direction are avalible for series of type area, bar, line, scatter and bubble.
    ///  For any other types of chart this property returns null (including 3D charts).
    ///  In case of custom values use DataPoints collection to specify value
    ///  (with <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
    ///  property).
    ///</remarks>
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IErrorBarsFormat" />
    ///  .
    ///</summary>
    property ErrorBarsYFormat: DNIErrorBarsFormat read get_ErrorBarsYFormat;
    ///<summary>
    ///  Represents legend entry related with this series
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryProperties" />
    ///  .
    ///</summary>
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    ///<summary>
    ///  NumberFormatOfValues.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfValues: string read get_NumberFormatOfValues write set_NumberFormatOfValues;
    ///<summary>
    ///  NumberFormatOfXValues.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfXValues: string read get_NumberFormatOfXValues write set_NumberFormatOfXValues;
    ///<summary>
    ///  NumberFormatOfYValues.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfYValues: string read get_NumberFormatOfYValues write set_NumberFormatOfYValues;
    ///<summary>
    ///  NumberFormatOfBubbleSizes.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfBubbleSizes: string read get_NumberFormatOfBubbleSizes write set_NumberFormatOfBubbleSizes;
    ///<summary>
    ///  Marker.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IMarker" />
    ///  .
    ///</summary>
    property Marker: DNIMarker read get_Marker;
    ///<summary>
    ///  Specifies the shape of a series of a 3-D bar chart.
    ///  Changing of value of this property can cause to automatically changing Type of series.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ChartShapeType" />
    ///  .
    ///</summary>
    property Bar3DShape: DNChartShapeType read get_Bar3DShape write set_Bar3DShape;
    ///<summary>
    ///  Specifies the bar, column or bubble series shall invert its colors if the value is negative.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Specifies invert solid color for series. To apply color setting set series format FillType to FillType.Solid.
    ///  Read/write <see cref="T:Aspose.Slides.ColorFormat" />
    ///  .
    ///</summary>
    property InvertedSolidFillColor: DNIColorFormat read get_InvertedSolidFillColor;
    ///<summary>
    ///  Represents inner points. True if inner points are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowInnerPoints: Boolean read get_ShowInnerPoints write set_ShowInnerPoints;
    ///<summary>
    ///  Represents outlier points. True if outlier points are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowOutlierPoints: Boolean read get_ShowOutlierPoints write set_ShowOutlierPoints;
    ///<summary>
    ///  Represents mean markers. True if mean markers are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMeanMarkers: Boolean read get_ShowMeanMarkers write set_ShowMeanMarkers;
    ///<summary>
    ///  Represents mean line. True if mean line are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMeanLine: Boolean read get_ShowMeanLine write set_ShowMeanLine;
    ///<summary>
    ///  Represents quartile method. Applies only to BoxAndWhisker charts.
    ///</summary>
    property QuartileMethod: DNQuartileMethodType read get_QuartileMethod write set_QuartileMethod;
    ///<summary>
    ///  Represents connector lines. Applies only to Waterfall charts.
    ///</summary>
    property ShowConnectorLines: Boolean read get_ShowConnectorLines write set_ShowConnectorLines;
    ///<summary>
    ///  Represents layout of parent category labels.   Applies only to Treemap charts.
    ///</summary>
    property ParentLabelLayout: DNParentLabelLayoutType read get_ParentLabelLayout write set_ParentLabelLayout;
    ///<summary>
    ///  Determines whether Line- or Stock-chart has a up/down bars.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.UpDownBars.HasUpDownBars read/write property for change value.
    ///  Use ParentSeriesGroup.UpDownBars property for format up/down bars.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.UpDownBars.HasUpDownBars.
    ///</remarks>
    property HasUpDownBars: Boolean read get_HasUpDownBars;
    ///<summary>
    ///  Specifies the space between bar or column clusters, as a percentage of the bar or column width.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.GapWidth read/write property for change value.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.GapWidth.
    ///</remarks>
    property GapWidth: Int32 read get_GapWidth;
    ///<summary>
    ///  Returns or sets the distance, as a percentage of the marker width, between the data series in a 3D chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.GapDepth read/write property for change value.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.GapDepth.
    ///</remarks>
    property GapDepth: Int32 read get_GapDepth;
    ///<summary>
    ///  Specifies the angle of the first pie or doughnut chart slice,
    ///  in degrees (clockwise from up, from 0 to 360 degrees).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.FirstSliceAngle read/write property for change value.
    ///  Read-only <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.FirstSliceAngle.
    ///</remarks>
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle;
    ///<summary>
    ///  Specifies the size of the hole in a doughnut chart (can be between 10 and 90 percents
    ///  of the size of the plot area.).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.DoughnutHoleSize read/write property for change value.
    ///  Read-only <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.DoughnutHoleSize.
    ///</remarks>
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize;
    ///<summary>
    ///  Specifies how much bars and columns shall overlap on 2-D charts (from -100 to 100).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.Overlap read/write property for change value.
    ///  Read-only <see cref="T:System.SByte" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.Overlap.
    ///</remarks>
    property Overlap: SByte read get_Overlap;
    ///<summary>
    ///  Specifies the size of the second pie or bar of a pie-of-pie chart or
    ///  a bar-of-pie chart, as a percentage of the size of the first pie (can
    ///  be between 5 and 200 percents).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.SecondPieSize read/write property for change value.
    ///  Read-only <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.SecondPieSize.
    ///</remarks>
    property SecondPieSize: UInt16 read get_SecondPieSize;
    ///<summary>
    ///  Determines whether there are series lines for this series and kindred series.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.HasSeriesLines read/write property for change value.
    ///  Use ParentSeriesGroup.SeriesLinesFormat property for format series lines.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.HasSeriesLines.
    ///</remarks>
    property HasSeriesLines: Boolean read get_HasSeriesLines;
    ///<summary>
    ///  Specifies how the bubble size values are represented on the bubble chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.BubbleSizeRepresentation read/write property for change value.
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.BubbleSizeRepresentation.
    ///</remarks>
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation;
    ///<summary>
    ///  Specifies a value that shall be used to determine which data points
    ///  are in the second pie or bar on a pie-of-pie or bar-of-pie chart.
    ///  Is used together with PieSplitBy property.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.PieSplitPosition read/write property for change value.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.PieSplitPosition.
    ///</remarks>
    property PieSplitPosition: Double read get_PieSplitPosition;
    ///<summary>
    ///  Specifies how to determine which data points are in the second pie or bar
    ///  on a pie-of-pie or bar-of-pie chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.PieSplitBy read/write property for change value.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.PieSplitType" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  1) This is the projection of the property ParentSeriesGroup.PieSplitBy.
    ///  2) If property value is PieSplitType.Custom then you can define custom split
    ///  information with ParentSeriesGroup.PieSplitCustomPoints property.
    ///</remarks>
    property PieSplitBy: DNPieSplitType read get_PieSplitBy;
    ///<summary>
    ///  The custom split information for a pie-of-pie or bar-of-pie chart with a custom split.
    ///  Contains data points that shall be drawn in the second pie or bar in a pie-of-pie or
    ///  bar-of-pie chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property
    ///  Read-only <see cref="T:Aspose.Slides.Charts.PieSplitCustomPointCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.PieSplitCustomPoints.
    ///</remarks>
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    ///<summary>
    ///  Specifies that each data marker in the series has a different color.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.IsColorVaried read/write property for change value.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.IsColorVaried.
    ///</remarks>
    property IsColorVaried: Boolean read get_IsColorVaried;
    ///<summary>
    ///  Specifies the scale factor for the bubble chart (can be
    ///  between 0 and 300 percents of the default size).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.BubbleSizeScale read/write property for change value.
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.BubbleSizeScale.
    ///</remarks>
    property BubbleSizeScale: Int32 read get_BubbleSizeScale;
  end;

  TDNChartSeries = class(TDNGenericImport<DNChartSeriesClass, DNChartSeries>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartSeriesCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{608A1701-E66B-584B-BC42-CE7390221E81}']
  end;

  ///<summary>
  ///  Represents collection of  <see cref="T:Aspose.Slides.Charts.ChartSeries" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartSeriesCollection')]
  DNChartSeriesCollection = interface(DDN.mscorlib.DNObject)
  ['{15F060BA-AC94-392A-B046-BCE210AA76B6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Creates new chart series and inserts it into the collection.
    ///</summary>
    function Insert(index: Int32; &type: DNChartType): DNIChartSeries;
    ///<summary>
    ///  Searches for the specified <see cref="T:Aspose.Slides.Charts.ChartSeries" />
    ///  and returns the zero-based index of the first occurrence within the entire Collection
    ///</summary>
    ///  <param name="value">Chart series value.</param>
    ///<returns>The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.</returns>
    function IndexOf(value: DNIChartSeries): Int32;
    ///<summary>
    ///  Removes an ActiveX control stored at specified position from the collection.
    ///</summary>
    ///  <param name="index">Index of a control to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartSeries>;
    ///<summary>
    ///  Copies the entire collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array</param>
    ///  <param name="index">Index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of objects in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNChartSeriesCollection = class(TDNGenericImport<DNChartSeriesCollectionClass, DNChartSeriesCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartSeriesGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1FB9789A-7134-5EF0-A78D-C1724DCE818D}']
  end;

  ///<summary>
  ///  Represents group of series.
  ///</summary>
  ///<remarks>
  ///  1) See summary and remarks for ChartSeriesGroupCollection class and CombinableSeriesTypesGroup enum.
  ///  2) Group of series contains some series properies whitch is common for
  ///  each series in group ("series group properties").
  ///  "Series group properties" in ChartSeriesGroup class is read/write.
  ///  Each of "series group properties" can have a read-only projection in ChartSeries class.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Charts.ChartSeriesGroup')]
  DNChartSeriesGroup = interface(DDN.mscorlib.DNObject)
  ['{BACE024B-10C1-303E-8608-A8EDECDAF100}']
  { getters & setters } 

    function get_Type: DNCombinableSeriesTypesGroup;
    function get_PlotOnSecondAxis: Boolean;
    function get_Series: DNIChartSeriesReadonlyCollection;
    function get_UpDownBars: DNIUpDownBarsManager;
    function get_GapWidth: UInt16;
    procedure set_GapWidth(value: UInt16);
    function get_GapDepth: UInt16;
    procedure set_GapDepth(value: UInt16);
    function get_FirstSliceAngle: UInt16;
    procedure set_FirstSliceAngle(value: UInt16);
    function get_DoughnutHoleSize: Byte;
    procedure set_DoughnutHoleSize(value: Byte);
    function get_Overlap: SByte;
    procedure set_Overlap(value: SByte);
    function get_SecondPieSize: UInt16;
    procedure set_SecondPieSize(value: UInt16);
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    procedure set_BubbleSizeRepresentation(value: DNBubbleSizeRepresentationType);
    function get_PieSplitPosition: Double;
    procedure set_PieSplitPosition(value: Double);
    function get_PieSplitBy: DNPieSplitType;
    procedure set_PieSplitBy(value: DNPieSplitType);
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_HasSeriesLines: Boolean;
    procedure set_HasSeriesLines(value: Boolean);
    function get_HiLowLinesFormat: DNIChartLinesFormat;
    function get_BubbleSizeScale: Int32;
    procedure set_BubbleSizeScale(value: Int32);
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_Chart: DNIChart;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a type of this series group.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.CombinableSeriesTypesGroup" />
    ///  .
    ///</summary>
    property &Type: DNCombinableSeriesTypesGroup read get_Type;
    ///<summary>
    ///  Indicates if series of this group is plotted on secondary axis.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis;
    ///<summary>
    ///  Returns a collection of series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesReadonlyCollection" />
    ///  .
    ///</summary>
    property Series: DNIChartSeriesReadonlyCollection read get_Series;
    ///<summary>
    ///  Provede access to up/down bars of Line- or Stock-chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IUpDownBarsManager" />
    ///  .
    ///</summary>
    property UpDownBars: DNIUpDownBarsManager read get_UpDownBars;
    ///<summary>
    ///  Specifies the space between bar or column clusters, as a percentage of the bar or column width.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property GapWidth: UInt16 read get_GapWidth write set_GapWidth;
    ///<summary>
    ///  Returns or sets the distance, as a percentage of the marker width, between the data series in a 3D chart.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property GapDepth: UInt16 read get_GapDepth write set_GapDepth;
    ///<summary>
    ///  Gets or sets the angle of the first pie or doughnut chart slice,
    ///  in degrees (clockwise from up, from 0 to 360 degrees).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle write set_FirstSliceAngle;
    ///<summary>
    ///  Specifies the size of the hole in a doughnut chart (can be between 0 and 90 percents
    ///  of the size of the plot area.).
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize write set_DoughnutHoleSize;
    ///<summary>
    ///  Specifies how much bars and columns shall overlap on 2-D charts (from -100 to 100).
    ///  Read/write <see cref="T:System.SByte" />
    ///  .
    ///</summary>
    property Overlap: SByte read get_Overlap write set_Overlap;
    ///<summary>
    ///  Specifies the size of the second pie or bar of a pie-of-pie chart or
    ///  a bar-of-pie chart, as a percentage of the size of the first pie (can
    ///  be between 5 and 200 percents).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property SecondPieSize: UInt16 read get_SecondPieSize write set_SecondPieSize;
    ///<summary>
    ///  Specifies how the bubble size values are represented on the bubble chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.BubbleSizeRepresentationType" />
    ///  .
    ///</summary>
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation write set_BubbleSizeRepresentation;
    ///<summary>
    ///  Specifies a value that shall be used to determine which data points
    ///  are in the second pie or bar on a pie-of-pie or bar-of-pie chart.
    ///  Is used together with PieSplitBy property.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property PieSplitPosition: Double read get_PieSplitPosition write set_PieSplitPosition;
    ///<summary>
    ///  Specifies how to determine which data points are in the second pie or bar
    ///  on a pie-of-pie or bar-of-pie chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.PieSplitType" />
    ///  .
    ///</summary>
    property PieSplitBy: DNPieSplitType read get_PieSplitBy write set_PieSplitBy;
    ///<summary>
    ///  Specifies that each data marker in the series has a different color.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    ///<summary>
    ///  True if chart has series lines. Applied to stacked bar and OfPie charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasSeriesLines: Boolean read get_HasSeriesLines write set_HasSeriesLines;
    ///<summary>
    ///  Specifies HiLowLines format.
    ///  HiLowLines applied with HiLowClose, OpenHiLowClose, VolumeHiLowClose and VolumeOpenHiLowClose chart types.
    ///</summary>
    property HiLowLinesFormat: DNIChartLinesFormat read get_HiLowLinesFormat;
    ///<summary>
    ///  Specifies the scale factor for the bubble chart (can be
    ///  between 0 and 300 percents of the default size).
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property BubbleSizeScale: Int32 read get_BubbleSizeScale write set_BubbleSizeScale;
    ///<summary>
    ///  The custom split information for a pie-of-pie or bar-of-pie chart with a custom split.
    ///  Contains data points that shall be drawn in the second pie or bar in a pie-of-pie or
    ///  bar-of-pie chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.PieSplitCustomPointCollection" />
    ///  .
    ///</summary>
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
  end;

  TDNChartSeriesGroup = class(TDNGenericImport<DNChartSeriesGroupClass, DNChartSeriesGroup>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartTextFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E1E15A2-545C-507B-89DC-2C2DFDB2EC18}']
  end;

  ///<summary>
  ///  Specifies default text formatting for chart text elements.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartTextFormat')]
  DNChartTextFormat = interface(DDN.mscorlib.DNObject)
  ['{14B6C241-0E83-3DC0-B650-47C42920B05E}']
  { getters & setters } 

    function get_TextBlockFormat: DNIChartTextBlockFormat;
    function get_ParagraphFormat: DNIChartParagraphFormat;
    function get_PortionFormat: DNIChartPortionFormat;

  { methods } 

    ///<summary>
    ///  Copies text format to specified text frame.
    ///</summary>
    ///  <param name="destTextFrame">Text frame to copy text format to.</param>
    procedure CopyTo(destTextFrame: DNITextFrame);
    ///<summary>
    ///  Copies text format from specified text frame.
    ///</summary>
    ///  <param name="sourceTextFrame">Text frame to copy text format.</param>
    procedure CopyFrom(sourceTextFrame: DNITextFrame);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  TextBlockFormat.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextBlockFormat" />
    ///  .
    ///</summary>
    property TextBlockFormat: DNIChartTextBlockFormat read get_TextBlockFormat;
    ///<summary>
    ///  ParagraphFormat.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartParagraphFormat" />
    ///  .
    ///</summary>
    property ParagraphFormat: DNIChartParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  PortionFormat.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartPortionFormat" />
    ///  .
    ///</summary>
    property PortionFormat: DNIChartPortionFormat read get_PortionFormat;
  end;

  TDNChartTextFormat = class(TDNGenericImport<DNChartTextFormatClass, DNChartTextFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartTitleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6161E043-B76D-552A-993D-90E35876C8FD}']
  end;

  ///<summary>
  ///  Represents chart title properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartTitle')]
  DNChartTitle = interface(DDN.mscorlib.DNObject)
  ['{5D882DCF-7198-32DC-9611-6EAE0ECB6DC8}']
  { getters & setters } 

    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Format: DNIFormat;
    function get_TextFrameForOverriding: DNITextFrame;
    function get_TextFormat: DNIChartTextFormat;
    function get_Chart: DNIChart;

  { methods } 

    ///<summary>
    ///  Initialize TextFrameForOverriding with the text in paramener "text".
    ///  If TextFrameForOverriding is already initialized then simply changes its text.
    ///</summary>
    ///  <param name="text">Text for a new TextFrameForOverriding.</param>
    function AddTextFrameForOverriding(text: string): DNITextFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the x coordinate of a title as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y coordinate of a title as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of a title as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of a title as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Right.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Right: Single read get_Right;
    ///<summary>
    ///  Bottom.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  Determines whether other chart elements shall be allowed to overlap title.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Overlay: Boolean read get_Overlay write set_Overlay;
    ///<summary>
    ///  Returns the fill, line, effect styles of a title.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Can contain a rich formatted text. If this property is not null then this
    ///  formatted text value overrides auto-generated text.
    ///  Auto-generated text is an implicit property of the data label, the display
    ///  unit label of the value axis, the axis title, the chart title, the label of the trendline.
    ///  Auto-generated text is formatted with the IFormattedTextContainer.TextFormat property.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    ///<summary>
    ///  Returns text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
  end;

  TDNChartTitle = class(TDNGenericImport<DNChartTitleClass, DNChartTitle>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartTypeCharacterizerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C493A479-98D1-53BC-AE5D-13ED316AC70F}']
  { static methods } 

    ///<summary>
    ///  Return true if chartType is one of bar3DChart subtypes (3D columns or bars).
    ///</summary>
    {class} function IsBar3DChart(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if <paramref name="chartType" />
    ///  is one of 2D chart types.
    ///</summary>
    {class} function Is2DChart(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if <paramref name="chartType" />
    ///  is one of 3D chart types.
    ///</summary>
    {class} function Is3DChart(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Column subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredColumn" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredColumn3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredCone" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredCylinder" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredPyramid" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedColumn" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedColumn3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedCone" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedCylinder" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedPyramid" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedColumn" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedColumn3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedCone" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedCylinder" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedPyramid" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Column3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Cylinder3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Cone3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Pyramid3D" />
    ///  .
    ///</summary>
    {class} function IsChartTypeColumn(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Line subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Line" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.LineWithMarkers" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedLine" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedLineWithMarkers" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedLine" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedLineWithMarkers" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Line3D" />
    ///  .
    ///</summary>
    {class} function IsChartTypeLine(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Pie subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.BarOfPie" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ExplodedPie" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ExplodedPie3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Pie" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Pie3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PieOfPie" />
    ///  .
    ///</summary>
    {class} function IsChartTypePie(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Bar subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredBar" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredBar3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedBar" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedBar3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedBar" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedBar3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredHorizontalCone" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredHorizontalCylinder" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ClusteredHorizontalPyramid" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedHorizontalCone" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedHorizontalCylinder" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedHorizontalPyramid" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedHorizontalCone" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedHorizontalCylinder" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedHorizontalPyramid" />
    ///  .
    ///</summary>
    {class} function IsChartTypeBar(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Area subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Area" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedArea" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.PercentsStackedArea3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedArea" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.StackedArea3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Area3D" />
    ///  .
    ///</summary>
    {class} function IsChartTypeArea(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Scatter subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ScatterWithMarkers" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ScatterWithSmoothLines" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ScatterWithSmoothLinesAndMarkers" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ScatterWithStraightLines" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ScatterWithStraightLinesAndMarkers" />
    ///  .
    ///</summary>
    {class} function IsChartTypeScatter(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Stock subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.HighLowClose" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.OpenHighLowClose" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.VolumeHighLowClose" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.VolumeOpenHighLowClose" />
    ///  .
    ///</summary>
    {class} function IsChartTypeStock(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Surface subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Surface3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.WireframeSurface3D" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Contour" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.WireframeContour" />
    ///  .
    ///</summary>
    {class} function IsChartTypeSurface(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Doughnut subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Doughnut" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.ExplodedDoughnut" />
    ///  .
    ///</summary>
    {class} function IsChartTypeDoughnut(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Bubble subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Bubble" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.BubbleWith3D" />
    ///  .
    ///</summary>
    {class} function IsChartTypeBubble(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Return true if chartType is one of Radar subtypes.
    ///  Subtypes set corresponds to the appropriate set in PowerPoint (see "Change Chart Type" dialog in PowerPoint):
    ///<see cref="F:Aspose.Slides.Charts.ChartType.FilledRadar" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.Radar" />
    ///  ,
    ///<see cref="F:Aspose.Slides.Charts.ChartType.RadarWithMarkers" />
    ///  .
    ///</summary>
    {class} function IsChartTypeRadar(chartType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if specified series type uses X value coordinates.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if uses otherwise false.</returns>
    {class} function IsSeriesUsesXValueCoordinate(seriesType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if specified series type uses Y value coordinates.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if uses otherwise false.</returns>
    {class} function IsSeriesUsesYValueCoordinate(seriesType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if specified series type uses value coordinates.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if uses otherwise false.</returns>
    {class} function IsSeriesUsesValueCoordinate(seriesType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if bubble size coordinates can be used for specified series type.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if can be used, otherwise false.</returns>
    {class} function IsSeriesUsesBubbleSizeCoordinate(seriesType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if there are series trend lines for specified series type.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if present otherwise false.</returns>
    {class} function HasSeriesTrendLines(seriesType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if error bars X allowed for specified series type.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if allowed, otherwise false.</returns>
    {class} function IsErrorBarsXAllowed(seriesType: DNChartType): Boolean;
    ///<summary>
    ///  Returns if error bars Y allowed for specified series type.
    ///</summary>
    ///  <param name="seriesType">Series type.</param>
    ///<returns>True if allowed, otherwise false.</returns>
    {class} function IsErrorBarsYAllowed(seriesType: DNChartType): Boolean;

  end;

  ///<summary>
  ///  Helper for getting additional information about charts and series by its ChartType.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartTypeCharacterizer')]
  DNChartTypeCharacterizer = interface(DDN.mscorlib.DNObject)
  ['{1B787FB4-EFF9-37B4-B83E-5DFCFABB4D14}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChartTypeCharacterizer = class(TDNGenericImport<DNChartTypeCharacterizerClass, DNChartTypeCharacterizer>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartWallClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1BEF600-6ED5-5F6D-8860-55CFD589B887}']
  end;

  ///<summary>
  ///  Represents walls on 3d charts.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ChartWall')]
  DNChartWall = interface(DDN.mscorlib.DNObject)
  ['{811579BA-0918-3D85-AE50-43075A944AD0}']
  { getters & setters } 

    function get_Thickness: Int32;
    procedure set_Thickness(value: Int32);
    function get_Format: DNIFormat;
    function get_PictureType: DNPictureType;
    procedure set_PictureType(value: DNPictureType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the walls thickness as a percentage of the largest
    ///  dimension of the plot volume.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Thickness: Int32 read get_Thickness write set_Thickness;
    ///<summary>
    ///  Returns the wall fill, line, effect, 3d styles.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Return or sets the picture type.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.PictureType" />
    ///  .
    ///</summary>
    property PictureType: DNPictureType read get_PictureType write set_PictureType;
  end;

  TDNChartWall = class(TDNGenericImport<DNChartWallClass, DNChartWall>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FFB465A0-FFB7-529B-8E87-FEE9EFB3DD5E}']
  { constructors } 

    ///<summary>
    ///  Creates a new instance of DataLabel class.
    ///</summary>
    ///  <param name="parentImmediate">Parent ChartDataPoint.</param>
    {class} function init(parentImmediate: DNIChartDataPoint): DNDataLabel;

  end;

  ///<summary>
  ///  Represents a series labels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DataLabel')]
  DNDataLabel = interface(DDN.mscorlib.DNObject)
  ['{88E074E0-C2F7-3611-BAF0-4177C27C54C1}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_IsVisible: Boolean;
    function get_TextFrameForOverriding: DNITextFrame;
    function get_TextFormat: DNIChartTextFormat;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_DataLabelFormat: DNIDataLabelFormat;
    function get_ValueFromCell: DNIChartDataCell;
    procedure set_ValueFromCell(value: DNIChartDataCell);
    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { methods } 

    ///<summary>
    ///  Make data label hidden by setting all Show*-flags (ShowValue, ...) to false state.
    ///  IsVisible will be false after this.
    ///</summary>
    ///<remarks>
    ///  If data label is not visible (IsVisible is false) you can make data label visible with
    ///  setting Show*-flags (ShowValue, ...) to true state.
    ///</remarks>
    procedure Hide;
    ///<summary>
    ///  Returns actual label text based on DataLabelFormat settings or TextFrameForOverriding.Text value.
    ///</summary>
    ///<returns></returns>
    function GetActualLabelText: string;
    ///<summary>
    ///  Initialize TextFrameForOverriding with the text in paramener "text".
    ///  If TextFrameForOverriding is already initialized then simply changes its text.
    ///</summary>
    ///  <param name="text">Text for a new TextFrameForOverriding.</param>
    function AddTextFrameForOverriding(text: string): DNITextFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  False means that data label is not visible (and so all Show*-flags (ShowValue, ...) are false).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If data label is visible you can make it hidden with Hide() method.
    ///  But if data label is not visible (IsVisible is false) you can make data label visible
    ///  with setting Show*-flags (ShowValue, ...) to true state.
    ///</remarks>
    property IsVisible: Boolean read get_IsVisible;
    ///<summary>
    ///  Can contain a rich formatted text. If this property is not null then this
    ///  formatted text value overrides auto-generated text of data label.
    ///  Auto-generated text of data label means text that is managed by ShowSeriesName,
    ///  ShowValue, ... properties and is formatted with the TextFormatManager.TextFormat property.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    ///<summary>
    ///  Returns text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Returns or sets the x coordinate of a title as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y coordinate of a title as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of a title as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of a title as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Right.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Right: Single read get_Right;
    ///<summary>
    ///  Bottom.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  Returns data label format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabelFormat" />
    ///  .
    ///</summary>
    property DataLabelFormat: DNIDataLabelFormat read get_DataLabelFormat;
    ///<summary>
    ///  Gets or sets workbook data cell. Applied if IDataLabelFormat.ShowLabelValueFromCell property equals true.
    ///</summary>
    property ValueFromCell: DNIChartDataCell read get_ValueFromCell write set_ValueFromCell;
    ///<summary>
    ///  Specifies actual x location (left) of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualX: Single read get_ActualX;
    ///<summary>
    ///  Specifies actual top of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualY: Single read get_ActualY;
    ///<summary>
    ///  Specifies actual width of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualWidth: Single read get_ActualWidth;
    ///<summary>
    ///  Specifies actual height of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualHeight: Single read get_ActualHeight;
  end;

  TDNDataLabel = class(TDNGenericImport<DNDataLabelClass, DNDataLabel>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataLabelCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{240E5C8F-D090-59A4-8768-A62F1530E774}']
  end;

  ///<summary>
  ///  Represents a series labels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DataLabelCollection')]
  DNDataLabelCollection = interface(DDN.mscorlib.DNObject)
  ['{B607735C-22C8-3980-87D5-C877AD79018A}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_IsVisible: Boolean;
    function get_CountOfVisibleDataLabels: Int32;
    function get_Count: Int32;
    function get_DefaultDataLabelFormat: DNIDataLabelFormat;
    function get_ParentSeries: DNIChartSeries;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIDataLabel>;
    ///<summary>
    ///  Make data label hidden by default by setting all Show*-flags (ShowValue, ...) of the
    ///  DefaultDataLabelFormat property to false state.
    ///  IsVisible will be false after this.
    ///</summary>
    ///<remarks>
    ///  If data label is not visible by default (IsVisible is false) you can make data label "visible
    ///  by default" with setting Show*-flags (ShowValue, ...) of the DefaultDataLabelFormat property
    ///  to true state.
    ///</remarks>
    procedure Hide;
    ///<summary>
    ///  Returns an index of the specified DataLabel in the collection.
    ///</summary>
    ///  <param name="value">DataLabel to find.</param>
    ///<returns>Index of a DataLabel or -1 if DataLabel not from this collection.</returns>
    function IndexOf(value: DNIDataLabel): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  False means that data label is not visible by default (and so all
    ///  Show*-flags (ShowValue, ...) of the DefaultDataLabelFormat property are false).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If data label is visible by default you can make it hidden by default with Hide() method.
    ///  But if data label is not visible by default (IsVisible is false) you can make data label "visible
    ///  by default" with setting Show*-flags (ShowValue, ...) of the DefaultDataLabelFormat property
    ///  to true state.
    ///</remarks>
    property IsVisible: Boolean read get_IsVisible;
    ///<summary>
    ///  Gets the number of visible data labels in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property CountOfVisibleDataLabels: Int32 read get_CountOfVisibleDataLabels;
    ///<summary>
    ///  Gets the number of all data labels in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets the default data label format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabelFormat" />
    ///  .
    ///</summary>
    property DefaultDataLabelFormat: DNIDataLabelFormat read get_DefaultDataLabelFormat;
    ///<summary>
    ///  Gets the parent series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeries" />
    ///  .
    ///</summary>
    property ParentSeries: DNIChartSeries read get_ParentSeries;
  end;

  TDNDataLabelCollection = class(TDNGenericImport<DNDataLabelCollectionClass, DNDataLabelCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataSourceTypeForErrorBarsCustomValuesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD38B363-A819-514B-8110-AE273D9D4449}']
  { constructors } 

    {class} function init: DNDataSourceTypeForErrorBarsCustomValues;

  end;

  ///<summary>
  ///  Specifies types of values in ChartDataPoint.ErrorBarsCustomValues properties list
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DataSourceTypeForErrorBarsCustomValues')]
  DNDataSourceTypeForErrorBarsCustomValues = interface(DDN.mscorlib.DNObject)
  ['{59B83C74-D1E6-4E59-949E-A849EC79FA9B}']
  { getters & setters } 

    function get_DataSourceTypeForXMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForXPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXPlusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYPlusValues(value: DNDataSourceType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points XMinus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPoint.ErrorBarsCustomValues.XMinus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForXMinusValues: DNDataSourceType read get_DataSourceTypeForXMinusValues write set_DataSourceTypeForXMinusValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points XPlus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPoint.ErrorBarsCustomValues.XPlus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForXPlusValues: DNDataSourceType read get_DataSourceTypeForXPlusValues write set_DataSourceTypeForXPlusValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points YMinus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPointEx.ErrorBarsCustomValues.YMinus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForYMinusValues: DNDataSourceType read get_DataSourceTypeForYMinusValues write set_DataSourceTypeForYMinusValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points YPlus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPointEx.ErrorBarsCustomValues.YPlus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForYPlusValues: DNDataSourceType read get_DataSourceTypeForYPlusValues write set_DataSourceTypeForYPlusValues;
  end;

  TDNDataSourceTypeForErrorBarsCustomValues = class(TDNGenericImport<DNDataSourceTypeForErrorBarsCustomValuesClass, DNDataSourceTypeForErrorBarsCustomValues>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D722619-337D-56CF-B047-9B9671C892A4}']
  end;

  ///<summary>
  ///  Represents data table properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DataTable')]
  DNDataTable = interface(DDN.mscorlib.DNObject)
  ['{66EFB125-323A-31F6-B19D-8D50060DC04F}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_HasBorderHorizontal: Boolean;
    procedure set_HasBorderHorizontal(value: Boolean);
    function get_HasBorderOutline: Boolean;
    procedure set_HasBorderOutline(value: Boolean);
    function get_HasBorderVertical: Boolean;
    procedure set_HasBorderVertical(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_Chart: DNIChart;
    function get_TextFormat: DNIChartTextFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the line, fill, and effect styles of an object.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  True if the chart data table has horizontal cell borders.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBorderHorizontal: Boolean read get_HasBorderHorizontal write set_HasBorderHorizontal;
    ///<summary>
    ///  True if the chart data table has outline borders.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBorderOutline: Boolean read get_HasBorderOutline write set_HasBorderOutline;
    ///<summary>
    ///  True if the chart data table has vertical cell borders.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBorderVertical: Boolean read get_HasBorderVertical write set_HasBorderVertical;
    ///<summary>
    ///  True if the data label legend key is visible.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Returns chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  Returns text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
  end;

  TDNDataTable = class(TDNGenericImport<DNDataTableClass, DNDataTable>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNErrorBarsCustomValuesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9666B36D-41D1-5A15-A839-84D98474123D}']
  end;

  ///<summary>
  ///  Specifies the errors bar values. It shall be used only when the Error bars value type is Custom.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ErrorBarsCustomValues')]
  DNErrorBarsCustomValues = interface(DDN.mscorlib.DNObject)
  ['{7D5E7454-DEB7-3CA3-A6BA-4DBF271476E0}']
  { getters & setters } 

    function get_XMinus: DNIDoubleChartValue;
    function get_YMinus: DNIDoubleChartValue;
    function get_XPlus: DNIDoubleChartValue;
    function get_YPlus: DNIDoubleChartValue;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the error bar value in the negative direction.
    ///  Available if error bars value type is Custom and ErrorBarsXFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property XMinus: DNIDoubleChartValue read get_XMinus;
    ///<summary>
    ///  Specifies the error bar value in the negative direction.
    ///  Available if error bars value type is Custom and ErrorBarsYFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property YMinus: DNIDoubleChartValue read get_YMinus;
    ///<summary>
    ///  Specifies the error bar value in the positive direction.
    ///  Available if error bars value type is Custom and ErrorBarsXFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property XPlus: DNIDoubleChartValue read get_XPlus;
    ///<summary>
    ///  Specifies the error bar value in the positive direction.
    ///  Available if error bars value type is Custom and ErrorBarsYFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property YPlus: DNIDoubleChartValue read get_YPlus;
  end;

  TDNErrorBarsCustomValues = class(TDNGenericImport<DNErrorBarsCustomValuesClass, DNErrorBarsCustomValues>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNErrorBarsFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3597F3FB-2572-587D-AA07-35071D642856}']
  end;

  ///<summary>
  ///  Represents error bars of chart series. ErrorBars custom values are in IChartDataPointCollection
  ///  (in <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
  ///  property).
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ErrorBarsFormat')]
  DNErrorBarsFormat = interface(DDN.mscorlib.DNObject)
  ['{554E667A-A078-3633-B231-99EC71D4FDB1}']
  { getters & setters } 

    function get_Type: DNErrorBarType;
    procedure set_Type(value: DNErrorBarType);
    function get_ValueType: DNErrorBarValueType;
    procedure set_ValueType(value: DNErrorBarValueType);
    function get_HasEndCap: Boolean;
    procedure set_HasEndCap(value: Boolean);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Chart: DNIChart;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets type of error bars.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ErrorBarType" />
    ///  .
    ///</summary>
    property &Type: DNErrorBarType read get_Type write set_Type;
    ///<summary>
    ///  Represents possible ways to determine the length of the error bars.
    ///  In case of custom value type to specify value use <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
    ///  property of specific data point in DataPoints collection of series.
    ///  In case of Fixed, Percentage or StandardDeviation value type use Value property to specify value.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ErrorBarValueType" />
    ///  .
    ///</summary>
    property ValueType: DNErrorBarValueType read get_ValueType write set_ValueType;
    ///<summary>
    ///  Specifies an end cap is not drawn on the error bars.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasEndCap: Boolean read get_HasEndCap write set_HasEndCap;
    ///<summary>
    ///  Gets or sets value which is used with Fixed, Percentage and StandardDeviation value types to determine the length of the error bars.
    ///  In any other case will return NaN.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value: Single read get_Value write set_Value;
    ///<summary>
    ///  Represents the format of the error bars.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format write set_Format;
    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  Gets or sets Error Bars visibility .
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
  end;

  TDNErrorBarsFormat = class(TDNGenericImport<DNErrorBarsFormatClass, DNErrorBarsFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Specifies actual position of a chart element.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IActualLayout')]
  DNIActualLayout = interface(DDN.mscorlib.DNObject)
  ['{4590DDA1-26F7-4CF9-BEB6-9CE4DA7C2444}']
  { getters & setters } 

    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { propertys } 

    ///<summary>
    ///  Specifies actual x location (left) of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualX: Single read get_ActualX;
    ///<summary>
    ///  Specifies actual top of the chart element relative to the left top corner of the chart.
    ///  Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualY: Single read get_ActualY;
    ///<summary>
    ///  Specifies actual width of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualWidth: Single read get_ActualWidth;
    ///<summary>
    ///  Specifies actual height of the chart element. Call method IChart.ValidateChartLayout() before to get actual values.
    ///  Read <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ActualHeight: Single read get_ActualHeight;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents series data point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataPoint')]
  DNIChartDataPoint = interface(DNIActualLayout)
  ['{B8CCB139-BD58-4FB4-9233-5DADA7E9C38E}']
  { getters & setters } 

    function get_XValue: DNIStringOrDoubleChartValue;
    function get_YValue: DNIDoubleChartValue;
    function get_BubbleSize: DNIDoubleChartValue;
    function get_Value: DNIDoubleChartValue;
    function get_SizeValue: DNIDoubleChartValue;
    function get_ColorValue: DNIDoubleChartValue;
    function get_ErrorBarsCustomValues: DNIErrorBarsCustomValues;
    function get_Label: DNIDataLabel;
    function get_IsBubble3D: Boolean;
    procedure set_IsBubble3D(value: Boolean);
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Marker: DNIMarker;
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_SetAsTotal: Boolean;
    procedure set_SetAsTotal(value: Boolean);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_DataPointLevels: DNIChartDataPointLevelsManager;
    function get_AsIActualLayout: DNIActualLayout;

  { methods } 

    ///<summary>
    ///  Removes DataPoint from chart series.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if data point is already removed from chart series.
    ///</exception>
    procedure Remove;
    ///<summary>
    ///  Returns an automatic color of data point based on series index, data point index, ParentSeriesGroup.IsColorVaried propery and chart style.
    ///  This color is used by default if FillType equals NotDefined.
    ///</summary>
    ///<returns>Automatic color of data point <see cref="T:System.Drawing.Color" />
    ///</returns>
    function GetAutomaticDataPointColor: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  Returns the x value of chart data point.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IStringOrDoubleChartValue" />
    ///  .
    ///</summary>
    property XValue: DNIStringOrDoubleChartValue read get_XValue;
    ///<summary>
    ///  Returns the y value of chart data point.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property YValue: DNIDoubleChartValue read get_YValue;
    ///<summary>
    ///  Returns the bubble size of chart data point.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property BubbleSize: DNIDoubleChartValue read get_BubbleSize;
    ///<summary>
    ///  Returns the value of chart data point.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property Value: DNIDoubleChartValue read get_Value;
    ///<summary>
    ///  Returns the size value of chart data point.
    ///  Used with Treemap and Sunburst charts.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property SizeValue: DNIDoubleChartValue read get_SizeValue;
    ///<summary>
    ///  Returns the color value of chart data point.
    ///  Used with Map charts.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property ColorValue: DNIDoubleChartValue read get_ColorValue;
    ///<summary>
    ///  Represents series error bars values in case of Custom value type.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IErrorBarsCustomValues" />
    ///  .
    ///</summary>
    property ErrorBarsCustomValues: DNIErrorBarsCustomValues read get_ErrorBarsCustomValues;
    ///<summary>
    ///  Represents the lable of chart data point.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabel" />
    ///  .
    ///</summary>
    property &Label: DNIDataLabel read get_Label;
    ///<summary>
    ///  Specifies that the bubbles have a 3-D effect applied to them.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsBubble3D: Boolean read get_IsBubble3D write set_IsBubble3D;
    ///<summary>
    ///  Specifies the amount the data point shall be moved from the center of the pie.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  Represents the formatting properties.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format write set_Format;
    ///<summary>
    ///  Specifies a data marker.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IMarker" />
    ///  .
    ///</summary>
    property Marker: DNIMarker read get_Marker;
    ///<summary>
    ///  Properties of corresponding legend entry in case of chart type from this list:
    ///  ChartType.BarOfPie,
    ///  ChartType.ExplodedPie,
    ///  ChartType.ExplodedPie3D,
    ///  ChartType.Pie,
    ///  ChartType.Pie3D,
    ///  ChartType.PieOfPie.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryProperties" />
    ///  .
    ///</summary>
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    ///<summary>
    ///  Sets data point as total. Applied for Waterfall series type only.
    ///</summary>
    property SetAsTotal: Boolean read get_SetAsTotal write set_SetAsTotal;
    ///<summary>
    ///  Specifies the data point shall invert its colors if the value is negative.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Returns container of  data point levels. Applied for Treeamp and Sunburst series.
    ///  Data point levels indexing is zero-based.
    ///</summary>
    property DataPointLevels: DNIChartDataPointLevelsManager read get_DataPointLevels;
    ///<summary>
    ///  Returns IActualLayout interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIActualLayout: DNIActualLayout read get_AsIActualLayout;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Provides access to chart axes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IAxesManager')]
  DNIAxesManager = interface(DDN.mscorlib.DNObject)
  ['{CEFBE09F-A7EB-4312-ADB2-7CD1211A91AA}']
  { getters & setters } 

    function get_HorizontalAxis: DNIAxis;
    function get_SecondaryHorizontalAxis: DNIAxis;
    function get_VerticalAxis: DNIAxis;
    function get_SecondaryVerticalAxis: DNIAxis;
    function get_SeriesAxis: DNIAxis;

  { propertys } 

    ///<summary>
    ///  Gets the chart's horizontal axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property HorizontalAxis: DNIAxis read get_HorizontalAxis;
    ///<summary>
    ///  Gets the chart's secondary horizontal axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property SecondaryHorizontalAxis: DNIAxis read get_SecondaryHorizontalAxis;
    ///<summary>
    ///  Gets the chart's vertical axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property VerticalAxis: DNIAxis read get_VerticalAxis;
    ///<summary>
    ///  Gets the chart's secondary vertical axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property SecondaryVerticalAxis: DNIAxis read get_SecondaryVerticalAxis;
    ///<summary>
    ///  Gets the chart's series axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxis" />
    ///  .
    ///</summary>
    property SeriesAxis: DNIAxis read get_SeriesAxis;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart format properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IAxisFormat')]
  DNIAxisFormat = interface(DDN.mscorlib.DNObject)
  ['{478AFA99-DC97-4F7A-814B-5B33FAD89EA8}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { propertys } 

    ///<summary>
    ///  Returns fill style properties of an axis.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property Fill: DNIFillFormat read get_Fill;
    ///<summary>
    ///  Returns line style properties of an axis.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property Line: DNILineFormat read get_Line;
    ///<summary>
    ///  Returns effects used for an axis.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property Effect: DNIEffectFormat read get_Effect;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a value of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IBaseChartValue')]
  DNIBaseChartValue = interface(DDN.mscorlib.DNObject)
  ['{0ABF141A-1C14-4DCD-A0EE-F1C9218BA8CC}']
  { getters & setters } 

    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);

  { propertys } 

    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual. In other words it specifies the type of value of the Data property.
    ///  This property is read-only. For changing value of this property you can use
    ///  one of the ChartDataPointCollection.DataSourceTypeFor&lt;...&gt; properties.
    ///  Read/write <see cref="P:Aspose.Slides.Charts.IBaseChartValue.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
    ///<summary>
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represent double value which can be stored in pptx presentation document in two ways:
  ///  1) in cell/cells of workbook related to chart;
  ///  2) as literal value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IDoubleChartValue')]
  DNIDoubleChartValue = interface(DNIBaseChartValue)
  ['{50E9FE2C-6479-4819-BCD8-C84163955676}']
  { getters & setters } 

    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_AsISingleCellChartValue: DNISingleCellChartValue;

  { methods } 

    ///<summary>
    ///  Converst to double.
    ///</summary>
    ///<returns>Double value.</returns>
    function ToDouble: Double;

  { propertys } 

    ///<summary>
    ///  Returns or sets literal double value if DataSourceType = Charts.DataSourceType.DoubleLiterals.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    ///<summary>
    ///  Allows to get base ISingleCellChartValue interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ISingleCellChartValue" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISingleCellChartValue: DNISingleCellChartValue read get_AsISingleCellChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a collection of a chart cells.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IMultipleCellChartValue')]
  DNIMultipleCellChartValue = interface(DNIBaseChartValue)
  ['{4AFF0A9E-65FC-4E23-BA4F-6DC984AE92AB}']
  { getters & setters } 

    function get_AsCells: DNIChartCellCollection;
    procedure set_AsCells(value: DNIChartCellCollection);
    function get_AsIBaseChartValue: DNIBaseChartValue;

  { propertys } 

    ///<summary>
    ///  Returns or sets the collection of chart cells.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartCellCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Null value assigning is not allowed.
    ///</remarks>
    property AsCells: DNIChartCellCollection read get_AsCells write set_AsCells;
    ///<summary>
    ///  Allows to get base IBaseChartValue interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IBaseChartValue" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseChartValue: DNIBaseChartValue read get_AsIBaseChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a chart data cell.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ISingleCellChartValue')]
  DNISingleCellChartValue = interface(DNIBaseChartValue)
  ['{5ED9E8CE-3F2B-4EFD-BD68-511D1D13C3F5}']
  { getters & setters } 

    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsIBaseChartValue: DNIBaseChartValue;

  { propertys } 

    ///<summary>
    ///  Returns or sets chart data cell.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  .
    ///</summary>
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    ///<summary>
    ///  Allows to get base IBaseChartValue interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IBaseChartValue" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseChartValue: DNIBaseChartValue read get_AsIBaseChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represent string value which can be stored in pptx presentation document in two ways:
  ///  1) in cell/cells of workbook related to chart;
  ///  2) as literal value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IStringChartValue')]
  DNIStringChartValue = interface(DNIBaseChartValue)
  ['{1397ED5A-DD10-473E-80E1-6FE51414A142}']
  { getters & setters } 

    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_AsIMultipleCellChartValue: DNIMultipleCellChartValue;

  { methods } 

    ///<summary>
    ///  Returns string representation.
    ///</summary>
    ///<returns>String representation of a value <see cref="T:System.String" />
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  Sets value from specified cell.
    ///</summary>
    ///  <param name="cell">Cell.</param>
    procedure SetFromOneCell(cell: DNIChartDataCell);
    ///<summary>
    ///  If DataSourceType property is DataSourceType.Worksheet then this method returns address
    ///  of the cells in workbook which represent the string data. Otherwise return
    ///  empty string.
    ///</summary>
    ///<returns>String value <see cref="T:System.String" />
    ///</returns>
    function GetCellsAddressInWorkbook: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the literal string if DataSourceType property is DataSourceType.StringLiterals.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    ///<summary>
    ///  Allows to get base IMultipleCellChartValue interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IMultipleCellChartValue" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMultipleCellChartValue: DNIMultipleCellChartValue read get_AsIMultipleCellChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represent string or double value which can be stored in pptx presentation document in two ways:
  ///  1) in cell/cells of workbook related to chart;
  ///  2) as literal value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IStringOrDoubleChartValue')]
  DNIStringOrDoubleChartValue = interface(DNIBaseChartValue)
  ['{7AA08B6D-0C79-4A5F-86D1-3F8D18088CE8}']
  { getters & setters } 

    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_AsISingleCellChartValue: DNISingleCellChartValue;

  { methods } 

    ///<summary>
    ///  Converts value to double.
    ///</summary>
    ///<returns>Double value <see cref="T:System.Double" />
    ///</returns>
    function ToDouble: Double;

  { propertys } 

    ///<summary>
    ///  Returns or sets the literal string if DataSourceType property is DataSourceType.StringLiterals.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    ///<summary>
    ///  Returns or sets the literal double if DataSourceType property is DataSourceType.DoubleLiterals.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    ///<summary>
    ///  Allows to get base ISingleCellChartValue interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ISingleCellChartValue" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISingleCellChartValue: DNISingleCellChartValue read get_AsISingleCellChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart categories.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartCategory')]
  DNIChartCategory = interface(DDN.mscorlib.DNObject)
  ['{F0725F99-05FA-4904-AEBD-36F0368944BE}']
  { getters & setters } 

    function get_UseCell: Boolean;
    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteral: DDN.mscorlib.DNObject;
    procedure set_AsLiteral(value: DDN.mscorlib.DNObject);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_GroupingLevels: DNIChartCategoryLevelsManager;

  { methods } 

    ///<summary>
    ///  Removes category from chart.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if category is already removed from chart.
    ///</exception>
    procedure Remove;

  { propertys } 

    ///<summary>
    ///  If true then AsCell property is actual. In other words, worksheet is used for
    ///  storing category (this case supports a multi-level category).
    ///  If false then AsLiteral property is actual. In other words, worksheet is NOT used
    ///  for storing category (and this case doesn't support a multi-level categories).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For change value of this property (for all categories in collection) set new
    ///  value to ChartCategoryCollection.UseCells property.
    ///</remarks>
    property UseCell: Boolean read get_UseCell;
    ///<summary>
    ///  Returns or sets IChartDataCell object.
    ///  If category is multi-level then used IChartDataCell object for level "0".
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  .
    ///</summary>
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    ///<summary>
    ///  Returns or sets AsLiteral if UseCell is false.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property AsLiteral: DDN.mscorlib.DNObject read get_AsLiteral write set_AsLiteral;
    ///<summary>
    ///  If UseCell is true then this property represents AsCell.Value property.
    ///  If UseCell is false then this property represents AsLiteral property.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Managed container of the values of the chart category grouping levels.
    ///  Multi-level category contain more then one grouping level.
    ///  Grouping levels indexing is zero-based.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartCategoryLevelsManager" />
    ///  .
    ///</summary>
    property GroupingLevels: DNIChartCategoryLevelsManager read get_GroupingLevels;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Managed container of the values of the chart category levels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartCategoryLevelsManager')]
  DNIChartCategoryLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{B0EA8451-E11A-4483-A153-5D8D32EB5F4F}']
  { getters & setters } 

    function get_Item(level: Int32): DNIChartDataCell;

  { methods } 

    ///<summary>
    ///  Sets grouping item for defined level.
    ///</summary>
    ///  <param name="level">Category level <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="value">Groping item <see cref="T:System.Object" />
    ///</param>
    procedure SetGroupingItem(level: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Delete grouping item for defined level.
    ///</summary>
    ///  <param name="level">Category level <see cref="T:System.Int32" />
    ///</param>
    procedure DeleteGroupingItem(level: Int32);

  { propertys } 

    property Item[level: Int32]: DNIChartDataCell read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents data used for a chart plotting.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartData')]
  DNIChartData = interface(DDN.mscorlib.DNObject)
  ['{912B4DF7-7AA8-4C62-A637-4CFA35DB1BC4}']
  { getters & setters } 

    function get_ChartDataWorkbook: DNIChartDataWorkbook;
    function get_Series: DNIChartSeriesCollection;
    function get_SeriesGroups: DNIChartSeriesGroupCollection;
    function get_Categories: DNIChartCategoryCollection;
    function get_UseSecondaryCategories: Boolean;
    procedure set_UseSecondaryCategories(value: Boolean);
    function get_SecondaryCategories: DNIChartCategoryCollection;
    function get_DataSourceType: DNChartDataSourceType;
    function get_ExternalWorkbookPath: string;

  { methods } 

    ///<summary>
    ///  Writes the internally contained Excel workbook it into an in-memory stream.
    ///</summary>
    ///<returns>
    ///  Returns an instance of <c>MemoryStream</c> containing a copy of the internally contained Excel workbook.
    ///</returns>
    function ReadWorkbookStream: DDN.mscorlib.DNMemoryStream;
    ///<summary>
    ///  Initializes the internally contained Excel workbook with user-specified value.
    ///</summary>
    ///  <param name="ms">
    ///  The user-supplied stream containing the entire Excel workbook.
    ///</param>
    procedure WriteWorkbookStream(ms: DDN.mscorlib.DNMemoryStream);
    ///<summary>
    ///  Set chart data range. Series and categories will be updated based on new data range.
    ///  If amount of series in data range greater than count of series in the chart data then additional series with the same type
    ///  as a last series in the current collection will be added to the end of the collection.
    ///</summary>
    ///  <param name="formula">The cells data range formula. E.g: "Sheet1!$A$1:$C$4" , "SomeSheetName!A1:B100", "Sheet1!$A$1:$B$5;Sheet1!$D$1:$D$5".</param>
    ///<exception cref="T:System.ArgumentNullException">formula is null.</exception><exception cref="T:System.ArgumentException">formula has incorrect format.</exception>
    procedure SetRange(formula: string);
    ///<summary>
    ///  Gets chart data range.
    ///</summary>
    ///<returns>Cells data range formula. E.g: "Sheet1!$A$1:$C$4"</returns>
    ///<exception cref="T:System.InvalidOperationException">Chart doesn't use workbook as a data source</exception><example>
    ///  Example C#
    ///<code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.PercentsStackedBar, 100, 100, 500, 400);
    ///  string result = (chart.ChartData as ChartData).GetRange();
    ///  }
    ///</code></example>
    function GetRange: string;
    ///<summary>
    ///  Swap the data over the axis.
    ///  Data being charted on the X axis will move to the Y axis and vice versa.
    ///</summary>
    procedure SwitchRowColumn;
    ///<summary>
    ///  Sets external workbook as a data source for the chart. Chart data will be updated from the target workbook.
    ///</summary>
    ///  <param name="workbookPath">Path to the target workbook</param>
    ///<exception cref="T:System.InvalidOperationException">External workbook is not available or can't be loaded.</exception><example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Pie, 50, 50, 400, 600, true);
    ///  IChartData chartData = chart.ChartData;
    ///  (chartData as ChartData).SetExternalWorkbook("../../workbook.xlsx");
    ///  }
    ///</code></example>
    procedure SetExternalWorkbook(workbookPath: string); overload;
    ///<summary>
    ///  Sets external workbook as a data source for the chart.
    ///</summary>
    ///  <param name="workbookPath">Path to the target workbook</param>
    ///  <param name="updateChartData"> If value is false only workbook path will be updated.
    ///  Chart data won't be loaded and updated from the target workbook. Can be used when target workbook doesn't exist or it's not available.
    ///  If value is true chart data will be updated from the target workbook. </param>
    ///<exception cref="T:System.InvalidOperationException">External workbook is not available or can't be loaded.</exception><example><code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Pie, 50, 50, 400, 600, true);
    ///  IChartData chartData = chart.ChartData;
    ///  (chartData as ChartData).SetExternalWorkbook("http://path/doesnt/exists", false);
    ///  }
    ///</code></example>
    procedure SetExternalWorkbook(workbookPath: string; updateChartData: Boolean); overload;

  { propertys } 

    ///<summary>
    ///  Gets the cells factory to create cells used for chart series or categories.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartDataWorkbook" />
    ///  .
    ///</summary>
    property ChartDataWorkbook: DNIChartDataWorkbook read get_ChartDataWorkbook;
    ///<summary>
    ///  Gets the series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesCollection" />
    ///  .
    ///</summary>
    property Series: DNIChartSeriesCollection read get_Series;
    ///<summary>
    ///  Gets the groups of series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesGroupCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  1) Each group of series contains series with combinable types. Groups of
    ///  combinable series types defined and described with CombinableSeriesTypesGroup
    ///  enum.
    ///  Also each group of series contains series witch is plotted whether
    ///  on primary axes or on secondary axes (not both cases in one group).
    ///  So, principle of series grouping is a grouping by type groups mentioned
    ///  above and by primary/secondary plotting type.
    ///  2) Group of series contains some series properies whitch is common for
    ///  each series in group ("series group properties").
    ///  "Series group properties" in ChartSeriesGroup class is read/write.
    ///  Each of "series group properties" can have a read-only projection in ChartSeries class.
    ///</remarks>
    property SeriesGroups: DNIChartSeriesGroupCollection read get_SeriesGroups;
    ///<summary>
    ///  Gets the primary categories (or both primary and secondary categories
    ///  if <see cref="P:Aspose.Slides.Charts.IChartData.UseSecondaryCategories" />
    ///  property is false).
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartCategoryCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If <see cref="P:Aspose.Slides.Charts.IChartData.UseSecondaryCategories" />
    ///  property is false then <see cref="P:Aspose.Slides.Charts.IChartData.SecondaryCategories" />
    ///  property return null and data in this <see cref="P:Aspose.Slides.Charts.IChartData.Categories" />
    ///  property is used both for primary
    ///  and secondary series.
    ///  If <see cref="P:Aspose.Slides.Charts.IChartData.UseSecondaryCategories" />
    ///  property is true then data in <see cref="P:Aspose.Slides.Charts.IChartData.SecondaryCategories" />
    ///  property is used for secondary series and data in this <see cref="P:Aspose.Slides.Charts.IChartData.Categories" />
    ///  property is used
    ///  for primary series.
    ///</remarks>
    ///<example>
    ///  Example. What categories are related to series - ChartData.Categories or ChartData.SecondaryCategories?
    ///<code>
    ///  if (series.PlotOnSecondAxis &amp;&amp; series.Chart.ChartData.UseSecondaryCategories)
    ///  {
    ///  // related categories are series.Chart.ChartData.SecondaryCategories
    ///  }
    ///  else
    ///  {
    ///  // related categories are series.Chart.ChartData.Categories
    ///  }
    ///</code></example>
    property Categories: DNIChartCategoryCollection read get_Categories;
    ///<summary>
    ///  If false then <see cref="P:Aspose.Slides.Charts.IChartData.SecondaryCategories" />
    ///  property return null and data
    ///  in <see cref="P:Aspose.Slides.Charts.IChartData.Categories" />
    ///  property is used both for primary and secondary series.
    ///  If true then data in <see cref="P:Aspose.Slides.Charts.IChartData.SecondaryCategories" />
    ///  property is used for secondary series and data
    ///  in <see cref="P:Aspose.Slides.Charts.IChartData.Categories" />
    ///  property is used for primary series.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example>
    ///  Example. What categories are related to series - ChartData.Categories or ChartData.SecondaryCategories?
    ///<code>
    ///  if (series.PlotOnSecondAxis &amp;&amp; series.Chart.ChartData.UseSecondaryCategories)
    ///  {
    ///  // related categories are series.Chart.ChartData.SecondaryCategories
    ///  }
    ///  else
    ///  {
    ///  // related categories are series.Chart.ChartData.Categories
    ///  }
    ///</code></example>
    property UseSecondaryCategories: Boolean read get_UseSecondaryCategories write set_UseSecondaryCategories;
    ///<summary>
    ///  Gets the secondary categories if <see cref="P:Aspose.Slides.Charts.IChartData.UseSecondaryCategories" />
    ///  property is true.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartCategoryCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If <see cref="P:Aspose.Slides.Charts.IChartData.UseSecondaryCategories" />
    ///  property is false then this <see cref="P:Aspose.Slides.Charts.IChartData.SecondaryCategories" />
    ///  property return null and data in <see cref="P:Aspose.Slides.Charts.IChartData.Categories" />
    ///  property is used both for primary
    ///  and secondary series.
    ///  If <see cref="P:Aspose.Slides.Charts.IChartData.UseSecondaryCategories" />
    ///  property is true then data in
    ///  this <see cref="P:Aspose.Slides.Charts.IChartData.SecondaryCategories" />
    ///  property is used for secondary series and data
    ///  in <see cref="P:Aspose.Slides.Charts.IChartData.Categories" />
    ///  property is used for primary series.
    ///</remarks>
    ///<example>
    ///  Example. What categories are related to series - ChartData.Categories or ChartData.SecondaryCategories?
    ///<code>
    ///  if (series.PlotOnSecondAxis &amp;&amp; series.Chart.ChartData.UseSecondaryCategories)
    ///  {
    ///  // related categories are series.Chart.ChartData.SecondaryCategories
    ///  }
    ///  else
    ///  {
    ///  // related categories are series.Chart.ChartData.Categories
    ///  }
    ///</code></example>
    property SecondaryCategories: DNIChartCategoryCollection read get_SecondaryCategories;
    ///<summary>
    ///  Represents data source of the chart
    ///</summary>
    property DataSourceType: DNChartDataSourceType read get_DataSourceType;
    ///<summary>
    ///  Represents external workbook path if data source is external, null otherwise
    ///</summary>
    property ExternalWorkbookPath: string read get_ExternalWorkbookPath;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents cell for chart data.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataCell')]
  DNIChartDataCell = interface(DDN.mscorlib.DNObject)
  ['{96D8A4B7-179B-4313-A946-C0592D7E1C43}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_R1C1Formula: string;
    procedure set_R1C1Formula(value: string);
    function get_ChartDataWorksheet: DNIChartDataWorksheet;
    function get_IsHidden: Boolean;
    function get_CustomNumberFormat: string;
    procedure set_CustomNumberFormat(value: string);
    function get_PresetNumberFormat: Byte;
    procedure set_PresetNumberFormat(value: Byte);

  { propertys } 

    ///<summary>
    ///  Returns the index of the row of worksheet in which the cell is located.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Returns the index of the column of worksheet in which the cell is located.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Gets or sets the value.
    ///  Read/write <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets the formula in A1-style.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IChartDataCell cell = workbook.GetCell(0, "B2");
    ///  cell.Formula = "1 + SUM(F2:H5)";
    ///</code></example>
    property Formula: string read get_Formula write set_Formula;
    ///<summary>
    ///  Gets or sets the formula in R1C1-style.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IChartDataCell cell = workbook.GetCell(0, "C2");
    ///  cell.R1C1Formula = "MAX(R2C6:R5C8) / 3";
    ///</code></example>
    property R1C1Formula: string read get_R1C1Formula write set_R1C1Formula;
    ///<summary>
    ///  Gets the worksheet.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartDataWorksheet" />
    ///  .
    ///</summary>
    property ChartDataWorksheet: DNIChartDataWorksheet read get_ChartDataWorksheet;
    ///<summary>
    ///  Determines whether the cell is hidden.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHidden: Boolean read get_IsHidden;
    ///<summary>
    ///  Gets or sets the custom display format of numbers and dates.
    ///  If value is empty will be used PresetNumberFormat value.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentNullException">Thrown if value is <c>null</c>.</exception>
    property CustomNumberFormat: string read get_CustomNumberFormat write set_CustomNumberFormat;
    ///<summary>
    ///  Gets or sets the built-in display format of numbers and dates. Preset number must be in [0..22] or [37..49]".
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  0	General
    ///  1	0
    ///  2	0.00
    ///  3	#,##0
    ///  4	#,##0.00
    ///  5	$#,##0;$-#,##0
    ///  6	$#,##0;[Red]$-#,##0
    ///  7	$#,##0.00;$-#,##0.00
    ///  8	$#,##0.00;[Red]$-#,##0.00
    ///  9	0%
    ///  10	0.00%
    ///  11	0.00E+00
    ///  12	# ?/?
    ///  13	# /
    ///  14	m/d/yy
    ///  15	d-mmm-yy
    ///  16	d-mmm
    ///  17	mmm-yy
    ///  18	h:mm AM/PM
    ///  19	h:mm:ss AM/PM
    ///  20	h:mm
    ///  21	h:mm:ss
    ///  22	m/d/yy h:mm
    ///  37	#,##0;-#,##0
    ///  38	#,##0;[Red]-#,##0
    ///  39	#,##0.00;-#,##0.00
    ///  40	#,##0.00;[Red]-#,##0.00
    ///  41	_ * #,##0_ ;_ * "_ ;_ @_
    ///  42	_ $* #,##0_ ;_ $* "_ ;_ @_
    ///  43	_ * #,##0.00_ ;_ * "??_ ;_ @_
    ///  44	_ $* #,##0.00_ ;_ $* "??_ ;_ @_
    ///  45	mm:ss
    ///  46	h :mm:ss
    ///  47	mm:ss.0
    ///  48	##0.0E+00
    ///  49	@
    ///</code></example>
    property PresetNumberFormat: Byte read get_PresetNumberFormat write set_PresetNumberFormat;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents data point level. Applies for Treemap and Sunburst chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataPointLevel')]
  DNIChartDataPointLevel = interface(DDN.mscorlib.DNObject)
  ['{73963FA9-79E6-4084-88BD-13D2AC38D991}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_Label: DNIDataLabel;

  { propertys } 

    ///<summary>
    ///  Represents formatting properties of data point level.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Treemap, 50, 50, 500, 400);
    ///  IChartSeries series = chart.ChartData.Series[0];
    ///  IChartDataPointLevel dataPointLevel = series.DataPoints[7].DataPointLevels[2];
    ///  dataPointLevel.Format.Fill.FillType = FillType.Solid;
    ///  dataPointLevel.Format.Fill.SolidFillColor.Color = Color.Red;
    ///  }
    ///</code></example>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Represents data label of data point level. Applied for Treemap and  Sunburst sereis types.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabel" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes.AddChart(ChartType.Sunburst, 50, 50, 500, 400);
    ///  IChartSeries series = chart.ChartData.Series[0];
    ///  IChartDataPointLevel dataPointLevel = series.DataPoints[0].DataPointLevels[1];
    ///  dataPointLevel.Label.DataLabelFormat.ShowCategoryName = false;
    ///  dataPointLevel.Label.DataLabelFormat.ShowValue = true;
    ///  dataPointLevel.Label.DataLabelFormat.ShowSeriesName = true;
    ///  dataPointLevel = series.DataPoints[12].DataPointLevels[1];
    ///  dataPointLevel.Label.TextFormat.PortionFormat.FillFormat.FillType = FillType.Solid;
    ///  dataPointLevel.Label.TextFormat.PortionFormat.FillFormat.SolidFillColor.Color = Color.Red;
    ///  }
    ///</code></example>
    property &Label: DNIDataLabel read get_Label;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Container of data point levels. Applied for Treeamp and Sunburst series.
  ///  Data point levels indexing is zero-based.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataPointLevelsManager')]
  DNIChartDataPointLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{A6060943-A514-4BDC-81DF-F94368B6A6E5}']
  { getters & setters } 

    function get_Item(level: Int32): DNIChartDataPointLevel;
    function get_Count: Int32;

  { propertys } 

    property Item[level: Int32]: DNIChartDataPointLevel read get_Item; default;
    ///<summary>
    ///  Returns data point levels count.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Provides access to embedded Excel workbook
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataWorkbook')]
  DNIChartDataWorkbook = interface(DDN.mscorlib.DNObject)
  ['{2621C20A-7A7C-4A32-BF76-EF4EF5AEFF2F}']
  { methods } 

    ///<summary>
    ///  Gets the set of cells.
    ///</summary>
    ///  <param name="formula">Excel formula like "Sheet1!$A$2:$A$5".</param>
    ///  <param name="skipHiddenCells">If true then method returns collection without hidden cells.</param>
    ///<returns>Set of cells <see cref="T:Aspose.Slides.Charts.IChartCellCollection" />
    ///</returns>
    function GetCellCollection(formula: string; skipHiddenCells: Boolean): DNIChartCellCollection;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetName">Name of the worksheet.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetName: string; row: Int32; column: Int32): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="cellName">Name of the cell.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetIndex: Int32; cellName: string): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="cellName">Name of the cell.</param>
    ///  <param name="value">The value.</param>
    ///<returns>
    ///  Cell object
    ///</returns>
    function GetCell(worksheetIndex: Int32; cellName: string; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    ///<summary>
    ///  Gets the cell that can be used for chart series or categories
    ///</summary>
    ///  <param name="worksheetIndex">Index of the worksheet.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///  <param name="value">The value.</param>
    ///<returns>Cell object</returns>
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    ///<summary>
    ///  Clear all cells values on sheet
    ///</summary>
    ///  <param name="sheetIndex">Index of sheet</param>
    procedure Clear(sheetIndex: Int32);

  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents worksheet associated with <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataWorksheet')]
  DNIChartDataWorksheet = interface(DDN.mscorlib.DNObject)
  ['{AE9C09FA-B6D1-4A7E-A2EB-7D4C1EAD8F91}']
  { getters & setters } 

    function get_Name: string;
    function get_Index: Int32;

  { propertys } 

    ///<summary>
    ///  Gets the name.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the index.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Index: Int32 read get_Index;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents gridlines format properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartLinesFormat')]
  DNIChartLinesFormat = interface(DDN.mscorlib.DNObject)
  ['{9C749DAC-B520-4D7E-8290-384F04A1BB63}']
  { getters & setters } 

    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { propertys } 

    ///<summary>
    ///  Returns line style properties of a chart line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property Line: DNILineFormat read get_Line;
    ///<summary>
    ///  Returns effects used for a chart line.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property Effect: DNIEffectFormat read get_Effect;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a paragraph formatting properties of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartParagraphFormat')]
  DNIChartParagraphFormat = interface(DDN.mscorlib.DNObject)
  ['{64CD6F0F-1845-44A3-BF74-28D3C78BA4A4}']
  { getters & setters } 

    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_SpaceWithin: Single;
    procedure set_SpaceWithin(value: Single);
    function get_SpaceBefore: Single;
    procedure set_SpaceBefore(value: Single);
    function get_SpaceAfter: Single;
    procedure set_SpaceAfter(value: Single);
    function get_EastAsianLineBreak: DNNullableBool;
    procedure set_EastAsianLineBreak(value: DNNullableBool);
    function get_RightToLeft: DNNullableBool;
    procedure set_RightToLeft(value: DNNullableBool);
    function get_LatinLineBreak: DNNullableBool;
    procedure set_LatinLineBreak(value: DNNullableBool);
    function get_HangingPunctuation: DNNullableBool;
    procedure set_HangingPunctuation(value: DNNullableBool);
    function get_MarginLeft: Single;
    procedure set_MarginLeft(value: Single);
    function get_MarginRight: Single;
    procedure set_MarginRight(value: Single);
    function get_Indent: Single;
    procedure set_Indent(value: Single);
    function get_DefaultTabSize: Single;
    procedure set_DefaultTabSize(value: Single);
    function get_Tabs: DNITabCollection;
    function get_FontAlignment: DNFontAlignment;
    procedure set_FontAlignment(value: DNFontAlignment);

  { propertys } 

    ///<summary>
    ///  Returns or sets the text alignment in a paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.TextAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Returns or sets the amount of space between base lines in a paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceWithin: Single read get_SpaceWithin write set_SpaceWithin;
    ///<summary>
    ///  Returns or sets the amount of space before the first line in a paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceBefore: Single read get_SpaceBefore write set_SpaceBefore;
    ///<summary>
    ///  Returns or sets the amount of space after the last line in a paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceAfter: Single read get_SpaceAfter write set_SpaceAfter;
    ///<summary>
    ///  Determines whether the East Asian line break is used in a paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property EastAsianLineBreak: DNNullableBool read get_EastAsianLineBreak write set_EastAsianLineBreak;
    ///<summary>
    ///  Determines whether the Right to Left writing is used in a paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RightToLeft: DNNullableBool read get_RightToLeft write set_RightToLeft;
    ///<summary>
    ///  Determines whether the Latin line break is used in a paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property LatinLineBreak: DNNullableBool read get_LatinLineBreak write set_LatinLineBreak;
    ///<summary>
    ///  Determines whether the hanging punctuation is used in a paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property HangingPunctuation: DNNullableBool read get_HangingPunctuation write set_HangingPunctuation;
    ///<summary>
    ///  Returns or sets the left margin in a paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginLeft: Single read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin in a paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginRight: Single read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets paragraph First Line Indent/Hanging Indent. Hanging Indent can be defined with negative values.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Indent: Single read get_Indent write set_Indent;
    ///<summary>
    ///  Returns or sets default tabulation size.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property DefaultTabSize: Single read get_DefaultTabSize write set_DefaultTabSize;
    ///<summary>
    ///  Returns tabulations of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.ITabCollection" />
    ///  .
    ///</summary>
    property Tabs: DNITabCollection read get_Tabs;
    ///<summary>
    ///  Returns or sets a font alignment in a paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.FontAlignment" />
    ///  .
    ///</summary>
    property FontAlignment: DNFontAlignment read get_FontAlignment write set_FontAlignment;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents formatting properties for chart text elements.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartTextBlockFormat')]
  DNIChartTextBlockFormat = interface(DDN.mscorlib.DNObject)
  ['{5146F28B-F8E9-4FC1-93C0-5D1A0434B2B0}']
  { getters & setters } 

    function get_AnchoringType: DNTextAnchorType;
    procedure set_AnchoringType(value: DNTextAnchorType);
    function get_CenterText: DNNullableBool;
    procedure set_CenterText(value: DNNullableBool);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_WrapText: DNNullableBool;
    procedure set_WrapText(value: DNNullableBool);
    function get_AutofitType: DNTextAutofitType;
    procedure set_AutofitType(value: DNTextAutofitType);
    function get_RotationAngle: Single;
    procedure set_RotationAngle(value: Single);

  { propertys } 

    ///<summary>
    ///  Returns or sets vertical anchor text in a TextFrame.
    ///  Read/write <see cref="T:Aspose.Slides.TextAnchorType" />
    ///  .
    ///</summary>
    property AnchoringType: DNTextAnchorType read get_AnchoringType write set_AnchoringType;
    ///<summary>
    ///  If NullableBool.True then text should be centered in box horizontally.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property CenterText: DNNullableBool read get_CenterText write set_CenterText;
    ///<summary>
    ///  Determines text orientation.
    ///  The resulted value of visual text rotation summarized from this property and custom angle
    ///  in property RotationAngle.
    ///  Read/write <see cref="T:Aspose.Slides.TextVerticalType" />
    ///  .
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    ///<summary>
    ///  Returns or sets the left margin (points) in a TextFrame.
    ///  Changing of this property can produce a certain influence only for these chart parts:
    ///  DataLabel and DataLabelFormat (full suport in PowerPoint 2013; in PowerPoint 2007 there is no effect for rendering).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin (points) in a TextFrame.
    ///  Changing of this property can produce a certain influence only for these chart parts:
    ///  DataLabel and DataLabelFormat (full suport in PowerPoint 2013; in PowerPoint 2007 there is no effect for rendering).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets the top margin (points) in a TextFrame.
    ///  Changing of this property can produce a certain influence only for these chart parts:
    ///  DataLabel and DataLabelFormat (full suport in PowerPoint 2013; in PowerPoint 2007 there is no effect for rendering).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    ///<summary>
    ///  Returns or sets the bottom margin (points) in a TextFrame.
    ///  Changing of this property can produce a certain influence only for these chart parts:
    ///  DataLabel and DataLabelFormat (full suport in PowerPoint 2013; in PowerPoint 2007 there is no effect for rendering).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    ///<summary><b>True</b>
    ///  if text is wrapped at TextFrame's margins.
    ///  Changing of this property can produce a certain influence only for these chart parts:
    ///  DataLabel and DataLabelFormat (full suport in PowerPoint 2007/2013).
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property WrapText: DNNullableBool read get_WrapText write set_WrapText;
    ///<summary>
    ///  Returns or sets text's autofit mode.
    ///  Changing of this property can produce a certain influence only for these chart parts:
    ///  DataLabel and DataLabelFormat (full suport in PowerPoint 2013; in PowerPoint 2007 there is no effect for rendering).
    ///  Read/write <see cref="T:Aspose.Slides.TextAutofitType" />
    ///  .
    ///</summary>
    property AutofitType: DNTextAutofitType read get_AutofitType write set_AutofitType;
    ///<summary>
    ///  Specifies the custom rotation that is being applied to the text within the bounding box. If it not
    ///  specified, the rotation of the accompanying shape is used. If it is specified, then this is
    ///  applied independently from the shape. That is the shape can have a rotation applied in
    ///  addition to the text itself having a rotation applied to it.
    ///  The resulted value of visual text rotation summarized from this property and predefined
    ///  vertical type in property TextVerticalType.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<example>
    ///  Consider the case where a shape has a rotation of 90 degrees clockwise applied to it.
    ///  In addition to this, the text body itself has a rotation of -90 degrees
    ///  counter-clockwise applied to it. Then the resulting shape would appear to
    ///  be rotated but the text within it would appear as though it had not been rotated at all.
    ///</example>
    property RotationAngle: Single read get_RotationAngle write set_RotationAngle;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Chart operate with restricted set of text format properties.
  ///  IChartTextFormat, IChartTextBlockFormat, IChartParagraphFormat, IChartPortionFormat
  ///  interfaces describe this restricted set.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartTextFormat')]
  DNIChartTextFormat = interface(DDN.mscorlib.DNObject)
  ['{6A75CC1B-92A5-4650-9496-335C89C41170}']
  { getters & setters } 

    function get_TextBlockFormat: DNIChartTextBlockFormat;
    function get_ParagraphFormat: DNIChartParagraphFormat;
    function get_PortionFormat: DNIChartPortionFormat;

  { methods } 

    ///<summary>
    ///  Copies text format to specified text frame.
    ///</summary>
    ///  <param name="destTextFrame">Text frame to copy text format to.</param>
    procedure CopyTo(destTextFrame: DNITextFrame);
    ///<summary>
    ///  Copies text format from specified text frame.
    ///</summary>
    ///  <param name="sourceTextFrame">Text frame to copy text format.</param>
    procedure CopyFrom(sourceTextFrame: DNITextFrame);

  { propertys } 

    ///<summary>
    ///  Returns format for the chart text elements.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextBlockFormat" />
    ///  .
    ///</summary>
    property TextBlockFormat: DNIChartTextBlockFormat read get_TextBlockFormat;
    ///<summary>
    ///  Returns paragraph format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartParagraphFormat" />
    ///  .
    ///</summary>
    property ParagraphFormat: DNIChartParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Returns portion format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartPortionFormat" />
    ///  .
    ///</summary>
    property PortionFormat: DNIChartPortionFormat read get_PortionFormat;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents walls on 3d charts.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartWall')]
  DNIChartWall = interface(DDN.mscorlib.DNObject)
  ['{3D540DD2-CD2B-4407-BABA-FDC2FE0E8910}']
  { getters & setters } 

    function get_Thickness: Int32;
    procedure set_Thickness(value: Int32);
    function get_Format: DNIFormat;
    function get_PictureType: DNPictureType;
    procedure set_PictureType(value: DNPictureType);

  { propertys } 

    ///<summary>
    ///  Returns or sets the walls thickness as a percentage of the largest
    ///  dimension of the plot volume.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Thickness: Int32 read get_Thickness write set_Thickness;
    ///<summary>
    ///  Returns the wall fill, line, effect, 3d styles.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Return or sets the picture type.
    ///  Read/write <see cref="P:Aspose.Slides.Charts.IChartWall.PictureType" />
    ///  .
    ///</summary>
    property PictureType: DNPictureType read get_PictureType write set_PictureType;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Specifies types of values in ChartDataPoint.ErrorBarsCustomValues properties list
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IDataSourceTypeForErrorBarsCustomValues')]
  DNIDataSourceTypeForErrorBarsCustomValues = interface(DDN.mscorlib.DNObject)
  ['{7C9FFAE1-A154-4E21-834F-CBD3FD3510C9}']
  { getters & setters } 

    function get_DataSourceTypeForXMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForXPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXPlusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYPlusValues(value: DNDataSourceType);

  { propertys } 

    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points XMinus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPoint.ErrorBarsCustomValues.XMinus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForXMinusValues: DNDataSourceType read get_DataSourceTypeForXMinusValues write set_DataSourceTypeForXMinusValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points XPlus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPoint.ErrorBarsCustomValues.XPlus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForXPlusValues: DNDataSourceType read get_DataSourceTypeForXPlusValues write set_DataSourceTypeForXPlusValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points YMinus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPointEx.ErrorBarsCustomValues.YMinus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForYMinusValues: DNDataSourceType read get_DataSourceTypeForYMinusValues write set_DataSourceTypeForYMinusValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points YPlus property object for error bars custom values. In other words it specifies
    ///  the type of value of ChartDataPointEx.ErrorBarsCustomValues.YPlus.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForYPlusValues: DNDataSourceType read get_DataSourceTypeForYPlusValues write set_DataSourceTypeForYPlusValues;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Specifies the errors bar values. It shall be used only when the Error bars value type is Custom.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IErrorBarsCustomValues')]
  DNIErrorBarsCustomValues = interface(DDN.mscorlib.DNObject)
  ['{F0F17329-B68E-421D-AD1E-FFEAE3DA87F5}']
  { getters & setters } 

    function get_XMinus: DNIDoubleChartValue;
    function get_YMinus: DNIDoubleChartValue;
    function get_XPlus: DNIDoubleChartValue;
    function get_YPlus: DNIDoubleChartValue;

  { propertys } 

    ///<summary>
    ///  Specifies the error bar value in the negative direction.
    ///  Avalible if error bars value type is Custom and ErrorBarsXFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property XMinus: DNIDoubleChartValue read get_XMinus;
    ///<summary>
    ///  Specifies the error bar value in the negative direction.
    ///  Avalible if error bars value type is Custom and ErrorBarsYFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property YMinus: DNIDoubleChartValue read get_YMinus;
    ///<summary>
    ///  Specifies the error bar value in the positive direction.
    ///  Avalible if error bars value type is Custom and ErrorBarsXFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property XPlus: DNIDoubleChartValue read get_XPlus;
    ///<summary>
    ///  Specifies the error bar value in the positive direction.
    ///  Avalible if error bars value type is Custom and ErrorBarsYFormat is allowed.
    ///  In any other case this property returns null.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDoubleChartValue" />
    ///  .
    ///</summary>
    property YPlus: DNIDoubleChartValue read get_YPlus;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart format properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IFormat')]
  DNIFormat = interface(DDN.mscorlib.DNObject)
  ['{DDEF617C-DC28-4582-9ED6-86E276634E50}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;
    function get_Effect3D: DNIThreeDFormat;

  { propertys } 

    ///<summary>
    ///  Returns fill style properties of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property Fill: DNIFillFormat read get_Fill;
    ///<summary>
    ///  Returns line style properties of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property Line: DNILineFormat read get_Line;
    ///<summary>
    ///  Returns effects used for a chart.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property Effect: DNIEffectFormat read get_Effect;
    ///<summary>
    ///  Returns 3D format of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property Effect3D: DNIThreeDFormat read get_Effect3D;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents legends collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ILegendEntryCollection')]
  DNILegendEntryCollection = interface(DDN.mscorlib.DNObject)
  ['{20ECDCD7-92B4-4BC7-B5BA-5296633A96AC}']
  { getters & setters } 

    function get_Item(index: Int32): DNILegendEntryProperties;
    function get_Count: Int32;

  { propertys } 

    property Item[index: Int32]: DNILegendEntryProperties read get_Item; default;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents marker of a chert.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IMarker')]
  DNIMarker = interface(DDN.mscorlib.DNObject)
  ['{E2FDEDB5-D1F3-4030-B134-BB24B2594849}']
  { getters & setters } 

    function get_Symbol: DNMarkerStyleType;
    procedure set_Symbol(value: DNMarkerStyleType);
    function get_Format: DNIFormat;
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { propertys } 

    ///<summary>
    ///  Represents the marker style in a line chart, scatter chart, or radar chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.MarkerStyleType" />
    ///  .
    ///</summary>
    property Symbol: DNMarkerStyleType read get_Symbol write set_Symbol;
    ///<summary>
    ///  Gets the marker fill.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Represents the marker size in a line chart, scatter chart, or radar chart.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Size: Int32 read get_Size write set_Size;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents 3D rotation of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IRotation3D')]
  DNIRotation3D = interface(DDN.mscorlib.DNObject)
  ['{DF6070EF-BF47-40BD-8910-5A19DC1FAD02}']
  { getters & setters } 

    function get_RotationX: SByte;
    procedure set_RotationX(value: SByte);
    function get_RotationY: UInt16;
    procedure set_RotationY(value: UInt16);
    function get_Perspective: Byte;
    procedure set_Perspective(value: Byte);
    function get_RightAngleAxes: Boolean;
    procedure set_RightAngleAxes(value: Boolean);
    function get_DepthPercents: UInt16;
    procedure set_DepthPercents(value: UInt16);
    function get_HeightPercents: UInt16;
    procedure set_HeightPercents(value: UInt16);

  { propertys } 

    ///<summary>
    ///  Returns or sets the rotation degree around the X-axis, i.e. in the Y direction for 3D charts (between -90 and 90 degrees).
    ///  The property matches with the 21.2.2.157 rotX (X Rotation) item in ECMA-376 and with the "Y Rotation" option in PowerPoint 2007+.
    ///  Read/write <see cref="T:System.SByte" />
    ///  .
    ///</summary>
    property RotationX: SByte read get_RotationX write set_RotationX;
    ///<summary>
    ///  Returns or sets the rotation degree around the Y-axis, i.e. in the X direction for 3D charts (between 0 and 360 degrees).
    ///  The property matches with the 21.2.2.158 rotY (Y Rotation) item in ECMA-376 and with the "X Rotation" option in PowerPoint 2007+.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property RotationY: UInt16 read get_RotationY write set_RotationY;
    ///<summary>
    ///  Returns or sets the perspective value (field of view angle) for 3D charts (between 0 and 100).
    ///  Ignored if RightAngleAxes property value is true.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property Perspective: Byte read get_Perspective write set_Perspective;
    ///<summary>
    ///  Determines whether the chart axes are at right angles, rather than drawn in perspective.
    ///  In other words it determines whether the chart angles of axes are independent from chart
    ///  rotation or elevation.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RightAngleAxes: Boolean read get_RightAngleAxes write set_RightAngleAxes;
    ///<summary>
    ///  Returns or sets the depth of a 3D chart as a percentage of a chart width (between 20 and 2000 percent).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property DepthPercents: UInt16 read get_DepthPercents write set_DepthPercents;
    ///<summary>
    ///  Specifies the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property HeightPercents: UInt16 read get_HeightPercents write set_HeightPercents;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Provide access to up/down bars of Line- or Stock-chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IUpDownBarsManager')]
  DNIUpDownBarsManager = interface(DDN.mscorlib.DNObject)
  ['{1585BF4B-6504-4CE5-A9A7-984F8EE85684}']
  { getters & setters } 

    function get_UpBarsFormat: DNIFormat;
    function get_DownBarsFormat: DNIFormat;
    function get_HasUpDownBars: Boolean;
    procedure set_HasUpDownBars(value: Boolean);
    function get_GapWidth: Int32;
    procedure set_GapWidth(value: Int32);

  { propertys } 

    ///<summary>
    ///  Returns format of the up bars.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property UpBarsFormat: DNIFormat read get_UpBarsFormat;
    ///<summary>
    ///  Returns format of the down bars.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property DownBarsFormat: DNIFormat read get_DownBarsFormat;
    ///<summary>
    ///  Determines whether the chart has up/down bars.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasUpDownBars: Boolean read get_HasUpDownBars write set_HasUpDownBars;
    ///<summary>
    ///  Returns or sets gap width.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property GapWidth: Int32 read get_GapWidth write set_GapWidth;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNLegendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80C8E96C-4D13-5FA2-BCAD-933EF81D9307}']
  end;

  ///<summary>
  ///  Represents chart's legend properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Legend')]
  DNLegend = interface(DDN.mscorlib.DNObject)
  ['{1C7B2479-81EF-367F-9B28-D3C449E24F5C}']
  { getters & setters } 

    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_TextFormat: DNIChartTextFormat;
    function get_Position: DNLegendPositionType;
    procedure set_Position(value: DNLegendPositionType);
    function get_Format: DNIFormat;
    function get_Chart: DNIChart;
    function get_Entries: DNILegendEntryCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the x coordinate of a legend as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y coordinate of a legend as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of a legend as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of a legend as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Right.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Right: Single read get_Right;
    ///<summary>
    ///  Bottom.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  Determines whether other chart elements shall be allowed to overlap legend.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Overlay: Boolean read get_Overlay write set_Overlay;
    ///<summary>
    ///  Text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Specifies the position of the legend on a chart.
    ///  Non-NaN values of X, Y, Width, Heigt properties override effect of this property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.LegendPositionType" />
    ///  .
    ///</summary>
    property Position: DNLegendPositionType read get_Position write set_Position;
    ///<summary>
    ///  Returns the format of a legend.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Returns the chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  Gets legend entries.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryCollection" />
    ///  .
    ///</summary>
    property Entries: DNILegendEntryCollection read get_Entries;
  end;

  TDNLegend = class(TDNGenericImport<DNLegendClass, DNLegend>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNLegendEntryCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDACA39C-16F3-579F-9250-1019409AC0D6}']
  end;

  ///<summary>
  ///  Represents legends collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.LegendEntryCollection')]
  DNLegendEntryCollection = interface(DDN.mscorlib.DNObject)
  ['{85004EC7-9E87-38E0-A368-B1C51B5D3564}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of legend entries.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNLegendEntryCollection = class(TDNGenericImport<DNLegendEntryCollectionClass, DNLegendEntryCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNLegendEntryPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AA76DA9-6319-5317-9F34-70C895D00BC0}']
  end;

  ///<summary>
  ///  Represents legend properties of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.LegendEntryProperties')]
  DNLegendEntryProperties = interface(DDN.mscorlib.DNObject)
  ['{8BADDA88-AF53-360D-91F8-1AED2D46CF21}']
  { getters & setters } 

    function get_TextFormat: DNIChartTextFormat;
    function get_Hide: Boolean;
    procedure set_Hide(value: Boolean);
    function get_Chart: DNIChart;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Determines whether the legend entry is hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hide: Boolean read get_Hide write set_Hide;
    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
  end;

  TDNLegendEntryProperties = class(TDNGenericImport<DNLegendEntryPropertiesClass, DNLegendEntryProperties>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNMarkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EFE17E7-A90A-5A8A-820A-8EA335941B23}']
  end;

  ///<summary>
  ///  Represents marker of a chert.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Marker')]
  DNMarker = interface(DDN.mscorlib.DNObject)
  ['{8573E6E8-BE53-345C-A849-06BBCF393B82}']
  { getters & setters } 

    function get_Symbol: DNMarkerStyleType;
    procedure set_Symbol(value: DNMarkerStyleType);
    function get_Format: DNIFormat;
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the marker style in a line chart, scatter chart, or radar chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.MarkerStyleType" />
    ///  .
    ///</summary>
    property Symbol: DNMarkerStyleType read get_Symbol write set_Symbol;
    ///<summary>
    ///  Gets or sets the marker fill.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Represents the marker size in a line chart, scatter chart, or radar chart.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Size: Int32 read get_Size write set_Size;
  end;

  TDNMarker = class(TDNGenericImport<DNMarkerClass, DNMarker>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNPieSplitCustomPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{444AC482-C0AD-50BC-AFFA-9B9E9D3DA099}']
  end;

  ///<summary>
  ///  Represents a collection of points for splitting point in a bar-of-pie or pie-of-pie chart with a custom split.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.PieSplitCustomPointCollection')]
  DNPieSplitCustomPointCollection = interface(DDN.mscorlib.DNObject)
  ['{70C894DB-7447-487A-A44B-63A90BDA3B9F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIChartDataPoint): Boolean;
    ///<summary>
    ///  Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular <see cref="T:System.Array" />
    ///  index.
    ///</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="arrayIndex">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is greater than the available space from <paramref name="arrayIndex" />
    ///  to the end of the destination <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNIChartDataPoint>; arrayIndex: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartDataPoint>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the count of chart data points.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only; otherwise, false.
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNPieSplitCustomPointCollection = class(TDNGenericImport<DNPieSplitCustomPointCollectionClass, DNPieSplitCustomPointCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNRotation3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{92BDE370-9248-53CD-B3E7-36F431BE596F}']
  end;

  ///<summary>
  ///  Represents 3D rotation of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Rotation3D')]
  DNRotation3D = interface(DDN.mscorlib.DNObject)
  ['{4DF37BE8-5166-3A63-B37D-D4041A5E367B}']
  { getters & setters } 

    function get_RotationX: SByte;
    procedure set_RotationX(value: SByte);
    function get_RotationY: UInt16;
    procedure set_RotationY(value: UInt16);
    function get_Perspective: Byte;
    procedure set_Perspective(value: Byte);
    function get_RightAngleAxes: Boolean;
    procedure set_RightAngleAxes(value: Boolean);
    function get_DepthPercents: UInt16;
    procedure set_DepthPercents(value: UInt16);
    function get_HeightPercents: UInt16;
    procedure set_HeightPercents(value: UInt16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the rotation degree around the X-axis, i.e. in the Y direction for 3D charts (between -90 and 90 degrees).
    ///  The property matches with the 21.2.2.157 rotX (X Rotation) item in ECMA-376 and with the "Y Rotation" option in PowerPoint 2007+.
    ///  Read/write <see cref="T:System.SByte" />
    ///  .
    ///</summary>
    property RotationX: SByte read get_RotationX write set_RotationX;
    ///<summary>
    ///  Returns or sets the rotation degree around the Y-axis, i.e. in the X direction for 3D charts (between 0 and 360 degrees).
    ///  The property matches with the 21.2.2.158 rotY (Y Rotation) item in ECMA-376 and with the "X Rotation" option in PowerPoint 2007+.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property RotationY: UInt16 read get_RotationY write set_RotationY;
    ///<summary>
    ///  Returns or sets the perspective value (field of view angle) for 3D charts (between 0 and 240).
    ///  Ignored if RightAngleAxes property value is true.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property Perspective: Byte read get_Perspective write set_Perspective;
    ///<summary>
    ///  Determines whether the chart axes are at right angles, rather than drawn in perspective.
    ///  In other words it determines whether the chart angles of axes are independent from chart
    ///  rotation or elevation.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RightAngleAxes: Boolean read get_RightAngleAxes write set_RightAngleAxes;
    ///<summary>
    ///  Returns or sets the depth of a 3D chart as a percentage of a chart width (between 20 and 2000 percent).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property DepthPercents: UInt16 read get_DepthPercents write set_DepthPercents;
    ///<summary>
    ///  Specifies the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property HeightPercents: UInt16 read get_HeightPercents write set_HeightPercents;
  end;

  TDNRotation3D = class(TDNGenericImport<DNRotation3DClass, DNRotation3D>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNTrendlineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E75E1BC2-1FEC-5890-8AD1-624FD2BCAD14}']
  end;

  ///<summary>
  ///  Class represents trend line of chart series
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Trendline')]
  DNTrendline = interface(DDN.mscorlib.DNObject)
  ['{2B8D3200-8383-3BBC-B08D-A9F3F6DBEFFA}']
  { getters & setters } 

    function get_TrendlineName: string;
    procedure set_TrendlineName(value: string);
    function get_TrendlineType: DNTrendlineType;
    procedure set_TrendlineType(value: DNTrendlineType);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Backward: Double;
    procedure set_Backward(value: Double);
    function get_Forward: Double;
    procedure set_Forward(value: Double);
    function get_Intercept: Double;
    procedure set_Intercept(value: Double);
    function get_DisplayEquation: Boolean;
    procedure set_DisplayEquation(value: Boolean);
    function get_Order: Byte;
    procedure set_Order(value: Byte);
    function get_Period: Byte;
    procedure set_Period(value: Byte);
    function get_DisplayRSquaredValue: Boolean;
    procedure set_DisplayRSquaredValue(value: Boolean);
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_TextFrameForOverriding: DNITextFrame;
    function get_TextFormat: DNIChartTextFormat;
    function get_Chart: DNIChart;

  { methods } 

    ///<summary>
    ///  Initialize TextFrameForOverriding with the text in paramener "text".
    ///  If TextFrameForOverriding is already initialized then simply changes its text.
    ///</summary>
    ///  <param name="text">Text for a new TextFrameForOverriding.</param>
    function AddTextFrameForOverriding(text: string): DNITextFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets  name of the trendline.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property TrendlineName: string read get_TrendlineName write set_TrendlineName;
    ///<summary>
    ///  Gets or sets type of trend line.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TrendlineType" />
    ///  .
    ///</summary>
    property TrendlineType: DNTrendlineType read get_TrendlineType write set_TrendlineType;
    ///<summary>
    ///  Represents the format of the trend line.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format write set_Format;
    ///<summary>
    ///  Specifies the number of categories (or units on a scatter chart) that the trend line extends before
    ///  the data for the series that is being trended. On scatter and non-scatter charts, the value shall be any nonnegative
    ///  value.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Backward: Double read get_Backward write set_Backward;
    ///<summary>
    ///  Specifies the number of categories (or units on a scatter chart) that the trendline extends after the
    ///  data for the series that is being trended. On scatter and non-scatter charts, the value shall be any non-negative
    ///  value.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property &Forward: Double read get_Forward write set_Forward;
    ///<summary>
    ///  Specifies the value where the trendline shall cross the y axis. This property shall be supported only
    ///  when the trendline type is exp, linear, or poly.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Intercept: Double read get_Intercept write set_Intercept;
    ///<summary>
    ///  Specifies that the equation for the trendline is displayed on the chart (in the same label as the Rsquaredvalue).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisplayEquation: Boolean read get_DisplayEquation write set_DisplayEquation;
    ///<summary>
    ///  Specifies the order of the polynomial trend line. It is ignored for other trend line types. Value must be between 2 and 6.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property Order: Byte read get_Order write set_Order;
    ///<summary>
    ///  Specifies the period of the trend line for a moving average trend line. It is ignored for other trend
    ///  line variants. Value must be between 2 and 255.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property Period: Byte read get_Period write set_Period;
    ///<summary>
    ///  Specifies that the R-squared value of the trendline is displayed on the chart (in the same label as the equation).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisplayRSquaredValue: Boolean read get_DisplayRSquaredValue write set_DisplayRSquaredValue;
    ///<summary>
    ///  Represents legend entry related with this trendline
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryProperties" />
    ///  .
    ///</summary>
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    ///<summary>
    ///  Can contain a rich formatted text. If this property is not null then this
    ///  formatted text value overrides auto-generated text of data label.
    ///  Auto-generated text of data label means text that is managed by ShowSeriesName,
    ///  ShowValue, ... properties and is formatted with the TextFormatManager.TextFormat property.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    ///<summary>
    ///  Returns text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Returns the parent chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
  end;

  TDNTrendline = class(TDNGenericImport<DNTrendlineClass, DNTrendline>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNTrendlineCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C88EE54-E424-5047-8F0F-6DF143681ECA}']
  end;

  ///<summary>
  ///  Represents a collection of Trendline
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.TrendlineCollection')]
  DNTrendlineCollection = interface(DDN.mscorlib.DNObject)
  ['{98AA8FAC-8585-32E4-B411-593DFB9A4F47}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNITrendline>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNTrendlineCollection = class(TDNGenericImport<DNTrendlineCollectionClass, DNTrendlineCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNUpDownBarsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ABB543D3-92E6-5028-A775-A44287D90FA4}']
  end;

  ///<summary>
  ///  Provide access to up/down bars of Line- or Stock-chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.UpDownBarsManager')]
  DNUpDownBarsManager = interface(DDN.mscorlib.DNObject)
  ['{ACF01FDB-384A-30A1-A58F-1C1EBB0336D4}']
  { getters & setters } 

    function get_UpBarsFormat: DNIFormat;
    function get_DownBarsFormat: DNIFormat;
    function get_HasUpDownBars: Boolean;
    procedure set_HasUpDownBars(value: Boolean);
    function get_GapWidth: Int32;
    procedure set_GapWidth(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the UpBars format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property UpBarsFormat: DNIFormat read get_UpBarsFormat;
    ///<summary>
    ///  Returns the DownBars format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property DownBarsFormat: DNIFormat read get_DownBarsFormat;
    ///<summary>
    ///  HasUpDownBars.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasUpDownBars: Boolean read get_HasUpDownBars write set_HasUpDownBars;
    ///<summary>
    ///  GapWidth.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property GapWidth: Int32 read get_GapWidth write set_GapWidth;
  end;

  TDNUpDownBarsManager = class(TDNGenericImport<DNUpDownBarsManagerClass, DNUpDownBarsManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColorOperationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E5C71C6-B735-5AC3-94A2-90A220C0F587}']
  { constructors } 

    ///<summary>
    ///  Creates new color transform operation.
    ///</summary>
    ///  <param name="op">Operation type.</param>
    {class} function init(op: DNColorTransformOperation): DNColorOperation; overload;
    ///<summary>
    ///  Creates new color transform operation.
    ///</summary>
    ///  <param name="op">Operation type.</param>
    ///  <param name="parameter">Operation parameter.</param>
    {class} function init(op: DNColorTransformOperation; parameter: Single): DNColorOperation; overload;

  end;

  ///<summary>
  ///  Represents different color operations used for color transformations.
  ///  Immutable object.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorOperation')]
  DNColorOperation = interface(DDN.mscorlib.DNObject)
  ['{60A1186E-7C1D-3841-B41B-92E90F21C591}']
  { getters & setters } 

    function get_OperationType: DNColorTransformOperation;
    function get_Parameter: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the two ColorOperation instances are equal.
    ///</summary>
    ///  <param name="obj">The ColorOperation to compare with the current ColorOperation.</param>
    ///<returns><b>true</b>
    ///  if the specified ColorOperation is equal to the current ColorOperation;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the type of an operation.
    ///  Read-only <see cref="T:Aspose.Slides.ColorTransformOperation" />
    ///  .
    ///</summary>
    property OperationType: DNColorTransformOperation read get_OperationType;
    ///<summary>
    ///  Returns a parameter of an operation.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Parameter: Single read get_Parameter;
  end;

  TDNColorOperation = class(TDNGenericImport<DNColorOperationClass, DNColorOperation>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColorOperationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA0A34FB-8281-51A4-B562-975D62E34C60}']
  end;

  ///<summary>
  ///  Represents a collection of color transform operations.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorOperationCollection')]
  DNColorOperationCollection = interface(DDN.mscorlib.DNObject)
  ['{E9B6FD44-35D8-346A-8DF2-36AFB3EDD5EE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Inserts the new operation to a collection.
    ///</summary>
    ///  <param name="position">The index at which the operation will be inserted.</param>
    ///  <param name="operation">Operation type.</param>
    ///  <param name="parameter">Operation's parameter. </param>
    ///<returns>Inserted operation.</returns>
    function Insert(position: Int32; operation: DNColorTransformOperation; parameter: Single): DNIColorOperation; overload;
    ///<summary>
    ///  Inserts the new operation to a collection.
    ///</summary>
    ///  <param name="position">The index at which the operation will be inserted.</param>
    ///  <param name="operation">Operation type.</param>
    ///<returns>Inserted operation.</returns>
    function Insert(position: Int32; operation: DNColorTransformOperation): DNIColorOperation; overload;
    ///<summary>
    ///  Removes the color operation from a collection.
    ///</summary>
    ///  <param name="index">Index of a color operation to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIColorOperation>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Creates a copy of a ColorOperationCollection collection.
    ///</summary>
    ///<returns>New <see cref="T:Aspose.Slides.ColorOperationCollection" />
    ///  collection.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Clones current object
    ///</summary>
    ///<returns>Clone</returns>
    function CloneT: DNIColorOperationCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of operations in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNColorOperationCollection = class(TDNGenericImport<DNColorOperationCollectionClass, DNColorOperationCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColumnCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{249FC6F8-8EF3-559D-B445-FDEFA0F46D43}']
  end;

  ///<summary>
  ///  Represents collection of columns in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColumnCollection')]
  DNColumnCollection = interface(DDN.mscorlib.DNObject)
  ['{F9ABE011-636E-3F65-A5D5-373E95E0DAE3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Creates a copy of the specified template row and inserts it at the bottom of a table.
    ///</summary>
    ///  <param name="templ">Column which is used as a template.</param>
    ///  <param name="withAttachedColumns">True to copy also all columns attached to the template row.</param>
    ///<returns>Added columns.</returns>
    function AddClone(templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    ///<summary>
    ///  Creates a copy of the specified template column and insert it at the specified position in a table.
    ///</summary>
    ///  <param name="index">Index of a new column.</param>
    ///  <param name="templ">Column which is used as a template.</param>
    ///  <param name="withAttachedColumns">True to copy also all columns attached to the template column.</param>
    ///<returns>Inserted columns.</returns>
    function InsertClone(index: Int32; templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    ///<summary>
    ///  Removes a column at the specified position from a table.
    ///</summary>
    ///  <param name="firstColumnIndex">Index of a column to delete.</param>
    ///  <param name="withAttachedRows">True to delete also all attached columns.</param>
    procedure RemoveAt(firstColumnIndex: Int32; withAttachedRows: Boolean);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIColumn>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of columns in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNColumnCollection = class(TDNGenericImport<DNColumnCollectionClass, DNColumnCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColumnFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54E2732F-6F24-5172-B858-3C88256EE007}']
  end;

  ///<summary>
  ///  Represents format of a table column.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColumnFormat')]
  DNColumnFormat = interface(DDN.mscorlib.DNObject)
  ['{07A0D77D-EAA8-3FD1-B158-D45FEB896D63}']
  { methods } 

    ///<summary>
    ///  Gets effective table column formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IColumnFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective fill format for different table logic parts.
    ///  Please note that cell formatting always has higher priority than row formatting, row - higher than column, column - higher that whole table.
    ///  So finally CellFormatEffectiveData properties always used to draw the table. The following code is just an example of API.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  ITable tbl = pres.Slides[0].Shapes[0] as ITable;
    ///  IFillFormatEffectiveData tableFillFormatEffective = tbl.TableFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData rowFillFormatEffective = tbl.Rows[0].RowFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData columnFillFormatEffective = tbl.Columns[0].ColumnFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData cellFillFormatEffective = tbl[0, 0].CellFormat.GetEffective().FillFormat;
    ///  /* Output and comparison */
    ///  }
    ///</code></example>
    function GetEffective: DNIColumnFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColumnFormat = class(TDNGenericImport<DNColumnFormatClass, DNColumnFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{769DAF19-7B55-5BD5-BE2D-32864879B915}']
  end;

  ///<summary>
  ///  Represents a comment on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Comment')]
  DNComment = interface(DDN.mscorlib.DNObject)
  ['{4F0EAC0D-A764-3C79-8B01-B4A2B6824785}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_Slide: DNISlide;
    function get_Author: DNICommentAuthor;
    function get_Position: DDN.Aspose.Common.DNPointF;
    procedure set_Position(value: DDN.Aspose.Common.DNPointF);
    function get_ParentComment: DNIComment;
    procedure set_ParentComment(value: DNIComment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the plain text of a slide comment.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns or sets the time of a comment creation.
    ///  Setting this property to <see cref="F:System.DateTime.MinValue" />
    ///  means no comment time is set.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    ///<remarks>Comment time is an optional parameter.</remarks>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Returns or sets the parent slide of a comment.
    ///  Read-only <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    property Slide: DNISlide read get_Slide;
    ///<summary>
    ///  Returns the author of a comment.
    ///  Read-only <see cref="T:Aspose.Slides.ICommentAuthor" />
    ///  .
    ///</summary>
    property Author: DNICommentAuthor read get_Author;
    ///<summary>
    ///  Returns or sets the position of a comment on a slide.
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property Position: DDN.Aspose.Common.DNPointF read get_Position write set_Position;
    ///<summary>
    ///  Gets or sets parent comment.
    ///  Read/write <see cref="T:Aspose.Slides.IComment" />
    ///  .
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">Thrown when setting the value leads to a circular reference</exception>
    property ParentComment: DNIComment read get_ParentComment write set_ParentComment;
  end;

  TDNComment = class(TDNGenericImport<DNCommentClass, DNComment>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentAuthorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB39E859-07CA-50B3-A6E5-D6AFCBD2BDD4}']
  end;

  ///<summary>
  ///  Represents an author of comments.
  ///</summary>
  [DNTypeName('Aspose.Slides.CommentAuthor')]
  DNCommentAuthor = interface(DDN.mscorlib.DNObject)
  ['{0691C10B-FF3E-333D-A3C0-A7ACD44FCE87}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Initials: string;
    procedure set_Initials(value: string);
    function get_Comments: DNICommentCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the author's name.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the authors initials.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Initials: string read get_Initials write set_Initials;
    ///<summary>
    ///  Returns the collection of comments made by this author.
    ///  Read-only <see cref="T:Aspose.Slides.ICommentCollection" />
    ///  .
    ///</summary>
    property Comments: DNICommentCollection read get_Comments;
  end;

  TDNCommentAuthor = class(TDNGenericImport<DNCommentAuthorClass, DNCommentAuthor>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentAuthorCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C97C58CD-74FE-5BE9-94BA-AF9CEFF80722}']
  end;

  ///<summary>
  ///  Represents a collection of comment authors.
  ///</summary>
  [DNTypeName('Aspose.Slides.CommentAuthorCollection')]
  DNCommentAuthorCollection = interface(DDN.mscorlib.DNObject)
  ['{DE44D5ED-360E-38DD-8FB1-DACCE7F932D8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Add new author at the end of a collection.
    ///</summary>
    ///  <param name="name">Name of a new author.</param>
    ///  <param name="initials">Initials of a new author.</param>
    ///<returns></returns>
    function AddAuthor(name: string; initials: string): DNICommentAuthor;
    ///<summary>
    ///  Creates and returns an array with all authors.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ICommentAuthor" />
    ///</returns>
    function ToArray: TArray<DNICommentAuthor>;
    ///<summary>
    ///  Find author in a collection by name.
    ///</summary>
    ///  <param name="name">Name of an author to find.</param>
    ///<returns>Author or null.</returns>
    function FindByName(name: string): TArray<DNICommentAuthor>;
    ///<summary>
    ///  Find author in a collection by name and initials.
    ///</summary>
    ///  <param name="name">Name of an author to find.</param>
    ///  <param name="initials">Initials of an author to find.</param>
    ///<returns>Author or null.</returns>
    function FindByNameAndInitials(name: string; initials: string): TArray<DNICommentAuthor>;
    ///<summary>
    ///  Removes the author at the specified index of the collection.
    ///</summary>
    ///  <param name="index"> The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or index is equal or greater than Count</exception><exception cref="T:Aspose.Slides.PptxEditException">Thrown if author is already removed.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICommentAuthor>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCommentAuthorCollection = class(TDNGenericImport<DNCommentAuthorCollectionClass, DNCommentAuthorCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22E590F4-0038-52B9-B1D1-F268FCC5519D}']
  end;

  ///<summary>
  ///  Represents a collection of comments of one author.
  ///</summary>
  [DNTypeName('Aspose.Slides.CommentCollection')]
  DNCommentCollection = interface(DDN.mscorlib.DNObject)
  ['{19A7C8D2-BE23-373A-A5BC-E651142CA8A6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Add new comment at the end of a collection.
    ///</summary>
    ///  <param name="text">Plain text of a new comment.</param>
    ///  <param name="slide">Slide in a presentation where to add a new comment.</param>
    ///  <param name="position">Position on a slide where to add a new comment.</param>
    ///  <param name="creationTime">Time of a comment creation.</param>
    ///<returns>Added comment.</returns>
    function AddComment(text: string; slide: DNISlide; position: DDN.Aspose.Common.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    ///<summary>
    ///  Insert new comment to a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index of the element in a collection at which comment should be inserted.</param>
    ///  <param name="text">Plain text of a new comment.</param>
    ///  <param name="slide">Slide in a presentation where to add a new comment.</param>
    ///  <param name="position">Position on a slide where to add a new comment.</param>
    ///  <param name="creationTime">Time of a comment creation.</param>
    ///<returns>Inserted comment.</returns>
    function InsertComment(index: Int32; text: string; slide: DNISlide; position: DDN.Aspose.Common.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    ///<summary>
    ///  Creates and returns an array with all comments.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.Comment" />
    ///  .</returns>
    function ToArray: TArray<DNIComment>; overload;
    ///<summary>
    ///  Creates and returns an array with all comments from the specified range.
    ///</summary>
    ///  <param name="startIndex">An index of a first comment to return.</param>
    ///  <param name="count">A number of comments to return.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.Comment" />
    ///  .</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIComment>; overload;
    ///<summary>
    ///  Removes the element at the specified index in a collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or index is equal or greater than Count</exception><exception cref="T:Aspose.Slides.PptxEditException">Thrown if comment is already removed.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIComment>;
    ///<summary>
    ///  Finds a comment in the collection by index.
    ///</summary>
    ///  <param name="idx">Unique index of a comment to find <see cref="T:System.Int32" />
    ///  .</param>
    ///<returns>Found comment or null <see cref="T:Aspose.Slides.IComment" />
    ///  .</returns>
    function FindCommentByIdx(idx: Int32): DNIComment;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCommentCollection = class(TDNGenericImport<DNCommentCollectionClass, DNCommentCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommonSlideViewPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CFE5E0C6-542E-5E90-AC15-51770C9EA877}']
  end;

  ///<summary>
  ///  Represents common slide view properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.CommonSlideViewProperties')]
  DNCommonSlideViewProperties = interface(DDN.mscorlib.DNObject)
  ['{58E7321C-F5C4-4B96-AF56-0A1BE37D9805}']
  { getters & setters } 

    function get_Scale: Int32;
    procedure set_Scale(value: Int32);
    function get_VariableScale: Boolean;
    procedure set_VariableScale(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the view scaling ratio in percentages.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Throws when value less than zero.</exception>
    property Scale: Int32 read get_Scale write set_Scale;
    ///<summary>
    ///  Specifies that the view content should automatically scale to best fit the current window size.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property VariableScale: Boolean read get_VariableScale write set_VariableScale;
  end;

  TDNCommonSlideViewProperties = class(TDNGenericImport<DNCommonSlideViewPropertiesClass, DNCommonSlideViewProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNControlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96EDC4E0-82E7-50E5-B8FB-E6B54CC290D8}']
  end;

  ///<summary>
  ///  Represents an ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Slides.Control')]
  DNControl = interface(DDN.mscorlib.DNObject)
  ['{73968D8D-D295-3229-B7A1-068B51C5EDAD}']
  { getters & setters } 

    function get_Persistence: DNPersistenceType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ClassId: DDN.mscorlib.DNGuid;
    procedure set_ClassId(value: DDN.mscorlib.DNGuid);
    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_Properties: DNIControlPropertiesCollection;
    function get_ActiveXControlBinary: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the method used to store properties of the ActiveX control.
    ///  Read only <see cref="T:Aspose.Slides.PersistenceType" />
    ///  .
    ///</summary>
    ///<example>
    ///  Next example shows the using Persistence property for checking if properties of ActiveX object may be changed as XML based ActiveX properties:
    ///<code>
    ///  [C#]
    ///  if (control.Persistence == PersistenceType.PersistPropertyBag)
    ///  {
    ///  control.Properties["Value"] = value;
    ///  }
    ///  else
    ///  {
    ///  YourMethodHere(control.ActiveXControlBinary); //Use your own method for managing ActiveX properties stored in its binary file
    ///  }
    ///</code></example>
    property Persistence: DNPersistenceType read get_Persistence;
    ///<summary>
    ///  Gets or sets the name of this control.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets class id of this control.
    ///  Read-only <see cref="T:System.Guid" />
    ///  .
    ///</summary>
    property ClassId: DDN.mscorlib.DNGuid read get_ClassId write set_ClassId;
    ///<summary>
    ///  Returns Control image fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    ///<summary>
    ///  Returns or sets control's frame.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns a collection of ActiveX properties.
    ///<remarks>Note: Aspose.Slides supports only XML based ActiveX properties. If properties stored in binary format, this property will return null.</remarks>
    ///  Read-only <see cref="T:Aspose.Slides.IControlPropertiesCollection" />
    ///  .
    ///</summary>
    property Properties: DNIControlPropertiesCollection read get_Properties;
    ///<summary>
    ///  Specifies the persistence of an ActiveX control when the method used to persist is either PersistStream, PersistStreamInit or PersistStorage.
    ///</summary>
    ///<example>
    ///  Next example shows the using ActiveXControlBinary property for changing ActiveX properties:
    ///<code>
    ///  [C#]
    ///  if (control.Persistence == PersistenceType.PersistPropertyBag)
    ///  {
    ///  control.Properties["Value"] = value;
    ///  }
    ///  else
    ///  {
    ///  YourMethodHere(control.ActiveXControlBinary); //Use your own method for managing ActiveX properties stored in its binary file
    ///  }
    ///</code></example>
    property ActiveXControlBinary: TArray<Byte> read get_ActiveXControlBinary;
  end;

  TDNControl = class(TDNGenericImport<DNControlClass, DNControl>) end;

  //-------------namespace: Aspose.Slides----------------
  DNControlCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EA40A70-22AD-5E7E-8C12-C210977A5604}']
  end;

  ///<summary>
  ///  A collection of ActiveX controls.
  ///</summary>
  [DNTypeName('Aspose.Slides.ControlCollection')]
  DNControlCollection = interface(DDN.mscorlib.DNObject)
  ['{69AA4AE2-C1E1-3272-AD9F-23AB215EF76A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Creates and adds a new control to the collection.
    ///</summary>
    ///  <param name="controlType">Type of a control to add.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created control.</returns>
    function AddControl(controlType: DNControlType; x: Single; y: Single; width: Single; height: Single): DNIControl;
    ///<summary>
    ///  Removes an ActiveX control stored at specified position from the collection.
    ///</summary>
    ///  <param name="index">Index of a control to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIControl>;
    ///<summary>
    ///  Copies the entire collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array</param>
    ///  <param name="index">Index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of objects in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNControlCollection = class(TDNGenericImport<DNControlCollectionClass, DNControlCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNControlPropertiesCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1F5D1A46-70ED-582A-9DC7-CF32086E6933}']
  end;

  ///<summary>
  ///  A collection of AcitveX properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ControlPropertiesCollection')]
  DNControlPropertiesCollection = interface(DDN.mscorlib.DNObject)
  ['{A127A55A-6EB8-32FD-BD84-7566EE4094AA}']
  { getters & setters } 

    function get_NamesOfProperties: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the collection of properties names.
    ///  Read-only <see cref="T:System.Collections.ICollection" />
    ///  .
    ///</summary>
    property NamesOfProperties: DDN.mscorlib.DNICollection read get_NamesOfProperties;
    ///<summary>
    ///  Returns a number of properties in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNControlPropertiesCollection = class(TDNGenericImport<DNControlPropertiesCollectionClass, DNControlPropertiesCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCustomDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D06AA013-1E18-55AE-9B59-D5B894A12052}']
  end;

  ///<summary>
  ///  Represents container for custom data.
  ///</summary>
  [DNTypeName('Aspose.Slides.CustomData')]
  DNCustomData = interface(DDN.mscorlib.DNObject)
  ['{70C54FDD-64D0-32F6-9398-02AFC976C9BA}']
  { getters & setters } 

    function get_Tags: DNITagCollection;
    function get_CustomXmlParts: DNICustomXmlPartCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the Customer Data Tags collection.
    ///  Read-only <see cref="T:Aspose.Slides.ITagCollection" />
    ///  .
    ///</summary>
    property Tags: DNITagCollection read get_Tags;
    ///<summary>
    ///  Returns the custom xml parts collection.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomXmlPartCollection" />
    ///  .
    ///</summary>
    property CustomXmlParts: DNICustomXmlPartCollection read get_CustomXmlParts;
  end;

  TDNCustomData = class(TDNGenericImport<DNCustomDataClass, DNCustomData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCustomXmlPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06677C39-34FB-50C0-8E3D-B0D82EAEB4E2}']
  end;

  ///<summary>
  ///  Represents custom xml part.
  ///</summary>
  [DNTypeName('Aspose.Slides.CustomXmlPart')]
  DNCustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{0CBF4299-D94E-321F-AAA0-8499E43A84B1}']
  { getters & setters } 

    function get_XmlData: TArray<Byte>;
    procedure set_XmlData(value: TArray<Byte>);
    function get_XmlAsString: string;
    procedure set_XmlAsString(value: string);
    function get_ItemId: DDN.mscorlib.DNGuid;
    procedure set_ItemId(value: DDN.mscorlib.DNGuid);
    function get_NamespaceSchemas: TArray<string>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets xml data.
    ///  Read/write <see cref="T:System.Byte" />
    ///  [].
    ///<exception cref="T:System.ArgumentNullException">value is <c>null</c>.</exception><exception cref="T:System.ArgumentException">value is empty or xml-data is invalid.</exception></summary>
    property XmlData: TArray<Byte> read get_XmlData write set_XmlData;
    ///<summary>
    ///  Returns or sets xml data as UTF-8 string.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///<exception cref="T:System.ArgumentNullException">value is <c>null</c>.</exception><exception cref="T:System.ArgumentException">value is empty or xml-data is invalid.</exception></summary>
    property XmlAsString: string read get_XmlAsString write set_XmlAsString;
    ///<summary>
    ///  Specifies a globally unique identifier (GUID) that uniquely identifies a single custom XML
    ///  part within an Office Open XML document.
    ///  Read-only <see cref="T:System.Guid" />
    ///  .
    ///</summary>
    property ItemId: DDN.mscorlib.DNGuid read get_ItemId write set_ItemId;
    ///<summary>
    ///  Returns the collection XML schemas that are associated with the custom XML part.
    ///  Read-only <see cref="T:System.String" />
    ///  [].
    ///</summary>
    property NamespaceSchemas: TArray<string> read get_NamespaceSchemas;
  end;

  TDNCustomXmlPart = class(TDNGenericImport<DNCustomXmlPartClass, DNCustomXmlPart>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCustomXmlPartCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DD463366-F7F2-5722-8DB5-70AEDABB2A74}']
  end;

  ///<summary>
  ///  Represents collection of custom xml parts.
  ///</summary>
  [DNTypeName('Aspose.Slides.CustomXmlPartCollection')]
  DNCustomXmlPartCollection = interface(DDN.mscorlib.DNObject)
  ['{10BE3199-9C8B-3E13-9770-E26039CA64BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Removes custom xml part at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than Count</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Copy to specified array.
    ///</summary>
    ///  <param name="array">Array to copy to.</param>
    ///  <param name="index">Index to begin copying.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICustomXmlPart>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns count of custom xml parts in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCustomXmlPartCollection = class(TDNGenericImport<DNCustomXmlPartCollectionClass, DNCustomXmlPartCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C0A8C27-AB26-5649-A5CA-C8B9FE667307}']
  { constructors } 

    ///<summary>
    ///  Creates a new DigitalSignature object with the specified certificate.
    ///</summary>
    ///  <param name="certificate">Certificate that will be used to sign the presentation.</param>
    {class} function init(certificate: DDN.Aspose.Common.DNX509Certificate2): DNDigitalSignature; overload;
    ///<summary>
    ///  Creates a new DigitalSignature object with the specified certificate file path and password.
    ///</summary>
    ///  <param name="filePath">Path to the file with certificate.</param>
    ///  <param name="password">Password required to access certificate.</param>
    {class} function init(filePath: string; password: string): DNDigitalSignature; overload;

  end;

  ///<summary>
  ///  Digital signature in signed file.
  ///</summary>
  [DNTypeName('Aspose.Slides.DigitalSignature')]
  DNDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{FFA2D5E9-8417-4C00-9724-5EACF9CFD2BE}']
  { getters & setters } 

    function get_Certificate: DDN.Aspose.Common.DNX509Certificate2;
    function get_IsValid: Boolean;
    function get_SignTime: DDN.mscorlib.DNDateTime;
    function get_Comments: string;
    procedure set_Comments(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Certificate object that was used to sign the document.
    ///  Read-only <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  .
    ///</summary>
    property Certificate: DDN.Aspose.Common.DNX509Certificate2 read get_Certificate;
    ///<summary>
    ///  If this digital signature is valid and the document has not been tampered with, this value will be true.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentationSigned.pptx"))
    ///  {
    ///  foreach (DigitalSignature signature in pres.DigitalSignatures)
    ///  Console.WriteLine("Signature check: " + (signature.IsValid ? "VALID" : "INVALID"));
    ///  }
    ///</code></example>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  The time when the document was signed.
    ///  Read-only <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentationSigned.pptx"))
    ///  {
    ///  foreach (DigitalSignature signature in pres.DigitalSignatures)
    ///  Console.WriteLine("Signature check: " + (signature.IsValid ? "VALID" : "INVALID") + ", Signing time: " + signature.SignTime);
    ///  }
    ///</code></example>
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime;
    ///<summary>
    ///  The purpose of signature.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
  end;

  TDNDigitalSignature = class(TDNGenericImport<DNDigitalSignatureClass, DNDigitalSignature>) end;

  //-------------namespace: Aspose.Slides----------------
  DNDigitalSignatureCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1CFA22D7-4B79-50F8-B3AE-3D014AB97C65}']
  end;

  ///<summary>
  ///  Represents a collection of digital signatures attached to a document.
  ///</summary>
  [DNTypeName('Aspose.Slides.DigitalSignatureCollection')]
  DNDigitalSignatureCollection = interface(DDN.mscorlib.DNObject)
  ['{17D57E21-7414-4D52-974B-2110DD2EFDE1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Removes the signature at the specified index.
    ///</summary>
    ///  <param name="index">Index of the signature that should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIDigitalSignature>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of elements in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDigitalSignatureCollection = class(TDNGenericImport<DNDigitalSignatureCollectionClass, DNDigitalSignatureCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNDocumentPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34EB9F45-B34C-5D98-8E7E-2CBEE65D0562}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of class <see cref="T:Aspose.Slides.DocumentProperties" />
    ///  .
    ///</summary>
    {class} function init: DNDocumentProperties;

  end;

  ///<summary>
  ///  Represents properties of a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.DocumentProperties')]
  DNDocumentProperties = interface(DDN.mscorlib.DNObject)
  ['{A08571CE-0EBB-45E5-ACBF-54CE6AB0B2DE}']
  { getters & setters } 

    function get_AppVersion: string;
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_PresentationFormat: string;
    procedure set_PresentationFormat(value: string);
    function get_SharedDoc: Boolean;
    procedure set_SharedDoc(value: Boolean);
    function get_ApplicationTemplate: string;
    procedure set_ApplicationTemplate(value: string);
    function get_TotalEditingTime: DDN.mscorlib.DNTimeSpan;
    procedure set_TotalEditingTime(value: DDN.mscorlib.DNTimeSpan);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_CountOfCustomProperties: Int32;

  { methods } 

    ///<summary>
    ///  Return a custom property name at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of a custom property to get.</param>
    ///<returns>Custom property name at the specified index.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero. Index is equal to or greater than Count.</exception>
    function GetCustomPropertyName(index: Int32): string;
    ///<summary>
    ///  Remove a custom property associated with a specified name.
    ///</summary>
    ///  <param name="name">Name of a custom property to remove.</param>
    ///<returns>Return true if a property was removed, false overwise.</returns>
    function RemoveCustomProperty(name: string): Boolean;
    ///<summary>
    ///  Check presents of a custom property with a specified name.
    ///</summary>
    ///  <param name="name">Name of a custom property to check.</param>
    ///<returns>Return true if property exists, false overwise.</returns>
    function ContainsCustomProperty(name: string): Boolean;
    procedure GetCustomPropertyValue(name: string; out value: Boolean); overload;
    procedure GetCustomPropertyValue(name: string; out value: Int32); overload;
    procedure GetCustomPropertyValue(name: string; out value: DDN.mscorlib.DNDateTime); overload;
    procedure GetCustomPropertyValue(name: string; out value: string); overload;
    procedure GetCustomPropertyValue(name: string; out value: Single); overload;
    procedure GetCustomPropertyValue(name: string; out value: Double); overload;
    ///<summary>
    ///  Sets a named boolean custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Boolean); overload;
    ///<summary>
    ///  Sets a named integer custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Int32); overload;
    ///<summary>
    ///  Sets a named DateTime custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  Sets a named string custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: string); overload;
    ///<summary>
    ///  Sets a named float custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Single); overload;
    ///<summary>
    ///  Sets a named double custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Double); overload;
    ///<summary>
    ///  Removes all custom properties.
    ///</summary>
    procedure ClearCustomProperties;
    ///<summary>
    ///  Clears and sets default values for all builtIn properties.
    ///</summary>
    procedure ClearBuiltInProperties;
    ///<summary>
    ///  Clones current object
    ///</summary>
    ///<returns>Clone</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Clones current object
    ///</summary>
    ///<returns>Clone</returns>
    function CloneT: DNIDocumentProperties;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the app version.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AppVersion: string read get_AppVersion;
    ///<summary>
    ///  Returns or sets the name of the application.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    ///<summary>
    ///  Returns or sets the company property.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Company: string read get_Company write set_Company;
    ///<summary>
    ///  Returns or sets the manager property.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Manager: string read get_Manager write set_Manager;
    ///<summary>
    ///  Returns or sets the intended format of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property PresentationFormat: string read get_PresentationFormat write set_PresentationFormat;
    ///<summary>
    ///  Determines whether the presentation is shared between multiple people.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SharedDoc: Boolean read get_SharedDoc write set_SharedDoc;
    ///<summary>
    ///  Returns or sets the template of a application.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ApplicationTemplate: string read get_ApplicationTemplate write set_ApplicationTemplate;
    ///<summary>
    ///  Total editing time of a presentation.
    ///  Read/write <see cref="T:System.TimeSpan" />
    ///  .
    ///</summary>
    property TotalEditingTime: DDN.mscorlib.DNTimeSpan read get_TotalEditingTime write set_TotalEditingTime;
    ///<summary>
    ///  Returns or sets the title of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns or sets the subject of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Returns or sets the author of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Returns or sets the keywords of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  Returns or sets the comments of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
    ///<summary>
    ///  Returns or sets the category of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Category: string read get_Category write set_Category;
    ///<summary>
    ///  Returns the date when a presentation was created.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Returns the date when a presentation was modified last time.
    ///  Read-only in case of Presentation.DocumentProperties (because it will be updated internally while IPresentation object saving process).
    ///  Can be changed via DocumentProperties instance returning by method <see cref="M:Aspose.Slides.IPresentationInfo.ReadDocumentProperties" />
    ///  Please see the example in <see cref="M:Aspose.Slides.IPresentationInfo.UpdateDocumentProperties(Aspose.Slides.IDocumentProperties)" />
    ///  method summary.
    ///</summary>
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    ///<summary>
    ///  Returns the date when a presentation was printed last time.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    ///<summary>
    ///  Returns or sets the name of a last person who modified a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    ///<summary>
    ///  Returns or sets the presentation revision number.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    ///<summary>
    ///  Returns or sets the content status of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    ///<summary>
    ///  Returns or sets the content type of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  Returns or sets the HyperlinkBase document property.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    ///<summary>
    ///  Returns the number of custom properties actually contained in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property CountOfCustomProperties: Int32 read get_CountOfCustomProperties;
  end;

  TDNDocumentProperties = class(TDNGenericImport<DNDocumentPropertiesClass, DNDocumentProperties>) end;

  //-------------namespace: Aspose.Slides.DOM.Ole----------------
  DNOleEmbeddedDataInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B412FDB2-7915-5040-B2B9-9D6B04A602F3}']
  { constructors } 

    ///<summary>
    ///  Creates new embedded data info for OLE object.
    ///</summary>
    {class} function init: DNOleEmbeddedDataInfo; overload;
    ///<summary>
    ///  Creates a new instance of an embedded data info for OLE object.
    ///  <param name="embeddedFileData">File data of an embedded OLE object <see cref="T:System.Byte" />
    ///  [].</param>
    ///  <param name="embeddedFileExtension">File extension for the current embedded OLE object <see cref="T:System.String" />
    ///  .</param>
    ///</summary>
    {class} function init(embeddedFileData: TArray<Byte>; embeddedFileExtension: string): DNOleEmbeddedDataInfo; overload;

  end;

  ///<summary>
  ///  Represents embedded data info for OLE object.
  ///</summary>
  [DNTypeName('Aspose.Slides.DOM.Ole.OleEmbeddedDataInfo')]
  DNOleEmbeddedDataInfo = interface(DDN.mscorlib.DNObject)
  ['{899D5B1B-65F9-4965-844F-323388E2F398}']
  { getters & setters } 

    function get_EmbeddedFileData: TArray<Byte>;
    function get_EmbeddedFileExtension: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the file data of an embedded OLE object
    ///  Read only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    ///<summary>
    ///  Returns the file extension for the current embedded OLE object
    ///  Read only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
  end;

  TDNOleEmbeddedDataInfo = class(TDNGenericImport<DNOleEmbeddedDataInfoClass, DNOleEmbeddedDataInfo>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNEffectEffectiveDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{633D2145-3585-5DCC-B912-5355B9C37233}']
  end;

  ///<summary>
  ///  Base class for immutable objects, which represent effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.EffectEffectiveData')]
  DNEffectEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{2EE36FA9-CFA5-3F0B-901F-220FF90C723F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEffectEffectiveData = class(TDNGenericImport<DNEffectEffectiveDataClass, DNEffectEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaBiLevelEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E1797ADA-1673-5E10-BD39-3782EAE31D03}']
  end;

  ///<summary>
  ///  Immutable object which represents an Alpha Bi-Level effect.
  ///  Alpha (Opacity) values less than the threshold are changed to 0 (fully transparent) and
  ///  alpha values greater than or equal to the threshold are changed to 100% (fully opaque).
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaBiLevelEffectiveData')]
  DNAlphaBiLevelEffectiveData = interface(DNEffectEffectiveData)
  ['{6F0BFCA8-6EA0-38A8-B721-BB09B5F1100B}']
  { getters & setters } 

    function get_Threshold: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaBiLevelEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaBiLevelEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaBiLevelEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a threshold.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Threshold: Single read get_Threshold;
  end;

  TDNAlphaBiLevelEffectiveData = class(TDNGenericImport<DNAlphaBiLevelEffectiveDataClass, DNAlphaBiLevelEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaCeilingEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{EC54767F-61DF-5622-8D41-EE6B11A7C2BA}']
  end;

  ///<summary>
  ///  Immutable object which represents an Alpha Ceiling effect.
  ///  Alpha (opacity) values greater than zero are changed to 100%.
  ///  In other words, anything partially opaque becomes fully opaque.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaCeilingEffectiveData')]
  DNAlphaCeilingEffectiveData = interface(DNEffectEffectiveData)
  ['{6575B246-A995-3EB0-9ED4-3BABDD8161A3}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaCeilingEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaCeilingEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaCeilingEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaCeilingEffectiveData = class(TDNGenericImport<DNAlphaCeilingEffectiveDataClass, DNAlphaCeilingEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaFloorEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{60904C79-5C64-5A59-BB1F-EF9D4034C924}']
  end;

  ///<summary>
  ///  Immutable object which represents an Alpha Floor effect.
  ///  Alpha (opacity) values less than 100% are changed to zero.
  ///  In other words, anything partially transparent becomes fully transparent.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaFloorEffectiveData')]
  DNAlphaFloorEffectiveData = interface(DNEffectEffectiveData)
  ['{68A70D23-964D-3B40-8D93-C63F0E6D4145}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaFloorEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaFloorEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaFloorEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaFloorEffectiveData = class(TDNGenericImport<DNAlphaFloorEffectiveDataClass, DNAlphaFloorEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaInverseEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{2A578D2A-5E78-5C55-A844-955607AD3689}']
  end;

  ///<summary>
  ///  Immutable object which represents an Alpha Inverse effect.
  ///  Alpha (opacity) values are inverted by subtracting from 100%.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaInverseEffectiveData')]
  DNAlphaInverseEffectiveData = interface(DNEffectEffectiveData)
  ['{375D765F-B722-3D98-B747-DF6EB1748DE1}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaInverseEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaInverseEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaInverseEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaInverseEffectiveData = class(TDNGenericImport<DNAlphaInverseEffectiveDataClass, DNAlphaInverseEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{8E12926F-1A58-5258-BDB2-363D64681DE8}']
  end;

  ///<summary>
  ///  Immutable object which represents an Alpha Modulate effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///  The effect container specifies an effect containing alpha values to modulate.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaModulateEffectiveData')]
  DNAlphaModulateEffectiveData = interface(DNEffectEffectiveData)
  ['{E0D3499A-AB6A-363A-9D8E-CE26E8E33867}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaModulateEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaModulateEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaModulateEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaModulateEffectiveData = class(TDNGenericImport<DNAlphaModulateEffectiveDataClass, DNAlphaModulateEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateFixedEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{DF6AB82E-BAC8-5FFF-890D-64B306D41A4A}']
  end;

  ///<summary>
  ///  Immutable object which represents an Alpha Modulate Fixed effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaModulateFixedEffectiveData')]
  DNAlphaModulateFixedEffectiveData = interface(DNEffectEffectiveData)
  ['{AAB9DD53-A064-35E5-89B6-95E27C2C3718}']
  { getters & setters } 

    function get_Amount: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaModulateFixedEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaModulateFixedEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaModulateFixedEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the effect amount.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Amount: Single read get_Amount;
  end;

  TDNAlphaModulateFixedEffectiveData = class(TDNGenericImport<DNAlphaModulateFixedEffectiveDataClass, DNAlphaModulateFixedEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaReplaceEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{BE11AEE4-37F1-56B9-9F22-15A5953C4033}']
  end;

  ///<summary>
  ///  Immutable object which represents and Alpha Replace effect.
  ///  Effect alpha (opacity) values are replaced by a fixed alpha.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaReplaceEffectiveData')]
  DNAlphaReplaceEffectiveData = interface(DNEffectEffectiveData)
  ['{2C2D5257-BEC8-3F9A-B4EC-B495D9453BB8}']
  { getters & setters } 

    function get_Alpha: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaReplaceEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaReplaceEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaReplaceEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns new alpha value in the interval [0..1]
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Alpha: Single read get_Alpha;
  end;

  TDNAlphaReplaceEffectiveData = class(TDNGenericImport<DNAlphaReplaceEffectiveDataClass, DNAlphaReplaceEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBiLevelEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{A179721F-3D85-53E0-8956-637F5B7971EB}']
  end;

  ///<summary>
  ///  Immutable object which represents a Bi-Level (black/white) effect.
  ///  Input colors whose luminance is less than the specified threshold value are changed to black.
  ///  Input colors whose luminance are greater than or equal the specified value are set to white.
  ///  The alpha effect values are unaffected by this effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.BiLevelEffectiveData')]
  DNBiLevelEffectiveData = interface(DNEffectEffectiveData)
  ['{B47F0F60-D60A-32FB-A613-EBF28D40B66F}']
  { getters & setters } 

    function get_Threshold: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.BiLevelEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.BiLevelEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.BiLevelEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the threshold value.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Threshold: Single read get_Threshold;
  end;

  TDNBiLevelEffectiveData = class(TDNGenericImport<DNBiLevelEffectiveDataClass, DNBiLevelEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBlurEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{ECEBEED3-8EA0-509E-9151-1BDE13021BBC}']
  end;

  ///<summary>
  ///  Immutable object which represents a Blur effect that is applied to the entire shape, including its fill.
  ///  All color channels, including alpha, are affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.BlurEffectiveData')]
  DNBlurEffectiveData = interface(DNEffectEffectiveData)
  ['{F7AC05F2-6D44-304E-A8E3-B89519E9DE71}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Grow: Boolean;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.BlurEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.BlurEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.BlurEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius;
    ///<summary>
    ///  Determines whether effect spreads beyond shape border.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Grow: Boolean read get_Grow;
  end;

  TDNBlurEffectiveData = class(TDNGenericImport<DNBlurEffectiveDataClass, DNBlurEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorChangeEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{A5909431-21C7-5F8B-8989-65A8009FC803}']
  end;

  ///<summary>
  ///  Immutable object which represents a Color Change effect.
  ///  Instances of FromColor are replaced with instances of ToColor.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ColorChangeEffectiveData')]
  DNColorChangeEffectiveData = interface(DNEffectEffectiveData)
  ['{ACC480E6-6421-3E32-8DCF-A43CE95459E4}']
  { getters & setters } 

    function get_FromColor: DDN.Aspose.Common.DNColor;
    function get_ToColor: DDN.Aspose.Common.DNColor;
    function get_UseAlpha: Boolean;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.ColorChangeEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.ColorChangeEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.ColorChangeEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns color which will be replaced.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property FromColor: DDN.Aspose.Common.DNColor read get_FromColor;
    ///<summary>
    ///  Returns color which will replace.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ToColor: DDN.Aspose.Common.DNColor read get_ToColor;
    ///<summary>
    ///  Returns a boolean value which determines if alpha component should be used.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UseAlpha: Boolean read get_UseAlpha;
  end;

  TDNColorChangeEffectiveData = class(TDNGenericImport<DNColorChangeEffectiveDataClass, DNColorChangeEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorReplaceEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E82804F5-98CE-5F0C-9206-287480A8485A}']
  end;

  ///<summary>
  ///  Immutable object which represents a Color Replacement effect.
  ///  All effect colors are changed to a fixed color.
  ///  Alpha values are unaffected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ColorReplaceEffectiveData')]
  DNColorReplaceEffectiveData = interface(DNEffectEffectiveData)
  ['{546EA49B-1DF0-3FC0-AF83-977E8B94FAFB}']
  { getters & setters } 

    function get_Color: DDN.Aspose.Common.DNColor;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.ColorReplaceEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.ColorReplaceEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.ColorReplaceEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
  end;

  TDNColorReplaceEffectiveData = class(TDNGenericImport<DNColorReplaceEffectiveDataClass, DNColorReplaceEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNDuotoneEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E23ACF01-FB87-532C-9BCE-A2F4F33BE042}']
  end;

  ///<summary>
  ///  Immutable object which represents a Duotone effect.
  ///  For each pixel, combines clr1 and clr2 through a linear interpolation
  ///  to determine the new color for that pixel.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.DuotoneEffectiveData')]
  DNDuotoneEffectiveData = interface(DNEffectEffectiveData)
  ['{297D14E7-4CC5-3DB3-BF18-3A5CDB37B4FD}']
  { getters & setters } 

    function get_Color1: DDN.Aspose.Common.DNColor;
    function get_Color2: DDN.Aspose.Common.DNColor;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.DuotoneEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.DuotoneEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.DuotoneEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a first color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color1: DDN.Aspose.Common.DNColor read get_Color1;
    ///<summary>
    ///  Returns a second color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color2: DDN.Aspose.Common.DNColor read get_Color2;
  end;

  TDNDuotoneEffectiveData = class(TDNGenericImport<DNDuotoneEffectiveDataClass, DNDuotoneEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNFillOverlayEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{327AC6C2-83A4-5F4A-9F40-96B0068FD32C}']
  end;

  ///<summary>
  ///  Immutable object which represents a Fill Overlay effect. A fill overlay may be used to specify
  ///  an additional fill for an object and blend the two fills together.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.FillOverlayEffectiveData')]
  DNFillOverlayEffectiveData = interface(DNEffectEffectiveData)
  ['{CDDC7855-3B50-3660-B4BE-0D24B0DDC8E8}']
  { getters & setters } 

    function get_Blend: DNFillBlendMode;
    function get_FillFormat: DNIFillFormatEffectiveData;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.FillOverlayEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.FillOverlayEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.FillOverlayEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines how one fill drawn over another.
    ///  Read-only <see cref="T:Aspose.Slides.FillBlendMode" />
    ///  .
    ///</summary>
    property Blend: DNFillBlendMode read get_Blend;
    ///<summary>
    ///  Returns a overlaying fill properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
  end;

  TDNFillOverlayEffectiveData = class(TDNGenericImport<DNFillOverlayEffectiveDataClass, DNFillOverlayEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGlowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{9B07C565-8BF2-5C33-999A-D7A1144ACFBE}']
  end;

  ///<summary>
  ///  Immutable object which represents a glow effect, in which a color blurred outline
  ///  is added outside the edges of the object.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.GlowEffectiveData')]
  DNGlowEffectiveData = interface(DNEffectEffectiveData)
  ['{D6D0E910-4CDC-3645-B90D-C481A719D91C}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Color: DDN.Aspose.Common.DNColor;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.GlowEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.GlowEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.GlowEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius;
    ///<summary>
    ///  Color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
  end;

  TDNGlowEffectiveData = class(TDNGenericImport<DNGlowEffectiveDataClass, DNGlowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGrayScaleEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{54F88478-B4E0-5653-A268-81C3AEB68EBD}']
  end;

  ///<summary>
  ///  Immutable object which representsepresents a Gray Scale effect. Converts all effect color values to a shade of gray,
  ///  corresponding to their luminance. Effect alpha (opacity) values are unaffected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.GrayScaleEffectiveData')]
  DNGrayScaleEffectiveData = interface(DNEffectEffectiveData)
  ['{7DEBCCDC-F481-32B0-8F3F-ADCD2F46BCA1}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.GrayScaleEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.GrayScaleEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.GrayScaleEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGrayScaleEffectiveData = class(TDNGenericImport<DNGrayScaleEffectiveDataClass, DNGrayScaleEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNHSLEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{7E0CB46D-0333-5288-8F5D-E48DEE4DB8A8}']
  end;

  ///<summary>
  ///  Represents a Hue/Saturation/Luminance effect.
  ///  The hue, saturation, and luminance may each be adjusted relative to its current value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.HSLEffectiveData')]
  DNHSLEffectiveData = interface(DNEffectEffectiveData)
  ['{0CE1E487-93E9-3864-8462-A3E00EFCA5E0}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Saturation: Single;
    function get_Luminance: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.HSLEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.HSLEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.HSLEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns hue percentage.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Hue: Single read get_Hue;
    ///<summary>
    ///  Returns saturation percentage.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Saturation: Single read get_Saturation;
    ///<summary>
    ///  Returns luminance percentage.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Luminance: Single read get_Luminance;
  end;

  TDNHSLEffectiveData = class(TDNGenericImport<DNHSLEffectiveDataClass, DNHSLEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNInnerShadowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{C24C0C52-66BC-5598-9222-2E5BA3AD0E09}']
  end;

  ///<summary>
  ///  Immutable object which represents a inner shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.InnerShadowEffectiveData')]
  DNInnerShadowEffectiveData = interface(DNEffectEffectiveData)
  ['{A814382E-C34C-34BD-8629-79E9EAFB4EBA}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.Aspose.Common.DNColor;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.InnerShadowEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.InnerShadowEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.InnerShadowEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ShadowColor: DDN.Aspose.Common.DNColor read get_ShadowColor;
  end;

  TDNInnerShadowEffectiveData = class(TDNGenericImport<DNInnerShadowEffectiveDataClass, DNInnerShadowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNLuminanceEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{C83B88D9-2A05-5735-AFC6-6BFB294F3F51}']
  end;

  ///<summary>
  ///  Represents a Luminance effect.
  ///  Brightness linearly shifts all colors closer to white or black.
  ///  Contrast scales all colors to be either closer or further apart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.LuminanceEffectiveData')]
  DNLuminanceEffectiveData = interface(DNEffectEffectiveData)
  ['{A9EE2677-9D5F-3C17-9571-F77AB02897CB}']
  { getters & setters } 

    function get_Brightness: Single;
    function get_Contrast: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.LuminanceEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.LuminanceEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.LuminanceEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Brightness.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Brightness: Single read get_Brightness;
    ///<summary>
    ///  Contrast.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Contrast: Single read get_Contrast;
  end;

  TDNLuminanceEffectiveData = class(TDNGenericImport<DNLuminanceEffectiveDataClass, DNLuminanceEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNOuterShadowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{EC831606-DBDA-5431-8D0E-A2024AE6A95A}']
  end;

  ///<summary>
  ///  Immutable object which represents a outer shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.OuterShadowEffectiveData')]
  DNOuterShadowEffectiveData = interface(DNEffectEffectiveData)
  ['{DC0867DE-99E4-38F1-ADF0-BEC74B8439C0}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.Aspose.Common.DNColor;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.OuterShadowEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.OuterShadowEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.OuterShadowEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ShadowColor: DDN.Aspose.Common.DNColor read get_ShadowColor;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read-only <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical;
    ///<summary>
    ///  Specifies whether the shadow should rotate with the shape if the shape is rotated.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  TDNOuterShadowEffectiveData = class(TDNGenericImport<DNOuterShadowEffectiveDataClass, DNOuterShadowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNPresetShadowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{627C9A2B-054D-5E24-B394-4F31F4BA5DE8}']
  end;

  ///<summary>
  ///  Immutable object which represents a preset shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.PresetShadowEffectiveData')]
  DNPresetShadowEffectiveData = interface(DNEffectEffectiveData)
  ['{C6C02690-3A24-3843-995B-F76586998D58}']
  { getters & setters } 

    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.Aspose.Common.DNColor;
    function get_Preset: DNPresetShadowType;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.PresetShadowEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.PresetShadowEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.PresetShadowEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of shadow.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ShadowColor: DDN.Aspose.Common.DNColor read get_ShadowColor;
    ///<summary>
    ///  Preset.
    ///  Read-only <see cref="T:Aspose.Slides.PresetShadowType" />
    ///  .
    ///</summary>
    property Preset: DNPresetShadowType read get_Preset;
  end;

  TDNPresetShadowEffectiveData = class(TDNGenericImport<DNPresetShadowEffectiveDataClass, DNPresetShadowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNReflectionEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E91E30DF-E6F3-566E-8375-B02974A5E43B}']
  end;

  ///<summary>
  ///  Immutable object which represents a reflection effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ReflectionEffectiveData')]
  DNReflectionEffectiveData = interface(DNEffectEffectiveData)
  ['{42D34B94-470F-33B2-8519-43340DD6CFF8}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    function get_EndPosAlpha: Single;
    function get_FadeDirection: Single;
    function get_StartReflectionOpacity: Single;
    function get_EndReflectionOpacity: Single;
    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.ReflectionEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.ReflectionEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.ReflectionEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the start position (along the alpha gradient ramp) of the start alpha value (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartPosAlpha: Single read get_StartPosAlpha;
    ///<summary>
    ///  Specifies the end position (along the alpha gradient ramp) of the end alpha value (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndPosAlpha: Single read get_EndPosAlpha;
    ///<summary>
    ///  Specifies the direction to offset the reflection. (angle).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FadeDirection: Single read get_FadeDirection;
    ///<summary>
    ///  Starting reflection opacity. (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartReflectionOpacity: Single read get_StartReflectionOpacity;
    ///<summary>
    ///  End reflection opacity. (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndReflectionOpacity: Single read get_EndReflectionOpacity;
    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius;
    ///<summary>
    ///  Direction of reflection.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of reflection.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read-only <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical;
    ///<summary>
    ///  Specifies whether the reflection should rotate with the shape if the shape is rotated.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip. (percents)
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip. (percents)
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  TDNReflectionEffectiveData = class(TDNGenericImport<DNReflectionEffectiveDataClass, DNReflectionEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNSoftEdgeEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{75C15E19-DE46-5571-8E0D-9ED59F9DAF77}']
  end;

  ///<summary>
  ///  Immutable object which represents a soft edge effect.
  ///  The edges of the shape are blurred, while the fill is not affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.SoftEdgeEffectiveData')]
  DNSoftEdgeEffectiveData = interface(DNEffectEffectiveData)
  ['{E5998A56-9443-379D-AC1A-4D7CE8F71E40}']
  { getters & setters } 

    function get_Radius: Double;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.SoftEdgeEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.SoftEdgeEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.SoftEdgeEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the radius of blur to apply to the edges.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius;
  end;

  TDNSoftEdgeEffectiveData = class(TDNGenericImport<DNSoftEdgeEffectiveDataClass, DNSoftEdgeEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNTintEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{50BDAC59-5903-5FA4-8BA6-2BB485B34601}']
  end;

  ///<summary>
  ///  Immutable object which represents a Tint effect.
  ///  Shifts effect color values towards/away from hue by the specified amount.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.TintEffectiveData')]
  DNTintEffectiveData = interface(DNEffectEffectiveData)
  ['{1B8544D3-3C54-311E-B517-5CE2A8FA4A46}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Amount: Single;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.TintEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.TintEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.TintEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns hue.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Hue: Single read get_Hue;
    ///<summary>
    ///  Returns effect amount.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Amount: Single read get_Amount;
  end;

  TDNTintEffectiveData = class(TDNGenericImport<DNTintEffectiveDataClass, DNTintEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNEffectFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69090C2A-B51F-54E2-AFAC-7E06CD154C77}']
  { constructors } 

    {class} function init: DNEffectFactory;

  end;

  ///<summary>
  ///  Allows to create effects
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.EffectFactory')]
  DNEffectFactory = interface(DDN.mscorlib.DNObject)
  ['{5F0D20F4-7B74-4C9E-ABC7-97ECF8DD4C8C}']
  { getters & setters } 

    function get_ImageTransformOperationFactory: DNIImageTransformOperationFactory;

  { methods } 

    ///<summary>
    ///  Creates Glow effect.
    ///</summary>
    ///<returns>Glow effect.</returns>
    function CreateGlow: DNIGlow;
    ///<summary>
    ///  Creates Inner shafow effect.
    ///</summary>
    ///<returns>Inner shafow effect.</returns>
    function CreateInnerShadow: DNIInnerShadow;
    ///<summary>
    ///  Creates Outer shadow effect.
    ///</summary>
    ///<returns>Outer shadow effect.</returns>
    function CreateOuterShadow: DNIOuterShadow;
    ///<summary>
    ///  Creates Preset shadow effect.
    ///</summary>
    ///<returns>Preset shadow effect.</returns>
    function CreatePresetShadow: DNIPresetShadow;
    ///<summary>
    ///  Creates Reflection effect.
    ///</summary>
    ///<returns>Reflection effect.</returns>
    function CreateReflection: DNIReflection;
    ///<summary>
    ///  Creates Soft Edge effect.
    ///</summary>
    ///<returns>Soft Edge effect.</returns>
    function CreateSoftEdge: DNISoftEdge;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns ImageTransformOperationFactory.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperationFactory" />
    ///  .
    ///</summary>
    property ImageTransformOperationFactory: DNIImageTransformOperationFactory read get_ImageTransformOperationFactory;
  end;

  TDNEffectFactory = class(TDNGenericImport<DNEffectFactoryClass, DNEffectFactory>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGlowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F2CF669C-DCB1-5DCC-AFEA-9E249EE0D1B9}']
  end;

  ///<summary>
  ///  Represents a glow effect, in which a color blurred outline
  ///  is added outside the edges of the object.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.Glow')]
  DNGlow = interface(DDN.mscorlib.DNObject)
  ['{C46642E0-49C6-4590-9E83-2D2FFA9407F0}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Color: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.Glow" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.Glow" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.Glow" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Color format.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
  end;

  TDNGlow = class(TDNGenericImport<DNGlowClass, DNGlow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents an Alpha Bi-Level effect.
  ///  Alpha (Opacity) values less than the threshold are changed to 0 (fully transparent) and
  ///  alpha values greater than or equal to the threshold are changed to 100% (fully opaque).
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaBiLevelEffectiveData')]
  DNIAlphaBiLevelEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{F8238190-E0AB-4375-BE37-B52F802D8DF2}']
  { getters & setters } 

    function get_Threshold: Single;

  { propertys } 

    ///<summary>
    ///  Returns effect threshold.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Threshold: Single read get_Threshold;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents an Alpha Ceiling effect.
  ///  Alpha (opacity) values greater than zero are changed to 100%.
  ///  In other words, anything partially opaque becomes fully opaque.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaCeilingEffectiveData')]
  DNIAlphaCeilingEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{4B6F4FE8-5373-47CE-A65B-437BD6820D12}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents an Alpha Floor effect.
  ///  Alpha (opacity) values less than 100% are changed to zero.
  ///  In other words, anything partially transparent becomes fully transparent.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaFloorEffectiveData')]
  DNIAlphaFloorEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{4B1C74F9-9736-45FE-B84A-EDB1D1CDB407}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents an Alpha Inverse effect.
  ///  Alpha (opacity) values are inverted by subtracting from 100%.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaInverseEffectiveData')]
  DNIAlphaInverseEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{0349AE73-8DC5-4E9A-A4FD-E3DE23FC2754}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents an Alpha Modulate effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///  The effect container specifies an effect containing alpha values to modulate.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulateEffectiveData')]
  DNIAlphaModulateEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{BA7768F6-747D-445E-A9B6-0D605D33DA50}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents an Alpha Modulate Fixed effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulateFixedEffectiveData')]
  DNIAlphaModulateFixedEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{AF0C8551-715F-40E5-A168-9E0B88C8E87F}']
  { getters & setters } 

    function get_Amount: Single;

  { propertys } 

    ///<summary>
    ///  Returns an amount of effect in percents.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Amount: Single read get_Amount;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents and Alpha Replace effect.
  ///  Effect alpha (opacity) values are replaced by a fixed alpha.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaReplaceEffectiveData')]
  DNIAlphaReplaceEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{09BA7E8D-733C-42F8-B3B1-0E9F4755294B}']
  { getters & setters } 

    function get_Alpha: Single;

  { propertys } 

    ///<summary>
    ///  Returns new alpha value in the interval [0..1]
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Alpha: Single read get_Alpha;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Bi-Level (black/white) effect.
  ///  Input colors whose luminance is less than the specified threshold value are changed to black.
  ///  Input colors whose luminance are greater than or equal the specified value are set to white.
  ///  The alpha effect values are unaffected by this effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IBiLevelEffectiveData')]
  DNIBiLevelEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{BF8E327C-1523-47FA-A3EF-65972141E758}']
  { getters & setters } 

    function get_Threshold: Single;

  { propertys } 

    ///<summary>
    ///  Returns the threshold value.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Threshold: Single read get_Threshold;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Blur effect that is applied to the entire shape, including its fill.
  ///  All color channels, including alpha, are affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IBlurEffectiveData')]
  DNIBlurEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{87720690-EC52-4EB4-94D2-B8ADB77924D8}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Grow: Boolean;

  { propertys } 

    ///<summary>
    ///  Returns or sets blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius;
    ///<summary>
    ///  Determines whether the bounds of the object should be grown as a result of the blurring.
    ///  True indicates the bounds are grown while false indicates that they are not.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Grow: Boolean read get_Grow;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Color Change effect.
  ///  Instances of FromColor are replaced with instances of ToColor.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IColorChangeEffectiveData')]
  DNIColorChangeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{1204CB16-8736-41CC-8CB0-DFF268CCBE39}']
  { getters & setters } 

    function get_FromColor: DDN.Aspose.Common.DNColor;
    function get_ToColor: DDN.Aspose.Common.DNColor;
    function get_UseAlpha: Boolean;

  { propertys } 

    ///<summary>
    ///  Color which will be replaced.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property FromColor: DDN.Aspose.Common.DNColor read get_FromColor;
    ///<summary>
    ///  Color which will replace.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ToColor: DDN.Aspose.Common.DNColor read get_ToColor;
    ///<summary>
    ///  Returns a boolean value which determines if alpha component should be used.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UseAlpha: Boolean read get_UseAlpha;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Color Replacement effect.
  ///  All effect colors are changed to a fixed color.
  ///  Alpha values are unaffected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IColorReplaceEffectiveData')]
  DNIColorReplaceEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{2817D109-2D90-427F-930E-183F044B3820}']
  { getters & setters } 

    function get_Color: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  Returns color format which will replace color of every pixel.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Duotone effect.
  ///  For each pixel, combines clr1 and clr2 through a linear interpolation
  ///  to determine the new color for that pixel.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IDuotoneEffectiveData')]
  DNIDuotoneEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{A9D6A1B8-C516-4EE9-AB32-48BD5D1E11AD}']
  { getters & setters } 

    function get_Color1: DDN.Aspose.Common.DNColor;
    function get_Color2: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  Returns target color format for dark pixels.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color1: DDN.Aspose.Common.DNColor read get_Color1;
    ///<summary>
    ///  Returns target color format for light pixels.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color2: DDN.Aspose.Common.DNColor read get_Color2;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Base class for immutable objects, which represent effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IEffectEffectiveData')]
  DNIEffectEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{FB0C1FF6-BD05-472D-8B1D-D324C59DF8DF}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Allows to create effects' instances
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.IEffectFactory')]
  DNIEffectFactory = interface(DDN.mscorlib.DNObject)
  ['{369E1F6C-8544-482A-9C18-003A8A818966}']
  { getters & setters } 

    function get_ImageTransformOperationFactory: DNIImageTransformOperationFactory;

  { methods } 

    ///<summary>
    ///  Creates Glow effect.
    ///</summary>
    ///<returns>Glow effect.</returns>
    function CreateGlow: DNIGlow;
    ///<summary>
    ///  Creates Inner shafow effect.
    ///</summary>
    ///<returns>Inner shafow effect.</returns>
    function CreateInnerShadow: DNIInnerShadow;
    ///<summary>
    ///  Creates Outer shadow effect.
    ///</summary>
    ///<returns>Outer shadow effect.</returns>
    function CreateOuterShadow: DNIOuterShadow;
    ///<summary>
    ///  Creates Preset shadow effect.
    ///</summary>
    ///<returns>Preset shadow effect.</returns>
    function CreatePresetShadow: DNIPresetShadow;
    ///<summary>
    ///  Creates Reflection effect.
    ///</summary>
    ///<returns>Reflection effect.</returns>
    function CreateReflection: DNIReflection;
    ///<summary>
    ///  Creates Soft Edge effect.
    ///</summary>
    ///<returns>Soft Edge effect.</returns>
    function CreateSoftEdge: DNISoftEdge;

  { propertys } 

    ///<summary>
    ///  Returns ImageTransformOperationFactory.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperationFactory" />
    ///  .
    ///</summary>
    property ImageTransformOperationFactory: DNIImageTransformOperationFactory read get_ImageTransformOperationFactory;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Fill Overlay effect. A fill overlay may be used to specify
  ///  an additional fill for an object and blend the two fills together.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IFillOverlayEffectiveData')]
  DNIFillOverlayEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{EC3A89F7-32F2-46D9-8709-02CA7584C96A}']
  { getters & setters } 

    function get_Blend: DNFillBlendMode;
    function get_FillFormat: DNIFillFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  FillBlendMode.
    ///  Read-only <see cref="T:Aspose.Slides.FillBlendMode" />
    ///  .
    ///</summary>
    property Blend: DNFillBlendMode read get_Blend;
    ///<summary>
    ///  Fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a glow effect, in which a color blurred outline
  ///  is added outside the edges of the object.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IGlow')]
  DNIGlow = interface(DDN.mscorlib.DNObject)
  ['{3680A168-855E-42D7-83DD-E8CD707E1DCF}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Color: DNIColorFormat;

  { propertys } 

    ///<summary>
    ///  Radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Color format.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a glow effect, in which a color blurred outline
  ///  is added outside the edges of the object.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IGlowEffectiveData')]
  DNIGlowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{E09B8594-8E6D-4112-84D6-A8CE46743DB8}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Color: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  Radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius;
    ///<summary>
    ///  Color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which representsepresents a Gray Scale effect. Converts all effect color values to a shade of gray,
  ///  corresponding to their luminance. Effect alpha (opacity) values are unaffected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IGrayScaleEffectiveData')]
  DNIGrayScaleEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{D14DAA12-3F85-4D79-8550-A57EE41C6647}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Hue/Saturation/Luminance effect.
  ///  The hue, saturation, and luminance may each be adjusted relative to its current value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IHSLEffectiveData')]
  DNIHSLEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{67CE5204-5AD0-4BF9-B7C4-67C6CBDB93B0}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Saturation: Single;
    function get_Luminance: Single;

  { propertys } 

    ///<summary>
    ///  Returns hue percentage.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Hue: Single read get_Hue;
    ///<summary>
    ///  Returns saturation percentage.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Saturation: Single read get_Saturation;
    ///<summary>
    ///  Returns luminance percentage.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Luminance: Single read get_Luminance;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents abstract image transformation effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOperation')]
  DNIImageTransformOperation = interface(DDN.mscorlib.DNObject)
  ['{D9226D65-1A37-4664-9C5F-FFF2517C40CD}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents an Alpha Bi-Level effect.
  ///  Alpha (Opacity) values less than the threshold are changed to 0 (fully transparent) and
  ///  alpha values greater than or equal to the threshold are changed to 100% (fully opaque).
  ///</summary>
  ///<remarks>
  ///  Use ImageTransformOperationFactory to create instaces in COM.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.IAlphaBiLevel')]
  DNIAlphaBiLevel = interface(DNIImageTransformOperation)
  ['{E49CC5E8-F8A9-4521-83FC-3D33D36B1C80}']
  { getters & setters } 

    function get_Threshold: Single;
    procedure set_Threshold(value: Single);
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns effect threshold.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Threshold: Single read get_Threshold write set_Threshold;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents an Alpha Ceiling effect.
  ///  Alpha (opacity) values greater than zero are changed to 100%.
  ///  In other words, anything partially opaque becomes fully opaque.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaCeiling')]
  DNIAlphaCeiling = interface(DNIImageTransformOperation)
  ['{C808DA2C-1718-44F4-B4CD-5D0F1F556D20}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperationEx interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents an Alpha Floor effect.
  ///  Alpha (opacity) values less than 100% are changed to zero.
  ///  In other words, anything partially transparent becomes fully transparent.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaFloor')]
  DNIAlphaFloor = interface(DNIImageTransformOperation)
  ['{C9999493-8A3E-47A2-AABC-4EDFF1CB6E2E}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents an Alpha Inverse effect.
  ///  Alpha (opacity) values are inverted by subtracting from 100%.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaInverse')]
  DNIAlphaInverse = interface(DNIImageTransformOperation)
  ['{992EAD46-6F4E-44FD-A344-1EF476C2CE1D}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents an Alpha Modulate effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///  The effect container specifies an effect containing alpha values to modulate.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulate')]
  DNIAlphaModulate = interface(DNIImageTransformOperation)
  ['{792371FD-99AD-4F23-9DC2-3127B9D562B2}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents an Alpha Modulate Fixed effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulateFixed')]
  DNIAlphaModulateFixed = interface(DNIImageTransformOperation)
  ['{107B41B0-7080-45FC-9B68-857E9A75A5C4}']
  { getters & setters } 

    function get_Amount: Single;
    procedure set_Amount(value: Single);
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns an amount of effect in percents.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Amount: Single read get_Amount write set_Amount;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents base IImageTransformOperation interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IAlphaReplace')]
  DNIAlphaReplace = interface(DNIImageTransformOperation)
  ['{5DCC73EC-1433-418F-BE06-316BA0A5E6E5}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents base IImageTransformOperation interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IBiLevel')]
  DNIBiLevel = interface(DNIImageTransformOperation)
  ['{9967FBFC-2691-49D1-B3B2-282ABD451981}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Blur effect that is applied to the entire shape, including its fill.
  ///  All color channels, including alpha, are affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IBlur')]
  DNIBlur = interface(DNIImageTransformOperation)
  ['{BF607FD0-FAC8-434B-916A-CF38A6F7E66C}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Grow: Boolean;
    procedure set_Grow(value: Boolean);
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns or sets blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Determines whether the bounds of the object should be grown as a result of the blurring.
    ///  True indicates the bounds are grown while false indicates that they are not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Grow: Boolean read get_Grow write set_Grow;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Color Change effect.
  ///  Instances of FromColor are replaced with instances of ToColor.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IColorChange')]
  DNIColorChange = interface(DNIImageTransformOperation)
  ['{2AA4E726-A9C6-4A56-8626-E9BC26C182D3}']
  { getters & setters } 

    function get_FromColor: DNIColorFormat;
    function get_ToColor: DNIColorFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Color which will be replaced.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FromColor: DNIColorFormat read get_FromColor;
    ///<summary>
    ///  Color which will replace.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ToColor: DNIColorFormat read get_ToColor;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Color Replacement effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IColorReplace')]
  DNIColorReplace = interface(DNIImageTransformOperation)
  ['{774A5364-3DED-489A-90D2-7AD01222A6BF}']
  { getters & setters } 

    function get_Color: DNIColorFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns color format which will replace color of every pixel.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Duotone effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IDuotone')]
  DNIDuotone = interface(DNIImageTransformOperation)
  ['{7DAD542F-3669-4292-8365-091A3B2976F2}']
  { getters & setters } 

    function get_Color1: DNIColorFormat;
    function get_Color2: DNIColorFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns target color format for dark pixels.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color1: DNIColorFormat read get_Color1;
    ///<summary>
    ///  Returns target color format for light pixels.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color2: DNIColorFormat read get_Color2;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Fill Overlay effect. A fill overlay may be used to specify
  ///  an additional fill for an object and blend the two fills together.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IFillOverlay')]
  DNIFillOverlay = interface(DNIImageTransformOperation)
  ['{9BA05E52-FE0E-4145-8CF4-1B77B1C115A9}']
  { getters & setters } 

    function get_Blend: DNFillBlendMode;
    procedure set_Blend(value: DNFillBlendMode);
    function get_FillFormat: DNIFillFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  FillBlendMode.
    ///  Read/write <see cref="T:Aspose.Slides.FillBlendMode" />
    ///  .
    ///</summary>
    property Blend: DNFillBlendMode read get_Blend write set_Blend;
    ///<summary>
    ///  Fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents IImageTransformOperation interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IGrayScale')]
  DNIGrayScale = interface(DNIImageTransformOperation)
  ['{5257BC2D-54F9-4DD9-BA76-F82B2DA2EC27}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Hue/Saturation/Luminance effect.
  ///  The hue, saturation, and luminance may each be adjusted relative to its current value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IHSL')]
  DNIHSL = interface(DNIImageTransformOperation)
  ['{EC37F2CD-BFBE-498F-8655-5FD51E5A9369}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Returns IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Luminance effect.
  ///  Brightness linearly shifts all colors closer to white or black.
  ///  Contrast scales all colors to be either closer or further apart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ILuminance')]
  DNILuminance = interface(DNIImageTransformOperation)
  ['{D587B04F-35B5-42AB-A3AB-F4D1BB13A503}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Tint effect.
  ///  Shifts effect color values towards/away from hue by the specified amount.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ITint')]
  DNITint = interface(DNIImageTransformOperation)
  ['{9C7F9B3C-91C6-4174-B095-A9CBB0CC01CC}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    ///<summary>
    ///  Allows to get base IImageTransformOperation interface.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperation" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Allows to create image effects' instances
  ///</summary>
  ///<remarks>
  ///  For COM interface.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOperationFactory')]
  DNIImageTransformOperationFactory = interface(DDN.mscorlib.DNObject)
  ['{C48A4D66-14D5-4145-85A7-458EC2766E6A}']
  { methods } 

    ///<summary>
    ///  Creates Alpha BiLevel effect.
    ///</summary>
    ///  <param name="threshold">Threshold.</param>
    ///<returns>Alpha BiLevel effect.</returns>
    function CreateAlphaBiLevel(threshold: Single): DNIAlphaBiLevel;
    ///<summary>
    ///  Creates Alpha Ceiling effect.
    ///</summary>
    ///<returns>Alpha Ceiling effect.</returns>
    function CreateAlphCeiling: DNIAlphaCeiling;
    ///<summary>
    ///  Creates Alpha floor effect.
    ///</summary>
    ///<returns>Alpha floor effect.</returns>
    function CreateAlphaFloor: DNIAlphaFloor;
    ///<summary>
    ///  Creates Alpha inverse effect.
    ///</summary>
    ///<returns>Alpha inverst effect.</returns>
    function CreateAlphaInverse: DNIAlphaInverse;
    ///<summary>
    ///  Creates Alpha modulate effect.
    ///</summary>
    ///<returns>Alpha modulate effect.</returns>
    function CreateAlphaModulate: DNIAlphaModulate;
    ///<summary>
    ///  Creates Alpha modulate fixed effect.
    ///</summary>
    ///  <param name="amount">Amount.</param>
    ///<returns>Alpha modulate fixed effect.</returns>
    function CreateAlphaModulateFixed(amount: Single): DNIAlphaModulateFixed;
    ///<summary>
    ///  Creates Alpha replace effect.
    ///</summary>
    ///  <param name="alpha">Alpha</param>
    ///<returns>Alpha replace effect.</returns>
    function CreateAlphaReplace(alpha: Single): DNIAlphaReplace;
    ///<summary>
    ///  Creates BiLevel effect.
    ///</summary>
    ///  <param name="threshold">Threshold.</param>
    ///<returns>BiLevel effect.</returns>
    function CreateBiLevel(threshold: Single): DNIBiLevel;
    ///<summary>
    ///  Creates Blur effect.
    ///</summary>
    ///  <param name="radius">Radius.</param>
    ///  <param name="grow">Grow.</param>
    ///<returns>Blur effect.</returns>
    function CreateBlur(radius: Double; grow: Boolean): DNIBlur;
    ///<summary>
    ///  Creates Color change effect.
    ///</summary>
    ///<returns>Color change effect.</returns>
    function CreateColorChange: DNIColorChange;
    ///<summary>
    ///  Creates Color replace effect.
    ///</summary>
    ///<returns>Color replace effect.</returns>
    function CreateColorReplace: DNIColorReplace;
    ///<summary>
    ///  Creates Duotone effect.
    ///</summary>
    ///<returns>Duotone effect.</returns>
    function CreateDuotone: DNIDuotone;
    ///<summary>
    ///  Creates Fill overlay effect.
    ///</summary>
    ///<returns>Fill overlay effect.</returns>
    function CreateFillOverlay: DNIFillOverlay;
    ///<summary>
    ///  Creates Gray scale effect.
    ///</summary>
    ///<returns>Returns gray scale effect.</returns>
    function CreateGrayScale: DNIGrayScale;
    ///<summary>
    ///  Creates Hue Saturation Luminance effect.
    ///</summary>
    ///  <param name="hue">Hue.</param>
    ///  <param name="saturation">Saturation.</param>
    ///  <param name="luminance">Luminance.</param>
    ///<returns>HSL effect.</returns>
    function CreateHSL(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    ///<summary>
    ///  Createtes Luminance effect.
    ///</summary>
    ///  <param name="brightness">Brightness.</param>
    ///  <param name="contrast">Contrast.</param>
    ///<returns>Luminance effect.</returns>
    function CreateLuminance(brightness: Single; contrast: Single): DNILuminance;
    ///<summary>
    ///  Creates Tint effect.
    ///</summary>
    ///  <param name="hue">Hue.</param>
    ///  <param name="amount">Amount.</param>
    ///<returns>Tint effect.</returns>
    function CreateTint(hue: Single; amount: Single): DNITint;

  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a inner shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IInnerShadow')]
  DNIInnerShadow = interface(DDN.mscorlib.DNObject)
  ['{682BE3B9-4E7A-441D-B87F-A3B31EECA08D}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ShadowColor: DNIColorFormat read get_ShadowColor;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a inner shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IInnerShadowEffectiveData')]
  DNIInnerShadowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{A80A7E48-4389-4655-9C92-63401A571662}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ShadowColor: DDN.Aspose.Common.DNColor read get_ShadowColor;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a Luminance effect.
  ///  Brightness linearly shifts all colors closer to white or black.
  ///  Contrast scales all colors to be either closer or further apart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ILuminanceEffectiveData')]
  DNILuminanceEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{2D49790A-603B-4C54-8352-2FE2E1FBD492}']
  { getters & setters } 

    function get_Brightness: Single;
    function get_Contrast: Single;

  { propertys } 

    ///<summary>
    ///  Brightness.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Brightness: Single read get_Brightness;
    ///<summary>
    ///  Contrast.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Contrast: Single read get_Contrast;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOCollectionEffectiveDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E7D83987-F697-5020-AD43-C1C21A5CE4AC}']
  { constructors } 

    {class} function init: DNImageTransformOCollectionEffectiveData;

  end;

  ///<summary>
  ///  Immutable object that represents a readonly collection of effective image transform effects.
  ///</summary>
  ///<remarks>
  ///  Name IImageTransformOperationCollectionEffectiveData truncuted to IImageTransformOCollectionEffectiveData because of COM names length cannot be more then 39.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.ImageTransformOCollectionEffectiveData')]
  DNImageTransformOCollectionEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{0349F150-96CE-4B84-B5C5-20778E255690}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal to the current object.
    ///</summary>
    ///  <param name="obj">The object to compare with the current object.</param>
    ///<returns>true if the specified object is equal to the current object; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIEffectEffectiveData>;
    ///<summary>
    ///  Copies all elements from the collection into the specified array.
    ///</summary>
    ///  <param name="array">Array to fill.</param>
    ///  <param name="index">Starting position in target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of image effects in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNImageTransformOCollectionEffectiveData = class(TDNGenericImport<DNImageTransformOCollectionEffectiveDataClass, DNImageTransformOCollectionEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOperationFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A52073A-612D-5493-8E98-8177AE563727}']
  { constructors } 

    {class} function init: DNImageTransformOperationFactory;

  end;

  ///<summary>
  ///  Allows to create image transform operations
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.ImageTransformOperationFactory')]
  DNImageTransformOperationFactory = interface(DDN.mscorlib.DNObject)
  ['{1FE3B39F-5F06-47D2-B919-2031BCCB6F97}']
  { methods } 

    ///<summary>
    ///  Creates Alpha BiLevel effect.
    ///</summary>
    ///  <param name="threshold">Threshold.</param>
    ///<returns>Alpha BiLevel effect.</returns>
    function CreateAlphaBiLevel(threshold: Single): DNIAlphaBiLevel;
    ///<summary>
    ///  Creates Alpha Ceiling effect.
    ///</summary>
    ///<returns>Alpha Ceiling effect.</returns>
    function CreateAlphCeiling: DNIAlphaCeiling;
    ///<summary>
    ///  Creates Alpha floor effect.
    ///</summary>
    ///<returns>Alpha floor effect.</returns>
    function CreateAlphaFloor: DNIAlphaFloor;
    ///<summary>
    ///  Creates Alpha inverse effect.
    ///</summary>
    ///<returns>Alpha inverst effect.</returns>
    function CreateAlphaInverse: DNIAlphaInverse;
    ///<summary>
    ///  Creates Alpha modulate effect.
    ///</summary>
    ///<returns>Alpha modulate effect.</returns>
    function CreateAlphaModulate: DNIAlphaModulate;
    ///<summary>
    ///  Creates Alpha modulate fixed effect.
    ///</summary>
    ///  <param name="amount">Amount.</param>
    ///<returns>Alpha modulate fixed effect.</returns>
    function CreateAlphaModulateFixed(amount: Single): DNIAlphaModulateFixed;
    ///<summary>
    ///  Creates Alpha replace effect.
    ///</summary>
    ///  <param name="alpha">Alpha</param>
    ///<returns>Alpha replace effect.</returns>
    function CreateAlphaReplace(alpha: Single): DNIAlphaReplace;
    ///<summary>
    ///  Creates BiLevel effect.
    ///</summary>
    ///  <param name="threshold">Threshold.</param>
    ///<returns>BiLevel effect.</returns>
    function CreateBiLevel(threshold: Single): DNIBiLevel;
    ///<summary>
    ///  Creates Blur effect.
    ///</summary>
    ///  <param name="radius">Radius.</param>
    ///  <param name="grow">Grow.</param>
    ///<returns>Blur effect.</returns>
    function CreateBlur(radius: Double; grow: Boolean): DNIBlur;
    ///<summary>
    ///  Creates Color change effect.
    ///</summary>
    ///<returns>Color change effect.</returns>
    function CreateColorChange: DNIColorChange;
    ///<summary>
    ///  Creates Color replace effect.
    ///</summary>
    ///<returns>Color replace effect.</returns>
    function CreateColorReplace: DNIColorReplace;
    ///<summary>
    ///  Creates Duotone effect.
    ///</summary>
    ///<returns>Duotone effect.</returns>
    function CreateDuotone: DNIDuotone;
    ///<summary>
    ///  Creates Fill overlay effect.
    ///</summary>
    ///<returns>Fill overlay effect.</returns>
    function CreateFillOverlay: DNIFillOverlay;
    ///<summary>
    ///  Creates Gray scale effect.
    ///</summary>
    ///<returns>Returns gray scale effect.</returns>
    function CreateGrayScale: DNIGrayScale;
    ///<summary>
    ///  Creates Hue Saturation Luminance effect.
    ///</summary>
    ///  <param name="hue">Hue.</param>
    ///  <param name="saturation">Saturation.</param>
    ///  <param name="luminance">Luminance.</param>
    ///<returns>HSL effect.</returns>
    function CreateHSL(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    ///<summary>
    ///  Createtes Luminance effect.
    ///</summary>
    ///  <param name="brightness">Brightness.</param>
    ///  <param name="contrast">Contrast.</param>
    ///<returns>Luminance effect.</returns>
    function CreateLuminance(brightness: Single; contrast: Single): DNILuminance;
    ///<summary>
    ///  Creates Tint effect.
    ///</summary>
    ///  <param name="hue">Hue.</param>
    ///  <param name="amount">Amount.</param>
    ///<returns>Tint effect.</returns>
    function CreateTint(hue: Single; amount: Single): DNITint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageTransformOperationFactory = class(TDNGenericImport<DNImageTransformOperationFactoryClass, DNImageTransformOperationFactory>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNInnerShadowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8201F854-1AE6-5E1A-95C3-28345789490D}']
  end;

  ///<summary>
  ///  Represents a inner shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.InnerShadow')]
  DNInnerShadow = interface(DDN.mscorlib.DNObject)
  ['{07CA9AB5-B340-4E90-AAEC-ECFA8D6F4278}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.InnerShadow" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.InnerShadow" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.InnerShadow" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ShadowColor: DNIColorFormat read get_ShadowColor;
  end;

  TDNInnerShadow = class(TDNGenericImport<DNInnerShadowClass, DNInnerShadow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a outer shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IOuterShadow')]
  DNIOuterShadow = interface(DDN.mscorlib.DNObject)
  ['{6AEBDCA4-EC10-4849-A7CA-8C29143A5664}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read/write <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle (in degrees).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle (in degrees).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    ///<summary>
    ///  Specifies whether the shadow should rotate with the shape if the shape is rotated.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a outer shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IOuterShadowEffectiveData')]
  DNIOuterShadowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{72C427CE-7D32-4FBE-81B4-E6D97678C778}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.Aspose.Common.DNColor;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ShadowColor: DDN.Aspose.Common.DNColor read get_ShadowColor;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read-only <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle (in degrees).
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle (in degrees).
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical;
    ///<summary>
    ///  Specifies whether the shadow should rotate with the shape if the shape is rotated.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a preset shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IPresetShadow')]
  DNIPresetShadow = interface(DDN.mscorlib.DNObject)
  ['{55C32F94-1D92-4A4D-AD2F-02E69290C382}']
  { getters & setters } 

    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_Preset: DNPresetShadowType;
    procedure set_Preset(value: DNPresetShadowType);

  { propertys } 

    ///<summary>
    ///  Direction of shadow.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    ///<summary>
    ///  Preset.
    ///  Read/write <see cref="T:Aspose.Slides.PresetShadowType" />
    ///  .
    ///</summary>
    property Preset: DNPresetShadowType read get_Preset write set_Preset;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a preset shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IPresetShadowEffectiveData')]
  DNIPresetShadowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{47ABCF33-44CA-4F33-BA41-E394B1C0B583}']
  { getters & setters } 

    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.Aspose.Common.DNColor;
    function get_Preset: DNPresetShadowType;

  { propertys } 

    ///<summary>
    ///  Direction of shadow.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ShadowColor: DDN.Aspose.Common.DNColor read get_ShadowColor;
    ///<summary>
    ///  Preset.
    ///  Read-only <see cref="T:Aspose.Slides.PresetShadowType" />
    ///  .
    ///</summary>
    property Preset: DNPresetShadowType read get_Preset;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a reflection effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IReflection')]
  DNIReflection = interface(DDN.mscorlib.DNObject)
  ['{F48BB311-1DD5-4849-8118-9D876338F3F4}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    procedure set_StartPosAlpha(value: Single);
    function get_EndPosAlpha: Single;
    procedure set_EndPosAlpha(value: Single);
    function get_FadeDirection: Single;
    procedure set_FadeDirection(value: Single);
    function get_StartReflectionOpacity: Single;
    procedure set_StartReflectionOpacity(value: Single);
    function get_EndReflectionOpacity: Single;
    procedure set_EndReflectionOpacity(value: Single);
    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { propertys } 

    ///<summary>
    ///  Specifies the start position (along the alpha gradient ramp) of the start alpha value (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartPosAlpha: Single read get_StartPosAlpha write set_StartPosAlpha;
    ///<summary>
    ///  Specifies the end position (along the alpha gradient ramp) of the end alpha value (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndPosAlpha: Single read get_EndPosAlpha write set_EndPosAlpha;
    ///<summary>
    ///  Specifies the direction to offset the reflection. (angle).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FadeDirection: Single read get_FadeDirection write set_FadeDirection;
    ///<summary>
    ///  Starting reflection opacity. (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartReflectionOpacity: Single read get_StartReflectionOpacity write set_StartReflectionOpacity;
    ///<summary>
    ///  End reflection opacity. (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndReflectionOpacity: Single read get_EndReflectionOpacity write set_EndReflectionOpacity;
    ///<summary>
    ///  Blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    ///<summary>
    ///  Direction of reflection.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of reflection.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read/write <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    ///<summary>
    ///  Specifies whether the reflection should rotate with the shape if the shape is rotated.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip. (percents)
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip. (percents)
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a reflection effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IReflectionEffectiveData')]
  DNIReflectionEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{1A8B3FC0-D594-4627-8035-962A494D520D}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    function get_EndPosAlpha: Single;
    function get_FadeDirection: Single;
    function get_StartReflectionOpacity: Single;
    function get_EndReflectionOpacity: Single;
    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { propertys } 

    ///<summary>
    ///  Specifies the start position (along the alpha gradient ramp) of the start alpha value (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartPosAlpha: Single read get_StartPosAlpha;
    ///<summary>
    ///  Specifies the end position (along the alpha gradient ramp) of the end alpha value (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndPosAlpha: Single read get_EndPosAlpha;
    ///<summary>
    ///  Specifies the direction to offset the reflection. (angle).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FadeDirection: Single read get_FadeDirection;
    ///<summary>
    ///  Starting reflection opacity. (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartReflectionOpacity: Single read get_StartReflectionOpacity;
    ///<summary>
    ///  End reflection opacity. (percents).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndReflectionOpacity: Single read get_EndReflectionOpacity;
    ///<summary>
    ///  Blur radius.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius;
    ///<summary>
    ///  Direction of reflection.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction;
    ///<summary>
    ///  Distance of reflection.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read-only <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical;
    ///<summary>
    ///  Specifies whether the reflection should rotate with the shape if the shape is rotated.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip. (percents)
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip. (percents)
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a soft edge effect.
  ///  The edges of the shape are blurred, while the fill is not affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ISoftEdge')]
  DNISoftEdge = interface(DDN.mscorlib.DNObject)
  ['{C29DD6AB-3BBF-41AE-BEAC-08D2810A0B0A}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);

  { propertys } 

    ///<summary>
    ///  Specifies the radius of blur to apply to the edges.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a soft edge effect.
  ///  The edges of the shape are blurred, while the fill is not affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ISoftEdgeEffectiveData')]
  DNISoftEdgeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{9D617E42-A199-4B99-889D-D7D8AF9BD92F}']
  { getters & setters } 

    function get_Radius: Double;

  { propertys } 

    ///<summary>
    ///  Specifies the radius of blur to apply to the edges.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object which represents a Tint effect.
  ///  Shifts effect color values towards/away from hue by the specified amount.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ITintEffectiveData')]
  DNITintEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{59E6901C-5BD8-4548-A747-B702B6F2C729}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Amount: Single;

  { propertys } 

    ///<summary>
    ///  Returns hue.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Hue: Single read get_Hue;
    ///<summary>
    ///  Returns effect amount.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Amount: Single read get_Amount;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNOuterShadowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{52E60A97-E8B3-5387-A15F-8BB057D6E8C5}']
  end;

  ///<summary>
  ///  Represents a outer shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.OuterShadow')]
  DNOuterShadow = interface(DDN.mscorlib.DNObject)
  ['{A276CE41-002A-4FEF-82E3-190A7D8E045A}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.OuterShadow" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.OuterShadow" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.OuterShadow" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    ///<summary>
    ///  Direction of shadow.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read/write <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle (in degrees).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle (in degrees).
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    ///<summary>
    ///  Specifies whether the shadow should rotate with the shape if the shape is rotated.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  TDNOuterShadow = class(TDNGenericImport<DNOuterShadowClass, DNOuterShadow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNPresetShadowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9F9B4904-D017-5D1E-9B46-8D5167BD78EB}']
  end;

  ///<summary>
  ///  Represents a preset shadow effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.PresetShadow')]
  DNPresetShadow = interface(DDN.mscorlib.DNObject)
  ['{12B1A87A-D139-4DFA-9B9F-7EAE94EF1A68}']
  { getters & setters } 

    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_Preset: DNPresetShadowType;
    procedure set_Preset(value: DNPresetShadowType);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.PresetShadow" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.PresetShadow" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.PresetShadow" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of shadow.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of shadow.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Color of shadow.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    ///<summary>
    ///  Preset.
    ///  Read/write <see cref="T:Aspose.Slides.PresetShadowType" />
    ///  .
    ///</summary>
    property Preset: DNPresetShadowType read get_Preset write set_Preset;
  end;

  TDNPresetShadow = class(TDNGenericImport<DNPresetShadowClass, DNPresetShadow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNReflectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C5C6C2D-9075-5D95-83EA-44672AF30F7F}']
  end;

  ///<summary>
  ///  Represents a reflection effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.Reflection')]
  DNReflection = interface(DDN.mscorlib.DNObject)
  ['{2877771A-457A-4F28-B4AA-C66198D19851}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    procedure set_StartPosAlpha(value: Single);
    function get_EndPosAlpha: Single;
    procedure set_EndPosAlpha(value: Single);
    function get_FadeDirection: Single;
    procedure set_FadeDirection(value: Single);
    function get_StartReflectionOpacity: Single;
    procedure set_StartReflectionOpacity(value: Single);
    function get_EndReflectionOpacity: Single;
    procedure set_EndReflectionOpacity(value: Single);
    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.Reflection" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.Reflection" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.Reflection" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the start position (along the alpha gradient ramp) of the start alpha value (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartPosAlpha: Single read get_StartPosAlpha write set_StartPosAlpha;
    ///<summary>
    ///  Specifies the end position (along the alpha gradient ramp) of the end alpha value (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndPosAlpha: Single read get_EndPosAlpha write set_EndPosAlpha;
    ///<summary>
    ///  Specifies the direction to offset the reflection. (angle).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FadeDirection: Single read get_FadeDirection write set_FadeDirection;
    ///<summary>
    ///  Starting reflection opacity. (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StartReflectionOpacity: Single read get_StartReflectionOpacity write set_StartReflectionOpacity;
    ///<summary>
    ///  End reflection opacity. (percents).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property EndReflectionOpacity: Single read get_EndReflectionOpacity write set_EndReflectionOpacity;
    ///<summary>
    ///  Blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    ///<summary>
    ///  Direction of reflection.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Direction: Single read get_Direction write set_Direction;
    ///<summary>
    ///  Distance of reflection.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Rectangle alignment.
    ///  Read/write <see cref="T:Aspose.Slides.RectangleAlignment" />
    ///  .
    ///</summary>
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    ///<summary>
    ///  Specifies the horizontal skew angle.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    ///<summary>
    ///  Specifies the vertical skew angle.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    ///<summary>
    ///  Specifies whether the reflection should rotate with the shape if the shape is rotated.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    ///<summary>
    ///  Specifies the horizontal scaling factor, negative scaling causes a flip. (percents)
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    ///<summary>
    ///  Specifies the vertical scaling factor, negative scaling causes a flip. (percents)
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  TDNReflection = class(TDNGenericImport<DNReflectionClass, DNReflection>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNSoftEdgeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3882702-ECF0-54E3-BD13-D731CD63AC7E}']
  end;

  ///<summary>
  ///  Represents a soft edge effect.
  ///  The edges of the shape are blurred, while the fill is not affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.SoftEdge')]
  DNSoftEdge = interface(DDN.mscorlib.DNObject)
  ['{8307610A-8FA0-4F1A-83E2-A8CB1DB14DAE}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.SoftEdge" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.SoftEdge" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.SoftEdge" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the radius of blur to apply to the edges.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
  end;

  TDNSoftEdge = class(TDNGenericImport<DNSoftEdgeClass, DNSoftEdge>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNEmbedAllFontsHtmlControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{818B97E2-BE4F-5E23-8B4A-6B3D31FD55AD}']
  { constructors } 

    ///<summary>
    ///  Creates new instance
    ///</summary>
    {class} function init: DNEmbedAllFontsHtmlController; overload;
    ///<summary>
    ///  Creates new instance
    ///</summary>
    ///  <param name="fontNameExcludeList">Fonts to be excluded from embedding</param>
    {class} function init(fontNameExcludeList: TArray<string>): DNEmbedAllFontsHtmlController; overload;

  end;

  ///<summary>
  ///  The formatting controller class to use for embedding all presentation fonts in WOFF format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.EmbedAllFontsHtmlController')]
  DNEmbedAllFontsHtmlController = interface(DDN.mscorlib.DNObject)
  ['{8CCABDBE-3723-4376-9611-FDABA319992A}']
  { methods } 

    ///<summary>
    ///  Called to write html document header. Called once per presentation conversion.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="presentation">Presentation which being currently rendered.</param>
    procedure WriteDocumentStart(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    ///<summary>
    ///  Called to write html document footer. Called once per presentation conversion.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="presentation">Presentation which being currently rendered.</param>
    procedure WriteDocumentEnd(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    ///<summary>
    ///  Called to write html slide header. Called once per each of slides.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="slide">Slide which being currently rendered.</param>
    procedure WriteSlideStart(generator: DNIHtmlGenerator; slide: DNISlide);
    ///<summary>
    ///  Called to write html slide footer. Called once per each of slides.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="slide">Slide which being currently rendered.</param>
    procedure WriteSlideEnd(generator: DNIHtmlGenerator; slide: DNISlide);
    ///<summary>
    ///  Called before shape's rendering. Called once per each of shape. If this function writes anything to generator, current slide image generation will be finished, added html fragment inserted and new image will be started atop of the previous.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="shape">Shape which is about to render.</param>
    procedure WriteShapeStart(generator: DNIHtmlGenerator; shape: DNIShape);
    ///<summary>
    ///  Called before shape's rendering. Called once per each of shape. If this function writes anything to generator, current slide image generation will be finished, added html fragment inserted and new image will be started atop of the previous.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="shape">Shape which is rendered last.</param>
    procedure WriteShapeEnd(generator: DNIHtmlGenerator; shape: DNIShape);
    ///<summary>
    ///  Write all fonts contained in <see cref="T:Aspose.Slides.Presentation" />
    ///  .
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="presentation">Presentation which being currently rendered.</param>
    procedure WriteAllFonts(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    ///<summary>
    ///  Writes data as base64 into HTML document itself
    ///</summary>
    ///  <param name="generator">HTML generator</param>
    ///  <param name="originalFont">Font to be serialized</param>
    ///  <param name="substitutedFont">Substituted font (if font substitution occured), null otherwise</param>
    ///  <param name="fontStyle">Font style</param>
    ///  <param name="fontWeight">Font weight</param>
    ///  <param name="fontData">Font data</param>
    procedure WriteFont(generator: DNIHtmlGenerator; originalFont: DNIFontData; substitutedFont: DNIFontData; fontStyle: string; fontWeight: string; fontData: TArray<Byte>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmbedAllFontsHtmlController = class(TDNGenericImport<DNEmbedAllFontsHtmlControllerClass, DNEmbedAllFontsHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNEmbeddedEotFontsHtmlControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C2900CC7-2B85-5FAD-84B3-A670E8DF0080}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    {class} function init: DNEmbeddedEotFontsHtmlController; overload;
    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///  <param name="controller">HTML formatting controller.</param>
    {class} function init(controller: DNIHtmlFormattingController): DNEmbeddedEotFontsHtmlController; overload;

  end;

  ///<summary>
  ///  The formatting controller class to use for fonts embedding in EOT format
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.EmbeddedEotFontsHtmlController')]
  DNEmbeddedEotFontsHtmlController = interface(DDN.mscorlib.DNObject)
  ['{BFB8C15A-0505-4DE1-B6FE-E54858D98E87}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmbeddedEotFontsHtmlController = class(TDNGenericImport<DNEmbeddedEotFontsHtmlControllerClass, DNEmbeddedEotFontsHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNEmbeddedWoffFontsHtmlControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B62B1E9-DDEA-5C5A-B4AF-24ADC3552453}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    {class} function init: DNEmbeddedWoffFontsHtmlController; overload;
    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///  <param name="controller">HTML formatting controller.</param>
    {class} function init(controller: DNIHtmlFormattingController): DNEmbeddedWoffFontsHtmlController; overload;

  end;

  ///<summary>
  ///  The formatting controller class to use for fonts embedding in WOFF format
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.EmbeddedWoffFontsHtmlController')]
  DNEmbeddedWoffFontsHtmlController = interface(DDN.mscorlib.DNObject)
  ['{E74F3A0D-CB6C-49F9-B9CE-5CD566FA6756}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmbeddedWoffFontsHtmlController = class(TDNGenericImport<DNEmbeddedWoffFontsHtmlControllerClass, DNEmbeddedWoffFontsHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNHtmlFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{41F5AEEE-9096-575E-B533-FAFEDF207D9B}']
  { static methods } 

    ///<summary>
    ///  Creates and returns HTML formatter for a simple document view which consists of sequences of slides one below another.
    ///</summary>
    ///  <param name="css">Specifies CSS for this file.</param>
    ///  <param name="showSlideTitle">Add slide title if there is one above slide image.</param>
    ///<returns></returns>
    {class} function CreateDocumentFormatter(css: string; showSlideTitle: Boolean): DNHtmlFormatter;
    ///<summary>
    ///  Creates and returns HTML formatter for a simple slide show html which shows slides one after another.
    ///</summary>
    ///  <param name="css">Specifies URL of CCS file used.</param>
    ///  <param name="showSlideTitle">Add slide title if there is one above slide image.</param>
    ///<returns></returns>
    {class} function CreateSlideShowFormatter(css: string; showSlideTitle: Boolean): DNHtmlFormatter;
    ///<summary>
    ///  Creates and returns HTML formatter for custom callback-driven html generation.
    ///</summary>
    ///  <param name="formattingController">Callback interface which controls html file generation.</param>
    ///<returns></returns>
    {class} function CreateCustomFormatter(formattingController: DNIHtmlFormattingController): DNHtmlFormatter;

  end;

  ///<summary>
  ///  Represents HTML file template.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.HtmlFormatter')]
  DNHtmlFormatter = interface(DDN.mscorlib.DNObject)
  ['{666AF07D-CCA5-36EA-A772-9EAAA862C94F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlFormatter = class(TDNGenericImport<DNHtmlFormatterClass, DNHtmlFormatter>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNHtmlGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{559A8898-2525-500B-ACFE-994D3C9DB1C6}']
  end;

  ///<summary>
  ///  Html generator.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.HtmlGenerator')]
  DNHtmlGenerator = interface(DDN.mscorlib.DNObject)
  ['{8C2F4514-7092-45DE-8213-A9429E9A5723}']
  { getters & setters } 

    function get_SlideImageSize: DDN.Aspose.Common.DNSizeF;
    function get_SlideImageSizeUnit: DNSvgCoordinateUnit;
    function get_SlideImageSizeUnitCode: string;
    function get_PreviousSlideIndex: Int32;
    function get_SlideIndex: Int32;
    function get_NextSlideIndex: Int32;

  { methods } 

    ///<summary>
    ///  Adds formatted HTML text.
    ///</summary>
    ///  <param name="html">Text to add.</param>
    procedure AddHtml(html: string); overload;
    ///<summary>
    ///  Adds formatted HTML text.
    ///</summary>
    ///  <param name="html">Text to add.</param>
    procedure AddHtml(html: TArray<Char>); overload;
    ///<summary>
    ///  Adds formatted HTML text.
    ///</summary>
    ///  <param name="html">Text to add.</param>
    ///  <param name="startIndex">Start index of the portion to add.</param>
    ///  <param name="length">Length of the portion to add.</param>
    procedure AddHtml(html: TArray<Char>; startIndex: Int32; length: Int32); overload;
    ///<summary>
    ///  Adds plain text to the html files, replacing special characters with html entities.
    ///  Linebreaks and whitespaces aren't replaced.
    ///</summary>
    ///  <param name="text">Text to add.</param>
    procedure AddText(text: string); overload;
    ///<summary>
    ///  Adds plain text to the html files, replacing special characters with html entities.
    ///  Linebreaks and whitespaces aren't replaced.
    ///</summary>
    ///  <param name="text">Text to add.</param>
    procedure AddText(text: TArray<Char>); overload;
    ///<summary>
    ///  Adds plain text to the html files, replacing special characters with html entities.
    ///  Linebreaks and whitespaces aren't replaced.
    ///</summary>
    ///  <param name="text">Text to add.</param>
    ///  <param name="startIndex">Start index of the portion to add.</param>
    ///  <param name="length">Length of the portion to add.</param>
    procedure AddText(text: TArray<Char>; startIndex: Int32; length: Int32); overload;
    ///<summary>
    ///  Quotes attribute value and adds it to the html file.
    ///</summary>
    ///  <param name="value">Attribute value string.</param>
    procedure AddAttributeValue(value: string); overload;
    ///<summary>
    ///  Quotes attribute value and adds it to the html file.
    ///</summary>
    ///  <param name="value">Attribute value string.</param>
    procedure AddAttributeValue(value: TArray<Char>); overload;
    ///<summary>
    ///  Quotes attribute value and adds it to the html file.
    ///</summary>
    ///  <param name="value">Attribute value string.</param>
    ///  <param name="startIndex">Start index of the portion to add.</param>
    ///  <param name="length">Length of the portion to add.</param>
    procedure AddAttributeValue(value: TArray<Char>; startIndex: Int32; length: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns slide image size.
    ///  Read-only <see cref="T:System.Drawing.SizeF" />
    ///  .
    ///</summary>
    property SlideImageSize: DDN.Aspose.Common.DNSizeF read get_SlideImageSize;
    ///<summary>
    ///  Returns a unit in which slide image size is specified.
    ///  Read-only <see cref="T:Aspose.Slides.Export.SvgCoordinateUnit" />
    ///  .
    ///</summary>
    property SlideImageSizeUnit: DNSvgCoordinateUnit read get_SlideImageSizeUnit;
    ///<summary>
    ///  Returns a css code of unit in which slide image size is specified.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property SlideImageSizeUnitCode: string read get_SlideImageSizeUnitCode;
    ///<summary>
    ///  Returns index of previously rendered slide or -1 if first slide is rendering.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property PreviousSlideIndex: Int32 read get_PreviousSlideIndex;
    ///<summary>
    ///  Returns index of currently rendering slide.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property SlideIndex: Int32 read get_SlideIndex;
    ///<summary>
    ///  Returns index of a slide, which will be rendered after the current slide or -1 if currently rendering last slide.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property NextSlideIndex: Int32 read get_NextSlideIndex;
  end;

  TDNHtmlGenerator = class(TDNGenericImport<DNHtmlGeneratorClass, DNHtmlGenerator>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents HTML file template.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IHtmlFormatter')]
  DNIHtmlFormatter = interface(DDN.mscorlib.DNObject)
  ['{31ED65BE-DA92-4987-A234-283A1EDAB99B}']
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Controls a html file generation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IHtmlFormattingController')]
  DNIHtmlFormattingController = interface(DDN.mscorlib.DNObject)
  ['{C995885E-5346-4DA0-9272-12A34598D1B8}']
  { methods } 

    ///<summary>
    ///  Called to write html document header. Called once per presentation conversion.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="presentation">Presentation which being currently rendered.</param>
    procedure WriteDocumentStart(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    ///<summary>
    ///  Called to write html document footer. Called once per presentation conversion.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="presentation">Presentation which being currently rendered.</param>
    procedure WriteDocumentEnd(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    ///<summary>
    ///  Called to write html slide header. Called once per each of slides.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="slide">Slide which being currently rendered.</param>
    procedure WriteSlideStart(generator: DNIHtmlGenerator; slide: DNISlide);
    ///<summary>
    ///  Called to write html slide footer. Called once per each of slides.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="slide">Slide which being currently rendered.</param>
    procedure WriteSlideEnd(generator: DNIHtmlGenerator; slide: DNISlide);
    ///<summary>
    ///  Called before shape's rendering. Called once per each of shape. If this function writes anything to generator, current slide image generation will be finished, added html fragment inserted and new image will be started atop of the previous.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="shape">Shape which is about to render.</param>
    procedure WriteShapeStart(generator: DNIHtmlGenerator; shape: DNIShape);
    ///<summary>
    ///  Called before shape's rendering. Called once per each of shape. If this function writes anything to generator, current slide image generation will be finished, added html fragment inserted and new image will be started atop of the previous.
    ///</summary>
    ///  <param name="generator">Output object.</param>
    ///  <param name="shape">Shape which is rendered last.</param>
    procedure WriteShapeEnd(generator: DNIHtmlGenerator; shape: DNIShape);

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Embedded Eot fonts HTML controller.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IEmbeddedEotFontsHtmlController')]
  DNIEmbeddedEotFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{E4096888-EBEC-4026-96F1-AC46B3E4D922}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;

  { propertys } 

    ///<summary>
    ///  Returns IHtmlFormattingController interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Embedded woff fonts html controller.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IEmbeddedWoffFontsHtmlController')]
  DNIEmbeddedWoffFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{A4B07473-271D-440E-B061-7A33C36BB572}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;

  { propertys } 

    ///<summary>
    ///  Returns IHtmlFormattingController interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Responsive HTML Controller
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IResponsiveHtmlController')]
  DNIResponsiveHtmlController = interface(DNIHtmlFormattingController)
  ['{B3326ECA-210F-4060-8EC0-40032B18A73C}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;

  { propertys } 

    ///<summary>
    ///  Returns IHtmlFormattingController interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Html generator.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IHtmlGenerator')]
  DNIHtmlGenerator = interface(DDN.mscorlib.DNObject)
  ['{A5A958C2-DF4C-4C0A-A56F-64C2B8E18158}']
  { getters & setters } 

    function get_SlideImageSize: DDN.Aspose.Common.DNSizeF;
    function get_SlideImageSizeUnit: DNSvgCoordinateUnit;
    function get_SlideImageSizeUnitCode: string;
    function get_PreviousSlideIndex: Int32;
    function get_SlideIndex: Int32;
    function get_NextSlideIndex: Int32;

  { methods } 

    ///<summary>
    ///  Adds formatted HTML text.
    ///</summary>
    ///  <param name="html">Text to add.</param>
    procedure AddHtml(html: string); overload;
    ///<summary>
    ///  Adds formatted HTML text.
    ///</summary>
    ///  <param name="html">Text to add.</param>
    procedure AddHtml(html: TArray<Char>); overload;
    ///<summary>
    ///  Adds formatted HTML text.
    ///</summary>
    ///  <param name="html">Text to add.</param>
    ///  <param name="startIndex">Start index of the portion to add.</param>
    ///  <param name="length">Length of the portion to add.</param>
    procedure AddHtml(html: TArray<Char>; startIndex: Int32; length: Int32); overload;
    ///<summary>
    ///  Adds plain text to the html files, replacing special characters with html entities.
    ///  Linebreaks and whitespaces aren't replaced.
    ///</summary>
    ///  <param name="text">Text to add.</param>
    procedure AddText(text: string); overload;
    ///<summary>
    ///  Adds plain text to the html files, replacing special characters with html entities.
    ///  Linebreaks and whitespaces aren't replaced.
    ///</summary>
    ///  <param name="text">Text to add.</param>
    procedure AddText(text: TArray<Char>); overload;
    ///<summary>
    ///  Adds plain text to the html files, replacing special characters with html entities.
    ///  Linebreaks and whitespaces aren't replaced.
    ///</summary>
    ///  <param name="text">Text to add.</param>
    ///  <param name="startIndex">Start index of the portion to add.</param>
    ///  <param name="length">Length of the portion to add.</param>
    procedure AddText(text: TArray<Char>; startIndex: Int32; length: Int32); overload;
    ///<summary>
    ///  Quotes attribute value and adds it to the html file.
    ///</summary>
    ///  <param name="value">Attribute value string.</param>
    procedure AddAttributeValue(value: string); overload;
    ///<summary>
    ///  Quotes attribute value and adds it to the html file.
    ///</summary>
    ///  <param name="value">Attribute value string.</param>
    procedure AddAttributeValue(value: TArray<Char>); overload;
    ///<summary>
    ///  Quotes attribute value and adds it to the html file.
    ///</summary>
    ///  <param name="value">Attribute value string.</param>
    ///  <param name="startIndex">Start index of the portion to add.</param>
    ///  <param name="length">Length of the portion to add.</param>
    procedure AddAttributeValue(value: TArray<Char>; startIndex: Int32; length: Int32); overload;

  { propertys } 

    ///<summary>
    ///  Returns slide image size.
    ///  Read-only <see cref="T:System.Drawing.SizeF" />
    ///  .
    ///</summary>
    property SlideImageSize: DDN.Aspose.Common.DNSizeF read get_SlideImageSize;
    ///<summary>
    ///  Returns a unit in which slide image size is specified.
    ///  Read-only <see cref="T:Aspose.Slides.Export.SvgCoordinateUnit" />
    ///  .
    ///</summary>
    property SlideImageSizeUnit: DNSvgCoordinateUnit read get_SlideImageSizeUnit;
    ///<summary>
    ///  Returns a css code of unit in which slide image size is specified.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property SlideImageSizeUnitCode: string read get_SlideImageSizeUnitCode;
    ///<summary>
    ///  Returns index of previously rendered slide or -1 if first slide is rendering.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property PreviousSlideIndex: Int32 read get_PreviousSlideIndex;
    ///<summary>
    ///  Returns index of currently rendering slide.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property SlideIndex: Int32 read get_SlideIndex;
    ///<summary>
    ///  Returns index of a slide, which will be rendered after the current slide or -1 if currently rendering last slide.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property NextSlideIndex: Int32 read get_NextSlideIndex;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Callback interface used to determine how object should be processed during saving.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ILinkEmbedController')]
  DNILinkEmbedController = interface(DDN.mscorlib.DNObject)
  ['{3236C359-1198-404A-83DA-4702DDCE7EB8}']
  { methods } 

    ///<summary>
    ///  Determines where object should be stored.
    ///  This method is called once for each object id.
    ///  It is not guaranteed that there won't be two objects with same data, semanticName and contentType but with different id.
    ///</summary>
    ///  <param name="id">Object id. This id is saving operation-wide unique.</param>
    ///  <param name="entityData">Object binary data. This parameter can be null, if object binary data is not generated yet.</param>
    ///  <param name="semanticName">Some short text, describing meaning of object. Controller may use this as a part of external object name, but it is up to dispatcher to ensure that names will be unique and contain only allowed characters.</param>
    ///  <param name="contentType">MIME type of object.</param>
    ///  <param name="recomendedExtension">File name extension, recommended for this MIME type.</param>
    ///<returns>Decision</returns>
    function GetObjectStoringLocation(id: Int32; entityData: TArray<Byte>; semanticName: string; contentType: string; recomendedExtension: string): DNLinkEmbedDecision;
    ///<summary>
    ///  Returns an URL to an external object.
    ///  This method always called if <see cref="M:Aspose.Slides.Export.ILinkEmbedController.GetObjectStoringLocation(System.Int32,System.Byte[],System.String,System.String,System.String)" />
    ///  returned <see cref="F:Aspose.Slides.Export.LinkEmbedDecision.Link" />
    ///  and may be called if <see cref="M:Aspose.Slides.Export.ILinkEmbedController.GetObjectStoringLocation(System.Int32,System.Byte[],System.String,System.String,System.String)" />
    ///  returned <see cref="F:Aspose.Slides.Export.LinkEmbedDecision.Embed" />
    ///  but embedding is impossible.
    ///  Can be called multiple time for same object id.
    ///</summary>
    ///  <param name="id">Object id. This id is saving operation-wide unique.</param>
    ///  <param name="referrer">id of referrencing object or 0, if object is referrenced by the root document. May be used to generate relative link.</param>
    ///<returns>Url of external object or null if this object should be ignored.</returns>
    function GetUrl(id: Int32; referrer: Int32): string;
    ///<summary>
    ///  Saves external object.
    ///</summary>
    ///  <param name="id">Object id. This id is saving operation-wide unique.</param>
    ///  <param name="entityData">Object binary data. This parameter cannot be null.</param>
    procedure SaveExternal(id: Int32; entityData: TArray<Byte>);

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  This class allows export of video and audio files into a HTML
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IVideoPlayerHtmlController')]
  DNIVideoPlayerHtmlController = interface(DNILinkEmbedController)
  ['{A208210E-68F0-4958-BE48-F7324ADA89C8}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;
    function get_AsISvgShapeFormattingController: DNISvgShapeFormattingController;
    function get_AsILinkEmbedController: DNILinkEmbedController;

  { propertys } 

    ///<summary>
    ///  Allows to get base IHtmlFormattingController interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.IHtmlFormattingController" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
    ///<summary>
    ///  Allows to get base ISvgShapeFormattingController interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISvgShapeFormattingController" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISvgShapeFormattingController: DNISvgShapeFormattingController read get_AsISvgShapeFormattingController;
    ///<summary>
    ///  Allows to get base ILinkEmbedController interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ILinkEmbedController" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsILinkEmbedController: DNILinkEmbedController read get_AsILinkEmbedController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control the look of layouting of notes and comments in exported document.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.INotesCommentsLayoutingOptions')]
  DNINotesCommentsLayoutingOptions = interface(DDN.mscorlib.DNObject)
  ['{F84FA33C-38D3-41A3-A623-68325DF33DCE}']
  { getters & setters } 

    function get_NotesPosition: DNNotesPositions;
    procedure set_NotesPosition(value: DNNotesPositions);
    function get_CommentsPosition: DNCommentsPositions;
    procedure set_CommentsPosition(value: DNCommentsPositions);
    function get_CommentsAreaColor: DDN.Aspose.Common.DNColor;
    procedure set_CommentsAreaColor(value: DDN.Aspose.Common.DNColor);
    function get_CommentsAreaWidth: Int32;
    procedure set_CommentsAreaWidth(value: Int32);
    function get_ShowCommentsByNoAuthor: Boolean;
    procedure set_ShowCommentsByNoAuthor(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Gets or sets the position of the notes on the page.
    ///</summary>
    ///<remarks>
    ///  Default is <b>NotesPositions.None</b>
    ///  .
    ///</remarks>
    property NotesPosition: DNNotesPositions read get_NotesPosition write set_NotesPosition;
    ///<summary>
    ///  Gets or sets the position of the comments on the page.
    ///</summary>
    ///<remarks>
    ///  Default is <b>CommentsPositions.None</b>
    ///  .
    ///</remarks>
    property CommentsPosition: DNCommentsPositions read get_CommentsPosition write set_CommentsPosition;
    ///<summary>
    ///  Gets or sets the color of comments area
    ///  (Applies only if comments are displayed on the right).
    ///</summary>
    ///<remarks>
    ///  Default is <b>Color.SkyBlue</b>
    ///  .
    ///</remarks>
    property CommentsAreaColor: DDN.Aspose.Common.DNColor read get_CommentsAreaColor write set_CommentsAreaColor;
    ///<summary>
    ///  Gets or sets the width of the comment output area in pixels
    ///  (Applies only if comments are displayed on the right).
    ///</summary>
    ///<remarks>
    ///  Minimal and default value is <b>150</b>
    ///  .
    ///</remarks>
    property CommentsAreaWidth: Int32 read get_CommentsAreaWidth write set_CommentsAreaWidth;
    ///<summary>
    ///  Gets or sets the visibility of comments that do not have an author. If true then comments
    ///  will be displayed.
    ///  (Applies only if comments are displayed).
    ///</summary>
    ///<remarks>
    ///  Default value is <b>false</b>
    ///  .
    ///</remarks>
    property ShowCommentsByNoAuthor: Boolean read get_ShowCommentsByNoAuthor write set_ShowCommentsByNoAuthor;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Options that control how a presentation is saved.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISaveOptions')]
  DNISaveOptions = interface(DDN.mscorlib.DNObject)
  ['{DCC148B8-FAF1-4CDF-9515-F0BD457FD456}']
  { getters & setters } 

    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { propertys } 

    ///<summary>
    ///  Returns or sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents a HTML exporting options.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IHtmlOptions')]
  DNIHtmlOptions = interface(DNISaveOptions)
  ['{25F44504-EEA1-4FC5-B20E-EBC8BECB635D}']
  { getters & setters } 

    function get_HtmlFormatter: DNIHtmlFormatter;
    procedure set_HtmlFormatter(value: DNIHtmlFormatter);
    function get_SlideImageFormat: DNISlideImageFormat;
    procedure set_SlideImageFormat(value: DNISlideImageFormat);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_SvgResponsiveLayout: Boolean;
    procedure set_SvgResponsiveLayout(value: Boolean);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Returns or sets HTML template.
    ///  Read/write <see cref="T:Aspose.Slides.Export.IHtmlFormatter" />
    ///  .
    ///</summary>
    property HtmlFormatter: DNIHtmlFormatter read get_HtmlFormatter write set_HtmlFormatter;
    ///<summary>
    ///  Returns or sets slide image format options.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ISlideImageFormat" />
    ///  .
    ///</summary>
    property SlideImageFormat: DNISlideImageFormat read get_SlideImageFormat write set_SlideImageFormat;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Returns or sets a value determining the quality of the JPEG images inside PDF document.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<remarks><p>Has effect only when a document contains JPEG images.</p>
    ///  <p>Use this property to get or set the quality of the images inside a document when saving in PDF format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100 means best quality but minimum compression.</p>
    ///  <p>The default value is <b>95</b>
    ///  .</p>
    ///</remarks>
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Represents the pictures compression level
    ///  Read/write <see cref="P:Aspose.Slides.Export.IHtmlOptions.PicturesCompression" />
    ///  .
    ///</summary>
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    ///<summary>
    ///  A boolean flag indicates if the cropped parts remain as part of the document. If true the cropped
    ///  parts will removed, if false they will be serialized in the document (which can possible lead to a
    ///  larger file)
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    ///<summary>
    ///  True to exclude width and height attributes from SVG container - that will make layout responsive. False - otherwise.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SvgResponsiveLayout: Boolean read get_SvgResponsiveLayout write set_SvgResponsiveLayout;
    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation is saved in Pdf format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IPdfOptions')]
  DNIPdfOptions = interface(DNISaveOptions)
  ['{42C93C3E-8E38-43D0-AF5E-72AF1701D0E3}']
  { getters & setters } 

    function get_TextCompression: DNPdfTextCompression;
    procedure set_TextCompression(value: DNPdfTextCompression);
    function get_BestImagesCompressionRatio: Boolean;
    procedure set_BestImagesCompressionRatio(value: Boolean);
    function get_EmbedTrueTypeFontsForASCII: Boolean;
    procedure set_EmbedTrueTypeFontsForASCII(value: Boolean);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_AdditionalCommonFontFamilies: TArray<string>;
    procedure set_AdditionalCommonFontFamilies(value: TArray<string>);
    function get_EmbedFullFonts: Boolean;
    procedure set_EmbedFullFonts(value: Boolean);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_AccessPermissions: DNPdfAccessPermissions;
    procedure set_AccessPermissions(value: DNPdfAccessPermissions);
    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_SufficientResolution: Single;
    procedure set_SufficientResolution(value: Single);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ImageTransparentColor: DDN.Aspose.Common.DNColor;
    procedure set_ImageTransparentColor(value: DDN.Aspose.Common.DNColor);
    function get_ApplyImageTransparent: Boolean;
    procedure set_ApplyImageTransparent(value: Boolean);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Specifies compression type to be used for all textual content in the document.
    ///  Read/write <see cref="T:Aspose.Slides.Export.PdfTextCompression" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <see cref="F:Aspose.Slides.Export.PdfTextCompression.Flate" />
    ///  .
    ///</remarks>
    property TextCompression: DNPdfTextCompression read get_TextCompression write set_TextCompression;
    ///<summary>
    ///  Indicates if the most effective compression (instead of the default one) for each image must be selected
    ///  automatically. If set to <see cref="T:System.Boolean" />
    ///  .true, for every image in presentation the most appropriate compression
    ///  algorithm will be chosen, what will lead to the smaller size of the resulting PDF document.
    ///<remarks>Best image compression ratio selection is computationally expensive and takes
    ///  an additional amount of RAM, and this option is <see cref="T:System.Boolean" />
    ///  .false by default.</remarks>
    ///</summary>
    ///<remarks>
    ///  Default is <see cref="T:System.Boolean" />
    ///  .false.
    ///</remarks>
    property BestImagesCompressionRatio: Boolean read get_BestImagesCompressionRatio write set_BestImagesCompressionRatio;
    ///<summary>
    ///  True to embed true type fonts for ASCII characters 32-127.
    ///  Fonts for character codes greater than 127 are always embedded.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>true</b>
    ///  .
    ///</remarks>
    property EmbedTrueTypeFontsForASCII: Boolean read get_EmbedTrueTypeFontsForASCII write set_EmbedTrueTypeFontsForASCII;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Returns or sets an array of user-defined names of font families which Aspose.Slides should consider common.
    ///  Read/write <see cref="T:System.String" />
    ///  [].
    ///</summary>
    property AdditionalCommonFontFamilies: TArray<string> read get_AdditionalCommonFontFamilies write set_AdditionalCommonFontFamilies;
    ///<summary>
    ///  Determines if all characters of font should be embedded or only used subset.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>false</b>
    ///  .
    ///</remarks>
    property EmbedFullFonts: Boolean read get_EmbedFullFonts write set_EmbedFullFonts;
    ///<summary>
    ///  Returns or sets a value determining the quality of the JPEG images inside PDF document.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<remarks><p>Has effect only when a document contains JPEG images.</p>
    ///  <p>Use this property to get or set the quality of the images inside a document when saving in PDF format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100 means best quality but minimum compression.</p>
    ///  <p>The default value is <b>100</b>
    ///  .</p>
    ///</remarks>
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Desired conformance level for generated PDF document.
    ///  Read/write <see cref="T:Aspose.Slides.Export.PdfCompliance" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <see cref="F:Aspose.Slides.Export.PdfCompliance.Pdf15" />
    ///  .
    ///</remarks>
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    ///<summary>
    ///  Setting user password to protect the PDF document.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Contains a set of flags specifying which access permissions should be granted when the document is opened
    ///  with user access. See <see cref="T:Aspose.Slides.Export.PdfAccessPermissions" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  var pdfOptions = new PdfOptions();
    ///  pdfOptions.Password = "my_password";
    ///  pdfOptions.AccessPermissions = PdfAccessPermissions.PrintDocument | PdfAccessPermissions.HighQualityPrint;
    ///  using (var presentation = new Presentation())
    ///  {
    ///  presentation.Save(pdfFilePath, SaveFormat.Pdf, pdfOptions);
    ///  }
    ///</code></example>
    property AccessPermissions: DNPdfAccessPermissions read get_AccessPermissions write set_AccessPermissions;
    ///<summary>
    ///  True to convert all metafiles used in a presentation to the PNG images.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>true</b>
    ///  .
    ///  Pdf document can contain vector graphics and raster images.
    ///  If SaveMetafilesAsPng is set to true then source Metafile
    ///  image is converted to Png format and saved to Pdf as a raster
    ///  image. If SaveMetafilesAsPng is set to false then source Metafile
    ///  is converted to Pdf vector graphics. Each approach has advantages
    ///  and disadvantages. For example, if Metafile is converted to PNG,
    ///  then some quality loss is possible during resulting
    ///  document scaling. If Metafile is converted to Pdf vector graphics,
    ///  then performance issues in Pdf viewing tool are possible.
    ///</remarks>
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    ///<summary>
    ///  Returns or sets a value determining resolution of images inside PDF document.
    ///<remarks><p>Property affects on file size, time of export and image quality.</p>
    ///  <p>The default value is <b>96</b>
    ///  .</p>
    ///</remarks>
    ///<value>Effect of this parameter depends on few factors.
    ///  Algorithm tries to get best output image size according to the property value, source image size and image frame size.
    ///  Using of similar property values may give the same result. Recommended to use step 16 or 32 to get visible effect.</value>
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SufficientResolution: Single read get_SufficientResolution write set_SufficientResolution;
    ///<summary>
    ///  True to draw black frame around each slide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>false</b>
    ///  .
    ///</remarks>
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Gets or sets the image transparent color.
    ///</summary>
    ///<value>
    ///  The color of the image transparent.
    ///</value>
    property ImageTransparentColor: DDN.Aspose.Common.DNColor read get_ImageTransparentColor write set_ImageTransparentColor;
    ///<summary>
    ///  Applies the specified transparent color to an image if <c>true</c>.
    ///</summary>
    property ApplyImageTransparent: Boolean read get_ApplyImageTransparent write set_ApplyImageTransparent;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation is saved in PPT format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IPptOptions')]
  DNIPptOptions = interface(DNISaveOptions)
  ['{352B25A8-E6E8-4387-9BB7-8EA1747D97BA}']
  { getters & setters } 

    function get_RootDirectoryClsid: DDN.mscorlib.DNGuid;
    procedure set_RootDirectoryClsid(value: DDN.mscorlib.DNGuid);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Represents the object class GUID (CLSID) that is stored in the root directory entry. Can be used for COM
    ///  activation of the document's application.
    ///  The default value is '64818D11-4F9B-11CF-86EA-00AA00B929E8' that corresponds to 'Microsoft Powerpoint.Slide.8'.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  PptOptions pptOptions = new PptOptions();
    ///  /// set CLSID to 'Microsoft Powerpoint.Show.8'
    ///  pptOptions.RootDirectoryClsid = new Guid("64818D10-4F9B-11CF-86EA-00AA00B929E8");
    ///  pres.Save("pres.ppt", SaveFormat.Ppt, pptOptions);
    ///  }
    ///</code></example>
    property RootDirectoryClsid: DDN.mscorlib.DNGuid read get_RootDirectoryClsid write set_RootDirectoryClsid;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents options for saving OpenXml presentations (PPTX, PPSX, POTX, PPTM, PPSM, POTM).
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IPptxOptions')]
  DNIPptxOptions = interface(DNISaveOptions)
  ['{AB682B3A-6BDF-4946-9DA3-DB1498A27D0B}']
  { getters & setters } 

    function get_Conformance: DNConformance;
    procedure set_Conformance(value: DNConformance);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Specifies the conformance class to which the Presentation document conforms.
    ///  Default value is <see cref="F:Aspose.Slides.Export.Conformance.Ecma376_2006" />
    ///</summary>
    property Conformance: DNConformance read get_Conformance write set_Conformance;
    ///<summary>
    ///  Allows to get base ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation/slide is rendered.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  using (Presentation pres = new Presentation("pres.pptx"))
  ///  {
  ///  IRenderingOptions renderingOpts = new RenderingOptions();
  ///  renderingOpts.NotesCommentsLayouting.NotesPosition = NotesPositions.BottomTruncated;
  ///  pres.Slides[0].GetThumbnail(renderingOpts).Save("pres-Original.png", ImageFormat.Png);
  ///  renderingOpts.DefaultRegularFont = "Arial Black";
  ///  pres.Slides[0].GetThumbnail(renderingOpts).Save("pres-ArialBlackDefault.png", ImageFormat.Png);
  ///  renderingOpts.DefaultRegularFont = "Arial Narrow";
  ///  pres.Slides[0].GetThumbnail(renderingOpts).Save("pres-ArialNarrowDefault.png", ImageFormat.Png);
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.Export.IRenderingOptions')]
  DNIRenderingOptions = interface(DNISaveOptions)
  ['{5F8883CD-3CE7-44D4-91A4-775E68FADEBB}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents an SVG options.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISVGOptions')]
  DNISVGOptions = interface(DNISaveOptions)
  ['{2D9C9A99-9C45-4331-A02A-B5BD688FD924}']
  { getters & setters } 

    function get_VectorizeText: Boolean;
    procedure set_VectorizeText(value: Boolean);
    function get_MetafileRasterizationDpi: Int32;
    procedure set_MetafileRasterizationDpi(value: Int32);
    function get_Disable3DText: Boolean;
    procedure set_Disable3DText(value: Boolean);
    function get_DisableGradientSplit: Boolean;
    procedure set_DisableGradientSplit(value: Boolean);
    function get_DisableLineEndCropping: Boolean;
    procedure set_DisableLineEndCropping(value: Boolean);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ShapeFormattingController: DNISvgShapeFormattingController;
    procedure set_ShapeFormattingController(value: DNISvgShapeFormattingController);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_ExternalFontsHandling: DNSvgExternalFontsHandling;
    procedure set_ExternalFontsHandling(value: DNSvgExternalFontsHandling);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Determines whether the text on a slide will be saved as graphics.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property VectorizeText: Boolean read get_VectorizeText write set_VectorizeText;
    ///<summary>
    ///  Returns or sets the lower resolution limit for metafile rasterization.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property MetafileRasterizationDpi: Int32 read get_MetafileRasterizationDpi write set_MetafileRasterizationDpi;
    ///<summary>
    ///  Determines whether the 3D text is disabled in SVG.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Disable3DText: Boolean read get_Disable3DText write set_Disable3DText;
    ///<summary>
    ///  Disables splitting FromCornerX and FromCenter gradients.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisableGradientSplit: Boolean read get_DisableGradientSplit write set_DisableGradientSplit;
    ///<summary>
    ///  SVG 1.1 lacks ability to define insets for markers.
    ///  Aspose.Slides SVG writing engine has workaround for that problem:
    ///  it crops end of line with arrow, so, line doesn't overlap markers.
    ///  This option switches off such behavior.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisableLineEndCropping: Boolean read get_DisableLineEndCropping write set_DisableLineEndCropping;
    ///<summary>
    ///  Determines JPEG encoding quality.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Returns and sets a callback interface which allows user to control shape conversion.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ISvgShapeFormattingController" />
    ///  .
    ///</summary>
    property ShapeFormattingController: DNISvgShapeFormattingController read get_ShapeFormattingController write set_ShapeFormattingController;
    ///<summary>
    ///  Represents the pictures compression level
    ///  Read/write <see cref="P:Aspose.Slides.Export.ISVGOptions.PicturesCompression" />
    ///  .
    ///</summary>
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    ///<summary>
    ///  A boolean flag indicates if the cropped parts remain as part of the document. If true the cropped
    ///  parts will removed, if false they will be serialized in the document (which can possible lead to a
    ///  larger file)
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    ///<summary>
    ///  Determines a way of handling externally loaded fonts.
    ///  Read/write <see cref="T:Aspose.Slides.Export.SvgExternalFontsHandling" />
    ///  .
    ///</summary>
    property ExternalFontsHandling: DNSvgExternalFontsHandling read get_ExternalFontsHandling write set_ExternalFontsHandling;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation is saved in SWF format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISwfOptions')]
  DNISwfOptions = interface(DNISaveOptions)
  ['{B74C8887-D592-4A2C-B3CF-55A7AC14CF09}']
  { getters & setters } 

    function get_Compressed: Boolean;
    procedure set_Compressed(value: Boolean);
    function get_ViewerIncluded: Boolean;
    procedure set_ViewerIncluded(value: Boolean);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_ShowFullScreen: Boolean;
    procedure set_ShowFullScreen(value: Boolean);
    function get_ShowPageStepper: Boolean;
    procedure set_ShowPageStepper(value: Boolean);
    function get_ShowSearch: Boolean;
    procedure set_ShowSearch(value: Boolean);
    function get_ShowTopPane: Boolean;
    procedure set_ShowTopPane(value: Boolean);
    function get_ShowBottomPane: Boolean;
    procedure set_ShowBottomPane(value: Boolean);
    function get_ShowLeftPane: Boolean;
    procedure set_ShowLeftPane(value: Boolean);
    function get_StartOpenLeftPane: Boolean;
    procedure set_StartOpenLeftPane(value: Boolean);
    function get_EnableContextMenu: Boolean;
    procedure set_EnableContextMenu(value: Boolean);
    function get_LogoImageBytes: TArray<Byte>;
    procedure set_LogoImageBytes(value: TArray<Byte>);
    function get_LogoLink: string;
    procedure set_LogoLink(value: string);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Specifies whether the generated SWF document should be compressed or not.
    ///  Default is <c>true</c>.
    ///</summary>
    property Compressed: Boolean read get_Compressed write set_Compressed;
    ///<summary>
    ///  Specifies whether the generated SWF document should include the integrated document viewer or not.
    ///  Default is <c>true</c>.
    ///</summary>
    property ViewerIncluded: Boolean read get_ViewerIncluded write set_ViewerIncluded;
    ///<summary>
    ///  Specifies whether border around pages should be shown. Default is true.
    ///</summary>
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Show/hide fullscreen button. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowFullScreen: Boolean read get_ShowFullScreen write set_ShowFullScreen;
    ///<summary>
    ///  Show/hide page stepper. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowPageStepper: Boolean read get_ShowPageStepper write set_ShowPageStepper;
    ///<summary>
    ///  Show/hide search section. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowSearch: Boolean read get_ShowSearch write set_ShowSearch;
    ///<summary>
    ///  Show/hide whole top pane. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowTopPane: Boolean read get_ShowTopPane write set_ShowTopPane;
    ///<summary>
    ///  Show/hide bottom pane. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowBottomPane: Boolean read get_ShowBottomPane write set_ShowBottomPane;
    ///<summary>
    ///  Show/hide left pane. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowLeftPane: Boolean read get_ShowLeftPane write set_ShowLeftPane;
    ///<summary>
    ///  Start with opened left pane. Can be overridden in flashvars. Default is false.
    ///</summary>
    property StartOpenLeftPane: Boolean read get_StartOpenLeftPane write set_StartOpenLeftPane;
    ///<summary>
    ///  Enable/disable context menu. Default is true.
    ///</summary>
    property EnableContextMenu: Boolean read get_EnableContextMenu write set_EnableContextMenu;
    ///<summary>
    ///  Image that will be displayed as logo in the top right corner of the viewer.
    ///  Image should be 32x64 pixels PNG image, otherwise logo can be displayed improperly.
    ///</summary>
    property LogoImageBytes: TArray<Byte> read get_LogoImageBytes write set_LogoImageBytes;
    ///<summary>
    ///  Gets or sets the full hyperlink address for a logo.
    ///  Has an effect only if a <see cref="P:Aspose.Slides.Export.ISwfOptions.LogoImageBytes" />
    ///  is specified.
    ///</summary>
    property LogoLink: string read get_LogoLink write set_LogoLink;
    ///<summary>
    ///  Specifies the quality of JPEG images.
    ///  Default is 95.
    ///</summary>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation is saved in TIFF format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ITiffOptions')]
  DNITiffOptions = interface(DNISaveOptions)
  ['{3CB136F3-42AD-4FEE-8F79-CC22E91FC1B7}']
  { getters & setters } 

    function get_ImageSize: DDN.Aspose.Common.DNSize;
    procedure set_ImageSize(value: DDN.Aspose.Common.DNSize);
    function get_DpiX: UInt32;
    procedure set_DpiX(value: UInt32);
    function get_DpiY: UInt32;
    procedure set_DpiY(value: UInt32);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_CompressionType: DNTiffCompressionTypes;
    procedure set_CompressionType(value: DNTiffCompressionTypes);
    function get_PixelFormat: DNImagePixelFormat;
    procedure set_PixelFormat(value: DNImagePixelFormat);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Specifies size of a generated TIFF image.
    ///  Default value is 0x0, what means that generated image sizes will be calculated based on presentation slide size value.
    ///  Read/write <see cref="T:System.Drawing.Size" />
    ///  .
    ///</summary>
    property ImageSize: DDN.Aspose.Common.DNSize read get_ImageSize write set_ImageSize;
    ///<summary>
    ///  Specifies the horizontal resolution in dots per inch.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property DpiX: UInt32 read get_DpiX write set_DpiX;
    ///<summary>
    ///  Specifies the vertical resolution in dots per inch.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property DpiY: UInt32 read get_DpiY write set_DpiY;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Specifies the compression type.
    ///  Read/write <see cref="T:Aspose.Slides.Export.TiffCompressionTypes" />
    ///  .
    ///</summary>
    property CompressionType: DNTiffCompressionTypes read get_CompressionType write set_CompressionType;
    ///<summary>
    ///  Specifies the pixel format for the generated images.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ImagePixelFormat" />
    ///  .
    ///</summary>
    property PixelFormat: DNImagePixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Provides options that control how a presentation is saved in XPS format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.IXpsOptions')]
  DNIXpsOptions = interface(DNISaveOptions)
  ['{47CC7AD5-3FC5-4013-82A5-904B3272F27C}']
  { getters & setters } 

    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  True to convert all metafiles used in a presentation to the PNG images.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>true</b>
    ///  .
    ///</remarks>
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    ///<summary>
    ///  True to draw black frame around each slide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>false</b>
    ///  .
    ///</remarks>
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export.Xaml----------------
  ///<summary>
  ///  Options that control how a XAML document is saved.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  using (Presentation pres = new Presentation("pres.pptx"))
  ///  {
  ///  pres.Save(new XamlOptions { ExportHiddenSlides = true });
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.Export.Xaml.IXamlOptions')]
  DNIXamlOptions = interface(DNISaveOptions)
  ['{A9879BA4-2360-4883-8139-9007131E5DBD}']
  { getters & setters } 

    function get_ExportHiddenSlides: Boolean;
    procedure set_ExportHiddenSlides(value: Boolean);
    function get_OutputSaver: DNIXamlOutputSaver;
    procedure set_OutputSaver(value: DNIXamlOutputSaver);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    ///<summary>
    ///  Determines whether hidden slides will be exported.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  pres.Save(new XamlOptions { ExportHiddenSlides = true });
    ///  }
    ///</code></example>
    property ExportHiddenSlides: Boolean read get_ExportHiddenSlides write set_ExportHiddenSlides;
    ///<summary>
    ///  Represents an implementation of IOutputSaver interface.
    ///</summary>
    property OutputSaver: DNIXamlOutputSaver read get_OutputSaver write set_OutputSaver;
    ///<summary>
    ///  Returns ISaveOptions interface.
    ///  Read-only <see cref="T:Aspose.Slides.Export.ISaveOptions" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Allows to create save options' instances
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Export.ISaveOptionsFactory')]
  DNISaveOptionsFactory = interface(DDN.mscorlib.DNObject)
  ['{0C4EFFDD-0243-4A2A-B689-E3AF6596C89F}']
  { methods } 

    ///<summary>
    ///  Creates PPTX save options.
    ///</summary>
    ///<returns>Save options.</returns>
    function CreatePptxOptions: DNIPptxOptions;

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Determines format in which slide image will be saved for presentation to HTML export.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISlideImageFormat')]
  DNISlideImageFormat = interface(DDN.mscorlib.DNObject)
  ['{091E0DD3-6D63-458F-89AB-968D3536EB91}']
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents options for SVG shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISvgShape')]
  DNISvgShape = interface(DDN.mscorlib.DNObject)
  ['{F443D824-D5DB-499A-BCD7-B961A808C62C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { methods } 

    ///<summary>
    ///  Sets event handler for the shape
    ///</summary>
    ///  <param name="eventType">Type of event.</param>
    ///  <param name="handler">Javascript function to handle event. Null value removes handler.</param>
    procedure SetEventHandler(eventType: DNSvgEvent; handler: string);

  { propertys } 

    ///<summary>
    ///  Sets or gets id for the shape
    ///</summary>
    property Id: string read get_Id write set_Id;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Controls SVG shape generation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISvgShapeFormattingController')]
  DNISvgShapeFormattingController = interface(DDN.mscorlib.DNObject)
  ['{52CC5455-5872-4D95-A007-5F0508961F02}']
  { methods } 

    ///<summary>
    ///  This function is called before rendering of shape to SVG to allow user to control resulting SVG.
    ///</summary>
    ///  <param name="svgShape">Object to control SVG shape generation.</param>
    ///  <param name="shape">Source shape.</param>
    procedure FormatShape(svgShape: DNISvgShape; shape: DNIShape);

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Controls SVG shape and text generation.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  class CustomSvgShapeFormattingController : ISvgShapeAndTextFormattingController
  ///  {
  ///  private int m_shapeIndex, m_portionIndex, m_tspanIndex;
  ///  public CustomSvgShapeFormattingController(int shapeStartIndex = 0)
  ///  {
  ///  m_shapeIndex = shapeStartIndex;
  ///  m_portionIndex = 0;
  ///  }
  ///  public void FormatShape(Aspose.Slides.Export.ISvgShape svgShape, IShape shape)
  ///  {
  ///  svgShape.Id = string.Format("shape-{0}", m_shapeIndex++);
  ///  m_portionIndex = m_tspanIndex = 0;
  ///  }
  ///  public void FormatText(Aspose.Slides.Export.ISvgTSpan svgTSpan, IPortion portion, ITextFrame textFrame)
  ///  {
  ///  int paragraphIndex = 0; int portionIndex = 0;
  ///  for (int i = 0; i &lt; textFrame.Paragraphs.Count; i++)
  ///  {
  ///  portionIndex = textFrame.Paragraphs[i].Portions.IndexOf(portion);
  ///  if (portionIndex &gt; -1) { paragraphIndex = i; break; }
  ///  }
  ///  if (m_portionIndex != portionIndex)
  ///  {
  ///  m_tspanIndex = 0;
  ///  m_portionIndex = portionIndex;
  ///  }
  ///  svgTSpan.Id = string.Format("paragraph-{0}_portion-{1}_{2}", paragraphIndex, m_portionIndex, m_tspanIndex++);
  ///  }
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.Export.ISvgShapeAndTextFormattingController')]
  DNISvgShapeAndTextFormattingController = interface(DNISvgShapeFormattingController)
  ['{4B79B991-212F-4EA5-81D0-98A1628DCBAD}']
  { getters & setters } 

    function get_AsISvgShapeFormattingController: DNISvgShapeFormattingController;

  { methods } 

    ///<summary>
    ///  This function is called before rendering of text portion to SVG to allow user to control resulting SVG.
    ///</summary>
    ///  <param name="svgTSpan">Object to control SVG tspan generation.</param>
    ///  <param name="portion">Source portion.</param>
    ///  <param name="textFrame">Source portion text frame.</param>
    procedure FormatText(svgTSpan: DNISvgTSpan; portion: DNIPortion; textFrame: DNITextFrame);

  { propertys } 

    ///<summary>
    ///  Returns ISvgShapeFormattingController interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISvgShapeFormattingController: DNISvgShapeFormattingController read get_AsISvgShapeFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Represents options for SVG text portion ("tspan").
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ISvgTSpan')]
  DNISvgTSpan = interface(DDN.mscorlib.DNObject)
  ['{39C646C5-8815-4E74-AE32-BA5DA3D9863A}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { propertys } 

    ///<summary>
    ///  Gets or sets id for the "tspan" element
    ///</summary>
    property Id: string read get_Id write set_Id;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Options for extracting HTML from the Pptx text.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ITextToHtmlConversionOptions')]
  DNITextToHtmlConversionOptions = interface(DDN.mscorlib.DNObject)
  ['{DF3D9583-A0EA-45C0-AC0B-86F806531AB6}']
  { getters & setters } 

    function get_AddClipboardFragmentHeader: Boolean;
    procedure set_AddClipboardFragmentHeader(value: Boolean);
    function get_TextInheritanceLimit: DNTextInheritanceLimit;
    procedure set_TextInheritanceLimit(value: DNTextInheritanceLimit);
    function get_LinkEmbedController: DNILinkEmbedController;
    procedure set_LinkEmbedController(value: DNILinkEmbedController);
    function get_EncodingName: string;
    procedure set_EncodingName(value: string);

  { propertys } 

    ///<summary>
    ///  Returns or sets value, indicating if Clipboard headers should be added.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AddClipboardFragmentHeader: Boolean read get_AddClipboardFragmentHeader write set_AddClipboardFragmentHeader;
    ///<summary>
    ///  Returns or sets inhering depth for text properties.
    ///  Read/write <see cref="P:Aspose.Slides.Export.ITextToHtmlConversionOptions.TextInheritanceLimit" />
    ///  .
    ///</summary>
    property TextInheritanceLimit: DNTextInheritanceLimit read get_TextInheritanceLimit write set_TextInheritanceLimit;
    ///<summary>
    ///  Returns or sets a callback object which controlls how external object will be stored.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ILinkEmbedController" />
    ///  .
    ///</summary>
    property LinkEmbedController: DNILinkEmbedController read get_LinkEmbedController write set_LinkEmbedController;
    ///<summary>
    ///  Returns or sets html encoding name.
    ///  This value will be saved to the generated HTML file, but its up to caller to ensure that file will be saved in this encoding.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property EncodingName: string read get_EncodingName write set_EncodingName;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  ///<summary>
  ///  Allows to create VideoPlayerHtmlController.
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Export.IVideoPlayerHtmlControllerFactory')]
  DNIVideoPlayerHtmlControllerFactory = interface(DDN.mscorlib.DNObject)
  ['{91D216AA-A020-4B49-9602-102FBACC6688}']
  { methods } 

    ///<summary>
    ///  Create video player HTML controller.
    ///</summary>
    ///  <param name="path">Path.</param>
    ///  <param name="fileName">File Name.</param>
    ///  <param name="baseUri">Base URI.</param>
    ///<returns>Video player HTML controller <see cref="T:Aspose.Slides.Export.IVideoPlayerHtmlController" />
    ///</returns>
    function CreateVideoPlayerHtmlController(path: string; fileName: string; baseUri: string): DNIVideoPlayerHtmlController;

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNNotesCommentsLayoutingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0228C5C4-306C-50A5-AE93-BC70D7FFF5C6}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNNotesCommentsLayoutingOptions;

  end;

  ///<summary>
  ///  Provides options that control the look of layouting of notes and comments in exported document.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.NotesCommentsLayoutingOptions')]
  DNNotesCommentsLayoutingOptions = interface(DDN.mscorlib.DNObject)
  ['{2DFF82C2-9A6F-41D8-BDD6-1FC8CA7A4943}']
  { getters & setters } 

    function get_ShowCommentsByNoAuthor: Boolean;
    procedure set_ShowCommentsByNoAuthor(value: Boolean);
    function get_NotesPosition: DNNotesPositions;
    procedure set_NotesPosition(value: DNNotesPositions);
    function get_CommentsPosition: DNCommentsPositions;
    procedure set_CommentsPosition(value: DNCommentsPositions);
    function get_CommentsAreaColor: DDN.Aspose.Common.DNColor;
    procedure set_CommentsAreaColor(value: DDN.Aspose.Common.DNColor);
    function get_CommentsAreaWidth: Int32;
    procedure set_CommentsAreaWidth(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the visibility of comments that do not have an author. If true then comments
    ///  will be displayed.
    ///  (Applies only if comments are displayed).
    ///</summary>
    ///<remarks>
    ///  Default value is <b>false</b>
    ///  .
    ///</remarks>
    property ShowCommentsByNoAuthor: Boolean read get_ShowCommentsByNoAuthor write set_ShowCommentsByNoAuthor;
    ///<summary>
    ///  Gets or sets the position of the notes on the page.
    ///</summary>
    ///<remarks>
    ///  Default is <b>NotesPositions.None</b>
    ///  .
    ///</remarks>
    property NotesPosition: DNNotesPositions read get_NotesPosition write set_NotesPosition;
    ///<summary>
    ///  Gets or sets the position of the comments on the page.
    ///</summary>
    ///<remarks>
    ///  Default is <b>CommentsPositions.None</b>
    ///  .
    ///</remarks>
    property CommentsPosition: DNCommentsPositions read get_CommentsPosition write set_CommentsPosition;
    ///<summary>
    ///  Gets or sets the color of comments area
    ///  (Applies only if comments are displayed on the right).
    ///</summary>
    ///<remarks>
    ///  Default is <b>Color.SkyBlue</b>
    ///  .
    ///</remarks>
    property CommentsAreaColor: DDN.Aspose.Common.DNColor read get_CommentsAreaColor write set_CommentsAreaColor;
    ///<summary>
    ///  Gets or sets the width of the comment output area in pixels
    ///  (Applies only if comments are displayed on the right).
    ///</summary>
    ///<remarks>
    ///  Minimal and default value is <b>150</b>
    ///  .
    ///</remarks>
    property CommentsAreaWidth: Int32 read get_CommentsAreaWidth write set_CommentsAreaWidth;
  end;

  TDNNotesCommentsLayoutingOptions = class(TDNGenericImport<DNNotesCommentsLayoutingOptionsClass, DNNotesCommentsLayoutingOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNResponsiveHtmlControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{30F12704-DA73-570D-8CDA-5C1BC0BFE072}']
  { constructors } 

    ///<summary>
    ///  Creates new instance
    ///</summary>
    {class} function init: DNResponsiveHtmlController; overload;
    ///<summary>
    ///  Creates new instance
    ///</summary>
    ///  <param name="controller">HTML formatting controller</param>
    {class} function init(controller: DNIHtmlFormattingController): DNResponsiveHtmlController; overload;

  end;

  ///<summary>
  ///  Responsive HTML Controller
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.ResponsiveHtmlController')]
  DNResponsiveHtmlController = interface(DDN.mscorlib.DNObject)
  ['{CBBD65EB-8D2F-4026-90F9-77F225A88DB1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResponsiveHtmlController = class(TDNGenericImport<DNResponsiveHtmlControllerClass, DNResponsiveHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DEEA909-E566-5708-8734-2A7379ED24B0}']
  end;

  ///<summary>
  ///  Abstract class with options that control how a presentation is saved.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{2DC84B02-CE7F-3F96-958D-61090CB6A19A}']
  { getters & setters } 

    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNHtmlOptionsClass = interface(DNSaveOptionsClass)
  ['{FBE14530-F6DF-5617-A0C6-639454AE7FF3}']
  { constructors } 

    ///<summary>
    ///  Creates a new HtmlOptions object specifiing callback.
    ///</summary>
    ///  <param name="linkEmbedController">Callback object which controls saving project.</param>
    {class} function init(linkEmbedController: DNILinkEmbedController): DNHtmlOptions; overload;
    ///<summary>
    ///  Creates a new HtmlOptions object for saving into single HTML file.
    ///</summary>
    {class} function init: DNHtmlOptions; overload;

  end;

  ///<summary>
  ///  Represents a HTML exporting options.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.HtmlOptions')]
  DNHtmlOptions = interface(DNSaveOptions)
  ['{5C0C4ABA-9234-48DD-AFB3-3D5A56344E90}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_HtmlFormatter: DNIHtmlFormatter;
    procedure set_HtmlFormatter(value: DNIHtmlFormatter);
    function get_SlideImageFormat: DNISlideImageFormat;
    procedure set_SlideImageFormat(value: DNISlideImageFormat);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_SvgResponsiveLayout: Boolean;
    procedure set_SvgResponsiveLayout(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Returns or sets HTML template.
    ///  Read/write <see cref="T:Aspose.Slides.Export.IHtmlFormatter" />
    ///  .
    ///</summary>
    property HtmlFormatter: DNIHtmlFormatter read get_HtmlFormatter write set_HtmlFormatter;
    ///<summary>
    ///  Returns or sets slide image format options.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ISlideImageFormat" />
    ///  .
    ///</summary>
    property SlideImageFormat: DNISlideImageFormat read get_SlideImageFormat write set_SlideImageFormat;
    ///<summary>
    ///  Returns or sets a value determining the quality of the JPEG images inside PDF document.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<remarks><p>Has effect only when a document contains JPEG images.</p>
    ///  <p>Use this property to get or set the quality of the images inside a document when saving in PDF format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100 means best quality but minimum compression.</p>
    ///  <p>The default value is <b>95</b>
    ///  .</p>
    ///</remarks>
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Represents the pictures compression level
    ///</summary>
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    ///<summary>
    ///  A boolean flag indicates if the cropped parts remain as part of the document. If true the cropped
    ///  parts will removed, if false they will be serialized in the document (which can possible lead to a
    ///  larger file)
    ///</summary>
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    ///<summary>
    ///  True to exclude width and height attributes from svg container - that will make layout responsive. False - otherwise.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SvgResponsiveLayout: Boolean read get_SvgResponsiveLayout write set_SvgResponsiveLayout;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNHtmlOptions = class(TDNGenericImport<DNHtmlOptionsClass, DNHtmlOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNPdfOptionsClass = interface(DNSaveOptionsClass)
  ['{64DEED1F-8EE4-5BCD-9D3E-3C333EF60AC6}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPdfOptions;

  end;

  ///<summary>
  ///  Provides options that control how a presentation is saved in Pdf format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PdfOptions')]
  DNPdfOptions = interface(DNSaveOptions)
  ['{9BA5CA66-8A94-4DCD-AE43-F9D3085F02FC}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_TextCompression: DNPdfTextCompression;
    procedure set_TextCompression(value: DNPdfTextCompression);
    function get_BestImagesCompressionRatio: Boolean;
    procedure set_BestImagesCompressionRatio(value: Boolean);
    function get_EmbedTrueTypeFontsForASCII: Boolean;
    procedure set_EmbedTrueTypeFontsForASCII(value: Boolean);
    function get_AdditionalCommonFontFamilies: TArray<string>;
    procedure set_AdditionalCommonFontFamilies(value: TArray<string>);
    function get_EmbedFullFonts: Boolean;
    procedure set_EmbedFullFonts(value: Boolean);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_AccessPermissions: DNPdfAccessPermissions;
    procedure set_AccessPermissions(value: DNPdfAccessPermissions);
    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_SufficientResolution: Single;
    procedure set_SufficientResolution(value: Single);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_ImageTransparentColor: DDN.Aspose.Common.DNColor;
    procedure set_ImageTransparentColor(value: DDN.Aspose.Common.DNColor);
    function get_ApplyImageTransparent: Boolean;
    procedure set_ApplyImageTransparent(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Specifies compression type to be used for all textual content in the document.
    ///  Read/write <see cref="T:Aspose.Slides.Export.PdfTextCompression" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <see cref="F:Aspose.Slides.Export.PdfTextCompression.Flate" />
    ///  .
    ///</remarks>
    property TextCompression: DNPdfTextCompression read get_TextCompression write set_TextCompression;
    ///<summary>
    ///  Indicates if the most effective compression (instead of the default one) for each image must be selected
    ///  automatically. If set to <see cref="T:System.Boolean" />
    ///  .true, for every image in presentation the most appropriate compression
    ///  algorithm will be chosen, what will lead to the smaller size of the resulting PDF document.
    ///<remarks>Best image compression ratio selection is computationally expensive and takes
    ///  an additional amount of RAM, and this option is <see cref="T:System.Boolean" />
    ///  .false by default.</remarks>
    ///</summary>
    ///<remarks>
    ///  Default is <see cref="T:System.Boolean" />
    ///  .false.
    ///</remarks>
    property BestImagesCompressionRatio: Boolean read get_BestImagesCompressionRatio write set_BestImagesCompressionRatio;
    ///<summary>
    ///  Determines if Aspose.Slides will embed common fonts for ASCII (33..127 code range) text.
    ///  Fonts for character codes greater than 127 are always embedded.
    ///  Common fonts list includes PDF's base 14 fonts and additional user specified fonts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>true</b>
    ///  .
    ///</remarks>
    property EmbedTrueTypeFontsForASCII: Boolean read get_EmbedTrueTypeFontsForASCII write set_EmbedTrueTypeFontsForASCII;
    ///<summary>
    ///  Returns or sets an array of user-defined names of font families which Aspose.Slides should consider common.
    ///  Read/write <see cref="T:System.String" />
    ///  [].
    ///</summary>
    property AdditionalCommonFontFamilies: TArray<string> read get_AdditionalCommonFontFamilies write set_AdditionalCommonFontFamilies;
    ///<summary>
    ///  Determines if all characters of font should be embedded or only used subset.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>false</b>
    ///  .
    ///</remarks>
    property EmbedFullFonts: Boolean read get_EmbedFullFonts write set_EmbedFullFonts;
    ///<summary>
    ///  Returns or sets a value determining the quality of the JPEG images inside PDF document.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<remarks><p>Has effect only when a document contains JPEG images.</p>
    ///  <p>Use this property to get or set the quality of the images inside a document when saving in PDF format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100 means best quality but minimum compression.</p>
    ///  <p>The default value is <b>100</b>
    ///  .</p>
    ///</remarks>
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Desired conformance level for generated PDF document.
    ///  Read/write <see cref="T:Aspose.Slides.Export.PdfCompliance" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <see cref="F:Aspose.Slides.Export.PdfCompliance.Pdf15" />
    ///  .
    ///</remarks>
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    ///<summary>
    ///  Setting user password to protect the PDF document.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Contains a set of flags specifying which access permissions should be granted when the document is opened
    ///  with user access. See <see cref="T:Aspose.Slides.Export.PdfAccessPermissions" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  var pdfOptions = new PdfOptions();
    ///  pdfOptions.Password = "my_password";
    ///  pdfOptions.AccessPermissions = PdfAccessPermissions.PrintDocument | PdfAccessPermissions.HighQualityPrint;
    ///  using (var presentation = new Presentation())
    ///  {
    ///  presentation.Save(pdfFilePath, SaveFormat.Pdf, pdfOptions);
    ///  }
    ///</code></example>
    property AccessPermissions: DNPdfAccessPermissions read get_AccessPermissions write set_AccessPermissions;
    ///<summary>
    ///  True to convert all metafiles used in a presentation to the PNG images.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>true</b>
    ///  .
    ///  Pdf document can contain vector graphics and raster images.
    ///  If SaveMetafilesAsPng is set to true then source Metafile
    ///  image is converted to Png format and saved to Pdf as a raster
    ///  image. If SaveMetafilesAsPng is set to false then source Metafile
    ///  is converted to Pdf vector graphics. Each approach has advantages
    ///  and disadvantages. For example, if Metafile is converted to PNG,
    ///  then some quality loss is possible during resulting
    ///  document scaling. If Metafile is converted to Pdf vector graphics,
    ///  then performance issues in Pdf viewing tool are possible.
    ///</remarks>
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    ///<summary>
    ///  Returns or sets a value determining resolution of images inside PDF document.
    ///<remarks><p>Property affects on file size, time of export and image quality.</p>
    ///  <p>The default value is <b>96</b>
    ///  .</p>
    ///</remarks>
    ///<value>Effect of this parameter depends on few factors.
    ///  Algorithm tries to get best output image size according to the property value, source image size and image frame size.
    ///  Using of similar property values may give the same result. Recommended to use step 16 or 32 to get visible effect.</value>
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SufficientResolution: Single read get_SufficientResolution write set_SufficientResolution;
    ///<summary>
    ///  True to draw black frame around each slide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>false</b>
    ///  .
    ///</remarks>
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    ///<summary>
    ///  Gets or sets the image transparent color.
    ///</summary>
    ///<value>
    ///  The color of the image transparent.
    ///</value>
    property ImageTransparentColor: DDN.Aspose.Common.DNColor read get_ImageTransparentColor write set_ImageTransparentColor;
    ///<summary>
    ///  Applies the specified transparent color to an image if <c>true</c>.
    ///</summary>
    property ApplyImageTransparent: Boolean read get_ApplyImageTransparent write set_ApplyImageTransparent;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNPdfOptions = class(TDNGenericImport<DNPdfOptionsClass, DNPdfOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNPptOptionsClass = interface(DNSaveOptionsClass)
  ['{01B78F49-E9F2-5670-982F-2C3D25609B47}']
  { constructors } 

    {class} function init: DNPptOptions;

  end;

  ///<summary>
  ///  Provides options that control how a presentation is saved in PPT format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PptOptions')]
  DNPptOptions = interface(DNSaveOptions)
  ['{1E619FD4-CE04-4BF1-BDBE-249AEB11C02E}']
  { getters & setters } 

    function get_RootDirectoryClsid: DDN.mscorlib.DNGuid;
    procedure set_RootDirectoryClsid(value: DDN.mscorlib.DNGuid);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the object class GUID (CLSID) that is stored in the root directory entry. Can be used for COM
    ///  activation of the document's application.
    ///  The default value is '64818D11-4F9B-11CF-86EA-00AA00B929E8' that corresponds to 'Microsoft Powerpoint.Slide.8'.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  PptOptions pptOptions = new PptOptions();
    ///  /// set CLSID to 'Microsoft Powerpoint.Show.8'
    ///  pptOptions.RootDirectoryClsid = new Guid("64818D10-4F9B-11CF-86EA-00AA00B929E8");
    ///  pres.Save("pres.ppt", SaveFormat.Ppt, pptOptions);
    ///  }
    ///</code></example>
    property RootDirectoryClsid: DDN.mscorlib.DNGuid read get_RootDirectoryClsid write set_RootDirectoryClsid;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNPptOptions = class(TDNGenericImport<DNPptOptionsClass, DNPptOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNPptxOptionsClass = interface(DNSaveOptionsClass)
  ['{5F1908DC-15FA-5282-A2FE-AE8B4F94E39F}']
  { constructors } 

    ///<summary>
    ///  Creates new instance of PptxOptions
    ///</summary>
    {class} function init: DNPptxOptions;

  end;

  ///<summary>
  ///  Represents options for saving OpenXml presentations (PPTX, PPSX, POTX, PPTM, PPSM, POTM).
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.PptxOptions')]
  DNPptxOptions = interface(DNSaveOptions)
  ['{3F87C558-7973-421D-80D3-B1B3F9AB403F}']
  { getters & setters } 

    function get_Conformance: DNConformance;
    procedure set_Conformance(value: DNConformance);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the conformance class to which the Presentation document conforms.
    ///  Default value is <see cref="F:Aspose.Slides.Export.Conformance.Ecma376_2006" />
    ///</summary>
    property Conformance: DNConformance read get_Conformance write set_Conformance;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNPptxOptions = class(TDNGenericImport<DNPptxOptionsClass, DNPptxOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNRenderingOptionsClass = interface(DNSaveOptionsClass)
  ['{3A7F727F-78A6-5C99-988E-0BD0619130E3}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNRenderingOptions;

  end;

  ///<summary>
  ///  Provides options that control how a presentation/slide is rendered.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  using (Presentation pres = new Presentation("pres.pptx"))
  ///  {
  ///  IRenderingOptions renderingOpts = new RenderingOptions();
  ///  renderingOpts.NotesCommentsLayouting.NotesPosition = NotesPositions.BottomTruncated;
  ///  pres.Slides[0].GetThumbnail(renderingOpts).Save("pres-Original.png", ImageFormat.Png);
  ///  renderingOpts.DefaultRegularFont = "Arial Black";
  ///  pres.Slides[0].GetThumbnail(renderingOpts).Save("pres-ArialBlackDefault.png", ImageFormat.Png);
  ///  renderingOpts.DefaultRegularFont = "Arial Narrow";
  ///  pres.Slides[0].GetThumbnail(renderingOpts).Save("pres-ArialNarrowDefault.png", ImageFormat.Png);
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.Export.RenderingOptions')]
  DNRenderingOptions = interface(DNSaveOptions)
  ['{12A23569-2657-45BC-8E99-9150A1546D27}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNRenderingOptions = class(TDNGenericImport<DNRenderingOptionsClass, DNRenderingOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSVGOptionsClass = interface(DNSaveOptionsClass)
  ['{B60998CD-0CCB-5830-AFB7-9E58D20161BB}']
  { static getter & setter } 

    {class} function get_Default: DNSVGOptions;
    {class} function get_Simple: DNSVGOptions;
    {class} function get_WYSIWYG: DNSVGOptions;

  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the SVGOptions class.
    ///</summary>
    {class} function init: DNSVGOptions; overload;
    ///<summary>
    ///  Initializes a new instance of the SVGOptions class specifying the link embedding controller object.
    ///</summary>
    ///  <param name="linkEmbedController">The link embedding controller reference.</param>
    ///<remarks>Link embedding controller is a delegate object that is responsible for making decisions if resources (such as images) need to be
    ///  embedded or referenced as external resources.</remarks>
    ///<seealso cref="T:Aspose.Slides.Export.ILinkEmbedController" />
    {class} function init(linkEmbedController: DNILinkEmbedController): DNSVGOptions; overload;

  { static propertys } 

    ///<summary>
    ///  Returns default settings.
    ///  Read-only <see cref="T:Aspose.Slides.Export.SVGOptions" />
    ///  .
    ///</summary>
    {class} property &Default: DNSVGOptions read get_Default;
    ///<summary>
    ///  Returns settings for simpliest and smallest SVG file generation.
    ///  Read-only <see cref="T:Aspose.Slides.Export.SVGOptions" />
    ///  .
    ///</summary>
    {class} property Simple: DNSVGOptions read get_Simple;
    ///<summary>
    ///  Returns settings for most accurate SVG file generation.
    ///  Read-only <see cref="T:Aspose.Slides.Export.SVGOptions" />
    ///  .
    ///</summary>
    {class} property WYSIWYG: DNSVGOptions read get_WYSIWYG;
  end;

  ///<summary>
  ///  Represents an SVG options.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SVGOptions')]
  DNSVGOptions = interface(DNSaveOptions)
  ['{3C6C5045-D90D-42C6-9271-9928D9DCFBAB}']
  { getters & setters } 

    function get_VectorizeText: Boolean;
    procedure set_VectorizeText(value: Boolean);
    function get_MetafileRasterizationDpi: Int32;
    procedure set_MetafileRasterizationDpi(value: Int32);
    function get_Disable3DText: Boolean;
    procedure set_Disable3DText(value: Boolean);
    function get_DisableGradientSplit: Boolean;
    procedure set_DisableGradientSplit(value: Boolean);
    function get_DisableLineEndCropping: Boolean;
    procedure set_DisableLineEndCropping(value: Boolean);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ShapeFormattingController: DNISvgShapeFormattingController;
    procedure set_ShapeFormattingController(value: DNISvgShapeFormattingController);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_ExternalFontsHandling: DNSvgExternalFontsHandling;
    procedure set_ExternalFontsHandling(value: DNSvgExternalFontsHandling);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether the text on a slide will be saved as graphics.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property VectorizeText: Boolean read get_VectorizeText write set_VectorizeText;
    ///<summary>
    ///  Returns or sets the lower resolution limit for metafile rasterization.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property MetafileRasterizationDpi: Int32 read get_MetafileRasterizationDpi write set_MetafileRasterizationDpi;
    ///<summary>
    ///  Determines whether the 3D text is disabled in SVG.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Disable3DText: Boolean read get_Disable3DText write set_Disable3DText;
    ///<summary>
    ///  Disables splitting FromCornerX and FromCenter gradients.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisableGradientSplit: Boolean read get_DisableGradientSplit write set_DisableGradientSplit;
    ///<summary>
    ///  SVG 1.1 lacks ability to define insets for markers.
    ///  Aspose.Slides SVG writing engine has workaround for that problem:
    ///  it crops end of line with arrow, so, line doesn't overlap markers.
    ///  This option switches off such behavior.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisableLineEndCropping: Boolean read get_DisableLineEndCropping write set_DisableLineEndCropping;
    ///<summary>
    ///  Determines JPEG encoding quality.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Returns and sets a callback interface which allows user to control shape conversion.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ISvgShapeFormattingController" />
    ///  .
    ///</summary>
    property ShapeFormattingController: DNISvgShapeFormattingController read get_ShapeFormattingController write set_ShapeFormattingController;
    ///<summary>
    ///  Represents the pictures compression level
    ///</summary>
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    ///<summary>
    ///  A boolean flag indicates if the cropped parts remain as part of the document. If true the cropped
    ///  parts will removed, if false they will be serialized in the document (which can possible lead to a
    ///  larger file)
    ///</summary>
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    ///<summary>
    ///  Determines a way of handling externally loaded fonts.
    ///  Read/write <see cref="T:Aspose.Slides.Export.SvgExternalFontsHandling" />
    ///  .
    ///</summary>
    property ExternalFontsHandling: DNSvgExternalFontsHandling read get_ExternalFontsHandling write set_ExternalFontsHandling;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNSVGOptions = class(TDNGenericImport<DNSVGOptionsClass, DNSVGOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSwfOptionsClass = interface(DNSaveOptionsClass)
  ['{DB2435F6-E003-54C0-893E-13C0ED89BC48}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNSwfOptions;

  end;

  ///<summary>
  ///  Provides options that control how a presentation is saved in Swf format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SwfOptions')]
  DNSwfOptions = interface(DNSaveOptions)
  ['{9E1BA884-6771-4DE7-9D8C-F1B96E1B3C90}']
  { getters & setters } 

    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_Compressed: Boolean;
    procedure set_Compressed(value: Boolean);
    function get_ViewerIncluded: Boolean;
    procedure set_ViewerIncluded(value: Boolean);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_ShowFullScreen: Boolean;
    procedure set_ShowFullScreen(value: Boolean);
    function get_ShowPageStepper: Boolean;
    procedure set_ShowPageStepper(value: Boolean);
    function get_ShowSearch: Boolean;
    procedure set_ShowSearch(value: Boolean);
    function get_ShowTopPane: Boolean;
    procedure set_ShowTopPane(value: Boolean);
    function get_ShowBottomPane: Boolean;
    procedure set_ShowBottomPane(value: Boolean);
    function get_ShowLeftPane: Boolean;
    procedure set_ShowLeftPane(value: Boolean);
    function get_StartOpenLeftPane: Boolean;
    procedure set_StartOpenLeftPane(value: Boolean);
    function get_EnableContextMenu: Boolean;
    procedure set_EnableContextMenu(value: Boolean);
    function get_LogoImageBytes: TArray<Byte>;
    procedure set_LogoImageBytes(value: TArray<Byte>);
    function get_LogoLink: string;
    procedure set_LogoLink(value: string);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Specifies whether the generated SWF document should be compressed or not.
    ///  Default is <c>true</c>.
    ///</summary>
    property Compressed: Boolean read get_Compressed write set_Compressed;
    ///<summary>
    ///  Specifies whether the generated SWF document should include the integrated document viewer or not.
    ///  Default is <c>true</c>.
    ///</summary>
    property ViewerIncluded: Boolean read get_ViewerIncluded write set_ViewerIncluded;
    ///<summary>
    ///  Specifies whether border around pages should be shown. Default is true.
    ///</summary>
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    ///<summary>
    ///  Show/hide fullscreen button. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowFullScreen: Boolean read get_ShowFullScreen write set_ShowFullScreen;
    ///<summary>
    ///  Show/hide page stepper. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowPageStepper: Boolean read get_ShowPageStepper write set_ShowPageStepper;
    ///<summary>
    ///  Show/hide search section. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowSearch: Boolean read get_ShowSearch write set_ShowSearch;
    ///<summary>
    ///  Show/hide whole top pane. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowTopPane: Boolean read get_ShowTopPane write set_ShowTopPane;
    ///<summary>
    ///  Show/hide bottom pane. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowBottomPane: Boolean read get_ShowBottomPane write set_ShowBottomPane;
    ///<summary>
    ///  Show/hide left pane. Can be overridden in flashvars. Default is true.
    ///</summary>
    property ShowLeftPane: Boolean read get_ShowLeftPane write set_ShowLeftPane;
    ///<summary>
    ///  Start with opened left pane. Can be overridden in flashvars. Default is false.
    ///</summary>
    property StartOpenLeftPane: Boolean read get_StartOpenLeftPane write set_StartOpenLeftPane;
    ///<summary>
    ///  Enable/disable context menu. Default is true.
    ///</summary>
    property EnableContextMenu: Boolean read get_EnableContextMenu write set_EnableContextMenu;
    ///<summary>
    ///  Image that will be displayed as logo in the top right corner of the viewer.
    ///  Image should be 32x64 pixels PNG image, otherwise logo can be displayed improperly.
    ///</summary>
    property LogoImageBytes: TArray<Byte> read get_LogoImageBytes write set_LogoImageBytes;
    ///<summary>
    ///  Gets or sets the full hyperlink address for a logo.
    ///  Has an effect only if a <see cref="P:Aspose.Slides.Export.SwfOptions.LogoImageBytes" />
    ///  is specified.
    ///</summary>
    property LogoLink: string read get_LogoLink write set_LogoLink;
    ///<summary>
    ///  Specifies the quality of JPEG images.
    ///  Default is 95.
    ///</summary>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNSwfOptions = class(TDNGenericImport<DNSwfOptionsClass, DNSwfOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNTiffOptionsClass = interface(DNSaveOptionsClass)
  ['{FD8399A9-6981-55EA-9759-C831E1F0F1E2}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNTiffOptions;

  end;

  ///<summary>
  ///  Provides options that control how a presentation is saved in TIFF format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.TiffOptions')]
  DNTiffOptions = interface(DNSaveOptions)
  ['{2162FE38-D7A4-46CE-978C-ECEDB7AF54C0}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_ImageSize: DDN.Aspose.Common.DNSize;
    procedure set_ImageSize(value: DDN.Aspose.Common.DNSize);
    function get_DpiX: UInt32;
    procedure set_DpiX(value: UInt32);
    function get_DpiY: UInt32;
    procedure set_DpiY(value: UInt32);
    function get_CompressionType: DNTiffCompressionTypes;
    procedure set_CompressionType(value: DNTiffCompressionTypes);
    function get_PixelFormat: DNImagePixelFormat;
    procedure set_PixelFormat(value: DNImagePixelFormat);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Provides options that control how notes and comments is placed in exported document.
    ///</summary>
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  Specifies size of a generated TIFF image.
    ///  Default value is 0x0, what means that generated image sizes will be calculated based on presentation slide size value.
    ///  Read/write <see cref="T:System.Drawing.Size" />
    ///  .
    ///</summary>
    property ImageSize: DDN.Aspose.Common.DNSize read get_ImageSize write set_ImageSize;
    ///<summary>
    ///  Specifies the horizontal resolution in dots per inch.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property DpiX: UInt32 read get_DpiX write set_DpiX;
    ///<summary>
    ///  Specifies the vertical resolution in dots per inch.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property DpiY: UInt32 read get_DpiY write set_DpiY;
    ///<summary>
    ///  Specifies the compression type.
    ///  Read/write <see cref="T:Aspose.Slides.Export.TiffCompressionTypes" />
    ///  .
    ///</summary>
    property CompressionType: DNTiffCompressionTypes read get_CompressionType write set_CompressionType;
    ///<summary>
    ///  Specifies the pixel format for the generated images.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ImagePixelFormat" />
    ///  .
    ///</summary>
    property PixelFormat: DNImagePixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNTiffOptions = class(TDNGenericImport<DNTiffOptionsClass, DNTiffOptions>) end;

  //-------------namespace: Aspose.Slides.Export.Xaml----------------
  DNXamlOptionsClass = interface(DNSaveOptionsClass)
  ['{77480893-C930-53F3-8A96-03FF677CD7BF}']
  { constructors } 

    ///<summary>
    ///  Creates the XamlOptions instance.
    ///</summary>
    {class} function init: DNXamlOptions;

  end;

  ///<summary>
  ///  Options that control how a XAML document is saved.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  using (Presentation pres = new Presentation("pres.pptx"))
  ///  {
  ///  pres.Save(new XamlOptions { ExportHiddenSlides = true });
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.Export.Xaml.XamlOptions')]
  DNXamlOptions = interface(DNSaveOptions)
  ['{9644A63E-6AD4-4D31-8616-CE36FA4E9B66}']
  { getters & setters } 

    function get_ExportHiddenSlides: Boolean;
    procedure set_ExportHiddenSlides(value: Boolean);
    function get_OutputSaver: DNIXamlOutputSaver;
    procedure set_OutputSaver(value: DNIXamlOutputSaver);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether hidden slides will be exported.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  pres.Save(new XamlOptions { ExportHiddenSlides = true });
    ///  }
    ///</code></example>
    property ExportHiddenSlides: Boolean read get_ExportHiddenSlides write set_ExportHiddenSlides;
    ///<summary>
    ///  Represents an implementation of IOutputSaver interface.
    ///</summary>
    property OutputSaver: DNIXamlOutputSaver read get_OutputSaver write set_OutputSaver;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNXamlOptions = class(TDNGenericImport<DNXamlOptionsClass, DNXamlOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNXpsOptionsClass = interface(DNSaveOptionsClass)
  ['{7FE44D54-76B7-5831-A38E-280AFF5E009A}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNXpsOptions;

  end;

  ///<summary>
  ///  Provides options that control how a presentation is saved in XPS format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.XpsOptions')]
  DNXpsOptions = interface(DNSaveOptions)
  ['{D0C30791-2E61-4B9E-ABFF-D29F298110AC}']
  { getters & setters } 

    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the generated document should include hidden slides or not.
    ///  Default is <c>false</c>.
    ///</summary>
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    ///<summary>
    ///  True to convert all metafiles used in a presentation to the PNG images.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>true</b>
    ///  .
    ///</remarks>
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    ///<summary>
    ///  True to draw black frame around each slide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Default is <b>false</b>
    ///  .
    ///</remarks>
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    ///<summary>
    ///  Returns of sets an object which receives warnings and decides whether loading process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents a callback object for saving progress updates in percentage.
    ///  See <see cref="T:Aspose.Slides.IProgressCallback" />
    ///  .
    ///</summary>
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    ///<summary>
    ///  Returns or sets font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  HtmlOptions htmlOpts = new HtmlOptions();
    ///  htmlOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.html", SaveFormat.Html, htmlOpts);
    ///  htmlOpts.DefaultRegularFont = "Lucida Console";
    ///  pres.Save(@"Somepresentation-out-LucidaConsole.html", SaveFormat.Html, htmlOpts);
    ///  PdfOptions pdfOpts = new PdfOptions();
    ///  pdfOpts.DefaultRegularFont = "Arial Black";
    ///  pres.Save(@"SomePresentation-out-ArialBlack.pdf", SaveFormat.Pdf, pdfOpts);
    ///  }
    ///</code></example>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNXpsOptions = class(TDNGenericImport<DNXpsOptionsClass, DNXpsOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSaveOptionsFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ED26515C-6970-52A0-A301-58955147A22C}']
  { constructors } 

    {class} function init: DNSaveOptionsFactory;

  end;

  ///<summary>
  ///  Allows to create save options' instances
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Export.SaveOptionsFactory')]
  DNSaveOptionsFactory = interface(DDN.mscorlib.DNObject)
  ['{183C9CD9-EF9A-4D06-806B-EE4EF6239DC5}']
  { methods } 

    ///<summary>
    ///  Creates PPTX save options.
    ///</summary>
    ///<returns>Save options.</returns>
    function CreatePptxOptions: DNIPptxOptions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSaveOptionsFactory = class(TDNGenericImport<DNSaveOptionsFactoryClass, DNSaveOptionsFactory>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSlideImageFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82E57C2C-CCAE-56C6-AD6D-A21B058B949A}']
  { constructors } 

    {class} function init: DNSlideImageFormat;

  { static methods } 

    ///<summary>
    ///  Slides should converted to a SVG format.
    ///</summary>
    ///  <param name="options">Options for SVG export.</param>
    ///<returns></returns>
    {class} function Svg(options: DNSVGOptions): DNSlideImageFormat;
    ///<summary>
    ///  Slides should be converted to a raster image.
    ///</summary>
    ///  <param name="scale">Image scale factor.</param>
    ///  <param name="imgFormat">Image format.</param>
    ///<returns></returns>
    {class} function Bitmap(scale: Single; imgFormat: DDN.Aspose.Common.DNImageFormat): DNSlideImageFormat;

  end;

  ///<summary>
  ///  Determines format in which slide image will be saved for presentation to HTML export.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SlideImageFormat')]
  DNSlideImageFormat = interface(DDN.mscorlib.DNObject)
  ['{84DE2E77-6510-4A9E-A9EE-F7B7DCEBF1FF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSlideImageFormat = class(TDNGenericImport<DNSlideImageFormatClass, DNSlideImageFormat>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSvgShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81882B5C-70FD-5F8D-B79C-40B4FABE6D39}']
  end;

  ///<summary>
  ///  Represents options for SVG shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SvgShape')]
  DNSvgShape = interface(DDN.mscorlib.DNObject)
  ['{60E3D62D-F72D-486B-9342-BB04384F459A}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { methods } 

    ///<summary>
    ///  Sets event handler for the shape
    ///</summary>
    ///  <param name="eventType">Type of event.</param>
    ///  <param name="handler">Javascript function to handle event. Null value removes handler.</param>
    procedure SetEventHandler(eventType: DNSvgEvent; handler: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets shape id
    ///</summary>
    property Id: string read get_Id write set_Id;
  end;

  TDNSvgShape = class(TDNGenericImport<DNSvgShapeClass, DNSvgShape>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSvgTSpanClass = interface(DDN.mscorlib.DNObjectClass)
  ['{253A0D1C-DEF9-567D-9D0C-4054F4738F64}']
  end;

  ///<summary>
  ///  Represents options for SVG text portion ("tspan").
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.SvgTSpan')]
  DNSvgTSpan = interface(DDN.mscorlib.DNObject)
  ['{94D7739F-523C-425B-896B-B82FE1D95B25}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets "tspan" element id
    ///</summary>
    property Id: string read get_Id write set_Id;
  end;

  TDNSvgTSpan = class(TDNGenericImport<DNSvgTSpanClass, DNSvgTSpan>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNTextToHtmlConversionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0309330-C048-5A19-BE2E-31859EBA0DE6}']
  { constructors } 

    {class} function init: DNTextToHtmlConversionOptions;

  end;

  ///<summary>
  ///  Options for extracting HTML from the Pptx text.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.TextToHtmlConversionOptions')]
  DNTextToHtmlConversionOptions = interface(DDN.mscorlib.DNObject)
  ['{9B66DA7E-B5D1-44A9-B508-B7988E85BE1E}']
  { getters & setters } 

    function get_AddClipboardFragmentHeader: Boolean;
    procedure set_AddClipboardFragmentHeader(value: Boolean);
    function get_TextInheritanceLimit: DNTextInheritanceLimit;
    procedure set_TextInheritanceLimit(value: DNTextInheritanceLimit);
    function get_LinkEmbedController: DNILinkEmbedController;
    procedure set_LinkEmbedController(value: DNILinkEmbedController);
    function get_EncodingName: string;
    procedure set_EncodingName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets value, indicating if Clipboard headers should be added.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AddClipboardFragmentHeader: Boolean read get_AddClipboardFragmentHeader write set_AddClipboardFragmentHeader;
    ///<summary>
    ///  Returns or sets inhering depth for text properties.
    ///  Read/write <see cref="T:Aspose.Slides.Export.TextInheritanceLimit" />
    ///  .
    ///</summary>
    property TextInheritanceLimit: DNTextInheritanceLimit read get_TextInheritanceLimit write set_TextInheritanceLimit;
    ///<summary>
    ///  Returns or sets a callback object which controlls how external object will be stored.
    ///  Read/write <see cref="T:Aspose.Slides.Export.ILinkEmbedController" />
    ///  .
    ///</summary>
    property LinkEmbedController: DNILinkEmbedController read get_LinkEmbedController write set_LinkEmbedController;
    ///<summary>
    ///  Returns or sets html encoding name.
    ///  This value will be saved to the generated HTML file, but its up to caller to ensure that file will be saved in this encoding.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property EncodingName: string read get_EncodingName write set_EncodingName;
  end;

  TDNTextToHtmlConversionOptions = class(TDNGenericImport<DNTextToHtmlConversionOptionsClass, DNTextToHtmlConversionOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNVideoPlayerHtmlControllerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD91DE7D-2EA2-55BA-B80E-3B84A4375FC3}']
  { constructors } 

    ///<summary>
    ///  Creates a new instance of controller
    ///</summary>
    ///  <param name="path">The path where video and audio files will be generated</param>
    ///  <param name="fileName">The name of the HTML file</param>
    ///  <param name="baseUri">The base URI which will be used for links generating</param>
    {class} function init(path: string; fileName: string; baseUri: string): DNVideoPlayerHtmlController;

  end;

  ///<summary>
  ///  This class allows export of video and audio files into a HTML
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.VideoPlayerHtmlController')]
  DNVideoPlayerHtmlController = interface(DDN.mscorlib.DNObject)
  ['{D25A628D-B773-4188-95A2-B178DF9B4F41}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVideoPlayerHtmlController = class(TDNGenericImport<DNVideoPlayerHtmlControllerClass, DNVideoPlayerHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNVideoPlayerHtmlControllerFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3A2145A-306D-5E37-B187-6B2DAA0F234C}']
  { constructors } 

    {class} function init: DNVideoPlayerHtmlControllerFactory;

  end;

  ///<summary>
  ///  Allows to create VideoPlayerHtmlController.
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Export.VideoPlayerHtmlControllerFactory')]
  DNVideoPlayerHtmlControllerFactory = interface(DDN.mscorlib.DNObject)
  ['{426D4900-2649-4811-95B9-7C98E48BC21D}']
  { methods } 

    ///<summary>
    ///  Creates new <c>VideoPlayerHtmlController</c>.
    ///</summary>
    ///  <param name="path">Path.</param>
    ///  <param name="fileName">File name.</param>
    ///  <param name="baseUri">Base URI.</param>
    ///<returns></returns>
    function CreateVideoPlayerHtmlController(path: string; fileName: string; baseUri: string): DNIVideoPlayerHtmlController;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVideoPlayerHtmlControllerFactory = class(TDNGenericImport<DNVideoPlayerHtmlControllerFactoryClass, DNVideoPlayerHtmlControllerFactory>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNInputClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA562DA9-A921-5486-A4BF-15F83084A45C}']
  end;

  ///<summary>
  ///  Represents a collection of input elements (templates) for <see cref="!:IWebDocument" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.Input')]
  DNInput = interface(DDN.mscorlib.DNObject)
  ['{BA9282E8-7C63-41EB-8B01-431FD699ADA6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInput = class(TDNGenericImport<DNInputClass, DNInput>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  ///<summary>
  ///  Represents an output file.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.IOutputFile')]
  DNIOutputFile = interface(DDN.mscorlib.DNObject)
  ['{D573CBDF-8994-4309-A2A6-30542504DE33}']
  { methods } 

    ///<summary>
    ///  Writes the file content to the stream.
    ///</summary>
    ///  <param name="stream">Destination stream.</param>
    procedure Write(stream: DDN.mscorlib.DNStream);

  end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  ///<summary>
  ///  Represents an output saving service.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.IOutputSaver')]
  DNIOutputSaver = interface(DDN.mscorlib.DNObject)
  ['{0DE84C1E-7622-4C44-AC0E-B698DDB9BD1A}']
  { methods } 

    ///<summary>
    ///  Saves the output file to the given path.
    ///</summary>
    ///  <param name="path">Path to save the file to.</param>
    ///  <param name="outputFile">Output file.</param>
    ///<example>Saving into the <see cref="T:System.IO.FileStream" />
    ///  implementation example:
    ///<code>
    ///  [C#]
    ///  public void Save(string path, IOutputFile outputFile)
    ///  {
    ///  using (FileStream stream = new FileStream(path, FileMode.Create))
    ///  {
    ///  outputFile.Write(stream);
    ///  }
    ///  }
    ///</code></example>
    procedure Save(path: string; outputFile: DNIOutputFile);

  end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  ///<summary>
  ///  Represents a template engine that transforms template and data pair into resulting output (usually HTML).
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.ITemplateEngine')]
  DNITemplateEngine = interface(DDN.mscorlib.DNObject)
  ['{6BC53EE0-F4EC-4AEE-913E-F0FCFD59C252}']
  { methods } 

    ///<summary>
    ///  Adds the template to the template collection.
    ///</summary>
    ///  <param name="key">Key for the template in the template collection.</param>
    ///  <param name="template">Template content.</param>
    ///  <param name="modelType">Type of a model object for the template.</param>
    procedure AddTemplate(key: string; template: string; modelType: DDN.mscorlib.DNType);
    ///<summary>
    ///  Transforms the template with the given key and model object to output.
    ///</summary>
    ///  <param name="key">Key for the template in the template collection.</param>
    ///  <param name="model">Model object with data for transformation.</param>
    ///<returns>Resulting output as a <see cref="T:System.String" />
    ///  .</returns>
    function Compile(key: string; model: DDN.mscorlib.DNObject): string;

  end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNOutputClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E16676D2-29E4-5891-8CBA-590EF1D27F71}']
  end;

  ///<summary>
  ///  Represents a collection of output elements for <see cref="!:IWebDocument" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.Output')]
  DNOutput = interface(DDN.mscorlib.DNObject)
  ['{5C4C31FF-9EDD-4DD7-8F40-3DE3B91266C6}']
  { methods } 

    ///<summary>
    ///  Adds an output element for the image.
    ///</summary>
    ///  <param name="path">Output path.</param>
    ///  <param name="image">Image to output.</param>
    ///<returns><see cref="T:Aspose.Slides.Export.Web.IOutputFile" />
    ///  object for the image.</returns>
    function Add(path: string; image: DNIPPImage): DNIOutputFile; overload;
    ///<summary>
    ///  Adds an output element for the image.
    ///</summary>
    ///  <param name="path">Output path.</param>
    ///  <param name="image">Image to output.</param>
    ///<returns><see cref="T:Aspose.Slides.Export.Web.IOutputFile" />
    ///  object for the image.</returns>
    function Add(path: string; image: DDN.Aspose.Common.DNImage): DNIOutputFile; overload;
    ///<summary>
    ///  Adds an output element for the video.
    ///</summary>
    ///  <param name="path">Output path.</param>
    ///  <param name="video">Video to output.</param>
    ///<returns><see cref="T:Aspose.Slides.Export.Web.IOutputFile" />
    ///  object for the video.</returns>
    function Add(path: string; video: DNIVideo): DNIOutputFile; overload;
    ///<summary>
    ///  Adds an output element for the font.
    ///</summary>
    ///  <param name="path">Output path.</param>
    ///  <param name="fontData">Font to output.</param>
    ///  <param name="fontStyle">Font style.</param>
    ///<returns><see cref="T:Aspose.Slides.Export.Web.IOutputFile" />
    ///  object for the font.</returns>
    function Add(path: string; fontData: DNIFontData; fontStyle: DDN.Aspose.Common.DNFontStyle): DNIOutputFile; overload;
    ///<summary>
    ///  Adds an output element for the text content.
    ///</summary>
    ///  <param name="path">Output path.</param>
    ///  <param name="textContent">Content to output.</param>
    ///<returns><see cref="T:Aspose.Slides.Export.Web.IOutputFile" />
    ///  object for the text content.</returns>
    function Add(path: string; textContent: string): DNIOutputFile; overload;
    ///<summary>
    ///  Binds resource to output file.
    ///</summary>
    ///  <param name="outputFile">Output file.</param>
    ///  <param name="obj">Resource object.</param>
    procedure BindResource(outputFile: DNIOutputFile; obj: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Returns the path for a given resource.
    ///</summary>
    ///  <param name="obj">Resource object.</param>
    ///<returns>Resource path.</returns>
    function GetResourcePath(obj: DDN.mscorlib.DNObject): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOutput = class(TDNGenericImport<DNOutputClass, DNOutput>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNOutputFileClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90041E79-FBA0-5CD4-A791-571EDAFA0353}']
  end;

  ///<summary>
  ///  Represents an output file.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.OutputFile')]
  DNOutputFile = interface(DDN.mscorlib.DNObject)
  ['{811D74F9-84E3-4F44-8434-3220AA41A77C}']
  { methods } 

    ///<summary>
    ///  Writes the file content to the stream.
    ///</summary>
    ///  <param name="stream">Destination stream.</param>
    procedure Write(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOutputFile = class(TDNGenericImport<DNOutputFileClass, DNOutputFile>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNStorageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43F6A4C8-6DD1-5312-B633-4C6A29B7DECF}']
  { constructors } 

    {class} function init: DNStorage;

  end;

  ///<summary>
  ///  Represents a temporary data storage for <see cref="T:Aspose.Slides.Export.Web.WebDocument" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.Storage')]
  DNStorage = interface(DDN.mscorlib.DNObject)
  ['{5F8566AD-656A-4197-89A0-7414FBB5ABEB}']
  { methods } 

    ///<summary>
    ///  Determines whether the storage contains an element with the specified key.
    ///</summary>
    ///  <param name="key">Key of the value.</param>
    ///<returns>True if the storage contains an element with the specified key, false otherwise.</returns>
    function ContainsKey(key: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStorage = class(TDNGenericImport<DNStorageClass, DNStorage>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNWebDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90352E2C-624A-5431-A092-4D5C656622C8}']
  { constructors } 

    ///<summary><see cref="T:Aspose.Slides.Export.Web.WebDocument" />
    ///  constructor.
    ///</summary>
    ///  <param name="options">Options set for the document.</param>
    ///<returns>A new instance of <see cref="T:Aspose.Slides.Export.Web.WebDocument" />
    ///  .</returns>
    {class} function init(options: DNWebDocumentOptions): DNWebDocument;

  end;

  ///<summary>
  ///  Represents a transition form of the presentation for saving into a web format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.WebDocument')]
  DNWebDocument = interface(DDN.mscorlib.DNObject)
  ['{1B08C301-FA4C-467E-925C-6D3FE41F0ABB}']
  { getters & setters } 

    function get_Input: DNInput;
    function get_Output: DNOutput;
    function get_Global: DNStorage;

  { methods } 

    procedure Save;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Input: DNInput read get_Input;
    ///<summary>
    ///  Returns collection of output elements of the document.
    ///  Read-only <see cref="P:Aspose.Slides.Export.Web.WebDocument.Output" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  var options = new WebDocumentOptions
    ///  {
    ///  TemplateEngine = new RazorTemplateEngine(),
    ///  OutputSaver = new FileOutputSaver(),
    ///  EmbedImages = false
    ///  };
    ///  WebDocument document = new WebDocument(options);
    ///  // add "index.html" to output files, using "index" template to generate it and pres variable as model
    ///  document.Output.Add("index.html", "index", pres);
    ///  // ... set up other options of the document and then save the document
    ///  document.Save();
    ///  }
    ///</code></example>
    property Output: DNOutput read get_Output;
    ///<summary>
    ///  Returns global storage of the document.
    ///  Read-only <see cref="T:Aspose.Slides.Export.Web.Storage" />
    ///  .
    ///</summary>
    ///<example>Using this <see cref="P:Aspose.Slides.Export.Web.WebDocument.Global" />
    ///  property (implementation of <see cref="T:Aspose.Slides.Export.Web.Storage" />
    ///  interface) a
    ///  property can be put to use it later in the template:
    ///<code>
    ///  [C#]
    ///  var options = new WebDocumentOptions
    ///  {
    ///  TemplateEngine = new RazorTemplateEngine(),
    ///  OutputSaver = new FileOutputSaver(),
    ///  EmbedImages = false
    ///  };
    ///  WebDocument document = new WebDocument(options);
    ///  // put "slideMargin" property to use from templates
    ///  document.Global.Put("slideMargin", 10);
    ///  // ... set up other options of the document and then save the document
    ///  document.Save();
    ///</code></example>
    property Global: DNStorage read get_Global;
  end;

  TDNWebDocument = class(TDNGenericImport<DNWebDocumentClass, DNWebDocument>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNWebDocumentOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A3D501B-00EA-5C2D-AFA7-A59978FCDF0F}']
  { constructors } 

    {class} function init: DNWebDocumentOptions;

  end;

  ///<summary>
  ///  Represents an options set for <see cref="T:Aspose.Slides.Export.Web.WebDocument" />
  ///  saving.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Web.WebDocumentOptions')]
  DNWebDocumentOptions = interface(DDN.mscorlib.DNObject)
  ['{2F77B23A-351E-4167-80AA-F1CE0A4CC92E}']
  { getters & setters } 

    function get_TemplateEngine: DNITemplateEngine;
    procedure set_TemplateEngine(value: DNITemplateEngine);
    function get_OutputSaver: DNIOutputSaver;
    procedure set_OutputSaver(value: DNIOutputSaver);
    function get_EmbedImages: Boolean;
    procedure set_EmbedImages(value: Boolean);
    function get_AnimateTransitions: Boolean;
    procedure set_AnimateTransitions(value: Boolean);
    function get_AnimateShapes: Boolean;
    procedure set_AnimateShapes(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets templates engine.
    ///  Read/write <see cref="T:Aspose.Slides.Export.Web.ITemplateEngine" />
    ///  .
    ///</summary>
    property TemplateEngine: DNITemplateEngine read get_TemplateEngine write set_TemplateEngine;
    ///<summary>
    ///  Returns or sets output saver.
    ///  Read/write <see cref="T:Aspose.Slides.Export.Web.IOutputSaver" />
    ///  .
    ///</summary>
    property OutputSaver: DNIOutputSaver read get_OutputSaver write set_OutputSaver;
    ///<summary>
    ///  Returns or sets images embedding option.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EmbedImages: Boolean read get_EmbedImages write set_EmbedImages;
    ///<summary>
    ///  Returns or sets transitions animation option.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AnimateTransitions: Boolean read get_AnimateTransitions write set_AnimateTransitions;
    ///<summary>
    ///  Returns or sets shapes animation option.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AnimateShapes: Boolean read get_AnimateShapes write set_AnimateShapes;
  end;

  TDNWebDocumentOptions = class(TDNGenericImport<DNWebDocumentOptionsClass, DNWebDocumentOptions>) end;

  //-------------namespace: Aspose.Slides.Export.Xaml----------------
  ///<summary>
  ///  Represents an output saver implementation for transfer data to the external storage.
  ///</summary>
  [DNTypeName('Aspose.Slides.Export.Xaml.IXamlOutputSaver')]
  DNIXamlOutputSaver = interface(DDN.mscorlib.DNObject)
  ['{2E92EDCB-710E-499F-A08D-05B4BC0CB299}']
  { methods } 

    ///<summary>
    ///  Saves a bytes array to a destination location.
    ///</summary>
    ///  <param name="path">The destination path.</param>
    ///  <param name="data">A binary data for saving to a destination location.</param>
    procedure Save(path: string; data: TArray<Byte>);

  end;

  //-------------namespace: Aspose.Slides----------------
  DNFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2F2AB118-4529-55BA-86A0-86012FAD432A}']
  end;

  ///<summary>
  ///  Represents a field.
  ///</summary>
  [DNTypeName('Aspose.Slides.Field')]
  DNField = interface(DDN.mscorlib.DNObject)
  ['{8119162A-8B98-346F-959E-B593FD05A05A}']
  { getters & setters } 

    function get_Type: DNIFieldType;
    procedure set_Type(value: DNIFieldType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets field's type.
    ///  Read/write <see cref="T:Aspose.Slides.IFieldType" />
    ///  .
    ///</summary>
    property &Type: DNIFieldType read get_Type write set_Type;
  end;

  TDNField = class(TDNGenericImport<DNFieldClass, DNField>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFieldTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9B60DD6E-6E1B-51D6-A2F6-828159427145}']
  { static getter & setter } 

    {class} function get_SlideNumber: DNFieldType;
    {class} function get_Footer: DNFieldType;
    {class} function get_Header: DNFieldType;
    {class} function get_DateTime: DNFieldType;
    {class} function get_DateTime1: DNFieldType;
    {class} function get_DateTime2: DNFieldType;
    {class} function get_DateTime3: DNFieldType;
    {class} function get_DateTime4: DNFieldType;
    {class} function get_DateTime5: DNFieldType;
    {class} function get_DateTime6: DNFieldType;
    {class} function get_DateTime7: DNFieldType;
    {class} function get_DateTime8: DNFieldType;
    {class} function get_DateTime9: DNFieldType;
    {class} function get_DateTime10: DNFieldType;
    {class} function get_DateTime11: DNFieldType;
    {class} function get_DateTime12: DNFieldType;
    {class} function get_DateTime13: DNFieldType;

  { constructors } 

    ///<summary>
    ///  Initializes a new instance of FieldType class.
    ///</summary>
    {class} function init(str: string): DNFieldType;

  { static propertys } 

    ///<summary>
    ///  Current slide's number.
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property SlideNumber: DNFieldType read get_SlideNumber;
    ///<summary>
    ///  Slide's footer.
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property Footer: DNFieldType read get_Footer;
    ///<summary>
    ///  Slide's header.
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property Header: DNFieldType read get_Header;
    ///<summary>
    ///  Current date and time in default date time format for the rendering application.
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime: DNFieldType read get_DateTime;
    ///<summary>
    ///  Current date and time in a first predefined format (MM/DD/YYYY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime1: DNFieldType read get_DateTime1;
    ///<summary>
    ///  Current date and time in a second predefined format (Day, Month DD, YYYY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime2: DNFieldType read get_DateTime2;
    ///<summary>
    ///  Current date and time in a third predefined format (DD Month YYYY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime3: DNFieldType read get_DateTime3;
    ///<summary>
    ///  Current date and time in a fourth predefined format (Month DD, YYYY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime4: DNFieldType read get_DateTime4;
    ///<summary>
    ///  Current date and time in a fifth predefined format (DD-Mon-YY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime5: DNFieldType read get_DateTime5;
    ///<summary>
    ///  Current date and time in a sixth predefined format (Month YY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime6: DNFieldType read get_DateTime6;
    ///<summary>
    ///  Current date and time in a seventh predefined format (Mon-YY for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime7: DNFieldType read get_DateTime7;
    ///<summary>
    ///  Current date and time in a eighth predefined format (MM/DD/YYYY hh:mm AM/PM for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime8: DNFieldType read get_DateTime8;
    ///<summary>
    ///  Current date and time in a ninth predefined format (MM/DD/YYYY hh:mm:ss AM/PM for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime9: DNFieldType read get_DateTime9;
    ///<summary>
    ///  Current date and time in a tenth predefined format (hh:mm for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime10: DNFieldType read get_DateTime10;
    ///<summary>
    ///  Current date and time in a eleventh predefined format (hh:mm:ss for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime11: DNFieldType read get_DateTime11;
    ///<summary>
    ///  Current date and time in a twelfth predefined format (hh:mm AM/PM for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime12: DNFieldType read get_DateTime12;
    ///<summary>
    ///  Current date and time in a thirteenth predefined format (hh:mm:ss AM/PM for english).
    ///  Read-only <see cref="T:Aspose.Slides.FieldType" />
    ///  .
    ///</summary>
    {class} property DateTime13: DNFieldType read get_DateTime13;
  end;

  ///<summary>
  ///  Represents a type of field.
  ///  This value determines which text will be set to the field portion when it will be updated.
  ///</summary>
  [DNTypeName('Aspose.Slides.FieldType')]
  DNFieldType = interface(DDN.mscorlib.DNObject)
  ['{AA78C54F-D714-3BCB-8B00-F2DCF5CC787F}']
  { getters & setters } 

    function get_InternalString: string;
    procedure set_InternalString(value: string);

  { methods } 

    ///<summary>
    ///  Checks if this field is equal to another.
    ///</summary>
    ///  <param name="obj">Field to compare.</param>
    ///<returns>True if fields are equal.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hashcode for this object.
    ///</summary>
    ///<returns>Hashcode <see cref="T:System.Int32" />
    ///  .</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the internal name of this FieldType object.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property InternalString: string read get_InternalString write set_InternalString;
  end;

  TDNFieldType = class(TDNGenericImport<DNFieldTypeClass, DNFieldType>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6CC073EC-C43A-5421-9F5F-C247FEEC9030}']
  { constructors } 

    ///<summary>
    ///  Creates a new FontData object with the specified font name.
    ///</summary>
    ///  <param name="fontName">Font name.</param>
    {class} function init(fontName: string): DNFontData;

  end;

  ///<summary>
  ///  Represents a font definition. Immutable.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontData')]
  DNFontData = interface(DDN.mscorlib.DNObject)
  ['{370CBBFF-1916-3C47-896C-8F0ED9A324CD}']
  { getters & setters } 

    function get_FontName: string;

  { methods } 

    ///<summary>
    ///  Returns the font name, replacing theme referrence with an actual font used.
    ///</summary>
    ///  <param name="theme">Theme from which themed font name should be taken. Its up to caller to provide a correct value. See <see cref="M:Aspose.Slides.Theme.IThemeable.CreateThemeEffective" />
    ///</param>
    ///<returns>Font name.</returns>
    function GetFontName(theme: DNIThemeEffectiveData): string;
    ///<summary>
    ///  Determines whether two FontData instances are equal.
    ///</summary>
    ///  <param name="obj">The FontData to compare with the current FontData.</param>
    ///<returns><b>true</b>
    ///  if the specified FontData is equal to the current FontData; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<returns>Hash code of the FontData.</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  Returns string representation.
    ///</summary>
    ///<returns>String representatoin.</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Returns the font name.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property FontName: string read get_FontName;
  end;

  TDNFontData = class(TDNGenericImport<DNFontDataClass, DNFontData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontDataFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{921227FC-4A04-5EE0-9A9D-1D3EC980C260}']
  { constructors } 

    {class} function init: DNFontDataFactory;

  end;

  ///<summary>
  ///  FontData factory
  ///</summary>
  [DNTypeName('Aspose.Slides.FontDataFactory')]
  DNFontDataFactory = interface(DDN.mscorlib.DNObject)
  ['{4F1A30AD-F1D0-4FAD-AA92-088E2F535404}']
  { methods } 

    ///<summary>
    ///  Creates FontData with specified font name.
    ///</summary>
    ///  <param name="fontName">Font name</param>
    ///<returns>FontData</returns>
    function CreateFontData(fontName: string): DNIFontData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontDataFactory = class(TDNGenericImport<DNFontDataFactoryClass, DNFontDataFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontFallBackRuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{55B59D6C-30F5-5752-8E18-9B48D94824F5}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create new instance of FantFallBackRule with one font.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho");
    ///  // Create new instance of FantFallBackRule with several fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma");
    ///</code></example><param name="startIndex">Start index of unicode range</param>
    ///  <param name="endIndex">End index of unicode range</param>
    ///  <param name="fontNames">Font's name or names (delimited by comma) for FallBack </param>
    {class} function init(startIndex: UInt32; endIndex: UInt32; fontNames: string): DNFontFallBackRule; overload;
    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create new instance of FantFallBackRule with two fonts
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, new string[] { "MS Mincho", "MS Gothic"});
    ///  // Create new instance of FantFallBackRule with several fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, new string[] { "MS Gothic", "Tahoma, Times New Roman" });
    ///</code></example><param name="startIndex">Start index of unicode range</param>
    ///  <param name="endIndex">End index of unicode range</param>
    ///  <param name="fontNames">Font's name or names (delimited by comma) for FallBack </param>
    {class} function init(startIndex: UInt32; endIndex: UInt32; fontNames: TArray<string>): DNFontFallBackRule; overload;

  end;

  ///<summary>
  ///  Represents font fallback rule
  ///</summary>
  [DNTypeName('Aspose.Slides.FontFallBackRule')]
  DNFontFallBackRule = interface(DDN.mscorlib.DNObject)
  ['{F7973ABD-289C-42A3-8050-1B6F5A3A0850}']
  { getters & setters } 

    function get_RangeStartIndex: UInt32;
    procedure set_RangeStartIndex(value: UInt32);
    function get_RangeEndIndex: UInt32;
    procedure set_RangeEndIndex(value: UInt32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a new font(s) to the list of FallBack fonts.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create new instance of FontFallBackRule
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho");
    ///  //Add a second font to the rule
    ///  newRule.AddFallBackFonts("MS Gothic");
    ///  //Add a third and fourth fonts to the rule
    ///  newRule.AddFallBackFonts("Tahoma, Times New Roman");
    ///</code></example><param name="fontName">Font's name or names (delimited by comma) for FallBack </param>
    procedure AddFallBackFonts(fontName: string); overload;
    ///<summary>
    ///  Adds a new fonts to the list of FallBack fonts.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Create new instance of FontFallBackRule
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho");
    ///  //Add of another three fonts to the rule
    ///  newRule.AddFallBackFonts(new string [] {"MS Gothic","Tahoma, Times New Roman"});
    ///</code></example><param name="fontNames">Font's name or names (delimited by comma) for FallBack </param>
    procedure AddFallBackFonts(fontNames: TArray<string>); overload;
    ///<summary>
    ///  Removes the FallBack font at the specified index of the list.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  //Removing Tahoma from the list.
    ///  newRule.Remove (2);
    ///</code></example><param name="index">The zero-based index of the font to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Creates and returns an array with all FallBack fonts for this rule.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  // Get all font names as array.
    ///  string[] fontNames = newRule.ToArray();
    ///</code></example><returns>Array of <see cref="T:System.String" />
    ///</returns>
    function ToArray: TArray<string>; overload;
    ///<summary>
    ///  Creates and returns an array with all FallBack fonts from the specified range in list.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  // Get a last two font names as array.
    ///  string[] fontNames = newRule.ToArray(2,2);
    ///</code></example><param name="startIndex">An index of a first font to add.</param>
    ///  <param name="count">A number of fonts to add.</param>
    ///<returns>Array of <see cref="T:System.String" />
    ///</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<string>; overload;
    ///<summary>
    ///  Returns an index of the specified rule in the collection.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  // Get index of Tahoma.
    ///  int tahomaIndex = newRule.IndexOf("Tahoma");
    ///</code></example><param name="fontName">Font's name to find.</param>
    ///<returns>Index of a font or -1 if font not found in list.</returns>
    function IndexOf(fontName: string): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get first index of continuous unicode range.
    ///</summary>
    property RangeStartIndex: UInt32 read get_RangeStartIndex write set_RangeStartIndex;
    ///<summary>
    ///  Get last index of continuous unicode range.
    ///</summary>
    property RangeEndIndex: UInt32 read get_RangeEndIndex write set_RangeEndIndex;
    ///<summary>
    ///  Gets the number of fonts actually defined for range.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNFontFallBackRule = class(TDNGenericImport<DNFontFallBackRuleClass, DNFontFallBackRule>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontFallBackRulesCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D4C1491-671F-5956-AC9B-02AFE12FD6A9}']
  { constructors } 

    {class} function init: DNFontFallBackRulesCollection;

  end;

  ///<summary>
  ///  Represents a collection of FontFallBack rules, defined by user
  ///</summary>
  [DNTypeName('Aspose.Slides.FontFallBackRulesCollection')]
  DNFontFallBackRulesCollection = interface(DDN.mscorlib.DNObject)
  ['{A727214F-EE4B-4BF4-8E6F-73989F2A66B4}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIFontFallBackRule>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of rules actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNFontFallBackRulesCollection = class(TDNGenericImport<DNFontFallBackRulesCollectionClass, DNFontFallBackRulesCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DCBAD449-D716-5632-A8F0-403D447EC582}']
  end;

  ///<summary>
  ///  Fonts collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.Fonts')]
  DNFonts = interface(DDN.mscorlib.DNObject)
  ['{838458F8-148C-32BD-B18F-049717DD73AA}']
  { getters & setters } 

    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the Latin font.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    ///<summary>
    ///  Returns or sets the East Asian font.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    ///<summary>
    ///  Returns or sets the complex script font.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
  end;

  TDNFonts = class(TDNGenericImport<DNFontsClass, DNFonts>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontsLoaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69DC88AB-227E-5220-B023-2446553E67CF}']
  { static methods } 

    ///<summary>
    ///  Adds additional folders to seek fonts.
    ///</summary>
    ///  <param name="directories">Directories to read additional fonts.</param>
    {class} procedure LoadExternalFonts(directories: TArray<string>);
    ///<summary>
    ///  Adds font from the binary data
    ///</summary>
    ///  <param name="data">Font's data</param>
    {class} procedure LoadExternalFont(data: TArray<Byte>);
    ///<summary>
    ///  Gets font folders. Returns folders that have been added with LoadExternalFonts method as well as system font folders
    ///</summary>
    ///<returns>array containing folder names</returns>
    {class} function GetFontFolders: TArray<string>;
    ///<summary>
    ///  Releases all custom fonts defined by user
    ///</summary>
    ///<remarks>This method needs to clear cache with custom fonts defined by user.</remarks>
    {class} procedure ClearCache;

  end;

  ///<summary>
  ///  Class for loading custom fonts defined by user.
  ///  Should be used before creating any presentation objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontsLoader')]
  DNFontsLoader = interface(DDN.mscorlib.DNObject)
  ['{9B591A97-992D-31A8-B5CB-F67F03AD7C9D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontsLoader = class(TDNGenericImport<DNFontsLoaderClass, DNFontsLoader>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC0BFA9A-695F-5C4A-B2D3-EA038B709A12}']
  end;

  ///<summary>
  ///  Manages fonts across the presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontsManager')]
  DNFontsManager = interface(DDN.mscorlib.DNObject)
  ['{C2047F26-18CB-32F7-8FFD-B57D02C45E6D}']
  { getters & setters } 

    function get_FontSubstRuleList: DNIFontSubstRuleCollection;
    procedure set_FontSubstRuleList(value: DNIFontSubstRuleCollection);
    function get_FontFallBackRulesCollection: DNIFontFallBackRulesCollection;
    procedure set_FontFallBackRulesCollection(value: DNIFontFallBackRulesCollection);

  { methods } 

    ///<summary>
    ///  Returns the fonts used in the presentation
    ///</summary>
    ///<returns>An array of fonts</returns>
    function GetFonts: TArray<DNIFontData>;
    ///<summary>
    ///  Returns the fonts embedded in the presentation
    ///</summary>
    function GetEmbeddedFonts: TArray<DNIFontData>;
    ///<summary>
    ///  Removes the embedded font
    ///</summary>
    procedure RemoveEmbeddedFont(fontData: DNIFontData);
    ///<summary>
    ///  Adds the embedded font
    ///<remarks>Keep in mind when copying any fonts that most fonts are copyrighted. First locate the license of
    ///  a font before hand and verify they can be freely transferred to another machine.</remarks>
    ///<exception cref="T:System.ArgumentException">An ArgumentException can be thrown if font data is null or this font is already embedded</exception></summary>
    procedure AddEmbeddedFont(fontData: DNIFontData; embedFontRule: DNEmbedFontCharacters); overload;
    ///<summary>
    ///  Adds the embedded font
    ///<remarks>Keep in mind when copying any fonts that most fonts are copyrighted. First locate the license of
    ///  a font before hand and verify they can be freely transferred to another machine.</remarks>
    ///<exception cref="T:System.ArgumentException">An ArgumentException can be thrown if font data is null or this font is already embedded</exception></summary>
    procedure AddEmbeddedFont(fontData: TArray<Byte>; embedFontRule: DNEmbedFontCharacters); overload;
    ///<summary>
    ///  Replace font in presentation
    ///</summary>
    ///  <param name="sourceFont">Source font</param>
    ///  <param name="destFont">Destination font</param>
    procedure ReplaceFont(sourceFont: DNIFontData; destFont: DNIFontData); overload;
    ///<summary>
    ///  Replace font in presentation using information provided in <see cref="T:Aspose.Slides.FontSubstRule">FontSubstRule</see></summary>
    ///  <param name="substRule">Font substitution info</param>
    procedure ReplaceFont(substRule: DNIFontSubstRule); overload;
    ///<summary>
    ///  Replace font in presentation using information provided in collection of <see cref="T:Aspose.Slides.FontSubstRule">FontSubstRule</see></summary>
    ///  <param name="substRules">Font substitution rules collection</param>
    procedure ReplaceFont(substRules: DNIFontSubstRuleCollection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Font substitutions to use when rendering.
    ///  Read/write <see cref="T:Aspose.Slides.IFontSubstRuleCollection" />
    ///  .
    ///</summary>
    property FontSubstRuleList: DNIFontSubstRuleCollection read get_FontSubstRuleList write set_FontSubstRuleList;
    ///<summary>
    ///  Represents a user's collection of FontFallBack rules for managing of collections of fonts for proper substitutions by fallback functionality
    ///  Read/write <see cref="T:Aspose.Slides.IFontFallBackRulesCollection" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation ())
    ///  {
    ///  // Getting of empty or preinitialized rules collection from FontsManager
    ///  IFontFallBackRulesCollection rulesList = pres.FontsManager.FontFallBackRulesCollection;
    ///  // adding of rules to collection
    ///  rulesList.Add(new FontFallBackRule(0x400,0x4FF, "Times New Roman"));
    ///  // or
    ///  // initialization of new instance of rules collection
    ///  IFontFallBackRulesCollection rulesList = new FontFallBackRulesCollection();
    ///  // adding of rules to collection
    ///  rulesList.Add(new FontFallBackRule(0x400,0x4FF, "Times New Roman"));
    ///  // and replacing of existing collection by the new one in FontsManager
    ///  pres.FontsManager.FontFallBackRulesCollection = rulesList;
    ///  }
    ///</code></example>
    property FontFallBackRulesCollection: DNIFontFallBackRulesCollection read get_FontFallBackRulesCollection write set_FontFallBackRulesCollection;
  end;

  TDNFontsManager = class(TDNGenericImport<DNFontsManagerClass, DNFontsManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontSourcesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C49C8C8-F0C4-510D-AB05-DEEBB452016A}']
  { constructors } 

    ///<summary>
    ///  Creates new default font options.
    ///</summary>
    {class} function init: DNFontSources;

  end;

  ///<summary>
  ///  Provides file and memory sources for external fonts.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontSources')]
  DNFontSources = interface(DDN.mscorlib.DNObject)
  ['{CE5CEB68-87E3-45DC-9CFE-F1E1A34CC679}']
  { getters & setters } 

    function get_FontFolders: TArray<string>;
    procedure set_FontFolders(value: TArray<string>);
    function get_MemoryFonts: TArray<TArray<Byte>>;
    procedure set_MemoryFonts(value: TArray<TArray<Byte>>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Folders containing font files.
    ///  All font files located in these folders are included in the collection. Folders that are recursively searched.
    ///</summary>
    property FontFolders: TArray<string> read get_FontFolders write set_FontFolders;
    ///<summary>
    ///  A collection of fonts represented as byte arrays.
    ///</summary>
    property MemoryFonts: TArray<TArray<Byte>> read get_MemoryFonts write set_MemoryFonts;
  end;

  TDNFontSources = class(TDNGenericImport<DNFontSourcesClass, DNFontSources>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontSubstRuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9E20F729-DEB1-5FBF-8DBD-A241A74843BD}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///  <param name="sourceFont">Source font.</param>
    ///  <param name="destFont">Destination font.</param>
    {class} function init(sourceFont: DNIFontData; destFont: DNIFontData): DNFontSubstRule; overload;
    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///  <param name="sourceFont">Source font.</param>
    ///  <param name="destFont">Destination font.</param>
    ///  <param name="fontSubstRule">Font subst rule.</param>
    {class} function init(sourceFont: DNIFontData; destFont: DNIFontData; fontSubstRule: DNFontSubstCondition): DNFontSubstRule; overload;

  end;

  ///<summary>
  ///  Represents font subtituition information
  ///</summary>
  [DNTypeName('Aspose.Slides.FontSubstRule')]
  DNFontSubstRule = interface(DDN.mscorlib.DNObject)
  ['{E4A308AD-0DD5-432E-B2F9-46E47BE93AFD}']
  { getters & setters } 

    function get_SourceFont: DNIFontData;
    function get_DestFont: DNIFontData;
    function get_ReplaceFontCondition: DNFontSubstCondition;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Font to substitute.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SourceFont: DNIFontData read get_SourceFont;
    ///<summary>
    ///  Font to use for substitution.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property DestFont: DNIFontData read get_DestFont;
    ///<summary>
    ///  Rule to apply for substitution.
    ///  Read-only <see cref="T:Aspose.Slides.FontSubstCondition" />
    ///  .
    ///</summary>
    property ReplaceFontCondition: DNFontSubstCondition read get_ReplaceFontCondition;
  end;

  TDNFontSubstRule = class(TDNGenericImport<DNFontSubstRuleClass, DNFontSubstRule>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontSubstRuleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27567F45-7050-5D8C-A137-0504AEA194E1}']
  { constructors } 

    {class} function init: DNFontSubstRuleCollection;

  end;

  ///<summary>
  ///  Represents collection of fonts substitution.
  ///</summary>
  [DNTypeName('Aspose.Slides.FontSubstRuleCollection')]
  DNFontSubstRuleCollection = interface(DDN.mscorlib.DNObject)
  ['{CA8BBB80-8368-4298-BBE5-BC930DD2FAFF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIFontSubstRule>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNFontSubstRuleCollection = class(TDNGenericImport<DNFontSubstRuleCollectionClass, DNFontSubstRuleCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFormatFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E0AD5CE-C0CC-5213-AEE4-36AF81FBDF26}']
  { static getter & setter } 

    {class} function get_Instance: DNFormatFactory;

  { constructors } 

    {class} function init: DNFormatFactory;

  { static propertys } 

    ///<summary>
    ///  Format factory static instance.
    ///  Read-only <see cref="T:Aspose.Slides.FormatFactory" />
    ///  .
    ///</summary>
    {class} property Instance: DNFormatFactory read get_Instance;
  end;

  ///<summary>
  ///  Allows to create formats via COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.FormatFactory')]
  DNFormatFactory = interface(DDN.mscorlib.DNObject)
  ['{CBA42315-B497-43AC-81C7-B9D3AF974BC8}']
  { methods } 

    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.IPortionFormat" />
    ///  .
    ///</summary>
    ///<returns>New portion format.</returns>
    function CreatePortionFormat: DNIPortionFormat;
    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .
    ///</summary>
    ///<returns>New paragraph format.</returns>
    function CreateParagraphFormat: DNIParagraphFormat;
    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.ITextFrameFormat" />
    ///  .
    ///</summary>
    ///<returns>New text frame format.</returns>
    function CreateTextFrameFormat: DNITextFrameFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFormatFactory = class(TDNGenericImport<DNFormatFactoryClass, DNFormatFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGeometryPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AF4F98B-0823-5ABE-B993-C47E64151A84}']
  { constructors } 

    ///<summary>
    ///  Creates instance of GeometryPath
    ///</summary>
    {class} function init: DNGeometryPath;

  end;

  ///<summary>
  ///  Represents geometry path of GeometryShape
  ///</summary>
  [DNTypeName('Aspose.Slides.GeometryPath')]
  DNGeometryPath = interface(DDN.mscorlib.DNObject)
  ['{38B45955-5E0A-435D-96A0-B0EDB1AF2D94}']
  { getters & setters } 

    function get_PathData: TArray<DNIPathSegment>;
    function get_FillMode: DNPathFillModeType;
    procedure set_FillMode(value: DNPathFillModeType);
    function get_Stroke: Boolean;
    procedure set_Stroke(value: Boolean);

  { methods } 

    ///<summary>
    ///  Removes segment at the specified index of the geometry path.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Adds line to the end of the path
    ///</summary>
    ///  <param name="point">End point of the line</param>
    procedure LineTo(point: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Adds line to the end of the path
    ///</summary>
    ///  <param name="x">X coordinate of the end point of the line</param>
    ///  <param name="y">Y coordinate of the end point of the line</param>
    procedure LineTo(x: Single; y: Single); overload;
    ///<summary>
    ///  Adds line to the specified place of the path
    ///</summary>
    ///  <param name="point">End point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure LineTo(point: DDN.Aspose.Common.DNPointF; index: UInt32); overload;
    ///<summary>
    ///  Adds line to the specified place of the path
    ///</summary>
    ///  <param name="x">X coordinate of the point</param>
    ///  <param name="y">Y coordinate of the point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure LineTo(x: Single; y: Single; index: UInt32); overload;
    ///<summary>
    ///  Adds cubic Bezier curve at the end the path
    ///</summary>
    ///  <param name="point1">First direction point</param>
    ///  <param name="point2">Second direction point</param>
    ///  <param name="point3">End point</param>
    ///<returns></returns>
    procedure CubicBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF; point3: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Adds cubic Bezier curve at the end the path
    ///</summary>
    ///  <param name="x1">X coordinate of first direction point</param>
    ///  <param name="y1">Y coordinate of first direction point</param>
    ///  <param name="x2">X coordinate of second direction point</param>
    ///  <param name="y2">Y coordinate of second direction point</param>
    ///  <param name="x3">X coordinate of end point</param>
    ///  <param name="y3">Y coordinate of end point</param>
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); overload;
    ///<summary>
    ///  Adds cubic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="point1">First direction point</param>
    ///  <param name="point2">Second direction point</param>
    ///  <param name="point3">End point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure CubicBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF; point3: DDN.Aspose.Common.DNPointF; index: UInt32); overload;
    ///<summary>
    ///  Adds cubic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="x1">X coordinate of first direction point</param>
    ///  <param name="y1">Y coordinate of first direction point</param>
    ///  <param name="x2">X coordinate of second direction point</param>
    ///  <param name="y2">Y coordinate of second direction point</param>
    ///  <param name="x3">X coordinate of end point</param>
    ///  <param name="y3">Y coordinate of end point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; index: UInt32); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve at the end the path
    ///</summary>
    ///  <param name="point1">Direction point</param>
    ///  <param name="point2">End point</param>
    ///<returns></returns>
    procedure QuadraticBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve at the end the path
    ///</summary>
    ///  <param name="x1">X coordinate of direction point</param>
    ///  <param name="y1">Y coordinate of direction point</param>
    ///  <param name="x2">X coordinate of end point</param>
    ///  <param name="y2">Y coordinate of end point</param>
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="point1">Direction point</param>
    ///  <param name="point2">End point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure QuadraticBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF; index: UInt32); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="x1">X coordinate of direction point</param>
    ///  <param name="y1">Y coordinate of direction point</param>
    ///  <param name="x2">X coordinate of end point</param>
    ///  <param name="y2">Y coordinate of end point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; index: UInt32); overload;
    ///<summary>
    ///  Closes the current figure of this path
    ///</summary>
    procedure CloseFigure;
    ///<summary>
    ///  Sets next point position.
    ///</summary>
    ///  <param name="point">Point position</param>
    procedure MoveTo(point: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Sets next point position.
    ///</summary>
    ///  <param name="x">X coordinate of the point</param>
    ///  <param name="y">Y Coordinate of the point</param>
    procedure MoveTo(x: Single; y: Single); overload;
    ///<summary>
    ///  Appends the specified arc to the path.
    ///</summary>
    ///  <param name="width">Width of the rectangle</param>
    ///  <param name="heigth">Height of the rectangle</param>
    ///  <param name="startAngle">Start angle.</param>
    ///  <param name="sweepAngle"> Sweep angle/</param>
    procedure ArcTo(width: Single; heigth: Single; startAngle: Single; sweepAngle: Single);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns geometry path of GeometryShape as an array of path segments.
    ///</summary>
    property PathData: TArray<DNIPathSegment> read get_PathData;
    ///<summary>
    ///  Sets fill mode
    ///</summary>
    property FillMode: DNPathFillModeType read get_FillMode write set_FillMode;
    ///<summary>
    ///  Sets stroke appearance
    ///</summary>
    property Stroke: Boolean read get_Stroke write set_Stroke;
  end;

  TDNGeometryPath = class(TDNGenericImport<DNGeometryPathClass, DNGeometryPath>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopCollectionEffectiveDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D03E0937-54E2-5D65-B300-55160970C80D}']
  end;

  ///<summary>
  ///  Represents a collection of GradientStopData objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientStopCollectionEffectiveData')]
  DNGradientStopCollectionEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{FE6CB75B-62DB-3137-8D88-61A9B326320B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIGradientStopEffectiveData>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of gradient stops in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNGradientStopCollectionEffectiveData = class(TDNGenericImport<DNGradientStopCollectionEffectiveDataClass, DNGradientStopCollectionEffectiveData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopEffectiveDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3FDADE80-C5D6-5939-9607-B133170DD24E}']
  end;

  ///<summary>
  ///  Immutable object which represents a gradient stop.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientStopEffectiveData')]
  DNGradientStopEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{32BD52B1-0579-3FF0-ABC5-F0ED970637F2}']
  { getters & setters } 

    function get_Position: Single;
    function get_Color: DDN.Aspose.Common.DNColor;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.GradientStopEffectiveData" />
    ///  is equal to the current <see cref="T:Aspose.Slides.GradientStopEffectiveData" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.GradientStopEffectiveData" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the position (0..1) of a gradient stop.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Position: Single read get_Position;
    ///<summary>
    ///  Returns the color of a gradient stop.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
  end;

  TDNGradientStopEffectiveData = class(TDNGenericImport<DNGradientStopEffectiveDataClass, DNGradientStopEffectiveData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNHyperlinkManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D43A82A-DACB-5FBC-A359-E85B821D0E33}']
  end;

  ///<summary>
  ///  Provide hyperlinks management (adding, removing).
  ///</summary>
  [DNTypeName('Aspose.Slides.HyperlinkManager')]
  DNHyperlinkManager = interface(DDN.mscorlib.DNObject)
  ['{428EF858-9C29-3CEF-9E7B-44390A036B3E}']
  { methods } 

    ///<summary>
    ///  Set external hyperlink on click.
    ///</summary>
    ///  <param name="url">Hyperlink URL.</param>
    function SetExternalHyperlinkClick(url: string): DNIHyperlink;
    ///<summary>
    ///  Sets internal hyperlink on click.
    ///</summary>
    ///  <param name="targetSlide">Target slide.</param>
    ///<returns>Hyperlink.</returns>
    function SetInternalHyperlinkClick(targetSlide: DNISlide): DNIHyperlink;
    ///<summary>
    ///  Removes hyperlink on click.
    ///</summary>
    procedure RemoveHyperlinkClick;
    ///<summary>
    ///  Sets external hyperlink mouse over.
    ///</summary>
    ///  <param name="url">Hyperlink URL.</param>
    ///<returns>Hyperlink.</returns>
    function SetExternalHyperlinkMouseOver(url: string): DNIHyperlink;
    ///<summary>
    ///  Sets internal hyperlink mouse over.
    ///</summary>
    ///  <param name="targetSlide">Target slide.</param>
    ///<returns>Hyperlink.</returns>
    function SetInternalHyperlinkMouseOver(targetSlide: DNISlide): DNIHyperlink;
    ///<summary>
    ///  Removes hyperlink mouse over.
    ///</summary>
    procedure RemoveHyperlinkMouseOver;
    ///<summary>
    ///  Set Macro hyperlink on a click.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation presentation = new Presentation())
    ///  {
    ///  IAutoShape shape = presentation.Slides[0].Shapes.AddAutoShape(ShapeType.BlankButton, 20, 20, 80, 30);
    ///  shape.HyperlinkManager.SetMacroHyperlinkClick("MacroName");
    ///  }
    ///</code></example><param name="macroName">Name of the macro</param>
    ///<returns>Hyperlink object <see cref="T:Aspose.Slides.IHyperlink" />
    ///</returns>
    function SetMacroHyperlinkClick(macroName: string): DNIHyperlink;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyperlinkManager = class(TDNGenericImport<DNHyperlinkManagerClass, DNHyperlinkManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNHyperlinkQueriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A98EAD9A-0F7A-5714-912F-93C7F2D28023}']
  end;

  ///<summary>
  ///  Provide easy access to contained hyperlinks.
  ///</summary>
  [DNTypeName('Aspose.Slides.HyperlinkQueries')]
  DNHyperlinkQueries = interface(DDN.mscorlib.DNObject)
  ['{327A41EE-37C8-3695-8801-CFE31A6B7036}']
  { methods } 

    ///<summary>
    ///  Get all IHyperlinkContainer subobjects that contain not null HyperlinkClick.
    ///  With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
    ///</summary>
    function GetHyperlinkClicks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    ///<summary>
    ///  Get all IHyperlinkContainer subobjects that contain not null HyperlinkMouseOver.
    ///  With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
    ///</summary>
    function GetHyperlinkMouseOvers: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    ///<summary>
    ///  Get all IHyperlinkContainer subobjects that contain not null HyperlinkMouseOver.
    ///  With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
    ///</summary>
    function GetAnyHyperlinks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    ///<summary>
    ///  Removes all contained HyperlinkClick and HyperlinkMouseOver hyperlinks (in all IHyperlinkContainer subobjects).
    ///</summary>
    procedure RemoveAllHyperlinks;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyperlinkQueries = class(TDNGenericImport<DNHyperlinkQueriesClass, DNHyperlinkQueries>) end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a geometry shape's adjustment value.
  ///  These values affect shape's form.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAdjustValue')]
  DNIAdjustValue = interface(DDN.mscorlib.DNObject)
  ['{49A49EA8-5A30-49DD-910C-87820DF1E49D}']
  { getters & setters } 

    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);
    function get_AngleValue: Single;
    procedure set_AngleValue(value: Single);
    function get_Name: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets ajustment value "as is".
    ///  Read/write <see cref="T:System.Int64" />
    ///  .
    ///</summary>
    property RawValue: Int64 read get_RawValue write set_RawValue;
    ///<summary>
    ///  Returns or sets value, interpreting it as angle in degrees.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property AngleValue: Single read get_AngleValue write set_AngleValue;
    ///<summary>
    ///  Returns a name of this adjustment value.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents timeline of animation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAnimationTimeLine')]
  DNIAnimationTimeLine = interface(DDN.mscorlib.DNObject)
  ['{20458136-AAC5-4E8F-9652-7BA6B43E9ABA}']
  { getters & setters } 

    function get_InteractiveSequences: DNISequenceCollection;
    function get_MainSequence: DNISequence;
    function get_TextAnimationCollection: DNITextAnimationCollection;

  { propertys } 

    ///<summary>
    ///  Returns collection of interactive sequences.
    ///  This sequences may contain only effects by "click on shape" with specifies target shape.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ISequenceCollection" />
    ///  .
    ///</summary>
    property InteractiveSequences: DNISequenceCollection read get_InteractiveSequences;
    ///<summary>
    ///  Returns main sequence which may contain only main effects collection.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ISequence" />
    ///  .
    ///</summary>
    property MainSequence: DNISequence read get_MainSequence;
    ///<summary>
    ///  Returns collection of text animations.
    ///  Read-only <see cref="T:Aspose.Slides.Animation.ITextAnimationCollection" />
    ///  .
    ///</summary>
    property TextAnimationCollection: DNITextAnimationCollection read get_TextAnimationCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an embedded audio file.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAudio')]
  DNIAudio = interface(DDN.mscorlib.DNObject)
  ['{6E8E175F-2CBA-4B54-87FF-CEA960CF4FF7}']
  { getters & setters } 

    function get_ContentType: string;
    function get_BinaryData: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  Returns Stream stream for reading.
    ///  Use 'using' or close stream after using.
    ///</summary>
    ///<returns>Stream for reading.</returns>
    function GetStream: DDN.mscorlib.DNStream;

  { propertys } 

    ///<summary>
    ///  Returns a MIME type of an audio, encoded in <see cref="P:Aspose.Slides.IAudio.BinaryData" />
    ///  .
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  Returns the copy of an audio's data. In case of large amount of data consider
    ///  using of <see cref="M:Aspose.Slides.IAudio.GetStream" />
    ///  method to prevent unnecessary  loading of audio's
    ///  data into memory or even OutOfMemoryException.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Defines a plane in which effects, such as glow and shadow, are applied in relation to the shape they are being applied to.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBackdrop3DScene')]
  DNIBackdrop3DScene = interface(DDN.mscorlib.DNObject)
  ['{5C27C4AF-7B37-4C09-B417-5C7A67687602}']
  { getters & setters } 

    function get_NormalVector: TArray<Single>;
    procedure set_NormalVector(value: TArray<Single>);
    function get_AnchorPoint: TArray<Single>;
    procedure set_AnchorPoint(value: TArray<Single>);
    function get_UpVector: TArray<Single>;
    procedure set_UpVector(value: TArray<Single>);

  { propertys } 

    ///<summary>
    ///  Returns or sets a normal vector. To be more precise, this attribute defines a vector
    ///  normal to the face of the backdrop plane. Vector represented by array of 3 float values
    ///  which define X, Y and Z coordinates.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property NormalVector: TArray<Single> read get_NormalVector write set_NormalVector;
    ///<summary>
    ///  Returns or sets a point in 3D space. This point is the point in space that anchors the backdrop plane.
    ///  3D point represented by array of 3 float values which define X, Y and Z coordinates.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property AnchorPoint: TArray<Single> read get_AnchorPoint write set_AnchorPoint;
    ///<summary>
    ///  Returns or sets a vector representing up. To be more precise, this attribute defines a vector
    ///  representing up in relation to the face of the backdrop plane. Vector represented by array
    ///  of 3 float values which define X, Y and Z coordinates.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property UpVector: TArray<Single> read get_UpVector write set_UpVector;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBaseHeaderFooterManager')]
  DNIBaseHeaderFooterManager = interface(DDN.mscorlib.DNObject)
  ['{0D92A7DE-5752-4996-BD56-C57DF650ADB5}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the footer, date-time, page number placeholders for all slide types.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBaseSlideHeaderFooterManager')]
  DNIBaseSlideHeaderFooterManager = interface(DNIBaseHeaderFooterManager)
  ['{457C6D4C-DE01-41FC-99BA-A79086D6DDC5}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;
    function get_AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager;

  { methods } 

    ///<summary>
    ///  Changes slide footer placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholder visible, otherwise - hides it.</param>
    procedure SetFooterVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide page number placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholder visible, otherwise - hides it.</param>
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes slide date-time placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholder visible, otherwise - hides it.</param>
    procedure SetDateTimeVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide footer placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterText(text: string);
    ///<summary>
    ///  Sets text to slide date-time placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeText(text: string);

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a footer placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    ///<summary>
    ///  Gets value indicating that a page number placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    ///<summary>
    ///  Gets value indicating that a date-time placeholder is present.
    ///  Read<see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
    ///<summary>
    ///  Returns IBaseHeaderFooterManager interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager read get_AsIBaseHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the placeholders, including header placeholder for all types handout and notes slides.
  ///</summary>
  ///<remarks>Original interface name "IBaseHandoutNotesSlideHeaderFooterManager" is trancuted to "IBaseHandoutNotesSlideHeaderFooterManag" for COM compatibility (type name length must be not more than 39).</remarks>
  [DNTypeName('Aspose.Slides.IBaseHandoutNotesSlideHeaderFooterManag')]
  DNIBaseHandoutNotesSlideHeaderFooterManag = interface(DNIBaseSlideHeaderFooterManager)
  ['{1C2EA713-FEC5-48F7-A22C-660667646AAD}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { methods } 

    ///<summary>
    ///  Changes slide header placeholder visibility.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholder visible, otherwise - hides it.</param>
    procedure SetHeaderVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to slide header placeholder.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderText(text: string);

  { propertys } 

    ///<summary>
    ///  Gets value indicating that a header placeholder is present.
    ///  Read <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    ///<summary>
    ///  Returns IBaseSlideHeaderFooterManager interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the master handout slide placeholders, including header placeholder.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterHandoutSlideHeaderFooterManager')]
  DNIMasterHandoutSlideHeaderFooterManager = interface(DNIBaseHandoutNotesSlideHeaderFooterManag)
  ['{2942DDD9-D697-49EE-8474-58C7F755C1EF}']
  { getters & setters } 

    function get_AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag;

  { propertys } 

    ///<summary>
    ///  Returns IBaseHandoutNotesSlideHeaderFooterManag interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag read get_AsIBaseHandoutNotesSlideHeaderFooterManag;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the master notes slide footer, date-time, page number placeholders and all child placeholders.
  ///  Child placeholders mean placeholders are contained on depending notes slides.
  ///  Depending notes slides use and depend on master notes slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterNotesSlideHeaderFooterManager')]
  DNIMasterNotesSlideHeaderFooterManager = interface(DNIBaseHandoutNotesSlideHeaderFooterManag)
  ['{E3D2AC78-2FB0-437E-BBE2-E0C0953BD06B}']
  { getters & setters } 

    function get_AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag;

  { methods } 

    ///<summary>
    ///  Changes master notes slide header placeholder and all child header placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholders visible, otherwise - hides them.</param>
    procedure SetHeaderAndChildHeadersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to master notes slide header placeholder and all child header placeholders.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetHeaderAndChildHeadersText(text: string);
    ///<summary>
    ///  Changes master notes slide footer placeholder and all child footer placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master notes slide page number placeholder and all child page number placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master notes slide date-time placeholder and all child date-time placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to master notes slide footer placeholder and all child footer placeholders.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterAndChildFootersText(text: string);
    ///<summary>
    ///  Sets text to master notes slide date-time placeholder and all child date-time placeholders.
    ///  Child placeholders mean placeholders are contained on depending notes slides.
    ///  Depending notes slides use and depend on master notes slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeAndChildDateTimesText(text: string);

  { propertys } 

    ///<summary>
    ///  Returns IBaseHandoutNotesSlideHeaderFooterManag interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag read get_AsIBaseHandoutNotesSlideHeaderFooterManag;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the notes slide placeholders, including header placeholder.
  ///</summary>
  [DNTypeName('Aspose.Slides.INotesSlideHeaderFooterManager')]
  DNINotesSlideHeaderFooterManager = interface(DNIBaseHandoutNotesSlideHeaderFooterManag)
  ['{05C8CF2B-2624-46D1-96A0-1816205C6AB7}']
  { getters & setters } 

    function get_AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag;

  { propertys } 

    ///<summary>
    ///  Returns IBaseHandoutNotesSlideHeaderFooterManag interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag read get_AsIBaseHandoutNotesSlideHeaderFooterManag;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the layout slide footer, date-time, page number placeholders and all child placeholders.
  ///  Child placeholders mean placeholders are contained on depending slides.
  ///  Depending slides use and depend on layout slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILayoutSlideHeaderFooterManager')]
  DNILayoutSlideHeaderFooterManager = interface(DNIBaseSlideHeaderFooterManager)
  ['{8C7ADC5F-192A-4EBA-8644-8FB1D967C3F6}']
  { getters & setters } 

    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { methods } 

    ///<summary>
    ///  Changes layout slide footer placeholder and all child footer placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes layout slide page number placeholder and all child page number placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes layout slide date-time placeholder and all child date-time placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to layout slide footer placeholder and all child footer placeholders.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterAndChildFootersText(text: string);
    ///<summary>
    ///  Sets text to layout slide date-time placeholder and all child date-time placeholders.
    ///  Child placeholders mean placeholders are contained on depending slides.
    ///  Depending slides use and depend on layout slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeAndChildDateTimesText(text: string);

  { propertys } 

    ///<summary>
    ///  Returns IBaseSlideHeaderFooterManager interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the master slide footer, date-time, page number placeholders and all child placeholders.
  ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
  ///  Depending layout slides and slides use and depend on master slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterSlideHeaderFooterManager')]
  DNIMasterSlideHeaderFooterManager = interface(DNIBaseSlideHeaderFooterManager)
  ['{A7077E28-9116-486D-9071-39F70CDCC985}']
  { getters & setters } 

    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { methods } 

    ///<summary>
    ///  Changes master slide footer placeholder and all child footer placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master slide page number placeholder and all child page number placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes master slide date-time placeholder and all child date-time placeholders visibility.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to master slide footer placeholder and all child footer placeholders.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetFooterAndChildFootersText(text: string);
    ///<summary>
    ///  Sets text to master slide date-time placeholder and all child date-time placeholders.
    ///  Child placeholders mean placeholders are contained on depending layout slides and depending slides.
    ///  Depending layout slides and slides use and depend on master slide.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetDateTimeAndChildDateTimesText(text: string);

  { propertys } 

    ///<summary>
    ///  Returns IBaseSlideHeaderFooterManager interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of the slide footer, date-time, page number placeholders.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlideHeaderFooterManager')]
  DNISlideHeaderFooterManager = interface(DNIBaseSlideHeaderFooterManager)
  ['{8186C19C-056F-4636-9A0C-D4BE9276E7CF}']
  { getters & setters } 

    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { propertys } 

    ///<summary>
    ///  Returns IBaseSlideHeaderFooterManager interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents manager which holds behavior of all footer, date-time and page number placeholders of presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPresentationHeaderFooterManager')]
  DNIPresentationHeaderFooterManager = interface(DNIBaseHeaderFooterManager)
  ['{16D0D0C2-2A16-4887-B5CF-777A02AC56B6}']
  { getters & setters } 

    function get_AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager;

  { methods } 

    ///<summary>
    ///  Changes all header placeholders visibility, including notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="isVisible">true - makes a header placeholders visible, otherwise - hides them.</param>
    procedure SetAllHeadersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes all footer placeholders visibility, including master slides, layout slides and slides.
    ///</summary>
    ///  <param name="isVisible">true - makes a footer placeholders visible, otherwise - hides them.</param>
    procedure SetAllFootersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes all page number placeholders visibility, including master slides, layout slides and slides.
    ///</summary>
    ///  <param name="isVisible">true - makes a page number placeholders visible, otherwise - hides them.</param>
    procedure SetAllSlideNumbersVisibility(isVisible: Boolean);
    ///<summary>
    ///  Changes all date-time placeholders visibility, including master slides, layout slides and slides.
    ///</summary>
    ///  <param name="isVisible">true - makes a date-time placeholders visible, otherwise - hides them.</param>
    procedure SetAllDateTimesVisibility(isVisible: Boolean);
    ///<summary>
    ///  Sets text to all header placeholders, including notes master, notes slides and handout master.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetAllHeadersText(text: string);
    ///<summary>
    ///  Sets text to all footer placeholders, including master slides, layout slides and slides.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetAllFootersText(text: string);
    ///<summary>
    ///  Sets text to all date-time placeholders, including master slides, layout slides and slides.
    ///</summary>
    ///  <param name="text">Text to set.</param>
    procedure SetAllDateTimesText(text: string);
    ///<summary>
    ///  Changes the footer, date-time and page number placeholders visibility for all title slides and for first layout slide.
    ///  Title slides – slides based on first layout slide (regardless of type of this first layout).
    ///</summary>
    ///  <param name="isVisible">true - makes a placeholders visible, otherwise - hides them.</param>
    procedure SetVisibilityOnAllTitleSlides(isVisible: Boolean);

  { propertys } 

    ///<summary>
    ///  Returns IBaseHeaderFooterManager interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager read get_AsIBaseHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  This class contains the text portion formatting properties. Unlike <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  , all properties of this class are writeable.
  ///</summary>
  ///<remarks><para>This class is used to return and manipulate text portion formatting properties defined for the particular portion. This means that
  ///  no inheritance is applied when getting values so for the majority of cases you will get values meaning "undefined".</para><para>In order to get the effective formatting parameter values including inherited you need to use <see cref="M:Aspose.Slides.IPortionFormat.GetEffective" />
  ///  method
  ///  which returns a <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  instance.</para></remarks>
  [DNTypeName('Aspose.Slides.IBasePortionFormat')]
  DNIBasePortionFormat = interface(DDN.mscorlib.DNObject)
  ['{7E8F5AE0-6F0F-4EF8-A7D8-E8EEE53652E6}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { propertys } 

    ///<summary>
    ///  Returns the LineFormat properties for text outlining. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the text FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns the text EffectFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the color used to highlight a text. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    ///<summary>
    ///  Returns the LineFormat properties used to outline underline line. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    ///<summary>
    ///  Returns the underline line FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    ///<summary>
    ///  Determines whether the font is bold. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    ///<summary>
    ///  Determines whether the font is itallic. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    ///<summary>
    ///  Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    ///<summary>
    ///  Determines whether the height of a text should be normalized. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    ///<summary>
    ///  Determines whether the text shouldn't be proofed. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    ///<summary>
    ///  Returns or sets the text underline type. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextUnderlineType" />
    ///  .
    ///</summary>
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    ///<summary>
    ///  Returns or sets the type of text capitalization. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextCapType" />
    ///  .
    ///</summary>
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    ///<summary>
    ///  Returns or sets the strikethrough type of a text. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextStrikethroughType" />
    ///  .
    ///</summary>
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    ///<summary>
    ///  Determines whether the underline style has own LineFormat properties or inherits it
    ///  from the LineFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    ///<summary>
    ///  Determines whether the underline style has own FillFormat properties or inherits it
    ///  from the FillFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    ///<summary>
    ///  Returns or sets the font height of a portion.
    ///<b>float.NaN</b>
    ///  means height is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    ///<summary>
    ///  Returns or sets the Latin font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    ///<summary>
    ///  Returns or sets the East Asian font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    ///<summary>
    ///  Returns or sets the complex script font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    ///<summary>
    ///  Returns or sets the symbolic font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    ///<summary>
    ///  Returns or sets the superscript or subscript text.
    ///  Value from -100% (subscript) to 100% (superscript).
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Escapement: Single read get_Escapement write set_Escapement;
    ///<summary>
    ///  Returns or sets the minimal font size, for which kerning should be switched on.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    ///<summary>
    ///  Returns or sets the Id of a proofing language. Used for checking spelling and grammar.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Returns or sets the Id of an alternative language.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    ///<summary>
    ///  Returns or sets the intercharacter spacing increment.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents the chart portion formatting properties used in charts.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartPortionFormat')]
  DNIChartPortionFormat = interface(DNIBasePortionFormat)
  ['{4390C872-A26E-48BA-86C0-D030CA3E8A51}']
  { getters & setters } 

    function get_AsIBasePortionFormat: DNIBasePortionFormat;

  { propertys } 

    ///<summary>
    ///  Returns IBasePortionFormat interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBasePortionFormat: DNIBasePortionFormat read get_AsIBasePortionFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  This class contains the text portion formatting properties. Unlike <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  , all properties of this class are writeable.
  ///</summary>
  ///<remarks><para>This class is used to return and manipulate text portion formatting properties defined for the particular portion. This means that
  ///  no inheritance is applied when getting values so for the majority of cases you will get values meaning "undefined".</para><para>In order to get the effective formatting parameter values including inherited you need to use <see cref="M:Aspose.Slides.IPortionFormat.GetEffective" />
  ///  method
  ///  which returns a <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  instance.</para></remarks>
  [DNTypeName('Aspose.Slides.IPortionFormat')]
  DNIPortionFormat = interface(DNIBasePortionFormat)
  ['{E777AE35-C0D9-48EF-8074-CA370A9D12F4}']
  { getters & setters } 

    function get_BookmarkId: string;
    procedure set_BookmarkId(value: string);
    function get_SmartTagClean: Boolean;
    procedure set_SmartTagClean(value: Boolean);
    function get_AsIBasePortionFormat: DNIBasePortionFormat;
    function get_AsIHyperlinkContainer: DNIHyperlinkContainer;

  { methods } 

    ///<summary>
    ///  Gets effective portion formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIPortionFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns or sets bookmark identifier.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property BookmarkId: string read get_BookmarkId write set_BookmarkId;
    ///<summary>
    ///  Determines whether the smart tag should be cleaned. No inheritance applied.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SmartTagClean: Boolean read get_SmartTagClean write set_SmartTagClean;
    ///<summary>
    ///  Returns IBasePortionFormat interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBasePortionFormat" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBasePortionFormat: DNIBasePortionFormat read get_AsIBasePortionFormat;
    ///<summary>
    ///  Allows to get base IHyperlinkContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIHyperlinkContainer: DNIHyperlinkContainer read get_AsIHyperlinkContainer;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Base interface for immutable objects which contain effective text portion formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBasePortionFormatEffectiveData')]
  DNIBasePortionFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{6CEA9887-6292-416C-9763-B3D0A6DE79E5}']
  { getters & setters } 

    function get_LineFormat: DNILineFormatEffectiveData;
    function get_FillFormat: DNIFillFormatEffectiveData;
    function get_EffectFormat: DNIEffectFormatEffectiveData;
    function get_HighlightColor: DDN.Aspose.Common.DNColor;
    function get_UnderlineLineFormat: DNILineFormatEffectiveData;
    function get_UnderlineFillFormat: DNIFillFormatEffectiveData;
    function get_FontBold: Boolean;
    function get_FontItalic: Boolean;
    function get_Kumimoji: Boolean;
    function get_NormaliseHeight: Boolean;
    function get_ProofDisabled: Boolean;
    function get_FontUnderline: DNTextUnderlineType;
    function get_TextCapType: DNTextCapType;
    function get_StrikethroughType: DNTextStrikethroughType;
    function get_SmartTagClean: Boolean;
    function get_IsHardUnderlineLine: Boolean;
    function get_IsHardUnderlineFill: Boolean;
    function get_FontHeight: Single;
    function get_LatinFont: DNIFontData;
    function get_EastAsianFont: DNIFontData;
    function get_ComplexScriptFont: DNIFontData;
    function get_SymbolFont: DNIFontData;
    function get_Escapement: Single;
    function get_KerningMinimalSize: Single;
    function get_LanguageId: string;
    function get_AlternativeLanguageId: string;
    function get_Spacing: Single;

  { propertys } 

    ///<summary>
    ///  Returns the LineFormat properties for text outlining.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormatEffectiveData read get_LineFormat;
    ///<summary>
    ///  Returns the text FillFormat properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
    ///<summary>
    ///  Returns the text EffectFormat properties.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormatEffectiveData" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormatEffectiveData read get_EffectFormat;
    ///<summary>
    ///  Returns the color used to highlight a text.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property HighlightColor: DDN.Aspose.Common.DNColor read get_HighlightColor;
    ///<summary>
    ///  Returns the LineFormat properties used to outline underline line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property UnderlineLineFormat: DNILineFormatEffectiveData read get_UnderlineLineFormat;
    ///<summary>
    ///  Returns the underline line FillFormat properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property UnderlineFillFormat: DNIFillFormatEffectiveData read get_UnderlineFillFormat;
    ///<summary>
    ///  Determines whether the font is bold.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FontBold: Boolean read get_FontBold;
    ///<summary>
    ///  Determines whether the font is itallic.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FontItalic: Boolean read get_FontItalic;
    ///<summary>
    ///  Determines whether the numbers should ignore text eastern language-specific vertical text layout.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Kumimoji: Boolean read get_Kumimoji;
    ///<summary>
    ///  Determines whether the height of a text should be normalized.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NormaliseHeight: Boolean read get_NormaliseHeight;
    ///<summary>
    ///  Determines whether the text shouldn't be proofed.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ProofDisabled: Boolean read get_ProofDisabled;
    ///<summary>
    ///  Returns the text underline type.
    ///  Read-only <see cref="T:Aspose.Slides.TextUnderlineType" />
    ///  .
    ///</summary>
    property FontUnderline: DNTextUnderlineType read get_FontUnderline;
    ///<summary>
    ///  Returns the type of text capitalization.
    ///  Read-only <see cref="T:Aspose.Slides.TextCapType" />
    ///  .
    ///</summary>
    property TextCapType: DNTextCapType read get_TextCapType;
    ///<summary>
    ///  Returns the strikethrough type of a text.
    ///  Read-only <see cref="T:Aspose.Slides.TextStrikethroughType" />
    ///  .
    ///</summary>
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType;
    ///<summary>
    ///  Determines whether the smart tag should be cleaned.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SmartTagClean: Boolean read get_SmartTagClean;
    ///<summary>
    ///  Determines whether the underline style has own LineFormat properties or inherits it
    ///  from the LineFormat properties of the text.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHardUnderlineLine: Boolean read get_IsHardUnderlineLine;
    ///<summary>
    ///  Determines whether the underline style has own FillFormat properties or inherits it
    ///  from the FillFormat properties of the text.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHardUnderlineFill: Boolean read get_IsHardUnderlineFill;
    ///<summary>
    ///  Returns the font height of a portion.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FontHeight: Single read get_FontHeight;
    ///<summary>
    ///  Returns the Latin font info.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont;
    ///<summary>
    ///  Returns the East Asian font info.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont;
    ///<summary>
    ///  Returns the complex script font info.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont;
    ///<summary>
    ///  Returns the symbolic font info.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SymbolFont: DNIFontData read get_SymbolFont;
    ///<summary>
    ///  Returns the superscript or subscript text.
    ///  Value from -100% (subscript) to 100% (superscript).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Escapement: Single read get_Escapement;
    ///<summary>
    ///  Returns the minimal font size, for which kerning should be switched on.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property KerningMinimalSize: Single read get_KerningMinimalSize;
    ///<summary>
    ///  Returns the Id of a language.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LanguageId: string read get_LanguageId;
    ///<summary>
    ///  Returns the Id of an alternative language.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeLanguageId: string read get_AlternativeLanguageId;
    ///<summary>
    ///  Returns the intercharacter spacing increment.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Spacing: Single read get_Spacing;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective text portion formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IPortionFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IPortionFormatEffectiveData')]
  DNIPortionFormatEffectiveData = interface(DNIBasePortionFormatEffectiveData)
  ['{757186F8-22ED-4C02-83C5-05B5037610B3}']
  { getters & setters } 

    function get_BookmarkId: string;
    function get_HyperlinkClick: DNIHyperlink;
    function get_HyperlinkMouseOver: DNIHyperlink;
    function get_AsIBasePortionFormatEffectiveData: DNIBasePortionFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns bookmark identifier.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property BookmarkId: string read get_BookmarkId;
    ///<summary>
    ///  Returns the hyperlink defined for mouse click.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick;
    ///<summary>
    ///  Returns the hyperlink defined for mouse over.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver;
    ///<summary>
    ///  Returns IBasePortionFormatEffectiveData interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIBasePortionFormatEffectiveData: DNIBasePortionFormatEffectiveData read get_AsIBasePortionFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents Shape lock (disabled operation).
  ///</summary>
  [DNTypeName('Aspose.Slides.IBaseShapeLock')]
  DNIBaseShapeLock = interface(DDN.mscorlib.DNObject)
  ['{3A18D0DA-08E0-4B1C-ADCB-D7C5AD0B5279}']
  { getters & setters } 

    function get_NoLocks: Boolean;

  { propertys } 

    ///<summary>
    ///  Return true if all lock-flags are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property NoLocks: Boolean read get_NoLocks;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines which operations are disabled on the parent AutoshapeEx.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAutoShapeLock')]
  DNIAutoShapeLock = interface(DNIBaseShapeLock)
  ['{00B2A808-AD69-46D8-9AC0-2A0ABCB17E1E}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_TextLocked: Boolean;
    procedure set_TextLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    ///<summary>
    ///  Determines whether an adding this shape to a group is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether a selecting this shape is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether a changing rotation angle of this shape is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    ///<summary>
    ///  Determines whether a shape have to preserve aspect ratio on resizing.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether a moving this shape is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether a resizing this shape is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Determines whether a direct changing of contour of this shape is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    ///<summary>
    ///  Determines whether a changing adjust values is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    ///<summary>
    ///  Determines whether a changing arrowheads is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    ///<summary>
    ///  Determines whether a changing of a shape type is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    ///<summary>
    ///  Determines whether an editing of text is forbidden.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property TextLocked: Boolean read get_TextLocked write set_TextLocked;
    ///<summary>
    ///  Allows to get base IBaseShapeLock interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines which operations are disabled on the parent Connector.
  ///</summary>
  [DNTypeName('Aspose.Slides.IConnectorLock')]
  DNIConnectorLock = interface(DNIBaseShapeLock)
  ['{E17362A3-F110-4E61-BBA1-10DFBA941394}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionMove: Boolean;
    procedure set_PositionMove(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    ///<summary>
    ///  Determines whether an adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether a selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether a changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    ///<summary>
    ///  Determines whether a shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether a moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionMove: Boolean read get_PositionMove write set_PositionMove;
    ///<summary>
    ///  Determines whether a resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Determines whether a direct changing of contour of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    ///<summary>
    ///  Determines whether a changing adjust values is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    ///<summary>
    ///  Determines whether a changing arrowheads is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    ///<summary>
    ///  Determines whether a changing of a shape type is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    ///<summary>
    ///  Allows to get base IBaseShapeLock interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines which operations are disabled on the parent GraphicalObjectEx.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGraphicalObjectLock')]
  DNIGraphicalObjectLock = interface(DNIBaseShapeLock)
  ['{F1F6D7AC-6B8C-4EFE-85A8-1FEED15CACBE}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_DrilldownLocked: Boolean;
    procedure set_DrilldownLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    ///<summary>
    ///  Determines whether adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether selecting subshapes of this object is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DrilldownLocked: Boolean read get_DrilldownLocked write set_DrilldownLocked;
    ///<summary>
    ///  Determines whether selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Allows to get base IBaseShapeLock interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines which operations are disabled on the parent GroupShape.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGroupShapeLock')]
  DNIGroupShapeLock = interface(DNIBaseShapeLock)
  ['{F6DCF748-FCB1-47BA-A49B-F9E395963E9D}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_UngroupingLocked: Boolean;
    procedure set_UngroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    ///<summary>
    ///  Determines whether adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether splitting this groupshape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UngroupingLocked: Boolean read get_UngroupingLocked write set_UngroupingLocked;
    ///<summary>
    ///  Determines whether selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    ///<summary>
    ///  Determines whether shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Allows to get base IBaseShapeLock interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Determines which operations are disabled on the parent PictureFrameEx.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPictureFrameLock')]
  DNIPictureFrameLock = interface(DNIBaseShapeLock)
  ['{571955F4-210F-456B-A171-B416757BD2E2}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_CropLocked: Boolean;
    procedure set_CropLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    ///<summary>
    ///  Determines whether an adding this shape to a group is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    ///<summary>
    ///  Determines whether a selecting this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    ///<summary>
    ///  Determines whether a changing rotation angle of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    ///<summary>
    ///  Determines whether a shape have to preserve aspect ratio on resizing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Determines whether a moving this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    ///<summary>
    ///  Determines whether a resizing this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    ///<summary>
    ///  Determines whether a direct changing of contour of this shape is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    ///<summary>
    ///  Determines whether a changing adjust values is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    ///<summary>
    ///  Determines whether a changing arrowheads is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    ///<summary>
    ///  Determines whether a changing of a shape type is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    ///<summary>
    ///  Determines whether an image cropping is forbidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CropLocked: Boolean read get_CropLocked write set_CropLocked;
    ///<summary>
    ///  Allows to get base IBaseShapeLock interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Base interface for immutable objects which contain effective table formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBaseTableFormatEffectiveData')]
  DNIBaseTableFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{C731ADBF-C8FD-4FCF-B16E-92916F51B002}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormatEffectiveData;
    function get_BorderLeft: DNILineFormatEffectiveData;
    function get_BorderTop: DNILineFormatEffectiveData;
    function get_BorderRight: DNILineFormatEffectiveData;
    function get_BorderBottom: DNILineFormatEffectiveData;
    function get_BorderDiagonalDown: DNILineFormatEffectiveData;
    function get_BorderDiagonalUp: DNILineFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns fill format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
    ///<summary>
    ///  Returns left border line format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property BorderLeft: DNILineFormatEffectiveData read get_BorderLeft;
    ///<summary>
    ///  Returns top border line format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property BorderTop: DNILineFormatEffectiveData read get_BorderTop;
    ///<summary>
    ///  Returns right border line format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property BorderRight: DNILineFormatEffectiveData read get_BorderRight;
    ///<summary>
    ///  Returns bottom border line format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property BorderBottom: DNILineFormatEffectiveData read get_BorderBottom;
    ///<summary>
    ///  Returns down diagonal line format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property BorderDiagonalDown: DNILineFormatEffectiveData read get_BorderDiagonalDown;
    ///<summary>
    ///  Returns up diagonal line format effective value.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .
    ///</summary>
    property BorderDiagonalUp: DNILineFormatEffectiveData read get_BorderDiagonalUp;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective table cell formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.ICellFormat" />
  ///  interface to return effective formatting values with inheritance and table styles applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.ICellFormatEffectiveData')]
  DNICellFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{2DC4DCC0-4D9E-4792-8622-25F242BA66D7}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Allows to get base IBaseTableFormatEffectiveData interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseTableFormatEffectiveData" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective table column formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IColumnFormat" />
  ///  interface to return effective formatting values with inheritance and table styles applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IColumnFormatEffectiveData')]
  DNIColumnFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{D76E7AE3-D9C3-4A65-B669-45CF8197E2EA}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Allows to get base IBaseTableFormatEffectiveData interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseTableFormatEffectiveData" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective table row formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IRowFormat" />
  ///  interface to return effective formatting values with inheritance and table styles applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IRowFormatEffectiveData')]
  DNIRowFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{4002837D-005C-4E9E-9682-3852B9CC26B9}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Allows to get base IBaseTableFormatEffectiveData interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseTableFormatEffectiveData" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective table formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.ITableFormat" />
  ///  interface to return effective formatting values with inheritance and table styles applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.ITableFormatEffectiveData')]
  DNITableFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{D6C56FD4-0213-4BE0-B346-5E385BD5BBBD}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Allows to get base IBaseTableFormatEffectiveData interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseTableFormatEffectiveData" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  A Binary Large Object (BLOB) is a binary data stored as a single entity - i.e. BLOB can be an
  ///  audio, video or presentation itself. A number of techniques are used to optimize memory consumption
  ///  while working with BLOBs - which was already stored in the presentation or be added later programmatically.
  ///  Using <see cref="T:Aspose.Slides.IBlobManagementOptions" />
  ///  you can change a different behavior aspects regarding BLOBs
  ///  handling for the <see cref="T:Aspose.Slides.IPresentation" />
  ///  instance lifetime.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBlobManagementOptions')]
  DNIBlobManagementOptions = interface(DDN.mscorlib.DNObject)
  ['{B5E42A1C-0D87-4DB7-BA43-5F5ACFEB8290}']
  { getters & setters } 

    function get_PresentationLockingBehavior: DNPresentationLockingBehavior;
    procedure set_PresentationLockingBehavior(value: DNPresentationLockingBehavior);
    function get_IsTemporaryFilesAllowed: Boolean;
    procedure set_IsTemporaryFilesAllowed(value: Boolean);
    function get_TempFilesRootPath: string;
    procedure set_TempFilesRootPath(value: string);
    function get_MaxBlobsBytesInMemory: UInt64;
    procedure set_MaxBlobsBytesInMemory(value: UInt64);

  { propertys } 

    ///<summary>
    ///  This property defines if an instance of the Presentation class can be an owner of the source - file
    ///  or stream during the instance lifetime. If the instance is an owner, it locks the source. This helps
    ///  to improve memory consumption and performance while working with BLOBs, but the source (stream or file)
    ///  can't be changed during Presentation's instance lifetime. This is an example:
    ///</summary>
    ///<example><code>
    ///  LoadOptions loadOptions = new LoadOptions {
    ///  BlobManagementOptions = {PresentationLockingBehavior = PresentationLockingBehavior.KeepLocked} };
    ///  using (Presentation pres = new Presentation("pres.pptx", loadOptions)) {
    ///  // IOException will be thrown because pres.pptx is locked for a Presentation lifetime
    ///  // File.Delete("pres.pptx");
    ///  }
    ///  // after Presentation object disposed, file is unlocked and can be deleted
    ///  File.Delete("pres.pptx");
    ///</code></example>
    property PresentationLockingBehavior: DNPresentationLockingBehavior read get_PresentationLockingBehavior write set_PresentationLockingBehavior;
    ///<summary>
    ///  This property defines if temporary files can be created while working with BLOBs, what greatly
    ///  decreases  the memory consumption but requires permissions to create files.
    ///<remarks>All files will be deleted after work with the presentation will be finished.</remarks>
    ///</summary>
    property IsTemporaryFilesAllowed: Boolean read get_IsTemporaryFilesAllowed write set_IsTemporaryFilesAllowed;
    ///<summary>
    ///  The root path where temporary files will be created. Hosting process should have permissions to
    ///  create files and folders there.
    ///</summary>
    property TempFilesRootPath: string read get_TempFilesRootPath write set_TempFilesRootPath;
    ///<summary>
    ///  Defines the maximum amount (in bytes) that all BLOBs in total may occupy in memory. First, all BLOBs
    ///  loading into memory as default behavior and only when it reaches the limit defined by this property,
    ///  other mechanisms (such as temporary files) can be involved. In terms of performance, the most efficient
    ///  way is storing BLOBs in memory, but from the other side, it leads to a high memory consumption what
    ///  may be undesirable. Using this property, you may set the optimal behavior for your environment or
    ///  other requirements.
    ///<remarks>
    ///  This property will be ignored if <see cref="P:Aspose.Slides.IBlobManagementOptions.IsTemporaryFilesAllowed" />
    ///  is
    ///  set to false. It makes no sense to limit the maximum BLOBs in memory, because if
    ///<see cref="P:Aspose.Slides.IBlobManagementOptions.IsTemporaryFilesAllowed" />
    ///  is set to false, the memory is the only place
    ///  where BLOBs can be stored.
    ///</remarks>
    ///<remarks>Default value is 629,145,600 bytes (600Mb).</remarks>
    ///</summary>
    property MaxBlobsBytesInMemory: UInt64 read get_MaxBlobsBytesInMemory write set_MaxBlobsBytesInMemory;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an object with possibility of bulk setting child text elements' formats.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBulkTextFormattable')]
  DNIBulkTextFormattable = interface(DDN.mscorlib.DNObject)
  ['{FEC9B79B-DBD7-483A-821F-A8CBA03250B2}']
  { methods } 

    ///<summary>
    ///  Sets defined portion format properties to all element's portions.
    ///</summary>
    ///  <param name="source">IPortionFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIPortionFormat); overload;
    ///<summary>
    ///  Sets defined paragraph format properties to all element's paragraphs.
    ///</summary>
    ///  <param name="source">IParagraphFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    ///<summary>
    ///  Sets defined text frame format properties to all element's text frames.
    ///</summary>
    ///  <param name="source">ITextFrameFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNITextFrameFormat); overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents paragraph bullet formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBulletFormat')]
  DNIBulletFormat = interface(DDN.mscorlib.DNObject)
  ['{E2F4E958-4B82-4510-8437-967FB948E1E8}']
  { getters & setters } 

    function get_Type: DNBulletType;
    procedure set_Type(value: DNBulletType);
    function get_Char: Char;
    procedure set_Char(value: Char);
    function get_Font: DNIFontData;
    procedure set_Font(value: DNIFontData);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Color: DNIColorFormat;
    function get_Picture: DNISlidesPicture;
    function get_NumberedBulletStartWith: Int16;
    procedure set_NumberedBulletStartWith(value: Int16);
    function get_NumberedBulletStyle: DNNumberedBulletStyle;
    procedure set_NumberedBulletStyle(value: DNNumberedBulletStyle);
    function get_IsBulletHardColor: DNNullableBool;
    procedure set_IsBulletHardColor(value: DNNullableBool);
    function get_IsBulletHardFont: DNNullableBool;
    procedure set_IsBulletHardFont(value: DNNullableBool);

  { methods } 

    ///<summary>
    ///  Sets default non-zero shifts for effective paragraph Indent and MarginLeft when bullets is enabled (like PowerPoint do if enable paragraph bullets/numbering in it). If bullets is disabled then just reset paragraph Indent and MarginLeft (like PowerPoint do if disable paragraph bullets/numbering in it). Indents shifts are applied in regard to current bullet context - IBulletFormat.Type, .NumberedBulletStyle and FontHeight of first portion. Non-zero indents shifts are applied to effective Indent and MarginLeft of current paragraph (make result values to be local values).
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  Calling this method doesn't matter and throw <see cref="T:System.InvalidOperationException" />
    ///  in following cases:
    ///  if parent formatted object is not a paragraph (for example calling ITextStyle.DefaultParagraphFormat.Bullet.ApplyDefaultParagraphIndentsShifts() will throw exception);
    ///  or if paragraph wasn't added to any ITextFrame.Paragraphs collection (add it first);
    ///</exception>
    procedure ApplyDefaultParagraphIndentsShifts;
    ///<summary>
    ///  Gets effective bullet formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IBulletFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some effective bullet format properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes[0] as IAutoShape;
    ///  IBulletFormatEffectiveData effectiveBulletFormat = shape.TextFrame.Paragraphs[0].ParagraphFormat.Bullet.GetEffective();
    ///  Console.WriteLine("Bullet type: " + effectiveBulletFormat.Type);
    ///  if (effectiveBulletFormat.Type == BulletType.Numbered)
    ///  {
    ///  Console.WriteLine("Numbered style: " + effectiveBulletFormat.NumberedBulletStyle);
    ///  Console.WriteLine("Starting number: " + effectiveBulletFormat.NumberedBulletStartWith);
    ///  }
    ///  }
    ///</code></example>
    function GetEffective: DNIBulletFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns or sets the bullet type of a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.BulletType" />
    ///  .
    ///</summary>
    property &Type: DNBulletType read get_Type write set_Type;
    ///<summary>
    ///  Returns or sets the bullet char of a paragraph with no inheritance.
    ///  Read/write <see cref="T:System.Char" />
    ///  .
    ///</summary>
    property Char: Char read get_Char write set_Char;
    ///<summary>
    ///  Returns or sets the bullet font of a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property Font: DNIFontData read get_Font write set_Font;
    ///<summary>
    ///  Returns or sets the bullet height of a paragraph with no inheritance.
    ///  Value float.NaN determines that bullet inherits height from the first portion in the paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Returns the color format of a bullet of a paragraph with no inheritance.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
    ///<summary>
    ///  Returns the picture used as a bullet in a paragraph with no inheritance.
    ///  Read-only <see cref="T:Aspose.Slides.ISlidesPicture" />
    ///  .
    ///</summary>
    property Picture: DNISlidesPicture read get_Picture;
    ///<summary>
    ///  Returns or sets the first number which is used for group of numbered bullets with no inheritance.
    ///  Read/write <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property NumberedBulletStartWith: Int16 read get_NumberedBulletStartWith write set_NumberedBulletStartWith;
    ///<summary>
    ///  Returns or sets the style of a numbered bullet with no inheritance.
    ///  Read/write <see cref="P:Aspose.Slides.IBulletFormat.NumberedBulletStyle" />
    ///  .
    ///</summary>
    property NumberedBulletStyle: DNNumberedBulletStyle read get_NumberedBulletStyle write set_NumberedBulletStyle;
    ///<summary>
    ///  Determines whether the bullet has own color or inherits it from the first portion in the paragraph.
    ///<b>NullableBool.True</b>
    ///  if bullet has own color and <b>NullableBool.False</b>
    ///  if bullet
    ///  inherits color from the first portion in the paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsBulletHardColor: DNNullableBool read get_IsBulletHardColor write set_IsBulletHardColor;
    ///<summary>
    ///  Determines whether the bullet has own font or inherits it from the first portion in the paragraph.
    ///<b>NullableBool.True</b>
    ///  if bullet has own font and <b>NullableBool.False</b>
    ///  if bullet
    ///  inherits font from the first portion in the paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsBulletHardFont: DNNullableBool read get_IsBulletHardFont write set_IsBulletHardFont;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective paragraph bullet formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.IBulletFormatEffectiveData')]
  DNIBulletFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{22455686-05FD-47D4-ACAC-DD583B84D55C}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_Char: Char;
    function get_ActualBulletValue: string;
    function get_Font: DNIFontData;
    function get_Height: Single;
    function get_NumberedBulletStartWith: Int16;
    function get_NumberedBulletStyle: DNNumberedBulletStyle;
    function get_Color: DDN.Aspose.Common.DNColor;
    function get_IsBulletHardColor: Boolean;
    function get_IsBulletHardFont: Boolean;
    function get_Picture: DNIPictureEffectiveData;
    function get_FillFormat: DNIFillFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns the bullet type of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.BulletType" />
    ///  .
    ///</summary>
    property &Type: DNBulletType read get_Type;
    ///<summary>
    ///  Returns the bullet char of a paragraph.
    ///  Read-only <see cref="T:System.Char" />
    ///  .
    ///</summary>
    property Char: Char read get_Char;
    ///<summary>
    ///  Returns actual bullet value for parent paragraph.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ActualBulletValue: string read get_ActualBulletValue;
    ///<summary>
    ///  Returns the bullet font of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property Font: DNIFontData read get_Font;
    ///<summary>
    ///  Returns the bullet height of a paragraph.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height;
    ///<summary>
    ///  Returns the first number which is used for group of numbered bullets.
    ///  Read-only <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property NumberedBulletStartWith: Int16 read get_NumberedBulletStartWith;
    ///<summary>
    ///  Returns the style of a numbered bullet.
    ///  Read-only <see cref="T:Aspose.Slides.NumberedBulletStyle" />
    ///  .
    ///</summary>
    property NumberedBulletStyle: DNNumberedBulletStyle read get_NumberedBulletStyle;
    ///<summary>
    ///  Returns the color of a bullet.
    ///  Read-only <see cref="P:Aspose.Slides.IBulletFormatEffectiveData.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
    ///<summary>
    ///  Determines whether the bullet has own color or inherits it from the first portion in the paragraph.
    ///  Returns <b>true</b>
    ///  if bullet has own color and <b>false</b>
    ///  if bullet inherits color from the first portion in the paragraph.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsBulletHardColor: Boolean read get_IsBulletHardColor;
    ///<summary>
    ///  Determines whether the bullet has own font or inherits it from the first portion in the paragraph.
    ///  Returns <b>true</b>
    ///  if bullet has own font and <b>true</b>
    ///  if bullet inherits font from the first portion in the paragraph.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsBulletHardFont: Boolean read get_IsBulletHardFont;
    ///<summary>
    ///  Returns the picture used as a bullet in the paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureEffectiveData" />
    ///  .
    ///</summary>
    property Picture: DNIPictureEffectiveData read get_Picture;
    ///<summary>
    ///  Returns the bullet fill format of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    ///<example>
    ///  This example demonstrates retrieving bullet's fill effective data.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  // Assume that the first shape on the first slide is AutoShape with some text...
    ///  // Output information about text paragraphs' bullets
    ///  AutoShape autoShape = (AutoShape)pres.Slides[0].Shapes[0];
    ///  foreach (Paragraph para in autoShape.TextFrame.Paragraphs)
    ///  {
    ///  IBulletFormatEffectiveData bulletFormatEffective = para.ParagraphFormat.Bullet.GetEffective();
    ///  Console.WriteLine("Bullet type: " + bulletFormatEffective.Type);
    ///  if (bulletFormatEffective.Type != BulletType.None)
    ///  {
    ///  Console.WriteLine("Bullet fill type: " + bulletFormatEffective.FillFormat.FillType);
    ///  switch (bulletFormatEffective.FillFormat.FillType)
    ///  {
    ///  case FillType.Solid:
    ///  Console.WriteLine("Solid fill color: " + bulletFormatEffective.FillFormat.SolidFillColor);
    ///  break;
    ///  case FillType.Gradient:
    ///  Console.WriteLine("Gradient stops count: " + bulletFormatEffective.FillFormat.GradientFormat.GradientStops.Count);
    ///  foreach (IGradientStopEffectiveData gradStop in bulletFormatEffective.FillFormat.GradientFormat.GradientStops)
    ///  Console.WriteLine(gradStop.Position + ": " + gradStop.Color);
    ///  break;
    ///  case FillType.Pattern:
    ///  Console.WriteLine("Pattern style: " + bulletFormatEffective.FillFormat.PatternFormat.PatternStyle);
    ///  Console.WriteLine("Fore color: " + bulletFormatEffective.FillFormat.PatternFormat.ForeColor);
    ///  Console.WriteLine("Back color: " + bulletFormatEffective.FillFormat.PatternFormat.BackColor);
    ///  break;
    ///  }
    ///  }
    ///  Console.WriteLine();
    ///  }
    ///  }
    ///</code></example>
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents Camera.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICamera')]
  DNICamera = interface(DDN.mscorlib.DNObject)
  ['{E8EDABD0-0E1D-442F-9349-28B28A7D2741}']
  { getters & setters } 

    function get_CameraType: DNCameraPresetType;
    procedure set_CameraType(value: DNCameraPresetType);
    function get_FieldOfViewAngle: Single;
    procedure set_FieldOfViewAngle(value: Single);
    function get_Zoom: Single;
    procedure set_Zoom(value: Single);

  { methods } 

    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  If any of coordinate value is float.NaN, all rotation is undefined.
    ///</summary>
    ///  <param name="latitude">Latitude value <see cref="T:System.Single" />
    ///</param>
    ///  .
    ///  <param name="longitude">Longitude value <see cref="T:System.Single" />
    ///</param>
    ///  <param name="revolution">revolution valule <see cref="T:System.Single" />
    ///</param>
    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  first element in return array - latitude, second - longitude, third - revolution.
    ///  Returns null if no rotation defined.
    ///</summary>
    ///<returns>
    ///  Array of rotation values as <see cref="T:System.Single" />
    ///  [].
    ///</returns>
    function GetRotation: TArray<Single>;

  { propertys } 

    ///<summary>
    ///  Camera type
    ///  Read/write <see cref="T:Aspose.Slides.CameraPresetType" />
    ///  .
    ///</summary>
    property CameraType: DNCameraPresetType read get_CameraType write set_CameraType;
    ///<summary>
    ///  Camera FOV (0-180 deg, field of View)
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FieldOfViewAngle: Single read get_FieldOfViewAngle write set_FieldOfViewAngle;
    ///<summary>
    ///  Camera zoom (positive value in percentage)
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Zoom: Single read get_Zoom write set_Zoom;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective camera properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IThreeDFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.ICameraEffectiveData')]
  DNICameraEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{45B98657-476A-4BE7-9C3E-4A1805A483E4}']
  { getters & setters } 

    function get_CameraType: DNCameraPresetType;
    function get_FieldOfViewAngle: Single;
    function get_Zoom: Single;

  { methods } 

    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  first element in return array - latitude, second - longitude, third - revolution.
    ///  Returns null if no rotation defined.
    ///</summary>
    ///<returns>
    ///  Array of rotation values as <see cref="T:System.Single" />
    ///  [].
    ///</returns>
    function GetRotation: TArray<Single>;

  { propertys } 

    ///<summary>
    ///  Camera type.
    ///  Read-only <see cref="T:Aspose.Slides.CameraPresetType" />
    ///  .
    ///</summary>
    property CameraType: DNCameraPresetType read get_CameraType;
    ///<summary>
    ///  Camera FOV (0-180 deg, field of View).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FieldOfViewAngle: Single read get_FieldOfViewAngle;
    ///<summary>
    ///  Camera zoom (positive value in percentage).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Zoom: Single read get_Zoom;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents format of a table cell.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICellFormat')]
  DNICellFormat = interface(DDN.mscorlib.DNObject)
  ['{5DEB8252-0F1C-4195-BB98-1CBBF7F6AE30}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;
    function get_BorderLeft: DNILineFormat;
    function get_BorderTop: DNILineFormat;
    function get_BorderRight: DNILineFormat;
    function get_BorderBottom: DNILineFormat;
    function get_BorderDiagonalDown: DNILineFormat;
    function get_BorderDiagonalUp: DNILineFormat;

  { methods } 

    ///<summary>
    ///  Gets effective table cell formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ICellFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNICellFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns a cell fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns a left border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderLeft: DNILineFormat read get_BorderLeft;
    ///<summary>
    ///  Returns a top border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderTop: DNILineFormat read get_BorderTop;
    ///<summary>
    ///  Returns a right border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderRight: DNILineFormat read get_BorderRight;
    ///<summary>
    ///  Returns a bottom border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderBottom: DNILineFormat read get_BorderBottom;
    ///<summary>
    ///  Returns a top-left to bottom-right diagonal line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderDiagonalDown: DNILineFormat read get_BorderDiagonalDown;
    ///<summary>
    ///  Returns a bottom-left to top-right diagonal line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderDiagonalUp: DNILineFormat read get_BorderDiagonalUp;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents different color operations used for color transformations.
  ///</summary>
  [DNTypeName('Aspose.Slides.IColorOperation')]
  DNIColorOperation = interface(DDN.mscorlib.DNObject)
  ['{D9E1C445-A827-40A7-B093-D301DBAF0130}']
  { getters & setters } 

    function get_OperationType: DNColorTransformOperation;
    function get_Parameter: Single;

  { propertys } 

    ///<summary>
    ///  Returns or sets the type of an operation.
    ///  Read-only <see cref="T:Aspose.Slides.ColorTransformOperation" />
    ///  .
    ///</summary>
    property OperationType: DNColorTransformOperation read get_OperationType;
    ///<summary>
    ///  Returns a parameter of an operation.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Parameter: Single read get_Parameter;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents format of a table column.
  ///</summary>
  [DNTypeName('Aspose.Slides.IColumnFormat')]
  DNIColumnFormat = interface(DDN.mscorlib.DNObject)
  ['{97013C96-3D09-4242-927A-5ED723C271B1}']
  { methods } 

    ///<summary>
    ///  Gets effective table column formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IColumnFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIColumnFormatEffectiveData;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a comment on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IComment')]
  DNIComment = interface(DDN.mscorlib.DNObject)
  ['{B0A925DF-72CE-4603-90BD-58B5AB6BB967}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_Slide: DNISlide;
    function get_Author: DNICommentAuthor;
    function get_Position: DDN.Aspose.Common.DNPointF;
    procedure set_Position(value: DDN.Aspose.Common.DNPointF);
    function get_ParentComment: DNIComment;
    procedure set_ParentComment(value: DNIComment);

  { methods } 

    ///<summary>
    ///  Removes comment and all its replies from the parent collection.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">Thrown if comment is already removed</exception>
    procedure Remove;

  { propertys } 

    ///<summary>
    ///  Returns or sets the plain text of a slide comment.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns or sets the time of a comment creation.
    ///  Setting this property to <see cref="F:System.DateTime.MinValue" />
    ///  means no comment time is set.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    ///<remarks>Comment time is an optional parameter.</remarks>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Returns or sets the parent slide of a comment.
    ///  Read-only <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    property Slide: DNISlide read get_Slide;
    ///<summary>
    ///  Returns the author of a comment.
    ///  Read-only <see cref="T:Aspose.Slides.ICommentAuthor" />
    ///  .
    ///</summary>
    property Author: DNICommentAuthor read get_Author;
    ///<summary>
    ///  Returns or sets the position of a comment on a slide.
    ///  Read/write <see cref="T:System.Drawing.PointF" />
    ///  .
    ///</summary>
    property Position: DDN.Aspose.Common.DNPointF read get_Position write set_Position;
    ///<summary>
    ///  Gets or sets parent comment.
    ///  Read/write <see cref="T:Aspose.Slides.IComment" />
    ///  .
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">Thrown if setting the value leads to a circular reference</exception>
    property ParentComment: DNIComment read get_ParentComment write set_ParentComment;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an author of comments.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICommentAuthor')]
  DNICommentAuthor = interface(DDN.mscorlib.DNObject)
  ['{8E007050-0F50-42B8-B5D6-0DC8289D12E2}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Initials: string;
    procedure set_Initials(value: string);
    function get_Comments: DNICommentCollection;

  { methods } 

    ///<summary>
    ///  Removes the author from the parent collection.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">Thrown if author is already removed.</exception>
    procedure Remove;

  { propertys } 

    ///<summary>
    ///  Returns or sets the author's name.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the authors initials.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Initials: string read get_Initials write set_Initials;
    ///<summary>
    ///  Returns the collection of comments made by this author.
    ///  Read-only <see cref="T:Aspose.Slides.ICommentCollection" />
    ///  .
    ///</summary>
    property Comments: DNICommentCollection read get_Comments;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents common slide view properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICommonSlideViewProperties')]
  DNICommonSlideViewProperties = interface(DDN.mscorlib.DNObject)
  ['{3D691F28-8346-4274-B17F-92DF3D694A74}']
  { getters & setters } 

    function get_Scale: Int32;
    procedure set_Scale(value: Int32);
    function get_VariableScale: Boolean;
    procedure set_VariableScale(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Specifies the view scaling ratio in percentages.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Throws when value less than zero.</exception>
    property Scale: Int32 read get_Scale write set_Scale;
    ///<summary>
    ///  Specifies that the view content should automatically scale to best fit the current window size.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property VariableScale: Boolean read get_VariableScale write set_VariableScale;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents container for custom data.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICustomData')]
  DNICustomData = interface(DDN.mscorlib.DNObject)
  ['{DA14715A-8BCF-44BD-9A26-9CC4600E956F}']
  { getters & setters } 

    function get_Tags: DNITagCollection;
    function get_CustomXmlParts: DNICustomXmlPartCollection;

  { propertys } 

    ///<summary>
    ///  Returns the Customer Data Tags collection.
    ///  Read-only <see cref="T:Aspose.Slides.ITagCollection" />
    ///  .
    ///</summary>
    property Tags: DNITagCollection read get_Tags;
    ///<summary>
    ///  Returns the custom xml parts collection.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomXmlPartCollection" />
    ///  .
    ///</summary>
    property CustomXmlParts: DNICustomXmlPartCollection read get_CustomXmlParts;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents custom xml part.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICustomXmlPart')]
  DNICustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{664B786F-0236-4617-A999-105A5418F0FD}']
  { getters & setters } 

    function get_XmlAsString: string;
    procedure set_XmlAsString(value: string);
    function get_XmlData: TArray<Byte>;
    procedure set_XmlData(value: TArray<Byte>);
    function get_ItemId: DDN.mscorlib.DNGuid;
    procedure set_ItemId(value: DDN.mscorlib.DNGuid);
    function get_NamespaceSchemas: TArray<string>;

  { methods } 

    ///<summary>
    ///  Removes the custom xml part from the presentation.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">Thrown if xml part is already removed.</exception>
    procedure Remove;

  { propertys } 

    ///<summary>
    ///  Returns or sets xml data as UTF-8 string.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///<exception cref="T:System.ArgumentNullException">value is <c>null</c>.</exception><exception cref="T:System.ArgumentException">value is empty or xml-data is invalid.</exception></summary>
    property XmlAsString: string read get_XmlAsString write set_XmlAsString;
    ///<summary>
    ///  Returns or sets xml data.
    ///  Read/write <see cref="T:System.Byte" />
    ///  [].
    ///<exception cref="T:System.ArgumentNullException">value is <c>null</c>.</exception><exception cref="T:System.ArgumentException">value is empty or xml-data is invalid.</exception></summary>
    property XmlData: TArray<Byte> read get_XmlData write set_XmlData;
    ///<summary>
    ///  Specifies a globally unique identifier (GUID) that uniquely identifies a single custom XML
    ///  part within an Office Open XML document.
    ///  Read-only <see cref="T:System.Guid" />
    ///  .
    ///</summary>
    property ItemId: DDN.mscorlib.DNGuid read get_ItemId write set_ItemId;
    ///<summary>
    ///  Returns the collection XML schemas that are associated with the custom XML part.
    ///  Read-only <see cref="T:System.String" />
    ///  [].
    ///</summary>
    property NamespaceSchemas: TArray<string> read get_NamespaceSchemas;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Digital signature in signed file.
  ///</summary>
  [DNTypeName('Aspose.Slides.IDigitalSignature')]
  DNIDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{90381A5B-4353-4400-8CB9-1D5B1EC81E16}']
  { getters & setters } 

    function get_Certificate: DDN.Aspose.Common.DNX509Certificate2;
    function get_IsValid: Boolean;
    function get_SignTime: DDN.mscorlib.DNDateTime;
    function get_Comments: string;
    procedure set_Comments(value: string);

  { propertys } 

    ///<summary>
    ///  Certificate object that was used to sign the document.
    ///  Read-only <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  .
    ///</summary>
    property Certificate: DDN.Aspose.Common.DNX509Certificate2 read get_Certificate;
    ///<summary>
    ///  If this digital signature is valid and the document has not been tampered with, this value will be true.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentationSigned.pptx"))
    ///  {
    ///  foreach (DigitalSignature signature in pres.DigitalSignatures)
    ///  Console.WriteLine("Signature check: " + (signature.IsValid ? "VALID" : "INVALID"));
    ///  }
    ///</code></example>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  The time when the document was signed.
    ///  Read-only <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentationSigned.pptx"))
    ///  {
    ///  foreach (DigitalSignature signature in pres.DigitalSignatures)
    ///  Console.WriteLine("Signature check: " + (signature.IsValid ? "VALID" : "INVALID") + ", Signing time: " + signature.SignTime);
    ///  }
    ///</code></example>
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime;
    ///<summary>
    ///  The purpose of signature.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents properties of a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IDocumentProperties')]
  DNIDocumentProperties = interface(DDN.mscorlib.DNObject)
  ['{C509302A-0FD1-4187-B1E6-BCB1C3776B4E}']
  { getters & setters } 

    function get_AppVersion: string;
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_PresentationFormat: string;
    procedure set_PresentationFormat(value: string);
    function get_SharedDoc: Boolean;
    procedure set_SharedDoc(value: Boolean);
    function get_ApplicationTemplate: string;
    procedure set_ApplicationTemplate(value: string);
    function get_TotalEditingTime: DDN.mscorlib.DNTimeSpan;
    procedure set_TotalEditingTime(value: DDN.mscorlib.DNTimeSpan);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_CountOfCustomProperties: Int32;
    function get_Item(name: string): DDN.mscorlib.DNObject;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  Return a custom property name at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of a custom property to get.</param>
    ///<returns>Custom property name at the specified index.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Index is less than zero. Index is equal to or greater than Count.
    ///</exception>
    function GetCustomPropertyName(index: Int32): string;
    ///<summary>
    ///  Remove a custom property associated with a specified name.
    ///</summary>
    ///  <param name="name">Name of a custom property to remove.</param>
    ///<returns>Return true if a property was removed, false overwise.</returns>
    function RemoveCustomProperty(name: string): Boolean;
    ///<summary>
    ///  Check presents of a custom property with a specified name.
    ///</summary>
    ///  <param name="name">Name of a custom property to check.</param>
    ///<returns>Return true if property exists, false overwise.</returns>
    function ContainsCustomProperty(name: string): Boolean;
    ///<summary>
    ///  Removes all custom properties.
    ///</summary>
    procedure ClearCustomProperties;
    ///<summary>
    ///  Clears and sets default values for all builtIn properties.
    ///</summary>
    procedure ClearBuiltInProperties;
    procedure GetCustomPropertyValue(name: string; out value: Boolean); overload;
    procedure GetCustomPropertyValue(name: string; out value: Int32); overload;
    procedure GetCustomPropertyValue(name: string; out value: DDN.mscorlib.DNDateTime); overload;
    procedure GetCustomPropertyValue(name: string; out value: string); overload;
    procedure GetCustomPropertyValue(name: string; out value: Single); overload;
    procedure GetCustomPropertyValue(name: string; out value: Double); overload;
    ///<summary>
    ///  Sets a named boolean custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Boolean); overload;
    ///<summary>
    ///  Sets a named integer custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Int32); overload;
    ///<summary>
    ///  Sets a named DateTime custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  Sets a named string custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: string); overload;
    ///<summary>
    ///  Sets a named float custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Single); overload;
    ///<summary>
    ///  Sets a named double custom property.
    ///</summary>
    ///  <param name="name">Name of the custom property to set</param>
    ///  <param name="value">Custom property value</param>
    procedure SetCustomPropertyValue(name: string; value: Double); overload;

  { propertys } 

    ///<summary>
    ///  Returns the app version.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AppVersion: string read get_AppVersion;
    ///<summary>
    ///  Returns or sets the name of the application.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    ///<summary>
    ///  Returns or sets the company property.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Company: string read get_Company write set_Company;
    ///<summary>
    ///  Returns or sets the manager property.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Manager: string read get_Manager write set_Manager;
    ///<summary>
    ///  Returns or sets the intended format of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property PresentationFormat: string read get_PresentationFormat write set_PresentationFormat;
    ///<summary>
    ///  Determines whether the presentation is shared between multiple people.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SharedDoc: Boolean read get_SharedDoc write set_SharedDoc;
    ///<summary>
    ///  Returns or sets the template of a application.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ApplicationTemplate: string read get_ApplicationTemplate write set_ApplicationTemplate;
    ///<summary>
    ///  Total editing time of a presentation.
    ///  Read/write <see cref="T:System.TimeSpan" />
    ///  .
    ///</summary>
    property TotalEditingTime: DDN.mscorlib.DNTimeSpan read get_TotalEditingTime write set_TotalEditingTime;
    ///<summary>
    ///  Returns or sets the title of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns or sets the subject of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Returns or sets the author of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Returns or sets the keywords of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  Returns or sets the comments of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
    ///<summary>
    ///  Returns or sets the category of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Category: string read get_Category write set_Category;
    ///<summary>
    ///  Returns the date when a presentation was created.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Returns the date when a presentation was modified last time.
    ///  Read-only in case of Presentation.DocumentProperties (because it will be updated internally while IPresentation object saving process).
    ///  Can be changed via DocumentProperties instance returning by method <see cref="M:Aspose.Slides.IPresentationInfo.ReadDocumentProperties" />
    ///  Please see the example in <see cref="M:Aspose.Slides.IPresentationInfo.UpdateDocumentProperties(Aspose.Slides.IDocumentProperties)" />
    ///  method summary.
    ///</summary>
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    ///<summary>
    ///  Returns the date when a presentation was printed last time.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    ///<summary>
    ///  Returns or sets the name of a last person who modified a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    ///<summary>
    ///  Returns or sets the presentation revision number.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    ///<summary>
    ///  Returns or sets the content status of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    ///<summary>
    ///  Returns or sets the content type of a presentation.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  Returns or sets the HyperlinkBase document property.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    ///<summary>
    ///  Returns the number of custom properties actually contained in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property CountOfCustomProperties: Int32 read get_CountOfCustomProperties;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Auxiliary effect parameters interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.IEffectParamSource')]
  DNIEffectParamSource = interface(DDN.mscorlib.DNObject)
  ['{09895414-47E4-492A-B121-E78DF3D7BD46}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents effect properties of shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.IEffectFormat')]
  DNIEffectFormat = interface(DNIEffectParamSource)
  ['{1B7B9DDA-82CF-44D4-B422-DB2DC70B9B55}']
  { getters & setters } 

    function get_IsNoEffects: Boolean;
    function get_BlurEffect: DNIBlur;
    procedure set_BlurEffect(value: DNIBlur);
    function get_FillOverlayEffect: DNIFillOverlay;
    procedure set_FillOverlayEffect(value: DNIFillOverlay);
    function get_GlowEffect: DNIGlow;
    procedure set_GlowEffect(value: DNIGlow);
    function get_InnerShadowEffect: DNIInnerShadow;
    procedure set_InnerShadowEffect(value: DNIInnerShadow);
    function get_OuterShadowEffect: DNIOuterShadow;
    procedure set_OuterShadowEffect(value: DNIOuterShadow);
    function get_PresetShadowEffect: DNIPresetShadow;
    procedure set_PresetShadowEffect(value: DNIPresetShadow);
    function get_ReflectionEffect: DNIReflection;
    procedure set_ReflectionEffect(value: DNIReflection);
    function get_SoftEdgeEffect: DNISoftEdge;
    procedure set_SoftEdgeEffect(value: DNISoftEdge);
    function get_AsIEffectParamSource: DNIEffectParamSource;

  { methods } 

    ///<summary>
    ///  Sets blur effect.
    ///</summary>
    ///  <param name="radius">Radius.</param>
    ///  <param name="grow">Grow.</param>
    procedure SetBlurEffect(radius: Double; grow: Boolean);
    ///<summary>
    ///  Enables fill overlay effect.
    ///</summary>
    procedure EnableFillOverlayEffect;
    ///<summary>
    ///  Enables glow effect.
    ///</summary>
    procedure EnableGlowEffect;
    ///<summary>
    ///  Enables inner shadow effect.
    ///</summary>
    procedure EnableInnerShadowEffect;
    ///<summary>
    ///  Enables outer shadow effect.
    ///</summary>
    procedure EnableOuterShadowEffect;
    ///<summary>
    ///  Enables preset shadows effect.
    ///</summary>
    procedure EnablePresetShadowEffect;
    ///<summary>
    ///  Enables reflection effect.
    ///</summary>
    procedure EnableReflectionEffect;
    ///<summary>
    ///  Enables soft edge effect.
    ///</summary>
    procedure EnableSoftEdgeEffect;
    ///<summary>
    ///  Disables blur effect.
    ///</summary>
    procedure DisableBlurEffect;
    ///<summary>
    ///  Disables fill overlay effect.
    ///</summary>
    procedure DisableFillOverlayEffect;
    ///<summary>
    ///  Disable glow effect.
    ///</summary>
    procedure DisableGlowEffect;
    ///<summary>
    ///  Disables inner shadow effect.
    ///</summary>
    procedure DisableInnerShadowEffect;
    ///<summary>
    ///  Disables outer shadow effect.
    ///</summary>
    procedure DisableOuterShadowEffect;
    ///<summary>
    ///  Disables preset shadow effect.
    ///</summary>
    procedure DisablePresetShadowEffect;
    ///<summary>
    ///  Disables reflection effect.
    ///</summary>
    procedure DisableReflectionEffect;
    ///<summary>
    ///  Disables soft edge effect.
    ///</summary>
    procedure DisableSoftEdgeEffect;
    ///<summary>
    ///  Gets effective effect formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IEffectFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIEffectFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns true if all effects are disabled (as just created, default EffectFormat object).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsNoEffects: Boolean read get_IsNoEffects;
    ///<summary>
    ///  Blur effect.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IBlur" />
    ///  .
    ///</summary>
    property BlurEffect: DNIBlur read get_BlurEffect write set_BlurEffect;
    ///<summary>
    ///  Fill overlay effect.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IFillOverlay" />
    ///  .
    ///</summary>
    property FillOverlayEffect: DNIFillOverlay read get_FillOverlayEffect write set_FillOverlayEffect;
    ///<summary>
    ///  Glow effect.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IGlow" />
    ///  .
    ///</summary>
    property GlowEffect: DNIGlow read get_GlowEffect write set_GlowEffect;
    ///<summary>
    ///  Inner shadow.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IInnerShadow" />
    ///  .
    ///</summary>
    property InnerShadowEffect: DNIInnerShadow read get_InnerShadowEffect write set_InnerShadowEffect;
    ///<summary>
    ///  Outer shadow.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IOuterShadow" />
    ///  .
    ///</summary>
    property OuterShadowEffect: DNIOuterShadow read get_OuterShadowEffect write set_OuterShadowEffect;
    ///<summary>
    ///  Preset shadow.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IPresetShadow" />
    ///  .
    ///</summary>
    property PresetShadowEffect: DNIPresetShadow read get_PresetShadowEffect write set_PresetShadowEffect;
    ///<summary>
    ///  Reflection.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IReflection" />
    ///  .
    ///</summary>
    property ReflectionEffect: DNIReflection read get_ReflectionEffect write set_ReflectionEffect;
    ///<summary>
    ///  Soft edge.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.ISoftEdge" />
    ///  .
    ///</summary>
    property SoftEdgeEffect: DNISoftEdge read get_SoftEdgeEffect write set_SoftEdgeEffect;
    ///<summary>
    ///  Allows to get base IEffectParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEffectParamSource: DNIEffectParamSource read get_AsIEffectParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Imutable object which contains effective effect formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IEffectFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IEffectFormatEffectiveData')]
  DNIEffectFormatEffectiveData = interface(DNIEffectParamSource)
  ['{62030CD4-C192-492A-8500-2053C3E34B9B}']
  { getters & setters } 

    function get_IsNoEffects: Boolean;
    function get_BlurEffect: DNIBlurEffectiveData;
    function get_FillOverlayEffect: DNIFillOverlayEffectiveData;
    function get_GlowEffect: DNIGlowEffectiveData;
    function get_InnerShadowEffect: DNIInnerShadowEffectiveData;
    function get_OuterShadowEffect: DNIOuterShadowEffectiveData;
    function get_PresetShadowEffect: DNIPresetShadowEffectiveData;
    function get_ReflectionEffect: DNIReflectionEffectiveData;
    function get_SoftEdgeEffect: DNISoftEdgeEffectiveData;
    function get_AsIEffectParamSource: DNIEffectParamSource;

  { propertys } 

    ///<summary>
    ///  Returns true if all effects are disabled (as just created, default EffectFormat object).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsNoEffects: Boolean read get_IsNoEffects;
    ///<summary>
    ///  Blur effect.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IBlurEffectiveData" />
    ///  .
    ///</summary>
    property BlurEffect: DNIBlurEffectiveData read get_BlurEffect;
    ///<summary>
    ///  Fill overlay effect.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IFillOverlayEffectiveData" />
    ///  .
    ///</summary>
    property FillOverlayEffect: DNIFillOverlayEffectiveData read get_FillOverlayEffect;
    ///<summary>
    ///  Glow effect.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IGlowEffectiveData" />
    ///  .
    ///</summary>
    property GlowEffect: DNIGlowEffectiveData read get_GlowEffect;
    ///<summary>
    ///  Inner shadow.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IInnerShadowEffectiveData" />
    ///  .
    ///</summary>
    property InnerShadowEffect: DNIInnerShadowEffectiveData read get_InnerShadowEffect;
    ///<summary>
    ///  Outer shadow.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IOuterShadowEffectiveData" />
    ///  .
    ///</summary>
    property OuterShadowEffect: DNIOuterShadowEffectiveData read get_OuterShadowEffect;
    ///<summary>
    ///  Preset shadow.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IPresetShadowEffectiveData" />
    ///  .
    ///</summary>
    property PresetShadowEffect: DNIPresetShadowEffectiveData read get_PresetShadowEffect;
    ///<summary>
    ///  Reflection.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IReflectionEffectiveData" />
    ///  .
    ///</summary>
    property ReflectionEffect: DNIReflectionEffectiveData read get_ReflectionEffect;
    ///<summary>
    ///  Soft edge.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.ISoftEdgeEffectiveData" />
    ///  .
    ///</summary>
    property SoftEdgeEffect: DNISoftEdgeEffectiveData read get_SoftEdgeEffect;
    ///<summary>
    ///  Allows to get base IEffectParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEffectParamSource: DNIEffectParamSource read get_AsIEffectParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a type of field.
  ///  This value determines which text will be set to the field portion when it will be updated.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFieldType')]
  DNIFieldType = interface(DDN.mscorlib.DNObject)
  ['{AE5D835A-BB03-498F-9F11-80E5B64E5E78}']
  { getters & setters } 

    function get_InternalString: string;
    procedure set_InternalString(value: string);

  { propertys } 

    ///<summary>
    ///  Returns the internal name of this FieldTypeEx object.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property InternalString: string read get_InternalString write set_InternalString;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Auxiliary fill parameters interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFillParamSource')]
  DNIFillParamSource = interface(DDN.mscorlib.DNObject)
  ['{824F901B-F649-4B0D-87C1-49DE1F68599A}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective background properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IBackground" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IBackgroundEffectiveData')]
  DNIBackgroundEffectiveData = interface(DNIFillParamSource)
  ['{8994E003-95DF-4211-BDF7-72BB8A789495}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormatEffectiveData;
    function get_EffectFormat: DNIEffectFormatEffectiveData;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns effective fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
    ///<summary>
    ///  Returns effective effect format.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormatEffectiveData" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormatEffectiveData read get_EffectFormat;
    ///<summary>
    ///  Returns IFillParamSource interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a color used in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IColorFormat')]
  DNIColorFormat = interface(DNIFillParamSource)
  ['{8BB9788C-86C4-405A-B148-164CA233B4A5}']
  { getters & setters } 

    function get_ColorType: DNColorType;
    procedure set_ColorType(value: DNColorType);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_PresetColor: DNPresetColor;
    procedure set_PresetColor(value: DNPresetColor);
    function get_SystemColor: DNSystemColor;
    procedure set_SystemColor(value: DNSystemColor);
    function get_SchemeColor: DNSchemeColor;
    procedure set_SchemeColor(value: DNSchemeColor);
    function get_R: Byte;
    procedure set_R(value: Byte);
    function get_G: Byte;
    procedure set_G(value: Byte);
    function get_B: Byte;
    procedure set_B(value: Byte);
    function get_FloatR: Single;
    procedure set_FloatR(value: Single);
    function get_FloatG: Single;
    procedure set_FloatG(value: Single);
    function get_FloatB: Single;
    procedure set_FloatB(value: Single);
    function get_Hue: Single;
    procedure set_Hue(value: Single);
    function get_Saturation: Single;
    procedure set_Saturation(value: Single);
    function get_Luminance: Single;
    procedure set_Luminance(value: Single);
    function get_ColorTransform: DNIColorOperationCollection;
    function get_AsIFillParamSource: DNIFillParamSource;

  { methods } 

    ///<summary>
    ///  Returns a <see cref="T:System.String" />
    ///  that represents the current color format.
    ///</summary>
    ///  <param name="format">A type of color string format.</param>
    ///<returns>A string that represents the current color format.</returns>
    function ToString(format: DNColorStringFormat): string;
    ///<summary>
    ///  Copy color format from "color".
    ///</summary>
    ///  <param name="color">Color <see cref="T:Aspose.Slides.IColorFormat" />
    ///</param>
    procedure CopyFrom(color: DNIColorFormat);

  { propertys } 

    ///<summary>
    ///  Returns or sets the color definition method.
    ///  Read/write <see cref="T:Aspose.Slides.ColorType" />
    ///  .
    ///</summary>
    property ColorType: DNColorType read get_ColorType write set_ColorType;
    ///<summary>
    ///  Returns resulting color (with all color transformations applied).
    ///  Sets RGB colors and clears all color transformations.
    ///  Read/write <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Returns or sets the color preset.
    ///  Read/write <see cref="T:Aspose.Slides.PresetColor" />
    ///  .
    ///</summary>
    property PresetColor: DNPresetColor read get_PresetColor write set_PresetColor;
    ///<summary>
    ///  Returns or sets the color identified by the system color table.
    ///  Read/write <see cref="T:Aspose.Slides.SystemColor" />
    ///  .
    ///</summary>
    property SystemColor: DNSystemColor read get_SystemColor write set_SystemColor;
    ///<summary>
    ///  Returns or sets the color identified by a color scheme.
    ///  Read/write <see cref="T:Aspose.Slides.SchemeColor" />
    ///  .
    ///</summary>
    property SchemeColor: DNSchemeColor read get_SchemeColor write set_SchemeColor;
    ///<summary>
    ///  Returns or sets the red component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property R: Byte read get_R write set_R;
    ///<summary>
    ///  Returns or sets the green component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property G: Byte read get_G write set_G;
    ///<summary>
    ///  Returns or sets the blue component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property B: Byte read get_B write set_B;
    ///<summary>
    ///  Returns or sets the red component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FloatR: Single read get_FloatR write set_FloatR;
    ///<summary>
    ///  Returns or sets the green component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FloatG: Single read get_FloatG write set_FloatG;
    ///<summary>
    ///  Returns or sets the blue component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FloatB: Single read get_FloatB write set_FloatB;
    ///<summary>
    ///  Returns or sets the hue component of a color in HSL representation.
    ///  All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Hue: Single read get_Hue write set_Hue;
    ///<summary>
    ///  Returns or sets the saturation component of a color in HSL representation.
    ///  All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Saturation: Single read get_Saturation write set_Saturation;
    ///<summary>
    ///  Returns or sets the luminance component of a color in HSL representation.
    ///  All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Luminance: Single read get_Luminance write set_Luminance;
    ///<summary>
    ///  Returns the collection of color transformations applied to a color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorOperationCollection" />
    ///  .
    ///</summary>
    property ColorTransform: DNIColorOperationCollection read get_ColorTransform;
    ///<summary>
    ///  Returns IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a fill formatting options.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFillFormat')]
  DNIFillFormat = interface(DNIFillParamSource)
  ['{61B7250D-128B-4D2F-97F1-2646199B0A15}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;
    function get_PictureFillFormat: DNIPictureFillFormat;
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);
    function get_AsIFillParamSource: DNIFillParamSource;

  { methods } 

    ///<summary>
    ///  Gets effective fill formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIFillFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns or sets the type of filling.
    ///  Read/write <see cref="T:Aspose.Slides.FillType" />
    ///  .
    ///</summary>
    property FillType: DNFillType read get_FillType write set_FillType;
    ///<summary>
    ///  Returns the fill color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    ///<summary>
    ///  Returns the gradient fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientFormat" />
    ///  .
    ///</summary>
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    ///<summary>
    ///  Returns the pattern fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPatternFormat" />
    ///  .
    ///</summary>
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
    ///<summary>
    ///  Returns the picture fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property PictureFillFormat: DNIPictureFillFormat read get_PictureFillFormat;
    ///<summary>
    ///  Determines whether the fill should be rotated with shape.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
    ///<summary>
    ///  Allows to get base IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective fill formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IFillFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IFillFormatEffectiveData')]
  DNIFillFormatEffectiveData = interface(DNIFillParamSource)
  ['{016CF6F7-49F7-42C7-BFA1-36007FD92E72}']
  { getters & setters } 

    function get_FillType: DNFillType;
    function get_SolidFillColor: DDN.Aspose.Common.DNColor;
    function get_GradientFormat: DNIGradientFormatEffectiveData;
    function get_PatternFormat: DNIPatternFormatEffectiveData;
    function get_PictureFillFormat: DNIPictureFillFormatEffectiveData;
    function get_RotateWithShape: Boolean;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns the type of filling.
    ///  Read-only <see cref="T:Aspose.Slides.FillType" />
    ///  .
    ///</summary>
    property FillType: DNFillType read get_FillType;
    ///<summary>
    ///  Returns the fill color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property SolidFillColor: DDN.Aspose.Common.DNColor read get_SolidFillColor;
    ///<summary>
    ///  Returns the gradient fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientFormatEffectiveData" />
    ///  .
    ///</summary>
    property GradientFormat: DNIGradientFormatEffectiveData read get_GradientFormat;
    ///<summary>
    ///  Returns the pattern fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPatternFormatEffectiveData" />
    ///  .
    ///</summary>
    property PatternFormat: DNIPatternFormatEffectiveData read get_PatternFormat;
    ///<summary>
    ///  Returns the picture fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property PictureFillFormat: DNIPictureFillFormatEffectiveData read get_PictureFillFormat;
    ///<summary>
    ///  Determines whether the fill should be rotated with shape.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateWithShape: Boolean read get_RotateWithShape;
    ///<summary>
    ///  Returns IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is for COM compatibility.
    ///</remarks>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represent a gradient format.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGradientFormat')]
  DNIGradientFormat = interface(DNIFillParamSource)
  ['{1CC48ECE-7467-4F7B-A6FC-42B5917FF928}']
  { getters & setters } 

    function get_TileFlip: DNTileFlip;
    procedure set_TileFlip(value: DNTileFlip);
    function get_GradientDirection: DNGradientDirection;
    procedure set_GradientDirection(value: DNGradientDirection);
    function get_LinearGradientAngle: Single;
    procedure set_LinearGradientAngle(value: Single);
    function get_LinearGradientScaled: DNNullableBool;
    procedure set_LinearGradientScaled(value: DNNullableBool);
    function get_GradientShape: DNGradientShape;
    procedure set_GradientShape(value: DNGradientShape);
    function get_GradientStops: DNIGradientStopCollection;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns or sets the flipping mode for a gradient.
    ///  Read/write <see cref="T:Aspose.Slides.TileFlip" />
    ///  .
    ///</summary>
    property TileFlip: DNTileFlip read get_TileFlip write set_TileFlip;
    ///<summary>
    ///  Returns or sets the style of a gradient.
    ///  Read/write <see cref="T:Aspose.Slides.GradientDirection" />
    ///  .
    ///</summary>
    property GradientDirection: DNGradientDirection read get_GradientDirection write set_GradientDirection;
    ///<summary>
    ///  Returns or sets the angle of a gradient.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property LinearGradientAngle: Single read get_LinearGradientAngle write set_LinearGradientAngle;
    ///<summary>
    ///  Determines whether a gradient is scaled.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property LinearGradientScaled: DNNullableBool read get_LinearGradientScaled write set_LinearGradientScaled;
    ///<summary>
    ///  Returns or sets the shape of a gradient.
    ///  Read/write <see cref="T:Aspose.Slides.GradientShape" />
    ///  .
    ///</summary>
    property GradientShape: DNGradientShape read get_GradientShape write set_GradientShape;
    ///<summary>
    ///  Returns the collection of gradient stops.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientStopCollection" />
    ///  .
    ///</summary>
    property GradientStops: DNIGradientStopCollection read get_GradientStops;
    ///<summary>
    ///  Allows to get base IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Imutable object which contains effective gradient filling properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
  ///  and <see cref="T:Aspose.Slides.ILineFillFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.IGradientFormatEffectiveData')]
  DNIGradientFormatEffectiveData = interface(DNIFillParamSource)
  ['{1D0702A7-E7B3-438F-88EF-F792E92086A1}']
  { getters & setters } 

    function get_TileFlip: DNTileFlip;
    function get_GradientDirection: DNGradientDirection;
    function get_LinearGradientAngle: Single;
    function get_LinearGradientScaled: Boolean;
    function get_GradientShape: DNGradientShape;
    function get_GradientStops: DNIGradientStopCollectionEffectiveData;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns the flipping mode for a gradient.
    ///  Read-only <see cref="T:Aspose.Slides.TileFlip" />
    ///  .
    ///</summary>
    property TileFlip: DNTileFlip read get_TileFlip;
    ///<summary>
    ///  Returns the style of a gradient.
    ///  Read-only <see cref="T:Aspose.Slides.GradientDirection" />
    ///  .
    ///</summary>
    property GradientDirection: DNGradientDirection read get_GradientDirection;
    ///<summary>
    ///  Returns the angle of a gradient.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property LinearGradientAngle: Single read get_LinearGradientAngle;
    ///<summary>
    ///  Determines whether a gradient is scaled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property LinearGradientScaled: Boolean read get_LinearGradientScaled;
    ///<summary>
    ///  Returns the shape of a gradient.
    ///  Read-only <see cref="T:Aspose.Slides.GradientShape" />
    ///  .
    ///</summary>
    property GradientShape: DNGradientShape read get_GradientShape;
    ///<summary>
    ///  Returns the collection of gradient stops.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientStopCollectionEffectiveData" />
    ///  .
    ///</summary>
    property GradientStops: DNIGradientStopCollectionEffectiveData read get_GradientStops;
    ///<summary>
    ///  Allows to get base IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents properties for lines filling.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILineFillFormat')]
  DNILineFillFormat = interface(DNIFillParamSource)
  ['{4B9F2738-8B3E-4D5C-A8EF-A8D9CDCAC280}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns or sets the fill type.
    ///  Read/write <see cref="T:Aspose.Slides.FillType" />
    ///  .
    ///</summary>
    property FillType: DNFillType read get_FillType write set_FillType;
    ///<summary>
    ///  Returns the color of a solid fill.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    ///<summary>
    ///  Returns the gradient fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientFormat" />
    ///  .
    ///</summary>
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    ///<summary>
    ///  Returns the pattern fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPatternFormat" />
    ///  .
    ///</summary>
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
    ///<summary>
    ///  Determines whether the fill should be rotated with a shape.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
    ///<summary>
    ///  Allows to get base IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective line filling properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.ILineFillFormatEffectiveData')]
  DNILineFillFormatEffectiveData = interface(DNIFillParamSource)
  ['{652AFD58-C756-41DC-BE29-678DEC903B22}']
  { getters & setters } 

    function get_FillType: DNFillType;
    function get_SolidFillColor: DDN.Aspose.Common.DNColor;
    function get_GradientFormat: DNIGradientFormatEffectiveData;
    function get_PatternFormat: DNIPatternFormatEffectiveData;
    function get_RotateWithShape: Boolean;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns the fill type.
    ///  Read-only <see cref="T:Aspose.Slides.FillType" />
    ///  .
    ///</summary>
    property FillType: DNFillType read get_FillType;
    ///<summary>
    ///  Returns the color of a solid fill.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property SolidFillColor: DDN.Aspose.Common.DNColor read get_SolidFillColor;
    ///<summary>
    ///  Returns the gradient fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientFormatEffectiveData" />
    ///  .
    ///</summary>
    property GradientFormat: DNIGradientFormatEffectiveData read get_GradientFormat;
    ///<summary>
    ///  Returns the pattern fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPatternFormatEffectiveData" />
    ///  .
    ///</summary>
    property PatternFormat: DNIPatternFormatEffectiveData read get_PatternFormat;
    ///<summary>
    ///  Determines whether the fill should be rotated with a shape.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RotateWithShape: Boolean read get_RotateWithShape;
    ///<summary>
    ///  Returns IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a picture fill style.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPictureFillFormat')]
  DNIPictureFillFormat = interface(DNIFillParamSource)
  ['{7A2950F4-103F-43DE-B978-D6BAD112D916}']
  { getters & setters } 

    function get_Dpi: Int32;
    procedure set_Dpi(value: Int32);
    function get_PictureFillMode: DNPictureFillMode;
    procedure set_PictureFillMode(value: DNPictureFillMode);
    function get_Picture: DNISlidesPicture;
    function get_CropLeft: Single;
    procedure set_CropLeft(value: Single);
    function get_CropTop: Single;
    procedure set_CropTop(value: Single);
    function get_CropRight: Single;
    procedure set_CropRight(value: Single);
    function get_CropBottom: Single;
    procedure set_CropBottom(value: Single);
    function get_StretchOffsetLeft: Single;
    procedure set_StretchOffsetLeft(value: Single);
    function get_StretchOffsetTop: Single;
    procedure set_StretchOffsetTop(value: Single);
    function get_StretchOffsetRight: Single;
    procedure set_StretchOffsetRight(value: Single);
    function get_StretchOffsetBottom: Single;
    procedure set_StretchOffsetBottom(value: Single);
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns or sets the dpi which is used to fill a picture.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Dpi: Int32 read get_Dpi write set_Dpi;
    ///<summary>
    ///  Returns or sets the picture fill mode.
    ///  Read/write <see cref="T:Aspose.Slides.PictureFillMode" />
    ///  .
    ///</summary>
    property PictureFillMode: DNPictureFillMode read get_PictureFillMode write set_PictureFillMode;
    ///<summary>
    ///  Returns the picture.
    ///  Read-only <see cref="T:Aspose.Slides.ISlidesPicture" />
    ///  .
    ///</summary>
    property Picture: DNISlidesPicture read get_Picture;
    ///<summary>
    ///  Returns or sets the number of percents of real image width that are cropped off
    ///  the left of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropLeft: Single read get_CropLeft write set_CropLeft;
    ///<summary>
    ///  Returns or sets the number of percents of real image height that are cropped off
    ///  the top of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropTop: Single read get_CropTop write set_CropTop;
    ///<summary>
    ///  Returns or sets the number of percents of real image width that are cropped off
    ///  the right of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropRight: Single read get_CropRight write set_CropRight;
    ///<summary>
    ///  Returns or sets the number of percents of real image height that are cropped off
    ///  the bottom of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropBottom: Single read get_CropBottom write set_CropBottom;
    ///<summary>
    ///  Returns or sets left edge of the fill rectangle that is defined by a percentage offset
    ///  from the left edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetLeft: Single read get_StretchOffsetLeft write set_StretchOffsetLeft;
    ///<summary>
    ///  Returns or sets top edge of the fill rectangle that is defined by a percentage offset
    ///  from the top edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetTop: Single read get_StretchOffsetTop write set_StretchOffsetTop;
    ///<summary>
    ///  Returns or sets right edge of the fill rectangle that is defined by a percentage offset
    ///  from the right edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetRight: Single read get_StretchOffsetRight write set_StretchOffsetRight;
    ///<summary>
    ///  Returns or sets bottom edge of the fill rectangle that is defined by a percentage offset
    ///  from the bottom edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetBottom: Single read get_StretchOffsetBottom write set_StretchOffsetBottom;
    ///<summary>
    ///  Allows to get base IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains the properties of picture fill.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.IPictureFillFormatEffectiveData')]
  DNIPictureFillFormatEffectiveData = interface(DNIFillParamSource)
  ['{EEBC709F-E3E5-4F57-B1FB-A8375E637793}']
  { getters & setters } 

    function get_Dpi: Int32;
    function get_PictureFillMode: DNPictureFillMode;
    function get_Picture: DNIPictureEffectiveData;
    function get_CropLeft: Single;
    function get_CropTop: Single;
    function get_CropRight: Single;
    function get_CropBottom: Single;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    ///<summary>
    ///  Returns the dpi which is used to fill a picture.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Dpi: Int32 read get_Dpi;
    ///<summary>
    ///  Returns the picture fill mode.
    ///  Read-only <see cref="T:Aspose.Slides.PictureFillMode" />
    ///  .
    ///</summary>
    property PictureFillMode: DNPictureFillMode read get_PictureFillMode;
    ///<summary>
    ///  Returns the picture.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureEffectiveData" />
    ///  .
    ///</summary>
    property Picture: DNIPictureEffectiveData read get_Picture;
    ///<summary>
    ///  Returns the number of percents of real image width that are cropped off
    ///  the left of the picture.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropLeft: Single read get_CropLeft;
    ///<summary>
    ///  Returns the number of percents of real image height that are cropped off
    ///  the top of the picture.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropTop: Single read get_CropTop;
    ///<summary>
    ///  Returns the number of percents of real image width that are cropped off
    ///  the right of the picture.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropRight: Single read get_CropRight;
    ///<summary>
    ///  Returns the number of percents of real image height that are cropped off
    ///  the bottom of the picture.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropBottom: Single read get_CropBottom;
    ///<summary>
    ///  Allows to get base IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a font definition.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontData')]
  DNIFontData = interface(DDN.mscorlib.DNObject)
  ['{4EDCE609-BA7D-40AC-8C86-333BE2205C3B}']
  { getters & setters } 

    function get_FontName: string;

  { methods } 

    ///<summary>
    ///  Returns the font name, replacing theme referrence with an actual font used.
    ///</summary>
    ///  <param name="theme">Theme from which themed font name should be taken. Its up to caller to provide a correct value.</param>
    ///<returns>Font name.</returns>
    function GetFontName(theme: DNIThemeEffectiveData): string;

  { propertys } 

    ///<summary>
    ///  Returns the font name.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property FontName: string read get_FontName;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  FontData factory interface
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontDataFactory')]
  DNIFontDataFactory = interface(DDN.mscorlib.DNObject)
  ['{C272B140-F4F7-4F97-B49E-E415078BB342}']
  { methods } 

    ///<summary>
    ///  Creates FontData with specified font name.
    ///</summary>
    ///  <param name="fontName">Font name</param>
    ///<returns>FontData</returns>
    function CreateFontData(fontName: string): DNIFontData;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents font fallback rule
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontFallBackRule')]
  DNIFontFallBackRule = interface(DDN.mscorlib.DNObject)
  ['{46E22F9A-A77A-4F0B-AF2C-8F3C1C194269}']
  { getters & setters } 

    function get_RangeStartIndex: UInt32;
    function get_RangeEndIndex: UInt32;
    function get_Count: Int32;
    function get_Item(index: Int32): string;

  { methods } 

    ///<summary>
    ///  Adds a new font(s) to the list of FallBack fonts.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Create of new instance of FantFallBackRule
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho");
    ///  //Add a second font to the rule
    ///  newRule.AddFallBackFonts("MS Gothic");
    ///  //Add a third and fourth fonts to the rule
    ///  newRule.AddFallBackFonts("Tahoma, Times New Roman");
    ///</code></example><param name="fontName">Font's name or names (delimited by comma) for FallBack </param>
    procedure AddFallBackFonts(fontName: string); overload;
    ///<summary>
    ///  Adds a new fonts to the list of FallBack fonts.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Create of new instance of FontFallBackRule
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho");
    ///  //Add of another three fonts to the rule
    ///  newRule.AddFallBackFonts(new string [] {"MS Gothic","Tahoma, Times New Roman"});
    ///</code></example><param name="fontNames">Font's name or names (delimited by comma) for FallBack </param>
    procedure AddFallBackFonts(fontNames: TArray<string>); overload;
    ///<summary>
    ///  Removes all fonts from the list.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the first occurrence of a specific FallBack font from the list.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  //Removing of Tahoma from list
    ///  newRule.Remove ("Tahoma");
    ///</code></example><param name="fontName">The font's name to remove from the list.</param>
    procedure Remove(fontName: string);
    ///<summary>
    ///  Removes the FallBack font at the specified index of the list.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  //Removing of Tahoma from list
    ///  newRule.Remove (2);
    ///</code></example><param name="index">The zero-based index of the font to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Creates and returns an array with all FallBack fonts for this rule.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  //Get all font-names as array
    ///  string[] fontNames = newRule.ToArray();
    ///</code></example><returns>Array of <see cref="T:System.String" />
    ///</returns>
    function ToArray: TArray<string>; overload;
    ///<summary>
    ///  Creates and returns an array with all FallBack fonts from the specified range in list.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  //Get a last two font-names as array
    ///  string[] fontNames = newRule.ToArray(2,2);
    ///</code></example><param name="startIndex">An index of a first font to add.</param>
    ///  <param name="count">A number of fonts to add.</param>
    ///<returns>Array of <see cref="T:System.String" />
    ///</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<string>; overload;
    ///<summary>
    ///  Returns an index of the specified rule in the collection.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  // Create a rule contains a list of fonts.
    ///  IFontFallBackRule newRule = new FontFallBackRule(0x3040, 0x309F, "MS Mincho, MS Gothic, Tahoma, Times New Roman");
    ///  //Get index of Tahoma
    ///  int tahomaIndex = newRule.IndexOf("Tahoma");
    ///</code></example><param name="fontName">Font's name to find.</param>
    ///<returns>Index of a font or -1 if font not found in list.</returns>
    function IndexOf(fontName: string): Int32;

  { propertys } 

    ///<summary>
    ///  Get first index of continuous unicode range.
    ///</summary>
    property RangeStartIndex: UInt32 read get_RangeStartIndex;
    ///<summary>
    ///  Get last index of continuous unicode range.
    ///</summary>
    property RangeEndIndex: UInt32 read get_RangeEndIndex;
    ///<summary>
    ///  Gets the number of fonts actually defined for range.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents fonts collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFonts')]
  DNIFonts = interface(DDN.mscorlib.DNObject)
  ['{0C00FDB2-43A2-4713-83EA-1F4A2D54F8A5}']
  { getters & setters } 

    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);

  { propertys } 

    ///<summary>
    ///  Returns or sets the Latin font.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    ///<summary>
    ///  Returns or sets the East Asian font.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    ///<summary>
    ///  Returns or sets the complex script font.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective fonts set.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IBasePortionFormatEffectiveData" />
  ///  and <see cref="T:Aspose.Slides.Theme.IFontSchemeEffectiveData" />
  ///  interfaces.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IFontsEffectiveData')]
  DNIFontsEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{52117670-CBDE-4D8B-8D2B-1B4A8A046B06}']
  { getters & setters } 

    function get_LatinFont: DNIFontData;
    function get_EastAsianFont: DNIFontData;
    function get_ComplexScriptFont: DNIFontData;

  { propertys } 

    ///<summary>
    ///  Returns the Latin font.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont;
    ///<summary>
    ///  Returns the East Asian font.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont;
    ///<summary>
    ///  Returns the complex script font.
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Class for loading custom fonts defined by user.
  ///  Should be used before creating any presentation objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontsLoader')]
  DNIFontsLoader = interface(DDN.mscorlib.DNObject)
  ['{8FE435CB-BF00-48F5-8132-169C628AE9D4}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Manages fonts across the presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontsManager')]
  DNIFontsManager = interface(DDN.mscorlib.DNObject)
  ['{07163211-E4CA-49D2-9D91-299D123616C3}']
  { getters & setters } 

    function get_FontSubstRuleList: DNIFontSubstRuleCollection;
    procedure set_FontSubstRuleList(value: DNIFontSubstRuleCollection);
    function get_FontFallBackRulesCollection: DNIFontFallBackRulesCollection;
    procedure set_FontFallBackRulesCollection(value: DNIFontFallBackRulesCollection);

  { methods } 

    ///<summary>
    ///  Returns the fonts used in the presentation
    ///</summary>
    ///<returns>An array of fonts</returns>
    function GetFonts: TArray<DNIFontData>;
    ///<summary>
    ///  Returns the fonts embedded in the presentation
    ///</summary>
    ///<returns>Embedded fonts <see cref="T:Aspose.Slides.IFontData" />
    ///  []</returns>
    function GetEmbeddedFonts: TArray<DNIFontData>;
    ///<summary>
    ///  Removes the embedded font
    ///</summary>
    ///  <param name="fontData">Font data object <see cref="T:Aspose.Slides.IFontData" />
    ///</param>
    procedure RemoveEmbeddedFont(fontData: DNIFontData);
    ///<summary>
    ///  Adds the embedded font.
    ///<remarks>Keep in mind when copying any fonts that most fonts are copyrighted. First locate the license of
    ///  a font before hand and verify they can be freely transferred to another machine.</remarks>
    ///<exception cref="T:System.ArgumentException">An ArgumentException can be thrown if font data is null or this font is already embedded</exception></summary>
    ///  <param name="fontData">Font data object <see cref="T:Aspose.Slides.IFontData" />
    ///</param>
    ///  <param name="embedFontRule">Embedded font rule <see cref="T:Aspose.Slides.Export.EmbedFontCharacters" />
    ///</param>
    procedure AddEmbeddedFont(fontData: DNIFontData; embedFontRule: DNEmbedFontCharacters); overload;
    ///<summary>
    ///  Adds the embedded font
    ///<remarks>Keep in mind when adding any fonts that most fonts are copyrighted. First locate the license of
    ///  a font before hand and verify they can be freely transferred to another machine.</remarks>
    ///<exception cref="T:System.ArgumentException">An ArgumentException can be thrown if font data is null or this font is already embedded</exception></summary>
    ///  <param name="fontData">Font data <see cref="T:System.Byte" />
    ///  []</param>
    ///  <param name="embedFontRule">Embedded font rule <see cref="T:Aspose.Slides.Export.EmbedFontCharacters" />
    ///</param>
    procedure AddEmbeddedFont(fontData: TArray<Byte>; embedFontRule: DNEmbedFontCharacters); overload;
    ///<summary>
    ///  Replace font in presentation
    ///</summary>
    ///  <param name="sourceFont">Source font</param>
    ///  <param name="destFont">Destination font</param>
    procedure ReplaceFont(sourceFont: DNIFontData; destFont: DNIFontData); overload;
    ///<summary>
    ///  Replace font in presentation using information provided in <see cref="T:Aspose.Slides.IFontSubstRule">IFontSubstRule</see></summary>
    ///  <param name="substRule">Font substitution info</param>
    procedure ReplaceFont(substRule: DNIFontSubstRule); overload;
    ///<summary>
    ///  Replace font in presentation using information provided in collection of <see cref="T:Aspose.Slides.IFontSubstRule">IFontSubstRule</see></summary>
    ///  <param name="substRules">Font substitution info collection</param>
    procedure ReplaceFont(substRules: DNIFontSubstRuleCollection); overload;

  { propertys } 

    ///<summary>
    ///  Font substitutions to use when rendering
    ///  Read/write <see cref="T:Aspose.Slides.IFontSubstRuleCollection" />
    ///  .
    ///</summary>
    property FontSubstRuleList: DNIFontSubstRuleCollection read get_FontSubstRuleList write set_FontSubstRuleList;
    ///<summary>
    ///  Represents a user's collection of FontFallBack rules for managing of collections of fonts for proper substitutions by fallback functionality
    ///  Read/write <see cref="T:Aspose.Slides.IFontFallBackRulesCollection" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation ())
    ///  {
    ///  // Getting of empty or preinitialized rules collection from FontsManager
    ///  IFontFallBackRulesCollection rulesList = pres.FontsManager.FontFallBackRulesCollection;
    ///  // adding of rules to collection
    ///  rulesList.Add(new FontFallBackRule(0x400,0x4FF, "Times New Roman"));
    ///  // or
    ///  // initialization of new instance of rules collection
    ///  IFontFallBackRulesCollection rulesList = new FontFallBackRulesCollection();
    ///  // adding of rules to collection
    ///  rulesList.Add(new FontFallBackRule(0x400,0x4FF, "Times New Roman"));
    ///  // and replacing of existing collection by the new one in FontsManager
    ///  pres.FontsManager.FontFallBackRulesCollection = rulesList;
    ///  }
    ///</code></example>
    property FontFallBackRulesCollection: DNIFontFallBackRulesCollection read get_FontFallBackRulesCollection write set_FontFallBackRulesCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Provides file and memory sources for external fonts.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontSources')]
  DNIFontSources = interface(DDN.mscorlib.DNObject)
  ['{763C0137-470E-453A-88D4-EDAE58D8C4A3}']
  { getters & setters } 

    function get_FontFolders: TArray<string>;
    procedure set_FontFolders(value: TArray<string>);
    function get_MemoryFonts: TArray<TArray<Byte>>;
    procedure set_MemoryFonts(value: TArray<TArray<Byte>>);

  { propertys } 

    ///<summary>
    ///  Folders containing font files.
    ///  All font files located in these folders are included in the collection. Folders that are recursively searched.
    ///</summary>
    property FontFolders: TArray<string> read get_FontFolders write set_FontFolders;
    ///<summary>
    ///  A collection of fonts represented as byte arrays.
    ///</summary>
    property MemoryFonts: TArray<TArray<Byte>> read get_MemoryFonts write set_MemoryFonts;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents font subtituition information
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontSubstRule')]
  DNIFontSubstRule = interface(DDN.mscorlib.DNObject)
  ['{032B161D-495E-488D-80E0-FA74B42BB8A0}']
  { getters & setters } 

    function get_SourceFont: DNIFontData;
    function get_DestFont: DNIFontData;
    function get_ReplaceFontCondition: DNFontSubstCondition;

  { propertys } 

    ///<summary>
    ///  Font to substitute
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SourceFont: DNIFontData read get_SourceFont;
    ///<summary>
    ///  Font to use for substitution
    ///  Read-only <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property DestFont: DNIFontData read get_DestFont;
    ///<summary>
    ///  Rule to apply for substitution
    ///  Read-only <see cref="T:Aspose.Slides.FontSubstCondition" />
    ///  .
    ///</summary>
    property ReplaceFontCondition: DNFontSubstCondition read get_ReplaceFontCondition;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Allows to create formats via COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFormatFactory')]
  DNIFormatFactory = interface(DDN.mscorlib.DNObject)
  ['{85F45231-A82E-4B5B-BDC8-A3B41F995451}']
  { methods } 

    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.IPortionFormat" />
    ///  .
    ///</summary>
    ///<returns>New portion format.</returns>
    function CreatePortionFormat: DNIPortionFormat;
    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .
    ///</summary>
    ///<returns>New paragraph format.</returns>
    function CreateParagraphFormat: DNIParagraphFormat;
    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.ITextFrameFormat" />
    ///  .
    ///</summary>
    ///<returns>New text frame format.</returns>
    function CreateTextFrameFormat: DNITextFrameFormat;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents geometry path of GeometryShape
  ///</summary>
  [DNTypeName('Aspose.Slides.IGeometryPath')]
  DNIGeometryPath = interface(DDN.mscorlib.DNObject)
  ['{523516C4-2E84-4229-BFE6-DBAC7E130010}']
  { getters & setters } 

    function get_PathData: TArray<DNIPathSegment>;
    function get_FillMode: DNPathFillModeType;
    procedure set_FillMode(value: DNPathFillModeType);
    function get_Stroke: Boolean;
    procedure set_Stroke(value: Boolean);

  { methods } 

    ///<summary>
    ///  Removes segment at the specified index of the geometry path.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Adds line to the end of the path
    ///</summary>
    ///  <param name="point">End point of the line</param>
    procedure LineTo(point: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Adds line to the end of the path
    ///</summary>
    ///  <param name="x">X coordinate of the end point of the line</param>
    ///  <param name="y">Y coordinate of the end point of the line</param>
    procedure LineTo(x: Single; y: Single); overload;
    ///<summary>
    ///  Adds line to the specified place of the path
    ///</summary>
    ///  <param name="point">End point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure LineTo(point: DDN.Aspose.Common.DNPointF; index: UInt32); overload;
    ///<summary>
    ///  Adds line to the specified place of the path
    ///</summary>
    ///  <param name="x">X coordinate of the point</param>
    ///  <param name="y">Y coordinate of the point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure LineTo(x: Single; y: Single; index: UInt32); overload;
    ///<summary>
    ///  Adds cubic Bezier curve at the end the path
    ///</summary>
    ///  <param name="point1">First direction point</param>
    ///  <param name="point2">Second direction point</param>
    ///  <param name="point3">End point</param>
    ///<returns></returns>
    procedure CubicBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF; point3: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Adds cubic Bezier curve at the end the path
    ///</summary>
    ///  <param name="x1">X coordinate of first direction point</param>
    ///  <param name="y1">Y coordinate of first direction point</param>
    ///  <param name="x2">X coordinate of second direction point</param>
    ///  <param name="y2">Y coordinate of second direction point</param>
    ///  <param name="x3">X coordinate of end point</param>
    ///  <param name="y3">Y coordinate of end point</param>
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); overload;
    ///<summary>
    ///  Adds cubic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="point1">First direction point</param>
    ///  <param name="point2">Second direction point</param>
    ///  <param name="point3">End point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure CubicBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF; point3: DDN.Aspose.Common.DNPointF; index: UInt32); overload;
    ///<summary>
    ///  Adds cubic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="x1">X coordinate of first direction point</param>
    ///  <param name="y1">Y coordinate of first direction point</param>
    ///  <param name="x2">X coordinate of second direction point</param>
    ///  <param name="y2">Y coordinate of second direction point</param>
    ///  <param name="x3">X coordinate of end point</param>
    ///  <param name="y3">Y coordinate of end point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; index: UInt32); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve at the end the path
    ///</summary>
    ///  <param name="point1">Direction point</param>
    ///  <param name="point2">End point</param>
    ///<returns></returns>
    procedure QuadraticBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve at the end the path
    ///</summary>
    ///  <param name="x1">X coordinate of direction point</param>
    ///  <param name="y1">Y coordinate of direction point</param>
    ///  <param name="x2">X coordinate of end point</param>
    ///  <param name="y2">Y coordinate of end point</param>
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="point1">Direction point</param>
    ///  <param name="point2">End point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure QuadraticBezierTo(point1: DDN.Aspose.Common.DNPointF; point2: DDN.Aspose.Common.DNPointF; index: UInt32); overload;
    ///<summary>
    ///  Adds quadratic Bezier curve to the specified place of the path
    ///</summary>
    ///  <param name="x1">X coordinate of direction point</param>
    ///  <param name="y1">Y coordinate of direction point</param>
    ///  <param name="x2">X coordinate of end point</param>
    ///  <param name="y2">Y coordinate of end point</param>
    ///  <param name="index">Index of segment in PathData</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Segment index is out of PathData range</exception>
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; index: UInt32); overload;
    ///<summary>
    ///  Closes the current figure of this path
    ///</summary>
    procedure CloseFigure;
    ///<summary>
    ///  Sets next point position.
    ///</summary>
    ///  <param name="point">Point position</param>
    procedure MoveTo(point: DDN.Aspose.Common.DNPointF); overload;
    ///<summary>
    ///  Sets next point position.
    ///</summary>
    ///  <param name="x">X coordinate of the point</param>
    ///  <param name="y">Y Coordinate of the point</param>
    procedure MoveTo(x: Single; y: Single); overload;
    ///<summary>
    ///  Appends the specified arc to the path.
    ///</summary>
    ///  <param name="width">Width of the rectangle</param>
    ///  <param name="heigth">Height of the rectangle</param>
    ///  <param name="startAngle">Start angle.</param>
    ///  <param name="sweepAngle"> Sweep angle/</param>
    procedure ArcTo(width: Single; heigth: Single; startAngle: Single; sweepAngle: Single);

  { propertys } 

    ///<summary>
    ///  Returns geometry path of GeometryShape as an array of path segments.
    ///</summary>
    property PathData: TArray<DNIPathSegment> read get_PathData;
    ///<summary>
    ///  Sets fill mode
    ///</summary>
    property FillMode: DNPathFillModeType read get_FillMode write set_FillMode;
    ///<summary>
    ///  Sets stroke appearance
    ///</summary>
    property Stroke: Boolean read get_Stroke write set_Stroke;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a gradient format.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGradientStop')]
  DNIGradientStop = interface(DDN.mscorlib.DNObject)
  ['{E9413ADF-F4DD-4477-BA53-C3EFE0176A98}']
  { getters & setters } 

    function get_Position: Single;
    procedure set_Position(value: Single);
    function get_Color: DNIColorFormat;

  { propertys } 

    ///<summary>
    ///  Returns or sets the position (0..1) of a gradient stop.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Position: Single read get_Position write set_Position;
    ///<summary>
    ///  Returns the color of a gradient stop.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  immutable object which represents a gradient stop.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGradientStopEffectiveData')]
  DNIGradientStopEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{0F1CF49D-B4FE-4E7C-B16D-9A4F153B8771}']
  { getters & setters } 

    function get_Position: Single;
    function get_Color: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  Returns the position (0..1) of a gradient stop.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Position: Single read get_Position;
    ///<summary>
    ///  Returns the color of a gradient stop.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a hyperlink.
  ///</summary>
  [DNTypeName('Aspose.Slides.IHyperlink')]
  DNIHyperlink = interface(DDN.mscorlib.DNObject)
  ['{40DE6723-8070-4D21-8347-89B0923B416D}']
  { getters & setters } 

    function get_ActionType: DNHyperlinkActionType;
    function get_ExternalUrl: string;
    function get_TargetSlide: DNISlide;
    function get_TargetFrame: string;
    procedure set_TargetFrame(value: string);
    function get_Tooltip: string;
    procedure set_Tooltip(value: string);
    function get_History: Boolean;
    procedure set_History(value: Boolean);
    function get_HighlightClick: Boolean;
    procedure set_HighlightClick(value: Boolean);
    function get_StopSoundOnClick: Boolean;
    procedure set_StopSoundOnClick(value: Boolean);
    function get_ColorSource: DNHyperlinkColorSource;
    procedure set_ColorSource(value: DNHyperlinkColorSource);

  { methods } 

    ///<summary>
    ///  Determines whether the two Hyperlink instances are equal.
    ///</summary>
    ///  <param name="hlink">The Hyperlink to compare with the current Hyperlink.</param>
    ///<returns><b>true</b>
    ///  if the specified Hyperlink is equal to the current Hyperlink; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(hlink: DNIHyperlink): Boolean;

  { propertys } 

    ///<summary>
    ///  Returns type of HyperLinkEx's action.
    ///  Read-only <see cref="T:Aspose.Slides.HyperlinkActionType" />
    ///  .
    ///</summary>
    property ActionType: DNHyperlinkActionType read get_ActionType;
    ///<summary>
    ///  Specifies the external URL
    ///  If this property become not null then property TargetSlide become null.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ExternalUrl: string read get_ExternalUrl;
    ///<summary>
    ///  If the HyperlinkEx targets specific slide returns this slide.
    ///  If ths property become not null then property ExternalUrl become null.
    ///  Read-only <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    property TargetSlide: DNISlide read get_TargetSlide;
    ///<summary>
    ///  Returns the frame within the parent HTML frameset for the target
    ///  of the parent hyperlink when one exists.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property TargetFrame: string read get_TargetFrame write set_TargetFrame;
    ///<summary>
    ///  Returns the string which may be surfaced in a user interface
    ///  as associated with the parent hyperlink.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Tooltip: string read get_Tooltip write set_Tooltip;
    ///<summary>
    ///  Determines whether the target of the parent hyperlink shall be added
    ///  to a list of viewed hyperlinks when it is invoked.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property History: Boolean read get_History write set_History;
    ///<summary>
    ///  Determines whether the hyperlink should be highlighted on click.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HighlightClick: Boolean read get_HighlightClick write set_HighlightClick;
    ///<summary>
    ///  Determines whether the sound should be stopped on hyperlink click.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property StopSoundOnClick: Boolean read get_StopSoundOnClick write set_StopSoundOnClick;
    ///<summary>
    ///  Represents the source of hyperlink color - either styles or portion format.
    ///  Read/write <see cref="T:Aspose.Slides.HyperlinkColorSource" />
    ///  .
    ///</summary>
    property ColorSource: DNHyperlinkColorSource read get_ColorSource write set_ColorSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents hyperlink object.
  ///</summary>
  [DNTypeName('Aspose.Slides.IHyperlinkContainer')]
  DNIHyperlinkContainer = interface(DDN.mscorlib.DNObject)
  ['{D7C4BF28-7795-4A4B-A683-F09A1784CF0F}']
  { getters & setters } 

    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;

  { propertys } 

    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse click.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse over.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    ///<summary>
    ///  Hyperlinks manager
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkManager" />
    ///  .
    ///</summary>
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Provide hyperlinks management (adding, removing).
  ///</summary>
  [DNTypeName('Aspose.Slides.IHyperlinkManager')]
  DNIHyperlinkManager = interface(DDN.mscorlib.DNObject)
  ['{C470189A-0657-46E5-9F69-E1BF639F154A}']
  { methods } 

    ///<summary>
    ///  Set external hyperlink on click.
    ///</summary>
    ///  <param name="url">Hyperlink URL.</param>
    ///<returns>Hyperlink object <see cref="T:Aspose.Slides.IHyperlink" />
    ///</returns>
    function SetExternalHyperlinkClick(url: string): DNIHyperlink;
    ///<summary>
    ///  Sets internal hyperlink on click.
    ///</summary>
    ///  <param name="targetSlide">Target slide.</param>
    ///<returns>Hyperlink.</returns>
    function SetInternalHyperlinkClick(targetSlide: DNISlide): DNIHyperlink;
    ///<summary>
    ///  Removes hyperlink on click.
    ///</summary>
    procedure RemoveHyperlinkClick;
    ///<summary>
    ///  Sets external hyperlink mouse over.
    ///</summary>
    ///  <param name="url">Hyperlink URL.</param>
    ///<returns>Hyperlink.</returns>
    function SetExternalHyperlinkMouseOver(url: string): DNIHyperlink;
    ///<summary>
    ///  Sets internal hyperlink mouse over.
    ///</summary>
    ///  <param name="targetSlide">Target slide.</param>
    ///<returns>Hyperlink.</returns>
    function SetInternalHyperlinkMouseOver(targetSlide: DNISlide): DNIHyperlink;
    ///<summary>
    ///  Removes hyperlink mouse over.
    ///</summary>
    procedure RemoveHyperlinkMouseOver;
    ///<summary>
    ///  Set Macro hyperlink on a click.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation presentation = new Presentation())
    ///  {
    ///  IAutoShape shape = presentation.Slides[0].Shapes.AddAutoShape(ShapeType.BlankButton, 20, 20, 80, 30);
    ///  shape.HyperlinkManager.SetMacroHyperlinkClick("MacroName");
    ///  }
    ///</code></example><param name="macroName">Name of the macro</param>
    ///<returns>Hyperlink object <see cref="T:Aspose.Slides.IHyperlink" />
    ///</returns>
    function SetMacroHyperlinkClick(macroName: string): DNIHyperlink;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Provide easy access to contained hyperlinks.
  ///</summary>
  [DNTypeName('Aspose.Slides.IHyperlinkQueries')]
  DNIHyperlinkQueries = interface(DDN.mscorlib.DNObject)
  ['{14A06FD9-CB20-4802-BD87-7DF1E9A92F8D}']
  { methods } 

    ///<summary>
    ///  Get all IHyperlinkContainer subobjects that contain not null HyperlinkClick.
    ///  With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
    ///</summary>
    ///<returns>All IHyperlinkContainer subobjects that contain not null HyperlinkClick</returns>
    function GetHyperlinkClicks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    ///<summary>
    ///  Get all IHyperlinkContainer subobjects that contain not null HyperlinkMouseOver.
    ///  With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
    ///</summary>
    ///<returns>All IHyperlinkContainer subobjects that contain not null HyperlinkMouseOver</returns>
    function GetHyperlinkMouseOvers: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    ///<summary>
    ///  Get all IHyperlinkContainer subobjects that contain not null HyperlinkMouseOver.
    ///  With given IHyperlinkContainer object you can manage its hyperlink (read, update or remove). See IHyperlinkContainer interface.
    ///</summary>
    ///<returns>All IHyperlinkContainer subobjects that contain not null HyperlinkMouseOver</returns>
    function GetAnyHyperlinks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    ///<summary>
    ///  Removes all contained HyperlinkClick and HyperlinkMouseOver hyperlinks (in all IHyperlinkContainer subobjects).
    ///</summary>
    procedure RemoveAllHyperlinks;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  This interface allows to initialize IBitmapWrapper.
  ///</summary>
  [DNTypeName('Aspose.Slides.IImageWrapperFactory')]
  DNIImageWrapperFactory = interface(DDN.mscorlib.DNObject)
  ['{F776BB4D-EDDD-4BDC-A5C0-01C6C4C8CAF5}']
  { methods } 

    ///<summary>
    ///  Initializes a new instance of the BitmapWrapper class from the specified existing image.
    ///</summary>
    ///  <param name="image">Existing Image <see cref="T:System.Drawing.Image" />
    ///</param>
    ///<returns>New instance of a <see cref="T:Aspose.Slides.IImageWrapper" />
    ///</returns>
    function CreateImageWrapper(image: DDN.Aspose.Common.DNImage): DNIImageWrapper; overload;
    ///<summary>
    ///  Initializes a new instance of the BitmapWrapper class from the specified data stream.
    ///</summary>
    ///  <param name="stream">Data stream <see cref="T:System.IO.Stream" />
    ///</param>
    ///<returns>New instance of a <see cref="T:Aspose.Slides.IImageWrapper" />
    ///</returns>
    function CreateImageWrapper(stream: DDN.mscorlib.DNStream): DNIImageWrapper; overload;
    ///<summary>
    ///  Initializes a new instance of the BitmapWrapper class from the specified file.
    ///</summary>
    ///  <param name="fileName">File name <see cref="T:System.String" />
    ///</param>
    ///<returns>New instance of a <see cref="T:Aspose.Slides.IImageWrapper" />
    ///</returns>
    function CreateImageWrapper(fileName: string): DNIImageWrapper; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  This class represents the token to use for signaling long running tasks whether the interruption was requested.
  ///</summary>
  [DNTypeName('Aspose.Slides.IInterruptionToken')]
  DNIInterruptionToken = interface(DDN.mscorlib.DNObject)
  ['{021EE33D-FE40-4454-917F-4B5B51DD5BCA}']
  { getters & setters } 

    function get_IsInterruptionRequested: Boolean;

  { methods } 

    ///<summary>
    ///  Throws an <exception cref="T:System.OperationCanceledException">OperationCanceledException</exception> if
    ///  interruption was requested.
    ///<exception cref="T:System.OperationCanceledException">Thrown when interruption was requested.</exception></summary>
    procedure ThrowIfInterruptionRequested;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="T:System.Boolean" />
    ///  .true if interruption was requested.
    ///</summary>
    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the source of <see cref="T:Aspose.Slides.IInterruptionToken" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.IInterruptionTokenSource')]
  DNIInterruptionTokenSource = interface(DDN.mscorlib.DNObject)
  ['{D2ACE326-5BC6-4D92-BD25-A17AEDA0EEF3}']
  { getters & setters } 

    function get_Token: DNIInterruptionToken;
    function get_IsInterruptionRequested: Boolean;

  { methods } 

    ///<summary>
    ///  Intialize request for interruption.
    ///</summary>
    procedure Interrupt;

  { propertys } 

    ///<summary>
    ///  Returns new token binded to this <see cref="T:Aspose.Slides.IInterruptionTokenSource" />
    ///  .
    ///</summary>
    property Token: DNIInterruptionToken read get_Token;
    ///<summary>
    ///  Returns true if interruption requested, false otherwise.
    ///</summary>
    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Provides methods to license the component.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to find a license file named MyLicense.lic
  ///  in the folder that contains the component, in the folder that contains the calling assembly,
  ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
  ///<code>
  ///  [C#]
  ///  License license = new License();
  ///  license.SetLicense("MyLicense.lic");
  ///  [Visual Basic]
  ///  Dim license As license = New license
  ///  License.SetLicense("MyLicense.lic")
  ///</code></example>
  [DNTypeName('Aspose.Slides.ILicense')]
  DNILicense = interface(DDN.mscorlib.DNObject)
  ['{E5415639-B041-401C-979C-C7B0C82FAA29}']
  { methods } 

    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="licenseName">Can be a full or short file name or name of an embedded resource.
    ///  Use an empty string to switch to evaluation mode.</param>
    ///<remarks><p>Tries to find the license in the following locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. The folder of the component assembly.</p>
    ///  <p>3. The folder of the client's calling assembly.</p>
    ///  <p>4. The folder of the entry assembly.</p>
    ///  <p>5. An embedded resource in the client's calling assembly.</p>
    ///  <p><b>Note:</b>
    ///  On the .NET Compact Framework, tries to find the license only in these locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. An embedded resource in the client's calling assembly.</p>
    ///</remarks>
    ///<example>
    ///  In this example, an attempt will be made to find a license file named MyLicense.lic
    ///  in the folder that contains the component, in the folder that contains the calling assembly,
    ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
    ///<code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense("MyLicense.lic");
    ///  [Visual Basic]
    ///  Dim license As License = New License
    ///  license.SetLicense("MyLicense.lic")
    ///</code></example>
    procedure SetLicense(licenseName: string); overload;
    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="stream">A stream that contains the license.</param>
    ///<remarks><p>Use this method to load a license from a stream.</p>
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense(myStream);
    ///  [Visual Basic]
    ///  Dim license as License = new License
    ///  license.SetLicense(myStream)
    ///</code></example>
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Reset the license
    ///</summary>
    ///<remarks>Use this method to reset license in component</remarks>
    ///<example><code>
    ///  [C#]
    ///  License license = new License();
    ///  license.ResetLicense();
    ///  [Visual Basic]
    ///  Dim license as License = new License
    ///  license.ResetLicense()
    ///</code></example>
    procedure ResetLicense;
    ///<summary>
    ///  Check if licence is applied to component
    ///</summary>
    ///<returns><c>True</c> if component is licensed, otherwise <c>false</c></returns>
    function IsLicensed: Boolean;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents LightRig.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILightRig')]
  DNILightRig = interface(DDN.mscorlib.DNObject)
  ['{B78F909C-F191-40DF-995C-2CC2B6420052}']
  { getters & setters } 

    function get_Direction: DNLightingDirection;
    procedure set_Direction(value: DNLightingDirection);
    function get_LightType: DNLightRigPresetType;
    procedure set_LightType(value: DNLightRigPresetType);

  { methods } 

    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///</summary>
    ///  <param name="latitude">Latitude coordinate <see cref="T:System.Single" />
    ///</param>
    ///  <param name="longitude">Longitude coordinate <see cref="T:System.Single" />
    ///</param>
    ///  <param name="revolution">Revolution coordinate <see cref="T:System.Single" />
    ///</param>
    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  first element in return array - latitude, second - longitude, third - revolution.
    ///</summary>
    ///<returns>Rotation coordinates as <see cref="T:System.Single" />
    ///  []</returns>
    function GetRotation: TArray<Single>;

  { propertys } 

    ///<summary>
    ///  Light direction.
    ///  Read/write <see cref="T:Aspose.Slides.LightingDirection" />
    ///  .
    ///</summary>
    property Direction: DNLightingDirection read get_Direction write set_Direction;
    ///<summary>
    ///  Represents a preset light right that can be applied to a shape.
    ///  The light rig represents a group of lights oriented
    ///  in a specific way relative to a 3D scene.
    ///  Read/write <see cref="T:Aspose.Slides.LightRigPresetType" />
    ///  .
    ///</summary>
    property LightType: DNLightRigPresetType read get_LightType write set_LightType;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective light rig properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IThreeDFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.ILightRigEffectiveData')]
  DNILightRigEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{7A2F9AAD-BE54-4CE5-84AF-3BE323364429}']
  { getters & setters } 

    function get_Direction: DNLightingDirection;
    function get_LightType: DNLightRigPresetType;

  { methods } 

    ///<summary>
    ///  A rotation is defined through the use of a latitude coordinate, a longitude coordinate, and a revolution about the axis as the latitude and longitude coordinates.
    ///  First element in return array - latitude, second - longitude, third - revolution.
    ///</summary>
    ///<returns>Rotation coordinates as <see cref="T:System.Single" />
    ///  []</returns>
    function GetRotation: TArray<Single>;

  { propertys } 

    ///<summary>
    ///  Light direction.
    ///  Read-only <see cref="T:Aspose.Slides.LightingDirection" />
    ///  .
    ///</summary>
    property Direction: DNLightingDirection read get_Direction;
    ///<summary>
    ///  Represents a preset light right that can be applied to a shape.
    ///  The light rig represents a group of lights oriented in a specific way relative to a 3D scene.
    ///  Read-only <see cref="T:Aspose.Slides.LightRigPresetType" />
    ///  .
    ///</summary>
    property LightType: DNLightRigPresetType read get_LightType;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Auxiliary line parameters interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILineParamSource')]
  DNILineParamSource = interface(DDN.mscorlib.DNObject)
  ['{83546540-6B00-4ECF-866F-A77C324F6F5C}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents format of a line.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILineFormat')]
  DNILineFormat = interface(DNILineParamSource)
  ['{9E47EDDB-FD3D-4EA1-B08F-8F2973B64B38}']
  { getters & setters } 

    function get_IsFormatNotDefined: Boolean;
    function get_FillFormat: DNILineFillFormat;
    function get_SketchFormat: DNISketchFormat;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_DashStyle: DNLineDashStyle;
    procedure set_DashStyle(value: DNLineDashStyle);
    function get_CustomDashPattern: TArray<Single>;
    procedure set_CustomDashPattern(value: TArray<Single>);
    function get_CapStyle: DNLineCapStyle;
    procedure set_CapStyle(value: DNLineCapStyle);
    function get_Style: DNLineStyle;
    procedure set_Style(value: DNLineStyle);
    function get_Alignment: DNLineAlignment;
    procedure set_Alignment(value: DNLineAlignment);
    function get_JoinStyle: DNLineJoinStyle;
    procedure set_JoinStyle(value: DNLineJoinStyle);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_BeginArrowheadStyle: DNLineArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNLineArrowheadStyle);
    function get_EndArrowheadStyle: DNLineArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNLineArrowheadStyle);
    function get_BeginArrowheadWidth: DNLineArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNLineArrowheadWidth);
    function get_EndArrowheadWidth: DNLineArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNLineArrowheadWidth);
    function get_BeginArrowheadLength: DNLineArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNLineArrowheadLength);
    function get_EndArrowheadLength: DNLineArrowheadLength;
    procedure set_EndArrowheadLength(value: DNLineArrowheadLength);
    function get_AsILineParamSource: DNILineParamSource;

  { methods } 

    ///<summary>
    ///  Determines whether the two LineFormat instances are equal.
    ///</summary>
    ///  <param name="lineFormat">The LineFormat to compare with the current LineFormat.</param>
    ///<returns><b>true</b>
    ///  if the specified LineFormat is equal to the current LineFormat;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(lineFormat: DNILineFormat): Boolean;
    ///<summary>
    ///  Gets effective line formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNILineFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns true if line format is not defined (as just created, default).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFormatNotDefined: Boolean read get_IsFormatNotDefined;
    ///<summary>
    ///  Returns the fill format of a line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNILineFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns the sketch format of a line.
    ///  Read-only <see cref="T:Aspose.Slides.ISketchFormat" />
    ///  .
    ///</summary>
    property SketchFormat: DNISketchFormat read get_SketchFormat;
    ///<summary>
    ///  Returns or sets the width of a line.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the line dash style.
    ///  Read/write <see cref="T:Aspose.Slides.LineDashStyle" />
    ///  .
    ///</summary>
    property DashStyle: DNLineDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  Returns or sets the custom dash pattern.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property CustomDashPattern: TArray<Single> read get_CustomDashPattern write set_CustomDashPattern;
    ///<summary>
    ///  Returns or sets the line cap style.
    ///  Read/write <see cref="T:Aspose.Slides.LineCapStyle" />
    ///  .
    ///</summary>
    property CapStyle: DNLineCapStyle read get_CapStyle write set_CapStyle;
    ///<summary>
    ///  Returns or sets the line style.
    ///  Read/write <see cref="T:Aspose.Slides.LineStyle" />
    ///  .
    ///</summary>
    property Style: DNLineStyle read get_Style write set_Style;
    ///<summary>
    ///  Returns or sets the line alignment.
    ///  Read/write <see cref="T:Aspose.Slides.LineAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNLineAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Returns or sets the lines join style.
    ///  Read/write <see cref="T:Aspose.Slides.LineJoinStyle" />
    ///  .
    ///</summary>
    property JoinStyle: DNLineJoinStyle read get_JoinStyle write set_JoinStyle;
    ///<summary>
    ///  Returns or sets the miter limit of a line.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    ///<summary>
    ///  Returns or sets the arrowhead style at the beginning of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadStyle" />
    ///  .
    ///</summary>
    property BeginArrowheadStyle: DNLineArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    ///<summary>
    ///  Returns or sets the arrowhead style at the end of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadStyle" />
    ///  .
    ///</summary>
    property EndArrowheadStyle: DNLineArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    ///<summary>
    ///  Returns or sets the arrowhead width at the beginning of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadWidth" />
    ///  .
    ///</summary>
    property BeginArrowheadWidth: DNLineArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    ///<summary>
    ///  Returns or sets the arrowhead width at the end of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadWidth" />
    ///  .
    ///</summary>
    property EndArrowheadWidth: DNLineArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    ///<summary>
    ///  Returns or sets the arrowhead length at the beginning of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadLength" />
    ///  .
    ///</summary>
    property BeginArrowheadLength: DNLineArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    ///<summary>
    ///  Returns or sets the arrowhead length at the end of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadLength" />
    ///  .
    ///</summary>
    property EndArrowheadLength: DNLineArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    ///<summary>
    ///  Allows to get base ILineParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.ILineParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsILineParamSource: DNILineParamSource read get_AsILineParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective line formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.ILineFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.ILineFormatEffectiveData')]
  DNILineFormatEffectiveData = interface(DNILineParamSource)
  ['{82175FE4-0BDE-4AB9-8C6C-C17469B6D197}']
  { getters & setters } 

    function get_FillFormat: DNILineFillFormatEffectiveData;
    function get_SketchFormat: DNISketchFormatEffectiveData;
    function get_Width: Double;
    function get_DashStyle: DNLineDashStyle;
    function get_CustomDashPattern: TArray<Single>;
    function get_CapStyle: DNLineCapStyle;
    function get_Style: DNLineStyle;
    function get_Alignment: DNLineAlignment;
    function get_JoinStyle: DNLineJoinStyle;
    function get_MiterLimit: Single;
    function get_BeginArrowheadStyle: DNLineArrowheadStyle;
    function get_EndArrowheadStyle: DNLineArrowheadStyle;
    function get_BeginArrowheadWidth: DNLineArrowheadWidth;
    function get_EndArrowheadWidth: DNLineArrowheadWidth;
    function get_BeginArrowheadLength: DNLineArrowheadLength;
    function get_EndArrowheadLength: DNLineArrowheadLength;
    function get_AsILineParamSource: DNILineParamSource;

  { methods } 

    ///<summary>
    ///  Determines whether the two ILineFormatEffectiveData instances are equal.
    ///</summary>
    ///  <param name="lf">The ILineFormatEffectiveData to compare with the current ILineFormatEffectiveData.</param>
    ///<returns><b>true</b>
    ///  if the specified ILineFormatEffectiveData is equal to the current ILineFormatEffectiveData; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(lf: DNILineFormatEffectiveData): Boolean;

  { propertys } 

    ///<summary>
    ///  Returns the fill format of a line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFillFormatEffectiveData" />
    ///  .
    ///</summary>
    property FillFormat: DNILineFillFormatEffectiveData read get_FillFormat;
    ///<summary>
    ///  Returns the sketch format of a line.
    ///  Read-only <see cref="T:Aspose.Slides.ISketchFormatEffectiveData" />
    ///  .
    ///</summary>
    property SketchFormat: DNISketchFormatEffectiveData read get_SketchFormat;
    ///<summary>
    ///  Returns the width of a line.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width;
    ///<summary>
    ///  Returns the line dash style.
    ///  Read-only <see cref="T:Aspose.Slides.LineDashStyle" />
    ///  .
    ///</summary>
    property DashStyle: DNLineDashStyle read get_DashStyle;
    ///<summary>
    ///  Returns the custom dash pattern.
    ///  Read-only <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property CustomDashPattern: TArray<Single> read get_CustomDashPattern;
    ///<summary>
    ///  Returns the line cap style.
    ///  Read-only <see cref="T:Aspose.Slides.LineCapStyle" />
    ///  .
    ///</summary>
    property CapStyle: DNLineCapStyle read get_CapStyle;
    ///<summary>
    ///  Returns the line style.
    ///  Read-only <see cref="T:Aspose.Slides.LineStyle" />
    ///  .
    ///</summary>
    property Style: DNLineStyle read get_Style;
    ///<summary>
    ///  Returns the line alignment.
    ///  Read-only <see cref="T:Aspose.Slides.LineAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNLineAlignment read get_Alignment;
    ///<summary>
    ///  Returns the lines join style.
    ///  Read-only <see cref="T:Aspose.Slides.LineJoinStyle" />
    ///  .
    ///</summary>
    property JoinStyle: DNLineJoinStyle read get_JoinStyle;
    ///<summary>
    ///  Returns the miter limit of a line.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MiterLimit: Single read get_MiterLimit;
    ///<summary>
    ///  Returns the arrowhead style at the beginning of a line.
    ///  Read-only <see cref="T:Aspose.Slides.LineArrowheadStyle" />
    ///  .
    ///</summary>
    property BeginArrowheadStyle: DNLineArrowheadStyle read get_BeginArrowheadStyle;
    ///<summary>
    ///  Returns the arrowhead style at the end of a line.
    ///  Read-only <see cref="T:Aspose.Slides.LineArrowheadStyle" />
    ///  .
    ///</summary>
    property EndArrowheadStyle: DNLineArrowheadStyle read get_EndArrowheadStyle;
    ///<summary>
    ///  Returns the arrowhead width at the beginning of a line.
    ///  Read-only <see cref="T:Aspose.Slides.LineArrowheadWidth" />
    ///  .
    ///</summary>
    property BeginArrowheadWidth: DNLineArrowheadWidth read get_BeginArrowheadWidth;
    ///<summary>
    ///  Returns the arrowhead width at the end of a line.
    ///  Read-only <see cref="T:Aspose.Slides.LineArrowheadWidth" />
    ///  .
    ///</summary>
    property EndArrowheadWidth: DNLineArrowheadWidth read get_EndArrowheadWidth;
    ///<summary>
    ///  Returns the arrowhead length at the beginning of a line.
    ///  Read-only <see cref="T:Aspose.Slides.LineArrowheadLength" />
    ///  .
    ///</summary>
    property BeginArrowheadLength: DNLineArrowheadLength read get_BeginArrowheadLength;
    ///<summary>
    ///  Returns the arrowhead length at the end of a line.
    ///  Read-only <see cref="T:Aspose.Slides.LineArrowheadLength" />
    ///  .
    ///</summary>
    property EndArrowheadLength: DNLineArrowheadLength read get_EndArrowheadLength;
    ///<summary>
    ///  Allows to get base ILineParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.ILineParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsILineParamSource: DNILineParamSource read get_AsILineParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Allows to specify additional options (such as format or default font) when loading a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILoadOptions')]
  DNILoadOptions = interface(DDN.mscorlib.DNObject)
  ['{69A7487B-7A45-4228-BBF5-C35F16831394}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);
    function get_DefaultSymbolFont: string;
    procedure set_DefaultSymbolFont(value: string);
    function get_DefaultAsianFont: string;
    procedure set_DefaultAsianFont(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_OnlyLoadDocumentProperties: Boolean;
    procedure set_OnlyLoadDocumentProperties(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BlobManagementOptions: DNIBlobManagementOptions;
    procedure set_BlobManagementOptions(value: DNIBlobManagementOptions);
    function get_DocumentLevelFontSources: DNIFontSources;
    procedure set_DocumentLevelFontSources(value: DNIFontSources);
    function get_InterruptionToken: DNIInterruptionToken;
    procedure set_InterruptionToken(value: DNIInterruptionToken);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_SpreadsheetOptions: DNISpreadsheetOptions;
    procedure set_SpreadsheetOptions(value: DNISpreadsheetOptions);

  { propertys } 

    ///<summary>
    ///  Returns or sets format of a presentation to load.
    ///  Read/write <see cref="T:Aspose.Slides.LoadFormat" />
    ///  .
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Returns or sets Regular font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
    ///<summary>
    ///  Returns or sets Symbol font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property DefaultSymbolFont: string read get_DefaultSymbolFont write set_DefaultSymbolFont;
    ///<summary>
    ///  Returns or sets Asian font used in case source font is not found.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property DefaultAsianFont: string read get_DefaultAsianFont write set_DefaultAsianFont;
    ///<summary>
    ///  Gets or sets the password.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The password.
    ///</value>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  This property makes sense, if presentation file is password protected.
    ///  Value of true means that only document properties must be loaded from an encrypted
    ///  presentation file and password must be ignored.
    ///  Value of false means that entire encrypted presentation must be loaded with use of right
    ///  password.
    ///  If presentation isn't encrypted then property value is always ignored.
    ///  If document properties of an encrypted file aren't public and property value is true then
    ///  document properties cannot be loaded and exception will be thrown.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property OnlyLoadDocumentProperties: Boolean read get_OnlyLoadDocumentProperties write set_OnlyLoadDocumentProperties;
    ///<summary>
    ///  Returns or sets an object which receives warnings and decides whether loading
    ///  process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents the options which can be used to manage Binary Large Objects (BLOBs) handling behavior,
    ///  such as using of temporary files or max BLOBs bytes in memory. These options intended to set up
    ///  the best performance/memory consumption ratio for a perticular environment or requirements.
    ///<remarks>A Binary Large Object (BLOB) is a binary data stored as a single entity - i.e. BLOB can
    ///  be an audio, video or presentation itself.</remarks>
    ///</summary>
    property BlobManagementOptions: DNIBlobManagementOptions read get_BlobManagementOptions write set_BlobManagementOptions;
    ///<summary>
    ///  Specifies sources for external fonts to be used by the presentation.
    ///  These fonts are available to the presentation throughout its lifetime and are not shared with other presentations
    ///</summary>
    property DocumentLevelFontSources: DNIFontSources read get_DocumentLevelFontSources write set_DocumentLevelFontSources;
    ///<summary>
    ///  The token to monitor for interruption requests.
    ///<remarks>
    ///  This token manages the whole <see cref="T:Aspose.Slides.IPresentation" />
    ///  instance lifetime. Any long-running operation, such as presentaion
    ///  loading or saving, will be interrupted via calling of the <see cref="M:Aspose.Slides.IInterruptionTokenSource.Interrupt" />
    ///  method of
    ///  the <see cref="T:Aspose.Slides.IInterruptionTokenSource" />
    ///  .
    ///</remarks>
    ///</summary>
    property InterruptionToken: DNIInterruptionToken read get_InterruptionToken write set_InterruptionToken;
    ///<summary>
    ///  Returns or sets callback interface which manages external resources loading.
    ///  Read/write <see cref="T:Aspose.Slides.IResourceLoadingCallback" />
    ///  .
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Represents options which can be used to specify additional spreadsheets behavior.
    ///</summary>
    property SpreadsheetOptions: DNISpreadsheetOptions read get_SpreadsheetOptions write set_SpreadsheetOptions;
  end;

  //-------------namespace: Aspose.Slides----------------
  DNImageCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C70E585A-95ED-5E35-BA96-D12892FC2E77}']
  end;

  ///<summary>
  ///  Represents collection of PPImage.
  ///</summary>
  [DNTypeName('Aspose.Slides.ImageCollection')]
  DNImageCollection = interface(DDN.mscorlib.DNObject)
  ['{7B3D2EE3-9B53-3633-8B8D-8DF2FA09119B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of an image from an another presentation.
    ///</summary>
    ///  <param name="imageSource">Source image.</param>
    ///<returns>Added image.</returns>
    function AddImage(imageSource: DNIPPImage): DNIPPImage; overload;
    ///<summary>
    ///  Add an image to a presentation.
    ///</summary>
    ///<remarks>This method converts WMF/EMF metafiles to raster PNG image before inserting to a presentation.</remarks>
    ///  <param name="image">Image to add.</param>
    ///<returns>Added image.</returns>
    function AddImage(image: DDN.Aspose.Common.DNImage): DNIPPImage; overload;
    ///<summary>
    ///  Add an image to a presentation from stream.
    ///</summary>
    ///<remarks>This method can add WMF/EMF metafiles to a presentation without converting them to raster PNG image.</remarks>
    ///  <param name="stream">Stream to add image from.</param>
    ///<returns>Added image.</returns>
    function AddImage(stream: DDN.mscorlib.DNMemoryStream): DNIPPImage; overload;
    ///<summary>
    ///  Add an image to a presentation from stream.
    ///</summary>
    ///<remarks>This method can add WMF/EMF metafiles to a presentation without converting them to raster PNG image.</remarks>
    ///  <param name="stream">Stream to add image from.</param>
    ///<returns>Added image.</returns>
    function AddImage(stream: DDN.mscorlib.DNStream): DNIPPImage; overload;
    ///<summary>
    ///  Creates and adds an image to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add image file from.</param>
    ///  <param name="loadingStreamBehavior">The behavior which will be applied to the stream.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.IPPImage" />
    ///  .</returns>
    function AddImage(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIPPImage; overload;
    ///<summary>
    ///  Adds an image to a presentation from specified buffer.
    ///</summary>
    ///  <param name="buffer">Buffer.</param>
    ///<returns>Added image.</returns>
    function AddImage(buffer: TArray<Byte>): DNIPPImage; overload;
    ///<summary>
    ///  Add an image to a presentation from Svg object.
    ///</summary>
    ///  <param name="svgImage">Svg image object <see cref="T:Aspose.Slides.ISvgImage" />
    ///</param>
    ///<returns>Added image.</returns>
    ///<exception cref="T:System.ArgumentNullException">When svgImage parameter is null.</exception>
    function AddImage(svgImage: DNISvgImage): DNIPPImage; overload;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPPImage>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of images in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNImageCollection = class(TDNGenericImport<DNImageCollectionClass, DNImageCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNImageWrapperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FD26BF77-DDE6-5C84-A8A4-956B9F6ACB76}']
  end;

  ///<summary>
  ///  System.Drawing.Image wrapper for COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.ImageWrapper')]
  DNImageWrapper = interface(DDN.mscorlib.DNObject)
  ['{6CB16B79-8C40-4E1E-B09B-FC044F4D40BC}']
  { getters & setters } 

    function get_Image: DDN.Aspose.Common.DNImage;
    function get_Size: DDN.Aspose.Common.DNSize;

  { methods } 

    ///<summary>
    ///  Dispose ImageWrapper
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Saves Image to the specified file
    ///</summary>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Saves the Image to the specified stream in the specified format.
    ///</summary>
    procedure Save(stream: DDN.mscorlib.DNStream; imageFormat: DNPPImageFormat); overload;
    ///<summary>
    ///  Saves the Image to the specified file in the specified format.
    ///</summary>
    procedure Save(fileName: string; imageFormat: DNPPImageFormat); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets Image.
    ///  Read-only <see cref="P:Aspose.Slides.ImageWrapper.Image" />
    ///  .
    ///</summary>
    property Image: DDN.Aspose.Common.DNImage read get_Image;
    ///<summary>
    ///  Gets the width and height, in pixels, of the Image.
    ///  Read-only <see cref="P:Aspose.Slides.ImageWrapper.Size" />
    ///  .
    ///</summary>
    property Size: DDN.Aspose.Common.DNSize read get_Size;
  end;

  TDNImageWrapper = class(TDNGenericImport<DNImageWrapperClass, DNImageWrapper>) end;

  //-------------namespace: Aspose.Slides----------------
  DNImageWrapperFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E6A611D-2569-53E0-A7A5-2547CA84F727}']
  { constructors } 

    {class} function init: DNImageWrapperFactory;

  end;

  ///<summary>
  ///  This class allows to initialize IBitmapWrapper.
  ///</summary>
  [DNTypeName('Aspose.Slides.ImageWrapperFactory')]
  DNImageWrapperFactory = interface(DDN.mscorlib.DNObject)
  ['{3D0394C7-780C-4FF5-AAA0-860822B5F4DC}']
  { methods } 

    ///<summary>
    ///  Initializes a new instance of the BitmapWrapper class from the specified existing image.
    ///</summary>
    function CreateImageWrapper(image: DDN.Aspose.Common.DNImage): DNIImageWrapper; overload;
    ///<summary>
    ///  Initializes a new instance of the BitmapWrapper class from the specified data stream.
    ///</summary>
    function CreateImageWrapper(stream: DDN.mscorlib.DNStream): DNIImageWrapper; overload;
    ///<summary>
    ///  Initializes a new instance of the BitmapWrapper class from the specified file.
    ///</summary>
    function CreateImageWrapper(fileName: string): DNIImageWrapper; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageWrapperFactory = class(TDNGenericImport<DNImageWrapperFactoryClass, DNImageWrapperFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Master handout slide manager.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterHandoutSlideManager')]
  DNIMasterHandoutSlideManager = interface(DDN.mscorlib.DNObject)
  ['{46A93BF3-B54B-4090-8369-BD212BE16934}']
  { getters & setters } 

    function get_MasterHandoutSlide: DNIMasterHandoutSlide;

  { methods } 

    ///<summary>
    ///  Sets default master handout slide to related handout slide.
    ///</summary>
    ///<returns>Master handout slide <see cref="T:Aspose.Slides.IMasterHandoutSlide" />
    ///</returns>
    function SetDefaultMasterHandoutSlide: DNIMasterHandoutSlide;
    ///<summary>
    ///  Removes master handout slide.
    ///</summary>
    procedure RemoveMasterHandoutSlide;

  { propertys } 

    ///<summary>
    ///  Returns a master for all notes slides of this presentation if there is one, otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterHandoutSlide" />
    ///  .
    ///</summary>
    property MasterHandoutSlide: DNIMasterHandoutSlide read get_MasterHandoutSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Master notes slide manager.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterNotesSlideManager')]
  DNIMasterNotesSlideManager = interface(DDN.mscorlib.DNObject)
  ['{7CFD37CA-D181-4F4B-BFE2-223387FE5959}']
  { getters & setters } 

    function get_MasterNotesSlide: DNIMasterNotesSlide;

  { methods } 

    ///<summary>
    ///  Sets defalut master notes slide for related notes slide.
    ///</summary>
    ///<returns>Defalut master notes slide <see cref="T:Aspose.Slides.IMasterNotesSlide" />
    ///</returns>
    function SetDefaultMasterNotesSlide: DNIMasterNotesSlide;
    ///<summary>
    ///  Removes master notes slide.
    ///</summary>
    procedure RemoveMasterNotesSlide;

  { propertys } 

    ///<summary>
    ///  Returns a master for all notes slides of this presentation if there is one, otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterNotesSlide" />
    ///  .
    ///</summary>
    property MasterNotesSlide: DNIMasterNotesSlide read get_MasterNotesSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Provides methods to set metered key.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMetered')]
  DNIMetered = interface(DDN.mscorlib.DNObject)
  ['{4CEB210B-ED58-4ADE-A3EF-83D4631D9B95}']
  { methods } 

    ///<summary>
    ///  Sets metered public and private key.
    ///</summary>
    ///  <param name="publicKey">Metered public key.</param>
    ///  <param name="privateKey">Metered private key.</param>
    procedure SetMeteredKey(publicKey: string; privateKey: string);

  end;

  //-------------namespace: Aspose.Slides.Import----------------
  DNExternalResourceResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EA018B0-F85C-5BDD-94D1-BB29474A427C}']
  { constructors } 

    {class} function init: DNExternalResourceResolver;

  end;

  ///<summary>
  ///  Callback class used to resolve external resources during Html, Svg documents import.
  ///<remarks>Using this resolver could create a vulnerability when client provided HTML or SVG file will make server software to obtain local or network file. Use with caution. It is recommended not to specify ExternalResourceResolver at all (only embedded objects will be read) or create some subclass which checks if specified uri is valid.</remarks>
  ///</summary>
  [DNTypeName('Aspose.Slides.Import.ExternalResourceResolver')]
  DNExternalResourceResolver = interface(DDN.mscorlib.DNObject)
  ['{072C65CD-599D-4287-9470-509EB3424B0D}']
  { methods } 

    ///<summary>
    ///  Resolves the absolute URI from the base and relative URIs.
    ///</summary>
    ///  <param name="baseUri">Base URI of linking objects</param>
    ///  <param name="relativeUri">Relative URI to the linked object.</param>
    ///<returns>Absolute URI or null if the relative URI cannot be resolved.</returns>
    function ResolveUri(baseUri: string; relativeUri: string): string;
    ///<summary>
    ///  Maps a URI to an object containing the actual resource.
    ///</summary>
    ///  <param name="absoluteUri">Absolute URI to the object.</param>
    ///<returns> A <see cref="T:System.IO.Stream" />
    ///  object or null if resource cannot be streamed.</returns>
    function GetEntity(absoluteUri: string): DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExternalResourceResolver = class(TDNGenericImport<DNExternalResourceResolverClass, DNExternalResourceResolver>) end;

  //-------------namespace: Aspose.Slides.Import----------------
  DNHtmlExternalResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2BB93BC4-5B16-5E76-B7AE-D57B17861A44}']
  { constructors } 

    {class} function init: DNHtmlExternalResolver;

  end;

  ///<summary>
  ///  Callback object used by HTML import routine to obtain referrenced objects such as images.
  ///<remarks>Using this resolver could create a vulnurability when client provided HTML file will make server software to obtain local or network file. Use with caution. It is recommended not to specify HtmlExternalResolver at all (only embedded objects will be read) or create some subclass which checks if specified uri is valid.</remarks>
  ///</summary>
  [DNTypeName('Aspose.Slides.Import.HtmlExternalResolver')]
  DNHtmlExternalResolver = interface(DDN.mscorlib.DNObject)
  ['{BA8C992C-D69E-4A39-AA4B-DFE73814695A}']
  { methods } 

    ///<summary>
    ///  Resolves the absolute URI from the base and relative URIs.
    ///</summary>
    ///  <param name="baseUri">Base URI of linking objects</param>
    ///  <param name="relativeUri">Relative URI to the linked object.</param>
    ///<returns>Absolute URI or null if the relative URI cannot be resolved.</returns>
    function ResolveUri(baseUri: string; relativeUri: string): string;
    ///<summary>
    ///  Maps a URI to an object containing the actual resource.
    ///</summary>
    ///  <param name="absoluteUri">Absolute URI to the object.</param>
    ///<returns> A <see cref="T:System.IO.Stream" />
    ///  object or null if resource cannot be streamed.</returns>
    function GetEntity(absoluteUri: string): DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlExternalResolver = class(TDNGenericImport<DNHtmlExternalResolverClass, DNHtmlExternalResolver>) end;

  //-------------namespace: Aspose.Slides.Import----------------
  ///<summary>
  ///  Callback interface used to resolve external resources during Html, Svg documents import.
  ///</summary>
  [DNTypeName('Aspose.Slides.Import.IExternalResourceResolver')]
  DNIExternalResourceResolver = interface(DDN.mscorlib.DNObject)
  ['{88FF6EDD-D6D4-43E4-B25A-7806671FE7CA}']
  { methods } 

    ///<summary>
    ///  Resolves the absolute URI from the base and relative URIs.
    ///</summary>
    ///  <param name="baseUri">Base URI of linking objects</param>
    ///  <param name="relativeUri">Relative URI to the linked object.</param>
    ///<returns>Absolute URI or null if the relative URI cannot be resolved.</returns>
    function ResolveUri(baseUri: string; relativeUri: string): string;
    ///<summary>
    ///  Maps a URI to an object containing the actual resource.
    ///</summary>
    ///  <param name="absoluteUri">Absolute URI to the object.</param>
    ///<returns> A <see cref="T:System.IO.Stream" />
    ///  object or null if resource cannot be streamed.</returns>
    function GetEntity(absoluteUri: string): DDN.mscorlib.DNStream;

  end;

  //-------------namespace: Aspose.Slides.Import----------------
  ///<summary>
  ///  Callback interface used by HTML import routine to obtain referrenced objects such as images.
  ///</summary>
  [DNTypeName('Aspose.Slides.Import.IHtmlExternalResolver')]
  DNIHtmlExternalResolver = interface(DNIExternalResourceResolver)
  ['{B80E794A-CCCC-440C-BCDA-12553CCF82CE}']
  { getters & setters } 

    function get_AsIExternalResourceResolver: DNIExternalResourceResolver;

  { propertys } 

    ///<summary>
    ///  Returns IExternalResourceResolver interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIExternalResourceResolver: DNIExternalResourceResolver read get_AsIExternalResourceResolver;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents normal view properties. The normal view consists of
  ///  three content regions: the slide itself, a side content region, and a bottom content region.
  ///</summary>
  [DNTypeName('Aspose.Slides.INormalViewProperties')]
  DNINormalViewProperties = interface(DDN.mscorlib.DNObject)
  ['{97ED80EA-3D37-445D-BCE8-84F912D82EC0}']
  { getters & setters } 

    function get_ShowOutlineIcons: Boolean;
    procedure set_ShowOutlineIcons(value: Boolean);
    function get_SnapVerticalSplitter: Boolean;
    procedure set_SnapVerticalSplitter(value: Boolean);
    function get_VerticalBarState: DNSplitterBarStateType;
    procedure set_VerticalBarState(value: DNSplitterBarStateType);
    function get_HorizontalBarState: DNSplitterBarStateType;
    procedure set_HorizontalBarState(value: DNSplitterBarStateType);
    function get_PreferSingleView: Boolean;
    procedure set_PreferSingleView(value: Boolean);
    function get_RestoredLeft: DNINormalViewRestoredProperties;
    function get_RestoredTop: DNINormalViewRestoredProperties;

  { propertys } 

    ///<summary>
    ///  Specifies whether the application should show icons if displaying outline content in any
    ///  of the content regions of normal view mode.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowOutlineIcons: Boolean read get_ShowOutlineIcons write set_ShowOutlineIcons;
    ///<summary>
    ///  Specifies whether the vertical splitter should snap to a minimized state when the side
    ///  region is sufficiently small.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SnapVerticalSplitter: Boolean read get_SnapVerticalSplitter write set_SnapVerticalSplitter;
    ///<summary>
    ///  Specifies the state that the vertical splitter bar should be shown in.
    ///  A vertical splitter bar separates the slide from the side content region.
    ///</summary>
    ///  Read/write <see cref="T:Aspose.Slides.SplitterBarStateType" />
    property VerticalBarState: DNSplitterBarStateType read get_VerticalBarState write set_VerticalBarState;
    ///<summary>
    ///  Specifies the state that the horizontal splitter bar should be shown in.
    ///  A horizontal splitter bar separates the slide from the content region below the slide.
    ///</summary>
    ///  Read/write <see cref="T:Aspose.Slides.SplitterBarStateType" />
    property HorizontalBarState: DNSplitterBarStateType read get_HorizontalBarState write set_HorizontalBarState;
    ///<summary>
    ///  Specifies whether the user prefers to see a full-window single-content region over the
    ///  standard normal view with three content regions. If enabled, the application may choose
    ///  to display one of the content regions in the entire window.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PreferSingleView: Boolean read get_PreferSingleView write set_PreferSingleView;
    ///<summary>
    ///  This element specifies the sizing of the side content region of the normal view, when the region is of a variable
    ///  restored size(neither minimized nor maximized).
    ///  Read opnly <see cref="T:Aspose.Slides.INormalViewRestoredProperties" />
    ///  .
    ///</summary>
    property RestoredLeft: DNINormalViewRestoredProperties read get_RestoredLeft;
    ///<summary>
    ///  This element specifies the sizing of the top slide region of the normal view, when the region is of a variable
    ///  restored size(neither minimized nor maximized).
    ///  Read only <see cref="T:Aspose.Slides.INormalViewRestoredProperties" />
    ///  .
    ///</summary>
    property RestoredTop: DNINormalViewRestoredProperties read get_RestoredTop;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Specifies the sizing of the slide region ((width when a child of restoredTop, height when a
  ///  child of restoredLeft) of the normal view, when the region is of a variable restored size(neither minimized nor maximized).
  ///</summary>
  [DNTypeName('Aspose.Slides.INormalViewRestoredProperties')]
  DNINormalViewRestoredProperties = interface(DDN.mscorlib.DNObject)
  ['{4ED37B54-F6A3-4A55-87CF-0A6E7BCC4E67}']
  { getters & setters } 

    function get_DimensionSize: Single;
    procedure set_DimensionSize(value: Single);
    function get_AutoAdjust: Boolean;
    procedure set_AutoAdjust(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Specifies the size of the slide region (width when a child of RestoredTop, height when a
    ///  child of RestoredLeft).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///<exception cref="T:System.ArgumentOutOfRangeException">Throws when value less than 0 ar greater than 100.</exception></summary>
    property DimensionSize: Single read get_DimensionSize write set_DimensionSize;
    ///<summary>
    ///  Specifies whether the size of the side content region should compensate for the new size
    ///  when resizing the window containing the view within the application
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AutoAdjust: Boolean read get_AutoAdjust write set_AutoAdjust;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a size of notes slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.INotesSize')]
  DNINotesSize = interface(DDN.mscorlib.DNObject)
  ['{C4A9A67A-96F0-4144-B45D-4EA638B95549}']
  { getters & setters } 

    function get_Size: DDN.Aspose.Common.DNSizeF;
    procedure set_Size(value: DDN.Aspose.Common.DNSizeF);

  { propertys } 

    ///<summary>
    ///  Returns or sets the size in points.
    ///  Read/write <see cref="T:System.Drawing.SizeF" />
    ///  .
    ///</summary>
    property Size: DDN.Aspose.Common.DNSizeF read get_Size write set_Size;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Notes slide manager.
  ///</summary>
  [DNTypeName('Aspose.Slides.INotesSlideManager')]
  DNINotesSlideManager = interface(DDN.mscorlib.DNObject)
  ['{49915B0B-215F-40FE-83A7-7031F2D0EC24}']
  { getters & setters } 

    function get_NotesSlide: DNINotesSlide;

  { methods } 

    ///<summary>
    ///  Returns the notes slide for the current slide, creating one if there isn't.
    ///</summary>
    ///<returns><see cref="T:Aspose.Slides.INotesSlide" />
    ///  for this slide.</returns>
    function AddNotesSlide: DNINotesSlide;
    ///<summary>
    ///  Removes notes slide of the current slide.
    ///</summary>
    procedure RemoveNotesSlide;

  { propertys } 

    ///<summary>
    ///  Returns the notes slide for the current slide. Returns null if slide doesn't have notes slide.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSlide" />
    ///  .
    ///</summary>
    property NotesSlide: DNINotesSlide read get_NotesSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  DNInterruptionTokenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3610588-7B0C-57D3-91FF-07D8826FC492}']
  { static getter & setter } 

    {class} function get_None: DNInterruptionToken;

  { static propertys } 

    ///<summary>
    ///  Represents an empty interruption token.
    ///<remarks>Long-running operations will never be interrupted via <see cref="M:Aspose.Slides.InterruptionTokenSource.Interrupt" />
    ///  when using this token.</remarks>
    ///</summary>
    {class} property None: DNInterruptionToken read get_None;
  end;

  ///<summary>
  ///  This class represents the token to use for signaling long running tasks whether the interruption was requested.
  ///</summary>
  [DNTypeName('Aspose.Slides.InterruptionToken')]
  DNInterruptionToken = interface(DDN.mscorlib.DNObject)
  ['{6F70AC6D-6E20-4F57-B3A8-760698306A18}']
  { getters & setters } 

    function get_IsInterruptionRequested: Boolean;

  { methods } 

    ///<summary>
    ///  Throws an <exception cref="T:System.OperationCanceledException">OperationCanceledException</exception> if
    ///  interruption was requested.
    ///</summary>
    ///<exception cref="T:System.OperationCanceledException">Thrown when interruption was requested.</exception>
    procedure ThrowIfInterruptionRequested;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="T:System.Boolean" />
    ///  .true if interruption was requested.
    ///</summary>
    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  TDNInterruptionToken = class(TDNGenericImport<DNInterruptionTokenClass, DNInterruptionToken>) end;

  //-------------namespace: Aspose.Slides----------------
  DNInterruptionTokenSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4307D1B9-23E6-5A9E-9C5D-C7220D3B9900}']
  { constructors } 

    ///<summary>
    ///  Creates a new <see cref="T:Aspose.Slides.InterruptionTokenSource" />
    ///  .
    ///</summary>
    {class} function init: DNInterruptionTokenSource;

  end;

  ///<summary>
  ///  Represents the source of <see cref="T:Aspose.Slides.InterruptionToken" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.InterruptionTokenSource')]
  DNInterruptionTokenSource = interface(DDN.mscorlib.DNObject)
  ['{02766F24-E0CD-4E29-B337-F357324440CC}']
  { getters & setters } 

    function get_Token: DNIInterruptionToken;
    function get_IsInterruptionRequested: Boolean;

  { methods } 

    ///<summary>
    ///  Intialize request for interruption.
    ///</summary>
    procedure Interrupt;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns new token binded to this <see cref="T:Aspose.Slides.InterruptionTokenSource" />
    ///  .
    ///</summary>
    property Token: DNIInterruptionToken read get_Token;
    ///<summary>
    ///  Returns true if interruption requested, false otherwise.
    ///</summary>
    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  TDNInterruptionTokenSource = class(TDNGenericImport<DNInterruptionTokenSourceClass, DNInterruptionTokenSource>) end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents embedded data info for OLE object.
  ///</summary>
  [DNTypeName('Aspose.Slides.IOleEmbeddedDataInfo')]
  DNIOleEmbeddedDataInfo = interface(DDN.mscorlib.DNObject)
  ['{27887429-50D1-4B1E-B50E-B2B70F94619D}']
  { getters & setters } 

    function get_EmbeddedFileData: TArray<Byte>;
    function get_EmbeddedFileExtension: string;

  { propertys } 

    ///<summary>
    ///  Returns the file data of embedded OLE object
    ///  Read only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    ///<summary>
    ///  Returns the file extension for the current embedded OLE object
    ///  Read only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Allows to create paragraphs
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IParagraphFactory')]
  DNIParagraphFactory = interface(DDN.mscorlib.DNObject)
  ['{591B58B3-CE88-41BA-AC2D-6E06B634666B}']
  { methods } 

    ///<summary>
    ///  Creates a new empty paragraph.
    ///</summary>
    ///<returns>Paragraph.</returns>
    function CreateParagraph: DNIParagraph; overload;
    ///<summary>
    ///  Creates a new paragraph with specified paragraph data using.
    ///</summary>
    ///  <param name="paragraph">A paragraph to use data.</param>
    ///<returns>Paragraph.</returns>
    function CreateParagraph(paragraph: DNIParagraph): DNIParagraph; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  This class contains the paragraph formatting properties. Unlike <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
  ///  , all properties of this class are writeable.
  ///</summary>
  ///<remarks><para>This class is used to return and manipulate paragraph formatting properties defined for the particular paragraph. This means that
  ///  no inheritance is applied when getting values so for the majority of cases you will get values meaning "undefined".</para><para>In order to get the effective formatting parameter values including inherited you need to use <see cref="M:Aspose.Slides.IParagraphFormat.GetEffective" />
  ///  method
  ///  which returns a <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
  ///  instance.</para></remarks>
  [DNTypeName('Aspose.Slides.IParagraphFormat')]
  DNIParagraphFormat = interface(DDN.mscorlib.DNObject)
  ['{EC9F1F06-0DB7-4BF4-A09D-33B5A7FD4A06}']
  { getters & setters } 

    function get_Bullet: DNIBulletFormat;
    function get_Depth: Int16;
    procedure set_Depth(value: Int16);
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_SpaceWithin: Single;
    procedure set_SpaceWithin(value: Single);
    function get_SpaceBefore: Single;
    procedure set_SpaceBefore(value: Single);
    function get_SpaceAfter: Single;
    procedure set_SpaceAfter(value: Single);
    function get_EastAsianLineBreak: DNNullableBool;
    procedure set_EastAsianLineBreak(value: DNNullableBool);
    function get_RightToLeft: DNNullableBool;
    procedure set_RightToLeft(value: DNNullableBool);
    function get_LatinLineBreak: DNNullableBool;
    procedure set_LatinLineBreak(value: DNNullableBool);
    function get_HangingPunctuation: DNNullableBool;
    procedure set_HangingPunctuation(value: DNNullableBool);
    function get_MarginLeft: Single;
    procedure set_MarginLeft(value: Single);
    function get_MarginRight: Single;
    procedure set_MarginRight(value: Single);
    function get_Indent: Single;
    procedure set_Indent(value: Single);
    function get_DefaultTabSize: Single;
    procedure set_DefaultTabSize(value: Single);
    function get_Tabs: DNITabCollection;
    function get_FontAlignment: DNFontAlignment;
    procedure set_FontAlignment(value: DNFontAlignment);
    function get_DefaultPortionFormat: DNIPortionFormat;

  { methods } 

    ///<summary>
    ///  Gets effective paragraph formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIParagraphFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns bullet format of the paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IBulletFormat" />
    ///  .
    ///</summary>
    property Bullet: DNIBulletFormat read get_Bullet;
    ///<summary>
    ///  Returns or sets depth of the paragraph.
    ///  Value 0 means undefined value.
    ///  Read/write <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property Depth: Int16 read get_Depth write set_Depth;
    ///<summary>
    ///  Returns or sets the text alignment in a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.TextAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Returns or sets the amount of space between base lines in a paragraph. Positive value means percentage, negative - size in points. No inheritance applied.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceWithin: Single read get_SpaceWithin write set_SpaceWithin;
    ///<summary>
    ///  Returns or sets the amount of space before the first line in a paragraph with no inheritance.
    ///  A positive value specifies the percentage of the font size that the white space should be.
    ///  A negative value specifies the size of the white space in point size.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceBefore: Single read get_SpaceBefore write set_SpaceBefore;
    ///<summary>
    ///  Returns or sets the amount of space after the last line in a paragraph with no inheritance.
    ///  A positive value specifies the percentage of the font size that the white space should be.
    ///  A negative value specifies the size of the white space in point size.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceAfter: Single read get_SpaceAfter write set_SpaceAfter;
    ///<summary>
    ///  Determines whether the East Asian line break is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property EastAsianLineBreak: DNNullableBool read get_EastAsianLineBreak write set_EastAsianLineBreak;
    ///<summary>
    ///  Determines whether the Right to Left writing is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RightToLeft: DNNullableBool read get_RightToLeft write set_RightToLeft;
    ///<summary>
    ///  Determines whether the Latin line break is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property LatinLineBreak: DNNullableBool read get_LatinLineBreak write set_LatinLineBreak;
    ///<summary>
    ///  Determines whether the hanging punctuation is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property HangingPunctuation: DNNullableBool read get_HangingPunctuation write set_HangingPunctuation;
    ///<summary>
    ///  Returns or sets the left margin in a paragraph with no inheritance.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginLeft: Single read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin in a paragraph with no inheritance.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginRight: Single read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets paragraph First Line Indent/Hanging Indent with no inheritance. Hanging Indent can be defined with negative values.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Indent: Single read get_Indent write set_Indent;
    ///<summary>
    ///  Returns or sets default tabulation size with no inheritance.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property DefaultTabSize: Single read get_DefaultTabSize write set_DefaultTabSize;
    ///<summary>
    ///  Returns tabulations of a paragraph. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ITabCollection" />
    ///  .
    ///</summary>
    property Tabs: DNITabCollection read get_Tabs;
    ///<summary>
    ///  Returns or sets a font alignment in a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.FontAlignment" />
    ///  .
    ///</summary>
    property FontAlignment: DNFontAlignment read get_FontAlignment write set_FontAlignment;
    ///<summary>
    ///  Returns default portion format of a paragraph. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionFormat" />
    ///  .
    ///</summary>
    property DefaultPortionFormat: DNIPortionFormat read get_DefaultPortionFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective paragraph formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IParagraphFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IParagraphFormatEffectiveData')]
  DNIParagraphFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{448AEBBB-1F0E-4B9E-9862-21EF5F7401F4}']
  { getters & setters } 

    function get_Bullet: DNIBulletFormatEffectiveData;
    function get_Depth: Int16;
    function get_Alignment: DNTextAlignment;
    function get_SpaceWithin: Single;
    function get_SpaceBefore: Single;
    function get_SpaceAfter: Single;
    function get_EastAsianLineBreak: Boolean;
    function get_RightToLeft: Boolean;
    function get_LatinLineBreak: Boolean;
    function get_HangingPunctuation: Boolean;
    function get_MarginLeft: Single;
    function get_MarginRight: Single;
    function get_Indent: Single;
    function get_DefaultTabSize: Single;
    function get_Tabs: TArray<DNITabEffectiveData>;
    function get_FontAlignment: DNFontAlignment;
    function get_DefaultPortionFormat: DNIPortionFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns a bullet format of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IBulletFormatEffectiveData" />
    ///  .
    ///</summary>
    property Bullet: DNIBulletFormatEffectiveData read get_Bullet;
    ///<summary>
    ///  Returns a depth of a paragraph.
    ///  Read-only <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property Depth: Int16 read get_Depth;
    ///<summary>
    ///  Returns the text alignment in a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.TextAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment;
    ///<summary>
    ///  Returns the amount of space between base lines in a paragraph.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceWithin: Single read get_SpaceWithin;
    ///<summary>
    ///  Returns the amount of space before the first line in a paragraph.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceBefore: Single read get_SpaceBefore;
    ///<summary>
    ///  Returns the amount of space after the last line in a paragraph.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceAfter: Single read get_SpaceAfter;
    ///<summary>
    ///  Determines whether the East Asian line break is used in a paragraph.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EastAsianLineBreak: Boolean read get_EastAsianLineBreak;
    ///<summary>
    ///  Determines whether the Right to Left writing is used in a paragraph.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RightToLeft: Boolean read get_RightToLeft;
    ///<summary>
    ///  Determines whether the Latin line break is used in a paragraph.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property LatinLineBreak: Boolean read get_LatinLineBreak;
    ///<summary>
    ///  Determines whether the hanging punctuation is used in a paragraph.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HangingPunctuation: Boolean read get_HangingPunctuation;
    ///<summary>
    ///  Returns the left margin in a paragraph.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginLeft: Single read get_MarginLeft;
    ///<summary>
    ///  Returns the right margin in a paragraph.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginRight: Single read get_MarginRight;
    ///<summary>
    ///  Returns paragraph First Line Indent/Hanging Indent. Hanging Indent can be defined with negative values.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Indent: Single read get_Indent;
    ///<summary>
    ///  Returns default tabulation size.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property DefaultTabSize: Single read get_DefaultTabSize;
    ///<summary>
    ///  Returns tabulations of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.ITabEffectiveData" />
    ///  [].
    ///</summary>
    property Tabs: TArray<DNITabEffectiveData> read get_Tabs;
    ///<summary>
    ///  Returns a font alignment in a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.FontAlignment" />
    ///  .
    ///</summary>
    property FontAlignment: DNFontAlignment read get_FontAlignment;
    ///<summary>
    ///  Returns default portion format of a paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
    ///  .
    ///</summary>
    property DefaultPortionFormat: DNIPortionFormatEffectiveData read get_DefaultPortionFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents segment of graphics path of GeometryShape
  ///</summary>
  [DNTypeName('Aspose.Slides.IPathSegment')]
  DNIPathSegment = interface(DDN.mscorlib.DNObject)
  ['{EFE76FF7-052F-4045-BFA0-4A82C35B1E98}']
  { getters & setters } 

    function get_SegmentData: TArray<Single>;
    function get_PathCommand: DNPathCommandType;

  { propertys } 

    ///<summary>
    ///  Path data of the segment
    ///</summary>
    property SegmentData: TArray<Single> read get_SegmentData;
    ///<summary>
    ///  Path type of the segment
    ///</summary>
    property PathCommand: DNPathCommandType read get_PathCommand;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a pattern to fill a shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPatternFormat')]
  DNIPatternFormat = interface(DDN.mscorlib.DNObject)
  ['{D18E0ABF-4AD5-46FA-8BFF-BBF1E3D16E6D}']
  { getters & setters } 

    function get_PatternStyle: DNPatternStyle;
    procedure set_PatternStyle(value: DNPatternStyle);
    function get_ForeColor: DNIColorFormat;
    function get_BackColor: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Creates a tile image for the pattern fill with a specified colors.
    ///</summary>
    ///  <param name="background">The background <see cref="T:System.Drawing.Color" />
    ///  for the pattern.</param>
    ///  <param name="foreground">The foreground <see cref="T:System.Drawing.Color" />
    ///  for the pattern.</param>
    ///<returns>Tile <see cref="T:System.Drawing.Bitmap" />
    ///  .</returns>
    function GetTileImage(background: DDN.Aspose.Common.DNColor; foreground: DDN.Aspose.Common.DNColor): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Creates a tile image for the pattern fill.
    ///</summary>
    ///  <param name="styleColor">The default <see cref="T:System.Drawing.Color" />
    ///  ,
    ///  defined in ShapeEx's StyleEx object. Fill's colors can depend on this.</param>
    ///<returns>Tile <see cref="T:System.Drawing.Bitmap" />
    ///  .</returns>
    function GetTileImage(styleColor: DDN.Aspose.Common.DNColor): DDN.Aspose.Common.DNBitmap; overload;

  { propertys } 

    ///<summary>
    ///  Returns or sets the pattern style.
    ///  Read/write <see cref="T:Aspose.Slides.PatternStyle" />
    ///  .
    ///</summary>
    property PatternStyle: DNPatternStyle read get_PatternStyle write set_PatternStyle;
    ///<summary>
    ///  Returns the foreground pattern color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ForeColor: DNIColorFormat read get_ForeColor;
    ///<summary>
    ///  Returns the background pattern color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property BackColor: DNIColorFormat read get_BackColor;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective pattern filling properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
  ///  and <see cref="T:Aspose.Slides.ILineFillFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.IPatternFormatEffectiveData')]
  DNIPatternFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{6E45E978-C1EE-467F-A595-62AB4147C2DD}']
  { getters & setters } 

    function get_PatternStyle: DNPatternStyle;
    function get_ForeColor: DDN.Aspose.Common.DNColor;
    function get_BackColor: DDN.Aspose.Common.DNColor;

  { methods } 

    ///<summary>
    ///  Creates a tile image for the pattern fill with a specified colors.
    ///</summary>
    ///  <param name="background">The background <see cref="T:System.Drawing.Color" />
    ///  for the pattern.</param>
    ///  <param name="foreground">The foreground <see cref="T:System.Drawing.Color" />
    ///  for the pattern.</param>
    ///<returns>Tile <see cref="T:System.Drawing.Bitmap" />
    ///  .</returns>
    function GetTileImage(background: DDN.Aspose.Common.DNColor; foreground: DDN.Aspose.Common.DNColor): DDN.Aspose.Common.DNBitmap;

  { propertys } 

    ///<summary>
    ///  Returns the pattern style.
    ///  Read-only <see cref="T:Aspose.Slides.PatternStyle" />
    ///  .
    ///</summary>
    property PatternStyle: DNPatternStyle read get_PatternStyle;
    ///<summary>
    ///  Returns the foreground pattern color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ForeColor: DDN.Aspose.Common.DNColor read get_ForeColor;
    ///<summary>
    ///  Returns the background pattern color.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property BackColor: DDN.Aspose.Common.DNColor read get_BackColor;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective picture properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IPictureFillFormatEffectiveData" />
  ///  and <see cref="T:Aspose.Slides.IBulletFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.IPictureEffectiveData')]
  DNIPictureEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{A7F57FF1-DBB6-4960-A913-4C43D56D4277}']
  { getters & setters } 

    function get_Image: DNIPPImage;
    function get_LinkPathLong: string;
    function get_ImageTransform: DNIImageTransformOCollectionEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns the embedded image.
    ///  Read-only <see cref="T:Aspose.Slides.IPPImage" />
    ///  .
    ///</summary>
    property Image: DNIPPImage read get_Image;
    ///<summary>
    ///  Returns linked image's URL.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong;
    ///<summary>
    ///  Returns the collection of image transform effects.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOCollectionEffectiveData" />
    ///  .
    ///</summary>
    property ImageTransform: DNIImageTransformOCollectionEffectiveData read get_ImageTransform;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a placeholder on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPlaceholder')]
  DNIPlaceholder = interface(DDN.mscorlib.DNObject)
  ['{B084A704-95A7-4D68-95AD-239B957A9BE6}']
  { getters & setters } 

    function get_Orientation: DNOrientation;
    function get_Size: DNPlaceholderSize;
    function get_Type: DNPlaceholderType;
    function get_Index: UInt32;

  { propertys } 

    ///<summary>
    ///  Gets the orientation of a placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.Orientation" />
    ///  .
    ///</summary>
    property Orientation: DNOrientation read get_Orientation;
    ///<summary>
    ///  Gets the size of a placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.PlaceholderSize" />
    ///  .
    ///</summary>
    property Size: DNPlaceholderSize read get_Size;
    ///<summary>
    ///  Gets the type of a placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.PlaceholderType" />
    ///  .
    ///</summary>
    property &Type: DNPlaceholderType read get_Type;
    ///<summary>
    ///  Gets the index of a placeholder.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property Index: UInt32 read get_Index;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Allows to create test portions
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.IPortionFactory')]
  DNIPortionFactory = interface(DDN.mscorlib.DNObject)
  ['{4CDD3C98-B7D9-484B-B292-98E316A714CA}']
  { methods } 

    ///<summary>
    ///  Creates an empty text portion.
    ///</summary>
    ///<returns>Portion.</returns>
    function CreatePortion: DNIPortion; overload;
    ///<summary>
    ///  Creates a text portion from specified string.
    ///</summary>
    ///  <param name="str">String.</param>
    ///<returns>Portion.</returns>
    function CreatePortion(str: string): DNIPortion; overload;
    ///<summary>
    ///  Creates a portion with the using of a specified portion data.
    ///</summary>
    ///  <param name="portion">A portion to use.</param>
    ///<returns>Portion.</returns>
    function CreatePortion(portion: DNIPortion): DNIPortion; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an image in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPPImage')]
  DNIPPImage = interface(DDN.mscorlib.DNObject)
  ['{B1608DE5-D5B6-49BE-9FEC-3FD45952BBAB}']
  { getters & setters } 

    function get_BinaryData: TArray<Byte>;
    function get_SystemImage: DDN.Aspose.Common.DNImage;
    function get_SvgImage: DNISvgImage;
    procedure set_SvgImage(value: DNISvgImage);
    function get_ContentType: string;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_X: Int32;
    function get_Y: Int32;

  { methods } 

    ///<summary>
    ///  Replaces image data.
    ///</summary>
    ///  <param name="newImageData">The new image's data.</param>
    procedure ReplaceImage(newImageData: TArray<Byte>); overload;
    ///<summary>
    ///  Replaces image.
    ///</summary>
    ///  <param name="newImage">The new image.</param>
    procedure ReplaceImage(newImage: DDN.Aspose.Common.DNImage); overload;
    ///<summary>
    ///  Replaces image.
    ///</summary>
    ///  <param name="newImage">The new IPPImage.</param>
    procedure ReplaceImage(newImage: DNIPPImage); overload;

  { propertys } 

    ///<summary>
    ///  Returns the copy of an image's data.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property BinaryData: TArray<Byte> read get_BinaryData;
    ///<summary>
    ///  Returns the copy of an image of the System.Drawing.Image type.
    ///  Read-only <see cref="T:System.Drawing.Image" />
    ///  .
    ///</summary>
    property SystemImage: DDN.Aspose.Common.DNImage read get_SystemImage;
    ///<summary>
    ///  Returns or sets ISvgImage object <see cref="T:Aspose.Slides.ISvgImage" />
    ///</summary>
    ///<remarks>This value indicates that this image has been created from SVG.</remarks>
    property SvgImage: DNISvgImage read get_SvgImage write set_SvgImage;
    ///<summary>
    ///  Returns a MIME type of an image, encoded in <see cref="P:Aspose.Slides.IPPImage.BinaryData" />
    ///  .
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  Returns a width of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Returns a height of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  Returns a X-offset of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property X: Int32 read get_X;
    ///<summary>
    ///  Returns a Y-offset of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Y: Int32 read get_Y;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a component of a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPresentationComponent')]
  DNIPresentationComponent = interface(DDN.mscorlib.DNObject)
  ['{BE92D194-16A7-475C-B6AD-D23DB7754EDB}']
  { getters & setters } 

    function get_Presentation: DNIPresentation;

  { propertys } 

    ///<summary>
    ///  Returns the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a component of a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlideComponent')]
  DNISlideComponent = interface(DNIPresentationComponent)
  ['{052200BE-011C-4905-926E-1CBB4BA120BB}']
  { getters & setters } 

    function get_Slide: DNIBaseSlide;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { propertys } 

    ///<summary>
    ///  Returns the base slide.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Allows to get base IPresentationComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentationComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Encapsulates the object that represents a chart's axis.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IAxis')]
  DNIAxis = interface(DNISlideComponent)
  ['{11D375AD-C686-48A1-A377-264C96BFACC0}']
  { getters & setters } 

    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_CrossAt: Single;
    procedure set_CrossAt(value: Single);
    function get_DisplayUnit: DNDisplayUnitType;
    procedure set_DisplayUnit(value: DNDisplayUnitType);
    function get_ActualMaxValue: Double;
    function get_ActualMinValue: Double;
    function get_ActualMajorUnit: Double;
    function get_ActualMinorUnit: Double;
    function get_ActualMajorUnitScale: DNTimeUnitType;
    function get_ActualMinorUnitScale: DNTimeUnitType;
    function get_IsAutomaticMaxValue: Boolean;
    procedure set_IsAutomaticMaxValue(value: Boolean);
    function get_MaxValue: Double;
    procedure set_MaxValue(value: Double);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_IsAutomaticMinorUnit: Boolean;
    procedure set_IsAutomaticMinorUnit(value: Boolean);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_IsAutomaticMajorUnit: Boolean;
    procedure set_IsAutomaticMajorUnit(value: Boolean);
    function get_IsAutomaticMinValue: Boolean;
    procedure set_IsAutomaticMinValue(value: Boolean);
    function get_MinValue: Double;
    procedure set_MinValue(value: Double);
    function get_IsLogarithmic: Boolean;
    procedure set_IsLogarithmic(value: Boolean);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_IsPlotOrderReversed: Boolean;
    procedure set_IsPlotOrderReversed(value: Boolean);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_MajorTickMark: DNTickMarkType;
    procedure set_MajorTickMark(value: DNTickMarkType);
    function get_MinorTickMark: DNTickMarkType;
    procedure set_MinorTickMark(value: DNTickMarkType);
    function get_TickLabelPosition: DNTickLabelPositionType;
    procedure set_TickLabelPosition(value: DNTickLabelPositionType);
    function get_MajorUnitScale: DNTimeUnitType;
    procedure set_MajorUnitScale(value: DNTimeUnitType);
    function get_MinorUnitScale: DNTimeUnitType;
    procedure set_MinorUnitScale(value: DNTimeUnitType);
    function get_BaseUnitScale: DNTimeUnitType;
    procedure set_BaseUnitScale(value: DNTimeUnitType);
    function get_MinorGridLinesFormat: DNIChartLinesFormat;
    function get_MajorGridLinesFormat: DNIChartLinesFormat;
    function get_ShowMinorGridLines: Boolean;
    function get_ShowMajorGridLines: Boolean;
    function get_Format: DNIAxisFormat;
    function get_Title: DNIChartTitle;
    function get_CrossType: DNCrossesType;
    procedure set_CrossType(value: DNCrossesType);
    function get_Position: DNAxisPositionType;
    procedure set_Position(value: DNAxisPositionType);
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_TickLabelRotationAngle: Single;
    procedure set_TickLabelRotationAngle(value: Single);
    function get_TickLabelSpacing: UInt32;
    procedure set_TickLabelSpacing(value: UInt32);
    function get_IsAutomaticTickLabelSpacing: Boolean;
    procedure set_IsAutomaticTickLabelSpacing(value: Boolean);
    function get_TickMarksSpacing: UInt32;
    procedure set_TickMarksSpacing(value: UInt32);
    function get_IsAutomaticTickMarksSpacing: Boolean;
    procedure set_IsAutomaticTickMarksSpacing(value: Boolean);
    function get_LabelOffset: UInt16;
    procedure set_LabelOffset(value: UInt16);
    function get_CategoryAxisType: DNCategoryAxisType;
    procedure set_CategoryAxisType(value: DNCategoryAxisType);
    function get_AggregationType: DNAxisAggregationType;
    procedure set_AggregationType(value: DNAxisAggregationType);
    function get_BinWidth: Double;
    procedure set_BinWidth(value: Double);
    function get_NumberOfBins: UInt32;
    procedure set_NumberOfBins(value: UInt32);
    function get_IsOverflowBin: Boolean;
    procedure set_IsOverflowBin(value: Boolean);
    function get_IsAutomaticOverflowBin: Boolean;
    procedure set_IsAutomaticOverflowBin(value: Boolean);
    function get_OverflowBin: Double;
    procedure set_OverflowBin(value: Double);
    function get_IsUnderflowBin: Boolean;
    procedure set_IsUnderflowBin(value: Boolean);
    function get_IsAutomaticUnderflowBin: Boolean;
    procedure set_IsAutomaticUnderflowBin(value: Boolean);
    function get_UnderflowBin: Double;
    procedure set_UnderflowBin(value: Double);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { methods } 

    ///<summary>
    ///  Sets IAxis.CategoryAxisType property with a value that is automatically determined based on axis data.
    ///</summary>
    procedure SetCategoryAxisTypeAutomatically;

  { propertys } 

    ///<summary>
    ///  Represents if the value axis crosses the category axis between categories.
    ///  This property applies only to category axes, and it doesn't apply to 3-D charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    ///<summary>
    ///  Represents the point on the axis where the perpendicular axis crosses it.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CrossAt: Single read get_CrossAt write set_CrossAt;
    ///<summary>
    ///  Specifies the scaling value of the display units for the value axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DisplayUnitType" />
    ///  .
    ///</summary>
    property DisplayUnit: DNDisplayUnitType read get_DisplayUnit write set_DisplayUnit;
    ///<summary>
    ///  Specifies actual maximum value on the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMaxValue: Double read get_ActualMaxValue;
    ///<summary>
    ///  Specifies actual minimum value on the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMinValue: Double read get_ActualMinValue;
    ///<summary>
    ///  Specifies actual major unit of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMajorUnit: Double read get_ActualMajorUnit;
    ///<summary>
    ///  Specifies actual minor unit of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMinorUnit: Double read get_ActualMinorUnit;
    ///<summary>
    ///  Specifies actual major unit scale of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMajorUnitScale: DNTimeUnitType read get_ActualMajorUnitScale;
    ///<summary>
    ///  Specifies actual minor unit scale of the axis. Call method IChart.ValidateChartLayout() previously to get actual value.
    ///</summary>
    property ActualMinorUnitScale: DNTimeUnitType read get_ActualMinorUnitScale;
    ///<summary>
    ///  Indicates whether the max value is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMaxValue: Boolean read get_IsAutomaticMaxValue write set_IsAutomaticMaxValue;
    ///<summary>
    ///  Represents the maximum value on the value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MaxValue: Double read get_MaxValue write set_MaxValue;
    ///<summary>
    ///  Represents the minor units for the date or value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    ///<summary>
    ///  Indicates whether the minor unit of the axis is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMinorUnit: Boolean read get_IsAutomaticMinorUnit write set_IsAutomaticMinorUnit;
    ///<summary>
    ///  Represents the major units for the date or value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    ///<summary>
    ///  Indicates whether the major unit of the axis is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMajorUnit: Boolean read get_IsAutomaticMajorUnit write set_IsAutomaticMajorUnit;
    ///<summary>
    ///  Indicates whether the min value is automatically assigned.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticMinValue: Boolean read get_IsAutomaticMinValue write set_IsAutomaticMinValue;
    ///<summary>
    ///  Represents the minimum value on the value axis.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinValue: Double read get_MinValue write set_MinValue;
    ///<summary>
    ///  Represents if the value axis scale type is logarithmic or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsLogarithmic: Boolean read get_IsLogarithmic write set_IsLogarithmic;
    ///<summary>
    ///  Represents the logarithmic base. Default value is 10.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property LogBase: Double read get_LogBase write set_LogBase;
    ///<summary>
    ///  Represents if MS PowerPoint plots data points from last to first.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsPlotOrderReversed: Boolean read get_IsPlotOrderReversed write set_IsPlotOrderReversed;
    ///<summary>
    ///  Represents if the axis is visible.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Represents the type of major tick mark for the specified axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TickMarkType" />
    ///  .
    ///</summary>
    property MajorTickMark: DNTickMarkType read get_MajorTickMark write set_MajorTickMark;
    ///<summary>
    ///  Represents the type of minor tick mark for the specified axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TickMarkType" />
    ///  .
    ///</summary>
    property MinorTickMark: DNTickMarkType read get_MinorTickMark write set_MinorTickMark;
    ///<summary>
    ///  Represents the position of tick-mark labels on the specified axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TickLabelPositionType" />
    ///  .
    ///</summary>
    property TickLabelPosition: DNTickLabelPositionType read get_TickLabelPosition write set_TickLabelPosition;
    ///<summary>
    ///  Represents the major unit scale for the date axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TimeUnitType" />
    ///  .
    ///</summary>
    property MajorUnitScale: DNTimeUnitType read get_MajorUnitScale write set_MajorUnitScale;
    ///<summary>
    ///  Represents the major unit scale for the date axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TimeUnitType" />
    ///  .
    ///</summary>
    property MinorUnitScale: DNTimeUnitType read get_MinorUnitScale write set_MinorUnitScale;
    ///<summary>
    ///  Specifies the smallest time unit that is represented on the date axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.TimeUnitType" />
    ///  .
    ///</summary>
    property BaseUnitScale: DNTimeUnitType read get_BaseUnitScale write set_BaseUnitScale;
    ///<summary>
    ///  Represents minor gridlines format on a chart axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartLinesFormat" />
    ///  .
    ///</summary>
    property MinorGridLinesFormat: DNIChartLinesFormat read get_MinorGridLinesFormat;
    ///<summary>
    ///  Represents major gridlines format on a chart axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartLinesFormat" />
    ///  .
    ///</summary>
    property MajorGridLinesFormat: DNIChartLinesFormat read get_MajorGridLinesFormat;
    ///<summary>
    ///  Represents if the minor gridlines showed.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMinorGridLines: Boolean read get_ShowMinorGridLines;
    ///<summary>
    ///  Represents if the major gridlines showed.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMajorGridLines: Boolean read get_ShowMajorGridLines;
    ///<summary>
    ///  Represents format of axis.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxisFormat" />
    ///  .
    ///</summary>
    property Format: DNIAxisFormat read get_Format;
    ///<summary>
    ///  Gets the axis' title.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTitle" />
    ///  .
    ///</summary>
    property Title: DNIChartTitle read get_Title;
    ///<summary>
    ///  Represents the CrossType on the specified axis where the other axis crosses.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.CrossesType" />
    ///  .
    ///</summary>
    property CrossType: DNCrossesType read get_CrossType write set_CrossType;
    ///<summary>
    ///  Represents position of axis.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.AxisPositionType" />
    ///  .
    ///</summary>
    property Position: DNAxisPositionType read get_Position write set_Position;
    ///<summary>
    ///  Determines whether a axis has a visible title.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    ///<summary>
    ///  Represents the format string for the Axis Labels.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Indicates whether the format is linked source data.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    ///<summary>
    ///  Represents the rotation angle of tick labels
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property TickLabelRotationAngle: Single read get_TickLabelRotationAngle write set_TickLabelRotationAngle;
    ///<summary>
    ///  Specifies how many tick labels to skip between label that is drawn.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property TickLabelSpacing: UInt32 read get_TickLabelSpacing write set_TickLabelSpacing;
    ///<summary>
    ///  Specifies automatic tick label spacing value. If false: use TickLabelSpacing property.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticTickLabelSpacing: Boolean read get_IsAutomaticTickLabelSpacing write set_IsAutomaticTickLabelSpacing;
    ///<summary>
    ///  Specifies how many tick marks shall be skipped before the next one shall be
    ///  drawn. Applied to category or series axis.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property TickMarksSpacing: UInt32 read get_TickMarksSpacing write set_TickMarksSpacing;
    ///<summary>
    ///  Specifies automatic tick marks spacing value. If false: use TickMarksSpacing property.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAutomaticTickMarksSpacing: Boolean read get_IsAutomaticTickMarksSpacing write set_IsAutomaticTickMarksSpacing;
    ///<summary>
    ///  Specifies the distance of labels from the axis. Applied to category or date axis. Value must be between 0% and 1000%.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property LabelOffset: UInt16 read get_LabelOffset write set_LabelOffset;
    ///<summary>
    ///  Specifies the type of the category axis.
    ///  Read/write <see cref="P:Aspose.Slides.Charts.IAxis.CategoryAxisType" />
    ///  .
    ///</summary>
    property CategoryAxisType: DNCategoryAxisType read get_CategoryAxisType write set_CategoryAxisType;
    ///<summary>
    ///  Represents aggregation type of category axis (binning). Applied to category. Used with Histogram or HistogramPareto series only.
    ///</summary>
    property AggregationType: DNAxisAggregationType read get_AggregationType write set_AggregationType;
    ///<summary>
    ///  Specifies bin width when AggregationType property value setted to AxisAggregationType.ByBinWidth.
    ///  Applied to category axes. Used with Histogram or HistogramPareto series only.
    ///</summary>
    property BinWidth: Double read get_BinWidth write set_BinWidth;
    ///<summary>
    ///  Specifies number of bins when AggregationType property value setted to AxisAggregationType.ByNumberOfBins.
    ///  Applied to category axes. Used with Histogram or HistogramPareto series only.
    ///</summary>
    property NumberOfBins: UInt32 read get_NumberOfBins write set_NumberOfBins;
    ///<summary>
    ///  Specifies if overflow bin applied. Use IsAutomaticOverflowBin and OverflowBin to adjust overflow bin value.
    ///</summary>
    property IsOverflowBin: Boolean read get_IsOverflowBin write set_IsOverflowBin;
    ///<summary>
    ///  Specifies automatic overflow bin value. If false: use OverflowBin property.
    ///</summary>
    property IsAutomaticOverflowBin: Boolean read get_IsAutomaticOverflowBin write set_IsAutomaticOverflowBin;
    ///<summary>
    ///  Specifies overflow bin custom value. Applied when IsAutomaticOverflowBin property setted to false and IsOverflowBin property equals true.
    ///</summary>
    property OverflowBin: Double read get_OverflowBin write set_OverflowBin;
    ///<summary>
    ///  Specifies if underflow bin applied. Use IsAutomaticUnderflowBin and UnderflowBin to adjust underflow bin value.
    ///</summary>
    property IsUnderflowBin: Boolean read get_IsUnderflowBin write set_IsUnderflowBin;
    ///<summary>
    ///  Specifies automatic underflow bin value. If false: use UnderflowBin property.
    ///</summary>
    property IsAutomaticUnderflowBin: Boolean read get_IsAutomaticUnderflowBin write set_IsAutomaticUnderflowBin;
    ///<summary>
    ///  Specifies underflow bin custom value. Applied when IsAutomaticUnderflowBin property setted to false and IsUnderflowBin property equals true.
    ///</summary>
    property UnderflowBin: Double read get_UnderflowBin write set_UnderflowBin;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents an graphic chart on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChart')]
  DNIChart = interface(DNISlideComponent)
  ['{4CB337F8-3286-42E4-B2B2-EDE6786D141E}']
  { getters & setters } 

    function get_PlotVisibleCellsOnly: Boolean;
    procedure set_PlotVisibleCellsOnly(value: Boolean);
    function get_DisplayBlanksAs: DNDisplayBlanksAsType;
    procedure set_DisplayBlanksAs(value: DNDisplayBlanksAsType);
    function get_ChartData: DNIChartData;
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_ChartTitle: DNIChartTitle;
    function get_HasDataTable: Boolean;
    procedure set_HasDataTable(value: Boolean);
    function get_HasLegend: Boolean;
    procedure set_HasLegend(value: Boolean);
    function get_Legend: DNILegend;
    function get_ChartDataTable: DNIDataTable;
    function get_Style: DNStyleType;
    procedure set_Style(value: DNStyleType);
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_PlotArea: DNIChartPlotArea;
    function get_Rotation3D: DNIRotation3D;
    function get_BackWall: DNIChartWall;
    function get_SideWall: DNIChartWall;
    function get_Floor: DNIChartWall;
    function get_UserShapes: DNIGroupShape;
    function get_Axes: DNIAxesManager;
    function get_ShowDataLabelsOverMaximum: Boolean;
    procedure set_ShowDataLabelsOverMaximum(value: Boolean);
    function get_HasRoundedCorners: Boolean;
    procedure set_HasRoundedCorners(value: Boolean);
    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { methods } 

    ///<summary>
    ///  Calculates actual values of chart elements. Actual values inlude position of elements that implement IActualLayout interface
    ///  (IActualLayout.ActualX, IActualLayout.ActualY, IActualLayout.ActualWidth, IActualLayout.ActualHeight)
    ///  and actual axes values (IAxis.ActualMaxValue, IAxis.ActualMinValue, IAxis.ActualMajorUnit, IAxis.ActualMinorUnit,
    ///  IAxis.ActualMajorUnitScale, IAxis.ActualMinorUnitScale)
    ///</summary>
    procedure ValidateChartLayout;

  { propertys } 

    ///<summary>
    ///  Determines whether the only visible cells are plotted. False to plot both visible and hidden cells.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlotVisibleCellsOnly: Boolean read get_PlotVisibleCellsOnly write set_PlotVisibleCellsOnly;
    ///<summary>
    ///  Returns or sets the way to plot blank cells on a chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DisplayBlanksAsType" />
    ///  .
    ///</summary>
    property DisplayBlanksAs: DNDisplayBlanksAsType read get_DisplayBlanksAs write set_DisplayBlanksAs;
    ///<summary>
    ///  Returns information about the linked or embedded data associated with a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartData" />
    ///  .
    ///</summary>
    property ChartData: DNIChartData read get_ChartData;
    ///<summary>
    ///  Determines whether a chart has a visible title.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    ///<summary>
    ///  Returns or sets a chart title
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTitle" />
    ///  .
    ///</summary>
    property ChartTitle: DNIChartTitle read get_ChartTitle;
    ///<summary>
    ///  Determines whether a chart has a data table.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasDataTable: Boolean read get_HasDataTable write set_HasDataTable;
    ///<summary>
    ///  Determines whether a chart has a legend.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasLegend: Boolean read get_HasLegend write set_HasLegend;
    ///<summary>
    ///  Returns or sets a legend for a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegend" />
    ///  .
    ///</summary>
    property Legend: DNILegend read get_Legend;
    ///<summary>
    ///  Returns a data table of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataTable" />
    ///  .
    ///</summary>
    property ChartDataTable: DNIDataTable read get_ChartDataTable;
    ///<summary>
    ///  Returns or sets the chart style.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.StyleType" />
    ///  .
    ///</summary>
    property Style: DNStyleType read get_Style write set_Style;
    ///<summary>
    ///  Returns or sets the chart type.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ChartType" />
    ///  .
    ///</summary>
    property &Type: DNChartType read get_Type write set_Type;
    ///<summary>
    ///  Represents the plot area of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartPlotArea" />
    ///  .
    ///</summary>
    property PlotArea: DNIChartPlotArea read get_PlotArea;
    ///<summary>
    ///  Returns a 3D rotation of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IRotation3D" />
    ///  .
    ///</summary>
    property Rotation3D: DNIRotation3D read get_Rotation3D;
    ///<summary>
    ///  Returns an object which allows to change format of the back wall of a 3D chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartWall" />
    ///  .
    ///</summary>
    property BackWall: DNIChartWall read get_BackWall;
    ///<summary>
    ///  Returns an object which allows to change format of the side wall of a 3D chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartWall" />
    ///  .
    ///</summary>
    property SideWall: DNIChartWall read get_SideWall;
    ///<summary>
    ///  Returns an object which allows to change format of the floor of a 3D chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartWall" />
    ///  .
    ///</summary>
    property Floor: DNIChartWall read get_Floor;
    ///<summary>
    ///  Specify the shapes drawn on top of the chart.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    property UserShapes: DNIGroupShape read get_UserShapes;
    ///<summary>
    ///  Provide access to chart axes.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxesManager" />
    ///  .
    ///</summary>
    property Axes: DNIAxesManager read get_Axes;
    ///<summary>
    ///  Specifies data labels over the maximum of the chart shall be shown.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowDataLabelsOverMaximum: Boolean read get_ShowDataLabelsOverMaximum write set_ShowDataLabelsOverMaximum;
    ///<summary>
    ///  Specifies the chart area shall have rounded corners.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasRoundedCorners: Boolean read get_HasRoundedCorners write set_HasRoundedCorners;
    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
    ///<summary>
    ///  Returns IOverrideThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a component of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartComponent')]
  DNIChartComponent = interface(DNISlideComponent)
  ['{6B5D49CF-7267-4622-9FC2-560AE98FBA4A}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    ///<summary>
    ///  Returns the chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a chart series.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartSeries')]
  DNIChartSeries = interface(DNISlideComponent)
  ['{E3260D81-77BF-4816-BBEC-31407105ED75}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_Marker: DNIMarker;
    function get_Bar3DShape: DNChartShapeType;
    procedure set_Bar3DShape(value: DNChartShapeType);
    function get_Name: DNIStringChartValue;
    function get_DataPoints: DNIChartDataPointCollection;
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_ParentSeriesGroup: DNIChartSeriesGroup;
    function get_Format: DNIFormat;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Labels: DNIDataLabelCollection;
    function get_TrendLines: DNITrendlineCollection;
    function get_ErrorBarsXFormat: DNIErrorBarsFormat;
    function get_ErrorBarsYFormat: DNIErrorBarsFormat;
    function get_PlotOnSecondAxis: Boolean;
    procedure set_PlotOnSecondAxis(value: Boolean);
    function get_NumberFormatOfValues: string;
    procedure set_NumberFormatOfValues(value: string);
    function get_NumberFormatOfXValues: string;
    procedure set_NumberFormatOfXValues(value: string);
    function get_NumberFormatOfYValues: string;
    procedure set_NumberFormatOfYValues(value: string);
    function get_NumberFormatOfBubbleSizes: string;
    procedure set_NumberFormatOfBubbleSizes(value: string);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_InvertedSolidFillColor: DNIColorFormat;
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_ShowInnerPoints: Boolean;
    procedure set_ShowInnerPoints(value: Boolean);
    function get_ShowOutlierPoints: Boolean;
    procedure set_ShowOutlierPoints(value: Boolean);
    function get_ShowMeanMarkers: Boolean;
    procedure set_ShowMeanMarkers(value: Boolean);
    function get_ShowMeanLine: Boolean;
    procedure set_ShowMeanLine(value: Boolean);
    function get_QuartileMethod: DNQuartileMethodType;
    procedure set_QuartileMethod(value: DNQuartileMethodType);
    function get_ShowConnectorLines: Boolean;
    procedure set_ShowConnectorLines(value: Boolean);
    function get_ParentLabelLayout: DNParentLabelLayoutType;
    procedure set_ParentLabelLayout(value: DNParentLabelLayoutType);
    function get_BubbleSizeScale: Int32;
    function get_HasUpDownBars: Boolean;
    function get_GapWidth: Int32;
    function get_GapDepth: Int32;
    function get_IsColorVaried: Boolean;
    function get_HasSeriesLines: Boolean;
    function get_Overlap: SByte;
    function get_SecondPieSize: UInt16;
    function get_PieSplitPosition: Double;
    function get_PieSplitBy: DNPieSplitType;
    function get_DoughnutHoleSize: Byte;
    function get_FirstSliceAngle: UInt16;
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    function get_AsIChartComponent: DNIChartComponent;

  { methods } 

    ///<summary>
    ///  Returns an automatic color of series based on series index and chart style.
    ///  This color is used by default if FillType equals NotDefined.
    ///</summary>
    ///<returns>Automatic color of series <see cref="T:System.Drawing.Color" />
    ///</returns>
    function GetAutomaticSeriesColor: DDN.Aspose.Common.DNColor;

  { propertys } 

    ///<summary>
    ///  The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  Represents curve smoothing. True if curve smoothing is turned on for the line chart or scatter chart. Applies only to line and scatter connected by lines charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Smooth: Boolean read get_Smooth write set_Smooth;
    ///<summary>
    ///  Return series marker.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IMarker" />
    ///  .
    ///</summary>
    property Marker: DNIMarker read get_Marker;
    ///<summary>
    ///  Specifies the shape of a series of a 3-D bar chart.
    ///  Changing of value of this property can cause to automatically changing Type of series.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ChartShapeType" />
    ///  .
    ///</summary>
    property Bar3DShape: DNChartShapeType read get_Bar3DShape write set_Bar3DShape;
    ///<summary>
    ///  Return series name.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IStringChartValue" />
    ///  .
    ///</summary>
    property Name: DNIStringChartValue read get_Name;
    ///<summary>
    ///  Returns collection of data points of this series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartDataPointCollection" />
    ///  .
    ///</summary>
    property DataPoints: DNIChartDataPointCollection read get_DataPoints;
    ///<summary>
    ///  Returns a type of this series.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ChartType" />
    ///  .
    ///</summary>
    property &Type: DNChartType read get_Type write set_Type;
    ///<summary>
    ///  Returns parent series group.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesGroup" />
    ///  .
    ///</summary>
    property ParentSeriesGroup: DNIChartSeriesGroup read get_ParentSeriesGroup;
    ///<summary>
    ///  Returns the format of a series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Returns the order of a series.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Order: Int32 read get_Order write set_Order;
    ///<summary>
    ///  Returns the Labels of a series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabelCollection" />
    ///  .
    ///</summary>
    property Labels: DNIDataLabelCollection read get_Labels;
    ///<summary>
    ///  Collection of series trend lines
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ITrendlineCollection" />
    ///  .
    ///</summary>
    property TrendLines: DNITrendlineCollection read get_TrendLines;
    ///<summary>
    ///  Represents ErrorBars of series with derection X.
    ///<remarks>
    ///  ErrorBars with X direction are avalible for series of type area, bar, scatter and bubble.
    ///  For any other types of chart this property returns null (including 3D charts).
    ///  In case of custom values use DataPoints collection to specify value
    ///  (with <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
    ///  property).
    ///</remarks>
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IErrorBarsFormat" />
    ///  .
    ///</summary>
    property ErrorBarsXFormat: DNIErrorBarsFormat read get_ErrorBarsXFormat;
    ///<summary>
    ///  Represents ErrorBars of series with derection Y.
    ///<remarks>
    ///  ErrorBars with Y direction are avalible for series of type area, bar, line, scatter and bubble.
    ///  For any other types of chart this property returns null (including 3D charts).
    ///  In case of custom values use DataPoints collection to specify value
    ///  (with <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
    ///  property).
    ///</remarks>
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IErrorBarsFormat" />
    ///  .
    ///</summary>
    property ErrorBarsYFormat: DNIErrorBarsFormat read get_ErrorBarsYFormat;
    ///<summary>
    ///  Indicates if this series is plotted on second value axis.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis write set_PlotOnSecondAxis;
    ///<summary>
    ///  Returns or sets the number format for series values.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfValues: string read get_NumberFormatOfValues write set_NumberFormatOfValues;
    ///<summary>
    ///  Returns or sets the number format for series x values.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfXValues: string read get_NumberFormatOfXValues write set_NumberFormatOfXValues;
    ///<summary>
    ///  Returns or sets the number format for series y values.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfYValues: string read get_NumberFormatOfYValues write set_NumberFormatOfYValues;
    ///<summary>
    ///  Returns or sets the number format for series bubble sizes.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property NumberFormatOfBubbleSizes: string read get_NumberFormatOfBubbleSizes write set_NumberFormatOfBubbleSizes;
    ///<summary>
    ///  Specifies the bar, column or bubble series shall invert its colors if the value is negative.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Specifies invert solid color for series. To apply color setting set series format FillType to FillType.Solid.
    ///  Read/write <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property InvertedSolidFillColor: DNIColorFormat read get_InvertedSolidFillColor;
    ///<summary>
    ///  Represents legend entry related with this series
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryProperties" />
    ///  .
    ///</summary>
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    ///<summary>
    ///  Represents inner points. True if inner points are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowInnerPoints: Boolean read get_ShowInnerPoints write set_ShowInnerPoints;
    ///<summary>
    ///  Represents outlier points. True if outlier points are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowOutlierPoints: Boolean read get_ShowOutlierPoints write set_ShowOutlierPoints;
    ///<summary>
    ///  Represents mean markers. True if mean markers are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMeanMarkers: Boolean read get_ShowMeanMarkers write set_ShowMeanMarkers;
    ///<summary>
    ///  Represents mean markers. True if mean line are shown on the BoxAndWhisker chart. Applies only to BoxAndWhisker charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowMeanLine: Boolean read get_ShowMeanLine write set_ShowMeanLine;
    ///<summary>
    ///  Represents quartile method. Applies only to BoxAndWhisker charts.
    ///</summary>
    property QuartileMethod: DNQuartileMethodType read get_QuartileMethod write set_QuartileMethod;
    ///<summary>
    ///  Represents connector lines. Applies only to Waterfall charts.
    ///</summary>
    property ShowConnectorLines: Boolean read get_ShowConnectorLines write set_ShowConnectorLines;
    ///<summary>
    ///  Represents layout of parent category labels. Applies only to Treemap charts.
    ///</summary>
    property ParentLabelLayout: DNParentLabelLayoutType read get_ParentLabelLayout write set_ParentLabelLayout;
    ///<summary>
    ///  Specifies the scale factor for the bubble chart (can be
    ///  between 0 and 300 percents of the default size).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.BubbleSizeScale read/write property for change value.
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.BubbleSizeScale.
    ///</remarks>
    property BubbleSizeScale: Int32 read get_BubbleSizeScale;
    ///<summary>
    ///  Determines whether Line- or Stock-chart has a up/down bars.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.UpDownBars.HasUpDownBars read/write property for change value.
    ///  Use ParentSeriesGroup.UpDownBars property for format up/down bars.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.UpDownBars.HasUpDownBars.
    ///</remarks>
    property HasUpDownBars: Boolean read get_HasUpDownBars;
    ///<summary>
    ///  Specifies the space between bar or column clusters, as a percentage of the bar or column width.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.GapWidth read/write property for change value.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.GapWidth.
    ///</remarks>
    property GapWidth: Int32 read get_GapWidth;
    ///<summary>
    ///  Returns or sets the distance, as a percentage of the marker width, between the data series in a 3D chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.GapDepth read/write property for change value.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.GapDepth.
    ///</remarks>
    property GapDepth: Int32 read get_GapDepth;
    ///<summary>
    ///  Specifies that each data marker in the series has a different color.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.IsColorVaried read/write property for change value.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.IsColorVaried.
    ///</remarks>
    property IsColorVaried: Boolean read get_IsColorVaried;
    ///<summary>
    ///  Determines whether there are series lines for this series and kindred series.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.HasSeriesLines read/write property for change value.
    ///  Use ParentSeriesGroup.SeriesLinesFormat property for format series lines.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.HasSeriesLines.
    ///</remarks>
    property HasSeriesLines: Boolean read get_HasSeriesLines;
    ///<summary>
    ///  Specifies how much bars and columns shall overlap on 2-D charts (from -100 to 100).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.Overlap read/write property for change value.
    ///  Read-only <see cref="T:System.SByte" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.Overlap.
    ///</remarks>
    property Overlap: SByte read get_Overlap;
    ///<summary>
    ///  Specifies the size of the second pie or bar of a pie-of-pie chart or
    ///  a bar-of-pie chart, as a percentage of the size of the first pie (can
    ///  be between 5 and 200 percents).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.SecondPieSize read/write property for change value.
    ///  Read-only <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.SecondPieSize.
    ///</remarks>
    property SecondPieSize: UInt16 read get_SecondPieSize;
    ///<summary>
    ///  Specifies a value that shall be used to determine which data points
    ///  are in the second pie or bar on a pie-of-pie or bar-of-pie chart.
    ///  Is used together with PieSplitBy property.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.PieSplitPosition read/write property for change value.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.PieSplitPosition.
    ///</remarks>
    property PieSplitPosition: Double read get_PieSplitPosition;
    ///<summary>
    ///  Specifies how to determine which data points are in the second pie or bar
    ///  on a pie-of-pie or bar-of-pie chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.PieSplitBy read/write property for change value.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.PieSplitType" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  1) This is the projection of the property ParentSeriesGroup.PieSplitBy.
    ///  2) If property value is PieSplitType.Custom then you can define custom split
    ///  information with ParentSeriesGroup.PieSplitCustomPoints property.
    ///</remarks>
    property PieSplitBy: DNPieSplitType read get_PieSplitBy;
    ///<summary>
    ///  Specifies the size of the hole in a doughnut chart (can be between 10 and 90 percents
    ///  of the size of the plot area.).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.DoughnutHoleSize read/write property for change value.
    ///  Read-only <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.DoughnutHoleSize.
    ///</remarks>
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize;
    ///<summary>
    ///  Specifies the angle of the first pie or doughnut chart slice,
    ///  in degrees (clockwise from up, from 0 to 360 degrees).
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.FirstSliceAngle read/write property for change value.
    ///  Read-only <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.FirstSliceAngle.
    ///</remarks>
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle;
    ///<summary>
    ///  The custom split information for a pie-of-pie or bar-of-pie chart with a custom split.
    ///  Contains data points that shall be drawn in the second pie or bar in a pie-of-pie or
    ///  bar-of-pie chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IPieSplitCustomPointCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.PieSplitCustomPoints.
    ///</remarks>
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    ///<summary>
    ///  Specifies how the bubble size values are represented on the bubble chart.
    ///  This is the property not only of this series but of all series of parent series
    ///  group - this is projection of appropriate group property. And so this property
    ///  is read-only.
    ///  Use ParentSeriesGroup property for access to parent series group.
    ///  Use ParentSeriesGroup.BubbleSizeRepresentation read/write property for change value.
    ///</summary>
    ///<remarks>
    ///  This is the projection of the property ParentSeriesGroup.BubbleSizeRepresentation.
    ///</remarks>
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation;
    ///<summary>
    ///  Allows to get base IChartComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents group of series.
  ///</summary>
  ///<remarks>
  ///  1) See summary and remarks for ChartSeriesGroupCollection class and CombinableSeriesTypesGroup enum.
  ///  2) Group of series contains some series properies whitch is common for
  ///  each series in group ("series group properties").
  ///  "Series group properties" in ChartSeriesGroup class is read/write.
  ///  Each of "series group properties" can have a read-only projection in ChartSeries class.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesGroup')]
  DNIChartSeriesGroup = interface(DNISlideComponent)
  ['{285869C4-F917-4533-8FBE-8E6E4A48C941}']
  { getters & setters } 

    function get_Type: DNCombinableSeriesTypesGroup;
    function get_PlotOnSecondAxis: Boolean;
    function get_Series: DNIChartSeriesReadonlyCollection;
    function get_Item(index: Int32): DNIChartSeries;
    function get_UpDownBars: DNIUpDownBarsManager;
    function get_GapWidth: UInt16;
    procedure set_GapWidth(value: UInt16);
    function get_GapDepth: UInt16;
    procedure set_GapDepth(value: UInt16);
    function get_FirstSliceAngle: UInt16;
    procedure set_FirstSliceAngle(value: UInt16);
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_HasSeriesLines: Boolean;
    procedure set_HasSeriesLines(value: Boolean);
    function get_Overlap: SByte;
    procedure set_Overlap(value: SByte);
    function get_SecondPieSize: UInt16;
    procedure set_SecondPieSize(value: UInt16);
    function get_PieSplitPosition: Double;
    procedure set_PieSplitPosition(value: Double);
    function get_PieSplitBy: DNPieSplitType;
    procedure set_PieSplitBy(value: DNPieSplitType);
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_DoughnutHoleSize: Byte;
    procedure set_DoughnutHoleSize(value: Byte);
    function get_BubbleSizeScale: Int32;
    procedure set_BubbleSizeScale(value: Int32);
    function get_HiLowLinesFormat: DNIChartLinesFormat;
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    procedure set_BubbleSizeRepresentation(value: DNBubbleSizeRepresentationType);
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    ///<summary>
    ///  Returns a type of this series group.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.CombinableSeriesTypesGroup" />
    ///  .
    ///</summary>
    property &Type: DNCombinableSeriesTypesGroup read get_Type;
    ///<summary>
    ///  Indicates if series of this group is plotted on secondary axis.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis;
    ///<summary>
    ///  Returns a readonly collection of chart series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeriesReadonlyCollection" />
    ///  .
    ///</summary>
    property Series: DNIChartSeriesReadonlyCollection read get_Series;
    property Item[index: Int32]: DNIChartSeries read get_Item; default;
    ///<summary>
    ///  Provede access to up/down bars of Line- or Stock-chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IUpDownBarsManager" />
    ///  .
    ///</summary>
    property UpDownBars: DNIUpDownBarsManager read get_UpDownBars;
    ///<summary>
    ///  Specifies the space between bar or column clusters, as a percentage of the bar or column width.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property GapWidth: UInt16 read get_GapWidth write set_GapWidth;
    ///<summary>
    ///  Returns or sets the distance, as a percentage of the marker width, between the data series in a 3D chart.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property GapDepth: UInt16 read get_GapDepth write set_GapDepth;
    ///<summary>
    ///  Gets or sets the angle of the first pie or doughnut chart slice,
    ///  in degrees (clockwise from up, from 0 to 360 degrees).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle write set_FirstSliceAngle;
    ///<summary>
    ///  Specifies that each data marker in the series has a different color.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    ///<summary>
    ///  True if chart has series lines. Applied to stacked bar and OfPie charts.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasSeriesLines: Boolean read get_HasSeriesLines write set_HasSeriesLines;
    ///<summary>
    ///  Specifies how much bars and columns shall overlap on 2-D charts (from -100 to 100).
    ///  Read/write <see cref="T:System.SByte" />
    ///  .
    ///</summary>
    property Overlap: SByte read get_Overlap write set_Overlap;
    ///<summary>
    ///  Specifies the size of the second pie or bar of a pie-of-pie chart or
    ///  a bar-of-pie chart, as a percentage of the size of the first pie (can
    ///  be between 5 and 200 percents).
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property SecondPieSize: UInt16 read get_SecondPieSize write set_SecondPieSize;
    ///<summary>
    ///  Specifies a value that shall be used to determine which data points
    ///  are in the second pie or bar on a pie-of-pie or bar-of-pie chart.
    ///  Is used together with PieSplitBy property.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property PieSplitPosition: Double read get_PieSplitPosition write set_PieSplitPosition;
    ///<summary>
    ///  Specifies how to determine which data points are in the second pie or bar
    ///  on a pie-of-pie or bar-of-pie chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.PieSplitType" />
    ///  .
    ///</summary>
    property PieSplitBy: DNPieSplitType read get_PieSplitBy write set_PieSplitBy;
    ///<summary>
    ///  The custom split information for a pie-of-pie or bar-of-pie chart with a custom split.
    ///  Contains data points that shall be drawn in the second pie or bar in a pie-of-pie or
    ///  bar-of-pie chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IPieSplitCustomPointCollection" />
    ///  .
    ///</summary>
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    ///<summary>
    ///  Specifies the size of the hole in a doughnut chart (can be between 10 and 90 percents
    ///  of the size of the plot area.).
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize write set_DoughnutHoleSize;
    ///<summary>
    ///  Specifies the scale factor for the bubble chart (can be
    ///  between 0 and 300 percents of the default size).
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property BubbleSizeScale: Int32 read get_BubbleSizeScale write set_BubbleSizeScale;
    ///<summary>
    ///  Specifies HiLowLines format.
    ///  HiLowLines applied with HiLowClose, OpenHiLowClose, VolumeHiLowClose and VolumeOpenHiLowClose chart types.
    ///</summary>
    property HiLowLinesFormat: DNIChartLinesFormat read get_HiLowLinesFormat;
    ///<summary>
    ///  Specifies how the bubble size values are represented on the bubble chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.BubbleSizeRepresentationType" />
    ///  .
    ///</summary>
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation write set_BubbleSizeRepresentation;
    ///<summary>
    ///  Allows to get base IChartComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents formatting options for DataLabel.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IDataLabelFormat')]
  DNIDataLabelFormat = interface(DNISlideComponent)
  ['{76AE7DC6-EB92-4F70-B348-355F20C69147}']
  { getters & setters } 

    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Format: DNIFormat;
    function get_Position: DNLegendDataLabelPosition;
    procedure set_Position(value: DNLegendDataLabelPosition);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowLabelAsDataCallout: Boolean;
    procedure set_ShowLabelAsDataCallout(value: Boolean);
    function get_ShowLabelValueFromCell: Boolean;
    procedure set_ShowLabelValueFromCell(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    ///<summary>
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the IsNumberFormatLinkedToSource property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the IsNumberFormatLinkedToSource property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.IsNumberFormatLinkedToSource = val;" cause to
    ///  all DataLabels[i].IsNumberFormatLinkedToSource is equal to val).
    ///</remarks>
    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    ///<summary>
    ///  Represents the format string for the DataLabels object.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the NumberFormat property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Represents the format string for the DataLabel objects.
    ///  Set this property with value also sets this value to the NumberFormat property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.NumberFormat = val;" cause to
    ///  all DataLabels[i].NumberFormat is equal to val).
    ///</remarks>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Represents the format of the data label.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property represents the default format for the new data labels in the DataLabelCollection collection.
    ///</remarks>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Represents the position of the data label.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.LegendDataLabelPosition" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the Position property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Represents the position for the DataLabel objects.
    ///  Set this property with value also sets this value to the Position property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.Position = val;" cause to
    ///  all DataLabels[i].Position is equal to val).
    ///</remarks>
    property Position: DNLegendDataLabelPosition read get_Position write set_Position;
    ///<summary>
    ///  Represents a specified chart's data label legend key display behavior.
    ///  True if the data label legend key is visible.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLegendKey property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLegendKey property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLegendKey = val;" cause to
    ///  all DataLabels[i].ShowLegendKey is equal to val).
    ///</remarks>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Represents a specified chart's data label percentage value display behavior.
    ///  True displays the percentage value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowValue property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowValue property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowValue = val;" cause to
    ///  all DataLabels[i].ShowValue is equal to val).
    ///</remarks>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    ///<summary>
    ///  Represents a specified chart's data label category name display behavior.
    ///  True to display the category name for the data labels on a chart. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowCategoryName property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowCategoryName property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowCategoryName = val;" cause to
    ///  all DataLabels[i].ShowCategoryName is equal to val).
    ///</remarks>
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    ///<summary>
    ///  Returns or sets a Boolean to indicate the series name display behavior for the data labels on a chart.
    ///  True to show the series name. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowSeriesName property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowSeriesName property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowSeriesName = val;" cause to
    ///  all DataLabels[i].ShowSeriesName is equal to val).
    ///</remarks>
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    ///<summary>
    ///  Represents a specified chart's data label percentage value display behavior.
    ///  True displays the percentage value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowPercentage property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowPercentage property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowPercentage = val;" cause to
    ///  all DataLabels[i].ShowPercentage is equal to val).
    ///</remarks>
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    ///<summary>
    ///  Represents a specified chart's data label bubble size value display behavior.
    ///  True displays the bubble size value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowBubbleSize property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowBubbleSize property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowBubbleSize = val;" cause to
    ///  all DataLabels[i].ShowBubbleSize is equal to val).
    ///</remarks>
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    ///<summary>
    ///  Represents a specified chart's data label leader lines display behavior.
    ///  True displays the leader lines. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLeaderLines property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLeaderLines property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLeaderLines = val;" cause to
    ///  all DataLabels[i].ShowLeaderLines is equal to val).
    ///</remarks>
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    ///<summary>
    ///  Determines either specified chart's data label will be displayed as data callout or as data label.
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLabelAsDataCallout property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLabelAsDataCallout property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLabelAsDataCallout = val;" cause to
    ///  all DataLabels[i].ShowLabelAsDataCallout is equal to val).
    ///</remarks>
    ///</summary>
    property ShowLabelAsDataCallout: Boolean read get_ShowLabelAsDataCallout write set_ShowLabelAsDataCallout;
    ///<summary>
    ///  Represents a specified chart's data label cell value display behavior.
    ///  True displays cell value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLabelValueFromCell property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLabelValueFromCell property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLabelValueFromCell = val;" cause to
    ///  all DataLabels[i].ShowLabelValueFromCell is equal to val).
    ///</remarks>
    property ShowLabelValueFromCell: Boolean read get_ShowLabelValueFromCell write set_ShowLabelValueFromCell;
    ///<summary>
    ///  Sets or returns a Variant representing the separator used for the data labels on a chart.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the Separator property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the Separator property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.Separator = val;" cause to
    ///  all DataLabels[i].Separator is equal to val).
    ///</remarks>
    property Separator: string read get_Separator write set_Separator;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents data table properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IDataTable')]
  DNIDataTable = interface(DNISlideComponent)
  ['{9D76731E-13DE-4C35-A7EC-61B496EE2A91}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_HasBorderHorizontal: Boolean;
    procedure set_HasBorderHorizontal(value: Boolean);
    function get_HasBorderOutline: Boolean;
    procedure set_HasBorderOutline(value: Boolean);
    function get_HasBorderVertical: Boolean;
    procedure set_HasBorderVertical(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    ///<summary>
    ///  Returns the line, fill, and effect styles of an object.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  True if the chart data table has horizontal cell borders.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBorderHorizontal: Boolean read get_HasBorderHorizontal write set_HasBorderHorizontal;
    ///<summary>
    ///  True if the chart data table has outline borders.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBorderOutline: Boolean read get_HasBorderOutline write set_HasBorderOutline;
    ///<summary>
    ///  True if the chart data table has vertical cell borders.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBorderVertical: Boolean read get_HasBorderVertical write set_HasBorderVertical;
    ///<summary>
    ///  True if the data label legend key is visible.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents error bars of chart series. ErrorBars custom values are in IChartDataPointCollection
  ///  (in <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
  ///  property).
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IErrorBarsFormat')]
  DNIErrorBarsFormat = interface(DNISlideComponent)
  ['{336CF957-3066-4A8D-A0B3-1905D4D43B71}']
  { getters & setters } 

    function get_Type: DNErrorBarType;
    procedure set_Type(value: DNErrorBarType);
    function get_ValueType: DNErrorBarValueType;
    procedure set_ValueType(value: DNErrorBarValueType);
    function get_HasEndCap: Boolean;
    procedure set_HasEndCap(value: Boolean);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    ///<summary>
    ///  Gets or sets type of error bars.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ErrorBarType" />
    ///  .
    ///</summary>
    property &Type: DNErrorBarType read get_Type write set_Type;
    ///<summary>
    ///  Represents possible ways to determine the length of the error bars.
    ///  In case of custom value type to specify value use <see cref="P:Aspose.Slides.Charts.IChartDataPoint.ErrorBarsCustomValues" />
    ///  property of specific data point in DataPoints collection of series.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ErrorBarValueType" />
    ///  .
    ///</summary>
    property ValueType: DNErrorBarValueType read get_ValueType write set_ValueType;
    ///<summary>
    ///  Specifies an end cap is not drawn on the error bars.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasEndCap: Boolean read get_HasEndCap write set_HasEndCap;
    ///<summary>
    ///  Gets or sets value which is used with Fixed, Percentage and StandardDeviation value types to determine the length of the error bars.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Value: Single read get_Value write set_Value;
    ///<summary>
    ///  Represents the format of the error bars.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format write set_Format;
    ///<summary>
    ///  Gets or sets Error Bars visibility.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Returns IChartComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartComponent" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart text format.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IFormattedTextContainer')]
  DNIFormattedTextContainer = interface(DNISlideComponent)
  ['{CE9203E2-F93D-4934-9D34-E2C57479D3C4}']
  { getters & setters } 

    function get_TextFormat: DNIChartTextFormat;
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    ///<summary>
    ///  Returns chart text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Returns IChartComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartComponent" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Specifies the exact position of a chart element.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ILayoutable')]
  DNILayoutable = interface(DNISlideComponent)
  ['{99110408-B10A-4512-BE85-7ED0EF157776}']
  { getters & setters } 

    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    ///<summary>
    ///  Specifies the x location (left) of the chart element as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Specifies the top of the chart element as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Specifies the width of the chart element as a fraction of the width of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Specifies the height of the chart element as a fraction of the height of the chart.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Gets the right of the chart element as a fraction of the width of the chart.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Right: Single read get_Right;
    ///<summary>
    ///  Gets the top of the chart element as a fraction of the height of the chart.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Bottom: Single read get_Bottom;
    ///<summary>
    ///  Allows to get base IChartComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart title properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartPlotArea')]
  DNIChartPlotArea = interface(DNILayoutable)
  ['{133FE589-BB5A-4920-A231-FC6E28D76E36}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_AsILayoutable: DNILayoutable;
    function get_AsIActualLayout: DNIActualLayout;
    function get_LayoutTargetType: DNLayoutTargetType;
    procedure set_LayoutTargetType(value: DNLayoutTargetType);

  { propertys } 

    ///<summary>
    ///  Returns the format of a plot area.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Allows to get base ILayoutable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILayoutable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    ///<summary>
    ///  Returns IActualLayout interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIActualLayout: DNIActualLayout read get_AsIActualLayout;
    ///<summary>
    ///  If layout of the plot area defined manually this property specifies whether
    ///  to layout the plot area by its inside (not including axis and axis labels) or outside
    ///  (including axis and axis labels).
    ///  Read/write <see cref="P:Aspose.Slides.Charts.IChartPlotArea.LayoutTargetType" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  using (Presentation presentation = new Presentation())
    ///  {
    ///  ISlide slide = presentation.Slides[0];
    ///  IChart chart = slide.Shapes.AddChart(ChartType.ClusteredColumn, 20, 100, 600, 400);
    ///  chart.PlotArea.AsILayoutable.X = 0.2f;
    ///  chart.PlotArea.AsILayoutable.Y = 0.2f;
    ///  chart.PlotArea.AsILayoutable.Width = 0.7f;
    ///  chart.PlotArea.AsILayoutable.Height = 0.7f;
    ///  chart.PlotArea.LayoutTargetType = LayoutTargetType.Inner;
    ///  ...
    ///  }
    ///</code></example>
    property LayoutTargetType: DNLayoutTargetType read get_LayoutTargetType write set_LayoutTargetType;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart title properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartTitle')]
  DNIChartTitle = interface(DNILayoutable)
  ['{2B1D0348-78E2-4E4B-AA40-1D0BBC1D7436}']
  { getters & setters } 

    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Format: DNIFormat;
    function get_AsILayoutable: DNILayoutable;
    function get_AsIOverridableText: DNIOverridableText;

  { propertys } 

    ///<summary>
    ///  Determines whether other chart elements shall be allowed to overlap title.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Overlay: Boolean read get_Overlay write set_Overlay;
    ///<summary>
    ///  Returns the fill, line, effect styles of a title.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Allows to get base ILayoutable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILayoutable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    ///<summary>
    ///  Allows to get base IOverridableText interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IOverridableText" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIOverridableText: DNIOverridableText read get_AsIOverridableText;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a series labels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IDataLabel')]
  DNIDataLabel = interface(DNILayoutable)
  ['{2ED29D6C-A659-403A-8F59-54153EA2F03B}']
  { getters & setters } 

    function get_IsVisible: Boolean;
    function get_DataLabelFormat: DNIDataLabelFormat;
    function get_ValueFromCell: DNIChartDataCell;
    procedure set_ValueFromCell(value: DNIChartDataCell);
    function get_AsILayoutable: DNILayoutable;
    function get_AsIOverridableText: DNIOverridableText;
    function get_AsIActualLayout: DNIActualLayout;

  { methods } 

    ///<summary>
    ///  Make data label hidden by setting all Show*-flags (ShowValue, ...) to false state.
    ///  IsVisible will be false after this.
    ///</summary>
    ///<remarks>
    ///  If data label is not visible (IsVisible is false) you can make data label visible with
    ///  setting Show*-flags (ShowValue, ...) to true state.
    ///</remarks>
    procedure Hide;
    ///<summary>
    ///  Returns actual label text based on DataLabelFormat settings or TextFrameForOverriding.Text value.
    ///</summary>
    ///<returns>Actual label text <see cref="T:System.String" />
    ///</returns>
    function GetActualLabelText: string;

  { propertys } 

    ///<summary>
    ///  False means that data label is not visible (and so all Show*-flags (ShowValue, ...) are false).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If data label is visible you can make it hidden with Hide() method.
    ///  But if data label is not visible (IsVisible is false) you can make data label visible
    ///  with setting Show*-flags (ShowValue, ...) to true state.
    ///</remarks>
    property IsVisible: Boolean read get_IsVisible;
    ///<summary>
    ///  Returns format of the data label.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabelFormat" />
    ///  .
    ///</summary>
    property DataLabelFormat: DNIDataLabelFormat read get_DataLabelFormat;
    ///<summary>
    ///  Gets or sets workbook data cell. Applied if IDataLabelFormat.ShowLabelValueFromCell property equals true.
    ///</summary>
    property ValueFromCell: DNIChartDataCell read get_ValueFromCell write set_ValueFromCell;
    ///<summary>
    ///  Returns ILayoutable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILayoutable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    ///<summary>
    ///  Returns IOverridableText interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IOverridableText" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIOverridableText: DNIOverridableText read get_AsIOverridableText;
    ///<summary>
    ///  Returns IActualLayout interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIActualLayout: DNIActualLayout read get_AsIActualLayout;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents chart's legend properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ILegend')]
  DNILegend = interface(DNILayoutable)
  ['{4E6DFC6E-DBC3-4B29-8DAF-D789D3A0F79E}']
  { getters & setters } 

    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Position: DNLegendPositionType;
    procedure set_Position(value: DNLegendPositionType);
    function get_Format: DNIFormat;
    function get_Entries: DNILegendEntryCollection;
    function get_AsILayoutable: DNILayoutable;
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    ///<summary>
    ///  Determines whether other chart elements shall be allowed to overlap legend.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Overlay: Boolean read get_Overlay write set_Overlay;
    ///<summary>
    ///  Specifies the position of the legend on a chart.
    ///  Non-NaN values of X, Y, Width, Heigt properties override effect of this property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.LegendPositionType" />
    ///  .
    ///</summary>
    property Position: DNLegendPositionType read get_Position write set_Position;
    ///<summary>
    ///  Returns the format of a legend.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Gets legend entries.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryCollection" />
    ///  .
    ///</summary>
    property Entries: DNILegendEntryCollection read get_Entries;
    ///<summary>
    ///  Allows to get base ILayoutable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILayoutable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents legend properties of a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ILegendEntryProperties')]
  DNILegendEntryProperties = interface(DNISlideComponent)
  ['{BC3D4F67-D2EF-4A56-9DC0-7096E26BCE7C}']
  { getters & setters } 

    function get_Hide: Boolean;
    procedure set_Hide(value: Boolean);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    ///<summary>
    ///  Returns or sets the hide flag of legend entry.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hide: Boolean read get_Hide write set_Hide;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents overridable text for a chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IOverridableText')]
  DNIOverridableText = interface(DNISlideComponent)
  ['{93F47DEE-5F12-4A64-A49C-95DBD065AB01}']
  { getters & setters } 

    function get_TextFrameForOverriding: DNITextFrame;
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { methods } 

    ///<summary>
    ///  Initialize TextFrameForOverriding with the text in paramener "text".
    ///  If TextFrameForOverriding is already initialized then simply changes its text.
    ///</summary>
    ///  <param name="text">Text for a new TextFrameForOverriding.</param>
    ///<returns>Text frame <see cref="T:Aspose.Slides.ITextFrame" />
    ///</returns>
    function AddTextFrameForOverriding(text: string): DNITextFrame;

  { propertys } 

    ///<summary>
    ///  Can contain a rich formatted text. If this property is not null then this
    ///  formatted text value overrides auto-generated text.
    ///  Auto-generated text is an implicit property of the data label, the display
    ///  unit label of the value axis, the axis title, the chart title, the label of the trendline.
    ///  Auto-generated text is formatted with the IFormattedTextContainer.TextFormat property.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Class represents trend line of chart series
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ITrendline')]
  DNITrendline = interface(DNISlideComponent)
  ['{97C2F9FA-3C6B-425D-8721-CBA4E68C3D76}']
  { getters & setters } 

    function get_TrendlineName: string;
    procedure set_TrendlineName(value: string);
    function get_TrendlineType: DNTrendlineType;
    procedure set_TrendlineType(value: DNTrendlineType);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Backward: Double;
    procedure set_Backward(value: Double);
    function get_Forward: Double;
    procedure set_Forward(value: Double);
    function get_Intercept: Double;
    procedure set_Intercept(value: Double);
    function get_DisplayEquation: Boolean;
    procedure set_DisplayEquation(value: Boolean);
    function get_Order: Byte;
    procedure set_Order(value: Byte);
    function get_Period: Byte;
    procedure set_Period(value: Byte);
    function get_DisplayRSquaredValue: Boolean;
    procedure set_DisplayRSquaredValue(value: Boolean);
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_AsIOverridableText: DNIOverridableText;

  { propertys } 

    ///<summary>
    ///  Gets or sets  name of the trendline.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property TrendlineName: string read get_TrendlineName write set_TrendlineName;
    ///<summary>
    ///  Gets or sets type of trend line.
    ///  Read/write <see cref="P:Aspose.Slides.Charts.ITrendline.TrendlineType" />
    ///  .
    ///</summary>
    property TrendlineType: DNTrendlineType read get_TrendlineType write set_TrendlineType;
    ///<summary>
    ///  Represents the format of the trend line.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    property Format: DNIFormat read get_Format write set_Format;
    ///<summary>
    ///  Specifies the number of categories (or units on a scatter chart) that the trend line extends before
    ///  the data for the series that is being trended. On scatter and non-scatter charts, the value shall be any nonnegative
    ///  value.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Backward: Double read get_Backward write set_Backward;
    ///<summary>
    ///  Specifies the number of categories (or units on a scatter chart) that the trendline extends after the
    ///  data for the series that is being trended. On scatter and non-scatter charts, the value shall be any non-negative
    ///  value.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property &Forward: Double read get_Forward write set_Forward;
    ///<summary>
    ///  Specifies the value where the trendline shall cross the y axis. This property shall be supported only
    ///  when the trendline type is exp, linear, or poly.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Intercept: Double read get_Intercept write set_Intercept;
    ///<summary>
    ///  Specifies that the equation for the trendline is displayed on the chart (in the same label as the Rsquaredvalue).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisplayEquation: Boolean read get_DisplayEquation write set_DisplayEquation;
    ///<summary>
    ///  Specifies the order of the polynomial trend line. It is ignored for other trend line types. Value must be between 2 and 6.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property Order: Byte read get_Order write set_Order;
    ///<summary>
    ///  Specifies the period of the trend line for a moving average trend line. It is ignored for other trend
    ///  line variants. Value must be between 2 and 255.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property Period: Byte read get_Period write set_Period;
    ///<summary>
    ///  Specifies that the R-squared value of the trendline is displayed on the chart (in the same label as the equation).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property DisplayRSquaredValue: Boolean read get_DisplayRSquaredValue write set_DisplayRSquaredValue;
    ///<summary>
    ///  Represents legend entry related with this trendline
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegendEntryProperties" />
    ///  .
    ///</summary>
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    ///<summary>
    ///  Returns IOverridableText interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IOverridableText" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIOverridableText: DNIOverridableText read get_AsIOverridableText;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an audio clip on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAudioFrame')]
  DNIAudioFrame = interface(DNISlideComponent)
  ['{F576B679-2117-4CA0-80DC-ECA064BE0073}']
  { getters & setters } 

    function get_AudioCdStartTrack: Int32;
    procedure set_AudioCdStartTrack(value: Int32);
    function get_AudioCdStartTrackTime: Int32;
    procedure set_AudioCdStartTrackTime(value: Int32);
    function get_AudioCdEndTrack: Int32;
    procedure set_AudioCdEndTrack(value: Int32);
    function get_AudioCdEndTrackTime: Int32;
    procedure set_AudioCdEndTrackTime(value: Int32);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNAudioPlayModePreset;
    procedure set_PlayMode(value: DNAudioPlayModePreset);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_PlayAcrossSlides: Boolean;
    procedure set_PlayAcrossSlides(value: Boolean);
    function get_RewindAudio: Boolean;
    procedure set_RewindAudio(value: Boolean);
    function get_Embedded: Boolean;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedAudio: DNIAudio;
    procedure set_EmbeddedAudio(value: DNIAudio);
    function get_AsIPictureFrame: DNIPictureFrame;

  { propertys } 

    ///<summary>
    ///  Returns or sets a start track index.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdStartTrack: Int32 read get_AudioCdStartTrack write set_AudioCdStartTrack;
    ///<summary>
    ///  Returns or sets a start track time.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdStartTrackTime: Int32 read get_AudioCdStartTrackTime write set_AudioCdStartTrackTime;
    ///<summary>
    ///  Returns or sets a last track index
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdEndTrack: Int32 read get_AudioCdEndTrack write set_AudioCdEndTrack;
    ///<summary>
    ///  Returns or sets a last track time.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdEndTrackTime: Int32 read get_AudioCdEndTrackTime write set_AudioCdEndTrackTime;
    ///<summary>
    ///  Returns or sets the audio volume.
    ///  Read/write <see cref="T:Aspose.Slides.AudioVolumeMode" />
    ///  .
    ///</summary>
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    ///<summary>
    ///  Returns or sets the audio play mode.
    ///  Read/write <see cref="T:Aspose.Slides.AudioPlayModePreset" />
    ///  .
    ///</summary>
    property PlayMode: DNAudioPlayModePreset read get_PlayMode write set_PlayMode;
    ///<summary>
    ///  Determines whether an AudioFrame is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    ///<summary>
    ///  Determines whether an audio is looped.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    ///<summary>
    ///  Determines whether an audio is playing across the slides.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  // Add Audio Frame
    ///  IAudioFrame audioFrame = slide.Shapes.AddAudioFrameLinked(50, 50, 100, 100, "sampleaudio.wav");
    ///  // Set Audio to play across the slides
    ///  audioFrame.PlayAcrossSlides = true;
    ///  // Set Audio to automatically rewind to start after playing
    ///  audioFrame.RewindAudio = true;
    ///  pres.Save("AudioFrame_out.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    property PlayAcrossSlides: Boolean read get_PlayAcrossSlides write set_PlayAcrossSlides;
    ///<summary>
    ///  Determines whether an audio is automatically rewinded to start after playing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  // Add Audio Frame
    ///  IAudioFrame audioFrame = slide.Shapes.AddAudioFrameLinked(50, 50, 100, 100, "sampleaudio.wav");
    ///  // Set Audio to play across the slides
    ///  audioFrame.PlayAcrossSlides = true;
    ///  // Set Audio to automatically rewind to start after playing
    ///  audioFrame.RewindAudio = true;
    ///  pres.Save("AudioFrame_out.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    property RewindAudio: Boolean read get_RewindAudio write set_RewindAudio;
    ///<summary>
    ///  Determines whether a sound is embedded to a presentation.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Embedded: Boolean read get_Embedded;
    ///<summary>
    ///  Returns or sets the name of an audio file which is linked to an AudioFrame.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns or sets embedded audio object.
    ///  Read/write <see cref="T:Aspose.Slides.IAudio" />
    ///  .
    ///</summary>
    property EmbeddedAudio: DNIAudio read get_EmbeddedAudio write set_EmbeddedAudio;
    ///<summary>
    ///  Allows to get base IPictureFrame interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrame" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIPictureFrame: DNIPictureFrame read get_AsIPictureFrame;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an AutoShape.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAutoShape')]
  DNIAutoShape = interface(DNISlideComponent)
  ['{C95895F4-0BED-4CC9-8ECB-07101D097182}']
  { getters & setters } 

    function get_ShapeLock: DNIAutoShapeLock;
    function get_AutoShapeLock: DNIAutoShapeLock;
    function get_TextFrame: DNITextFrame;
    function get_UseBackgroundFill: Boolean;
    procedure set_UseBackgroundFill(value: Boolean);
    function get_AsIGeometryShape: DNIGeometryShape;

  { methods } 

    ///<summary>
    ///  Adds a new TextFrameEx to a shape.
    ///  If shape already has TextFrameEx then simply changes its text.
    ///</summary>
    ///  <param name="text">Default text for a new TextFrame.</param>
    ///<returns>
    ///  New <see cref="T:Aspose.Slides.ITextFrame" />
    ///  object.
    ///</returns>
    function AddTextFrame(text: string): DNITextFrame;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IAutoShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIAutoShapeLock read get_ShapeLock;
    ///<summary>
    ///  Returns AutoShape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IAutoShapeLock" />
    ///  .
    ///</summary>
    property AutoShapeLock: DNIAutoShapeLock read get_AutoShapeLock;
    ///<summary>
    ///  Returns TextFrameEx object for the AutoShapeEx.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Determines whether this autoshape should be filled with slide's background fill instead of specified by style or fill format.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UseBackgroundFill: Boolean read get_UseBackgroundFill write set_UseBackgroundFill;
    ///<summary>
    ///  Allows to get base IGeometryShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGeometryShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents background of a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBackground')]
  DNIBackground = interface(DNISlideComponent)
  ['{EDE46FD7-01C9-4DB5-B05E-B4B5CBC6AF2D}']
  { getters & setters } 

    function get_Type: DNBackgroundType;
    procedure set_Type(value: DNBackgroundType);
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_StyleColor: DNIColorFormat;
    function get_StyleIndex: UInt16;
    procedure set_StyleIndex(value: UInt16);
    function get_AsISlideComponent: DNISlideComponent;
    function get_AsIFillParamSource: DNIFillParamSource;

  { methods } 

    ///<summary>
    ///  Gets effective background data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IBackgroundEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIBackgroundEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns a type of background fill.
    ///  Read/write <see cref="T:Aspose.Slides.BackgroundType" />
    ///  .
    ///</summary>
    property &Type: DNBackgroundType read get_Type write set_Type;
    ///<summary>
    ///  Returns a FillFormat for BackgroundType.OwnBackground fill.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns a EffectFormat for BackgroundType.OwnBackground fill.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns a ColorFormat for a BackgroundType.Themed fill.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property StyleColor: DNIColorFormat read get_StyleColor;
    ///<summary>
    ///  Returns an index of BackgroundType.Themed fill in background theme collection.
    ///  0 means no fill.
    ///  1..999 - index.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property StyleIndex: UInt16 read get_StyleIndex write set_StyleIndex;
    ///<summary>
    ///  Returns ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
    ///<summary>
    ///  Returns IFillParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IFillParamSource" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents common data for all slide types.
  ///</summary>
  [DNTypeName('Aspose.Slides.IBaseSlide')]
  DNIBaseSlide = interface(DNISlideComponent)
  ['{498904F5-979C-4C10-917F-BBFA81DB0294}']
  { getters & setters } 

    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_AsIThemeable: DNIThemeable;

  { methods } 

    ///<summary>
    ///  Finds first occurrence of a shape with the specified alternative text.
    ///</summary>
    ///  <param name="altText">Alternative text.</param>
    ///<returns>ShapeEx object or null.</returns>
    function FindShapeByAltText(altText: string): DNIShape;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;
    ///<summary>
    ///  Determines whether the two IBaseSlide instances are equal.
    ///  Returning value is calculated based on slide's structure and static content.
    ///  Two slides are equal if all shapes, styles, texts, animation and other settings. etc. are equal. The comparison doesn't take into account unique identifier values, e.g. SlideId and dynamic content, e.g. current date value in Date Placeholder.
    ///</summary>
    ///  <param name="slide">The IBaseSlide to compare with the current IBaseSlide.</param>
    ///<returns><b>true</b>
    ///  if the specified IBaseSlide is equal to the current IBaseSlide;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(slide: DNIBaseSlide): Boolean;

  { propertys } 

    ///<summary>
    ///  Returns the shapes of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns the collection of ActiveX controls on a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IControlCollection" />
    ///  .
    ///</summary>
    property Controls: DNIControlCollection read get_Controls;
    ///<summary>
    ///  Returns or sets the name of a slide.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the ID of a slide.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property SlideId: UInt32 read get_SlideId;
    ///<summary>
    ///  Returns the slide's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns animation timeline object.
    ///  Read-only <see cref="T:Aspose.Slides.IAnimationTimeLine" />
    ///  .
    ///</summary>
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    ///<summary>
    ///  Returns the TransitionEx object which contains information about
    ///  how the specified slide advances during a slide show.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideShowTransition" />
    ///  .
    ///</summary>
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    ///<summary>
    ///  Returns slide's background.
    ///  Read-only <see cref="T:Aspose.Slides.IBackground" />
    ///  .
    ///</summary>
    property Background: DNIBackground read get_Background;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Specifies if shapes on the master slide should be shown on slides or not.
    ///  For master slide itself this property always returns <c>false</c>.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.NotSupportedException">Thrown if set <c>true</c> for master slide.</exception>
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    ///<summary>
    ///  Allows to get base IThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IThemeable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a layout slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILayoutSlide')]
  DNILayoutSlide = interface(DNIBaseSlide)
  ['{26EFF09D-21A8-446C-9C55-729C3792F5EC}']
  { getters & setters } 

    function get_HeaderFooterManager: DNILayoutSlideHeaderFooterManager;
    function get_MasterSlide: DNIMasterSlide;
    procedure set_MasterSlide(value: DNIMasterSlide);
    function get_LayoutType: DNSlideLayoutType;
    function get_HasDependingSlides: Boolean;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { methods } 

    ///<summary>
    ///  Returns an array with all slides, which depend on this layout slide.
    ///</summary>
    ///<returns>Array with all slides, which depend on this layout slide</returns>
    function GetDependingSlides: TArray<DNISlide>;
    ///<summary>
    ///  Removes layout from presentation.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if layout is already removed from presentation or if layout is used in presentation (its
    ///  HasDependingSlides property is true).
    ///</exception><remarks>
    ///  To avoid throwing of the PptxEditException check layout's HasDependingSlides property before.
    ///</remarks>
    procedure Remove;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the layout slide.
    ///  Read-only <see cref="T:Aspose.Slides.ILayoutSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNILayoutSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns or sets the master slide for a layout.
    ///  Read/write <see cref="T:Aspose.Slides.IMasterSlide" />
    ///  .
    ///</summary>
    property MasterSlide: DNIMasterSlide read get_MasterSlide write set_MasterSlide;
    ///<summary>
    ///  Returns layout type of this layout slide.
    ///  Read-only <see cref="T:Aspose.Slides.SlideLayoutType" />
    ///  .
    ///</summary>
    property LayoutType: DNSlideLayoutType read get_LayoutType;
    ///<summary>
    ///  Returns true if there exists at least one slide that depends on this layout slide.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    ///<summary>
    ///  Allows to get base IBaseSlide interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    ///<summary>
    ///  Returns IOverrideThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents master slide for handouts.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterHandoutSlide')]
  DNIMasterHandoutSlide = interface(DNIBaseSlide)
  ['{BCE36002-0567-4584-8DEA-79AFC25EBAF5}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIMasterThemeable: DNIMasterThemeable;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the master handout slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterHandoutSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Allows to get base IBaseSlide interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    ///<summary>
    ///  Returns IMasterThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIMasterThemeable: DNIMasterThemeable read get_AsIMasterThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents master slide for notes.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterNotesSlide')]
  DNIMasterNotesSlide = interface(DNIBaseSlide)
  ['{C30CE610-66B0-490A-AFBD-C96497AE7C57}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager;
    function get_NotesStyle: DNITextStyle;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIMasterThemeable: DNIMasterThemeable;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the master notes slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterNotesSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns the style of a notes text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property NotesStyle: DNITextStyle read get_NotesStyle;
    ///<summary>
    ///  Allows to get base IBaseSlide interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    ///<summary>
    ///  Returns IMasterThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIMasterThemeable: DNIMasterThemeable read get_AsIMasterThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a master slide in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterSlide')]
  DNIMasterSlide = interface(DNIBaseSlide)
  ['{748835D2-856E-4455-A222-5D32FBCB32C7}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterSlideHeaderFooterManager;
    function get_TitleStyle: DNITextStyle;
    function get_BodyStyle: DNITextStyle;
    function get_OtherStyle: DNITextStyle;
    function get_LayoutSlides: DNIMasterLayoutSlideCollection;
    function get_Preserve: Boolean;
    procedure set_Preserve(value: Boolean);
    function get_HasDependingSlides: Boolean;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIMasterThemeable: DNIMasterThemeable;

  { methods } 

    ///<summary>
    ///  Creates a new master slide based on the current one, applying an external theme to it
    ///  and applies the created master slide to all dependent slides.
    ///</summary>
    ///  <param name="fname">Path to the external theme file (.thmx).</param>
    ///<exception cref="T:Aspose.Slides.PptxReadException">When external theme cannot be applied.</exception><returns>New themed MasterSlide.</returns>
    function ApplyExternalThemeToDependingSlides(fname: string): DNIMasterSlide;
    ///<summary>
    ///  Returns an array with all slides, which depend on this master slide.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ISlide" />
    ///  , which depend on this master slide</returns>
    function GetDependingSlides: TArray<DNISlide>;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the master slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIMasterSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns the style of a title text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property TitleStyle: DNITextStyle read get_TitleStyle;
    ///<summary>
    ///  Returns the style of a body text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property BodyStyle: DNITextStyle read get_BodyStyle;
    ///<summary>
    ///  Returns the style of an other text.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property OtherStyle: DNITextStyle read get_OtherStyle;
    ///<summary>
    ///  Returns the collection of child layout slides for this master slide.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterLayoutSlideCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  You can access to alternative API for adding/inserting/removing/cloning layout slides
    ///  by using <see cref="P:Aspose.Slides.IPresentation.LayoutSlides" />
    ///  property.
    ///</remarks>
    property LayoutSlides: DNIMasterLayoutSlideCollection read get_LayoutSlides;
    ///<summary>
    ///  Determines whether the corresponding master is deleted when all
    ///  the slides that follow that master are deleted.
    ///  Note: Aspose.Slides will never remove any unused master by itself,
    ///  to actually remove unused masters call <see cref="M:Aspose.Slides.IMasterSlideCollection.RemoveUnused(System.Boolean)" />
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Preserve: Boolean read get_Preserve write set_Preserve;
    ///<summary>
    ///  Returns true if there exists at least one slide that depends on this master slide.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    ///<summary>
    ///  Allows to get base IBaseSlide interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    ///<summary>
    ///  Returns IMasterThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIMasterThemeable: DNIMasterThemeable read get_AsIMasterThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a notes slide in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.INotesSlide')]
  DNINotesSlide = interface(DNIBaseSlide)
  ['{6AE7DA80-A80B-48D6-93A4-7C643A9A6A0E}']
  { getters & setters } 

    function get_HeaderFooterManager: DNINotesSlideHeaderFooterManager;
    function get_NotesTextFrame: DNITextFrame;
    function get_ParentSlide: DNISlide;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the notes slide.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNINotesSlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns a TextFrame with notes' text if there is one.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property NotesTextFrame: DNITextFrame read get_NotesTextFrame;
    ///<summary>
    ///  Returns a ParentSlide
    ///  Read-only <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    property ParentSlide: DNISlide read get_ParentSlide;
    ///<summary>
    ///  Allows to get base IBaseSlide interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    ///<summary>
    ///  Returns IOverrideThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a slide in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlide')]
  DNISlide = interface(DNIBaseSlide)
  ['{F4AB4299-A727-404E-8EE6-038598460AC0}']
  { getters & setters } 

    function get_HeaderFooterManager: DNISlideHeaderFooterManager;
    function get_SlideNumber: Int32;
    procedure set_SlideNumber(value: Int32);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_LayoutSlide: DNILayoutSlide;
    procedure set_LayoutSlide(value: DNILayoutSlide);
    function get_NotesSlideManager: DNINotesSlideManager;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { methods } 

    ///<summary>
    ///  Returns a Thumbnail Bitmap object with custom scaling.
    ///</summary>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap object <see cref="T:System.Drawing.Bitmap" />
    ///</returns>
    function GetThumbnail(scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Image object (20% of real size).
    ///</summary>
    ///<returns>Bitmap object <see cref="T:System.Drawing.Bitmap" />
    ///</returns>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with specified size.
    ///</summary>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap object.</returns>
    function GetThumbnail(imageSize: DDN.Aspose.Common.DNSize): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail tiff bitmap object with specified parameters.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///<returns>Bitmap object.</returns>
    function GetThumbnail(options: DNITiffOptions): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with custom scaling.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with specified size.
    ///</summary>
    ///  <param name="options">Options for notes and comments layouting.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    function GetThumbnail(options: DNINotesCommentsLayoutingOptions; imageSize: DDN.Aspose.Common.DNSize): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnail(options: DNIRenderingOptions): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with custom scaling.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnail(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap object with specified size.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnail(options: DNIRenderingOptions; imageSize: DDN.Aspose.Common.DNSize): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="width">The maximum width (in pixels) that can be occupied by the rendered slide.</param>
    ///  <param name="height">The maximum height (in pixels) that can be occupied by the rendered slide.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.Aspose.Common.DNGraphics; width: Int32; height: Int32); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="scale">The scale for rendering the slide (1.0 is 100%).</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.Aspose.Common.DNGraphics; scale: Single); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.Aspose.Common.DNGraphics); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.Aspose.Common.DNGraphics); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object with custom scaling.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="scaleX">The scale for rendering the slide (1.0 is 100%) in the x-axis direction.</param>
    ///  <param name="scaleY">The scale for rendering the slide (1.0 is 100%) in the y-axis direction.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.Aspose.Common.DNGraphics; scaleX: Single; scaleY: Single); overload;
    ///<summary>
    ///  Renders certain slide to a Graphics object using specified size.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="renderingSize">The maximum dimensions (in pixels) that can be occupied by the rendered slide.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown when notesCommentsLayouting.NotesPosition takes the value NotesPositions.BottomFull</exception>
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.Aspose.Common.DNGraphics; renderingSize: DDN.Aspose.Common.DNSize); overload;
    ///<summary>
    ///  Returns all slide comments added by specific author.
    ///</summary>
    ///  <param name="author">Author of comments to find or null to return all comments.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.IComment" />
    ///  .</returns>
    function GetSlideComments(author: DNICommentAuthor): TArray<DNIComment>;
    ///<summary>
    ///  Saves content of slide as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of slide as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    ///<summary>
    ///  Removes slide from presentation.
    ///</summary>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if slide is already removed from presentation.
    ///</exception>
    procedure Remove;
    ///<summary>
    ///  Resets position, size and formatting of every shape that has a prototype on LayoutSlide.
    ///</summary>
    procedure Reset;

  { propertys } 

    ///<summary>
    ///  Returns HeaderFooter manager of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNISlideHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Returns a number of slide.
    ///  Index of slide in <see cref="P:Aspose.Slides.IPresentation.Slides" />
    ///  collection is always equal to SlideNumber - 1.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property SlideNumber: Int32 read get_SlideNumber write set_SlideNumber;
    ///<summary>
    ///  Determines whether the specified slide is hidden during a slide show.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns or sets the layout slide for the current slide.
    ///  Read/write <see cref="T:Aspose.Slides.ILayoutSlide" />
    ///  .
    ///</summary>
    property LayoutSlide: DNILayoutSlide read get_LayoutSlide write set_LayoutSlide;
    ///<summary>
    ///  Allow to access notes slide, add and remove it.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSlideManager" />
    ///  .
    ///</summary>
    property NotesSlideManager: DNINotesSlideManager read get_NotesSlideManager;
    ///<summary>
    ///  Allows to get base IBaseSlide interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    ///<summary>
    ///  Returns IOverrideThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a cell in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICell')]
  DNICell = interface(DNISlideComponent)
  ['{69E86485-B290-445A-BC6F-25BFC460859B}']
  { getters & setters } 

    function get_OffsetX: Double;
    function get_OffsetY: Double;
    function get_FirstRowIndex: Int32;
    function get_FirstColumnIndex: Int32;
    function get_Width: Double;
    function get_Height: Double;
    function get_MinimalHeight: Double;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_TextAnchorType: DNTextAnchorType;
    procedure set_TextAnchorType(value: DNTextAnchorType);
    function get_AnchorCenter: Boolean;
    procedure set_AnchorCenter(value: Boolean);
    function get_FirstColumn: DNIColumn;
    function get_FirstRow: DNIRow;
    function get_ColSpan: Int32;
    function get_RowSpan: Int32;
    function get_TextFrame: DNITextFrame;
    function get_Table: DNITable;
    function get_IsMergedCell: Boolean;
    function get_CellFormat: DNICellFormat;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    ///<summary>
    ///  Splits the cell to two cells by index of column.
    ///</summary>
    ///  <param name="index">Index of column.</param>
    procedure SplitByColSpan(index: Int32);
    ///<summary>
    ///  Splits the cell to two cells by index of row.
    ///</summary>
    ///  <param name="index">Index of row.</param>
    procedure SplitByRowSpan(index: Int32);
    ///<summary>
    ///  Splits the cell by height.
    ///</summary>
    ///  <param name="height">Height of a row.</param>
    procedure SplitByHeight(height: Double);
    ///<summary>
    ///  Splits the cell by width.
    ///</summary>
    ///  <param name="width">Width of a column.</param>
    procedure SplitByWidth(width: Double);

  { propertys } 

    ///<summary>
    ///  Returns a distance from left side of a table to left side of a cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property OffsetX: Double read get_OffsetX;
    ///<summary>
    ///  Returns a distance from top side of a table to top side of a cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property OffsetY: Double read get_OffsetY;
    ///<summary>
    ///  Returns an index of first row, covered by the cell.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property FirstRowIndex: Int32 read get_FirstRowIndex;
    ///<summary>
    ///  Returns an index of first column, covered by the cell.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property FirstColumnIndex: Int32 read get_FirstColumnIndex;
    ///<summary>
    ///  Returns the width of the cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width;
    ///<summary>
    ///  Returns the height of the cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  Returns the minimum height of a cell.
    ///  This is a sum of minimal heights of all rows cowered by the cell.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinimalHeight: Double read get_MinimalHeight;
    ///<summary>
    ///  Returns or sets the left margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets the top margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    ///<summary>
    ///  Returns or sets the bottom margin in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    ///<summary>
    ///  Returns or sets the type of vertical text.
    ///  Read/write <see cref="T:Aspose.Slides.TextVerticalType" />
    ///  .
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    ///<summary>
    ///  Returns or sets the text anchor type.
    ///  Read/write <see cref="T:Aspose.Slides.TextAnchorType" />
    ///  .
    ///</summary>
    property TextAnchorType: DNTextAnchorType read get_TextAnchorType write set_TextAnchorType;
    ///<summary>
    ///  Determines whether or not text box centered inside a cell.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AnchorCenter: Boolean read get_AnchorCenter write set_AnchorCenter;
    ///<summary>
    ///  Gets first column of cell.
    ///  Read-only <see cref="T:Aspose.Slides.IColumn" />
    ///  .
    ///</summary>
    property FirstColumn: DNIColumn read get_FirstColumn;
    ///<summary>
    ///  Gets first row of cell.
    ///  Read-only <see cref="T:Aspose.Slides.IRow" />
    ///  .
    ///</summary>
    property FirstRow: DNIRow read get_FirstRow;
    ///<summary>
    ///  Returns the number of grid columns in the parent table's table grid
    ///  which shall be spanned by the current cell. This property allows cells
    ///  to have the appearance of being merged, as they span vertical boundaries
    ///  of other cells in the table.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ColSpan: Int32 read get_ColSpan;
    ///<summary>
    ///  Returns the number of rows that a merged cell spans. This is used in combination
    ///  with the vMerge attribute on other cells in order to specify the beginning cell
    ///  of a horizontal merge.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property RowSpan: Int32 read get_RowSpan;
    ///<summary>
    ///  Returns the text frame of a cell.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Returns the parent Table object for a cell.
    ///  Read-only <see cref="T:Aspose.Slides.ITable" />
    ///  .
    ///</summary>
    property Table: DNITable read get_Table;
    ///<summary>
    ///  Returns true if the cell is merged with any adjusted cell, false otherwise.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsMergedCell: Boolean read get_IsMergedCell;
    ///<summary>
    ///  Returns the CellFormat object that contains formatting properties for this cell.
    ///  Read-only <see cref="T:Aspose.Slides.ICellFormat" />
    ///  .
    ///</summary>
    property CellFormat: DNICellFormat read get_CellFormat;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a connector.
  ///</summary>
  [DNTypeName('Aspose.Slides.IConnector')]
  DNIConnector = interface(DNISlideComponent)
  ['{18CB7918-A5B5-4839-90F1-5C922A4B1D94}']
  { getters & setters } 

    function get_ShapeLock: DNIConnectorLock;
    function get_ConnectorLock: DNIConnectorLock;
    function get_StartShapeConnectedTo: DNIShape;
    procedure set_StartShapeConnectedTo(value: DNIShape);
    function get_EndShapeConnectedTo: DNIShape;
    procedure set_EndShapeConnectedTo(value: DNIShape);
    function get_StartShapeConnectionSiteIndex: UInt32;
    procedure set_StartShapeConnectionSiteIndex(value: UInt32);
    function get_EndShapeConnectionSiteIndex: UInt32;
    procedure set_EndShapeConnectionSiteIndex(value: UInt32);
    function get_AsIGeometryShape: DNIGeometryShape;

  { methods } 

    ///<summary>
    ///  Reroutes connector so that it take the shortest possible path between the shapes it connect.
    ///</summary>
    procedure Reroute;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IConnectorLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIConnectorLock read get_ShapeLock;
    ///<summary>
    ///  Returns Connector's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IConnectorLock" />
    ///  .
    ///</summary>
    property ConnectorLock: DNIConnectorLock read get_ConnectorLock;
    ///<summary>
    ///  Returns or sets the shape to attach the beginning of the connector to.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when connected shape doesn't has any connection sites (IShape.ConnectionSiteCount equals zero)</exception>
    property StartShapeConnectedTo: DNIShape read get_StartShapeConnectedTo write set_StartShapeConnectedTo;
    ///<summary>
    ///  Returns or sets the shape to attach the end of the connector to.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when connected shape doesn't has any connection sites (IShape.ConnectionSiteCount equals zero)</exception>
    property EndShapeConnectedTo: DNIShape read get_EndShapeConnectedTo write set_EndShapeConnectedTo;
    ///<summary>
    ///  Returns or sets the index of connection site for start shape.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when value is less than StartShapeConnectedTo.ConnectionSiteCount</exception>
    property StartShapeConnectionSiteIndex: UInt32 read get_StartShapeConnectionSiteIndex write set_StartShapeConnectionSiteIndex;
    ///<summary>
    ///  Returns or sets the index of connection site for end shape.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when value is less than EndShapeConnectedTo.ConnectionSiteCount</exception>
    property EndShapeConnectionSiteIndex: UInt32 read get_EndShapeConnectionSiteIndex write set_EndShapeConnectionSiteIndex;
    ///<summary>
    ///  Allows to get base IGeometryShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGeometryShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Slides.IControl')]
  DNIControl = interface(DNISlideComponent)
  ['{F0D7746C-3365-478C-8B4F-A77CCC8C13AD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ClassId: DDN.mscorlib.DNGuid;
    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_Properties: DNIControlPropertiesCollection;
    function get_Persistence: DNPersistenceType;
    function get_ActiveXControlBinary: TArray<Byte>;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    ///<summary>
    ///  Returns the name of this control.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets class id of this control.
    ///  Read-only <see cref="T:System.Guid" />
    ///  .
    ///</summary>
    property ClassId: DDN.mscorlib.DNGuid read get_ClassId;
    ///<summary>
    ///  Returns ControlEx image fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    ///<summary>
    ///  Returns or sets control's frame.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns a collection of ActiveX properties.
    ///  Read-only <see cref="T:Aspose.Slides.IControlPropertiesCollection" />
    ///  .
    ///</summary>
    property Properties: DNIControlPropertiesCollection read get_Properties;
    ///<summary>
    ///  Gets the method used to store properties of the ActiveX control.
    ///  Read only <see cref="T:Aspose.Slides.PersistenceType" />
    ///  .
    ///</summary>
    property Persistence: DNPersistenceType read get_Persistence;
    ///<summary>
    ///  Specifies the persistence of an ActiveX control when the method used to persist is either PersistStream, PersistStreamInit or PersistStorage.
    ///</summary>
    property ActiveXControlBinary: TArray<Byte> read get_ActiveXControlBinary;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a field.
  ///</summary>
  [DNTypeName('Aspose.Slides.IField')]
  DNIField = interface(DNISlideComponent)
  ['{7A7DE933-A203-446C-BB7A-F24BDA4DC0FB}']
  { getters & setters } 

    function get_Type: DNIFieldType;
    procedure set_Type(value: DNIFieldType);
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    ///<summary>
    ///  Returns or sets field's type.
    ///  Read/write <see cref="T:Aspose.Slides.IFieldType" />
    ///  .
    ///</summary>
    property &Type: DNIFieldType read get_Type write set_Type;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the parent class for all geometric shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGeometryShape')]
  DNIGeometryShape = interface(DNISlideComponent)
  ['{BD620214-7EE0-4F63-8A35-95D78A47C678}']
  { getters & setters } 

    function get_ShapeStyle: DNIShapeStyle;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_Adjustments: DNIAdjustValueCollection;
    function get_AsIShape: DNIShape;

  { methods } 

    ///<summary>
    ///  Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///</returns>
    ///<example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  IGeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    ///<summary>
    ///  Updates shape geometry from <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  object. Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.IGeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPath">Geometry path</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path found</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath0 = new GeometryPath();
    ///  geometryPath0.MoveTo(0, 0);
    ///  geometryPath0.LineTo(shape.Width, 0);
    ///  geometryPath0.LineTo(shape.Width, shape.Height/3);
    ///  geometryPath0.LineTo(0, shape.Height / 3);
    ///  geometryPath0.CloseFigure();
    ///  GeometryPath geometryPath1 = new GeometryPath();
    ///  geometryPath1.MoveTo(0, shape.Height/3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height / 3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height);
    ///  geometryPath1.LineTo(0, shape.Height);
    ///  geometryPath1.CloseFigure();
    ///  shape.SetGeometryPaths(new GeometryPath[] { geometryPath0, geometryPath1});
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    ///<summary>
    ///  Updates shape geometry from array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  . Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.IGeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPaths">Array geometry paths</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    ///<summary>
    ///  Creates and returns array of shape's elements.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IShapeElement" />
    ///</returns>
    function CreateShapeElements: TArray<DNIShapeElement>;

  { propertys } 

    ///<summary>
    ///  Returns shape's style object.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeStyle" />
    ///  .
    ///</summary>
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    ///<summary>
    ///  Returns or sets the geometry preset type.
    ///  Note: on value changing all adjustment values will reset to their default values.
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns a collection of shape's adjustment values.
    ///  Read-only <see cref="T:Aspose.Slides.IAdjustValueCollection" />
    ///  .
    ///</summary>
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    ///<summary>
    ///  Allows to get base IShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIShape: DNIShape read get_AsIShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents abstract graphical object.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGraphicalObject')]
  DNIGraphicalObject = interface(DNISlideComponent)
  ['{F5D2E330-8EE8-4F53-A9E6-6B6C72CE5B0F}']
  { getters & setters } 

    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_AsIShape: DNIShape;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    ///<summary>
    ///  Allows to get base IShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIShape: DNIShape read get_AsIShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a group of shapes on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGroupShape')]
  DNIGroupShape = interface(DNISlideComponent)
  ['{5CA11DD2-D965-45A2-B56D-A516696C647B}']
  { getters & setters } 

    function get_ShapeLock: DNIGroupShapeLock;
    function get_GroupShapeLock: DNIGroupShapeLock;
    function get_Shapes: DNIShapeCollection;
    function get_AsIShape: DNIShape;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGroupShapeLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShapeLock" />
    ///  .
    ///</summary>
    property GroupShapeLock: DNIGroupShapeLock read get_GroupShapeLock;
    ///<summary>
    ///  Returns the collection of shapes inside the group.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Allows to get base IShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIShape: DNIShape read get_AsIShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a legacy diagram object
  ///</summary>
  [DNTypeName('Aspose.Slides.ILegacyDiagram')]
  DNILegacyDiagram = interface(DNISlideComponent)
  ['{363DCF7E-EAE8-46E3-A2EC-F780C2E965E4}']
  { getters & setters } 

    function get_AsIGraphicalObject: DNIGraphicalObject;

  { methods } 

    ///<summary>
    ///  Converts legacy digram to editable SmartArt object.
    ///  Created SmartArt object adds to parent group shape at the same position.
    ///</summary>
    ///<returns>Created SmartArt object.</returns>
    function ConvertToSmartArt: DNISmartArt;
    ///<summary>
    ///  Converts legacy digram to editable group shape.
    ///  Created GroupShape object adds to parent group shape at the same position.
    ///</summary>
    ///<returns>Created GroupShape object.</returns>
    function ConvertToGroupShape: DNIGroupShape;

  { propertys } 

    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides.Ink----------------
  ///<summary>
  ///  Represents an ink object on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Ink.IInk')]
  DNIInk = interface(DNISlideComponent)
  ['{DB04DB7C-F823-4EF2-BF8A-2014E5FAA6F2}']
  { getters & setters } 

    function get_AsIGraphicalObject: DNIGraphicalObject;

  { propertys } 

    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an OLE object on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IOleObjectFrame')]
  DNIOleObjectFrame = interface(DNISlideComponent)
  ['{849679B6-7AC6-41CC-859D-D3EB9E31CD30}']
  { getters & setters } 

    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_ObjectName: string;
    procedure set_ObjectName(value: string);
    function get_EmbeddedData: DNIOleEmbeddedDataInfo;
    function get_ObjectProgId: string;
    procedure set_ObjectProgId(value: string);
    function get_ObjectData: TArray<Byte>;
    procedure set_ObjectData(value: TArray<Byte>);
    function get_LinkFileName: string;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedFileLabel: string;
    function get_EmbeddedFileName: string;
    function get_EmbeddedFileExtension: string;
    function get_EmbeddedFileData: TArray<Byte>;
    function get_IsObjectIcon: Boolean;
    procedure set_IsObjectIcon(value: Boolean);
    function get_IsObjectLink: Boolean;
    function get_UpdateAutomatic: Boolean;
    procedure set_UpdateAutomatic(value: Boolean);
    function get_SubstitutePictureTitle: string;
    procedure set_SubstitutePictureTitle(value: string);
    function get_AsIGraphicalObject: DNIGraphicalObject;

  { methods } 

    ///<summary>
    ///  Sets information about OLE embedded data.
    ///</summary>
    ///<remarks>
    ///  This method changes the properties of the object to reflect the new data and
    ///  sets the IsObjectLink flag to false, indicating that the OLE object is embedded.
    ///</remarks>
    ///  <param name="embeddedData">Embedded data <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">When embeddedData parameter is null.</exception><example>
    ///  Following example demonstrates how to change OLE embedded data
    ///  and its type for existing <see cref="T:Aspose.Slides.IOleObjectFrame" />
    ///  object
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  OleObjectFrame oof = pres.Slides[0].Shapes[0] as OleObjectFrame;
    ///  if (oof != null)
    ///  {
    ///  IOleEmbeddedDataInfo newData = new OleEmbeddedDataInfo(File.ReadAllBytes("Picture.png"), "png");
    ///  oof.SetEmbeddedData(newData);
    ///  }
    ///  }
    ///</code></example>
    procedure SetEmbeddedData(embeddedData: DNIOleEmbeddedDataInfo);

  { propertys } 

    ///<summary>
    ///  Returns OleObject image fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    ///<summary>
    ///  Returns or sets the name of an object.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ObjectName: string read get_ObjectName write set_ObjectName;
    ///<summary>
    ///  Gets information about OLE embedded data.
    ///  Read only <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///  .
    ///</summary>
    property EmbeddedData: DNIOleEmbeddedDataInfo read get_EmbeddedData;
    ///<summary>
    ///  Returns the ProgID of an object.
    ///  Read olny <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ObjectProgId: string read get_ObjectProgId write set_ObjectProgId;
    ///<summary>
    ///  Gets or sets embedded object as byte array.
    ///  Read/write <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property ObjectData: TArray<Byte> read get_ObjectData write set_ObjectData;
    ///<summary>
    ///  Returns the full path to a linked file. Short file name will be used.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkFileName: string read get_LinkFileName;
    ///<summary>
    ///  Returns the full path to a linked file. Long file name will be used.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns the file name of embedded OLE object
    ///</summary>
    property EmbeddedFileLabel: string read get_EmbeddedFileLabel;
    ///<summary>
    ///  Returns the path of embedded OLE object
    ///</summary>
    property EmbeddedFileName: string read get_EmbeddedFileName;
    ///<summary>
    ///  Returns the file extension for the current embedded object or empty string if object is not a link
    ///</summary>
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
    ///<summary>
    ///  Returns the file data of embedded OLE object
    ///</summary>
    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    ///<summary>
    ///  Determines whether an object is visible as icon.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsObjectIcon: Boolean read get_IsObjectIcon write set_IsObjectIcon;
    ///<summary>
    ///  Determines whether an object is linked to external file.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsObjectLink: Boolean read get_IsObjectLink;
    ///<summary>
    ///  Determines if the linked embedded object is automatically updated when the presentation is opened or printed.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UpdateAutomatic: Boolean read get_UpdateAutomatic write set_UpdateAutomatic;
    ///<summary>
    ///  Returns or sets the title for OleObject icon.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  When IsObjectIcon == false this value is ignored.
    ///  The string can be truncated according to the size of the OLE icon.
    ///</remarks>
    property SubstitutePictureTitle: string read get_SubstitutePictureTitle write set_SubstitutePictureTitle;
    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a paragraph of a text.
  ///</summary>
  [DNTypeName('Aspose.Slides.IParagraph')]
  DNIParagraph = interface(DNISlideComponent)
  ['{9DF54953-04BE-466C-A019-6BD19BF70CCF}']
  { getters & setters } 

    function get_Portions: DNIPortionCollection;
    function get_ParagraphFormat: DNIParagraphFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_EndParagraphPortionFormat: DNIPortionFormat;
    procedure set_EndParagraphPortionFormat(value: DNIPortionFormat);
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    ///<summary>
    ///  Joins runs with same formatting.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;
    ///<summary>
    ///  Get coordinates of rect that bounds paragraph. The rect includes all the lines of
    ///  text in paragraph, including empty ones.
    ///</summary>
    ///<returns>Rectangle that bounds paragraph <see cref="T:System.Drawing.RectangleF" />
    ///</returns>
    function GetRect: DDN.Aspose.Common.DNRectangleF;

  { propertys } 

    ///<summary>
    ///  Returns the collection of a text portions.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionCollection" />
    ///  .
    ///</summary>
    property Portions: DNIPortionCollection read get_Portions;
    ///<summary>
    ///  Returns the formatting object for this paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .
    ///</summary>
    property ParagraphFormat: DNIParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Gets or sets the the plain text of a paragraph.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Specifies the portion properties that are to be used if another portion is inserted after
    ///  the last one.
    ///</summary>
    property EndParagraphPortionFormat: DNIPortionFormat read get_EndParagraphPortionFormat write set_EndParagraphPortionFormat;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a frame with a picture inside.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPictureFrame')]
  DNIPictureFrame = interface(DNISlideComponent)
  ['{E9A99C7C-5087-4FA2-8610-708057025AD9}']
  { getters & setters } 

    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_AsIGeometryShape: DNIGeometryShape;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    ///<summary>
    ///  Returns PictureFrame's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    ///<summary>
    ///  Returns the PictureFillFormat object for a picture frame.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    ///<summary>
    ///  Returns or sets the scale of height(relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    ///<summary>
    ///  Returns or sets the scale of width (relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    ///<summary>
    ///  Allows to get base IGeometryShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGeometryShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a portion of text inside a text paragraph.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPortion')]
  DNIPortion = interface(DNISlideComponent)
  ['{76E0EAC6-3A7F-41CC-BCBC-52090B045FF4}']
  { getters & setters } 

    function get_PortionFormat: DNIPortionFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Field: DNIField;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    ///<summary>
    ///  Converts this portion to the automaticaly updated field.
    ///</summary>
    ///  <param name="fieldType">Type of field <see cref="T:Aspose.Slides.IFieldType" />
    ///</param>
    procedure AddField(fieldType: DNIFieldType); overload;
    ///<summary>
    ///  Converts this portion to the automaticaly updated field.
    ///</summary>
    ///  <param name="internalString">Internal name of FieldTypeEx  <see cref="T:System.String" />
    ///</param>
    procedure AddField(internalString: string); overload;
    ///<summary>
    ///  Converts this field portion to the simple portion.
    ///</summary>
    procedure RemoveField;
    ///<summary>
    ///  Get coordinates of rect that bounds portion. The rect includes all the lines of
    ///  text in portion, including empty ones.
    ///</summary>
    ///<returns>Rectangle that bounds portion <see cref="T:System.Drawing.RectangleF" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  IAutoShape shape = slide.Shapes.AddAutoShape(ShapeType.Rectangle, 50, 50, 200, 50);
    ///  shape.TextFrame.Paragraphs[0].Portions.Clear();
    ///  var portion0 = new Portion("Some text");
    ///  var portion1 = new Portion("GetRect text");
    ///  shape.TextFrame.Paragraphs[0].Portions.Add(portion0);
    ///  shape.TextFrame.Paragraphs[0].Portions.Add(portion1);
    ///  RectangleF rect = shape.TextFrame.Paragraphs[0].Portions[1].GetRect();
    ///  ...
    ///  }
    ///</code></example>
    function GetRect: DDN.Aspose.Common.DNRectangleF;
    ///<summary>
    ///  Get coordinates of the beginning of the portion. The X coordinate of point represents the
    ///  portion beginning from the first character including left side bearing. The Y coordinate
    ///  includes top side bearing.
    ///</summary>
    ///<returns>Coordinates of the beginning of the portion <see cref="T:System.Drawing.PointF" />
    ///</returns>
    function GetCoordinates: DDN.Aspose.Common.DNPointF;

  { propertys } 

    ///<summary>
    ///  Returns formatting object which contains explicitly set formatting properties of the text portion with no inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionFormat" />
    ///  .
    ///</summary>
    ///<remarks><para>The formatting object contains the formatting parameters defined for the current portion only, inherited data is not applied.</para><para>In order to get the effective values including inherited ones use <see cref="M:Aspose.Slides.IPortionFormat.GetEffective" />
    ///  method.</para></remarks>
    property PortionFormat: DNIPortionFormat read get_PortionFormat;
    ///<summary>
    ///  Gets or sets the plain text of a portion.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns a field of this portion.
    ///  Read-only <see cref="T:Aspose.Slides.IField" />
    ///  .
    ///</summary>
    property Field: DNIField read get_Field;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a shape on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IShape')]
  DNIShape = interface(DNISlideComponent)
  ['{3623D9D6-A67B-41D1-B22C-DC335CEB9FC7}']
  { getters & setters } 

    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_IsGrouped: Boolean;
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_ParentGroup: DNIGroupShape;
    function get_AsIHyperlinkContainer: DNIHyperlinkContainer;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    ///<summary>
    ///  Adds a new placeholder if there is no and sets placeholder properties to a specified one.
    ///</summary>
    ///  <param name="placeholderToCopyFrom">Placeholder to copy content from.</param>
    ///<returns>New <see cref="T:Aspose.Slides.IPlaceholder" />
    ///  .</returns>
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    ///<summary>
    ///  Defines that this shape isn't a placeholder.
    ///</summary>
    procedure RemovePlaceholder;
    ///<summary>
    ///  Returns shape thumbnail.
    ///  ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
    ///</summary>
    ///<returns>Shape thumbnail.</returns>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns shape thumbnail.
    ///</summary>
    ///  <param name="bounds">Shape thumbnail bounds type.</param>
    ///  <param name="scaleX">X scale</param>
    ///  <param name="scaleY">Y scale</param>
    ///<returns>Shape thumbnail or null in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.</returns>
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;

  { propertys } 

    ///<summary>
    ///  Determines whether the shape is TextHolder.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsTextHolder: Boolean read get_IsTextHolder;
    ///<summary>
    ///  Returns the placeholder for a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IPlaceholder" />
    ///  .
    ///</summary>
    property Placeholder: DNIPlaceholder read get_Placeholder;
    ///<summary>
    ///  Returns the shape's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns or sets the raw shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<example>
    ///  Code that attempts to assign undefined frame to IShape.Frame doesn't make sence in general case (particulary in case when parent GroupShape is multiple nested into other GroupShape-s). For example:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = new ShapeFrame(float.NaN, float.NaN, float.NaN, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, float.NaN);
    ///</code>
    ///  or
    ///<code>
    ///  slide.Shapes.AddAutoShape(ShapeType.RoundCornerRectangle, float.NaN, float.NaN, float.NaN, float.NaN);
    ///</code>
    ///  Such code can lead to unclear situations. So restrictions had been added for using undefined values for IShape.Frame. Values of x, y, width, height, flipH, flipV and rotationAngle must be defined (not float.NaN or NullableBool.NotDefined). Example code above now throws ArgumentException exception.
    ///  This applies to these use cases:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = ...; // cannot be undefined
    ///  IShapeCollection shapes = ...;
    ///  // x, y, width, height parameters cannot be float.NaN:
    ///  {
    ///  shapes.AddAudioFrameCD(...);
    ///  shapes.AddAudioFrameEmbedded(...);
    ///  shapes.AddAudioFrameLinked(...);
    ///  shapes.AddAutoShape(...);
    ///  shapes.AddChart(...);
    ///  shapes.AddConnector(...);
    ///  shapes.AddOleObjectFrame(...);
    ///  shapes.AddPictureFrame(...);
    ///  shapes.AddSmartArt(...);
    ///  shapes.AddTable(...);
    ///  shapes.AddVideoFrame(...);
    ///  shapes.InsertAudioFrameEmbedded(...);
    ///  shapes.InsertAudioFrameLinked(...);
    ///  shapes.InsertAutoShape(...);
    ///  shapes.InsertChart(...);
    ///  shapes.InsertConnector(...);
    ///  shapes.InsertOleObjectFrame(...);
    ///  shapes.InsertPictureFrame(...);
    ///  shapes.InsertTable(...);
    ///  shapes.InsertVideoFrame(...);
    ///  }
    ///</code>
    ///  But IShape.RawFrame frame properties can be undefined. This make sence when shape is linked to placeholder. Then undefined shape frame values is overridden from the parent placeholder shape. If there is no parent placeholder shape for that shape then that shape uses default values when it evaluates effective frame based on its IShape.RawFrame. Default values are 0 and NullableBool.False for x, y, width, height, flipH, flipV and rotationAngle. For example:
    ///<code>
    ///  IShape shape = ...; // shape is linked to placeholder
    ///  shape.RawFrame = new ShapeFrame(float.NaN, float.NaN, 100, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, 0); // now shape inherits x, y, height, flipH, flipV values form placeholder and overrides width=100 and rotationAngle=0.
    ///</code></example>
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    ///<summary>
    ///  Returns or sets the shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value of each property of the returned IShapeFrame instance is not
    ///  undefined (is not NaN or NotDefined).
    ///  Value of each property of the assigned IShapeFrame instance must be not
    ///  undefined (must be not NaN or NotDefined).
    ///  You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns the LineFormat object that contains line formatting properties for a shape.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the ThreeDFormat object that contains line formatting properties for a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns the EffectFormat object which contains pixel effects applied to a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Determines whether the shape is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///  Shapes[0] returns the shape at the back of the z-order,
    ///  and Shapes[Shapes.Count - 1] returns the shape at the front of the z-order.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    ///<summary>
    ///  Returns the number of connection sites on the shape.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    ///<summary>
    ///  Returns or sets the number of degrees the specified shape is rotated around
    ///  the z-axis. A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Rotation: Single read get_Rotation write set_Rotation;
    ///<summary>
    ///  Returns or sets the x-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Returns or sets the title of alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    ///<summary>
    ///  Returns or sets the name of a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    ///<summary>
    ///  Gets unique shape identifier in presentation scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.IShape.OfficeInteropShapeId" />
    ///  for getting unique shape identifier in slide scope.
    ///</summary>
    property UniqueId: UInt32 read get_UniqueId;
    ///<summary>
    ///  Gets unique shape identifier in slide scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.IShape.UniqueId" />
    ///  for getting unique shape identifier in presentation scope.
    ///</summary>
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    ///<summary>
    ///  Determines whether the shape is grouped.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.IShape.ParentGroup" />
    ///  returns parent GroupShape object if shape is grouped.
    ///</remarks>
    property IsGrouped: Boolean read get_IsGrouped;
    ///<summary>
    ///  Property specifies how a shape will render in black-and-white display mode..
    ///  Read/write <see cref="T:Aspose.Slides.BlackWhiteMode" />
    ///  .
    ///</summary>
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    ///<summary>
    ///  Returns parent GroupShape object if shape is grouped. Otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.IShape.IsGrouped" />
    ///  determines whether the shape is grouped.
    ///</remarks>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    ///<summary>
    ///  Allows to get base IHyperlinkContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIHyperlinkContainer: DNIHyperlinkContainer read get_AsIHyperlinkContainer;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a table on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITable')]
  DNITable = interface(DNISlideComponent)
  ['{FB809552-527C-47D1-A5E0-734F860C0481}']
  { getters & setters } 

    function get_Item(columnIndex: Int32; rowIndex: Int32): DNICell;
    function get_Rows: DNIRowCollection;
    function get_Columns: DNIColumnCollection;
    function get_TableFormat: DNITableFormat;
    function get_StylePreset: DNTableStylePreset;
    procedure set_StylePreset(value: DNTableStylePreset);
    function get_RightToLeft: Boolean;
    procedure set_RightToLeft(value: Boolean);
    function get_FirstRow: Boolean;
    procedure set_FirstRow(value: Boolean);
    function get_FirstCol: Boolean;
    procedure set_FirstCol(value: Boolean);
    function get_LastRow: Boolean;
    procedure set_LastRow(value: Boolean);
    function get_LastCol: Boolean;
    procedure set_LastCol(value: Boolean);
    function get_HorizontalBanding: Boolean;
    procedure set_HorizontalBanding(value: Boolean);
    function get_VerticalBanding: Boolean;
    procedure set_VerticalBanding(value: Boolean);
    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_AsIBulkTextFormattable: DNIBulkTextFormattable;

  { methods } 

    ///<summary>
    ///  Merges neighbour cells.
    ///</summary>
    ///  <param name="cell1">Cell to merge.</param>
    ///  <param name="cell2">Cell to merge.</param>
    ///  <param name="allowSplitting">True to allow cells splitting.</param>
    ///<returns>Merged cell.</returns>
    function MergeCells(cell1: DNICell; cell2: DNICell; allowSplitting: Boolean): DNICell;

  { propertys } 

    property Item[columnIndex: Int32; rowIndex: Int32]: DNICell read get_Item; default;
    ///<summary>
    ///  Returns the collectoin of rows.
    ///  Read-only <see cref="T:Aspose.Slides.IRowCollection" />
    ///  .
    ///</summary>
    property Rows: DNIRowCollection read get_Rows;
    ///<summary>
    ///  Returns the collectoin of columns.
    ///  Read-only <see cref="T:Aspose.Slides.IColumnCollection" />
    ///  .
    ///</summary>
    property Columns: DNIColumnCollection read get_Columns;
    ///<summary>
    ///  Returns the TableFormat object that contains formatting properties for this table.
    ///  Read-only <see cref="T:Aspose.Slides.ITableFormat" />
    ///  .
    ///</summary>
    property TableFormat: DNITableFormat read get_TableFormat;
    ///<summary>
    ///  Get's or sets builtin table style.
    ///  Read/write <see cref="T:Aspose.Slides.TableStylePreset" />
    ///  .
    ///</summary>
    property StylePreset: DNTableStylePreset read get_StylePreset write set_StylePreset;
    ///<summary>
    ///  Determines whether the table has right to left reading order.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RightToLeft: Boolean read get_RightToLeft write set_RightToLeft;
    ///<summary>
    ///  Determines whether the first row of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FirstRow: Boolean read get_FirstRow write set_FirstRow;
    ///<summary>
    ///  Determines whether the first column of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FirstCol: Boolean read get_FirstCol write set_FirstCol;
    ///<summary>
    ///  Determines whether the last row of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property LastRow: Boolean read get_LastRow write set_LastRow;
    ///<summary>
    ///  Determines whether the last column of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property LastCol: Boolean read get_LastCol write set_LastCol;
    ///<summary>
    ///  Determines whether the even rows has to be drawn with a different formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HorizontalBanding: Boolean read get_HorizontalBanding write set_HorizontalBanding;
    ///<summary>
    ///  Determines whether the even columns has to be drawn with a different formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property VerticalBanding: Boolean read get_VerticalBanding write set_VerticalBanding;
    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    ///<summary>
    ///  Allows to get base IBulkTextFormattable interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBulkTextFormattable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBulkTextFormattable: DNIBulkTextFormattable read get_AsIBulkTextFormattable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a TextFrame.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITextFrame')]
  DNITextFrame = interface(DNISlideComponent)
  ['{3AC0A339-947B-4A01-8D45-FD5DF99DF046}']
  { getters & setters } 

    function get_Paragraphs: DNIParagraphCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextFrameFormat: DNITextFrameFormat;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    ///<summary>
    ///  Joins runs with same formatting in all paragraphs.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;
    ///<summary>
    ///  Highlight all matches of sample in text frame text using specified color.
    ///</summary>
    ///  <param name="text">Text sample to highlight.</param>
    ///  <param name="highlightColor">Highlighting color.</param>
    procedure HighlightText(text: string; highlightColor: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Highlight all matches of sample in text frame text using specified color.
    ///</summary>
    ///  <param name="text">Text sample to highlight.</param>
    ///  <param name="highlightColor">Highlighting color.</param>
    ///  <param name="options">Highlighting options.</param>
    procedure HighlightText(text: string; highlightColor: DDN.Aspose.Common.DNColor; options: DNITextHighlightingOptions); overload;
    ///<summary>
    ///  Highlight all matches of regular expression in text frame text using specified color.
    ///</summary>
    ///  <param name="regex">Text of regular expression to get text to highlight.</param>
    ///  <param name="highlightColor">Highlighting color.</param>
    ///  <param name="options">Highlighting options.</param>
    procedure HighlightRegex(regex: string; highlightColor: DDN.Aspose.Common.DNColor; options: DNITextHighlightingOptions);

  { propertys } 

    ///<summary>
    ///  Returns the list of all paragraphs in a frame.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphCollection" />
    ///  .
    ///</summary>
    property Paragraphs: DNIParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets or sets the plain text for a TextFrame.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns the formatting object for this TextFrame object.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrameFormat" />
    ///  .
    ///</summary>
    property TextFrameFormat: DNITextFrameFormat read get_TextFrameFormat;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a video clip on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IVideoFrame')]
  DNIVideoFrame = interface(DNISlideComponent)
  ['{B0BC107E-49E7-4D02-868A-3ED96815F404}']
  { getters & setters } 

    function get_RewindVideo: Boolean;
    procedure set_RewindVideo(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNVideoPlayModePreset;
    procedure set_PlayMode(value: DNVideoPlayModePreset);
    function get_FullScreenMode: Boolean;
    procedure set_FullScreenMode(value: Boolean);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedVideo: DNIVideo;
    procedure set_EmbeddedVideo(value: DNIVideo);
    function get_AsIPictureFrame: DNIPictureFrame;

  { propertys } 

    ///<summary>
    ///  Determines whether a video is automatically rewinded to start
    ///  as soon as the movie has finished playing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RewindVideo: Boolean read get_RewindVideo write set_RewindVideo;
    ///<summary>
    ///  Determines whether a video is looped.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    ///<summary>
    ///  Determines whether a VideoFrame is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    ///<summary>
    ///  Returns or sets the audio volume.
    ///  Read/write <see cref="T:Aspose.Slides.AudioVolumeMode" />
    ///  .
    ///</summary>
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    ///<summary>
    ///  Returns or sets the video play mode.
    ///  Read/write <see cref="T:Aspose.Slides.VideoPlayModePreset" />
    ///  .
    ///</summary>
    property PlayMode: DNVideoPlayModePreset read get_PlayMode write set_PlayMode;
    ///<summary>
    ///  Determines whether a video is shown in full screen mode.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FullScreenMode: Boolean read get_FullScreenMode write set_FullScreenMode;
    ///<summary>
    ///  Returns or sets the name of an video file which is linked to a VideoFrame.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns or sets embedded video object.
    ///  Read/write <see cref="T:Aspose.Slides.IVideo" />
    ///  .
    ///</summary>
    property EmbeddedVideo: DNIVideo read get_EmbeddedVideo write set_EmbeddedVideo;
    ///<summary>
    ///  Allows to get base IPictureFrame interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrame" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIPictureFrame: DNIPictureFrame read get_AsIPictureFrame;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a Zoom object on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.IZoomFrame')]
  DNIZoomFrame = interface(DNISlideComponent)
  ['{088F1ACA-A111-4DD3-9926-49BD7E6BA2E4}']
  { getters & setters } 

    function get_ImageType: DNZoomImageType;
    procedure set_ImageType(value: DNZoomImageType);
    function get_ReturnToParent: Boolean;
    procedure set_ReturnToParent(value: Boolean);
    function get_TargetSlide: DNISlide;
    procedure set_TargetSlide(value: DNISlide);
    function get_ShowBackground: Boolean;
    procedure set_ShowBackground(value: Boolean);
    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_TransitionDuration: Single;
    procedure set_TransitionDuration(value: Single);
    function get_AsIGraphicalObject: DNIGraphicalObject;

  { propertys } 

    ///<summary>
    ///  Gets or sets the image type of a zoom object.
    ///  Read/write <see cref="T:Aspose.Slides.ZoomImageType" />
    ///  .
    ///  Default value: Preview
    ///</summary>
    ///<remarks>
    ///  Specifies whether the Zoom object is using the slide preview or a cover image.
    ///</remarks>
    ///<example>Next example demonstrates changing Image Type to Preview value.
    ///  In this case current image of a Zoom object changes to slide image:
    ///<code>
    ///  [C#]
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1], image);
    ///  zoomFrame.ImageType = ZoomImageType.Preview;
    ///</code></example>
    property ImageType: DNZoomImageType read get_ImageType write set_ImageType;
    ///<summary>
    ///  Gets or sets the navigation behavior in slideshow.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///  Default value: false
    ///</summary>
    ///<remarks>
    ///  True value of the property specifies return to parent navigation behavior in slideshow.
    ///</remarks>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.ReturnToParent = true;
    ///</code></example>
    property ReturnToParent: Boolean read get_ReturnToParent write set_ReturnToParent;
    ///<summary>
    ///  Gets or sets the slide object that the Slide Zoom object links to.
    ///  Read/write <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    ///<example>Next example demonstrates changing target slide and creates new image for the zoom object:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.TargetSlide = pres.Slides[2];
    ///</code></example>
    property TargetSlide: DNISlide read get_TargetSlide write set_TargetSlide;
    ///<summary>
    ///  Gets or sets value that specifies whether the Zoom will use the background of the destination slide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///  Default value: true
    ///</summary>
    ///<example>The example demonstrates removing the background of an image of a Zoom object:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.ShowBg = false;
    ///</code></example>
    property ShowBackground: Boolean read get_ShowBackground write set_ShowBackground;
    ///<summary>
    ///  Gets or sets image for zoom object.
    ///  Read/write <see cref="T:Aspose.Slides.IPPImage" />
    ///  .
    ///</summary>
    ///<example>The example demonstrates changing an image of a Zoom object:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  zoomFrame.Image = image;
    ///</code></example>
    property Image: DNIPPImage read get_Image write set_Image;
    ///<summary>
    ///  Gets or sets the duration of the transition between Zoom and slide.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///  Default value: 1.0f
    ///</summary>
    ///<remarks>
    ///  If not specified (TransitionDur = 0), it will use the destination slide transition and the timings associated with that transition.
    ///</remarks>
    ///<example>the example demonstrates changing the duration of the transition between Zoom and slide:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.TransitionDur = 2.5f;
    ///</code></example>
    property TransitionDuration: Single read get_TransitionDuration write set_TransitionDuration;
    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents a SmartArt diagram.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArt')]
  DNISmartArt = interface(DNISlideComponent)
  ['{59837C61-35E5-433F-A4F1-803CA00E46C4}']
  { getters & setters } 

    function get_AllNodes: DNISmartArtNodeCollection;
    function get_Nodes: DNISmartArtNodeCollection;
    function get_Layout: DNSmartArtLayoutType;
    procedure set_Layout(value: DNSmartArtLayoutType);
    function get_QuickStyle: DNSmartArtQuickStyleType;
    procedure set_QuickStyle(value: DNSmartArtQuickStyleType);
    function get_ColorStyle: DNSmartArtColorType;
    procedure set_ColorStyle(value: DNSmartArtColorType);
    function get_IsReversed: Boolean;
    procedure set_IsReversed(value: Boolean);
    function get_AsIGraphicalObject: DNIGraphicalObject;

  { propertys } 

    ///<summary>
    ///  Returns collections of all nodes in SmartArt object.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtNodeCollection" />
    ///  .
    ///</summary>
    property AllNodes: DNISmartArtNodeCollection read get_AllNodes;
    ///<summary>
    ///  Returns collections of root nodes in SmartArt object.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtNodeCollection" />
    ///  .
    ///</summary>
    property Nodes: DNISmartArtNodeCollection read get_Nodes;
    ///<summary>
    ///  Return or set layout of the SmartArt object.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.SmartArtLayoutType" />
    ///  .
    ///</summary>
    property Layout: DNSmartArtLayoutType read get_Layout write set_Layout;
    ///<summary>
    ///  Return or set quick style of the SmartArt object.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.SmartArtQuickStyleType" />
    ///  .
    ///</summary>
    property QuickStyle: DNSmartArtQuickStyleType read get_QuickStyle write set_QuickStyle;
    ///<summary>
    ///  Return or set color style of the SmartArt object.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.SmartArtColorType" />
    ///  .
    ///</summary>
    property ColorStyle: DNSmartArtColorType read get_ColorStyle write set_ColorStyle;
    ///<summary>
    ///  Return or set the state of the SmartArt diagram with regard to (left-to-right) LTR or (right-to-left) RTL, if the diagram supports reversal.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsReversed: Boolean read get_IsReversed write set_IsReversed;
    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents a shape inside SmartArt diagram
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtShape')]
  DNISmartArtShape = interface(DNISlideComponent)
  ['{92298AD6-E2BF-4D28-9380-C61B3B298893}']
  { getters & setters } 

    function get_TextFrame: DNITextFrame;
    function get_AsIGeometryShape: DNIGeometryShape;

  { propertys } 

    ///<summary>
    ///  Returns text of the SmartArt shape.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Allows to get base IGeometryShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGeometryShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Stores theme-defined colors.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IColorScheme')]
  DNIColorScheme = interface(DNISlideComponent)
  ['{AC563F5A-0CF8-43BE-BB35-30EF07610D17}']
  { getters & setters } 

    function get_Item(index: DNColorSchemeIndex): DNIColorFormat;
    function get_Dark1: DNIColorFormat;
    function get_Light1: DNIColorFormat;
    function get_Dark2: DNIColorFormat;
    function get_Light2: DNIColorFormat;
    function get_Accent1: DNIColorFormat;
    function get_Accent2: DNIColorFormat;
    function get_Accent3: DNIColorFormat;
    function get_Accent4: DNIColorFormat;
    function get_Accent5: DNIColorFormat;
    function get_Accent6: DNIColorFormat;
    function get_Hyperlink: DNIColorFormat;
    function get_FollowedHyperlink: DNIColorFormat;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property Item[index: DNColorSchemeIndex]: DNIColorFormat read get_Item; default;
    ///<summary>
    ///  First dark color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Dark1: DNIColorFormat read get_Dark1;
    ///<summary>
    ///  First light color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Light1: DNIColorFormat read get_Light1;
    ///<summary>
    ///  Second dark color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Dark2: DNIColorFormat read get_Dark2;
    ///<summary>
    ///  Second light color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Light2: DNIColorFormat read get_Light2;
    ///<summary>
    ///  First accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent1: DNIColorFormat read get_Accent1;
    ///<summary>
    ///  Second accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent2: DNIColorFormat read get_Accent2;
    ///<summary>
    ///  Third accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent3: DNIColorFormat read get_Accent3;
    ///<summary>
    ///  Fourth accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent4: DNIColorFormat read get_Accent4;
    ///<summary>
    ///  Fifth accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent5: DNIColorFormat read get_Accent5;
    ///<summary>
    ///  Sixth accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent6: DNIColorFormat read get_Accent6;
    ///<summary>
    ///  Color for the hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Hyperlink: DNIColorFormat read get_Hyperlink;
    ///<summary>
    ///  Color for the visited hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FollowedHyperlink: DNIColorFormat read get_FollowedHyperlink;
    ///<summary>
    ///  Returns ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Stores theme-defined formats for the shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IFormatScheme')]
  DNIFormatScheme = interface(DNISlideComponent)
  ['{E5FA4582-AC6D-4053-BB0F-8816F0D11493}']
  { getters & setters } 

    function get_FillStyles: DNIFillFormatCollection;
    function get_LineStyles: DNILineFormatCollection;
    function get_EffectStyles: DNIEffectStyleCollection;
    function get_BackgroundFillStyles: DNIFillFormatCollection;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    ///<summary>
    ///  Returns a collection of theme defined fill styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFillFormatCollection" />
    ///  .
    ///</summary>
    property FillStyles: DNIFillFormatCollection read get_FillStyles;
    ///<summary>
    ///  Returns a collection of theme defined line styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.ILineFormatCollection" />
    ///  .
    ///</summary>
    property LineStyles: DNILineFormatCollection read get_LineStyles;
    ///<summary>
    ///  Returns a collection of theme defined effect styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IEffectStyleCollection" />
    ///  .
    ///</summary>
    property EffectStyles: DNIEffectStyleCollection read get_EffectStyles;
    ///<summary>
    ///  Returns a collection of theme defined background fill styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFillFormatCollection" />
    ///  .
    ///</summary>
    property BackgroundFillStyles: DNIFillFormatCollection read get_BackgroundFillStyles;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represent master theme manager.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IMasterThemeable')]
  DNIMasterThemeable = interface(DNISlideComponent)
  ['{E5974423-3820-4F98-A492-C9DEDC2605CF}']
  { getters & setters } 

    function get_ThemeManager: DNIMasterThemeManager;
    function get_AsIThemeable: DNIThemeable;

  { propertys } 

    ///<summary>
    ///  Returns master theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns IThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents override theme manager.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IOverrideThemeable')]
  DNIOverrideThemeable = interface(DNISlideComponent)
  ['{77A9619D-183F-4715-82D4-9DEE754AFF82}']
  { getters & setters } 

    function get_ThemeManager: DNIOverrideThemeManager;
    function get_AsIThemeable: DNIThemeable;

  { propertys } 

    ///<summary>
    ///  Returns override theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    ///<summary>
    ///  Returns IThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IThemeable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents objects that can be themed with <see cref="T:Aspose.Slides.Theme.ITheme" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IThemeable')]
  DNIThemeable = interface(DNISlideComponent)
  ['{071D61E7-9AA5-482D-A82F-3B4AC288751A}']
  { getters & setters } 

    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    ///<summary>
    ///  Returns an effective theme for this themeable object.
    ///</summary>
    ///<returns>Effective theme <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
    ///</returns>
    function CreateThemeEffective: DNIThemeEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a picture in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlidesPicture')]
  DNISlidesPicture = interface(DNIPresentationComponent)
  ['{228DC587-C5E7-4BD7-BF73-1501A0091B40}']
  { getters & setters } 

    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_ImageTransform: DNIImageTransformOperationCollection;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { propertys } 

    ///<summary>
    ///  Returns or sets the embedded image.
    ///  Read/write <see cref="T:Aspose.Slides.IPPImage" />
    ///  .
    ///</summary>
    property Image: DNIPPImage read get_Image write set_Image;
    ///<summary>
    ///  Returns of sets linked image's URL.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns the collection of image transform effects.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperationCollection" />
    ///  .
    ///</summary>
    property ImageTransform: DNIImageTransformOperationCollection read get_ImageTransform;
    ///<summary>
    ///  Allows to get base IPresentationComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentationComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents a master theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IMasterTheme')]
  DNIMasterTheme = interface(DNIPresentationComponent)
  ['{400856DD-C56C-43CF-8B69-D844BB4B16A0}']
  { getters & setters } 

    function get_ExtraColorSchemes: DNIExtraColorSchemeCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AsITheme: DNITheme;

  { propertys } 

    ///<summary>
    ///  Returns the collection of additional color schemes.
    ///  These schemes don't affect presentation's look, they can be selected as main color scheme for a slide.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IExtraColorSchemeCollection" />
    ///  .
    ///</summary>
    property ExtraColorSchemes: DNIExtraColorSchemeCollection read get_ExtraColorSchemes;
    ///<summary>
    ///  Returns the name of a theme.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Allows to get base ITheme interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.ITheme" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITheme: DNITheme read get_AsITheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents a overriding theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IOverrideTheme')]
  DNIOverrideTheme = interface(DNIPresentationComponent)
  ['{95CEA239-6E24-4E25-8D3B-1CF6EDE44559}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_AsITheme: DNITheme;

  { methods } 

    ///<summary>
    ///  Init ColorScheme with new object for overriding ColorScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the ColorScheme is already initialized (not null).</exception>
    procedure InitColorScheme;
    ///<summary>
    ///  Init ColorScheme with new object for overriding ColorScheme of InheritedTheme.
    ///</summary>
    ///  <param name="colorScheme">Data to initialize from.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the ColorScheme is already initialized (not null).</exception><exception cref="T:System.ArgumentNullException">Thrown if the colorScheme parameter is null.</exception>
    procedure InitColorSchemeFrom(colorScheme: DNIColorScheme);
    ///<summary>
    ///  Init ColorScheme with new object for overriding ColorScheme of InheritedTheme. And initialize data of this new object with data of the ColorScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the ColorScheme is already initialized (not null).</exception>
    procedure InitColorSchemeFromInherited;
    ///<summary>
    ///  Init FontScheme with new object for overriding FontScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FontScheme is already initialized (not null).</exception>
    procedure InitFontScheme;
    ///<summary>
    ///  Init FontScheme with new object for overriding FontScheme of InheritedTheme.
    ///</summary>
    ///  <param name="fontScheme">Data to initialize from.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FontScheme is already initialized (not null).</exception><exception cref="T:System.ArgumentNullException">Thrown if the fontScheme parameter is null.</exception>
    procedure InitFontSchemeFrom(fontScheme: DNIFontScheme);
    ///<summary>
    ///  Init FontScheme with new object for overriding FontScheme of InheritedTheme. And initialize data of this new object with data of the FontScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FontScheme is already initialized (not null).</exception>
    procedure InitFontSchemeFromInherited;
    ///<summary>
    ///  Init FormatScheme with new object for overriding FormatScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FormatScheme is already initialized (not null).</exception>
    procedure InitFormatScheme;
    ///<summary>
    ///  Init FormatScheme with new object for overriding FormatScheme of InheritedTheme.
    ///</summary>
    ///  <param name="formatScheme">Data to initialize from.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FormatScheme is already initialized (not null).</exception><exception cref="T:System.ArgumentNullException">Thrown if the formatScheme parameter is null.</exception>
    procedure InitFormatSchemeFrom(formatScheme: DNIFormatScheme);
    ///<summary>
    ///  Init FormatScheme with new object for overriding FormatScheme of InheritedTheme. And initialize data of this new object with data of the FormatScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FormatScheme is already initialized (not null).</exception>
    procedure InitFormatSchemeFromInherited;
    ///<summary>
    ///  Set ColorScheme, FontScheme, FormatScheme to null to disable any overriding with this theme object.
    ///</summary>
    procedure Clear;

  { propertys } 

    ///<summary>
    ///  True value means that ColorScheme, FontScheme, FormatScheme is null and any overriding with this theme object are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  Allows to get base ITheme interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.ITheme" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITheme: DNITheme read get_AsITheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents a theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.ITheme')]
  DNITheme = interface(DNIPresentationComponent)
  ['{F057D28D-1BE0-4FDE-AB31-9C7C6221A20C}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { methods } 

    ///<summary>
    ///  Gets effective theme data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIThemeEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns the color scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IColorScheme" />
    ///  .
    ///</summary>
    property ColorScheme: DNIColorScheme read get_ColorScheme;
    ///<summary>
    ///  Returns the font scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFontScheme" />
    ///  .
    ///</summary>
    property FontScheme: DNIFontScheme read get_FontScheme;
    ///<summary>
    ///  Returns the shape format scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFormatScheme" />
    ///  .
    ///</summary>
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    ///<summary>
    ///  Allows to get base IPresentationComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentationComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Allows to create presentation via COM interface
  ///</summary>
  [DNTypeName('Aspose.Slides.IPresentationFactory')]
  DNIPresentationFactory = interface(DDN.mscorlib.DNObject)
  ['{F818A1CD-3DFC-45BC-BC3B-7FE35B8BACA8}']
  { methods } 

    ///<summary>
    ///  Creates new presentation.
    ///</summary>
    ///<returns>New presentation</returns>
    function CreatePresentation: DNIPresentation; overload;
    ///<summary>
    ///  Creates new presentation with additional load options
    ///</summary>
    ///  <param name="options">Load options</param>
    ///<returns>New presentation</returns>
    function CreatePresentation(options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Gets info about presentation in specified file.
    ///</summary>
    ///  <param name="file">Presentatoin file.</param>
    ///<returns>Presentation info</returns>
    function GetPresentationInfo(&file: string): DNIPresentationInfo; overload;
    ///<summary>
    ///  Gets info about presentation in specified stream.
    ///</summary>
    ///  <param name="stream">Presentation stream.</param>
    ///<returns>Presentation info.</returns>
    function GetPresentationInfo(stream: DDN.mscorlib.DNStream): DNIPresentationInfo; overload;
    ///<summary>
    ///  Reads an existing presentation from array
    ///</summary>
    ///  <param name="data">Array to read</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(data: TArray<Byte>): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from array with additional load options
    ///</summary>
    ///  <param name="data">Array to read</param>
    ///  <param name="options">Load options</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(data: TArray<Byte>; options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from stream
    ///</summary>
    ///  <param name="stream">Input stream to read</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(stream: DDN.mscorlib.DNStream): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from stream with additional load options
    ///</summary>
    ///  <param name="stream">Input stream to read</param>
    ///  <param name="options">Load options</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(stream: DDN.mscorlib.DNStream; options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from file
    ///</summary>
    ///  <param name="file">File name</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(&file: string): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from stream with additional load options
    ///</summary>
    ///  <param name="file">File name</param>
    ///  <param name="options">Load options</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(&file: string; options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Retreieves the raw text from the slides
    ///</summary>
    ///  <param name="file">Input file</param>
    ///  <param name="mode">Extraction mode</param>
    ///<returns>The instance of PresentationText containing the SlideText array representing the raw slides text</returns>
    function GetPresentationText(&file: string; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    ///<summary>
    ///  Retreieves the raw text from the slides
    ///</summary>
    ///  <param name="stream">Input stream</param>
    ///  <param name="mode">Extraction mode</param>
    ///<returns>The instance of PresentationText containing the SlideText array representing the raw slides text</returns>
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    ///<summary>
    ///  Retreieves the raw text from the slides
    ///</summary>
    ///  <param name="stream">Input stream</param>
    ///  <param name="mode">Extraction mode</param>
    ///  <param name="options">Load options</param>
    ///<returns>The instance of PresentationText containing the SlideText array representing the raw slides text</returns>
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode; options: DNILoadOptions): DNIPresentationText; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Information about presentation file
  ///</summary>
  [DNTypeName('Aspose.Slides.IPresentationInfo')]
  DNIPresentationInfo = interface(DDN.mscorlib.DNObject)
  ['{CA4682BB-0EE0-4B71-AB86-7230B21CE0E0}']
  { getters & setters } 

    function get_IsEncrypted: Boolean;
    function get_IsPasswordProtected: Boolean;
    function get_IsWriteProtected: DNNullableBool;
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    ///<summary>
    ///  Checks whether a password is correct for a presentation protected with open password.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo("pres.pptx");
    ///  bool isPasswordCorrect = info.CheckPassword("my_password");
    ///</code></example><param name="password">The password to check.</param>
    ///<returns>
    ///  True if the presentation is protected with open password and the password is correct and false otherwise.
    ///</returns>
    ///<remarks>
    ///  When the password is null or empty, this method returns false.
    ///</remarks>
    function CheckPassword(password: string): Boolean;
    ///<summary>
    ///  Checks whether a password to modify is correct for a write protected presentation.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  if (info.IsWriteProtected == NullableBool.True)
    ///  {
    ///  bool isWriteProtectedByPassword = info.CheckWriteProtection("my_password");
    ///  }
    ///</code></example><param name="password">The password to check.</param>
    ///<returns>
    ///  True if the presentation is write protected and the password is correct. False otherwise.
    ///</returns>
    ///<remarks>
    ///  1. You should check the <see cref="P:Aspose.Slides.IPresentationInfo.IsWriteProtected" />
    ///  property before calling this method.
    ///  2. When password is null or empty, this method returns false.
    ///</remarks>
    ///<exception cref="T:System.InvalidOperationException" />
    function CheckWriteProtection(password: string): Boolean;
    ///<summary>
    ///  Gets document properties of binded presentation.
    ///</summary>
    ///<returns>Document properties <see cref="T:Aspose.Slides.IDocumentProperties" />
    ///</returns>
    function ReadDocumentProperties: DNIDocumentProperties;
    ///<summary>
    ///  Updates properties of binded presentation.
    ///</summary>
    ///  <param name="documentProperties">Document properties <see cref="T:Aspose.Slides.IDocumentProperties" />
    ///</param>
    ///<example>
    ///  This sample shows how to call the <see cref="M:Aspose.Slides.IPresentationInfo.UpdateDocumentProperties(Aspose.Slides.IDocumentProperties)" />
    ///  method to
    ///  update the document properties returned by call of the <see cref="M:Aspose.Slides.IPresentationInfo.ReadDocumentProperties" />
    ///  method.
    ///<code>
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo("pres.pptx");
    ///  IDocumentProperties props = info.ReadDocumentProperties();
    ///  props.Subject = "New subject";
    ///  props.LastSavedTime = DateTime.UtcNow;
    ///  info.UpdateDocumentProperties(props);
    ///  info.WriteBindedPresentation("new_pres.pptx");
    ///</code></example>
    procedure UpdateDocumentProperties(documentProperties: DNIDocumentProperties);
    ///<summary>
    ///  Writes binded presentation to stream.
    ///</summary>
    ///  <param name="stream">The stream must be seekable and writable.</param>
    procedure WriteBindedPresentation(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Writes binded presentation to file.
    ///</summary>
    ///  <param name="file">Presentation file.</param>
    procedure WriteBindedPresentation(&file: string); overload;

  { propertys } 

    ///<summary>
    ///  Gets True if binded presentation is encrypted, otherwise False.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Gets a value that indicates whether a binded presentation is protected by a password to open.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  if (info.IsPasswordProtected)
    ///  {
    ///  Console.WriteLine("The presentation '" + presentationFilePath + "' is protected by a password to open.");
    ///  }
    ///</code></example>
    property IsPasswordProtected: Boolean read get_IsPasswordProtected;
    ///<summary>
    ///  Gets a value that indicates whether a binded presentation is write protected.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  if (info.IsWriteProtected == NullableBool.True)
    ///  {
    ///  Console.WriteLine("The presentation '" + presentationFilePath + "' is write protected by a password.");
    ///  }
    ///</code></example><remarks>
    ///  If the presentation is protected by a password to open, the property value equals NotDefined.
    ///  See <see cref="T:Aspose.Slides.NullableBool" />
    ///  enumeration.
    ///</remarks>
    property IsWriteProtected: DNNullableBool read get_IsWriteProtected;
    ///<summary>
    ///  Gets format of the binded presentation.
    ///  Read-only <see cref="T:Aspose.Slides.LoadFormat" />
    ///  .
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the text extracted from the slide
  ///</summary>
  [DNTypeName('Aspose.Slides.IPresentationText')]
  DNIPresentationText = interface(DDN.mscorlib.DNObject)
  ['{41194A21-BB06-4664-85F3-F465951E0B66}']
  { getters & setters } 

    function get_SlidesText: TArray<DNISlideText>;

  { propertys } 

    ///<summary>
    ///  An array of <see cref="T:Aspose.Slides.ISlideText">SlideText</see> contains a presentation's text.
    ///</summary>
    property SlidesText: TArray<DNISlideText> read get_SlidesText;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a callback object for saving progress updates in percentage.
  ///</summary>
  [DNTypeName('Aspose.Slides.IProgressCallback')]
  DNIProgressCallback = interface(DDN.mscorlib.DNObject)
  ['{A7E647E3-5846-4F6C-81A1-93FD198F2DE0}']
  { methods } 

    ///<summary>
    ///  Reports a progress update.
    ///</summary>
    ///  <param name="progressValue">The value of the updated progress.</param>
    procedure Reporting(progressValue: Double);

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Presentation password protestion management.
  ///</summary>
  [DNTypeName('Aspose.Slides.IProtectionManager')]
  DNIProtectionManager = interface(DDN.mscorlib.DNObject)
  ['{129D2D29-42D2-40FF-8BB2-ECAC77426681}']
  { getters & setters } 

    function get_EncryptDocumentProperties: Boolean;
    procedure set_EncryptDocumentProperties(value: Boolean);
    function get_IsEncrypted: Boolean;
    function get_IsOnlyDocumentPropertiesLoaded: Boolean;
    function get_IsWriteProtected: Boolean;
    function get_EncryptionPassword: string;
    function get_ReadOnlyRecommended: Boolean;
    procedure set_ReadOnlyRecommended(value: Boolean);

  { methods } 

    ///<summary>
    ///  Encrypts Presentation with specified password.
    ///</summary>
    ///  <param name="encryptionPassword">The password.</param>
    procedure Encrypt(encryptionPassword: string);
    ///<summary>
    ///  Removes the encryption.
    ///</summary>
    procedure RemoveEncryption;
    ///<summary>
    ///  Set write protection for this presentation with specified password.
    ///</summary>
    ///  <param name="password">The password.</param>
    procedure SetWriteProtection(password: string);
    ///<summary>
    ///  Removes write protection for this presentation.
    ///</summary>
    procedure RemoveWriteProtection;
    ///<summary>
    ///  Determines whether a presentation is a password protected to modify.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (var presentation = new Presentation(presentationFilePath))
    ///  {
    ///  var isWriteProtected = presentation.ProtectionManager.CheckWriteProtection("my_password");
    ///  }
    ///</code></example><param name="password">The password for checking.</param>
    ///<returns>True if the password is valid; otherwise, false.</returns>
    ///<remarks>
    ///  1. You should check the <see cref="P:Aspose.Slides.IProtectionManager.IsWriteProtected" />
    ///  property before calling this method.
    ///  2. When the password is null or empty, this method returns false.
    ///</remarks>
    function CheckWriteProtection(password: string): Boolean;

  { propertys } 

    ///<summary>
    ///  This property makes sense, if presentation is password protected.
    ///  If true then document properties is encrypted in presentation file.
    ///  If false then document properties is public while presentation is encrypted.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EncryptDocumentProperties: Boolean read get_EncryptDocumentProperties write set_EncryptDocumentProperties;
    ///<summary>
    ///  Gets a value indicating whether this instance is encrypted.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<value><c>true</c> if presentation was loaded from encrypted file or <see cref="M:Aspose.Slides.IProtectionManager.Encrypt(System.String)" />
    ///  method was called ; otherwise, <c>false</c>.
    ///</value>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  This property makes sense, if presentation file is password protected and document
    ///  properties of this file are public.
    ///  Value of true means that only document properties are loaded from an encrypted
    ///  presentation file without use of password.
    ///  Value of false means that entire encrypted presentation is loaded with use of right
    ///  password, not only document properties are loaded.
    ///  If presentation isn't encrypted then property value is always false.
    ///  If document properties of an encrypted file aren't public then property value is always false.
    ///  If PresentationEx.EncryptDocumentProperties is true than IsOnlyDocumentPropertiesLoaded
    ///  property value is always false.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOnlyDocumentPropertiesLoaded: Boolean read get_IsOnlyDocumentPropertiesLoaded;
    ///<summary>
    ///  Gets a value indicating whether this presentation is write protected.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsWriteProtected: Boolean read get_IsWriteProtected;
    ///<summary>
    ///  Returns encryption password.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property EncryptionPassword: string read get_EncryptionPassword;
    ///<summary>
    ///  Gets or sets read-only recommendation.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Presentation pres = new Presentation();
    ///  pres.ProtectionManager.ReadOnlyRecommended = true;
    ///  pres.Save("ReadOnlyPresentation.pptx", SaveFormat.Pptx);
    ///</code></example>
    property ReadOnlyRecommended: Boolean read get_ReadOnlyRecommended write set_ReadOnlyRecommended;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Interface for external resource loading arguments.
  ///</summary>
  [DNTypeName('Aspose.Slides.IResourceLoadingArgs')]
  DNIResourceLoadingArgs = interface(DDN.mscorlib.DNObject)
  ['{9D400075-E75D-4B6F-9394-A5DA2E7F7719}']
  { getters & setters } 

    function get_OriginalUri: string;
    function get_Uri: string;
    procedure set_Uri(value: string);

  { methods } 

    ///<summary>
    ///  Sets user provided data of the resource which used if <see cref="M:Aspose.Slides.IResourceLoadingCallback.ResourceLoading(Aspose.Slides.IResourceLoadingArgs)" />
    ///  returns <see cref="F:Aspose.Slides.ResourceLoadingAction.UserProvided" />
    ///  .
    ///</summary>
    ///  <param name="data">Provided data of the resource <see cref="T:System.Byte" />
    ///  []</param>
    procedure SetData(data: TArray<Byte>);

  { propertys } 

    ///<summary>
    ///  Original URI of the resource as specified in imported presentation.
    ///</summary>
    property OriginalUri: string read get_OriginalUri;
    ///<summary>
    ///  URI of the resource which is used for downloading if <see cref="M:Aspose.Slides.IResourceLoadingCallback.ResourceLoading(Aspose.Slides.IResourceLoadingArgs)" />
    ///  returns <see cref="F:Aspose.Slides.ResourceLoadingAction.Default" />
    ///  .
    ///  Initially it's set to original URI of the resource, but can be redefined to any value.
    ///</summary>
    property Uri: string read get_Uri write set_Uri;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Callback interface used to manage external resources loading.
  ///</summary>
  [DNTypeName('Aspose.Slides.IResourceLoadingCallback')]
  DNIResourceLoadingCallback = interface(DDN.mscorlib.DNObject)
  ['{2E2F8F8A-07F7-4C9A-A9B8-9B131C680183}']
  { methods } 

    ///<summary>
    ///  Callback method which regulates external resources loading.
    ///</summary>
    ///  <param name="args">The loading resource data <see cref="T:Aspose.Slides.IResourceLoadingArgs" />
    ///  .</param>
    ///<returns>The resource loading decision <see cref="T:Aspose.Slides.ResourceLoadingAction" />
    ///  .</returns>
    function ResourceLoading(args: DNIResourceLoadingArgs): DNResourceLoadingAction;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents format of a table row.
  ///</summary>
  [DNTypeName('Aspose.Slides.IRowFormat')]
  DNIRowFormat = interface(DDN.mscorlib.DNObject)
  ['{428E7AA6-A07C-43B1-93F2-1A9A644FFA27}']
  { methods } 

    ///<summary>
    ///  Gets effective table row formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IRowFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIRowFormatEffectiveData;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents section of slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISection')]
  DNISection = interface(DDN.mscorlib.DNObject)
  ['{B1944A26-0AF3-453C-9C22-0AAAB1B6A4C1}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StartedFromSlide: DNISlide;

  { methods } 

    ///<summary>
    ///  Returns list of slides in the section.
    ///</summary>
    ///<returns>List of slides <see cref="T:Aspose.Slides.ISectionSlideCollection" />
    ///</returns>
    function GetSlidesListOfSection: DNISectionSlideCollection;

  { propertys } 

    ///<summary>
    ///  Name of the section.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns first slide of the section.
    ///</summary>
    property StartedFromSlide: DNISlide read get_StartedFromSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents properties of shape's main face relief.
  ///</summary>
  [DNTypeName('Aspose.Slides.IShapeBevel')]
  DNIShapeBevel = interface(DDN.mscorlib.DNObject)
  ['{C3A6D851-E528-4C0E-B149-7F71DB222EB4}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_BevelType: DNBevelPresetType;
    procedure set_BevelType(value: DNBevelPresetType);

  { propertys } 

    ///<summary>
    ///  Bevel width.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Bevel height.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Bevel type.
    ///  Read/write <see cref="T:Aspose.Slides.BevelPresetType" />
    ///  .
    ///</summary>
    property BevelType: DNBevelPresetType read get_BevelType write set_BevelType;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective shape's face relief properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IThreeDFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.IShapeBevelEffectiveData')]
  DNIShapeBevelEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{B6240660-BBAB-4928-9B0C-55C87BF73E13}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_BevelType: DNBevelPresetType;

  { propertys } 

    ///<summary>
    ///  Bevel width.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width;
    ///<summary>
    ///  Bevel height.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  Bevel type.
    ///  Read-only <see cref="T:Aspose.Slides.BevelPresetType" />
    ///  .
    ///</summary>
    property BevelType: DNBevelPresetType read get_BevelType;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a part of shape with same outline and fill properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IShapeElement')]
  DNIShapeElement = interface(DDN.mscorlib.DNObject)
  ['{6F1871CA-E15A-4CF6-B689-3CD65D1F13F4}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represent shape's style reference.
  ///</summary>
  [DNTypeName('Aspose.Slides.IShapeStyle')]
  DNIShapeStyle = interface(DDN.mscorlib.DNObject)
  ['{C86306E1-E3EC-4405-9229-59E688A36306}']
  { getters & setters } 

    function get_LineColor: DNIColorFormat;
    function get_LineStyleIndex: UInt16;
    procedure set_LineStyleIndex(value: UInt16);
    function get_FillColor: DNIColorFormat;
    function get_FillStyleIndex: Int16;
    procedure set_FillStyleIndex(value: Int16);
    function get_EffectColor: DNIColorFormat;
    function get_EffectStyleIndex: UInt32;
    procedure set_EffectStyleIndex(value: UInt32);
    function get_FontColor: DNIColorFormat;
    function get_FontCollectionIndex: DNFontCollectionIndex;
    procedure set_FontCollectionIndex(value: DNFontCollectionIndex);

  { propertys } 

    ///<summary>
    ///  Returns a shape's outline color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property LineColor: DNIColorFormat read get_LineColor;
    ///<summary>
    ///  Returns or sets line's column index in a style matrix.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property LineStyleIndex: UInt16 read get_LineStyleIndex write set_LineStyleIndex;
    ///<summary>
    ///  Returns a shape's fill color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FillColor: DNIColorFormat read get_FillColor;
    ///<summary>
    ///  Returns or sets shape's fill column index in style matrices.
    ///  0 means no fill,
    ///  positive value - index in theme's fill styles,
    ///  negative value - index in theme's background styles.
    ///  Read/write <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property FillStyleIndex: Int16 read get_FillStyleIndex write set_FillStyleIndex;
    ///<summary>
    ///  Returns a shape's effect color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property EffectColor: DNIColorFormat read get_EffectColor;
    ///<summary>
    ///  Returns or sets shape's effect column index in a style matrix.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property EffectStyleIndex: UInt32 read get_EffectStyleIndex write set_EffectStyleIndex;
    ///<summary>
    ///  Returns a shape's font color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FontColor: DNIColorFormat read get_FontColor;
    ///<summary>
    ///  Returns or sets shape's font index in a font collection.
    ///  Read/write <see cref="T:Aspose.Slides.FontCollectionIndex" />
    ///  .
    ///</summary>
    property FontCollectionIndex: DNFontCollectionIndex read get_FontCollectionIndex write set_FontCollectionIndex;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents properties for lines sketch format.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISketchFormat')]
  DNISketchFormat = interface(DDN.mscorlib.DNObject)
  ['{7BDFA1CD-A7F9-40C1-99D9-2EC185FBD018}']
  { getters & setters } 

    function get_SketchType: DNLineSketchType;
    procedure set_SketchType(value: DNLineSketchType);

  { propertys } 

    ///<summary>
    ///  Returns or sets the sketch type.
    ///  Read/write <see cref="T:Aspose.Slides.LineSketchType" />
    ///  .
    ///</summary>
    property SketchType: DNLineSketchType read get_SketchType write set_SketchType;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective line sketch properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.ISketchFormatEffectiveData')]
  DNISketchFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{58B0DCA5-1D70-4AD3-A338-803B699B8636}']
  { getters & setters } 

    function get_SketchType: DNLineSketchType;

  { propertys } 

    ///<summary>
    ///  Returns the sketch type.
    ///  Read only <see cref="T:Aspose.Slides.LineSketchType" />
    ///  .
    ///</summary>
    property SketchType: DNLineSketchType read get_SketchType;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents slide show transition.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlideShowTransition')]
  DNISlideShowTransition = interface(DDN.mscorlib.DNObject)
  ['{328CA6DA-AD4B-4A60-8B51-78E8A30DF2D8}']
  { getters & setters } 

    function get_Sound: DNIAudio;
    procedure set_Sound(value: DNIAudio);
    function get_SoundMode: DNTransitionSoundMode;
    procedure set_SoundMode(value: DNTransitionSoundMode);
    function get_SoundLoop: Boolean;
    procedure set_SoundLoop(value: Boolean);
    function get_AdvanceOnClick: Boolean;
    procedure set_AdvanceOnClick(value: Boolean);
    function get_AdvanceAfterTime: UInt32;
    procedure set_AdvanceAfterTime(value: UInt32);
    function get_Speed: DNTransitionSpeed;
    procedure set_Speed(value: DNTransitionSpeed);
    function get_Value: DNITransitionValueBase;
    function get_Type: DNTransitionType;
    procedure set_Type(value: DNTransitionType);
    function get_SoundIsBuiltIn: Boolean;
    procedure set_SoundIsBuiltIn(value: Boolean);
    function get_SoundName: string;
    procedure set_SoundName(value: string);

  { propertys } 

    ///<summary>
    ///  Returns or sets the embedded audio data.
    ///  Read-write <see cref="T:Aspose.Slides.IAudio" />
    ///  .
    ///</summary>
    property Sound: DNIAudio read get_Sound write set_Sound;
    ///<summary>
    ///  Set or returns sound mode for slide transition.
    ///  Read-write <see cref="T:Aspose.Slides.SlideShow.TransitionSoundMode" />
    ///  .
    ///</summary>
    property SoundMode: DNTransitionSoundMode read get_SoundMode write set_SoundMode;
    ///<summary>
    ///  This attribute specifies if the sound will loop until the next sound event occurs in
    ///  slideshow.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SoundLoop: Boolean read get_SoundLoop write set_SoundLoop;
    ///<summary>
    ///  Specifies whether a mouse click will advance the slide or not. If this attribute is not
    ///  specified then a value of true is assumed.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdvanceOnClick: Boolean read get_AdvanceOnClick write set_AdvanceOnClick;
    ///<summary>
    ///  Specifies the time, in milliseconds, after which the transition should start. This setting
    ///  may be used in conjunction with the advClick attribute. If this attribute is not specified
    ///  then it is assumed that no auto-advance will occur.
    ///  Read-write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property AdvanceAfterTime: UInt32 read get_AdvanceAfterTime write set_AdvanceAfterTime;
    ///<summary>
    ///  Specifies the transition speed that is to be used when transitioning from the current slide
    ///  to the next.
    ///  Read-write <see cref="T:Aspose.Slides.SlideShow.TransitionSpeed" />
    ///  .
    ///</summary>
    property Speed: DNTransitionSpeed read get_Speed write set_Speed;
    ///<summary>
    ///  Slide show transition value.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    property Value: DNITransitionValueBase read get_Value;
    ///<summary>
    ///  Type of transition.
    ///  Read-write <see cref="T:Aspose.Slides.SlideShow.TransitionType" />
    ///  .
    ///</summary>
    property &Type: DNTransitionType read get_Type write set_Type;
    ///<summary>
    ///  Specifies whether or not this sound is a built-in sound. If this attribute is set to true then
    ///  the generating application is alerted to check the name attribute specified for this sound
    ///  in it's list of built-in sounds and can then surface a custom name or UI as needed.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SoundIsBuiltIn: Boolean read get_SoundIsBuiltIn write set_SoundIsBuiltIn;
    ///<summary>
    ///  Specifies a human readable name for the sound of the transition. The <see cref="P:Aspose.Slides.ISlideShowTransition.Sound" />
    ///  property must be assigned to get or set the sound name.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>This name appears in the PowerPoint user interface when configuring the transition sound manually.</remarks>
    ///<exception cref="T:Aspose.Slides.PptxException">When <see cref="P:Aspose.Slides.ISlideShowTransition.Sound" />
    ///  property is not assigned.</exception>
    property SoundName: string read get_SoundName write set_SoundName;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a size of slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlideSize')]
  DNISlideSize = interface(DDN.mscorlib.DNObject)
  ['{4053A48E-4095-4EF5-A52E-D1411D1A2706}']
  { getters & setters } 

    function get_Size: DDN.Aspose.Common.DNSizeF;
    function get_Type: DNSlideSizeType;
    function get_Orientation: DNSlideOrienation;
    procedure set_Orientation(value: DNSlideOrienation);

  { methods } 

    ///<summary>
    ///  Sets the type of slide size and scales content using scale type.
    ///<remarks>Assigning any value except <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  will change <see cref="P:Aspose.Slides.ISlideSize.Size">Size</see> accordingly, but will keep <see cref="P:Aspose.Slides.ISlideSize.Orientation">Orientation</see> intact.</remarks>
    ///</summary>
    ///  <param name="type">Slide size type.</param>
    ///  <param name="scaleType">Scale type of slide content.</param>
    procedure SetSize(&type: DNSlideSizeType; scaleType: DNSlideSizeScaleType); overload;
    ///<summary>
    ///  Sets the size in points and scales content using scale type.
    ///<remarks>Assigning any value will reset <see cref="P:Aspose.Slides.ISlideSize.Type">Type</see> property to <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  and set <see cref="P:Aspose.Slides.ISlideSize.Orientation">Orientation</see>.</remarks>
    ///</summary>
    ///  <param name="width">Width.</param>
    ///  <param name="height">Height.</param>
    ///  <param name="scaleType">Scale type of slide content.</param>
    procedure SetSize(width: Single; height: Single; scaleType: DNSlideSizeScaleType); overload;

  { propertys } 

    ///<summary>
    ///  Returns or sets the size in points.
    ///<remarks>Assigning any value will reset <see cref="P:Aspose.Slides.ISlideSize.Type">Type</see> property to <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  and set <see cref="P:Aspose.Slides.ISlideSize.Orientation">Orientation</see>.</remarks>
    ///  Read/write <see cref="T:System.Drawing.SizeF" />
    ///  .
    ///</summary>
    property Size: DDN.Aspose.Common.DNSizeF read get_Size;
    ///<summary>
    ///  Returns or sets the type of slide size.
    ///<remarks>Assigning any value except <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  will change <see cref="P:Aspose.Slides.ISlideSize.Size">Size</see> accordingly, but will keep <see cref="P:Aspose.Slides.ISlideSize.Orientation">Orientation</see> intact.</remarks>
    ///  Read/write <see cref="T:Aspose.Slides.SlideSizeType" />
    ///  .
    ///</summary>
    property &Type: DNSlideSizeType read get_Type;
    ///<summary>
    ///  Returns or sets the slide orientation.
    ///<remarks>Changing this value will swap slide's dimensions.</remarks>
    ///  Read/write <see cref="T:Aspose.Slides.SlideOrienation" />
    ///  .
    ///</summary>
    property Orientation: DNSlideOrienation read get_Orientation write set_Orientation;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the text extracted from the slide
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlideText')]
  DNISlideText = interface(DDN.mscorlib.DNObject)
  ['{35388ECE-C290-4A65-A7AF-FBB7CB485C38}']
  { getters & setters } 

    function get_Text: string;
    function get_MasterText: string;
    function get_LayoutText: string;
    function get_NotesText: string;

  { propertys } 

    ///<summary>
    ///  The text on the slide's shapes
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  The text on the master page's shapes for this slide
    ///</summary>
    property MasterText: string read get_MasterText;
    ///<summary>
    ///  The text on the layout page's shapes for this slide
    ///</summary>
    property LayoutText: string read get_LayoutText;
    ///<summary>
    ///  The text on the notes page's shapes for this slide
    ///</summary>
    property NotesText: string read get_NotesText;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents options which can be used to specify additional spreadsheets behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISpreadsheetOptions')]
  DNISpreadsheetOptions = interface(DDN.mscorlib.DNObject)
  ['{50F6E98D-690B-4D26-B373-BD71A97064F6}']
  { getters & setters } 

    function get_PreferredCulture: DDN.mscorlib.DNCultureInfo;
    procedure set_PreferredCulture(value: DDN.mscorlib.DNCultureInfo);
    function get_RecoverWorkbookFromChartCache: Boolean;
    procedure set_RecoverWorkbookFromChartCache(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Gets or sets preferred culture information for calculating some functions intended for use with languages
    ///  that use the double-byte character set (DBCS).
    ///</summary>
    property PreferredCulture: DDN.mscorlib.DNCultureInfo read get_PreferredCulture write set_PreferredCulture;
    ///<summary>
    ///  If data source for the chart is an external workbook and it's not available, it will be recovered from the chart cache.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown when external workbook in unavailable and RecoverWorkbookFromChartCache property value is false.</exception><example> Example:
    ///<code>
    ///  [C#]
    ///  LoadOptions loadOptions = new LoadOptions
    ///  {
    ///  SpreadsheetOptions = new SpreadsheetOptions
    ///  {
    ///  RecoverWorkbookFromChartCache = true
    ///  }
    ///  };
    ///  using (Presentation pres = new Presentation("Presentation.pptx", loadOptions))
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes[0] as IChart;
    ///  IChartDataWorkbook recoveredWorkbook = chart.ChartData.ChartDataWorkbook;
    ///  }
    ///</code></example>
    property RecoverWorkbookFromChartCache: Boolean read get_RecoverWorkbookFromChartCache write set_RecoverWorkbookFromChartCache;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Factory of StreamWrappers. For COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.IStreamWrapperFactory')]
  DNIStreamWrapperFactory = interface(DDN.mscorlib.DNObject)
  ['{D784F45F-EB75-4BBB-8582-7D4DDC75C405}']
  { methods } 

    ///<summary>
    ///  Creates MemoryStream wrapper.
    ///</summary>
    ///<returns>Stream wrapper for COM interface <see cref="T:Aspose.Slides.IStreamWrapper" />
    ///</returns>
    function CreateMemoryStreamWrapper: DNIStreamWrapper; overload;
    ///<summary>
    ///  Creates MemoryStream wrapper based on the specified byte array.
    ///</summary>
    ///  <param name="buffer">Byte array <see cref="T:System.Byte" />
    ///  []</param>
    ///<returns>Stream wrapper for COM interface <see cref="T:Aspose.Slides.IStreamWrapper" />
    ///</returns>
    function CreateMemoryStreamWrapper(buffer: TArray<Byte>): DNIStreamWrapper; overload;
    ///<summary>
    ///  Creates FileStream with the specified path and creation mode.
    ///</summary>
    ///  <param name="fileName">File name <see cref="T:System.String" />
    ///</param>
    ///  <param name="fileMode">File mode <see cref="T:System.IO.FileMode" />
    ///</param>
    ///<returns>Stream wrapper for COM interface <see cref="T:Aspose.Slides.IStreamWrapper" />
    ///</returns>
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode): DNIStreamWrapper; overload;
    ///<summary>
    ///  Creates FileStream with the specified path, creation mode, and read/write permission.
    ///</summary>
    ///  <param name="fileName">File name <see cref="T:System.String" />
    ///</param>
    ///  <param name="fileMode">File mode <see cref="T:System.IO.FileMode" />
    ///</param>
    ///  <param name="fileAccess">File access <see cref="T:System.IO.FileAccess" />
    ///</param>
    ///<returns>Stream wrapper for COM interface <see cref="T:Aspose.Slides.IStreamWrapper" />
    ///</returns>
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode; fileAccess: DDN.mscorlib.DNFileAccess): DNIStreamWrapper; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents an SVG image.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISvgImage')]
  DNISvgImage = interface(DDN.mscorlib.DNObject)
  ['{8BB43C22-78D1-4032-A149-82FCD3992F0F}']
  { getters & setters } 

    function get_SvgContent: string;
    function get_SvgData: TArray<Byte>;
    function get_ExternalResourceResolver: DNIExternalResourceResolver;
    function get_BaseUri: string;

  { propertys } 

    ///<summary>
    ///  Returns SVG content.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property SvgContent: string read get_SvgContent;
    ///<summary>
    ///  Returns SVG data.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property SvgData: TArray<Byte> read get_SvgData;
    ///<summary>
    ///  Return callback interface used to resolve external resources during SVG documents import.
    ///  Read-only <see cref="T:Aspose.Slides.Import.IExternalResourceResolver" />
    ///  .
    ///</summary>
    property ExternalResourceResolver: DNIExternalResourceResolver read get_ExternalResourceResolver;
    ///<summary>
    ///  Returns base URI of the specified SVG. Used to resolve relative links.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property BaseUri: string read get_BaseUri;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Allow to create ITab instances
  ///</summary>
  ///<remarks>For COM compatibility.</remarks>
  [DNTypeName('Aspose.Slides.ITabFactory')]
  DNITabFactory = interface(DDN.mscorlib.DNObject)
  ['{8267F5C2-A8F9-417D-9A3E-9662898F6ABB}']
  { methods } 

    ///<summary>
    ///  Creates a new ITab instance.
    ///</summary>
    ///  <param name="position">Tab position.</param>
    ///  <param name="align">Align.</param>
    ///<returns>Created tab.</returns>
    function CreateTab(position: Double; align: DNTabAlignment): DNITab;

  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents format of a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITableFormat')]
  DNITableFormat = interface(DDN.mscorlib.DNObject)
  ['{76DCDB6C-A331-46CA-ADFF-7967805761A1}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;

  { methods } 

    ///<summary>
    ///  Gets effective table formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ITableFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNITableFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns a table fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Contains the TextFrame's formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITextFrameFormat')]
  DNITextFrameFormat = interface(DDN.mscorlib.DNObject)
  ['{F62AE20A-E3FE-4E8E-8E0C-F5E1C8E2F35B}']
  { getters & setters } 

    function get_TextStyle: DNITextStyle;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_WrapText: DNNullableBool;
    procedure set_WrapText(value: DNNullableBool);
    function get_AnchoringType: DNTextAnchorType;
    procedure set_AnchoringType(value: DNTextAnchorType);
    function get_CenterText: DNNullableBool;
    procedure set_CenterText(value: DNNullableBool);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_AutofitType: DNTextAutofitType;
    procedure set_AutofitType(value: DNTextAutofitType);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_ColumnSpacing: Double;
    procedure set_ColumnSpacing(value: Double);
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_KeepTextFlat: Boolean;
    procedure set_KeepTextFlat(value: Boolean);
    function get_RotationAngle: Single;
    procedure set_RotationAngle(value: Single);
    function get_Transform: DNTextShapeType;
    procedure set_Transform(value: DNTextShapeType);

  { methods } 

    ///<summary>
    ///  Gets effective text frame formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ITextFrameFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNITextFrameFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns text's style.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property TextStyle: DNITextStyle read get_TextStyle;
    ///<summary>
    ///  Returns or sets the left margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets the top margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    ///<summary>
    ///  Returns or sets the bottom margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    ///<summary><b>True</b>
    ///  if text is wrapped at TextFrame's margins.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property WrapText: DNNullableBool read get_WrapText write set_WrapText;
    ///<summary>
    ///  Returns or sets vertical anchor text in a TextFrame.
    ///  Read/write <see cref="T:Aspose.Slides.TextAnchorType" />
    ///  .
    ///</summary>
    property AnchoringType: DNTextAnchorType read get_AnchoringType write set_AnchoringType;
    ///<summary>
    ///  If NullableBool.True then text should be centered in box horizontally.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property CenterText: DNNullableBool read get_CenterText write set_CenterText;
    ///<summary>
    ///  Determines text orientation.
    ///  The resulted value of visual text rotation summarized from this property and custom angle
    ///  in property RotationAngle.
    ///  Read/write <see cref="T:Aspose.Slides.TextVerticalType" />
    ///  .
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    ///<summary>
    ///  Returns or sets text's autofit mode.
    ///  Read/write <see cref="T:Aspose.Slides.TextAutofitType" />
    ///  .
    ///</summary>
    property AutofitType: DNTextAutofitType read get_AutofitType write set_AutofitType;
    ///<summary>
    ///  Returns or sets number of columns in the text area.
    ///  This value must be a positive number. Otherwise, the value will be set to zero.
    ///  Value 0 means undefined value.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    ///<summary>
    ///  Returns or sets the space between text columns in the text area (in points). This should only apply
    ///  when there is more than 1 column present.
    ///  This value must be a positive number. Otherwise, the value will be set to zero.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ColumnSpacing: Double read get_ColumnSpacing write set_ColumnSpacing;
    ///<summary>
    ///  Returns the ThreeDFormat object that represents 3d effect properties for a text.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IAutoShape autoShape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 10, 20, 400, 300);
    ///  ITextFrame textFrame = autoShape.TextFrame;
    ///  textFrame.Text = "Aspose.Slide Test Text";
    ///  // Set text transformation
    ///  textFrame.TextFrameFormat.Transform = TextShapeType.ArchUpPour;
    ///  // Set Extrusion
    ///  textFrame.TextFrameFormat.ThreeDFormat.ExtrusionColor.Color = Color.Orange;
    ///  textFrame.TextFrameFormat.ThreeDFormat.ExtrusionHeight = 6;
    ///  // Set Contour
    ///  textFrame.TextFrameFormat.ThreeDFormat.ContourColor.Color = Color.DarkRed;
    ///  textFrame.TextFrameFormat.ThreeDFormat.ContourWidth = 1.5;
    ///  // Set Depth
    ///  textFrame.TextFrameFormat.ThreeDFormat.Depth = 3;
    ///  // Set Material
    ///  textFrame.TextFrameFormat.ThreeDFormat.Material = MaterialPresetType.Plastic;
    ///  // Set Lighting
    ///  textFrame.TextFrameFormat.ThreeDFormat.LightRig.Direction = LightingDirection.Top;
    ///  textFrame.TextFrameFormat.ThreeDFormat.LightRig.LightType = LightRigPresetType.Balanced;
    ///  textFrame.TextFrameFormat.ThreeDFormat.LightRig.SetRotation(0, 0, 40);
    ///  // Set camera type
    ///  textFrame.TextFrameFormat.ThreeDFormat.Camera.CameraType = CameraPresetType.PerspectiveContrastingRightFacing;
    ///  }
    ///</code></example>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns or set keeping text out of 3D scene entirely.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property KeepTextFlat: Boolean read get_KeepTextFlat write set_KeepTextFlat;
    ///<summary>
    ///  Specifies the custom rotation that is being applied to the text within the bounding box. If it not
    ///  specified, the rotation of the accompanying shape is used. If it is specified, then this is
    ///  applied independently from the shape. That is the shape can have a rotation applied in
    ///  addition to the text itself having a rotation applied to it.
    ///  The resulted value of visual text rotation summarized from this property and predefined
    ///  vertical type in property TextVerticalType.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<example>
    ///  Consider the case where a shape has a rotation of 90 degrees clockwise applied to it.
    ///  In addition to this, the text body itself has a rotation of -90 degrees
    ///  counter-clockwise applied to it. Then the resulting shape would appear to
    ///  be rotated but the text within it would appear as though it had not been rotated at all.
    ///</example>
    property RotationAngle: Single read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets or sets text wrapping shape.
    ///  Read/write <see cref="T:Aspose.Slides.TextShapeType" />
    ///  .
    ///</summary>
    property Transform: DNTextShapeType read get_Transform write set_Transform;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective text frame formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.ITextFrameFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.ITextFrameFormatEffectiveData')]
  DNITextFrameFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{AEEC8164-A3A2-48E3-9E4F-67A032ED2DB1}']
  { getters & setters } 

    function get_TextStyle: DNITextStyleEffectiveData;
    function get_MarginLeft: Double;
    function get_MarginRight: Double;
    function get_MarginTop: Double;
    function get_MarginBottom: Double;
    function get_WrapText: Boolean;
    function get_AnchoringType: DNTextAnchorType;
    function get_CenterText: Boolean;
    function get_TextVerticalType: DNTextVerticalType;
    function get_AutofitType: DNTextAutofitType;
    function get_ColumnCount: Int32;
    function get_ColumnSpacing: Single;

  { propertys } 

    ///<summary>
    ///  Returns effective text's style.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyleEffectiveData" />
    ///  .
    ///</summary>
    property TextStyle: DNITextStyleEffectiveData read get_TextStyle;
    ///<summary>
    ///  Returns the left margin (points) in a TextFrame.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginLeft: Double read get_MarginLeft;
    ///<summary>
    ///  Returns the right margin (points) in a TextFrame.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginRight: Double read get_MarginRight;
    ///<summary>
    ///  Returns the top margin (points) in a TextFrame.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginTop: Double read get_MarginTop;
    ///<summary>
    ///  Returns the bottom margin (points) in a TextFrame.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginBottom: Double read get_MarginBottom;
    ///<summary>
    ///  Returns if text is wrapped at TextFrame's margins.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property WrapText: Boolean read get_WrapText;
    ///<summary>
    ///  Returns vertical anchor text in a TextFrame.
    ///  Read-only <see cref="T:Aspose.Slides.TextAnchorType" />
    ///  .
    ///</summary>
    property AnchoringType: DNTextAnchorType read get_AnchoringType;
    ///<summary>
    ///  Returns if text should be centered in box horizontally.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CenterText: Boolean read get_CenterText;
    ///<summary>
    ///  Returns text orientation.
    ///  Read-only <see cref="T:Aspose.Slides.TextVerticalType" />
    ///  .
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType;
    ///<summary>
    ///  Returns text autofit mode.
    ///  Read-only <see cref="T:Aspose.Slides.TextAutofitType" />
    ///  .
    ///</summary>
    property AutofitType: DNTextAutofitType read get_AutofitType;
    ///<summary>
    ///  Specifies the number of columns of text in the bounding rectangle.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount;
    ///<summary>
    ///  Specifies the space between text columns in the text area (in points).
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property ColumnSpacing: Single read get_ColumnSpacing;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents options which can be used to highlight text in text frame.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITextHighlightingOptions')]
  DNITextHighlightingOptions = interface(DDN.mscorlib.DNObject)
  ['{61405ED3-CDAA-4436-AD75-82DABEE68206}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_WholeWordsOnly: Boolean;
    procedure set_WholeWordsOnly(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Set true to use case-sensitive search, false - otherwise.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  Set true to match only whole words, false - otherwise.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property WholeWordsOnly: Boolean read get_WholeWordsOnly write set_WholeWordsOnly;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Text style formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITextStyle')]
  DNITextStyle = interface(DDN.mscorlib.DNObject)
  ['{D1D23C22-F002-42E0-98EE-43F1BF297E35}']
  { getters & setters } 

    function get_DefaultParagraphFormat: DNIParagraphFormat;

  { methods } 

    ///<summary>
    ///  If level of style exist returns it, otherwise returns null.
    ///</summary>
    ///  <param name="index">Zero-based index of level. Must lay in 0..8 interval.</param>
    ///<returns>Formatting of level <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .</returns>
    function GetLevel(index: Int32): DNIParagraphFormat;
    ///<summary>
    ///  Gets effective text style formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ITextStyleEffectiveData" />
    ///  .</returns>
    function GetEffective: DNITextStyleEffectiveData;

  { propertys } 

    ///<summary>
    ///  Default paragraph propertiies.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .
    ///</summary>
    property DefaultParagraphFormat: DNIParagraphFormat read get_DefaultParagraphFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective text style properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.ITextStyle" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.ITextStyleEffectiveData')]
  DNITextStyleEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{1259EEA2-A39C-4C21-B962-37842885462F}']
  { getters & setters } 

    function get_DefaultParagraphFormat: DNIParagraphFormatEffectiveData;

  { methods } 

    ///<summary>
    ///  Returns level of effective style.
    ///</summary>
    ///  <param name="index">Zero-based index of level. Must lay in 0..8 interval.</param>
    ///<returns>Effective formatting of level <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
    ///  . </returns>
    function GetLevel(index: Int32): DNIParagraphFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns effective default paragraph properties.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
    ///  .
    ///</summary>
    property DefaultParagraphFormat: DNIParagraphFormatEffectiveData read get_DefaultParagraphFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  3D properties source auxiliary interface
  ///</summary>
  [DNTypeName('Aspose.Slides.IThreeDParamSource')]
  DNIThreeDParamSource = interface(DDN.mscorlib.DNObject)
  ['{931810F4-D3D4-44E0-8953-A25E766036A9}']
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents 3-D properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IThreeDFormat')]
  DNIThreeDFormat = interface(DNIThreeDParamSource)
  ['{1EBFCCFF-739C-4DEB-B04D-E63D9ADC595A}']
  { getters & setters } 

    function get_ContourWidth: Double;
    procedure set_ContourWidth(value: Double);
    function get_ExtrusionHeight: Double;
    procedure set_ExtrusionHeight(value: Double);
    function get_Depth: Double;
    procedure set_Depth(value: Double);
    function get_BevelTop: DNIShapeBevel;
    function get_BevelBottom: DNIShapeBevel;
    function get_ContourColor: DNIColorFormat;
    function get_ExtrusionColor: DNIColorFormat;
    function get_Camera: DNICamera;
    function get_LightRig: DNILightRig;
    function get_Material: DNMaterialPresetType;
    procedure set_Material(value: DNMaterialPresetType);
    function get_AsIThreeDParamSource: DNIThreeDParamSource;

  { methods } 

    ///<summary>
    ///  Gets effective 3-D formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IThreeDFormatEffectiveData" />
    ///  .</returns>
    function GetEffective: DNIThreeDFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns or sets the width of a 3D contour.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ContourWidth: Double read get_ContourWidth write set_ContourWidth;
    ///<summary>
    ///  Returns or sets the height of an extrusion effect.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ExtrusionHeight: Double read get_ExtrusionHeight write set_ExtrusionHeight;
    ///<summary>
    ///  Returns or sets the depth of a 3D shape.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Depth: Double read get_Depth write set_Depth;
    ///<summary>
    ///  Returns or sets the type of a top 3D bevel.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeBevel" />
    ///  .
    ///</summary>
    property BevelTop: DNIShapeBevel read get_BevelTop;
    ///<summary>
    ///  Returns or sets the type of a bottom 3D bevel.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeBevel" />
    ///  .
    ///</summary>
    property BevelBottom: DNIShapeBevel read get_BevelBottom;
    ///<summary>
    ///  Returns or sets the color of a contour.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ContourColor: DNIColorFormat read get_ContourColor;
    ///<summary>
    ///  Returns or sets the color of an extrusion.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ExtrusionColor: DNIColorFormat read get_ExtrusionColor;
    ///<summary>
    ///  Returns or sets the settings of a camera.
    ///  Read-only <see cref="T:Aspose.Slides.ICamera" />
    ///  .
    ///</summary>
    property Camera: DNICamera read get_Camera;
    ///<summary>
    ///  Returns or sets the type of a light.
    ///  Read-only <see cref="T:Aspose.Slides.ILightRig" />
    ///  .
    ///</summary>
    property LightRig: DNILightRig read get_LightRig;
    ///<summary>
    ///  Returns or sets the type of a material.
    ///  Read/write <see cref="T:Aspose.Slides.MaterialPresetType" />
    ///  .
    ///</summary>
    property Material: DNMaterialPresetType read get_Material write set_Material;
    ///<summary>
    ///  Allows to get base IThreeDParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIThreeDParamSource: DNIThreeDParamSource read get_AsIThreeDParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which represents effective 3-D formatting properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.IThreeDFormat" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.IThreeDFormatEffectiveData')]
  DNIThreeDFormatEffectiveData = interface(DNIThreeDParamSource)
  ['{8AC0DA79-FF20-467F-ACB2-ACB5AE569BA0}']
  { getters & setters } 

    function get_ContourWidth: Double;
    function get_ExtrusionHeight: Double;
    function get_Depth: Double;
    function get_BevelTop: DNIShapeBevelEffectiveData;
    function get_BevelBottom: DNIShapeBevelEffectiveData;
    function get_ContourColor: DDN.Aspose.Common.DNColor;
    function get_ExtrusionColor: DDN.Aspose.Common.DNColor;
    function get_Camera: DNICameraEffectiveData;
    function get_LightRig: DNILightRigEffectiveData;
    function get_Material: DNMaterialPresetType;
    function get_AsIThreeDParamSource: DNIThreeDParamSource;

  { propertys } 

    ///<summary>
    ///  Returns the width of a 3D contour.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ContourWidth: Double read get_ContourWidth;
    ///<summary>
    ///  Returns the height of an extrusion effect.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ExtrusionHeight: Double read get_ExtrusionHeight;
    ///<summary>
    ///  Returns the depth of a 3D shape.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Depth: Double read get_Depth;
    ///<summary>
    ///  Returns the type of a top 3D bevel.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeBevelEffectiveData" />
    ///  .
    ///</summary>
    property BevelTop: DNIShapeBevelEffectiveData read get_BevelTop;
    ///<summary>
    ///  Returns the type of a bottom 3D bevel.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeBevelEffectiveData" />
    ///  .
    ///</summary>
    property BevelBottom: DNIShapeBevelEffectiveData read get_BevelBottom;
    ///<summary>
    ///  Returns the color of a contour.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ContourColor: DDN.Aspose.Common.DNColor read get_ContourColor;
    ///<summary>
    ///  Returns the color of an extrusion.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ExtrusionColor: DDN.Aspose.Common.DNColor read get_ExtrusionColor;
    ///<summary>
    ///  Returns the settings of a camera.
    ///  Read-only <see cref="T:Aspose.Slides.ICameraEffectiveData" />
    ///  .
    ///</summary>
    property Camera: DNICameraEffectiveData read get_Camera;
    ///<summary>
    ///  Returns the type of a light.
    ///  Read-only <see cref="T:Aspose.Slides.ILightRigEffectiveData" />
    ///  .
    ///</summary>
    property LightRig: DNILightRigEffectiveData read get_LightRig;
    ///<summary>
    ///  Returns the type of a material.
    ///  Read-only <see cref="T:Aspose.Slides.MaterialPresetType" />
    ///  .
    ///</summary>
    property Material: DNMaterialPresetType read get_Material;
    ///<summary>
    ///  Allows to get base IThreeDParamSource interface.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDParamSource" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIThreeDParamSource: DNIThreeDParamSource read get_AsIThreeDParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a video embedded into a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.IVideo')]
  DNIVideo = interface(DDN.mscorlib.DNObject)
  ['{EC14DC83-BB51-44C0-B9A9-6388D0B0F566}']
  { getters & setters } 

    function get_ContentType: string;
    function get_BinaryData: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  Returns Stream stream for reading.
    ///  Use 'using' or close stream after using.
    ///</summary>
    ///<returns>Stream for reading.</returns>
    function GetStream: DDN.mscorlib.DNStream;

  { propertys } 

    ///<summary>
    ///  Returns a MIME type of an video, encoded in <see cref="P:Aspose.Slides.IVideo.BinaryData" />
    ///  .
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  Returns the copy of an audio's data. In case of large amount of data consider using of
    ///<see cref="M:Aspose.Slides.IVideo.GetStream" />
    ///  method to prevent unnecessary loading of video's data into memory
    ///  or even OutOfMemoryException.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Presentation wide view properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IViewProperties')]
  DNIViewProperties = interface(DDN.mscorlib.DNObject)
  ['{50FF25D3-2000-42B7-9E2C-D270A1D1520F}']
  { getters & setters } 

    function get_LastView: DNViewType;
    procedure set_LastView(value: DNViewType);
    function get_ShowComments: DNNullableBool;
    procedure set_ShowComments(value: DNNullableBool);
    function get_SlideViewProperties: DNICommonSlideViewProperties;
    function get_NotesViewProperties: DNICommonSlideViewProperties;
    function get_NormalViewProperties: DNINormalViewProperties;

  { propertys } 

    ///<summary>
    ///  Specifies the view mode that was used when the presentation document was last saved.
    ///  Read/write <see cref="T:Aspose.Slides.ViewType" />
    ///  .
    ///</summary>
    property LastView: DNViewType read get_LastView write set_LastView;
    ///<summary>
    ///  Specifies whether the slide comments should be shown.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ShowComments: DNNullableBool read get_ShowComments write set_ShowComments;
    ///<summary>
    ///  Specifies common view properties associated with the slide view mode.
    ///  Read-only <see cref="T:Aspose.Slides.ICommonSlideViewProperties" />
    ///  .
    ///</summary>
    property SlideViewProperties: DNICommonSlideViewProperties read get_SlideViewProperties;
    ///<summary>
    ///  Specifies common view properties associated with the notes view mode.
    ///  Read-only <see cref="T:Aspose.Slides.ICommonSlideViewProperties" />
    ///  .
    ///</summary>
    property NotesViewProperties: DNICommonSlideViewProperties read get_NotesViewProperties;
    ///<summary>
    ///  Represents normal view properties. The normal view consists of
    ///  three content regions: the slide itself, a side content region, and a bottom content region.
    ///  Read-only <see cref="T:Aspose.Slides.INormalViewProperties" />
    ///  .
    ///</summary>
    property NormalViewProperties: DNINormalViewProperties read get_NormalViewProperties;
  end;

  //-------------namespace: Aspose.Slides----------------
  DNLayoutSlideCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EAA7CC7E-967B-5713-B620-6CD1213760C8}']
  end;

  ///<summary>
  ///  Represents a base class for collection of a layout slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.LayoutSlideCollection')]
  DNLayoutSlideCollection = interface(DDN.mscorlib.DNObject)
  ['{CBCF019A-6F76-31EC-A9EC-E3E83221AB2D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns the first layout slide of specified type.
    ///  <param name="type">A type of layout slide to find.</param>
    ///<returns><see cref="T:Aspose.Slides.LayoutSlide" />
    ///  with specified type or null if no layouts found.</returns>
    ///</summary>
    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    ///<summary>
    ///  Removes unused layout slides (layout slides whose HasDependingSlides is false).
    ///</summary>
    procedure RemoveUnused;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILayoutSlide>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of layout slides in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNLayoutSlideCollection = class(TDNGenericImport<DNLayoutSlideCollectionClass, DNLayoutSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGlobalLayoutSlideCollectionClass = interface(DNLayoutSlideCollectionClass)
  ['{7DF69916-1F20-5C2A-9752-7F774699E5F5}']
  end;

  ///<summary>
  ///  Represents a collection of all layout slides in presentation.
  ///  Extends LayoutSlideCollection class with methods for adding/cloning
  ///  layout slides in context of uniting of the individual collections of master's layout slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.GlobalLayoutSlideCollection')]
  DNGlobalLayoutSlideCollection = interface(DNLayoutSlideCollection)
  ['{20FDF52D-5130-3E8E-A383-7805F72BE04A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified layout slide to the presentation.
    ///</summary>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///<returns>Added slide.</returns>
    ///<remarks>
    ///  When cloning a layout between different presentations layout's master can be cloned too
    ///  to keep source formatting.
    ///  Internal registry is used to track automatically cloned masters to prevent creation of
    ///  multiple clones of the same master slide.
    ///  Manual cloning of master slides will be neither prevented nor registered.
    ///</remarks>
    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide; overload;
    ///<summary>
    ///  Adds a copy of a specified layout slide to the presentation.
    ///</summary>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///  <param name="destMaster">Master slide for a new layout.</param>
    ///<returns>Added slide.</returns>
    ///<remarks>
    ///  1) New layout will be linked with defined master in destination presentation.
    ///  So this is analogue of copy/paste with "Use Destination Theme" option in PowerPoint.
    ///  2) Analogue of this method is method <see cref="M:Aspose.Slides.IMasterLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide)" />
    ///  accessed with <see cref="P:Aspose.Slides.IMasterSlide.LayoutSlides" />
    ///  property.
    ///</remarks>
    function AddClone(sourceLayout: DNILayoutSlide; destMaster: DNIMasterSlide): DNILayoutSlide; overload;
    ///<summary>
    ///  Returns the first layout slide of specified type.
    ///  <param name="type">A type of layout slide to find.</param>
    ///<returns><see cref="T:Aspose.Slides.LayoutSlide" />
    ///  with specified type or null if no layouts found.</returns>
    ///</summary>
    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    ///<summary>
    ///  Removes unused layout slides (layout slides whose HasDependingSlides is false).
    ///</summary>
    procedure RemoveUnused;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILayoutSlide>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of layout slides in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNGlobalLayoutSlideCollection = class(TDNGenericImport<DNGlobalLayoutSlideCollectionClass, DNGlobalLayoutSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterLayoutSlideCollectionClass = interface(DNLayoutSlideCollectionClass)
  ['{60FC10A1-1F43-56D6-A79F-F0AFF10E6D3A}']
  end;

  ///<summary>
  ///  Represents a collections of all layout slides of defined master slide.
  ///  Extends LayoutSlideCollection class with methods for adding/inserting/removing/cloning/reordering
  ///  layout slides in context of the individual collections of master's layout slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterLayoutSlideCollection')]
  DNMasterLayoutSlideCollection = interface(DNLayoutSlideCollection)
  ['{A8682871-9269-33C4-BF21-B65D51256ED5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified layout slide to the end of the collection.
    ///</summary>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///<returns>Added slide.</returns>
    ///<remarks>
    ///  1) New layout will be linked with parent master slide for this layout slides collection.
    ///  So this is analogue of copy/paste with "Use Destination Theme" option in PowerPoint.
    ///  2) Analogue of this method is method <see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide,Aspose.Slides.IMasterSlide)" />
    ///  accessed with <see cref="P:Aspose.Slides.IPresentation.LayoutSlides" />
    ///  property.
    ///</remarks>
    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide;
    ///<summary>
    ///  Inserts a copy of a specified layout slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///<remarks>
    ///  New layout will be linked with parent master slide for this layout slides collection.
    ///  So this is analogue of copy/paste with "Use Destination Theme" option in PowerPoint.
    ///</remarks>
    ///<returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceLayout: DNILayoutSlide): DNILayoutSlide;
    ///<summary>
    ///  Inserts a new layout slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="layoutType">
    ///  Layout type for a new layout.
    ///  Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
    ///  Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</param>
    ///  <param name="layoutName">
    ///  Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
    ///  If null parameter is passed then name genarated atomatically in regards to passed layout type
    ///  (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
    ///</param>
    ///<exception cref="T:System.NotImplementedException">
    ///  Thrown if unsupported value of parameter <paramref name="layoutType" />
    ///  is passed. Layout types that are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</exception><exception cref="T:System.ArgumentException">
    ///  Thrown if layout name value <paramref name="layoutName" />
    ///  is already in use in
    ///  this collection of the layouts.
    ///</exception><remarks>
    ///  Inserted layout for value SlideLayoutType.Custom of <paramref name="layoutType" />
    ///  contains no placeholders and no shapes.
    ///</remarks>
    ///<returns>Inserted slide.</returns>
    function Insert(index: Int32; layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if layout is used in presentation (its HasDependingSlides property is true).
    ///</exception><remarks>
    ///  1) To avoid throwing of the PptxEditException check layout's HasDependingSlides property before.
    ///  2) You can use also <see cref="M:Aspose.Slides.ILayoutSlide.Remove" />
    ///  method to simplify code.
    ///</remarks>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Moves layout slide from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="layoutSlide">Slide to move.</param>
    procedure Reorder(index: Int32; layoutSlide: DNILayoutSlide);
    ///<summary>
    ///  Returns the first layout slide of specified type.
    ///  <param name="type">A type of layout slide to find.</param>
    ///<returns><see cref="T:Aspose.Slides.LayoutSlide" />
    ///  with specified type or null if no layouts found.</returns>
    ///</summary>
    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    ///<summary>
    ///  Removes unused layout slides (layout slides whose HasDependingSlides is false).
    ///</summary>
    procedure RemoveUnused;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILayoutSlide>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of layout slides in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMasterLayoutSlideCollection = class(TDNGenericImport<DNMasterLayoutSlideCollectionClass, DNMasterLayoutSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D9BC115-30D5-5900-9ED7-100074516673}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<example>
    ///  In this example, an attempt will be made to find a license file named MyLicense.lic
    ///  in the folder that contains the component, in the folder that contains the calling assembly,
    ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
    ///<code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense("MyLicense.lic");
    ///  [Visual Basic]
    ///  Dim license As license = New license
    ///  License.SetLicense("MyLicense.lic")
    ///</code></example>
    {class} function init: DNLicense;

  end;

  ///<summary>
  ///  Provides methods to license the component.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to find a license file named MyLicense.lic
  ///  in the folder that contains the component, in the folder that contains the calling assembly,
  ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
  ///<code>
  ///  [C#]
  ///  License license = new License();
  ///  license.SetLicense("MyLicense.lic");
  ///  [Visual Basic]
  ///  Dim license As license = New license
  ///  License.SetLicense("MyLicense.lic")
  ///</code></example>
  [DNTypeName('Aspose.Slides.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{AD3066FA-03F3-4739-8A48-8D3D0C697936}']
  { methods } 

    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="licenseName">Can be a full or short file name or name of an embedded resource.
    ///  Use an empty string to switch to evaluation mode.</param>
    ///<remarks><p>Tries to find the license in the following locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. The folder of the component assembly.</p>
    ///  <p>3. The folder of the client's calling assembly.</p>
    ///  <p>4. The folder of the entry assembly.</p>
    ///  <p>5. An embedded resource in the client's calling assembly.</p>
    ///  <p><b>Note:</b>
    ///  On the .NET Compact Framework, tries to find the license only in these locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. An embedded resource in the client's calling assembly.</p>
    ///</remarks>
    ///<example>
    ///  In this example, an attempt will be made to find a license file named MyLicense.lic
    ///  in the folder that contains the component, in the folder that contains the calling assembly,
    ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
    ///<code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense("MyLicense.lic");
    ///  [Visual Basic]
    ///  Dim license As License = New License
    ///  license.SetLicense("MyLicense.lic")
    ///</code></example>
    procedure SetLicense(licenseName: string); overload;
    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="stream">A stream that contains the license.</param>
    ///<remarks><p>Use this method to load a license from a stream.</p>
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense(myStream);
    ///  [Visual Basic]
    ///  Dim license as License = new License
    ///  license.SetLicense(myStream)
    ///</code></example>
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Reset the license
    ///</summary>
    ///<remarks>Use this method to reset license in component</remarks>
    ///<example><code>
    ///  [C#]
    ///  License license = new License();
    ///  license.ResetLicense();
    ///  [Visual Basic]
    ///  Dim license as License = new License
    ///  license.ResetLicense()
    ///</code></example>
    procedure ResetLicense;
    ///<summary>
    ///  Check if licence is applied to component
    ///</summary>
    ///<returns><c>True</c> if component is licensed, otherwise <c>false</c></returns>
    function IsLicensed: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{40FE4FF1-A6B6-554C-B58C-893F3F5B5869}']
  { constructors } 

    ///<summary>
    ///  Creates new default load options.
    ///</summary>
    {class} function init: DNLoadOptions; overload;
    ///<summary>
    ///  Creates new load options.
    ///</summary>
    ///  <param name="loadFormat">Format of a presentation to load.</param>
    {class} function init(loadFormat: DNLoadFormat): DNLoadOptions; overload;

  end;

  ///<summary>
  ///  Allows to specify additional options (such as format or default font) when loading a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{7CC1885F-A947-4BBB-B053-7818503E4F02}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);
    function get_DefaultSymbolFont: string;
    procedure set_DefaultSymbolFont(value: string);
    function get_DefaultAsianFont: string;
    procedure set_DefaultAsianFont(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_OnlyLoadDocumentProperties: Boolean;
    procedure set_OnlyLoadDocumentProperties(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BlobManagementOptions: DNIBlobManagementOptions;
    procedure set_BlobManagementOptions(value: DNIBlobManagementOptions);
    function get_DocumentLevelFontSources: DNIFontSources;
    procedure set_DocumentLevelFontSources(value: DNIFontSources);
    function get_InterruptionToken: DNIInterruptionToken;
    procedure set_InterruptionToken(value: DNIInterruptionToken);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_SpreadsheetOptions: DNISpreadsheetOptions;
    procedure set_SpreadsheetOptions(value: DNISpreadsheetOptions);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets format of a presentation to load.
    ///  Read/write <see cref="T:Aspose.Slides.LoadFormat" />
    ///  .
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Returns or sets Regular font used in case source font is not found.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
    ///<summary>
    ///  Returns or sets Symbol font used in case source font is not found.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property DefaultSymbolFont: string read get_DefaultSymbolFont write set_DefaultSymbolFont;
    ///<summary>
    ///  Returns or sets Asian font used in case source font is not found.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property DefaultAsianFont: string read get_DefaultAsianFont write set_DefaultAsianFont;
    ///<summary>
    ///  Gets or sets the password.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The password.
    ///</value>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  This property makes sense, if presentation file is password protected.
    ///  Value of true means that only document properties must be loaded from an encrypted
    ///  presentation file and password must be ignored.
    ///  Value of false means that entire encrypted presentation must be loaded with use of right
    ///  password.
    ///  If presentation isn't encrypted then property value is always ignored.
    ///  If document properties of an encrypted file aren't public and property value is true then
    ///  document properties cannot be loaded and exception will be thrown.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property OnlyLoadDocumentProperties: Boolean read get_OnlyLoadDocumentProperties write set_OnlyLoadDocumentProperties;
    ///<summary>
    ///  Returns or sets an object which receives warnings and decides whether loading
    ///  process will continue or will be aborted.
    ///  Read/write <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///  .
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Represents the options which can be used to manage Binary Large Objects (BLOBs) handling behavior,
    ///  such as using of temporary files or max BLOBs bytes in memory. These options intended to set up
    ///  the best performance/memory consumption ratio for a perticular environment or requirements.
    ///<remarks>A Binary Large Object (BLOB) is a binary data stored as a single entity - i.e. BLOB can
    ///  be an audio, video or presentation itself.</remarks>
    ///</summary>
    property BlobManagementOptions: DNIBlobManagementOptions read get_BlobManagementOptions write set_BlobManagementOptions;
    ///<summary>
    ///  Specifies sources for external fonts to be used by the presentation.
    ///  These fonts are available to the presentation throughout its lifetime and are not shared with other presentations
    ///</summary>
    property DocumentLevelFontSources: DNIFontSources read get_DocumentLevelFontSources write set_DocumentLevelFontSources;
    ///<summary>
    ///  The token to monitor for interruption requests.
    ///<remarks>
    ///  This token manages the whole <see cref="T:Aspose.Slides.IPresentation" />
    ///  instance lifetime. Any long-running operation, such as loading
    ///  or saving of presentation, will be interrupted via calling of the <see cref="M:Aspose.Slides.InterruptionTokenSource.Interrupt" />
    ///  method of
    ///  the <see cref="T:Aspose.Slides.InterruptionTokenSource" />
    ///  .
    ///</remarks>
    ///</summary>
    property InterruptionToken: DNIInterruptionToken read get_InterruptionToken write set_InterruptionToken;
    ///<summary>
    ///  Returns or sets callback interface which manages external resources loading.
    ///  Read/write <see cref="T:Aspose.Slides.IResourceLoadingCallback" />
    ///  .
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Gets options for spreadsheets. For example, these options affect calculating formulas for charts.
    ///</summary>
    property SpreadsheetOptions: DNISpreadsheetOptions read get_SpreadsheetOptions write set_SpreadsheetOptions;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterSlideCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{130F5F0C-85BC-5DB3-87AD-6CC1D16DAFB3}']
  end;

  ///<summary>
  ///  Represents a collection of master slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.MasterSlideCollection')]
  DNMasterSlideCollection = interface(DDN.mscorlib.DNObject)
  ['{3D617D74-CA33-3DFF-9C61-5407A8BC2320}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if the master to remove is used in presentation (its HasDependingSlides property is true).
    ///</exception><remarks>
    ///  To avoid throwing of the PptxEditException check master's HasDependingSlides property before.
    ///</remarks>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes unused master slides.
    ///</summary>
    ///  <param name="ignorePreserveField">Determines, whether this method should remove unused master even if its <see cref="P:Aspose.Slides.MasterSlide.Preserve" />
    ///  property is set to true.</param>
    procedure RemoveUnused(ignorePreserveField: Boolean);
    ///<summary>
    ///  Adds a copy of a specified master slide to the end of the collection.
    ///  Linked layout slides will be copied too.
    ///</summary>
    ///  <param name="sourceMaster">Slide to clone.</param>
    ///<returns>Added slide.</returns>
    function AddClone(sourceMaster: DNIMasterSlide): DNIMasterSlide;
    ///<summary>
    ///  Inserts a copy of a specified master slide to specified position of the collection.
    ///  Linked layout slides will be copied too.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceMaster">Slide to clone.</param>
    ///<returns>Inserted master slide.</returns>
    function InsertClone(index: Int32; sourceMaster: DNIMasterSlide): DNIMasterSlide;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIMasterSlide>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMasterSlideCollection = class(TDNGenericImport<DNMasterSlideCollectionClass, DNMasterSlideCollection>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math accent
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathAccentFactory')]
  DNIMathAccentFactory = interface(DDN.mscorlib.DNObject)
  ['{69343859-FDD8-4CE4-8BEA-5BC61819D5AF}']
  { methods } 

    ///<summary>
    ///  Creates a math accent applying to a specified math element with the default accent character value
    ///</summary>
    ///  <param name="element">math element to apply accent</param>
    ///<returns>new math accent</returns>
    function CreateMathAccent(element: DNIMathElement): DNIMathAccent; overload;
    ///<summary>
    ///  Creates a math accent applying to a specified math element
    ///</summary>
    ///  <param name="element">math element to apply accent</param>
    ///  <param name="accentCharacter">accent character</param>
    ///<returns>new math accent</returns>
    function CreateMathAccent(element: DNIMathElement; accentCharacter: Char): DNIMathAccent; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math array
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathArrayFactory')]
  DNIMathArrayFactory = interface(DDN.mscorlib.DNObject)
  ['{E6B7D316-E822-4B9A-B077-704FC89D44CB}']
  { methods } 

    ///<summary>
    ///  Creates a math array and places the specified element in it
    ///</summary>
    ///  <param name="element">math element to place in array</param>
    ///<returns>new math array</returns>
    function CreateMathArray(element: DNIMathElement): DNIMathArray; overload;
    ///<summary>
    ///  Creates a math array and places specified elements in it
    ///</summary>
    ///  <param name="elements">math elements to place in array</param>
    ///<returns>new math array</returns>
    function CreateMathArray(elements: DNIMathElementCollection): DNIMathArray; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math bar
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathBarFactory')]
  DNIMathBarFactory = interface(DDN.mscorlib.DNObject)
  ['{86541BF1-7DAC-4651-B994-6E340CC794F7}']
  { methods } 

    ///<summary>
    ///  Create a math bar by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply bar</param>
    ///<returns>new math bar element</returns>
    function CreateMathBar(element: DNIMathElement): DNIMathBar; overload;
    ///<summary>
    ///  Create a math bar by applying to the element
    ///</summary>
    ///  <param name="element">Math element to apply bar</param>
    ///  <param name="position">Position of the bar</param>
    ///<returns>new math bar element</returns>
    function CreateMathBar(element: DNIMathElement; position: DNMathTopBotPositions): DNIMathBar; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math block
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathBlockFactory')]
  DNIMathBlockFactory = interface(DDN.mscorlib.DNObject)
  ['{A6CB223E-0447-494F-841C-50B110B73ECB}']
  { methods } 

    ///<summary>
    ///  Create a math block
    ///</summary>
    ///<returns>new math block</returns>
    function CreateMathBlock: DNIMathBlock; overload;
    ///<summary>
    ///  Create a math block and place the element in it
    ///</summary>
    ///  <param name="mathElement">A math element</param>
    ///<returns>new math block</returns>
    function CreateMathBlock(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Create a math block and place elements in it
    ///</summary>
    ///  <param name="mathElements">math elements</param>
    ///<returns>new math block</returns>
    function CreateMathBlock(mathElements: DNIMathElementCollection): DNIMathBlock; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math border box
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathBorderBoxFactory')]
  DNIMathBorderBoxFactory = interface(DDN.mscorlib.DNObject)
  ['{0EA8A174-D1F8-4B9D-A7D5-D2C98691D4E2}']
  { methods } 

    ///<summary>
    ///  Create a math border box by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply border box</param>
    ///<returns>new border box element</returns>
    function CreateMathBorderBox(element: DNIMathElement): DNIMathBorderBox; overload;
    ///<summary>
    ///  Create a math border box by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply border box</param>
    ///  <param name="hideTop">Hide Top Edge</param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>new border box element</returns>
    function CreateMathBorderBox(element: DNIMathElement; hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math box
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathBoxFactory')]
  DNIMathBoxFactory = interface(DDN.mscorlib.DNObject)
  ['{129988B0-5BF7-41DB-8C41-1216AA794968}']
  { methods } 

    ///<summary>
    ///  Create a math box by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply box</param>
    ///<returns>new box element</returns>
    function CreateMathBox(element: DNIMathElement): DNIMathBox;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math delimiter
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathDelimiterFactory')]
  DNIMathDelimiterFactory = interface(DDN.mscorlib.DNObject)
  ['{91BFC1A6-7AAD-4EE6-877D-001CD86C39D4}']
  { methods } 

    ///<summary>
    ///  Create a math delimiter by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply delimiter</param>
    ///<returns>new math delimiter</returns>
    function CreateMathDelimiter(element: DNIMathElement): DNIMathDelimiter; overload;
    ///<summary>
    ///  Create a math delimiter by applying to the element
    ///</summary>
    ///  <param name="mathElements">math elements to apply delimiter</param>
    ///<returns>new math delimiter</returns>
    function CreateMathDelimiter(mathElements: DNIMathElementCollection): DNIMathDelimiter; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Base interface of any mathematical element:
  ///  fraction, mathmatical text, function, expression with multiple elements etc
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathElement element = new MathematicalText("x");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathElement')]
  DNIMathElement = interface(DDN.mscorlib.DNObject)
  ['{FB7CA76D-E61E-427A-A0CC-1B494F4D6C82}']
  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses this element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfOneArgument.ArcSin);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the accent function, consisting of a base and a combining diacritical mark
  ///  Example: 𝑎́
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathAccent accent = new MathematicalText("x").Accent('~');
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathAccent')]
  DNIMathAccent = interface(DNIMathElement)
  ['{6C8401F2-CEBB-462D-B54D-6C41636BC68E}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  The argument to which the accent was applied
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///  IMathElement base = accent.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Accent Character
    ///  The value should be within the range of (U+0300–U+036F) or(U+20D0–U+20EF)
    ///  Default value: Combining Circumflex Accent (U+0302)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///  char ch = accent.Character;
    ///</code></example>
    property Character: Char read get_Character write set_Character;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies a vertical array of equations or any mathematical objects
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathArray')]
  DNIMathArray = interface(DNIMathElement)
  ['{5D1FD859-D43F-4667-BBCC-69A28319620E}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MaximumDistribution: Boolean;
    procedure set_MaximumDistribution(value: Boolean);
    function get_ObjectDistribution: Boolean;
    procedure set_ObjectDistribution(value: Boolean);
    function get_RowSpacingRule: DNMathRowSpacingRule;
    procedure set_RowSpacingRule(value: DNMathRowSpacingRule);
    function get_RowSpacing: UInt32;
    procedure set_RowSpacing(value: UInt32);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  The set of items of the array
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.Arguments.Add(new MathematicalText("item2"));
    ///</code></example>
    property Arguments: DNIMathElementCollection read get_Arguments;
    ///<summary>
    ///  Specifies alignment of the array relative to surrounding text
    ///  Text outside of the array can be aligned with the bottom, top, or center of a array object.
    ///  Default value: Center
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.BaseJustification = MathVerticalAlignment.Top;
    ///</code></example>
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    ///<summary>
    ///  Maximum Distribution
    ///  When true, the array is spaced to the maximum width of the containing element(page, column, cell, etc.).
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.MaximumDistribution = true;
    ///</code></example>
    property MaximumDistribution: Boolean read get_MaximumDistribution write set_MaximumDistribution;
    ///<summary>
    ///  Object Distribution
    ///  When true, the contents of the array are spaced to the maximum width of the array object.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.ObjectDistribution = true;
    ///</code></example>
    property ObjectDistribution: Boolean read get_ObjectDistribution write set_ObjectDistribution;
    ///<summary>
    ///  The type of vertical spacing between array elements
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.RowSpacingRule = MathRowSpacingRule.OneAndAHalfLineGap;
    ///</code></example>
    property RowSpacingRule: DNMathRowSpacingRule read get_RowSpacingRule write set_RowSpacingRule;
    ///<summary>
    ///  Spacing between rows of an array
    ///  It is used only when RowSpacingRule is set to 3 Exactly in which case the unit of measure is points
    ///  or Multiple in which case the unit of measure is half-lines.
    ///  Default: 0
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.RowSpacingRule = MathRowSpacingRule.Exactly;
    ///  mathArray.RowSpacing = 10;
    ///</code></example>
    property RowSpacing: UInt32 read get_RowSpacing write set_RowSpacing;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the bar function, consisting of a base argument and an overbar or underbar
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathBar mathBar = new MathBar(new MathematicalText("x"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathBar')]
  DNIMathBar = interface(DNIMathElement)
  ['{880DF6F7-7DD4-44ED-9FF5-D941F9868DDB}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar mathBar = new MathBar(new MathematicalText("x"));
    ///  IMathElement base = mathBar.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Position of the bar line.
    ///  Default: Top
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar mathBar = new MathBar(new MathematicalText("x"));
    ///  mathBar.Position = MathTopBotPositions.Bottom;
    ///</code></example>
    property Position: DNMathTopBotPositions read get_Position write set_Position;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Draws a rectangular or some other border around the IMathElement.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathBorderBox')]
  DNIMathBorderBox = interface(DNIMathElement)
  ['{77C1951D-BF32-4EBD-A3AE-BC54FA45F7D9}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_HideTop: Boolean;
    procedure set_HideTop(value: Boolean);
    function get_HideBottom: Boolean;
    procedure set_HideBottom(value: Boolean);
    function get_HideLeft: Boolean;
    procedure set_HideLeft(value: Boolean);
    function get_HideRight: Boolean;
    procedure set_HideRight(value: Boolean);
    function get_StrikethroughHorizontal: Boolean;
    procedure set_StrikethroughHorizontal(value: Boolean);
    function get_StrikethroughVertical: Boolean;
    procedure set_StrikethroughVertical(value: Boolean);
    function get_StrikethroughBottomLeftToTopRight: Boolean;
    procedure set_StrikethroughBottomLeftToTopRight(value: Boolean);
    function get_StrikethroughTopLeftToBottomRight: Boolean;
    procedure set_StrikethroughTopLeftToBottomRight(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  IMathElement base = borderBox.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Hide Top Edge (default is false) - specifies the hidden or shown state of the top edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.HideTop = true;
    ///</code></example>
    property HideTop: Boolean read get_HideTop write set_HideTop;
    ///<summary>
    ///  Hide Bottom Edge (default is false) - specifies the hidden or shown state of the bottom edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.HideBottom = true;
    ///</code></example>
    property HideBottom: Boolean read get_HideBottom write set_HideBottom;
    ///<summary>
    ///  Hide Left Edge (default is false) - specifies the hidden or shown state of the left edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.HideLeft = true;
    ///</code></example>
    property HideLeft: Boolean read get_HideLeft write set_HideLeft;
    ///<summary>
    ///  Hide Right Edge (default is false) - specifies the hidden or shown state of the right edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.HideRight = true;
    ///</code></example>
    property HideRight: Boolean read get_HideRight write set_HideRight;
    ///<summary>
    ///  Strikethrough Horizontal (default is false) - specifies the hidden or shown state of a strikethrough horizontal line.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.StrikethroughHorizontal = true;
    ///</code></example>
    property StrikethroughHorizontal: Boolean read get_StrikethroughHorizontal write set_StrikethroughHorizontal;
    ///<summary>
    ///  Strikethrough Vertical (default is false) - specifies the hidden or shown state of a strikethrough vertical line.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.StrikethroughVertical = true;
    ///</code></example>
    property StrikethroughVertical: Boolean read get_StrikethroughVertical write set_StrikethroughVertical;
    ///<summary>
    ///  Strikethrough Bottom-Left to Top-Right (default is false).
    ///  Specifies the hidden or shown state of a strikethrough diagonal line from the bottom-left corner to the top-right corner of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.StrikethroughBottomLeftToTopRight = true;
    ///</code></example>
    property StrikethroughBottomLeftToTopRight: Boolean read get_StrikethroughBottomLeftToTopRight write set_StrikethroughBottomLeftToTopRight;
    ///<summary>
    ///  Strikethrough Top-Left to Bottom-Right (default is false).
    ///  Specifies the hidden or shown state of a strikethrough diagonal line from the top-left corner to the bottom-right corner of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///  borderBox.StrikethroughTopLeftToBottomRight = true;
    ///</code></example>
    property StrikethroughTopLeftToBottomRight: Boolean read get_StrikethroughTopLeftToBottomRight write set_StrikethroughTopLeftToBottomRight;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the logical boxing (packaging) of mathematical element.
  ///  For example, a boxed object can serve as an operator emulator with or without an alignment point,
  ///  serve as a line break point, or be grouped such as not to allow line breaks within.
  ///  For example, the "==" operator should be boxed to prevent line breaks.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathBox box = new MathematicalText("==").ToBox();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathBox')]
  DNIMathBox = interface(DNIMathElement)
  ['{5CCE7B82-99C7-4C94-A252-66769496CF0D}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_OperatorEmulator: Boolean;
    procedure set_OperatorEmulator(value: Boolean);
    function get_NoBreak: Boolean;
    procedure set_NoBreak(value: Boolean);
    function get_Differential: Boolean;
    procedure set_Differential(value: Boolean);
    function get_AlignmentPoint: Boolean;
    procedure set_AlignmentPoint(value: Boolean);
    function get_ExplicitBreak: Byte;
    procedure set_ExplicitBreak(value: Byte);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("==").ToBox();
    ///  IMathElement base = box.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Operator Emulator.
    ///  When true, the box and its contents behave as a single operator and inherit the properties of an operator.
    ///  This means, for example, that the character can serve as a point for a line break and can be aligned to other operators.
    ///  Operator Emulators are often used when one or more glyphs combine to form an operator, such as '=='.
    ///  Default value: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("==").ToBox();
    ///  box.OperatorEmulator = true;
    ///</code></example>
    property OperatorEmulator: Boolean read get_OperatorEmulator write set_OperatorEmulator;
    ///<summary>
    ///  No break.
    ///  This property specifies the "unbreakable" property on the object box. When true, no line breaks can occur within the box.
    ///  This can be important for operator emulators that consist of more than one binary operator.
    ///  When this element is not specified, breaks can occur inside box.
    ///  Default: true
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("**********").ToBox();
    ///  box.NoBreak = false;
    ///</code></example>
    property NoBreak: Boolean read get_NoBreak write set_NoBreak;
    ///<summary>
    ///  Differential.
    ///  When true, the box acts as a differential (e.g., 𝑑𝑥 in an integrand), and receives the appropriate
    ///  horizontal spacing for the mathematical differential.
    ///  Default: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox differential = new MathematicalText("dx").ToBox();
    ///  differential.Differential = true;
    ///  IMathBlock baseArg = new MathematicalText("x").Join(differential);
    ///  IMathNaryOperator integral = baseArg.Integral(MathIntegralTypes.Simple, "0", "1");
    ///</code></example>
    property Differential: Boolean read get_Differential write set_Differential;
    ///<summary>
    ///  When true, this operator emulator serves as an alignment point; that is,
    ///  designated alignment points in other equations can be aligned with it.
    ///  Default: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("==").ToBox();
    ///  box.AlignmentPoint = true;
    ///</code></example>
    property AlignmentPoint: Boolean read get_AlignmentPoint write set_AlignmentPoint;
    ///<summary>
    ///  Explicit break specifies whether there is a line break at the start of the Box object,
    ///  such that the line wraps at the start of the box object.
    ///  Specifies the number of the operator on the previous line of mathematical text which shall
    ///  be used as the alignment point for the current line of mathematical text
    ///  possible values: 1..255
    ///  Default: 0 (no explicit break)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("==").ToBox();
    ///  box.ExplicitBreak = 1;
    ///</code></example>
    property ExplicitBreak: Byte read get_ExplicitBreak write set_ExplicitBreak;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the delimiter object, consisting of opening and closing characters (such as parentheses,
  ///  braces, brackets, and vertical bars), and one or more mathematical elements inside, separated by a specified character.
  ///  Examples: (𝑥2); [𝑥2|𝑦2]
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathElement element = new MathematicalText("x");
  ///  IMathDelimiter delimiter = element.Enclose();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathDelimiter')]
  DNIMathDelimiter = interface(DNIMathElement)
  ['{41577687-E7B8-454E-83F7-8DFFA14BC696}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BeginningCharacter: Char;
    procedure set_BeginningCharacter(value: Char);
    function get_SeparatorCharacter: Char;
    procedure set_SeparatorCharacter(value: Char);
    function get_EndingCharacter: Char;
    procedure set_EndingCharacter(value: Char);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_DelimiterShape: DNMathDelimiterShape;
    procedure set_DelimiterShape(value: DNMathDelimiterShape);
    function get_AsIMathElement: DNIMathElement;

  { methods } 

    ///<summary>
    ///  Delimits arguments using the specified delimiter character
    ///</summary>
    ///  <param name="separatorCharacter">delimiter character</param>
    ///<returns>This object after applying the delimiter character</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.Delimit('|');
    ///</code></example>
    function Delimit(separatorCharacter: Char): DNIMathDelimiter;

  { propertys } 

    ///<summary>
    ///  One or more mathematical elements separated by delimiter characters
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  IMathElementCollection arguments = delimiter.Arguments;
    ///</code></example>
    property Arguments: DNIMathElementCollection read get_Arguments;
    ///<summary>
    ///  Delimiter Beginning Character specifies the beginning, or opening, delimiter character.
    ///  Mathematical delimiters are enclosing characters such as parentheses, brackets, and braces.
    ///  The default value: '('.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.BeginningCharacter = '[';
    ///</code></example>
    property BeginningCharacter: Char read get_BeginningCharacter write set_BeginningCharacter;
    ///<summary>
    ///  Delimiter Separator Character specifies the character that separates arguments in the delimiter object.
    ///  The default: '|'.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.SeparatorCharacter = '$';
    ///</code></example>
    property SeparatorCharacter: Char read get_SeparatorCharacter write set_SeparatorCharacter;
    ///<summary>
    ///  Delimiter Ending Character specifies the ending, or closing, delimiter character.
    ///  Mathematical delimiters are enclosing characters such as parentheses, brackets, and braces.
    ///  The default: ')'.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.EndingCharacter = ']';
    ///</code></example>
    property EndingCharacter: Char read get_EndingCharacter write set_EndingCharacter;
    ///<summary>
    ///  Specifies the growth of BeginningCharacter, SeparatorCharacter, EndingCharacter
    ///  When true, the delimiters grows vertically to match its operand height.
    ///  The default value is true
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Divide("y").Enclose();
    ///  delimiter.GrowToMatchOperandHeight = false;
    ///</code></example>
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    ///<summary>
    ///  Specifies the shape of delimiters in the delimiter object.
    ///  When is MathDelimiterShape.Centered, delimiters are centered around the math axis of the mathematical text
    ///  and still be made to fit the entire height of their contents.
    ///  When is MathDelimiterShape.Match, their height and shape are altered to exactly match their contents.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Divide("y").Enclose();
    ///  delimiter.DelimiterShape = MathDelimiterShape.Match;
    ///</code></example>
    property DelimiterShape: DNMathDelimiterShape read get_DelimiterShape write set_DelimiterShape;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Mathematical text
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathematicalText mathText = new MathematicalText("x+y");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathematicalText')]
  DNIMathematicalText = interface(DNIMathElement)
  ['{9E19C0C0-1CF3-4995-9D78-08EF5E372FA1}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_Format: DNIPortionFormat;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Text value
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathematicalText mathText = new MathematicalText("x+y");
    ///  string textValue = mathText.Value;
    ///</code></example>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Text formatting properties
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathematicalText mathText = new MathematicalText("x+y");
    ///  mathText.Format.FontHeight = 28;
    ///</code></example>
    property Format: DNIPortionFormat read get_Format;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the fraction object, consisting of a numerator and denominator separated by a fraction bar.
  ///  The fraction bar can be horizontal or diagonal, depending on the fraction properties.
  ///  The fraction object is also used to represent the stack function, which places one element above another, with no fraction bar.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
  ///  IMathFraction mathFraction2 = new MathFraction(new MathematicalText("x"), new MathematicalText("y"), MathFractionTypes.Linear);
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathFraction')]
  DNIMathFraction = interface(DNIMathElement)
  ['{F4BC9B17-DB17-4B49-B703-5D936AC10ACA}']
  { getters & setters } 

    function get_FractionType: DNMathFractionTypes;
    procedure set_FractionType(value: DNMathFractionTypes);
    function get_Numerator: DNIMathElement;
    function get_Denominator: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Fraction type
    ///  Default: Bar
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
    ///  mathFraction.FractionType = MathFractionTypes.Linear;
    ///</code></example>
    property FractionType: DNMathFractionTypes read get_FractionType write set_FractionType;
    ///<summary>
    ///  Numerator
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
    ///  IMathElement numerator = mathFraction.Numerator;
    ///</code></example>
    property Numerator: DNIMathElement read get_Numerator;
    ///<summary>
    ///  Denominator
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
    ///  IMathElement denominator = mathFraction.Denominator;
    ///</code></example>
    property Denominator: DNIMathElement read get_Denominator;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies a function of an argument.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathFunction sinX = new MathematicalText("sin").Function("x");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathFunction')]
  DNIMathFunction = interface(DNIMathElement)
  ['{49C41C20-D962-4B15-AE5F-2BE303AF747C}']
  { getters & setters } 

    function get_Name: DNIMathElement;
    function get_Base: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Function name
    ///  For example, function names are sin and cos
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFunction func = new MathematicalText("sin").Function("x");
    ///  IMathElement funcName = func.Name;
    ///</code></example>
    property Name: DNIMathElement read get_Name;
    ///<summary>
    ///  Function Argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFunction func = new MathematicalText("sin").Function("x");
    ///  IMathElement base = func.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies a grouping symbol above or below an expression, usually to highlight the relationship between elements
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathGroupingCharacter')]
  DNIMathGroupingCharacter = interface(DNIMathElement)
  ['{A666E821-160B-4ABB-84A5-A979ECB307FA}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);
    function get_VerticalJustification: DNMathTopBotPositions;
    procedure set_VerticalJustification(value: DNMathTopBotPositions);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  IMathElement baseArg = groupingCharacter.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Grouping Character
    ///  Default value: U+23DF (BOTTOM CURLY BRACKET)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  groupingCharacter.Character = '\u23DD'; // Bottom Parenthesis
    ///</code></example>
    property Character: Char read get_Character write set_Character;
    ///<summary>
    ///  Position of grouping character.
    ///  Default: Bottom
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  groupingCharacter.Position = MathTopBotPositions.Top;
    ///</code></example>
    property Position: DNMathTopBotPositions read get_Position write set_Position;
    ///<summary>
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///  Default: Bottom for Position=Top, and Top for Position=Bottom
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  groupingCharacter.VerticalJustification = MathTopBotPositions.Top;
    ///</code></example>
    property VerticalJustification: DNMathTopBotPositions read get_VerticalJustification write set_VerticalJustification;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the Sub-Superscript object, which consists of a base
  ///  and a subscript and superscript placed to the left of the base.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathLeftSubSuperscriptElement leftSubsuperscript = new MathematicalText("N").SetSubSuperscriptOnTheLeft("i", "j");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathLeftSubSuperscriptElement')]
  DNIMathLeftSubSuperscriptElement = interface(DNIMathElement)
  ['{EC46E875-9D31-4850-AE0A-46742E000C0A}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement baseElem = leftSubSuperscript.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Subscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sub = leftSubSuperscript.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Superscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sup = leftSubSuperscript.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the Limit object, consisting of text on the baseline and reduced-size text immediately above or below it.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathLimit')]
  DNIMathLimit = interface(DNIMathElement)
  ['{FD69407C-FC5A-4822-8505-98216847CF0F}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Limit: DNIMathElement;
    function get_UpperLimit: Boolean;
    procedure set_UpperLimit(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///  IMathElement baseArg = limitElement.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Limit argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///  IMathElement limitArg = limitElement.Limit;
    ///</code></example>
    property Limit: DNIMathElement read get_Limit;
    ///<summary>
    ///  Specifies upper or lower limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///  limitElement.UpperLimit = false;
    ///</code></example>
    property UpperLimit: Boolean read get_UpperLimit write set_UpperLimit;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the Matrix object, consisting of child elements laid out in one or more rows and columns.
  ///  It is important to note that matrices do not have built in delimiters.
  ///  To place the matrix in the brackets you should use the delimiter object (IMathDelimiter).
  ///  Null arguments can be used to create gaps in matrices.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathMatrix matrix = new MathMatrix(2, 3);
  ///  matrix[0, 0] = new MathematicalText("item.1.1");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathMatrix')]
  DNIMathMatrix = interface(DNIMathElement)
  ['{9F58CA43-6F69-48F2-ACE9-AFE2C9D62322}']
  { getters & setters } 

    function get_Item(row: Int32; column: Int32): DNIMathElement;
    procedure set_Item(row: Int32; column: Int32; value: DNIMathElement);
    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_HidePlaceholders: Boolean;
    procedure set_HidePlaceholders(value: Boolean);
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MinColumnWidth: UInt32;
    procedure set_MinColumnWidth(value: UInt32);
    function get_ColumnGapRule: DNMathSpacingRules;
    procedure set_ColumnGapRule(value: DNMathSpacingRules);
    function get_ColumnGap: UInt32;
    procedure set_ColumnGap(value: UInt32);
    function get_RowGapRule: DNMathSpacingRules;
    procedure set_RowGapRule(value: DNMathSpacingRules);
    function get_RowGap: UInt32;
    procedure set_RowGap(value: UInt32);
    function get_AsIMathElement: DNIMathElement;

  { methods } 

    ///<summary>
    ///  Get the horizontal alignment of the specified column
    ///</summary>
    ///  <param name="columnIndex">Zero-based column index</param>
    ///<returns>Horizontal Alignment of specified column</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  MathHorizontalAlignment alignment = matrix.GetColumnAlignment(0);
    ///</code></example>
    function GetColumnAlignment(columnIndex: Int32): DNMathHorizontalAlignment;
    ///<summary>
    ///  Set the horizontal alignment of the specified column
    ///</summary>
    ///  <param name="columnIndex">Zero-based column index</param>
    ///  <param name="val">New value of horizontal alignment of specified column</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.SetColumnAlignment(0, MathHorizontalAlignment.Left);
    ///</code></example>
    procedure SetColumnAlignment(columnIndex: Int32; val: DNMathHorizontalAlignment);
    ///<summary>
    ///  Set the horizontal alignment of the specified columns
    ///</summary>
    ///  <param name="columnIndex">Zero-based index of the first column to set alignment</param>
    ///  <param name="columnsCount">The number of columns to specify the alignment</param>
    ///  <param name="val">New value of horizontal alignment of specified column</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.SetColumnAlignment(0, 3, MathHorizontalAlignment.Left);
    ///</code></example>
    procedure SetColumnsAlignment(columnIndex: Int32; columnsCount: UInt32; val: DNMathHorizontalAlignment);
    ///<summary>
    ///  Insert a new row before the specified one
    ///  Initially all elements in the new row are null.
    ///</summary>
    ///  <param name="rowIndex">Index of the row before which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertRowBefore(1);
    ///</code></example>
    procedure InsertRowBefore(rowIndex: Int32);
    ///<summary>
    ///  Insert a new row after the specified one
    ///  Initially all elements in the new row are null.
    ///</summary>
    ///  <param name="rowIndex">Index of the row after which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertRowAfter(1);
    ///</code></example>
    procedure InsertRowAfter(rowIndex: Int32);
    ///<summary>
    ///  Deletes the specified row
    ///</summary>
    ///  <param name="rowIndex">The zero-based index of the row to delete.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.DeleteRow(0);
    ///</code></example>
    procedure DeleteRow(rowIndex: Int32);
    ///<summary>
    ///  Insert a new column before the specified one
    ///  Initially all elements in the new column are null.
    ///</summary>
    ///  <param name="columnIndex">Index of the column before which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertColumnBefore(0);
    ///</code></example>
    procedure InsertColumnBefore(columnIndex: Int32);
    ///<summary>
    ///  Insert a new column after the specified one
    ///  Initially all elements in the new column are null.
    ///</summary>
    ///  <param name="columnIndex">Index of the column after which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertColumnAfter(0);
    ///</code></example>
    procedure InsertColumnAfter(columnIndex: Int32);
    ///<summary>
    ///  Deletes the specified column
    ///</summary>
    ///  <param name="columnIndex">The zero-based index of the column to delete.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.DeleteColumn(0);
    ///</code></example>
    procedure DeleteColumn(columnIndex: Int32);

  { propertys } 

    property Item[row: Int32; column: Int32]: DNIMathElement read get_Item write set_Item; default;
    ///<summary>
    ///  Number of rows in the matrix
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  int rowCount = matrix.RowCount;
    ///</code></example>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  Number of columns in the matrix
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  int columnCount = matrix.ColumnCount;
    ///</code></example>
    property ColumnCount: Int32 read get_ColumnCount;
    ///<summary>
    ///  Hide the placeholders for empty matrix elements
    ///  Default: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.HidePlaceholders = true;
    ///</code></example>
    property HidePlaceholders: Boolean read get_HidePlaceholders write set_HidePlaceholders;
    ///<summary>
    ///  Specifies the vertical justification respect to surrounding text.
    ///  Possible values are top, bottom, and center.
    ///  Default: Center
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.BaseJustification = MathVerticalAlignment.Center;
    ///</code></example>
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    ///<summary>
    ///  Minimum column width in twips (1/20th of a point)
    ///  The gap spacing (also referred to as “Column Gap” or “Gap Width”) is added to
    ///  the MinColumnWidth to determine the total Matrix Column Spacing
    ///  (distance between the same edges of different columns).
    ///  Default: 0.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.MinColumnWidth = 20;
    ///</code></example>
    property MinColumnWidth: UInt32 read get_MinColumnWidth write set_MinColumnWidth;
    ///<summary>
    ///  The type of horizontal spacing between columns of a matrix;
    ///  Horizontal spacing units can be ems or points (stored as twips).
    ///  Default: SingleSpacingGap (0)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.ColumnGapRule = MathSpacingRules.OneAndHalfSpacingGap;
    ///</code></example>
    property ColumnGapRule: DNMathSpacingRules read get_ColumnGapRule write set_ColumnGapRule;
    ///<summary>
    ///  The value of horizontal spacing between columns of a matrix;
    ///  If the ColumnGapRule is set to 3 ("Exactly"), then the unit is interpreted as twips (1/20th of a point)
    ///  If the ColumnGapRule is set to 4 ("Multiple"), then the unit is interpreted as number of 0.5 em increments.
    ///  In other cases ignored.
    ///  Default: 0
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.ColumnGapRule = MathSpacingRules.Exactly;
    ///  matrix.ColumnGap = 20;
    ///</code></example>
    property ColumnGap: UInt32 read get_ColumnGap write set_ColumnGap;
    ///<summary>
    ///  The type of vertical spacing between rows of a matrix;
    ///  Vertical spacing units can be lines or points (stored as twips).
    ///  Default: SingleSpacingGap (0)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.RowGapRule = MathSpacingRules.OneAndHalfSpacingGap;
    ///</code></example>
    property RowGapRule: DNMathSpacingRules read get_RowGapRule write set_RowGapRule;
    ///<summary>
    ///  The value of vertical spacing between rows of a matrix;
    ///  If the RowGapRule is set to 3 ("Exactly"), then the unit is interpreted as twips (1/20th of a point)
    ///  If the RowGapRule is set to 4 ("Multiple"), then the unit is interpreted as half-lines.
    ///  Default: 0
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.RowGapRule = MathSpacingRules.Exactly;
    ///  matrix.RowGap = 20;
    ///</code></example>
    property RowGap: UInt32 read get_RowGap write set_RowGap;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies an N-ary mathematical object, such as Summation and Integral.
  ///  It consists of an operator, a base (or operand), and optional upper and lower limits.
  ///  Examples of N-ary operators are: Summation, Union, Intersection, Integral
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathNaryOperator')]
  DNIMathNaryOperator = interface(DNIMathElement)
  ['{A3488124-0C15-41E3-9702-562BE569A91A}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;
    function get_AsIMathNaryOperatorProperties: DNIMathNaryOperatorProperties;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  IMathElement baseArg = naryOperator.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Specifies a subscript argument that, for example, in the case of an integral, sets the lower limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  IMathElement subscriptArg = naryOperator.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Specifies a supersript argument that, for example, in the case of an integral, sets the upper limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  IMathElement superscriptArg = naryOperator.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
    ///<summary>
    ///  Allows to get base IMathNaryOperatorProperties interface
    ///<see cref="T:Aspose.Slides.MathText.IMathNaryOperatorProperties" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathNaryOperatorProperties: DNIMathNaryOperatorProperties read get_AsIMathNaryOperatorProperties;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the radical function, consisting of a base, and an optional degree.
  ///  Example of radical object is √𝑥.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathRadical radical = new MathematicalText("x").Radical("3"); // cube root
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathRadical')]
  DNIMathRadical = interface(DNIMathElement)
  ['{3A89A730-0F3F-48C6-9EC6-E028A2CBA027}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Degree: DNIMathElement;
    function get_HideDegree: Boolean;
    procedure set_HideDegree(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathRadical radical = new MathematicalText("x").Radical("3"); // cube root
    ///  IMathElement baseElem = radical.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Degree argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathRadical radical = new MathematicalText("x").Radical("3"); // cube root
    ///  IMathElement degreeElem = radical.Degree;
    ///</code></example>
    property Degree: DNIMathElement read get_Degree;
    ///<summary>
    ///  Hide degree
    ///  When is true, the degree is not shown, as in √𝑥
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathRadical radical = new MathematicalText("x").Radical("3"); // cube root
    ///  radical.HideDegree = true;
    ///</code></example>
    property HideDegree: Boolean read get_HideDegree write set_HideDegree;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the Sub-Superscript object, which consists of a base
  ///  and a subscript and superscript placed to the right of the base.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathRightSubSuperscriptElement subsuperscript = new MathematicalText("N").SetSubSuperscriptOnTheRight("i", "j");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathRightSubSuperscriptElement')]
  DNIMathRightSubSuperscriptElement = interface(DNIMathElement)
  ['{94B0AD4B-535F-4D51-9429-665AE6F5DE2B}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AlignScripts: Boolean;
    procedure set_AlignScripts(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement baseElem = subsuperscript.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Subscript argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sub = subsuperscript.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Superscript argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sup = subsuperscript.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Specifies the alignment of subscript/superscript.
    ///  When true, subscript and superscript are aligned horizontally to each other.
    ///  When false, they are kerned to the shape of the base.
    ///  Default value is false.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  subsuperscript.AlignScripts = true;
    ///</code></example>
    property AlignScripts: Boolean read get_AlignScripts write set_AlignScripts;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the subscript object, which consists of a base
  ///  and a reduced-size subscript placed below and to the right.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathSubscriptElement subscriptElement = new MathematicalText("N").SetSubscript("i");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathSubscriptElement')]
  DNIMathSubscriptElement = interface(DNIMathElement)
  ['{18BCBDBA-BFB4-42A4-A423-447E0FEE98A0}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  MathSubscriptElement subscriptElement = new MathSubscriptElement(baseElement, subscript);
    ///  IMathElement baseElem = subscriptElement.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Subscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  MathSubscriptElement subscriptElement = new MathSubscriptElement(baseElement, subscript);
    ///  IMathElement sub = subscriptElement.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies the superscript object, which consists of a base
  ///  and a reduced-size superscript placed above and to the right
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathSuperscriptElement superscriptElement = new MathematicalText("N").SetSuperscript("i");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathSuperscriptElement')]
  DNIMathSuperscriptElement = interface(DNIMathElement)
  ['{04862968-19ED-447C-A1BC-13883D3B6870}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement superscript = new MathematicalText("i");
    ///  IMathSuperscriptElement superscriptElement = new MathSuperscriptElement(baseElement, subscript);
    ///  IMathElement baseElem = superscriptElement.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Superscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement superscript = new MathematicalText("i");
    ///  IMathSuperscriptElement superscriptElement = new MathSuperscriptElement(baseElement, superscript);
    ///  IMathElement super = superscriptElement.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a MathematicalText element
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathematicalTextFactory')]
  DNIMathematicalTextFactory = interface(DDN.mscorlib.DNObject)
  ['{8B6DA85E-0BC1-41C0-A4B2-810A6E1432B8}']
  { methods } 

    ///<summary>
    ///  Create empty mathematical text element
    ///</summary>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText: DNIMathematicalText; overload;
    ///<summary>
    ///  Create mathematical text element with the specified value
    ///</summary>
    ///  <param name="mathSymbol">single symbol to use as text value</param>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText(mathSymbol: Char): DNIMathematicalText; overload;
    ///<summary>
    ///  Create empty mathematical text element with the specified value
    ///</summary>
    ///  <param name="mathText">text value</param>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText(mathText: string): DNIMathematicalText; overload;
    ///<summary>
    ///  Create empty mathematical text element with the specified value and formatting properties
    ///</summary>
    ///  <param name="mathText">text value</param>
    ///  <param name="portionFormat">text format settings</param>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText(mathText: string; portionFormat: DNIPortionFormat): DNIMathematicalText; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math fraction
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathFractionFactory')]
  DNIMathFractionFactory = interface(DDN.mscorlib.DNObject)
  ['{56C5787F-7AF8-4ED8-9AD6-13A7EC763A8A}']
  { methods } 

    ///<summary>
    ///  Creates a math fraction
    ///</summary>
    ///  <param name="numerator">Numerator</param>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type</param>
    ///<returns>New math fraction <see cref="T:Aspose.Slides.MathText.IMathFraction" />
    ///</returns>
    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a math fraction
    ///</summary>
    ///  <param name="numerator">Numerator</param>
    ///  <param name="denominator">Denominator</param>
    ///<returns>New math fraction <see cref="T:Aspose.Slides.MathText.IMathFraction" />
    ///</returns>
    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement): DNIMathFraction; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math function
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathFunctionFactory')]
  DNIMathFunctionFactory = interface(DDN.mscorlib.DNObject)
  ['{2BAC9EFF-11D9-4203-B9C1-9EE54F36DC5E}']
  { methods } 

    ///<summary>
    ///  Creates math function
    ///</summary>
    ///  <param name="funcName">Element used as a function name</param>
    ///  <param name="baseArgument">Element used as a function argument</param>
    ///<returns>new math function</returns>
    function CreateMathFunction(funcName: DNIMathElement; baseArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Creates math function
    ///</summary>
    ///  <param name="funcName">Function name</param>
    ///  <param name="baseArgument">Element used as a function argument</param>
    ///<returns>new math function</returns>
    function CreateMathFunction(funcName: string; baseArgument: DNIMathElement): DNIMathFunction; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math grouping character
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathGroupingCharacterFactory')]
  DNIMathGroupingCharacterFactory = interface(DDN.mscorlib.DNObject)
  ['{E985AC6A-6BA7-45DA-A210-693C5CC01DA3}']
  { methods } 

    ///<summary>
    ///  Creates a math grouping character
    ///</summary>
    ///  <param name="element">math element to apply grouping character</param>
    ///  <param name="character">grouping character</param>
    ///  <param name="position">position of grouping character</param>
    ///  <param name="verticalJustification">vertical justification</param>
    ///<returns>new grouping character element</returns>
    function CreateMathGroupingCharacter(element: DNIMathElement; character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Creates a math grouping character
    ///</summary>
    ///  <param name="element">math element to apply grouping character</param>
    ///<returns>new grouping character element</returns>
    function CreateMathGroupingCharacter(element: DNIMathElement): DNIMathGroupingCharacter; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create IMathLeftSubSuperscriptElement
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathLeftSubSuperscriptElementFactory')]
  DNIMathLeftSubSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{0C46099E-4FFA-4910-AC80-909CA4F108C8}']
  { methods } 

    ///<summary>
    ///  Creates IMathLeftSubSuperscriptElement
    ///</summary>
    ///  <param name="baseArg">Base argument to apply indexes</param>
    ///  <param name="subScript">lower left index</param>
    ///  <param name="superScript">upper left index</param>
    ///<returns>new IMathLeftSubSuperscriptElement</returns>
    function CreateMathLeftSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathLeftSubSuperscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create IMathLimit
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathLimitFactory')]
  DNIMathLimitFactory = interface(DDN.mscorlib.DNObject)
  ['{4C596335-9CD8-4386-BEDA-FA29108B0A1E}']
  { methods } 

    ///<summary>
    ///  Creates IMathLimit
    ///</summary>
    ///  <param name="baseArg">Base argument to apply the limit</param>
    ///  <param name="limit">Limit element</param>
    ///  <param name="upperLimit">Sets the placement of the limit on top</param>
    ///<returns>new math limit</returns>
    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement; upperLimit: Boolean): DNIMathLimit; overload;
    ///<summary>
    ///  Creates IMathLimit with limit at the bottom
    ///</summary>
    ///  <param name="baseArg">Base argument to apply the limit</param>
    ///  <param name="limit">Limit element</param>
    ///<returns>new math limit</returns>
    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement): DNIMathLimit; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math matrix
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathMatrixFactory')]
  DNIMathMatrixFactory = interface(DDN.mscorlib.DNObject)
  ['{1E6292DE-35AE-4279-9B7F-D146A9B19B26}']
  { methods } 

    ///<summary>
    ///  Creates a math matrix
    ///</summary>
    ///  <param name="rowCount">row count</param>
    ///  <param name="columnCount">column count</param>
    ///<returns>new math matrix</returns>
    function CreateMathMatrix(rowCount: Int32; columnCount: Int32): DNIMathMatrix;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create IMathNaryOperator
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathNaryOperatorFactory')]
  DNIMathNaryOperatorFactory = interface(DDN.mscorlib.DNObject)
  ['{08D63252-2F0F-4B6F-A1C1-807E1D260282}']
  { methods } 

    ///<summary>
    ///  Creates IMathNaryOperator
    ///</summary>
    ///  <param name="operatorSymbol">The operator sign</param>
    ///  <param name="baseArgument">Base argument to apply operator</param>
    ///  <param name="lowerLimit">Lower limit</param>
    ///  <param name="upperLimit">Upper limit </param>
    ///<returns>new IMathNaryOperator</returns>
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates IMathNaryOperator
    ///</summary>
    ///  <param name="operatorSymbol">The operator sign</param>
    ///  <param name="baseArgument">Base argument to apply operator</param>
    ///  <param name="lowerLimit">Lower limit</param>
    ///<returns>new IMathNaryOperator</returns>
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates IMathNaryOperator
    ///</summary>
    ///  <param name="operatorSymbol">The operator sign</param>
    ///  <param name="baseArgument">Base argument to apply operator</param>
    ///<returns>new IMathNaryOperator</returns>
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement): DNIMathNaryOperator; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies properties of IMathNaryOperator
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.IMathNaryOperatorProperties')]
  DNIMathNaryOperatorProperties = interface(DDN.mscorlib.DNObject)
  ['{20CD9F04-67EC-4FAE-8BDD-5DEFFB444930}']
  { getters & setters } 

    function get_Operator: Char;
    procedure set_Operator(value: Char);
    function get_LimitLocation: DNMathLimitLocations;
    procedure set_LimitLocation(value: DNMathLimitLocations);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_HideSubscript: Boolean;
    procedure set_HideSubscript(value: Boolean);
    function get_HideSuperscript: Boolean;
    procedure set_HideSuperscript(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Nary Operator Character
    ///  For example: '∑', '∫'
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  char operatorSymbol = naryOperator.Operator;
    ///</code></example>
    property Operator: Char read get_Operator write set_Operator;
    ///<summary>
    ///  The location of limits (subscript and superscript)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.LimitLocation = MathLimitLocations.SubscriptSuperscript;
    ///</code></example>
    property LimitLocation: DNMathLimitLocations read get_LimitLocation write set_LimitLocation;
    ///<summary>
    ///  Operator Character grows vertically to match its operand height
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.GrowToMatchOperandHeight = true;
    ///</code></example>
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    ///<summary>
    ///  Hide Subscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.HideSubscript = true;
    ///</code></example>
    property HideSubscript: Boolean read get_HideSubscript write set_HideSubscript;
    ///<summary>
    ///  Hide Superscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.HideSuperscript = true;
    ///</code></example>
    property HideSuperscript: Boolean read get_HideSuperscript write set_HideSuperscript;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create a math paragraph
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathParagraphFactory')]
  DNIMathParagraphFactory = interface(DDN.mscorlib.DNObject)
  ['{994DD3A2-7BD8-41C9-8D8C-DD81251B0BBC}']
  { methods } 

    ///<summary>
    ///  Create empty math paragraph
    ///</summary>
    ///<returns>new math paragraph</returns>
    function CreateMathParagraph: DNIMathParagraph; overload;
    ///<summary>
    ///  Creates a math paragraph and places the specified math block in it
    ///</summary>
    ///  <param name="mathBlock">math block to place in the paragraph</param>
    ///<returns>new math paragraph</returns>
    function CreateMathParagraph(mathBlock: DNIMathBlock): DNIMathParagraph; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Represents a portion with mathematical context inside.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  using (Presentation pres = new Presentation())
  ///  {
  ///  IAutoShape shape = pres.Slides[0].Shapes.AddMathShape(0, 0, 300, 50);
  ///  IParagraph paragraph = shape.TextFrame.Paragraphs[0];
  ///  MathPortion mathPortion = new MathPortion();
  ///  paragraph.Portions.Add(mathPortion);
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathPortion')]
  DNIMathPortion = interface(DDN.mscorlib.DNObject)
  ['{4500E1D4-83E2-4E9A-8617-B44D19902D79}']
  { getters & setters } 

    function get_MathParagraph: DNIMathParagraph;

  { propertys } 

    ///<summary>
    ///  Math paragraph
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes.AddMathShape(0, 0, 300, 50);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  mathParagraph.Add(new MathBlock(new MathematicalText("x+y")));
    ///  }
    ///</code></example>
    property MathParagraph: DNIMathParagraph read get_MathParagraph;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create math radical
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathRadicalFactory')]
  DNIMathRadicalFactory = interface(DDN.mscorlib.DNObject)
  ['{E017F538-58A9-4049-A21E-07EFB3EB627B}']
  { methods } 

    ///<summary>
    ///  Creates a math radical
    ///</summary>
    ///  <param name="baseArgument">Base argument to apply radical</param>
    ///  <param name="degreeArgument">Degree value</param>
    ///<returns>new radical element</returns>
    function CreateMathRadical(baseArgument: DNIMathElement; degreeArgument: DNIMathElement): DNIMathRadical;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create IMathRightSubSuperscriptElementFactory
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathRightSubSuperscriptElementFactory')]
  DNIMathRightSubSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{C449FD5D-34E8-4D19-AA9F-5C1483F897B5}']
  { methods } 

    ///<summary>
    ///  Creates IMathRightSubSuperscriptElementFactory
    ///</summary>
    ///  <param name="baseArg">Base argument to apply indexes</param>
    ///  <param name="subScript">lower right index</param>
    ///  <param name="superScript">upper right index</param>
    ///<returns>new IMathLeftSubSuperscriptElement</returns>
    function CreateMathRightSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathRightSubSuperscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create IMathSubscriptElement
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathSubscriptElementFactory')]
  DNIMathSubscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{DFEBE5E4-A1A1-41EC-A4E0-CAFA80E65433}']
  { methods } 

    ///<summary>
    ///  Creates IMathSubscriptElement
    ///</summary>
    ///  <param name="baseArg">Base argument to apply indexe</param>
    ///  <param name="subScript">lower right index</param>
    ///<returns>new IMathSubscriptElement</returns>
    function CreateMathSubscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement): DNIMathSubscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Allows to create IMathSuperscriptElement
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.IMathSuperscriptElementFactory')]
  DNIMathSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{E9104917-E889-413B-9D51-7B27B8E5AE1B}']
  { methods } 

    ///<summary>
    ///  Creates IMathSuperscriptElement
    ///</summary>
    ///  <param name="baseArg">Base argument to apply superscript</param>
    ///  <param name="superScript">upper right index</param>
    ///<returns>new IMathSuperscriptElement</returns>
    function CreateMathSuperscriptElement(baseArg: DNIMathElement; superScript: DNIMathElement): DNIMathSuperscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathAccentFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AE1B6019-C140-5AF4-AE44-063A2FEA2BEE}']
  { constructors } 

    {class} function init: DNMathAccentFactory;

  end;

  ///<summary>
  ///  Allows to create a math accent
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathAccentFactory')]
  DNMathAccentFactory = interface(DDN.mscorlib.DNObject)
  ['{6647B5D7-4C08-4CB6-A72D-941C5D3DE8EF}']
  { methods } 

    ///<summary>
    ///  Creates a math accent applying to a specified math element with the default accent character value
    ///</summary>
    ///  <param name="element">math element to apply accent</param>
    ///<returns>new math accent</returns>
    function CreateMathAccent(element: DNIMathElement): DNIMathAccent; overload;
    ///<summary>
    ///  Creates a math accent applying to a specified math element
    ///</summary>
    ///  <param name="element">math element to apply accent</param>
    ///  <param name="accentCharacter">accent character</param>
    ///<returns>new math accent</returns>
    function CreateMathAccent(element: DNIMathElement; accentCharacter: Char): DNIMathAccent; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathAccentFactory = class(TDNGenericImport<DNMathAccentFactoryClass, DNMathAccentFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathArrayFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{07D68BB6-6844-5538-A1CA-4CA369F7B224}']
  { constructors } 

    {class} function init: DNMathArrayFactory;

  end;

  ///<summary>
  ///  Allows to create a math array
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathArrayFactory')]
  DNMathArrayFactory = interface(DDN.mscorlib.DNObject)
  ['{205FA03B-229A-4030-8832-ACBC9B3E5BAB}']
  { methods } 

    ///<summary>
    ///  Creates a math array and places the specified element in it
    ///</summary>
    ///  <param name="element">math element to place in array</param>
    ///<returns>new math array</returns>
    function CreateMathArray(element: DNIMathElement): DNIMathArray; overload;
    ///<summary>
    ///  Creates a math array and places specified elements in it
    ///</summary>
    ///  <param name="elements">math elements to place in array</param>
    ///<returns>new math array</returns>
    function CreateMathArray(elements: DNIMathElementCollection): DNIMathArray; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathArrayFactory = class(TDNGenericImport<DNMathArrayFactoryClass, DNMathArrayFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBarFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{50305D4A-5BE5-5D02-812B-5351688DF88E}']
  { constructors } 

    {class} function init: DNMathBarFactory;

  end;

  ///<summary>
  ///  Allows to create a math bar
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathBarFactory')]
  DNMathBarFactory = interface(DDN.mscorlib.DNObject)
  ['{AAEF2AC0-1CD7-4B8D-A8A7-2DE1C7B21D83}']
  { methods } 

    ///<summary>
    ///  Create a math bar by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply bar</param>
    ///<returns>new math bar element</returns>
    function CreateMathBar(element: DNIMathElement): DNIMathBar; overload;
    ///<summary>
    ///  Create a math bar by applying to the element
    ///</summary>
    ///  <param name="element">Math element to apply bar</param>
    ///  <param name="position">Position of the bar</param>
    ///<returns>new math bar element</returns>
    function CreateMathBar(element: DNIMathElement; position: DNMathTopBotPositions): DNIMathBar; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBarFactory = class(TDNGenericImport<DNMathBarFactoryClass, DNMathBarFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBlockFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10818370-44CC-575C-94E6-F818911B13DA}']
  { constructors } 

    {class} function init: DNMathBlockFactory;

  end;

  ///<summary>
  ///  Allows to create a math block
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathBlockFactory')]
  DNMathBlockFactory = interface(DDN.mscorlib.DNObject)
  ['{F8931609-732C-462E-862B-7C4AFEBABAC4}']
  { methods } 

    ///<summary>
    ///  Create a math block
    ///</summary>
    ///<returns>new math block</returns>
    function CreateMathBlock: DNIMathBlock; overload;
    ///<summary>
    ///  Create a math block and place the element in it
    ///</summary>
    ///  <param name="mathElement">A math element</param>
    ///<returns>new math block</returns>
    function CreateMathBlock(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Create a math block and place elements in it
    ///</summary>
    ///  <param name="mathElements">math elements</param>
    ///<returns>new math block</returns>
    function CreateMathBlock(mathElements: DNIMathElementCollection): DNIMathBlock; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBlockFactory = class(TDNGenericImport<DNMathBlockFactoryClass, DNMathBlockFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBorderBoxFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F2EF50E-F819-504C-B321-CB9F745ADDF1}']
  { constructors } 

    {class} function init: DNMathBorderBoxFactory;

  end;

  ///<summary>
  ///  Allows to create a math border box
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathBorderBoxFactory')]
  DNMathBorderBoxFactory = interface(DDN.mscorlib.DNObject)
  ['{A12E8D5C-CF7C-4B01-841E-28D9E7B6A18C}']
  { methods } 

    ///<summary>
    ///  Create a math border box by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply border box</param>
    ///<returns>new border box element</returns>
    function CreateMathBorderBox(element: DNIMathElement): DNIMathBorderBox; overload;
    ///<summary>
    ///  Create a math border box by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply border box</param>
    ///  <param name="hideTop">Hide Top Edge</param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>new border box element</returns>
    function CreateMathBorderBox(element: DNIMathElement; hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBorderBoxFactory = class(TDNGenericImport<DNMathBorderBoxFactoryClass, DNMathBorderBoxFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBoxFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6926350E-6C41-52A0-BB63-F7EAC645EE7C}']
  { constructors } 

    {class} function init: DNMathBoxFactory;

  end;

  ///<summary>
  ///  Allows to create a math box
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathBoxFactory')]
  DNMathBoxFactory = interface(DDN.mscorlib.DNObject)
  ['{DCA3773D-9A1A-4DB2-9C32-082867C77EFD}']
  { methods } 

    ///<summary>
    ///  Create a math box by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply box</param>
    ///<returns>new box element</returns>
    function CreateMathBox(element: DNIMathElement): DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBoxFactory = class(TDNGenericImport<DNMathBoxFactoryClass, DNMathBoxFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathDelimiterFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8CC8B4BD-D921-562A-B6FA-19F54CD5170D}']
  { constructors } 

    {class} function init: DNMathDelimiterFactory;

  end;

  ///<summary>
  ///  Allows to create a math delimiter
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathDelimiterFactory')]
  DNMathDelimiterFactory = interface(DDN.mscorlib.DNObject)
  ['{BE017DE6-3962-4C5C-8D0D-5271E5355492}']
  { methods } 

    ///<summary>
    ///  Create a math delimiter by applying to the element
    ///</summary>
    ///  <param name="element">math element to apply delimiter</param>
    ///<returns>new math delimiter</returns>
    function CreateMathDelimiter(element: DNIMathElement): DNIMathDelimiter; overload;
    ///<summary>
    ///  Create a math delimiter by applying to the element
    ///</summary>
    ///  <param name="mathElements">math elements to apply delimiter</param>
    ///<returns>new math delimiter</returns>
    function CreateMathDelimiter(mathElements: DNIMathElementCollection): DNIMathDelimiter; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathDelimiterFactory = class(TDNGenericImport<DNMathDelimiterFactoryClass, DNMathDelimiterFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathElementBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{854DCBC9-BE04-5226-A53A-732F1DF8E105}']
  end;

  ///<summary>
  ///  Base class for IMathElement with the implementation of some methods that are common to all inherited classes
  ///  For internal use only. Inherited class must be IMathElement.
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.MathElementBase')]
  DNMathElementBase = interface(DDN.mscorlib.DNObject)
  ['{A510C3FE-38C4-39D2-B817-4FB4BFDCFA52}']
  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathElementBase = class(TDNGenericImport<DNMathElementBaseClass, DNMathElementBase>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNBaseScriptClass = interface(DNMathElementBaseClass)
  ['{CDB4D71A-1452-5A68-8FA6-70BAAD60CF96}']
  end;

  ///<summary>
  ///  Math script
  ///</summary>
  [DNTypeName('Aspose.Slides.MathText.BaseScript')]
  DNBaseScript = interface(DNMathElementBase)
  ['{64EFF357-5483-3D90-94A5-017AA17715AA}']
  { getters & setters } 

    function get_Base: DNIMathElement;

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    property Base: DNIMathElement read get_Base;
  end;

  TDNBaseScript = class(TDNGenericImport<DNBaseScriptClass, DNBaseScript>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLeftSubSuperscriptElementClass = interface(DNBaseScriptClass)
  ['{858EDF10-1823-5A17-B219-83CEA543F406}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathLeftSubSuperscriptElement class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
    ///</code></example>
    {class} function init(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNMathLeftSubSuperscriptElement;

  end;

  ///<summary>
  ///  Specifies the Sub-Superscript object, which consists of a base
  ///  and a subscript and superscript placed to the left of the base.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathElement baseElement = new MathematicalText("X");
  ///  IMathElement subscript = new MathematicalText("i");
  ///  IMathElement superscript = new MathematicalText("j");
  ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathLeftSubSuperscriptElement')]
  DNMathLeftSubSuperscriptElement = interface(DNBaseScript)
  ['{D2E553CC-AE1F-4822-9BC6-3E421B2200AC}']
  { getters & setters } 

    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Subscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sub = leftSubSuperscript.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Superscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathLeftSubSuperscriptElement leftSubSuperscript = new MathLeftSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sup = leftSubSuperscript.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Base argument
    ///</summary>
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathLeftSubSuperscriptElement = class(TDNGenericImport<DNMathLeftSubSuperscriptElementClass, DNMathLeftSubSuperscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRightSubSuperscriptElementClass = interface(DNBaseScriptClass)
  ['{7E6A0407-1169-5C48-8DA3-CB4DD9E251B8}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathRightSubSuperscriptElement class.
    ///</summary>
    {class} function init(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNMathRightSubSuperscriptElement;

  end;

  ///<summary>
  ///  Specifies the Sub-Superscript object, which consists of a base
  ///  and a subscript and superscript placed to the right of the base.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathRightSubSuperscriptElement subsuperscript = new MathematicalText("N").SetSubSuperscriptOnTheRight("i", "j");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathRightSubSuperscriptElement')]
  DNMathRightSubSuperscriptElement = interface(DNBaseScript)
  ['{3459E529-468D-4372-89FE-4A23B36E816F}']
  { getters & setters } 

    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AlignScripts: Boolean;
    procedure set_AlignScripts(value: Boolean);
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Subscript argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sub = subsuperscript.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Superscript argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  IMathElement sup = subsuperscript.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Specifies the alignment of subscript/superscript.
    ///  When true, subscript and superscript are aligned horizontally to each other.
    ///  When false, they are kerned to the shape of the base.
    ///  Default value is false.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  MathRightSubSuperscriptElement subsuperscript = new MathRightSubSuperscriptElement(baseElement, subscript, superscript);
    ///  subsuperscript.AlignScripts = true;
    ///</code></example>
    property AlignScripts: Boolean read get_AlignScripts write set_AlignScripts;
    ///<summary>
    ///  Base argument
    ///</summary>
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathRightSubSuperscriptElement = class(TDNGenericImport<DNMathRightSubSuperscriptElementClass, DNMathRightSubSuperscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSubscriptElementClass = interface(DNBaseScriptClass)
  ['{F8D6E40D-6EC8-5DD5-85EB-1A4C7B37890F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathSubscriptElement class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  MathSubscriptElement subscriptElement = new MathSubscriptElement(baseElement, subscript);
    ///</code></example>
    {class} function init(baseArg: DNIMathElement; subScript: DNIMathElement): DNMathSubscriptElement;

  end;

  ///<summary>
  ///  Specifies the subscript object, which consists of a base
  ///  and a reduced-size subscript placed below and to the right.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathSubscriptElement subscriptElement = new MathematicalText("N").SetSubscript("i");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathSubscriptElement')]
  DNMathSubscriptElement = interface(DNBaseScript)
  ['{AB3DC3B3-F0BA-413D-8FBF-1245403450D5}']
  { getters & setters } 

    function get_Subscript: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Subscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  MathSubscriptElement subscriptElement = new MathSubscriptElement(baseElement, subscript);
    ///  IMathElement sub = subscriptElement.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Base argument
    ///</summary>
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathSubscriptElement = class(TDNGenericImport<DNMathSubscriptElementClass, DNMathSubscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSuperscriptElementClass = interface(DNBaseScriptClass)
  ['{7CB36BDE-BAF7-5D00-B0FF-D9E8362017F7}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathSuperscriptElement class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement superscript = new MathematicalText("i");
    ///  MathSuperscriptElement superscriptElement = new MathSuperscriptElement(baseElement, superscript);
    ///</code></example>
    {class} function init(baseArg: DNIMathElement; superScript: DNIMathElement): DNMathSuperscriptElement;

  end;

  ///<summary>
  ///  Specifies the superscript object, which consists of a base
  ///  and a reduced-size superscript placed above and to the right
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathSuperscriptElement superscriptElement = new MathematicalText("N").SetSuperscript("i");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathSuperscriptElement')]
  DNMathSuperscriptElement = interface(DNBaseScript)
  ['{472A3056-2BB3-4422-8898-B76AFE34554A}']
  { getters & setters } 

    function get_Superscript: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Superscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("X");
    ///  IMathElement superscript = new MathematicalText("i");
    ///  MathSuperscriptElement superscriptElement = new MathSuperscriptElement(baseElement, superscript);
    ///  IMathElement super = superscriptElement.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Base argument
    ///</summary>
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathSuperscriptElement = class(TDNGenericImport<DNMathSuperscriptElementClass, DNMathSuperscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathAccentClass = interface(DNMathElementBaseClass)
  ['{505330ED-0F7D-5C7F-93A2-4BA8851CA314}']
  { constructors } 

    ///<summary>
    ///  Creates a math accent applying to a specified math element with the default accent character value
    ///</summary>
    ///  <param name="element">a math element to apply accent</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("x");
    ///  MathAccent accent = new MathAccent(baseElement);
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathAccent; overload;
    ///<summary>
    ///  Creates a math accent applying to a specified math element
    ///</summary>
    ///  <param name="element">math element to apply accent</param>
    ///  <param name="accentCharacter">accent character</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("x");
    ///  MathAccent accent = new MathAccent(baseElement, '~');
    ///</code></example>
    {class} function init(element: DNIMathElement; accentCharacter: Char): DNMathAccent; overload;

  end;

  ///<summary>
  ///  Specifies the accent function, consisting of a base and a combining diacritical mark
  ///  Example: 𝑎́
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathElement baseElement = new MathematicalText("x");
  ///  MathAccent accent = new MathAccent(baseElement, '~');
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathAccent')]
  DNMathAccent = interface(DNMathElementBase)
  ['{78502A9C-12D3-4F4E-A3C9-373609D05473}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The argument to which the accent was applied
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///  IMathElement base = accent.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Accent Character
    ///  The value should be within the range of (U+0300–U+036F) or(U+20D0–U+20EF)
    ///  Default value: Combining Circumflex Accent (U+0302)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///  char ch = accent.Character;
    ///</code></example>
    property Character: Char read get_Character write set_Character;
  end;

  TDNMathAccent = class(TDNGenericImport<DNMathAccentClass, DNMathAccent>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathArrayClass = interface(DNMathElementBaseClass)
  ['{AA656E2A-AD6C-5984-83CA-C5D659BA3FEC}']
  { constructors } 

    ///<summary>
    ///  Creates a mathematical array and places the specified element in it
    ///</summary>
    ///  <param name="element">The element to place in the array</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathArray; overload;
    {class} function init(elements: DDN.mscorlib.DNIEnumerable<DNIMathElement>): DNMathArray; overload;

  end;

  ///<summary>
  ///  Specifies a vertical array of equations or any mathematical objects
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathArray mathArray = new MathArray(new MathematicalText("item1"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathArray')]
  DNMathArray = interface(DNMathElementBase)
  ['{DD7612CA-8FED-44F5-B114-FEA248169231}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MaximumDistribution: Boolean;
    procedure set_MaximumDistribution(value: Boolean);
    function get_ObjectDistribution: Boolean;
    procedure set_ObjectDistribution(value: Boolean);
    function get_RowSpacingRule: DNMathRowSpacingRule;
    procedure set_RowSpacingRule(value: DNMathRowSpacingRule);
    function get_RowSpacing: UInt32;
    procedure set_RowSpacing(value: UInt32);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The set of items of the array
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.Arguments.Add(new MathematicalText("item2"));
    ///</code></example>
    property Arguments: DNIMathElementCollection read get_Arguments;
    ///<summary>
    ///  Specifies alignment of the array relative to surrounding text
    ///  Text outside of the array can be aligned with the bottom, top, or center of a array object.
    ///  Default value: Center
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.BaseJustification = MathVerticalAlignment.Top;
    ///</code></example>
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    ///<summary>
    ///  Maximum Distribution
    ///  When true, the array is spaced to the maximum width of the containing element(page, column, cell, etc.).
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.MaximumDistribution = true;
    ///</code></example>
    property MaximumDistribution: Boolean read get_MaximumDistribution write set_MaximumDistribution;
    ///<summary>
    ///  Object Distribution
    ///  When true, the contents of the array are spaced to the maximum width of the array object.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.ObjectDistribution = true;
    ///</code></example>
    property ObjectDistribution: Boolean read get_ObjectDistribution write set_ObjectDistribution;
    ///<summary>
    ///  The type of vertical spacing between array elements
    ///  Default: SingleLineGap
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.RowSpacingRule = MathRowSpacingRule.OneAndAHalfLineGap;
    ///</code></example>
    property RowSpacingRule: DNMathRowSpacingRule read get_RowSpacingRule write set_RowSpacingRule;
    ///<summary>
    ///  Spacing between rows of an array
    ///  It is used only when RowSpacingRule is set to 3 Exactly in which case the unit of measure is points
    ///  or Multiple in which case the unit of measure is half-lines.
    ///  Default: 0
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray mathArray = new MathArray(new MathematicalText("item1"));
    ///  mathArray.RowSpacingRule = MathRowSpacingRule.Exactly;
    ///  mathArray.RowSpacing = 10;
    ///</code></example>
    property RowSpacing: UInt32 read get_RowSpacing write set_RowSpacing;
  end;

  TDNMathArray = class(TDNGenericImport<DNMathArrayClass, DNMathArray>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBarClass = interface(DNMathElementBaseClass)
  ['{D0992C19-1F54-52AE-A6A9-55E20508CFE6}']
  { constructors } 

    ///<summary>
    ///  Initializes MathBar with overbar (Top position)
    ///</summary>
    ///  <param name="element">The base element to which the bar is applied</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBar mathBar = new MathBar(new MathematicalText("x"));
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathBar; overload;
    ///<summary>
    ///  Initializes MathBar with specified position
    ///</summary>
    ///  <param name="element">The base element to which the bar is applied</param>
    ///  <param name="position">Position of the bar line.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBar mathBar = new MathBar(new MathematicalText("x"), MathTopBotPositions.Bottom);
    ///</code></example>
    {class} function init(element: DNIMathElement; position: DNMathTopBotPositions): DNMathBar; overload;

  end;

  ///<summary>
  ///  Specifies the bar function, consisting of a base argument and an overbar or underbar
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathBar mathBar = new MathBar(new MathematicalText("x"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathBar')]
  DNMathBar = interface(DNMathElementBase)
  ['{02D21759-A061-4D41-ABF6-37ABFB005DFA}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBar mathBar = new MathBar(new MathematicalText("x"));
    ///  IMathElement base = mathBar.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Position of the bar line.
    ///  Default: Top
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBar mathBar = new MathBar(new MathematicalText("x"));
    ///  mathBar.Position = MathTopBotPositions.Bottom;
    ///</code></example>
    property Position: DNMathTopBotPositions read get_Position write set_Position;
  end;

  TDNMathBar = class(TDNGenericImport<DNMathBarClass, DNMathBar>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBlockClass = interface(DNMathElementBaseClass)
  ['{567A1E42-4B9C-5AC6-984F-93472E17BB79}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathBlock class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock();
    ///</code></example>
    {class} function init: DNMathBlock; overload;
    ///<summary>
    ///  Creates a new mathematical block and puts specified element in it
    ///</summary>
    ///  <param name="mathElement">The mathematical element to put in the block</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///</code></example>
    {class} function init(mathElement: DNIMathElement): DNMathBlock; overload;
    {class} function init(mathElements: DDN.mscorlib.DNIEnumerable<DNIMathElement>): DNMathBlock; overload;

  end;

  ///<summary>
  ///  Specifies an instance of mathematical text that contained within a MathParagraph and starts on its own line.
  ///  All math zones, including equations, expressions, arrays of equations or expressions, and formulas are represented by math block.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathBlock mathBlock = new MathBlock();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathBlock')]
  DNMathBlock = interface(DNMathElementBase)
  ['{A5B5C3E7-C169-4EE5-A94C-9C7EF6A4A1B2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection.</param>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the collection; otherwise, false.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  mathBlock.Add(plusElement);
    ///  mathBlock.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  bool contains = mathBlock.Contains(plusElement);
    ///</code></example>
    function &Contains(item: DNIMathElement): Boolean;
    ///<summary>
    ///  Copy to specified array.
    ///</summary>
    ///  <param name="array">Array to copy to.</param>
    ///  <param name="arrayIndex">Index to begin copying.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  mathBlock.Add(plusElement);
    ///  mathBlock.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  IMathElement[] destinationArray = new IMathElement[mathBlock.Count];
    ///  mathBlock.CopyTo(destinationArray, 0);
    ///</code></example>
    procedure CopyTo(&array: TArray<DNIMathElement>; arrayIndex: Int32);
    ///<summary>
    ///  Determines the index of a specific math element in collection.
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the collection; otherwise, -1.
    ///</returns>
    ///  <param name="item">The element to locate in the collection.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  mathBlock.Add(plusElement);
    ///  mathBlock.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  int index = mathBlock.IndexOf(plusElement);
    ///</code></example>
    function IndexOf(item: DNIMathElement): Int32;
    ///<summary>
    ///  Inserts a MathElement into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which MathElement should be inserted.</param>
    ///  <param name="item">The MathElement to insert.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  mathBlock.Add(plusElement);
    ///  mathBlock.Insert(0, new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///</code></example>
    procedure Insert(index: Int32; item: DNIMathElement);
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  mathBlock.Add(plusElement);
    ///  mathBlock.Insert(0, new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  mathBlock.RemoveAt(2);
    ///</code></example>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Joins a mathematical element with this mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>The current instance of IMathBlock</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text with this mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Joins another mathematical block with this one
    ///</summary>
    ///  <param name="other">The joining block</param>
    ///<returns>this mathematical block after joining</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlock block1 = new MathSuperscriptElement(new MathematicalText("c"), new MathematicalText("2")).Join(new MathematicalText("="));
    ///  IMathBlock block2 = new MathSuperscriptElement(new MathematicalText("a"), new MathematicalText("2")).Join(new MathematicalText("+"))
    ///  .Join(new MathSuperscriptElement(new MathematicalText("b"), new MathematicalText("2")));
    ///  IMathBlock block3 = block1.JoinBlock(block2);
    ///</code></example>
    function JoinBlock(other: DNIMathBlock): DNIMathBlock;
    ///<summary>
    ///  Delimits child elements with separator character (without the brackets)
    ///</summary>
    ///  <param name="separatorCharacter">Separator character</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathematicalText("x").Join("y");
    ///  IMathDelimiter delimiterElement = mathBlock.Delimit('|');
    ///</code></example>
    function Delimit(separatorCharacter: Char): DNIMathDelimiter;
    ///<summary>
    ///  Encloses child elements of this block in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlock block = new MathematicalText("x").Join("+y");
    ///  IMathDelimiter delimiter = block.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses child elements of this block in specified characters such as parenthesis or another as framing
    ///  and delimit with a separator character
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///  <param name="separatorCharacter">Separator character</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing and delimiter</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlock mathBlock = new MathematicalText("x").Join("y");
    ///  IMathDelimiter delimiterElement = mathBlock.Enclose('{', '}', '%');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char; separatorCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Puts child elements in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Saves content of this <see cref="T:Aspose.Slides.MathText.MathBlock" />
    ///  as MathML
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of child math elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBlock mathBlock = new MathBlock(new MathematicalText("x"));
    ///  int count = mathBlock.Count;
    ///</code></example>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns false because child elements collection can be modified.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNMathBlock = class(TDNGenericImport<DNMathBlockClass, DNMathBlock>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBorderBoxClass = interface(DNMathElementBaseClass)
  ['{E901D8B8-3AAF-51A8-98B9-0D1F1AAB692C}']
  { constructors } 

    ///<summary>
    ///  Creates MathBorderBox element with rectangular border
    ///</summary>
    ///  <param name="element">The base element to which the border box is applied. Can be null.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathBorderBox; overload;
    ///<summary>
    ///  Creates MathBorderBox element
    ///</summary>
    ///  <param name="element">The base element to which the border box is applied</param>
    ///  <param name="hideTop">Hide Top Edge</param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Strikethrough Top-Left to Bottom-Right</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"), true, true, true, false, true, true, true, true)
    ///</code></example>
    {class} function init(element: DNIMathElement; hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNMathBorderBox; overload;

  end;

  ///<summary>
  ///  Draws a rectangular or some other border around the IMathElement.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathBorderBox')]
  DNMathBorderBox = interface(DNMathElementBase)
  ['{C0555EB1-C12E-43AD-8458-FDECF093727E}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_HideTop: Boolean;
    procedure set_HideTop(value: Boolean);
    function get_HideBottom: Boolean;
    procedure set_HideBottom(value: Boolean);
    function get_HideLeft: Boolean;
    procedure set_HideLeft(value: Boolean);
    function get_HideRight: Boolean;
    procedure set_HideRight(value: Boolean);
    function get_StrikethroughHorizontal: Boolean;
    procedure set_StrikethroughHorizontal(value: Boolean);
    function get_StrikethroughVertical: Boolean;
    procedure set_StrikethroughVertical(value: Boolean);
    function get_StrikethroughBottomLeftToTopRight: Boolean;
    procedure set_StrikethroughBottomLeftToTopRight(value: Boolean);
    function get_StrikethroughTopLeftToBottomRight: Boolean;
    procedure set_StrikethroughTopLeftToBottomRight(value: Boolean);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  IMathElement base = borderBox.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Hide Top Edge (default is false) - specifies the hidden or shown state of the top edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.HideTop = true;
    ///</code></example>
    property HideTop: Boolean read get_HideTop write set_HideTop;
    ///<summary>
    ///  Hide Bottom Edge (default is false) - specifies the hidden or shown state of the bottom edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.HideBottom = true;
    ///</code></example>
    property HideBottom: Boolean read get_HideBottom write set_HideBottom;
    ///<summary>
    ///  Hide Left Edge (default is false) - specifies the hidden or shown state of the left edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.HideLeft = true;
    ///</code></example>
    property HideLeft: Boolean read get_HideLeft write set_HideLeft;
    ///<summary>
    ///  Hide Right Edge (default is false) - specifies the hidden or shown state of the right edge of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.HideRight = true;
    ///</code></example>
    property HideRight: Boolean read get_HideRight write set_HideRight;
    ///<summary>
    ///  Strikethrough Horizontal (default is false) - specifies the hidden or shown state of a strikethrough horizontal line.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.StrikethroughHorizontal = true;
    ///</code></example>
    property StrikethroughHorizontal: Boolean read get_StrikethroughHorizontal write set_StrikethroughHorizontal;
    ///<summary>
    ///  Strikethrough Vertical (default is false) - specifies the hidden or shown state of a strikethrough vertical line.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.StrikethroughVertical = true;
    ///</code></example>
    property StrikethroughVertical: Boolean read get_StrikethroughVertical write set_StrikethroughVertical;
    ///<summary>
    ///  Strikethrough Bottom-Left to Top-Right (default is false).
    ///  Specifies the hidden or shown state of a strikethrough diagonal line from the bottom-left corner to the top-right corner of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.StrikethroughBottomLeftToTopRight = true;
    ///</code></example>
    property StrikethroughBottomLeftToTopRight: Boolean read get_StrikethroughBottomLeftToTopRight write set_StrikethroughBottomLeftToTopRight;
    ///<summary>
    ///  Strikethrough Top-Left to Bottom-Right (default is false).
    ///  Specifies the hidden or shown state of a strikethrough diagonal line from the top-left corner to the bottom-right corner of border box.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBorderBox borderBox = new MathBorderBox(new MathematicalText("x"));
    ///  borderBox.StrikethroughTopLeftToBottomRight = true;
    ///</code></example>
    property StrikethroughTopLeftToBottomRight: Boolean read get_StrikethroughTopLeftToBottomRight write set_StrikethroughTopLeftToBottomRight;
  end;

  TDNMathBorderBox = class(TDNGenericImport<DNMathBorderBoxClass, DNMathBorderBox>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBoxClass = interface(DNMathElementBaseClass)
  ['{A78596B5-404F-5503-8CCC-6083E0BCBC3A}']
  { constructors } 

    ///<summary>
    ///  Initializes MathBox with the specified element as an argument
    ///</summary>
    ///  <param name="element">The base element to which the box is applied. Can be null.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBox box = new MathBox(new MathematicalText("=="));
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathBox;

  end;

  ///<summary>
  ///  Specifies the logical boxing (packaging) of mathematical element.
  ///  For example, a boxed object can serve as an operator emulator with or without an alignment point,
  ///  serve as a line break point, or be grouped such as not to allow line breaks within.
  ///  For example, the "==" operator should be boxed to prevent line breaks.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathBox box = new MathBox(new MathematicalText("=="));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathBox')]
  DNMathBox = interface(DNMathElementBase)
  ['{0906F479-1E9C-49D8-B49E-DBC86BE226CE}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_OperatorEmulator: Boolean;
    procedure set_OperatorEmulator(value: Boolean);
    function get_NoBreak: Boolean;
    procedure set_NoBreak(value: Boolean);
    function get_Differential: Boolean;
    procedure set_Differential(value: Boolean);
    function get_AlignmentPoint: Boolean;
    procedure set_AlignmentPoint(value: Boolean);
    function get_ExplicitBreak: Byte;
    procedure set_ExplicitBreak(value: Byte);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBox box = new MathBox(new MathematicalText("=="));
    ///  IMathElement base = box.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Operator Emulator.
    ///  When true, the box and its contents behave as a single operator and inherit the properties of an operator.
    ///  This means, for example, that the character can serve as a point for a line break and can be aligned to other operators.
    ///  Operator Emulators are often used when one or more glyphs combine to form an operator, such as '=='.
    ///  Default value: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBox box = new MathBox(new MathematicalText("=="));
    ///  box.OperatorEmulator = true;
    ///</code></example>
    property OperatorEmulator: Boolean read get_OperatorEmulator write set_OperatorEmulator;
    ///<summary>
    ///  No break
    ///  This property specifies the "unbreakable" property on the object box. When true, no line breaks can occur within the box.
    ///  This can be important for operator emulators that consist of more than one binary operator.
    ///  When this element is not specified, breaks can occur inside box.
    ///  Default: true
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathBox box = new MathBox(new MathematicalText("*****"));
    ///  box.NoBreak = false;
    ///</code></example>
    property NoBreak: Boolean read get_NoBreak write set_NoBreak;
    ///<summary>
    ///  Differential
    ///  When true, the box acts as a differential (e.g., 𝑑𝑥 in an integrand), and receives the appropriate
    ///  horizontal spacing for the mathematical differential.
    ///  Default: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox differential = new MathematicalText("dx").ToBox();
    ///  differential.Differential = true;
    ///  IMathBlock baseArg = new MathematicalText("x").Join(differential);
    ///  IMathNaryOperator integral = baseArg.Integral(MathIntegralTypes.Simple, "0", "1");
    ///</code></example>
    property Differential: Boolean read get_Differential write set_Differential;
    ///<summary>
    ///  When true, this operator emulator serves as an alignment point; that is,
    ///  designated alignment points in other equations can be aligned with it.
    ///  Default: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("==").ToBox();
    ///  box.AlignmentPoint = true;
    ///</code></example>
    property AlignmentPoint: Boolean read get_AlignmentPoint write set_AlignmentPoint;
    ///<summary>
    ///  Explicit break specifies whether there is a line break at the start of the Box object,
    ///  such that the line wraps at the start of the box object.
    ///  Specifies the number of the operator on the previous line of mathematical text which shall
    ///  be used as the alignment point for the current line of mathematical text
    ///  possible values: 1..255
    ///  Default: 0 (no explicit break)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("==").ToBox();
    ///  box.ExplicitBreak = 1;
    ///</code></example>
    property ExplicitBreak: Byte read get_ExplicitBreak write set_ExplicitBreak;
  end;

  TDNMathBox = class(TDNGenericImport<DNMathBoxClass, DNMathBox>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathDelimiterClass = interface(DNMathElementBaseClass)
  ['{9F4BF331-34CB-5D88-8AAE-0B69A9B80188}']
  { constructors } 

    ///<summary>
    ///  Initializes MathDelimiter with the specified element as single base argument
    ///</summary>
    ///  <param name="element">The base element to which the delimiter is applied. Can be null.</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  Throws then <paramref name="element" />
    ///  is a container for another elements, such as MathBlock. In this case, you need to call a different constructor with IEnumerable argument.
    ///</exception><example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  MathDelimiter delimiter = new MathDelimiter(element);
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathDelimiter;

  end;

  ///<summary>
  ///  Specifies the delimiter object, consisting of opening and closing characters (such as parentheses,
  ///  braces, brackets, and vertical bars), and one or more mathematical elements inside, separated by a specified character.
  ///  Examples: (𝑥2); [𝑥2|𝑦2]
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathElement element = new MathematicalText("x");
  ///  MathDelimiter delimiter = new MathDelimiter(element);
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathDelimiter')]
  DNMathDelimiter = interface(DNMathElementBase)
  ['{D573CD0E-7688-44F0-9BF2-E3E286CAF028}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BeginningCharacter: Char;
    procedure set_BeginningCharacter(value: Char);
    function get_SeparatorCharacter: Char;
    procedure set_SeparatorCharacter(value: Char);
    function get_EndingCharacter: Char;
    procedure set_EndingCharacter(value: Char);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_DelimiterShape: DNMathDelimiterShape;
    procedure set_DelimiterShape(value: DNMathDelimiterShape);

  { methods } 

    ///<summary>
    ///  Delimits arguments using the specified delimiter character
    ///</summary>
    ///  <param name="separatorCharacter">delimiter character</param>
    ///<returns>This object after applying the delimiter character</returns>
    function Delimit(separatorCharacter: Char): DNIMathDelimiter;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>
    ///  If <paramref name="beginningCharacter" />
    ///  and <paramref name="endingCharacter" />
    ///  are null,
    ///  corresponding properties are assigned values only and no new object is created (returns this instance).
    ///  Otherwise, returns new math element of type Delimiter which includes specified characters as framing
    ///  and this instance of <see cref="T:Aspose.Slides.MathText.MathDelimiter" />
    ///  framed inside.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter innerDelimiter = new MathematicalText("x").Join(",y").Enclose('{', '}');
    ///  IMathDelimiter outerDelimiter = innerDelimiter.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  One or more mathematical elements separated by delimiter characters
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  IMathElementCollection arguments = delimiter.Arguments;
    ///</code></example>
    property Arguments: DNIMathElementCollection read get_Arguments;
    ///<summary>
    ///  Delimiter Beginning Character specifies the beginning, or opening, delimiter character.
    ///  Mathematical delimiters are enclosing characters such as parentheses, brackets, and braces.
    ///  The default: '('.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.BeginningCharacter = '[';
    ///</code></example>
    property BeginningCharacter: Char read get_BeginningCharacter write set_BeginningCharacter;
    ///<summary>
    ///  Delimiter Separator Character specifies the character that separates arguments in the delimiter object.
    ///  The default: '|'.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.SeparatorCharacter = '$';
    ///</code></example>
    property SeparatorCharacter: Char read get_SeparatorCharacter write set_SeparatorCharacter;
    ///<summary>
    ///  Delimiter Ending Character specifies the ending, or closing, delimiter character.
    ///  Mathematical delimiters are enclosing characters such as parentheses, brackets, and braces.
    ///  The default: ')'.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Join("y").Enclose();
    ///  delimiter.EndingCharacter = ']';
    ///</code></example>
    property EndingCharacter: Char read get_EndingCharacter write set_EndingCharacter;
    ///<summary>
    ///  Specifies the growth of BeginningCharacter, SeparatorCharacter, EndingCharacter
    ///  When true, the delimiters grows vertically to match its operand height.
    ///  The default value is true
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Divide("y").Enclose();
    ///  delimiter.GrowToMatchOperandHeight = false;
    ///</code></example>
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    ///<summary>
    ///  Specifies the shape of delimiters in the delimiter object.
    ///  When is MathDelimiterShape.Centered, delimiters are centered around the math axis of the mathematical text
    ///  and still be made to fit the entire height of their contents.
    ///  When is MathDelimiterShape.Match, their height and shape are altered to exactly match their contents.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathDelimiter delimiter = new MathematicalText("x").Divide("y").Enclose();
    ///  delimiter.DelimiterShape = MathDelimiterShape.Match;
    ///</code></example>
    property DelimiterShape: DNMathDelimiterShape read get_DelimiterShape write set_DelimiterShape;
  end;

  TDNMathDelimiter = class(TDNGenericImport<DNMathDelimiterClass, DNMathDelimiter>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathematicalTextClass = interface(DNMathElementBaseClass)
  ['{0A5316E4-B4E0-517F-97D3-0B3A066F69CA}']
  { constructors } 

    ///<summary>
    ///  Default constructor (create String.Empty Value)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathematicalText mathText = new MathematicalText();
    ///</code></example>
    {class} function init: DNMathematicalText; overload;
    ///<summary>
    ///  Create MathText with single symbol
    ///</summary>
    ///  <param name="mathSymbol">single symbol</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathematicalText mathText = new MathematicalText('$');
    ///</code></example>
    {class} function init(mathSymbol: Char): DNMathematicalText; overload;
    ///<summary>
    ///  Create MathematicalText from text
    ///</summary>
    ///  <param name="mathText">text value</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathematicalText mathText = new MathematicalText("x+y");
    ///</code></example>
    {class} function init(mathText: string): DNMathematicalText; overload;
    ///<summary>
    ///  Create MathematicalText from text and format settings
    ///</summary>
    ///  <param name="mathText">text value</param>
    ///  <param name="portionFormat">text format settings</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IPortionFormat format = new PortionFormat() { FontHeight = 12 };
    ///  MathematicalText mathText = new MathematicalText("x+y", format);
    ///</code></example>
    {class} function init(mathText: string; portionFormat: DNIPortionFormat): DNMathematicalText; overload;

  end;

  ///<summary>
  ///  Mathematical text
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathematicalText mathText = new MathematicalText("x+y");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathematicalText')]
  DNMathematicalText = interface(DNMathElementBase)
  ['{6C0D832C-02EF-46AA-A55C-32191D7DDA99}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_Format: DNIPortionFormat;

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Text value
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathematicalText mathText = new MathematicalText("x+y");
    ///  string textValue = mathText.Value;
    ///</code></example>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Text formatting properties
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathematicalText mathText = new MathematicalText("x+y");
    ///  mathText.Format.FontHeight = 28;
    ///</code></example>
    property Format: DNIPortionFormat read get_Format;
  end;

  TDNMathematicalText = class(TDNGenericImport<DNMathematicalTextClass, DNMathematicalText>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFractionClass = interface(DNMathElementBaseClass)
  ['{B5C7CFA0-83C0-56C6-B9DE-D6A2DB369FC3}']
  { constructors } 

    ///<summary>
    ///  Initializes MathFraction with the specified numerator, denominator and type
    ///</summary>
    ///  <param name="numerator">Numerator</param>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathFraction mathFraction = new MathFraction(new MathematicalText("x"), new MathematicalText("y"), MathFractionTypes.Linear);
    ///</code></example>
    {class} function init(numerator: DNIMathElement; denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNMathFraction; overload;
    ///<summary>
    ///  Initializes a MathFraction of type 'Bar' with the specified numerator and denominator
    ///</summary>
    ///  <param name="numerator">Numerator</param>
    ///  <param name="denominator">Denominator</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathFraction mathFraction = new MathFraction(new MathematicalText("x"), new MathematicalText("y"));
    ///</code></example>
    {class} function init(numerator: DNIMathElement; denominator: DNIMathElement): DNMathFraction; overload;

  end;

  ///<summary>
  ///  Specifies the fraction object, consisting of a numerator and denominator separated by a fraction bar.
  ///  The fraction bar can be horizontal or diagonal, depending on the fraction properties.
  ///  The fraction object is also used to represent the stack function, which places one element above another, with no fraction bar.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathFraction mathFraction = new MathFraction(new MathematicalText("x"), new MathematicalText("y"), MathFractionTypes.Linear);
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathFraction')]
  DNMathFraction = interface(DNMathElementBase)
  ['{DB60C9F5-EE6E-4DB5-A792-2942C8866F69}']
  { getters & setters } 

    function get_FractionType: DNMathFractionTypes;
    procedure set_FractionType(value: DNMathFractionTypes);
    function get_Numerator: DNIMathElement;
    function get_Denominator: DNIMathElement;

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Fraction type
    ///  Default: Bar
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
    ///  mathFraction.FractionType = MathFractionTypes.Linear;
    ///</code></example>
    property FractionType: DNMathFractionTypes read get_FractionType write set_FractionType;
    ///<summary>
    ///  Numerator
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
    ///  IMathElement numerator = mathFraction.Numerator;
    ///</code></example>
    property Numerator: DNIMathElement read get_Numerator;
    ///<summary>
    ///  Denominator
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFraction mathFraction = new MathematicalText("x").Divide("y");
    ///  IMathElement denominator = mathFraction.Denominator;
    ///</code></example>
    property Denominator: DNIMathElement read get_Denominator;
  end;

  TDNMathFraction = class(TDNGenericImport<DNMathFractionClass, DNMathFraction>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFunctionClass = interface(DNMathElementBaseClass)
  ['{58919DD6-9611-5770-B007-A7A76C15DA33}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathFunction class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathFunction func = new MathFunction(new MathematicalText("sin"), new MathematicalText("x"));
    ///</code></example>
    {class} function init(funcName: DNIMathElement; baseArgument: DNIMathElement): DNMathFunction; overload;
    ///<summary>
    ///  Initializes a new instance of the MathFunction class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathFunction func = new MathFunction("sin", new MathematicalText("x"));
    ///</code></example>
    {class} function init(funcName: string; baseArgument: DNIMathElement): DNMathFunction; overload;

  end;

  ///<summary>
  ///  Specifies a function of an argument.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathFunction func = new MathFunction("sin", new MathematicalText("x"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathFunction')]
  DNMathFunction = interface(DNMathElementBase)
  ['{446014F4-5214-4070-8249-42B93AA9B33B}']
  { getters & setters } 

    function get_Name: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Function name
    ///  For example, function names are sin and cos
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFunction func = new MathematicalText("sin").Function("x");
    ///  IMathElement funcName = func.Name;
    ///</code></example>
    property Name: DNIMathElement read get_Name;
    ///<summary>
    ///  Function Argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathFunction func = new MathematicalText("sin").Function("x");
    ///  IMathElement base = func.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathFunction = class(TDNGenericImport<DNMathFunctionClass, DNMathFunction>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathGroupingCharacterClass = interface(DNMathElementBaseClass)
  ['{E0291F78-4293-544E-8B81-0B0E1272F805}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathGroupingCharacter class
    ///  with the default grouping character U+23DF (BOTTOM CURLY BRACKET)
    ///</summary>
    ///  <param name="element">The base element to which the bar is applied</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///</code></example>
    {class} function init(element: DNIMathElement): DNMathGroupingCharacter; overload;
    ///<summary>
    ///  Initializes a new instance of the MathGroupingCharacter class.
    ///</summary>
    ///  <param name="element">The base element to which the bar is applied</param>
    ///  <param name="character">Grouping Character</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">Vertical justification of group character</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"), '_', MathTopBotPositions.Top, MathTopBotPositions.Bottom);
    ///</code></example>
    {class} function init(element: DNIMathElement; character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNMathGroupingCharacter; overload;

  end;

  ///<summary>
  ///  Specifies a grouping symbol above or below an expression, usually to highlight the relationship between elements
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathGroupingCharacter')]
  DNMathGroupingCharacter = interface(DNMathElementBase)
  ['{C51CA666-D080-45E3-9741-C97FCF68E9D5}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);
    function get_VerticalJustification: DNMathTopBotPositions;
    procedure set_VerticalJustification(value: DNMathTopBotPositions);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  IMathElement baseArg = groupingCharacter.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Grouping Character
    ///  Default value: U+23DF (BOTTOM CURLY BRACKET)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  groupingCharacter.Character = '\u23DD'; // Bottom Parenthesis
    ///</code></example>
    property Character: Char read get_Character write set_Character;
    ///<summary>
    ///  Position of grouping character.
    ///  Default: Bottom
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  groupingCharacter.Position = MathTopBotPositions.Top;
    ///</code></example>
    property Position: DNMathTopBotPositions read get_Position write set_Position;
    ///<summary>
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///  Default: Bottom for Position=Top, and Top for Position=Bottom
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathGroupingCharacter groupingCharacter = new MathGroupingCharacter(new MathematicalText("abc"));
    ///  groupingCharacter.VerticalJustification = MathTopBotPositions.Top;
    ///</code></example>
    property VerticalJustification: DNMathTopBotPositions read get_VerticalJustification write set_VerticalJustification;
  end;

  TDNMathGroupingCharacter = class(TDNGenericImport<DNMathGroupingCharacterClass, DNMathGroupingCharacter>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLimitClass = interface(DNMathElementBaseClass)
  ['{295823D4-0E09-5D0D-8E1D-C7C91067883F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathLimit class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"), false);
    ///</code></example>
    {class} function init(baseArg: DNIMathElement; limit: DNIMathElement; upperLimit: Boolean): DNMathLimit; overload;
    ///<summary>
    ///  Initializes a new instance of the MathLimit class with lower limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///</code></example>
    {class} function init(baseArg: DNIMathElement; limit: DNIMathElement): DNMathLimit; overload;

  end;

  ///<summary>
  ///  Specifies the Limit object, consisting of text on the baseline and reduced-size text immediately above or below it.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathLimit')]
  DNMathLimit = interface(DNMathElementBase)
  ['{93641105-CE37-490B-BD4E-BA61ACB84B3C}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Limit: DNIMathElement;
    function get_UpperLimit: Boolean;
    procedure set_UpperLimit(value: Boolean);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///  IMathElement baseArg = limitElement.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Limit argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///  IMathElement limitArg = limitElement.Limit;
    ///</code></example>
    property Limit: DNIMathElement read get_Limit;
    ///<summary>
    ///  Specifies upper or lower limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathLimit limitElement = new MathLimit(new MathematicalText("lim"), new MathematicalText("𝑛→∞"));
    ///  limitElement.UpperLimit = false;
    ///</code></example>
    property UpperLimit: Boolean read get_UpperLimit write set_UpperLimit;
  end;

  TDNMathLimit = class(TDNGenericImport<DNMathLimitClass, DNMathLimit>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathMatrixClass = interface(DNMathElementBaseClass)
  ['{0E2301F9-4CCA-56EA-9178-CBA1F450C805}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathMatrix class.
    ///</summary>
    ///  <param name="rowCount">row count</param>
    ///  <param name="columnCount">column count</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///</code></example>
    {class} function init(rowCount: Int32; columnCount: Int32): DNMathMatrix;

  end;

  ///<summary>
  ///  Specifies the Matrix object, consisting of child elements laid out in one or more rows and columns.
  ///  It is important to note that matrices do not have built in delimiters.
  ///  To place the matrix in the brackets you should use the delimiter object (IMathDelimiter).
  ///  Null arguments can be used to create gaps in matrices.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathMatrix matrix = new MathMatrix(2, 3);
  ///  matrix[0, 0] = new MathematicalText("item.1.1");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathMatrix')]
  DNMathMatrix = interface(DNMathElementBase)
  ['{A1B96C7D-33EE-4286-A9BF-E03CAD53AA40}']
  { getters & setters } 

    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_HidePlaceholders: Boolean;
    procedure set_HidePlaceholders(value: Boolean);
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MinColumnWidth: UInt32;
    procedure set_MinColumnWidth(value: UInt32);
    function get_ColumnGapRule: DNMathSpacingRules;
    procedure set_ColumnGapRule(value: DNMathSpacingRules);
    function get_ColumnGap: UInt32;
    procedure set_ColumnGap(value: UInt32);
    function get_RowGapRule: DNMathSpacingRules;
    procedure set_RowGapRule(value: DNMathSpacingRules);
    function get_RowGap: UInt32;
    procedure set_RowGap(value: UInt32);

  { methods } 

    ///<summary>
    ///  Get the horizontal alignment of the specified column
    ///</summary>
    ///  <param name="columnIndex">Zero-based column index</param>
    ///<returns>Horizontal Alignment of specified column</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  MathHorizontalAlignment alignment = matrix.GetColumnAlignment(0);
    ///</code></example>
    function GetColumnAlignment(columnIndex: Int32): DNMathHorizontalAlignment;
    ///<summary>
    ///  Set the horizontal alignment of the specified column
    ///</summary>
    ///  <param name="columnIndex">Zero-based column index</param>
    ///  <param name="val">New value of horizontal alignment of specified column</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.SetColumnAlignment(0, MathHorizontalAlignment.Left);
    ///</code></example>
    procedure SetColumnAlignment(columnIndex: Int32; val: DNMathHorizontalAlignment);
    ///<summary>
    ///  Set the horizontal alignment of the specified columns
    ///</summary>
    ///  <param name="columnIndex">Zero-based index of the first column to set alignment</param>
    ///  <param name="columnsCount">The number of columns to specify the alignment</param>
    ///  <param name="val">New value of horizontal alignment of specified column</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.SetColumnAlignment(0, 3, MathHorizontalAlignment.Left);
    ///</code></example>
    procedure SetColumnsAlignment(columnIndex: Int32; columnsCount: UInt32; val: DNMathHorizontalAlignment);
    ///<summary>
    ///  Insert a new row before the specified one
    ///  Initially all elements in the new row are null.
    ///</summary>
    ///  <param name="rowIndex">Index of the row before which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertRowBefore(1);
    ///</code></example>
    procedure InsertRowBefore(rowIndex: Int32);
    ///<summary>
    ///  Insert a new row after the specified one
    ///  Initially all elements in the new row are null.
    ///</summary>
    ///  <param name="rowIndex">Index of the row after which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertRowAfter(1);
    ///</code></example>
    procedure InsertRowAfter(rowIndex: Int32);
    ///<summary>
    ///  Deletes the specified row
    ///</summary>
    ///  <param name="rowIndex">The zero-based index of the row to delete.</param>
    ///<exception cref="T:System.InvalidOperationException">When you try to delete the last single row in the matrix</exception><exception cref="T:System.ArgumentOutOfRangeException">If rowIndex less than zero or greater or equal to the RowCount</exception><example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.DeleteRow(0);
    ///</code></example>
    procedure DeleteRow(rowIndex: Int32);
    ///<summary>
    ///  Insert a new column before the specified one
    ///  Initially all elements in the new column are null.
    ///</summary>
    ///  <param name="columnIndex">Index of the column before which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertColumnBefore(0);
    ///</code></example>
    procedure InsertColumnBefore(columnIndex: Int32);
    ///<summary>
    ///  Insert a new column after the specified one
    ///  Initially all elements in the new column are null.
    ///</summary>
    ///  <param name="columnIndex">Index of the column after which to insert a new one</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.InsertColumnAfter(0);
    ///</code></example>
    procedure InsertColumnAfter(columnIndex: Int32);
    ///<summary>
    ///  Deletes the specified column
    ///</summary>
    ///  <param name="columnIndex">The zero-based index of the column to delete.</param>
    ///<exception cref="T:System.InvalidOperationException">When you try to delete the last single column in the matrix</exception><exception cref="T:System.ArgumentOutOfRangeException">If columnIndex less than zero or greater or equal to the ColumnCount</exception><example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.DeleteColumn(0);
    ///</code></example>
    procedure DeleteColumn(columnIndex: Int32);
    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Number of rows in the matrix
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  int rowCount = matrix.RowCount;
    ///</code></example>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  Number of columns in the matrix
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  int columnCount = matrix.ColumnCount;
    ///</code></example>
    property ColumnCount: Int32 read get_ColumnCount;
    ///<summary>
    ///  Hide the placeholders for empty matrix elements
    ///  Default: false
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.HidePlaceholders = true;
    ///</code></example>
    property HidePlaceholders: Boolean read get_HidePlaceholders write set_HidePlaceholders;
    ///<summary>
    ///  Specifies the vertical justification respect to surrounding text.
    ///  Possible values are top, bottom, and center.
    ///  Default: Center
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.BaseJustification = MathVerticalAlignment.Center;
    ///</code></example>
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    ///<summary>
    ///  Minimum column width in twips (1/20th of a point)
    ///  The gap spacing (also referred to as “Column Gap” or “Gap Width”) is added to
    ///  the MinColumnWidth to determine the total Matrix Column Spacing
    ///  (distance between the same edges of different columns).
    ///  Default: 0.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.MinColumnWidth = 20;
    ///</code></example>
    property MinColumnWidth: UInt32 read get_MinColumnWidth write set_MinColumnWidth;
    ///<summary>
    ///  The type of horizontal spacing between columns of a matrix;
    ///  Horizontal spacing units can be ems or points (stored as twips).
    ///  Default: SingleSpacingGap (0)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.ColumnGapRule = MathSpacingRules.OneAndHalfSpacingGap;
    ///</code></example>
    property ColumnGapRule: DNMathSpacingRules read get_ColumnGapRule write set_ColumnGapRule;
    ///<summary>
    ///  The value of horizontal spacing between columns of a matrix;
    ///  If the ColumnGapRule is set to 3 ("Exactly"), then the unit is interpreted as twips (1/20th of a point)
    ///  If the ColumnGapRule is set to 4 ("Multiple"), then the unit is interpreted as number of 0.5 em increments.
    ///  In other cases ignored.
    ///  Default: 0
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.ColumnGapRule = MathSpacingRules.Exactly;
    ///  matrix.ColumnGap = 20;
    ///</code></example>
    property ColumnGap: UInt32 read get_ColumnGap write set_ColumnGap;
    ///<summary>
    ///  The type of vertical spacing between rows of a matrix;
    ///  Vertical spacing units can be lines or points (stored as twips).
    ///  Default: SingleSpacingGap (0)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.RowGapRule = MathSpacingRules.OneAndHalfSpacingGap;
    ///</code></example>
    property RowGapRule: DNMathSpacingRules read get_RowGapRule write set_RowGapRule;
    ///<summary>
    ///  The value of vertical spacing between rows of a matrix;
    ///  If the RowGapRule is set to 3 ("Exactly"), then the unit is interpreted as twips (1/20th of a point)
    ///  If the RowGapRule is set to 4 ("Multiple"), then the unit is interpreted as half-lines.
    ///  Default: 0
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathMatrix matrix = new MathMatrix(2, 3);
    ///  matrix.RowGapRule = MathSpacingRules.Exactly;
    ///  matrix.RowGap = 20;
    ///</code></example>
    property RowGap: UInt32 read get_RowGap write set_RowGap;
  end;

  TDNMathMatrix = class(TDNGenericImport<DNMathMatrixClass, DNMathMatrix>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathNaryOperatorClass = interface(DNMathElementBaseClass)
  ['{E03D5862-215A-5DBD-9304-7D1BF250F753}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathNaryOperator class.
    ///</summary>
    ///  <param name="operatorSymbol">Nary operator symbol</param>
    ///  <param name="baseArgument">Base argument</param>
    ///  <param name="lowerLimit">Lower limit</param>
    ///  <param name="upperLimit">Upper limit</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathNaryOperator('∑', new MathematicalText("i"), new MathematicalText("i=0"), new MathematicalText("𝑛"));
    ///</code></example>
    {class} function init(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNMathNaryOperator; overload;
    ///<summary>
    ///  Initializes a new instance of the MathNaryOperator class.
    ///</summary>
    ///  <param name="operatorSymbol">Nary operator symbol</param>
    ///  <param name="baseArgument">Base argument</param>
    ///  <param name="lowerLimit">Lower limit</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathNaryOperator('∑', new MathematicalText("i"), new MathematicalText("i"));
    ///</code></example>
    {class} function init(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement): DNMathNaryOperator; overload;
    ///<summary>
    ///  Initializes a new instance of the MathNaryOperator class.
    ///</summary>
    ///  <param name="operatorSymbol">Nary operator symbol</param>
    ///  <param name="baseArgument">Base argument</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathNaryOperator('∑', new MathematicalText("i"));
    ///</code></example>
    {class} function init(operatorSymbol: Char; baseArgument: DNIMathElement): DNMathNaryOperator; overload;

  end;

  ///<summary>
  ///  Specifies an N-ary mathematical object, such as Summation and Integral.
  ///  It consists of an operator, a base (or operand), and optional upper and lower limits.
  ///  Examples of N-ary operators are: Summation, Union, Intersection, Integral
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathNaryOperator')]
  DNMathNaryOperator = interface(DNMathElementBase)
  ['{2B879544-23A1-489F-8EB3-5F4B55CB25C5}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_Operator: Char;
    procedure set_Operator(value: Char);
    function get_LimitLocation: DNMathLimitLocations;
    procedure set_LimitLocation(value: DNMathLimitLocations);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_HideSubscript: Boolean;
    procedure set_HideSubscript(value: Boolean);
    function get_HideSuperscript: Boolean;
    procedure set_HideSuperscript(value: Boolean);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  IMathElement baseArg = naryOperator.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Specifies a subscript argument that, for example, in the case of an integral, sets the lower limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  IMathElement subscriptArg = naryOperator.Subscript;
    ///</code></example>
    property Subscript: DNIMathElement read get_Subscript;
    ///<summary>
    ///  Specifies a supersript argument that, for example, in the case of an integral, sets the upper limit
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  IMathElement superscriptArg = naryOperator.Superscript;
    ///</code></example>
    property Superscript: DNIMathElement read get_Superscript;
    ///<summary>
    ///  Nary Operator Character
    ///  For example: '∑', '∫'
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  char operatorSymbol = naryOperator.Operator;
    ///</code></example>
    property Operator: Char read get_Operator write set_Operator;
    ///<summary>
    ///  The location of limits (subscript and superscript)
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.LimitLocation = MathLimitLocations.SubscriptSuperscript;
    ///</code></example>
    property LimitLocation: DNMathLimitLocations read get_LimitLocation write set_LimitLocation;
    ///<summary>
    ///  Operator Character grows vertically to match its operand height
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.GrowToMatchOperandHeight = true;
    ///</code></example>
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    ///<summary>
    ///  Hide Subscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.HideSubscript = true;
    ///</code></example>
    property HideSubscript: Boolean read get_HideSubscript write set_HideSubscript;
    ///<summary>
    ///  Hide Superscript
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("x").Nary(MathNaryOperatorTypes.Summation, "x=1", "100");
    ///  naryOperator.HideSuperscript = true;
    ///</code></example>
    property HideSuperscript: Boolean read get_HideSuperscript write set_HideSuperscript;
  end;

  TDNMathNaryOperator = class(TDNGenericImport<DNMathNaryOperatorClass, DNMathNaryOperator>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRadicalClass = interface(DNMathElementBaseClass)
  ['{27C324DB-C062-542E-901F-7AC9E51C87C6}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathRadical class.
    ///</summary>
    ///  <param name="baseArgument">Base</param>
    ///  <param name="degreeArgument">Degree</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathRadical radical = new MathRadical(new MathematicalText("x"), new MathematicalText("3"));
    ///</code></example>
    {class} function init(baseArgument: DNIMathElement; degreeArgument: DNIMathElement): DNMathRadical;

  end;

  ///<summary>
  ///  Specifies the radical function, consisting of a base, and an optional degree.
  ///  Example of radical object is √𝑥.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  MathRadical radical = new MathRadical(new MathematicalText("x"), new MathematicalText("3"));
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathRadical')]
  DNMathRadical = interface(DNMathElementBase)
  ['{E42264B9-D074-4326-A8A4-0EDC055695F7}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Degree: DNIMathElement;
    function get_HideDegree: Boolean;
    procedure set_HideDegree(value: Boolean);

  { methods } 

    ///<summary>
    ///  Joins a mathematical element and forms a mathematical block
    ///</summary>
    ///  <param name="mathElement">The element to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element1 = new MathematicalText("x");
    ///  IMathElement element2 = new MathematicalText("y");
    ///  IMathBlock block = element1.Join(element2);
    ///</code></example>
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    ///<summary>
    ///  Joins a mathematical text and forms a mathematical block
    ///</summary>
    ///  <param name="mathText">Mathematical text to be joined</param>
    ///<returns>A new IMathBlock containing this instance and specified argument</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathBlock block = element.Join("+y");
    ///</code></example>
    function Join(mathText: string): DNIMathBlock; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator);
    ///</code></example>
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y");
    ///</code></example>
    function Divide(denominator: string): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathElement denumerator = new MathematicalText("y");
    ///  IMathFraction fraction = numerator.Divide(denumerator, MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a fraction of the specified type with this numerator and specified denominator
    ///</summary>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type: Bar, NoBar, Skewed, Linear</param>
    ///<returns>new fraction</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement numerator = new MathematicalText("x");
    ///  IMathFraction fraction = numerator.Divide("y", MathFractionTypes.Linear);
    ///</code></example>
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Encloses a math element in parenthesis
    ///</summary>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes the parenthesis</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose();
    ///</code></example>
    function Enclose: DNIMathDelimiter; overload;
    ///<summary>
    ///  Encloses a math element in specified characters such as parenthesis or another characters as framing
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("x");
    ///  IMathDelimiter delimiter = element.Enclose('[', ']');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionName.Function(functionArg);
    ///</code></example>
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes a function of an argument using this instance as the function name
    ///</summary>
    ///  <param name="functionArgument">An argument of the function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathFunction func = functionName.Function("x");
    ///</code></example>
    function &Function(functionArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionName">Function name</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction("cos");
    ///</code></example>
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of one argument</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionName = new MathematicalText("sin");
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(functionName);
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathElement logarithmBase = new MathematicalText("5");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, logarithmBase); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Takes specified function using this instance as the argument and specified additional argument
    ///</summary>
    ///  <param name="functionType">One of the common function type of two arguments: Log, Lim, Min, Max</param>
    ///  <param name="additionalArgument">Additional argument depending on the type of function</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathFunction" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement functionArg = new MathematicalText("x");
    ///  IMathFunction func = functionArg.AsArgumentOfFunction(MathFunctionsOfTwoArguments.Log, "5"); // Returns the logarithm of 'x' to the base '5'
    ///</code></example>
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("i");
    ///  IMathSubscriptElement subscript = element.SetSubscript(index);
    ///</code></example>
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates subscript
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSubscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSubscriptElement subscript = element.SetSubscript("i");
    ///</code></example>
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathElement index = new MathematicalText("4");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript(index);
    ///</code></example>
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates superscript
    ///</summary>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement element = new MathematicalText("N");
    ///  IMathSuperscriptElement superscript = element.SetSuperscript("4");
    ///</code></example>
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the right
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the right)</param>
    ///  <param name="superscript">Superscript (upper index on the right)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathRightSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathRightSubSuperscriptElement subsuperscript = baseElement.SetSubSuperscriptOnTheRight("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathElement subscript = new MathematicalText("i");
    ///  IMathElement superscript = new MathematicalText("j");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft(subscript, superscript);
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Creates subscript and superscript on the left
    ///</summary>
    ///  <param name="subscript">Subscript (lower index on the left)</param>
    ///  <param name="superscript">Superscript (upper index on the left)</param>
    ///<returns>New math element of type <see cref="T:Aspose.Slides.MathText.IMathLeftSubSuperscriptElement" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("N");
    ///  IMathLeftSubSuperscriptElement leftSubsuperscript = baseElement.SetSubSuperscriptOnTheLeft("i", "j");
    ///</code></example>
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  IMathElement degree = new MathematicalText("y");
    ///  var radical = baseElement.Radical(degree);
    ///</code></example>
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    ///<summary>
    ///  Specifies the mathematical root of the given degree from the specified argument.
    ///</summary>
    ///  <param name="degree">Argument of Radical</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathRadical" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("2px");
    ///  var radical = baseElement.Radical("3");
    ///</code></example>
    function Radical(degree: string): DNIMathRadical; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  IMathElement limitValue = new MathematicalText("y−&gt;1");
    ///  var limitElement = baseElement.SetUpperLimit(limitValue);
    ///</code></example>
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes upper limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("y");
    ///  var limitElement = baseElement.SetUpperLimit("y−&gt;1");
    ///</code></example>
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  IMathElement limitValue = new MathematicalText("𝑛→∞");
    ///  var limitElement = baseElement.SetLowerLimit(limitValue);
    ///</code></example>
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    ///<summary>
    ///  Takes lower limit
    ///</summary>
    ///  <param name="limit">limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathLimit" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("lim");
    ///  var limitElement = baseElement.SetLowerLimit("𝑛→∞");
    ///</code></example>
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("i-1");
    ///  IMathElement lowerLimit = new MathematicalText("i=0");
    ///  IMathElement upperLimit = new MathematicalText("𝑛");
    ///  IMathNaryOperator naryOperator = baseElement.Nary(MathNaryOperatorTypes.Summation, lowerLimit, upperLimit);
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates a N-ary operator
    ///</summary>
    ///  <param name="type">The N-ary operator type</param>
    ///  <param name="lowerLimit">The lower limit</param>
    ///  <param name="upperLimit">The upper limit</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathNaryOperator naryOperator = new MathematicalText("i").Nary(MathNaryOperatorTypes.Summation, "i=0", "𝑛");
    ///</code></example>
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Puts in a vertical array
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathArray" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathArray array = new MathematicalText("x1").Join("x2").Join("x3").ToMathArray();
    ///</code></example>
    function ToMathArray: DNIMathArray;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathElement lowerLimit = new MathematicalText("1");
    ///  IMathElement upperLimit = new MathematicalText("2");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, lowerLimit, upperLimit, MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral without limits
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Contour);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///  <param name="limitLocations">location of limits</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5", MathLimitLocations.UnderOver);
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Takes the integral
    ///</summary>
    ///  <param name="integralType">Integral type</param>
    ///  <param name="lowerLimit">Lower limit of integral</param>
    ///  <param name="upperLimit">Upper limit of integral</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathNaryOperator" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElement baseElement = new MathematicalText("𝑥");
    ///  IMathNaryOperator integral = baseElement.Integral(MathIntegralTypes.Simple, "1", "5");
    ///</code></example>
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Sets an accent mark (a character on the top of this element)
    ///</summary>
    ///  <param name="accentCharacter">Accent character. The value should be within the range of (U+0300–U+036F) or (U+20D0–U+20EF)</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathAccent" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathAccent accent = new MathematicalText("x").Accent('~');
    ///</code></example>
    function Accent(accentCharacter: Char): DNIMathAccent;
    ///<summary>
    ///  Sets a bar on the top of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Overbar();
    ///</code></example>
    function Overbar: DNIMathBar;
    ///<summary>
    ///  Sets a bar on the bottom of this element
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathBar" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBar bar = new MathematicalText("x").Underbar();
    ///</code></example>
    function Underbar: DNIMathBar;
    ///<summary>
    ///  Places this element in a group using a bottom curly bracket
    ///</summary>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group();
    ///</code></example>
    function Group: DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a group using a grouping character such as bottom curly bracket or another
    ///</summary>
    ///  <param name="character">Grouping Character such as BOTTOM CURLY BRACKET (U+23DF) or any other</param>
    ///  <param name="position">Position of grouping character</param>
    ///  <param name="verticalJustification">
    ///  Vertical justification of group character.
    ///  Specifies the alignment of the object with respect to the baseline.
    ///  For example, when the group character is above the object,
    ///  VerticalJustification of Top signifies that the top of the object falls on the baseline;
    ///  when VerticalJustification is set to Bottom, the bottom of the object is on the baseline
    ///</param>
    ///<returns>New instance of type <see cref="T:Aspose.Slides.MathText.IMathGroupingCharacter" />
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathGroupingCharacter groupingElement = new MathematicalText("x;y;z").Group('\u23E1', MathTopBotPositions.Bottom, MathTopBotPositions.Top);
    ///</code></example>
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox();
    ///</code></example>
    function ToBorderBox: DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a border-box
    ///</summary>
    ///  <param name="hideTop">Hide Top Edge </param>
    ///  <param name="hideBottom">Hide Bottom Edge</param>
    ///  <param name="hideLeft">Hide Left Edge</param>
    ///  <param name="hideRight">Hide Right Edge</param>
    ///  <param name="strikethroughHorizontal">Border Box Strikethrough Horizontal</param>
    ///  <param name="strikethroughVertical">Border Box Strikethrough Vertical</param>
    ///  <param name="strikethroughBottomLeftToTopRight">Border Box Strikethrough Bottom-Left to Top-Right</param>
    ///  <param name="strikethroughTopLeftToBottomRight">Border Box Strikethrough Top-Left to Bottom-Right</param>
    ///<returns>Border-box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBorderBox borderBox = new MathematicalText("x+y+z").ToBorderBox(false, false, true, true, false, false, false, false);
    ///</code></example>
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    ///<summary>
    ///  Places this element in a non-visual box (logical grouping)
    ///  which is used to group components of an equation or other instance of mathematical text.
    ///  A boxed object can (for example) serve as an operator emulator with or without an alignment point,
    ///  serve as a line break point, or be grouped such as not to allow line breaks within.
    ///</summary>
    ///<returns>Logical box with this element placed inside</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBox box = new MathematicalText("x:=y").ToBox();
    ///</code></example>
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Base argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathRadical radical = new MathRadical(new MathematicalText("x"), new MathematicalText("3"));
    ///  IMathElement baseElem = radical.Base;
    ///</code></example>
    property Base: DNIMathElement read get_Base;
    ///<summary>
    ///  Degree argument
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathRadical radical = new MathRadical(new MathematicalText("x"), new MathematicalText("3"));
    ///  IMathElement degreeElem = radical.Degree;
    ///</code></example>
    property Degree: DNIMathElement read get_Degree;
    ///<summary>
    ///  Hide degree
    ///  When is true, the degree is not shown, as in √𝑥
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathRadical radical = new MathRadical(new MathematicalText("x"), new MathematicalText("3"));
    ///  radical.HideDegree = true;
    ///</code></example>
    property HideDegree: Boolean read get_HideDegree write set_HideDegree;
  end;

  TDNMathRadical = class(TDNGenericImport<DNMathRadicalClass, DNMathRadical>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathematicalTextFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A44EFA59-B481-5DA6-BF87-9AE81B20A92B}']
  { constructors } 

    {class} function init: DNMathematicalTextFactory;

  end;

  ///<summary>
  ///  Allows to create a MathematicalText element
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathematicalTextFactory')]
  DNMathematicalTextFactory = interface(DDN.mscorlib.DNObject)
  ['{37B10373-08FC-44F0-83B1-65DC80395614}']
  { methods } 

    ///<summary>
    ///  Create empty mathematical text element
    ///</summary>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText: DNIMathematicalText; overload;
    ///<summary>
    ///  Create mathematical text element with the specified value
    ///</summary>
    ///  <param name="mathSymbol">single symbol to use as text value</param>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText(mathSymbol: Char): DNIMathematicalText; overload;
    ///<summary>
    ///  Create empty mathematical text element with the specified value
    ///</summary>
    ///  <param name="mathText">text value</param>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText(mathText: string): DNIMathematicalText; overload;
    ///<summary>
    ///  Create empty mathematical text element with the specified value and formatting properties
    ///</summary>
    ///  <param name="mathText">text value</param>
    ///  <param name="portionFormat">text format settings</param>
    ///<returns>new Mathematical Text</returns>
    function CreateMathematicalText(mathText: string; portionFormat: DNIPortionFormat): DNIMathematicalText; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathematicalTextFactory = class(TDNGenericImport<DNMathematicalTextFactoryClass, DNMathematicalTextFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFractionFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E05759B8-AC85-5075-8D31-00AC38538A90}']
  { constructors } 

    {class} function init: DNMathFractionFactory;

  end;

  ///<summary>
  ///  Allows to create a math fraction
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathFractionFactory')]
  DNMathFractionFactory = interface(DDN.mscorlib.DNObject)
  ['{BC06DF71-66F4-48F8-B50F-3394496AED3D}']
  { methods } 

    ///<summary>
    ///  Creates a math fraction
    ///</summary>
    ///  <param name="numerator">Numerator</param>
    ///  <param name="denominator">Denominator</param>
    ///  <param name="fractionType">Fraction type</param>
    ///<returns></returns>
    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    ///<summary>
    ///  Creates a math fraction
    ///</summary>
    ///  <param name="numerator">Numerator</param>
    ///  <param name="denominator">Denominator</param>
    ///<returns></returns>
    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement): DNIMathFraction; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathFractionFactory = class(TDNGenericImport<DNMathFractionFactoryClass, DNMathFractionFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFunctionFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DECA063F-E709-5EC5-B3D3-69699882862C}']
  { constructors } 

    {class} function init: DNMathFunctionFactory;

  end;

  ///<summary>
  ///  Allows to create a math function
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathFunctionFactory')]
  DNMathFunctionFactory = interface(DDN.mscorlib.DNObject)
  ['{FD0C5323-3F57-4512-A4AC-7F261C5D063C}']
  { methods } 

    ///<summary>
    ///  Creates math function
    ///</summary>
    ///  <param name="funcName">Element used as a function name</param>
    ///  <param name="baseArgument">Element used as a function argument</param>
    ///<returns>new math function</returns>
    function CreateMathFunction(funcName: DNIMathElement; baseArgument: DNIMathElement): DNIMathFunction; overload;
    ///<summary>
    ///  Creates math function
    ///</summary>
    ///  <param name="funcName">Function name</param>
    ///  <param name="baseArgument">Element used as a function argument</param>
    ///<returns>new math function</returns>
    function CreateMathFunction(funcName: string; baseArgument: DNIMathElement): DNIMathFunction; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathFunctionFactory = class(TDNGenericImport<DNMathFunctionFactoryClass, DNMathFunctionFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathGroupingCharacterFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{95468031-2C2F-5BFE-86D1-19B5B6D03FCB}']
  { constructors } 

    {class} function init: DNMathGroupingCharacterFactory;

  end;

  ///<summary>
  ///  Allows to create a math grouping character
  ///</summary>
  ///<remarks>
  ///  For COM compatibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathGroupingCharacterFactory')]
  DNMathGroupingCharacterFactory = interface(DDN.mscorlib.DNObject)
  ['{8A29D4EA-D06C-4BDB-8F61-85E960F68CBE}']
  { methods } 

    ///<summary>
    ///  Creates a math grouping character
    ///</summary>
    ///  <param name="element">math element to apply grouping character</param>
    ///  <param name="character">grouping character</param>
    ///  <param name="position">position of grouping character</param>
    ///  <param name="verticalJustification">vertical justification</param>
    ///<returns>new grouping character element</returns>
    function CreateMathGroupingCharacter(element: DNIMathElement; character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    ///<summary>
    ///  Creates a math grouping character
    ///</summary>
    ///  <param name="element">math element to apply grouping character</param>
    ///<returns>new grouping character element</returns>
    function CreateMathGroupingCharacter(element: DNIMathElement): DNIMathGroupingCharacter; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathGroupingCharacterFactory = class(TDNGenericImport<DNMathGroupingCharacterFactoryClass, DNMathGroupingCharacterFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLeftSubSuperscriptElementFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{406792F7-4249-5B5E-940C-26975E0C3CE0}']
  { constructors } 

    {class} function init: DNMathLeftSubSuperscriptElementFactory;

  end;

  ///<summary>
  ///  Allows to create IMathLeftSubSuperscriptElement
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathLeftSubSuperscriptElementFactory')]
  DNMathLeftSubSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{CF61F9FD-DBCF-46EA-9D32-B0F499D4C6F8}']
  { methods } 

    ///<summary>
    ///  Creates IMathLeftSubSuperscriptElement
    ///</summary>
    ///  <param name="baseArg">Base argument to apply indexes</param>
    ///  <param name="subScript">lower left index</param>
    ///  <param name="superScript">upper left index</param>
    ///<returns>new IMathLeftSubSuperscriptElement</returns>
    function CreateMathLeftSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathLeftSubSuperscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathLeftSubSuperscriptElementFactory = class(TDNGenericImport<DNMathLeftSubSuperscriptElementFactoryClass, DNMathLeftSubSuperscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLimitFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3F8DF8B-748E-501A-A805-2D9962F7A5BD}']
  { constructors } 

    {class} function init: DNMathLimitFactory;

  end;

  ///<summary>
  ///  Allows to create IMathLimit
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathLimitFactory')]
  DNMathLimitFactory = interface(DDN.mscorlib.DNObject)
  ['{9B864B6C-754E-4A1F-BEFC-66AE0CF7803C}']
  { methods } 

    ///<summary>
    ///  Creates IMathLimit
    ///</summary>
    ///  <param name="baseArg">Base argument to apply the limit</param>
    ///  <param name="limit">Limit element</param>
    ///  <param name="upperLimit">Sets the placement of the limit on top</param>
    ///<returns>new math limit</returns>
    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement; upperLimit: Boolean): DNIMathLimit; overload;
    ///<summary>
    ///  Creates IMathLimit with limit at the bottom
    ///</summary>
    ///  <param name="baseArg">Base argument to apply the limit</param>
    ///  <param name="limit">Limit element</param>
    ///<returns>new math limit</returns>
    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement): DNIMathLimit; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathLimitFactory = class(TDNGenericImport<DNMathLimitFactoryClass, DNMathLimitFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathMatrixFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{36BBEA1A-130A-5EAF-AC41-A87D2CC3078F}']
  { constructors } 

    {class} function init: DNMathMatrixFactory;

  end;

  ///<summary>
  ///  Allows to create a math matrix
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathMatrixFactory')]
  DNMathMatrixFactory = interface(DDN.mscorlib.DNObject)
  ['{DF98A30E-E6BA-40D8-AB4E-B3AC12309B35}']
  { methods } 

    ///<summary>
    ///  Creates a math matrix
    ///</summary>
    ///  <param name="rowCount">row count</param>
    ///  <param name="columnCount">column count</param>
    ///<returns>new math matrix</returns>
    function CreateMathMatrix(rowCount: Int32; columnCount: Int32): DNIMathMatrix;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathMatrixFactory = class(TDNGenericImport<DNMathMatrixFactoryClass, DNMathMatrixFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathNaryOperatorFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE21597C-2D22-508B-A3AA-5B6AC2FBC7CB}']
  { constructors } 

    {class} function init: DNMathNaryOperatorFactory;

  end;

  ///<summary>
  ///  Allows to create IMathNaryOperator
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathNaryOperatorFactory')]
  DNMathNaryOperatorFactory = interface(DDN.mscorlib.DNObject)
  ['{8E7E895D-CD85-4E6C-ABEC-A5FA03A7CFE9}']
  { methods } 

    ///<summary>
    ///  Creates IMathNaryOperator
    ///</summary>
    ///  <param name="operatorSymbol">The operator sign</param>
    ///  <param name="baseArgument">Base argument to apply operator</param>
    ///  <param name="lowerLimit">Lower limit</param>
    ///  <param name="upperLimit">Upper limit </param>
    ///<returns>new IMathNaryOperator</returns>
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates IMathNaryOperator
    ///</summary>
    ///  <param name="operatorSymbol">The operator sign</param>
    ///  <param name="baseArgument">Base argument to apply operator</param>
    ///  <param name="lowerLimit">Lower limit</param>
    ///<returns>new IMathNaryOperator</returns>
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement): DNIMathNaryOperator; overload;
    ///<summary>
    ///  Creates IMathNaryOperator
    ///</summary>
    ///  <param name="operatorSymbol">The operator sign</param>
    ///  <param name="baseArgument">Base argument to apply operator</param>
    ///<returns>new IMathNaryOperator</returns>
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement): DNIMathNaryOperator; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathNaryOperatorFactory = class(TDNGenericImport<DNMathNaryOperatorFactoryClass, DNMathNaryOperatorFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9537BF4B-E444-55A5-9163-3296B411E344}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathParagraph class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathParagraph mathParagraph = new MathParagraph();
    ///</code></example>
    {class} function init: DNMathParagraph; overload;
    ///<summary>
    ///  Initializes a new instance of the MathParagraph class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathParagraph mathParagraph = new MathParagraph(new MathBlock());
    ///</code></example>
    {class} function init(mathBlock: DNIMathBlock): DNMathParagraph; overload;

  end;

  ///<summary>
  ///  Mathematical paragraph that is a container for mathematical blocks (IMathBlock)
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
  ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
  ///  mathParagraph.Justification = MathJustification.LeftJustified;
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathParagraph')]
  DNMathParagraph = interface(DDN.mscorlib.DNObject)
  ['{E2173ACA-B662-4556-9118-81A3CF0F2C88}']
  { getters & setters } 

    function get_Justification: DNMathJustification;
    procedure set_Justification(value: DNMathJustification);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="mathBlock">The object to locate in the collection.</param>
    ///<returns>
    ///  true if <paramref name="mathBlock" />
    ///  is found in the collection; otherwise, false.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  mathParagraph.Add(block);
    ///  bool contains = mathParagraph.Contains(block);
    ///</code></example>
    function &Contains(mathBlock: DNIMathBlock): Boolean;
    ///<summary>
    ///  Determines the index of a specific IMathBlock in collection.
    ///</summary>
    ///  <param name="mathBlock">The item to locate in the collection.</param>
    ///<returns>
    ///  The index of <paramref name="mathBlock" />
    ///  if found in the collection; otherwise, -1.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  mathParagraph.Add(block);
    ///  int index = mathParagraph.IndexOf(block);
    ///</code></example>
    function IndexOf(mathBlock: DNIMathBlock): Int32;
    ///<summary>
    ///  Inserts IMathBlock into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which an item should be inserted.</param>
    ///  <param name="mathBlock">The IMathBlock to insert.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  mathParagraph.Insert(0, block);
    ///</code></example>
    procedure Insert(index: Int32; mathBlock: DNIMathBlock);
    ///<summary>
    ///  Removes an item at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the item to remove.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  mathParagraph.Add(block);
    ///  mathParagraph.RemoveAt(0);
    ///</code></example>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Saves content of this <see cref="T:Aspose.Slides.MathText.MathParagraph" />
    ///  as MathML
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Paragraph Justification
    ///  Default value: CenteredAsGroup
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  mathParagraph.Justification = MathJustification.LeftJustified;
    ///</code></example>
    property Justification: DNMathJustification read get_Justification write set_Justification;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  MathParagraph mathParagraph = new MathParagraph();
    ///  int blocksCount = mathParagraph.Count;
    ///</code></example>
    property Count: Int32 read get_Count;
  end;

  TDNMathParagraph = class(TDNGenericImport<DNMathParagraphClass, DNMathParagraph>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathParagraphFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{78DECC79-C353-5AFA-A515-C54FA36F5539}']
  { constructors } 

    {class} function init: DNMathParagraphFactory;

  end;

  ///<summary>
  ///  Allows to create a math paragraph
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathParagraphFactory')]
  DNMathParagraphFactory = interface(DDN.mscorlib.DNObject)
  ['{59FEE207-5835-4359-96B7-3B0CCC62A3D8}']
  { methods } 

    ///<summary>
    ///  Create empty math paragraph
    ///</summary>
    ///<returns>new math paragraph</returns>
    function CreateMathParagraph: DNIMathParagraph; overload;
    ///<summary>
    ///  Creates a math paragraph and places the specified math block in it
    ///</summary>
    ///  <param name="mathBlock">math block to place in the paragraph</param>
    ///<returns>new math paragraph</returns>
    function CreateMathParagraph(mathBlock: DNIMathBlock): DNIMathParagraph; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathParagraphFactory = class(TDNGenericImport<DNMathParagraphFactoryClass, DNMathParagraphFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRadicalFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9812C24D-F9F7-5F04-A4B4-2B22EF82B9ED}']
  { constructors } 

    {class} function init: DNMathRadicalFactory;

  end;

  ///<summary>
  ///  Allows to create math radical
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathRadicalFactory')]
  DNMathRadicalFactory = interface(DDN.mscorlib.DNObject)
  ['{DCF2ADA6-CF56-4ADB-AAE6-0CA7681FA464}']
  { methods } 

    ///<summary>
    ///  Creates a math radical
    ///</summary>
    ///  <param name="baseArgument">Base argument to apply radical</param>
    ///  <param name="degreeArgument">Degree value</param>
    ///<returns>new radical element</returns>
    function CreateMathRadical(baseArgument: DNIMathElement; degreeArgument: DNIMathElement): DNIMathRadical;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathRadicalFactory = class(TDNGenericImport<DNMathRadicalFactoryClass, DNMathRadicalFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRightSubSuperscriptElementFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DFA9B279-296D-51C3-9BFD-59E5ECF25213}']
  { constructors } 

    {class} function init: DNMathRightSubSuperscriptElementFactory;

  end;

  ///<summary>
  ///  Allows to create IMathRightSubSuperscriptElementFactory
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathRightSubSuperscriptElementFactory')]
  DNMathRightSubSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{6DC32072-9866-4C68-8E0D-D00634D98999}']
  { methods } 

    ///<summary>
    ///  Creates an instance of IMathRightSubSuperscriptElementFactory
    ///</summary>
    ///  <param name="baseArg">Base argument to apply indexes</param>
    ///  <param name="subScript">lower right index</param>
    ///  <param name="superScript">upper right index</param>
    ///<returns>new IMathLeftSubSuperscriptElement</returns>
    function CreateMathRightSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathRightSubSuperscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathRightSubSuperscriptElementFactory = class(TDNGenericImport<DNMathRightSubSuperscriptElementFactoryClass, DNMathRightSubSuperscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSubscriptElementFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{98387BC0-C4B2-534B-A967-209D2FC9560E}']
  { constructors } 

    {class} function init: DNMathSubscriptElementFactory;

  end;

  ///<summary>
  ///  Allows to create IMathSubscriptElement
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathSubscriptElementFactory')]
  DNMathSubscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{820AEA07-3E4F-4903-8832-66C31D4A65F5}']
  { methods } 

    ///<summary>
    ///  Creates IMathSubscriptElement
    ///</summary>
    ///  <param name="baseArg">Base argument to apply indexe</param>
    ///  <param name="subScript">lower right index</param>
    ///<returns>new IMathSubscriptElement</returns>
    function CreateMathSubscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement): DNIMathSubscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathSubscriptElementFactory = class(TDNGenericImport<DNMathSubscriptElementFactoryClass, DNMathSubscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSuperscriptElementFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1AC9A764-0416-549B-BFFA-DDFC856D387F}']
  { constructors } 

    {class} function init: DNMathSuperscriptElementFactory;

  end;

  ///<summary>
  ///  Allows to create IMathSuperscriptElement
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.MathText.MathSuperscriptElementFactory')]
  DNMathSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{BF79794D-8E6B-4D0B-873B-B75D746B96C0}']
  { methods } 

    ///<summary>
    ///  Creates IMathSuperscriptElement
    ///</summary>
    ///  <param name="baseArg">Base argument to apply superscript</param>
    ///  <param name="superScript">upper right index</param>
    ///<returns>new IMathSuperscriptElement</returns>
    function CreateMathSuperscriptElement(baseArg: DNIMathElement; superScript: DNIMathElement): DNIMathSuperscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathSuperscriptElementFactory = class(TDNGenericImport<DNMathSuperscriptElementFactoryClass, DNMathSuperscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D38E8EAF-3C4F-5DAD-A0F5-7FB73061EA0C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init: DNMetered;

  { static methods } 

    ///<summary>
    ///  Gets consumption file size
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  Gets consumption credit
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  ///<summary>
  ///  Provides methods to set metered key.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to set metered public and private key
  ///<code>
  ///  [C#]
  ///  Metered matered = new Metered();
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey");
  ///  [Visual Basic]
  ///  Dim matered As Metered = New Metered
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey")
  ///</code></example>
  [DNTypeName('Aspose.Slides.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{D9EB26C5-DDB7-48E3-BCA5-D5487DE81E31}']
  { methods } 

    ///<summary>
    ///  Sets metered public and private key
    ///</summary>
    ///  <param name="publicKey">public key</param>
    ///  <param name="privateKey">private key</param>
    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNormalViewPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{023398C7-0A45-5D6D-B872-67CE3960A564}']
  end;

  ///<summary>
  ///  Represents normal view properties. The normal view consists of
  ///  three content regions: the slide itself, a side content region, and a bottom content region.
  ///</summary>
  [DNTypeName('Aspose.Slides.NormalViewProperties')]
  DNNormalViewProperties = interface(DDN.mscorlib.DNObject)
  ['{1E2AA737-F321-4E49-A78D-791209AF8BD3}']
  { getters & setters } 

    function get_ShowOutlineIcons: Boolean;
    procedure set_ShowOutlineIcons(value: Boolean);
    function get_SnapVerticalSplitter: Boolean;
    procedure set_SnapVerticalSplitter(value: Boolean);
    function get_VerticalBarState: DNSplitterBarStateType;
    procedure set_VerticalBarState(value: DNSplitterBarStateType);
    function get_HorizontalBarState: DNSplitterBarStateType;
    procedure set_HorizontalBarState(value: DNSplitterBarStateType);
    function get_PreferSingleView: Boolean;
    procedure set_PreferSingleView(value: Boolean);
    function get_RestoredLeft: DNINormalViewRestoredProperties;
    function get_RestoredTop: DNINormalViewRestoredProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the application should show icons if displaying outline content in any
    ///  of the content regions of normal view mode.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowOutlineIcons: Boolean read get_ShowOutlineIcons write set_ShowOutlineIcons;
    ///<summary>
    ///  Specifies whether the vertical splitter should snap to a minimized state when the side
    ///  region is sufficiently small.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SnapVerticalSplitter: Boolean read get_SnapVerticalSplitter write set_SnapVerticalSplitter;
    ///<summary>
    ///  Specifies the state that the vertical splitter bar should be shown in.
    ///  A vertical splitter bar separates the slide from the side content region.
    ///</summary>
    ///  Read/write <see cref="T:Aspose.Slides.SplitterBarStateType" />
    property VerticalBarState: DNSplitterBarStateType read get_VerticalBarState write set_VerticalBarState;
    ///<summary>
    ///  Specifies the state that the horizontal splitter bar should be shown in.
    ///  A horizontal splitter bar separates the slide from the content region below the slide.
    ///</summary>
    ///  Read/write <see cref="T:Aspose.Slides.SplitterBarStateType" />
    property HorizontalBarState: DNSplitterBarStateType read get_HorizontalBarState write set_HorizontalBarState;
    ///<summary>
    ///  Specifies whether the user prefers to see a full-window single-content region over the
    ///  standard normal view with three content regions. If enabled, the application may choose
    ///  to display one of the content regions in the entire window.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PreferSingleView: Boolean read get_PreferSingleView write set_PreferSingleView;
    ///<summary>
    ///  This element specifies the sizing of the side content region of the normal view, when the region is of a variable
    ///  restored size(neither minimized nor maximized).
    ///  Read opnly <see cref="T:Aspose.Slides.INormalViewRestoredProperties" />
    ///  .
    ///</summary>
    property RestoredLeft: DNINormalViewRestoredProperties read get_RestoredLeft;
    ///<summary>
    ///  This element specifies the sizing of the top slide region of the normal view, when the region is of a variable
    ///  restored size(neither minimized nor maximized).
    ///  Read only <see cref="T:Aspose.Slides.INormalViewRestoredProperties" />
    ///  .
    ///</summary>
    property RestoredTop: DNINormalViewRestoredProperties read get_RestoredTop;
  end;

  TDNNormalViewProperties = class(TDNGenericImport<DNNormalViewPropertiesClass, DNNormalViewProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNormalViewRestoredPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80573F27-FCD2-5754-858C-C1A8285BC915}']
  end;

  ///<summary>
  ///  Specifies the sizing of the slide region ((width when a child of restoredTop, height when a
  ///  child of restoredLeft) of the normal view, when the region is of a variable restored size(neither minimized nor maximized).
  ///</summary>
  [DNTypeName('Aspose.Slides.NormalViewRestoredProperties')]
  DNNormalViewRestoredProperties = interface(DDN.mscorlib.DNObject)
  ['{0BBAD280-C35E-30CD-B0DE-43AE9AA45F2B}']
  { getters & setters } 

    function get_DimensionSize: Single;
    procedure set_DimensionSize(value: Single);
    function get_AutoAdjust: Boolean;
    procedure set_AutoAdjust(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the size of the slide region (width when a child of RestoredTop, height when a
    ///  child of RestoredLeft).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Throws when value less than 0 ar greater than 100.</exception>
    property DimensionSize: Single read get_DimensionSize write set_DimensionSize;
    ///<summary>
    ///  Specifies whether the size of the side content region should compensate for the new size
    ///  when resizing the window containing the view within the application
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AutoAdjust: Boolean read get_AutoAdjust write set_AutoAdjust;
  end;

  TDNNormalViewRestoredProperties = class(TDNGenericImport<DNNormalViewRestoredPropertiesClass, DNNormalViewRestoredProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1CA171F-20C8-5209-899D-C7DF638FCF90}']
  { constructors } 

    {class} function init: DNNotesSize;

  end;

  ///<summary>
  ///  Represents a size of notes slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.NotesSize')]
  DNNotesSize = interface(DDN.mscorlib.DNObject)
  ['{18301B63-E99F-4EC1-B6F9-00B386636C6D}']
  { getters & setters } 

    function get_Size: DDN.Aspose.Common.DNSizeF;
    procedure set_Size(value: DDN.Aspose.Common.DNSizeF);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the size in points.
    ///  Read/write <see cref="T:System.Drawing.SizeF" />
    ///  .
    ///</summary>
    property Size: DDN.Aspose.Common.DNSizeF read get_Size write set_Size;
  end;

  TDNNotesSize = class(TDNGenericImport<DNNotesSizeClass, DNNotesSize>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSlideManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BD59D7E-7EDD-5BF6-818D-5AD0647ECFB2}']
  end;

  ///<summary>
  ///  Notes slide manager.
  ///</summary>
  [DNTypeName('Aspose.Slides.NotesSlideManager')]
  DNNotesSlideManager = interface(DDN.mscorlib.DNObject)
  ['{3E44ADC7-123A-3737-933A-7598B33592AB}']
  { getters & setters } 

    function get_NotesSlide: DNINotesSlide;

  { methods } 

    ///<summary>
    ///  Returns the notes slide for the current slide, creating one if there isn't.
    ///</summary>
    ///<returns><see cref="P:Aspose.Slides.NotesSlideManager.NotesSlide" />
    ///  for this slide.</returns>
    function AddNotesSlide: DNINotesSlide;
    ///<summary>
    ///  Removes notes slide of the current slide.
    ///</summary>
    procedure RemoveNotesSlide;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the notes slide for the current slide. Returns null if slide doesn't have notes slide.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSlide" />
    ///  .
    ///</summary>
    property NotesSlide: DNINotesSlide read get_NotesSlide;
  end;

  TDNNotesSlideManager = class(TDNGenericImport<DNNotesSlideManagerClass, DNNotesSlideManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58A62781-603A-5AD4-B164-024BFD403399}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the Paragraph class with default properties.
    ///</summary>
    {class} function init: DNParagraph; overload;
    ///<summary>
    ///  Copy constructor that initializes a new instance of a Paragraph class.
    ///</summary>
    {class} function init(para: DNParagraph): DNParagraph; overload;

  end;

  ///<summary>
  ///  Represents a paragraph of text.
  ///</summary>
  [DNTypeName('Aspose.Slides.Paragraph')]
  DNParagraph = interface(DDN.mscorlib.DNObject)
  ['{13A09689-4561-4EB0-AD64-BD08927115E2}']
  { getters & setters } 

    function get_Portions: DNIPortionCollection;
    function get_ParagraphFormat: DNIParagraphFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_EndParagraphPortionFormat: DNIPortionFormat;
    procedure set_EndParagraphPortionFormat(value: DNIPortionFormat);

  { methods } 

    ///<summary>
    ///  Joins runs with same formatting.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;
    ///<summary>
    ///  Get coordinates of rect that bounds paragraph. The rect includes all the lines of
    ///  text in paragraph, including empty ones.
    ///</summary>
    function GetRect: DDN.Aspose.Common.DNRectangleF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the collection of a text portions.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionCollection" />
    ///  .
    ///</summary>
    property Portions: DNIPortionCollection read get_Portions;
    ///<summary>
    ///  Returns the formatting object for this paragraph.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .
    ///</summary>
    ///<remarks><para>The formatting object contains the formatting parameters defined for the current paragraph only, inherited data is not applied.</para><para>In order to get the effective values including inherited ones use the <see cref="M:Aspose.Slides.ParagraphFormat.GetEffective" />
    ///  method.</para></remarks>
    property ParagraphFormat: DNIParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Gets or sets the the plain text of a paragraph.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Specifies the portion properties that are to be used if another portion is inserted after
    ///  the last one.
    ///</summary>
    property EndParagraphPortionFormat: DNIPortionFormat read get_EndParagraphPortionFormat write set_EndParagraphPortionFormat;
  end;

  TDNParagraph = class(TDNGenericImport<DNParagraphClass, DNParagraph>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7115FD65-9DEE-585A-A01F-2B49408D319A}']
  end;

  ///<summary>
  ///  Represents a collection of a paragraphs.
  ///</summary>
  [DNTypeName('Aspose.Slides.ParagraphCollection')]
  DNParagraphCollection = interface(DDN.mscorlib.DNObject)
  ['{15B212AE-8349-3A81-9C8E-0F90C56C4489}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the list; otherwise, -1.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .</param>
    function IndexOf(item: DNIParagraph): Int32;
    ///<summary>
    ///  Inserts a Paragraph into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which Paragraph should be inserted.</param>
    ///  <param name="value">The Paragraph to insert.</param>
    procedure Insert(index: Int32; value: DNIParagraph); overload;
    ///<summary>
    ///  Inserts a content of ParagraphCollection into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which paragraphs should be inserted.</param>
    ///  <param name="value">The paragraphs to insert.</param>
    procedure Insert(index: Int32; value: DNIParagraphCollection); overload;
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIParagraph): Boolean;
    ///<summary>
    ///  Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular <see cref="T:System.Array" />
    ///  index.
    ///</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="arrayIndex">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is greater than the available space from <paramref name="arrayIndex" />
    ///  to the end of the destination <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNIParagraph>; arrayIndex: Int32);
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIParagraph>;
    ///<summary>
    ///  Adds text from specified html string to the collection.
    ///</summary>
    ///  <param name="text">HTML text.</param>
    procedure AddFromHtml(text: string); overload;
    ///<summary>
    ///  Adds text from specified html string to the collection.
    ///</summary>
    ///  <param name="text">HTML text.</param>
    ///  <param name="resolver">Resolver callback object which resolves URIs and fetches referrenced objects.</param>
    ///  <param name="uri">URI for adding HTML document. Used for resolving relative links.</param>
    ///<remarks>Specifying resolver can potentially introduce a vulnurability. Use with caution.</remarks>
    procedure AddFromHtml(text: string; resolver: DNIExternalResourceResolver; uri: string); overload;
    ///<summary>
    ///  Converts specifying paragraphs to the HTML and returns it as String object.
    ///</summary>
    ///  <param name="firstParagraphIndex">First paragraph index <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="paragraphsCount">Paragraph count <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="options">Convert options <see cref="T:Aspose.Slides.Export.ITextToHtmlConversionOptions" />
    ///</param>
    ///<returns>Generated HTML.</returns>
    function ExportToHtml(firstParagraphIndex: Int32; paragraphsCount: Int32; options: DNITextToHtmlConversionOptions): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only; otherwise, false.
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNParagraphCollection = class(TDNGenericImport<DNParagraphCollectionClass, DNParagraphCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C35E7932-C551-5B67-B2CA-ABFD4EFFC783}']
  { constructors } 

    {class} function init: DNParagraphFactory;

  end;

  ///<summary>
  ///  Allows to create paragraphs
  ///</summary>
  ///<remarks>
  ///  For COM compatibility.
  ///</remarks>
  [DNTypeName('Aspose.Slides.ParagraphFactory')]
  DNParagraphFactory = interface(DDN.mscorlib.DNObject)
  ['{433F6A50-4B40-4049-9A8D-430AB48DD0DC}']
  { methods } 

    ///<summary>
    ///  Creates a new empty paragraph.
    ///</summary>
    ///<returns>Paragraph.</returns>
    function CreateParagraph: DNIParagraph; overload;
    ///<summary>
    ///  Creates a new paragraph with specified paragraph data using.
    ///</summary>
    ///  <param name="paragraph">A paragraph to use data.</param>
    ///<returns>Paragraph.</returns>
    function CreateParagraph(paragraph: DNIParagraph): DNIParagraph; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParagraphFactory = class(TDNGenericImport<DNParagraphFactoryClass, DNParagraphFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPathSegmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C5AAD654-DAB6-53C8-9FD4-A79B3BB1CDF5}']
  end;

  ///<summary>
  ///  Represents segment of graphics path of GeometryShape
  ///</summary>
  [DNTypeName('Aspose.Slides.PathSegment')]
  DNPathSegment = interface(DDN.mscorlib.DNObject)
  ['{53E6B81D-F33F-4A32-BAF2-3866B524CB25}']
  { getters & setters } 

    function get_SegmentData: TArray<Single>;
    function get_PathCommand: DNPathCommandType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path data of the segment
    ///</summary>
    property SegmentData: TArray<Single> read get_SegmentData;
    ///<summary>
    ///  Path type of the segment
    ///</summary>
    property PathCommand: DNPathCommandType read get_PathCommand;
  end;

  TDNPathSegment = class(TDNGenericImport<DNPathSegmentClass, DNPathSegment>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPlaceholderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6C2AB41C-82CA-50CC-B0DA-F81CA0E3EFDB}']
  end;

  ///<summary>
  ///  Represents a placeholder on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Placeholder')]
  DNPlaceholder = interface(DDN.mscorlib.DNObject)
  ['{F18B3BFC-E6A5-32F2-AED6-62971D7D103D}']
  { getters & setters } 

    function get_Orientation: DNOrientation;
    function get_Size: DNPlaceholderSize;
    function get_Type: DNPlaceholderType;
    function get_Index: UInt32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the orientation of a placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.Orientation" />
    ///  .
    ///</summary>
    property Orientation: DNOrientation read get_Orientation;
    ///<summary>
    ///  Gets or sets the size of a placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.PlaceholderSize" />
    ///  .
    ///</summary>
    property Size: DNPlaceholderSize read get_Size;
    ///<summary>
    ///  Gets or sets the type of a placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.PlaceholderType" />
    ///  .
    ///</summary>
    property &Type: DNPlaceholderType read get_Type;
    ///<summary>
    ///  Gets or sets the index of a placeholder.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property Index: UInt32 read get_Index;
  end;

  TDNPlaceholder = class(TDNGenericImport<DNPlaceholderClass, DNPlaceholder>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6B18AED7-A65F-5EB2-8E39-26E59BC95C26}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the Portion class.
    ///</summary>
    {class} function init: DNPortion; overload;
    ///<summary>
    ///  Initializes a new instance of the Portion class.
    ///</summary>
    {class} function init(str: string): DNPortion; overload;
    ///<summary>
    ///  Initializes a new instance of the Portion class.
    ///</summary>
    {class} function init(portion: DNPortion): DNPortion; overload;

  end;

  ///<summary>
  ///  Represents a portion of text inside a text paragraph.
  ///</summary>
  [DNTypeName('Aspose.Slides.Portion')]
  DNPortion = interface(DDN.mscorlib.DNObject)
  ['{657E9B28-2FD4-4FC5-BF8B-31F8FFF8A08C}']
  { getters & setters } 

    function get_PortionFormat: DNIPortionFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Field: DNIField;

  { methods } 

    ///<summary>
    ///  Converts this portion to the automaticaly updated field.
    ///</summary>
    procedure AddField(fieldType: DNIFieldType); overload;
    ///<summary>
    ///  Converts this portion to the automaticaly updated field.
    ///</summary>
    ///  <param name="internalString">
    ///  Internal name of FieldType.
    ///</param>
    procedure AddField(internalString: string); overload;
    ///<summary>
    ///  Converts this field portion to the simple portion.
    ///</summary>
    procedure RemoveField;
    ///<summary>
    ///  Get coordinates of rect that bounds portion. The rect includes all the lines of
    ///  text in portion, including empty ones.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  IAutoShape shape = slide.Shapes.AddAutoShape(ShapeType.Rectangle, 50, 50, 200, 50);
    ///  shape.TextFrame.Paragraphs[0].Portions.Clear();
    ///  var portion0 = new Portion("Some text");
    ///  var portion1 = new Portion("GetRect text");
    ///  shape.TextFrame.Paragraphs[0].Portions.Add(portion0);
    ///  shape.TextFrame.Paragraphs[0].Portions.Add(portion1);
    ///  RectangleF rect = shape.TextFrame.Paragraphs[0].Portions[1].GetRect();
    ///  ...
    ///  }
    ///</code></example>
    function GetRect: DDN.Aspose.Common.DNRectangleF;
    ///<summary>
    ///  Get coordinates of the beginning of the portion. The X coordinate of point represents the
    ///  portion beginning from the first character including left side bearing. The Y coordinate
    ///  includes top side bearing.
    ///</summary>
    function GetCoordinates: DDN.Aspose.Common.DNPointF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns oformatting bject which contains explicitly set formatting properties of the text portion with no inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionFormat" />
    ///  .
    ///</summary>
    ///<remarks><para>The formatting object contains the formatting parameters defined for the current portion only, inherited data is not applied.</para><para>In order to get the effective values including inherited ones use the <see cref="M:Aspose.Slides.PortionFormat.GetEffective" />
    ///  method.</para></remarks>
    property PortionFormat: DNIPortionFormat read get_PortionFormat;
    ///<summary>
    ///  Gets or sets the plain text of a portion.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns a field of this portion.
    ///  Read-only <see cref="T:Aspose.Slides.IField" />
    ///  .
    ///</summary>
    property Field: DNIField read get_Field;
  end;

  TDNPortion = class(TDNGenericImport<DNPortionClass, DNPortion>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathPortionClass = interface(DNPortionClass)
  ['{EA98B7C0-3356-5F3D-80C2-88685F82ACD6}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the MathPortion class.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes.AddMathShape(0, 0, 300, 50);
    ///  IParagraph paragraph = shape.TextFrame.Paragraphs[0];
    ///  MathPortion mathPortion = new MathPortion();
    ///  paragraph.Portions.Add(mathPortion);
    ///  }
    ///</code></example>
    {class} function init: DNMathPortion;

  end;

  ///<summary>
  ///  Represents a portion with mathematical context inside.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  using (Presentation pres = new Presentation())
  ///  {
  ///  IAutoShape shape = pres.Slides[0].Shapes.AddMathShape(0, 0, 300, 50);
  ///  IParagraph paragraph = shape.TextFrame.Paragraphs[0];
  ///  MathPortion mathPortion = new MathPortion();
  ///  paragraph.Portions.Add(mathPortion);
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.MathPortion')]
  DNMathPortion = interface(DNPortion)
  ['{6DC78CB1-FAEC-43FE-9A6A-CBCDDC36074F}']
  { getters & setters } 

    function get_MathParagraph: DNIMathParagraph;
    function get_PortionFormat: DNIPortionFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Field: DNIField;

  { methods } 

    ///<summary>
    ///  Converts this portion to the automaticaly updated field.
    ///</summary>
    procedure AddField(fieldType: DNIFieldType); overload;
    ///<summary>
    ///  Converts this portion to the automaticaly updated field.
    ///</summary>
    ///  <param name="internalString">
    ///  Internal name of FieldType.
    ///</param>
    procedure AddField(internalString: string); overload;
    ///<summary>
    ///  Converts this field portion to the simple portion.
    ///</summary>
    procedure RemoveField;
    ///<summary>
    ///  Get coordinates of rect that bounds portion. The rect includes all the lines of
    ///  text in portion, including empty ones.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  IAutoShape shape = slide.Shapes.AddAutoShape(ShapeType.Rectangle, 50, 50, 200, 50);
    ///  shape.TextFrame.Paragraphs[0].Portions.Clear();
    ///  var portion0 = new Portion("Some text");
    ///  var portion1 = new Portion("GetRect text");
    ///  shape.TextFrame.Paragraphs[0].Portions.Add(portion0);
    ///  shape.TextFrame.Paragraphs[0].Portions.Add(portion1);
    ///  RectangleF rect = shape.TextFrame.Paragraphs[0].Portions[1].GetRect();
    ///  ...
    ///  }
    ///</code></example>
    function GetRect: DDN.Aspose.Common.DNRectangleF;
    ///<summary>
    ///  Get coordinates of the beginning of the portion. The X coordinate of point represents the
    ///  portion beginning from the first character including left side bearing. The Y coordinate
    ///  includes top side bearing.
    ///</summary>
    function GetCoordinates: DDN.Aspose.Common.DNPointF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Math paragraph
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes.AddMathShape(0, 0, 300, 50);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  mathParagraph.Add(new MathBlock(new MathematicalText("x+y")));
    ///  }
    ///</code></example>
    property MathParagraph: DNIMathParagraph read get_MathParagraph;
    ///<summary>
    ///  Returns oformatting bject which contains explicitly set formatting properties of the text portion with no inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IPortionFormat" />
    ///  .
    ///</summary>
    ///<remarks><para>The formatting object contains the formatting parameters defined for the current portion only, inherited data is not applied.</para><para>In order to get the effective values including inherited ones use the <see cref="M:Aspose.Slides.PortionFormat.GetEffective" />
    ///  method.</para></remarks>
    property PortionFormat: DNIPortionFormat read get_PortionFormat;
    ///<summary>
    ///  Gets or sets the plain text of a portion.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns a field of this portion.
    ///  Read-only <see cref="T:Aspose.Slides.IField" />
    ///  .
    ///</summary>
    property Field: DNIField read get_Field;
  end;

  TDNMathPortion = class(TDNGenericImport<DNMathPortionClass, DNMathPortion>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54D7A6B3-3653-555E-B88A-5F70F4409CF6}']
  end;

  ///<summary>
  ///  Represents a collection of portions.
  ///</summary>
  [DNTypeName('Aspose.Slides.PortionCollection')]
  DNPortionCollection = interface(DDN.mscorlib.DNObject)
  ['{A211D181-B29E-39ED-8898-99117BD68F04}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the list; otherwise, -1.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .</param>
    function IndexOf(item: DNIPortion): Int32;
    ///<summary>
    ///  Inserts a Portion into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which Portion should be inserted.</param>
    ///  <param name="value">The Portion to insert.</param>
    procedure Insert(index: Int32; value: DNIPortion);
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIPortion): Boolean;
    ///<summary>
    ///  Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular <see cref="T:System.Array" />
    ///  index.
    ///</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="arrayIndex">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is greater than the available space from <paramref name="arrayIndex" />
    ///  to the end of the destination <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNIPortion>; arrayIndex: Int32);
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPortion>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only; otherwise, false.
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNPortionCollection = class(TDNGenericImport<DNPortionCollectionClass, DNPortionCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{56A70E0B-88AA-5519-A623-28A927C28A90}']
  { constructors } 

    {class} function init: DNPortionFactory;

  end;

  ///<summary>
  ///  Allows to create test portions
  ///</summary>
  ///<remarks>
  ///  For COM comparibility
  ///</remarks>
  [DNTypeName('Aspose.Slides.PortionFactory')]
  DNPortionFactory = interface(DDN.mscorlib.DNObject)
  ['{F167E33E-B57B-4CDF-82D8-A93A0076FB2B}']
  { methods } 

    ///<summary>
    ///  Creates an empty text portion.
    ///</summary>
    ///<returns>Portion.</returns>
    function CreatePortion: DNIPortion; overload;
    ///<summary>
    ///  Creates a text portion from specified string.
    ///</summary>
    ///  <param name="str">String.</param>
    ///<returns>Portion.</returns>
    function CreatePortion(str: string): DNIPortion; overload;
    ///<summary>
    ///  Creates a portion with the using of a specified portion data.
    ///</summary>
    ///  <param name="portion">A portion to use.</param>
    ///<returns>Portion.</returns>
    function CreatePortion(portion: DNIPortion): DNIPortion; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPortionFactory = class(TDNGenericImport<DNPortionFactoryClass, DNPortionFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPPImageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F056F7CD-2F17-5035-910B-925E7FD57B74}']
  end;

  ///<summary>
  ///  Represents an image in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.PPImage')]
  DNPPImage = interface(DDN.mscorlib.DNObject)
  ['{476F193F-99DD-38D0-BD14-0B69CBE6DD5E}']
  { getters & setters } 

    function get_BinaryData: TArray<Byte>;
    function get_SystemImage: DDN.Aspose.Common.DNImage;
    function get_SvgImage: DNISvgImage;
    procedure set_SvgImage(value: DNISvgImage);
    function get_ContentType: string;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_X: Int32;
    function get_Y: Int32;

  { methods } 

    ///<summary>
    ///  Replaces image data.
    ///  <param name="newImageData">The new image's data.</param>
    ///<exception cref="T:System.ArgumentNullException">When newImageData parameter is null.</exception></summary>
    procedure ReplaceImage(newImageData: TArray<Byte>); overload;
    ///<summary>
    ///  Replaces image data. Attention: when Image is metafile - it will be rasterized due to restrictions of GDI+. Use ReplaceImage(byte[]) instead
    ///  <param name="newImage">The new image.</param>
    ///<exception cref="T:System.ArgumentNullException">When newImage parameter is null.</exception></summary>
    procedure ReplaceImage(newImage: DDN.Aspose.Common.DNImage); overload;
    ///<summary>
    ///  Replaces image data.
    ///  <param name="newImage">The new IPPImage.</param>
    ///<exception cref="T:System.ArgumentNullException">When newImage parameter is null.</exception></summary>
    procedure ReplaceImage(newImage: DNIPPImage); overload;
    ///<summary>
    ///  Returns the hash code of an image.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  Disposes object.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the copy of an image's data.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property BinaryData: TArray<Byte> read get_BinaryData;
    ///<summary>
    ///  Returns the copy of an image.
    ///  Read-only <see cref="T:System.Drawing.Image" />
    ///  .
    ///</summary>
    property SystemImage: DDN.Aspose.Common.DNImage read get_SystemImage;
    ///<summary>
    ///  Returns or sets ISvgImage object <see cref="T:Aspose.Slides.ISvgImage" />
    ///</summary>
    ///<remarks>This value indicates that this image has been created from SVG.</remarks>
    property SvgImage: DNISvgImage read get_SvgImage write set_SvgImage;
    ///<summary>
    ///  Returns a MIME type of an image, encoded in <see cref="P:Aspose.Slides.PPImage.BinaryData" />
    ///  .
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  Returns a width of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Returns a height of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  Returns a X-offset of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property X: Int32 read get_X;
    ///<summary>
    ///  Returns a Y-offset of an image.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Y: Int32 read get_Y;
  end;

  TDNPPImage = class(TDNGenericImport<DNPPImageClass, DNPPImage>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{634263A3-BDD0-53D8-87B9-1A146A317B68}']
  { constructors } 

    ///<summary>
    ///  This constructor creates new presentation from scratch.
    ///  Created presentation has one empty slide.
    ///</summary>
    {class} function init: DNPresentation; overload;
    ///<summary>
    ///  This constructor creates new presentation from scratch.
    ///  Created presentation has one empty slide.
    ///</summary>
    ///  <param name="loadOptions">Additional load options.</param>
    {class} function init(loadOptions: DNLoadOptions): DNPresentation; overload;
    ///<summary>
    ///  This constructor is the primary mechanism for reading an existing Presentation.
    ///</summary>
    ///  <param name="stream">Input stream.</param>
    ///<example><code>
    ///  [C#]
    ///  FileStream fis = new FileStream("demo.pptx", FileMode.Open, FileAccess.Read);
    ///  Presentation pres = new Presentation(fis);
    ///  fis.Close();
    ///  [Visual Basic]
    ///  Dim fis As FileStream = New FileStream("demo.pptx", FileMode.Open, FileAccess.Read)
    ///  Dim pres As Presentation = New Presentation(fis)
    ///  fis.Close()
    ///</code></example>
    {class} function init(stream: DDN.mscorlib.DNStream): DNPresentation; overload;
    ///<summary>
    ///  This constructor is the primary mechanism for reading an existing Presentation.
    ///</summary>
    ///  <param name="stream">Input stream.</param>
    ///  <param name="loadOptions">Additional load options.</param>
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNPresentation; overload;
    ///<summary>
    ///  This constructor gets a source file path from which
    ///  the contents of the Presentation are read.
    ///</summary>
    ///  <param name="file">Input file.</param>
    ///<exception cref="T:System.ArgumentException">Thrown when input file has zero length</exception><example><code>
    ///  [C#]
    ///  Presentation pres = new Presentation("demo.pptx");
    ///  [Visual Basic]
    ///  Dim pres As Presentation = New Presentation("demo.pptx")
    ///</code></example>
    {class} function init(&file: string): DNPresentation; overload;
    ///<summary>
    ///  This constructor gets a source file path from which
    ///  the contents of the Presentation are read.
    ///</summary>
    ///  <param name="file">Input file.</param>
    ///  <param name="loadOptions">Additional load options.</param>
    ///<exception cref="T:System.ArgumentException">Thrown when input file has zero length</exception>
    {class} function init(&file: string; loadOptions: DNLoadOptions): DNPresentation; overload;

  end;

  ///<summary>
  ///  Represents a Microsoft PowerPoint presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Presentation')]
  DNPresentation = interface(DDN.mscorlib.DNObject)
  ['{43247D92-4BB9-4883-B807-4B77B186C741}']
  { getters & setters } 

    function get_CurrentDateTime: DDN.mscorlib.DNDateTime;
    procedure set_CurrentDateTime(value: DDN.mscorlib.DNDateTime);
    function get_HeaderFooterManager: DNIPresentationHeaderFooterManager;
    function get_ProtectionManager: DNIProtectionManager;
    function get_Slides: DNISlideCollection;
    function get_Sections: DNISectionCollection;
    function get_SlideSize: DNISlideSize;
    function get_NotesSize: DNINotesSize;
    function get_LayoutSlides: DNIGlobalLayoutSlideCollection;
    function get_Masters: DNIMasterSlideCollection;
    function get_MasterNotesSlideManager: DNIMasterNotesSlideManager;
    function get_MasterHandoutSlideManager: DNIMasterHandoutSlideManager;
    function get_FontsManager: DNIFontsManager;
    function get_DefaultTextStyle: DNITextStyle;
    function get_CommentAuthors: DNICommentAuthorCollection;
    function get_DocumentProperties: DNIDocumentProperties;
    function get_Images: DNIImageCollection;
    function get_Audios: DNIAudioCollection;
    function get_Videos: DNIVideoCollection;
    function get_DigitalSignatures: DNIDigitalSignatureCollection;
    function get_CustomData: DNICustomData;
    function get_AllCustomXmlParts: TArray<DNICustomXmlPart>;
    function get_VbaProject: DNIVbaProject;
    procedure set_VbaProject(value: DNIVbaProject);
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ViewProperties: DNIViewProperties;
    function get_FirstSlideNumber: Int32;
    procedure set_FirstSlideNumber(value: Int32);
    function get_SourceFormat: DNSourceFormat;
    function get_MasterTheme: DNIMasterTheme;

  { methods } 

    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with specified size.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with specified size.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with specified size.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with specified size.
    ///</summary>
    ///  <param name="options">Tiff options.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a file with the specified format with page number keeping.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///<exception cref="T:System.ArgumentNullException">When stream or slides parameter is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">When slides parameter contains wrong page numbers.</exception><exception cref="T:System.InvalidOperationException">When an unsupported SaveFormat is used, e.g. PPTX, PPTM, PPSX, PPSM, POTX, POTM, PPT, ODP.</exception>
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a file with the specified format with page number keeping.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a stream in the specified format with page number keeping.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a stream in the specified format with page number keeping.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    ///<exception cref="T:System.ArgumentNullException">When stream or slides parameter is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">When slides parameter contains wrong page numbers.</exception><exception cref="T:System.InvalidOperationException">When an unsupported SaveFormat is used, e.g. PPTX, PPTM, PPSX, PPSM, POTX, POTM, PPT, ODP.</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Prints the whole presentation to the default printer.
    ///</summary>
    procedure Print; overload;
    ///<summary>
    ///  Prints the presentation according to the specified printer settings,
    ///  using the standard (no User Interface) print controller.
    ///</summary>
    ///  <param name="printerSettings">The .NET printer settings to use.</param>
    procedure Print(printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Print the whole presentation to the specified printer,
    ///  using the standard (no User Interface) print controller.
    ///</summary>
    ///  <param name="printerName">The name of the printer.</param>
    procedure Print(printerName: string); overload;
    ///<summary>
    ///  Prints the document according to the specified printer settings, using
    ///  the standard (no User Interface) print controller and a presentation name.
    ///</summary>
    ///  <param name="printerSettings">The .NET printer settings to use.</param>
    ///  <param name="presName">The presentation name to display (for example, in a print
    ///  status dialog box or printer queue) while printing the presentation.</param>
    procedure Print(printerSettings: DDN.Aspose.Common.DNPrinterSettings; presName: string); overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes in all slides.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;
    ///<summary>
    ///  Releases all resources used by this Presentation object.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Returns a Slide, MasterSlide or LayoutSlide by Id.
    ///</summary>
    ///  <param name="id">Id of a slide.</param>
    ///<returns>IBaseSlide object.</returns>
    function GetSlideById(id: UInt32): DNIBaseSlide;
    ///<summary>
    ///  Saves all slides of a presentation to a file with the specified format.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="format">Format of the exported data.</param>
    procedure Save(fname: string; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="format">Format of the exported data.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a file with the specified format and with additional options.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    procedure Save(fname: string; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a stream in the specified format and with additional options.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    ///<exception cref="T:System.NotSupportedException">If you try to save encrypted file in
    ///  none Office 2007-2010 format</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a set of files representing XAML markup.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  pres.Save(new XamlOptions { ExportHiddenSlides = true });
    ///  }
    ///</code></example><param name="options">The XAML format options.</param>
    procedure Save(options: DNIXamlOptions); overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets date and time which will substitute content of datetime fields.
    ///  Time of this Presentation object creation by default.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    property CurrentDateTime: DDN.mscorlib.DNDateTime read get_CurrentDateTime write set_CurrentDateTime;
    ///<summary>
    ///  Returns actual HeaderFooter manager.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentationHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIPresentationHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Gets manager of the permissions for this presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IProtectionManager" />
    ///  .
    ///</summary>
    property ProtectionManager: DNIProtectionManager read get_ProtectionManager;
    ///<summary>
    ///  Returns a list of all slides that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideCollection" />
    ///  .
    ///</summary>
    property Slides: DNISlideCollection read get_Slides;
    ///<summary>
    ///  Returns a list of all slides sections that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.ISectionCollection" />
    ///  .
    ///</summary>
    property Sections: DNISectionCollection read get_Sections;
    ///<summary>
    ///  Returns slide size object.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideSize" />
    ///  .
    ///</summary>
    property SlideSize: DNISlideSize read get_SlideSize;
    ///<summary>
    ///  Returns notes slide size object.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSize" />
    ///  .
    ///</summary>
    property NotesSize: DNINotesSize read get_NotesSize;
    ///<summary>
    ///  Returns a list of all layout slides that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IGlobalLayoutSlideCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  You can access to alternative API for adding/inserting/removing/cloning layout slides
    ///  by using IMasterSlide.LayoutSlides property.
    ///</remarks>
    property LayoutSlides: DNIGlobalLayoutSlideCollection read get_LayoutSlides;
    ///<summary>
    ///  Returns a list of all master slides that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterSlideCollection" />
    ///  .
    ///</summary>
    property Masters: DNIMasterSlideCollection read get_Masters;
    ///<summary>
    ///  Returns notes master manager.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterNotesSlideManager" />
    ///  .
    ///</summary>
    property MasterNotesSlideManager: DNIMasterNotesSlideManager read get_MasterNotesSlideManager;
    ///<summary>
    ///  Returns handout master manager.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterHandoutSlideManager" />
    ///  .
    ///</summary>
    property MasterHandoutSlideManager: DNIMasterHandoutSlideManager read get_MasterHandoutSlideManager;
    ///<summary>
    ///  Returns fonts manager.
    ///  Read-only <see cref="T:Aspose.Slides.IFontsManager" />
    ///  .
    ///</summary>
    property FontsManager: DNIFontsManager read get_FontsManager;
    ///<summary>
    ///  Returns default text style for shapes.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property DefaultTextStyle: DNITextStyle read get_DefaultTextStyle;
    ///<summary>
    ///  Returns the collection of comments autors.
    ///  Read-only <see cref="T:Aspose.Slides.ICommentAuthorCollection" />
    ///  .
    ///</summary>
    property CommentAuthors: DNICommentAuthorCollection read get_CommentAuthors;
    ///<summary>
    ///  Returns DocumentProperties object which contains standard and custom document properties.
    ///  Read-only <see cref="T:Aspose.Slides.IDocumentProperties" />
    ///  .
    ///</summary>
    property DocumentProperties: DNIDocumentProperties read get_DocumentProperties;
    ///<summary>
    ///  Returns the collection of all images in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IImageCollection" />
    ///  .
    ///</summary>
    property Images: DNIImageCollection read get_Images;
    ///<summary>
    ///  Returns the collection of all embedded audio files in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IAudioCollection" />
    ///  .
    ///</summary>
    property Audios: DNIAudioCollection read get_Audios;
    ///<summary>
    ///  Returns the collection of all embedded video files in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IVideoCollection" />
    ///  .
    ///</summary>
    property Videos: DNIVideoCollection read get_Videos;
    ///<summary>
    ///  Returns the collection of signatures used to sign the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IDigitalSignatureCollection" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentationSigned.pptx"))
    ///  {
    ///  if (pres.DigitalSignatures.Count &gt; 0)
    ///  {
    ///  bool allSignaturesAreValid = true;
    ///  Console.WriteLine("Signatures used to sign the presentation: ");
    ///  foreach (DigitalSignature signature in pres.DigitalSignatures)
    ///  {
    ///  Console.WriteLine(signature.Certificate.SubjectName.Name + ", "
    ///  + signature.SignTime.ToString("yyyy-MM-dd HH:mm") + " -- " + (signature.IsValid ? "VALID" : "INVALID"));
    ///  allSignaturesAreValid &amp;= signature.IsValid;
    ///  }
    ///  if (allSignaturesAreValid)
    ///  Console.WriteLine("Presentation is genuine, all signatures are valid.");
    ///  else
    ///  Console.WriteLine("Presentation has been modified since signing.");
    ///  }
    ///  }
    ///</code></example>
    property DigitalSignatures: DNIDigitalSignatureCollection read get_DigitalSignatures;
    ///<summary>
    ///  Returns the presentation's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns all custom data parts in the presentaion.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomXmlPart" />
    ///  [].
    ///</summary>
    property AllCustomXmlParts: TArray<DNICustomXmlPart> read get_AllCustomXmlParts;
    ///<summary>
    ///  Gets or sets VBA project with presentation macros.
    ///  Read/write <see cref="T:Aspose.Slides.Vba.IVbaProject" />
    ///  .
    ///</summary>
    property VbaProject: DNIVbaProject read get_VbaProject write set_VbaProject;
    ///<summary>
    ///  Provides easy access to all hyperlinks contained in all presentation slides (not in master, layout, notes slides).
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Gets presentation wide view properties.
    ///  Read-only <see cref="T:Aspose.Slides.IViewProperties" />
    ///  .
    ///</summary>
    property ViewProperties: DNIViewProperties read get_ViewProperties;
    ///<summary>
    ///  Represents the first slide number in the presentation
    ///</summary>
    property FirstSlideNumber: Int32 read get_FirstSlideNumber write set_FirstSlideNumber;
    ///<summary>
    ///  Returns information about from which format presentation was loaded.
    ///  Read-only <see cref="T:Aspose.Slides.SourceFormat" />
    ///  .
    ///</summary>
    property SourceFormat: DNSourceFormat read get_SourceFormat;
    ///<summary>
    ///  Returns master theme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterTheme" />
    ///  .
    ///</summary>
    property MasterTheme: DNIMasterTheme read get_MasterTheme;
  end;

  TDNPresentation = class(TDNGenericImport<DNPresentationClass, DNPresentation>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{84BF782C-6BDF-5C17-8719-A7CA552483A4}']
  { static getter & setter } 

    {class} function get_Instance: DNPresentationFactory;

  { constructors } 

    {class} function init: DNPresentationFactory;

  { static propertys } 

    ///<summary>
    ///  Presentation factory static instance.
    ///  Read-only <see cref="T:Aspose.Slides.PresentationFactory" />
    ///  .
    ///</summary>
    {class} property Instance: DNPresentationFactory read get_Instance;
  end;

  ///<summary>
  ///  Allows to create presentation via COM interface
  ///</summary>
  [DNTypeName('Aspose.Slides.PresentationFactory')]
  DNPresentationFactory = interface(DDN.mscorlib.DNObject)
  ['{AE237AFA-7B05-4DA4-BED3-654F6F09FD82}']
  { methods } 

    ///<summary>
    ///  Creates new presentation.
    ///</summary>
    ///<returns>New presentation</returns>
    function CreatePresentation: DNIPresentation; overload;
    ///<summary>
    ///  Creates new presentation with additional load options
    ///</summary>
    ///  <param name="options">Load options</param>
    ///<returns>New presentation</returns>
    function CreatePresentation(options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Creates new PresentationInfo object from file and binds presentation to it.
    ///</summary>
    ///  <param name="file">Presentation file.</param>
    ///<returns>Presentation info binded to presentation.</returns>
    function GetPresentationInfo(&file: string): DNIPresentationInfo; overload;
    ///<summary>
    ///  Creates new PresentationInfo object from stream and binds presentation to it.
    ///  Gets info about presentation in specified stream.
    ///</summary>
    ///  <param name="stream">Presentation stream.</param>
    ///<returns>Presentation info binded to presentation.</returns>
    function GetPresentationInfo(stream: DDN.mscorlib.DNStream): DNIPresentationInfo; overload;
    ///<summary>
    ///  Reads an existing presentation from array
    ///</summary>
    ///  <param name="data">Array to read</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(data: TArray<Byte>): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from array with additional load options
    ///</summary>
    ///  <param name="data">Array to read</param>
    ///  <param name="options">Load options</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(data: TArray<Byte>; options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from stream
    ///</summary>
    ///  <param name="stream">Input stream to read</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(stream: DDN.mscorlib.DNStream): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from stream with additional load options
    ///</summary>
    ///  <param name="stream">Input stream to read</param>
    ///  <param name="options">Load options</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(stream: DDN.mscorlib.DNStream; options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from file
    ///</summary>
    ///  <param name="file">File name</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(&file: string): DNIPresentation; overload;
    ///<summary>
    ///  Reads an existing presentation from stream with additional load options
    ///</summary>
    ///  <param name="file">File name</param>
    ///  <param name="options">Load options</param>
    ///<returns>Read presentation</returns>
    function ReadPresentation(&file: string; options: DNILoadOptions): DNIPresentation; overload;
    ///<summary>
    ///  Retreieves the raw text from the slides
    ///</summary>
    ///  <param name="file">Input file</param>
    ///  <param name="mode">Extraction mode</param>
    ///<returns>The instance of PresentationText containing the SlideText array representing the raw slides text</returns>
    function GetPresentationText(&file: string; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    ///<summary>
    ///  Retreieves the raw text from the slides
    ///</summary>
    ///  <param name="stream">Input stream</param>
    ///  <param name="mode">Extraction mode</param>
    ///<returns>The instance of PresentationText containing the SlideText array representing the raw slides text</returns>
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    ///<summary>
    ///  Retreieves the raw text from the slides
    ///</summary>
    ///  <param name="stream">Input stream</param>
    ///  <param name="mode">Extraction mode</param>
    ///  <param name="options">Load options</param>
    ///<returns>The instance of PresentationText containing the SlideText array representing the raw slides text</returns>
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode; options: DNILoadOptions): DNIPresentationText; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPresentationFactory = class(TDNGenericImport<DNPresentationFactoryClass, DNPresentationFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2530B6D1-2DF8-5C9C-AC96-3DF1526E907A}']
  end;

  ///<summary>
  ///  Information about presentation file
  ///</summary>
  [DNTypeName('Aspose.Slides.PresentationInfo')]
  DNPresentationInfo = interface(DDN.mscorlib.DNObject)
  ['{6A446241-F30E-40A2-8555-9B263D9C9F72}']
  { getters & setters } 

    function get_IsEncrypted: Boolean;
    function get_IsPasswordProtected: Boolean;
    function get_IsWriteProtected: DNNullableBool;
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    ///<summary>
    ///  Checks whether a password is correct for a presentation protected with open password.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  bool isPasswordCorrect = info.CheckPassword("my_password");
    ///</code></example><param name="password">The password to check.</param>
    ///<returns>
    ///  True if the presentation is protected with open password and the password is correct and false otherwise.
    ///</returns>
    ///<remarks>
    ///  When the password is null or empty, this method returns false.
    ///</remarks>
    ///<exception cref="T:System.InvalidOperationException" />
    ///<exception cref="T:System.NotSupportedException" />
    function CheckPassword(password: string): Boolean;
    ///<summary>
    ///  Checks whether a password to modify is correct for a write protected presentation.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  if (info.IsWriteProtected == NullableBool.True)
    ///  {
    ///  bool isWriteProtectedByPassword = info.CheckWriteProtection("my_password");
    ///  }
    ///</code></example><param name="password">The password to check.</param>
    ///<returns>
    ///  True if the presentation is write protected and the password is correct. False otherwise.
    ///</returns>
    ///<remarks>
    ///  1. You should check the <see cref="P:Aspose.Slides.PresentationInfo.IsWriteProtected" />
    ///  property before calling this method.
    ///  2. When password is null or empty, this method returns false.
    ///</remarks>
    ///<exception cref="T:System.InvalidOperationException" />
    function CheckWriteProtection(password: string): Boolean;
    ///<summary>
    ///  Gets document properties of binded presentation.
    ///</summary>
    function ReadDocumentProperties: DNIDocumentProperties;
    ///<summary>
    ///  Updates properties of binded presentation.
    ///</summary>
    ///<example>
    ///  This sample shows how to call the <see cref="M:Aspose.Slides.PresentationInfo.UpdateDocumentProperties(Aspose.Slides.IDocumentProperties)" />
    ///  method to
    ///  update the document properties returned by call of the <see cref="M:Aspose.Slides.PresentationInfo.ReadDocumentProperties" />
    ///  method.
    ///<code>
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo("pres.pptx");
    ///  IDocumentProperties props = info.ReadDocumentProperties();
    ///  props.Subject = "New subject";
    ///  props.LastSavedTime = DateTime.UtcNow;
    ///  info.UpdateDocumentProperties(props);
    ///  info.WriteBindedPresentation("new_pres.pptx");
    ///</code></example>
    procedure UpdateDocumentProperties(documentProperties: DNIDocumentProperties);
    ///<summary>
    ///  Writes binded presentation to stream.
    ///</summary>
    ///  <param name="stream">The stream must be seekable and writable.</param>
    procedure WriteBindedPresentation(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Writes binded presentation to file.
    ///</summary>
    ///  <param name="file">Presentation file.</param>
    procedure WriteBindedPresentation(&file: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets True if binded presentation is encrypted, otherwise False.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Gets a value that indicates whether a binded presentation is protected by a password to open.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  if (info.IsPasswordProtected)
    ///  {
    ///  Console.WriteLine("The presentation '" + presentationFilePath + "' is protected by password to open.");
    ///  }
    ///</code></example>
    property IsPasswordProtected: Boolean read get_IsPasswordProtected;
    ///<summary>
    ///  Gets a value that indicates whether a binded presentation is write protected.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  IPresentationInfo info = PresentationFactory.Instance.GetPresentationInfo(presentationFilePath);
    ///  if (info.IsWriteProtected == NullableBool.True)
    ///  {
    ///  Console.WriteLine("The presentation '" + presentationFilePath + "' is write protected by a password.");
    ///  }
    ///</code></example><remarks>
    ///  If the presentation is protected by a password to open, the property value equals NotDefined.
    ///</remarks>
    property IsWriteProtected: DNNullableBool read get_IsWriteProtected;
    ///<summary>
    ///  Gets format of the binded presentation.
    ///  Read-only <see cref="T:Aspose.Slides.LoadFormat" />
    ///  .
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPresentationInfo = class(TDNGenericImport<DNPresentationInfoClass, DNPresentationInfo>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationTextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8841DF94-FF6C-573E-8E44-F2F05CE4C92B}']
  end;

  ///<summary>
  ///  Represents the text extracted from the presentation
  ///</summary>
  [DNTypeName('Aspose.Slides.PresentationText')]
  DNPresentationText = interface(DDN.mscorlib.DNObject)
  ['{EFE29F04-5845-4A27-829B-AF1BFBE5B322}']
  { getters & setters } 

    function get_SlidesText: TArray<DNISlideText>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  An array of <see cref="T:Aspose.Slides.ISlideText">SlideText</see> contains a presentation's text.
    ///</summary>
    property SlidesText: TArray<DNISlideText> read get_SlidesText;
  end;

  TDNPresentationText = class(TDNGenericImport<DNPresentationTextClass, DNPresentationText>) end;

  //-------------namespace: Aspose.Slides----------------
  DNProtectionManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DF9111E-C078-56E4-A77E-44AB9FAA590A}']
  end;

  ///<summary>
  ///  Presentation password protection management.
  ///</summary>
  [DNTypeName('Aspose.Slides.ProtectionManager')]
  DNProtectionManager = interface(DDN.mscorlib.DNObject)
  ['{BEDEA158-5406-32E5-B0C5-144DAA10216A}']
  { getters & setters } 

    function get_EncryptDocumentProperties: Boolean;
    procedure set_EncryptDocumentProperties(value: Boolean);
    function get_IsEncrypted: Boolean;
    function get_IsOnlyDocumentPropertiesLoaded: Boolean;
    function get_IsWriteProtected: Boolean;
    function get_EncryptionPassword: string;
    function get_ReadOnlyRecommended: Boolean;
    procedure set_ReadOnlyRecommended(value: Boolean);

  { methods } 

    ///<summary>
    ///  Encrypts Presentation with specified password.
    ///</summary>
    ///  <param name="encryptionPassword">The password.</param>
    procedure Encrypt(encryptionPassword: string);
    ///<summary>
    ///  Removes the encryption.
    ///</summary>
    procedure RemoveEncryption;
    ///<summary>
    ///  Set write protection for this presentation with specified password.
    ///</summary>
    ///  <param name="password">The password.</param>
    procedure SetWriteProtection(password: string);
    ///<summary>
    ///  Removes write protection for this presentation.
    ///</summary>
    procedure RemoveWriteProtection;
    ///<summary>
    ///  Determines whether a presentation is a password protected to modify.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (var presentation = new Presentation(presentationFilePath))
    ///  {
    ///  var isWriteProtected = presentation.ProtectionManager.CheckWriteProtection("my_password");
    ///  }
    ///</code></example><param name="password">The password for checking.</param>
    ///<returns>True if the password is valid; otherwise, false.</returns>
    ///<remarks>
    ///  1. You should check the <see cref="P:Aspose.Slides.ProtectionManager.IsWriteProtected" />
    ///  property before calling this method.
    ///  2. When the password is null or empty, this method returns false.
    ///</remarks>
    function CheckWriteProtection(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This property makes sense, if presentation is password protected.
    ///  If true then document properties is encrypted in presentation file.
    ///  If false then document properties is public while presentation is encrypted.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property EncryptDocumentProperties: Boolean read get_EncryptDocumentProperties write set_EncryptDocumentProperties;
    ///<summary>
    ///  Gets a value indicating whether this instance is encrypted.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<value><c>true</c> if presentation was loaded from encrypted file or <see cref="M:Aspose.Slides.ProtectionManager.Encrypt(System.String)" />
    ///  method was called ; otherwise, <c>false</c>.
    ///</value>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  This property makes sense, if presentation file is password protected and document
    ///  properties of this file are public.
    ///  Value of true means that only document properties are loaded from an encrypted
    ///  presentation file without use of password.
    ///  Value of false means that entire encrypted presentation is loaded with use of right
    ///  password, not only document properties are loaded.
    ///  If presentation isn't encrypted then property value is always false.
    ///  If document properties of an encrypted file aren't public then property value is always false.
    ///  If Presentation.EncryptDocumentProperties is true than IsOnlyDocumentPropertiesLoaded
    ///  property value is always false.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOnlyDocumentPropertiesLoaded: Boolean read get_IsOnlyDocumentPropertiesLoaded;
    ///<summary>
    ///  Gets a value indicating whether this presentation is write protected.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsWriteProtected: Boolean read get_IsWriteProtected;
    ///<summary>
    ///  Gets the password which is used for presentation encryption.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property EncryptionPassword: string read get_EncryptionPassword;
    ///<summary>
    ///  Gets or sets read-only recommendation.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Presentation pres = new Presentation();
    ///  pres.ProtectionManager.ReadOnlyRecommended = true;
    ///  pres.Save("ReadOnlyPresentation.pptx", SaveFormat.Pptx);
    ///</code></example>
    property ReadOnlyRecommended: Boolean read get_ReadOnlyRecommended write set_ReadOnlyRecommended;
  end;

  TDNProtectionManager = class(TDNGenericImport<DNProtectionManagerClass, DNProtectionManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPVIObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79C19FAF-7E81-5111-9F0A-94E03BA1A5EA}']
  end;

  ///<summary>
  ///  Encapsulates basic service infrastructure for objects can be a subject of property value inheritance.
  ///</summary>
  [DNTypeName('Aspose.Slides.PVIObject')]
  DNPVIObject = interface(DDN.mscorlib.DNObject)
  ['{1ABE4112-0D93-350B-8D25-F5D832369E3F}']
  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPVIObject = class(TDNGenericImport<DNPVIObjectClass, DNPVIObject>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBackdrop3DSceneClass = interface(DNPVIObjectClass)
  ['{CD0B61B7-0037-57D1-AD90-5FF6D89651B1}']
  end;

  ///<summary>
  ///  Defines a plane in which effects, such as glow and shadow, are applied in relation to the shape they are being applied to.
  ///</summary>
  [DNTypeName('Aspose.Slides.Backdrop3DScene')]
  DNBackdrop3DScene = interface(DNPVIObject)
  ['{BA169CBC-A81C-41D5-ACD1-BF86FE58A782}']
  { getters & setters } 

    function get_NormalVector: TArray<Single>;
    procedure set_NormalVector(value: TArray<Single>);
    function get_AnchorPoint: TArray<Single>;
    procedure set_AnchorPoint(value: TArray<Single>);
    function get_UpVector: TArray<Single>;
    procedure set_UpVector(value: TArray<Single>);

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets a normal vector. To be more precise, this attribute defines a vector
    ///  normal to the face of the backdrop plane. Vector represented by array of 3 float values
    ///  which define X, Y and Z coordinates.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property NormalVector: TArray<Single> read get_NormalVector write set_NormalVector;
    ///<summary>
    ///  Returns or sets a point in 3D space. This point is the point in space that anchors the backdrop plane.
    ///  3D point represented by array of 3 float values which define X, Y and Z coordinates.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property AnchorPoint: TArray<Single> read get_AnchorPoint write set_AnchorPoint;
    ///<summary>
    ///  Returns or sets a vector representing up. To be more precise, this attribute defines a vector
    ///  representing up in relation to the face of the backdrop plane. Vector represented by array
    ///  of 3 float values which define X, Y and Z coordinates.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property UpVector: TArray<Single> read get_UpVector write set_UpVector;
  end;

  TDNBackdrop3DScene = class(TDNGenericImport<DNBackdrop3DSceneClass, DNBackdrop3DScene>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBackgroundClass = interface(DNPVIObjectClass)
  ['{03E24854-C4B4-5FEC-926B-E53B5A282209}']
  end;

  ///<summary>
  ///  Represents background of a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Background')]
  DNBackground = interface(DNPVIObject)
  ['{40A8E8AA-D270-3FE5-B558-C8D5C9135664}']
  { getters & setters } 

    function get_Type: DNBackgroundType;
    procedure set_Type(value: DNBackgroundType);
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_StyleColor: DNIColorFormat;
    function get_StyleIndex: UInt16;
    procedure set_StyleIndex(value: UInt16);
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Gets effective background data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IBackgroundEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective background properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IBackgroundEffectiveData effectiveBackground = pres.Slides[0].Background.GetEffective();
    ///  Console.WriteLine("Background fill type: " + effectiveBackground.FillFormat.FillType);
    ///  Console.WriteLine("Any effects applied: " + !effectiveBackground.EffectFormat.IsNoEffects);
    ///  }
    ///</code></example>
    function GetEffective: DNIBackgroundEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a type of background fill.
    ///  Read/write <see cref="T:Aspose.Slides.BackgroundType" />
    ///  .
    ///</summary>
    property &Type: DNBackgroundType read get_Type write set_Type;
    ///<summary>
    ///  Returns a FillFormat for BackgroundType.OwnBackground fill.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns a EffectFormat for BackgroundType.OwnBackground fill.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Return a ColorFormat for a BackgroundType.Themed fill.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property StyleColor: DNIColorFormat read get_StyleColor;
    ///<summary>
    ///  Returns an index of BackgroundType.Themed fill in background theme collection.
    ///  0 means no fill.
    ///  1..999 - index.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property StyleIndex: UInt16 read get_StyleIndex write set_StyleIndex;
    ///<summary>
    ///  Returns the parent slide of a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNBackground = class(TDNGenericImport<DNBackgroundClass, DNBackground>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBasePortionFormatClass = interface(DNPVIObjectClass)
  ['{19CA78E4-9205-571D-88F3-B987A620707D}']
  end;

  ///<summary>
  ///  Common text portion formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.BasePortionFormat')]
  DNBasePortionFormat = interface(DNPVIObject)
  ['{BA5FC5BE-3729-3531-A4EB-8FF7628439CC}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the LineFormat properties for text outlining. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the text FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns the text EffectFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the color used to highlight a text. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    ///<summary>
    ///  Returns the LineFormat properties used to outline underline line. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    ///<summary>
    ///  Returns the underline line FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    ///<summary>
    ///  Determines whether the font is bold. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    ///<summary>
    ///  Determines whether the font is itallic. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    ///<summary>
    ///  Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    ///<summary>
    ///  Determines whether the height of a text should be normalized. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    ///<summary>
    ///  Determines whether the text shouldn't be proofed. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    ///<summary>
    ///  Returns or sets the text underline type. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextUnderlineType" />
    ///  .
    ///</summary>
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    ///<summary>
    ///  Returns or sets the type of text capitalization. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextCapType" />
    ///  .
    ///</summary>
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    ///<summary>
    ///  Returns or sets the strikethrough type of a text. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextStrikethroughType" />
    ///  .
    ///</summary>
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    ///<summary>
    ///  Determines whether the underline style has own LineFormat properties or inherits it
    ///  from the LineFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    ///<summary>
    ///  Determines whether the underline style has own FillFormat properties or inherits it
    ///  from the FillFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    ///<summary>
    ///  Returns or sets the font height of a portion.
    ///<b>float.NaN</b>
    ///  means height is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    ///<summary>
    ///  Returns or sets the Latin font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    ///<summary>
    ///  Returns or sets the East Asian font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    ///<summary>
    ///  Returns or sets the complex script font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    ///<summary>
    ///  Returns or sets the symbolic font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    ///<summary>
    ///  Returns or sets the superscript or subscript text.
    ///  Value from -100% (subscript) to 100% (superscript).
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Escapement: Single read get_Escapement write set_Escapement;
    ///<summary>
    ///  Returns or sets the minimal font size, for which kerning should be switched on.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    ///<summary>
    ///  Returns or sets the Id of a proofing language. Used for checking spelling and grammar.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Returns or sets the Id of an alternative language.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    ///<summary>
    ///  Returns or sets the intercharacter spacing increment.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  TDNBasePortionFormat = class(TDNGenericImport<DNBasePortionFormatClass, DNBasePortionFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartPortionFormatClass = interface(DNBasePortionFormatClass)
  ['{9D52D465-3AD0-5D85-B3A9-4277065DD2D9}']
  end;

  ///<summary>
  ///  This class contains the chart portion formatting properties used in charts.
  ///  Unlike <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  , all properties of this class are writeable.
  ///</summary>
  ///<remarks><para>This class is used to return and manipulate text portion formatting
  ///  properties defined for the particular portion. This means that
  ///  no inheritance is applied when getting values so for the majority of cases
  ///  you will get values meaning "undefined".</para><para>In order to get the effective formatting parameter values including
  ///  inherited you need to use <see cref="M:Aspose.Slides.PortionFormat.GetEffective" />
  ///  method
  ///  which returns a <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  instance.</para></remarks>
  [DNTypeName('Aspose.Slides.Charts.ChartPortionFormat')]
  DNChartPortionFormat = interface(DNBasePortionFormat)
  ['{D86403D7-E641-4B4E-BD81-5B3EE0599578}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the LineFormat properties for text outlining. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the text FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns the text EffectFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the color used to highlight a text. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    ///<summary>
    ///  Returns the LineFormat properties used to outline underline line. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    ///<summary>
    ///  Returns the underline line FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    ///<summary>
    ///  Determines whether the font is bold. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    ///<summary>
    ///  Determines whether the font is itallic. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    ///<summary>
    ///  Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    ///<summary>
    ///  Determines whether the height of a text should be normalized. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    ///<summary>
    ///  Determines whether the text shouldn't be proofed. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    ///<summary>
    ///  Returns or sets the text underline type. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextUnderlineType" />
    ///  .
    ///</summary>
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    ///<summary>
    ///  Returns or sets the type of text capitalization. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextCapType" />
    ///  .
    ///</summary>
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    ///<summary>
    ///  Returns or sets the strikethrough type of a text. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextStrikethroughType" />
    ///  .
    ///</summary>
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    ///<summary>
    ///  Determines whether the underline style has own LineFormat properties or inherits it
    ///  from the LineFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    ///<summary>
    ///  Determines whether the underline style has own FillFormat properties or inherits it
    ///  from the FillFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    ///<summary>
    ///  Returns or sets the font height of a portion.
    ///<b>float.NaN</b>
    ///  means height is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    ///<summary>
    ///  Returns or sets the Latin font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    ///<summary>
    ///  Returns or sets the East Asian font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    ///<summary>
    ///  Returns or sets the complex script font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    ///<summary>
    ///  Returns or sets the symbolic font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    ///<summary>
    ///  Returns or sets the superscript or subscript text.
    ///  Value from -100% (subscript) to 100% (superscript).
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Escapement: Single read get_Escapement write set_Escapement;
    ///<summary>
    ///  Returns or sets the minimal font size, for which kerning should be switched on.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    ///<summary>
    ///  Returns or sets the Id of a proofing language. Used for checking spelling and grammar.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Returns or sets the Id of an alternative language.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    ///<summary>
    ///  Returns or sets the intercharacter spacing increment.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  TDNChartPortionFormat = class(TDNGenericImport<DNChartPortionFormatClass, DNChartPortionFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionFormatClass = interface(DNBasePortionFormatClass)
  ['{620FA508-E62A-548F-8CEE-C9AE937FA290}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Slides.PortionFormat" />
    ///  class.
    ///</summary>
    {class} function init: DNPortionFormat;

  end;

  ///<summary>
  ///  This class contains the text portion formatting properties. Unlike <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  , all properties of this class are writeable.
  ///</summary>
  ///<remarks><para>This class is used to return and manipulate text portion formatting properties defined for the particular portion. This means that
  ///  no inheritance is applied when getting values so for the majority of cases you will get values meaning "undefined".</para><para>In order to get the effective formatting parameter values including inherited you need to use <see cref="M:Aspose.Slides.PortionFormat.GetEffective" />
  ///  method
  ///  which returns a <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
  ///  instance.</para></remarks>
  [DNTypeName('Aspose.Slides.PortionFormat')]
  DNPortionFormat = interface(DNBasePortionFormat)
  ['{1374F931-0879-44F9-81CF-C217625D4BF1}']
  { getters & setters } 

    function get_BookmarkId: string;
    procedure set_BookmarkId(value: string);
    function get_SmartTagClean: Boolean;
    procedure set_SmartTagClean(value: Boolean);
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { methods } 

    ///<summary>
    ///  Gets effective portion formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IPortionFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some effective portion format properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes[0] as IAutoShape;
    ///  IPortionFormatEffectiveData effectivePortionFormat = shape.TextFrame.Paragraphs[0].Portions[0].PortionFormat.GetEffective();
    ///  Console.WriteLine("Latin font: " + effectivePortionFormat.LatinFont.FontName);
    ///  Console.WriteLine("Font height: " + effectivePortionFormat.FontHeight);
    ///  Console.WriteLine("Fill type: " + effectivePortionFormat.FillFormat.FillType);
    ///  }
    ///</code></example>
    function GetEffective: DNIPortionFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets bookmark identifier.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property BookmarkId: string read get_BookmarkId write set_BookmarkId;
    ///<summary>
    ///  Determines whether the smart tag should be cleaned. No inheritance applied.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SmartTagClean: Boolean read get_SmartTagClean write set_SmartTagClean;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse click.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse over.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    ///<summary>
    ///  Hyperlinks manager.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkManager" />
    ///  .
    ///</summary>
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    ///<summary>
    ///  Returns the LineFormat properties for text outlining. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the text FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns the text EffectFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the color used to highlight a text. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    ///<summary>
    ///  Returns the LineFormat properties used to outline underline line. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    ///<summary>
    ///  Returns the underline line FillFormat properties. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    ///<summary>
    ///  Determines whether the font is bold. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    ///<summary>
    ///  Determines whether the font is itallic. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    ///<summary>
    ///  Determines whether the numbers should ignore text eastern language-specific vertical text layout. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    ///<summary>
    ///  Determines whether the height of a text should be normalized. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    ///<summary>
    ///  Determines whether the text shouldn't be proofed. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    ///<summary>
    ///  Returns or sets the text underline type. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextUnderlineType" />
    ///  .
    ///</summary>
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    ///<summary>
    ///  Returns or sets the type of text capitalization. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextCapType" />
    ///  .
    ///</summary>
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    ///<summary>
    ///  Returns or sets the strikethrough type of a text. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.TextStrikethroughType" />
    ///  .
    ///</summary>
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    ///<summary>
    ///  Determines whether the underline style has own LineFormat properties or inherits it
    ///  from the LineFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    ///<summary>
    ///  Determines whether the underline style has own FillFormat properties or inherits it
    ///  from the FillFormat properties of the text.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    ///<summary>
    ///  Returns or sets the font height of a portion.
    ///<b>float.NaN</b>
    ///  means height is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    ///<summary>
    ///  Returns or sets the Latin font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    ///<summary>
    ///  Returns or sets the East Asian font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    ///<summary>
    ///  Returns or sets the complex script font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    ///<summary>
    ///  Returns or sets the symbolic font info.
    ///  Null means font is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    ///<summary>
    ///  Returns or sets the superscript or subscript text.
    ///  Value from -100% (subscript) to 100% (superscript).
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Escapement: Single read get_Escapement write set_Escapement;
    ///<summary>
    ///  Returns or sets the minimal font size, for which kerning should be switched on.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    ///<summary>
    ///  Returns or sets the Id of a proofing language. Used for checking spelling and grammar.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Returns or sets the Id of an alternative language.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    ///<summary>
    ///  Returns or sets the intercharacter spacing increment.
    ///<b>float.NaN</b>
    ///  means value is undefined and should be inherited from the Master.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  TDNPortionFormat = class(TDNGenericImport<DNPortionFormatClass, DNPortionFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBulletFormatClass = interface(DNPVIObjectClass)
  ['{D22F3C57-35AA-5BB4-9B39-D49555BF9756}']
  end;

  ///<summary>
  ///  Represents paragraph bullet formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.BulletFormat')]
  DNBulletFormat = interface(DNPVIObject)
  ['{E165BAD1-A5CD-37C5-BF47-3CD01AD668B6}']
  { getters & setters } 

    function get_Type: DNBulletType;
    procedure set_Type(value: DNBulletType);
    function get_Char: Char;
    procedure set_Char(value: Char);
    function get_Font: DNIFontData;
    procedure set_Font(value: DNIFontData);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Color: DNIColorFormat;
    function get_NumberedBulletStartWith: Int16;
    procedure set_NumberedBulletStartWith(value: Int16);
    function get_NumberedBulletStyle: DNNumberedBulletStyle;
    procedure set_NumberedBulletStyle(value: DNNumberedBulletStyle);
    function get_IsBulletHardColor: DNNullableBool;
    procedure set_IsBulletHardColor(value: DNNullableBool);
    function get_IsBulletHardFont: DNNullableBool;
    procedure set_IsBulletHardFont(value: DNNullableBool);
    function get_Picture: DNISlidesPicture;

  { methods } 

    ///<summary>
    ///  Sets default non-zero shifts for effective paragraph Indent and MarginLeft when bullets is enabled (like PowerPoint do if enable paragraph bullets/numbering in it). If bullets is disabled then just reset paragraph Indent and MarginLeft (like PowerPoint do if disable paragraph bullets/numbering in it). Indents shifts are applied in regard to current bullet context - IBulletFormat.Type, .NumberedBulletStyle and FontHeight of first portion. Non-zero indents shifts are applied to effective Indent and MarginLeft of current paragraph (make result values to be local values).
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  Calling this method doesn't matter and throw <see cref="T:System.InvalidOperationException" />
    ///  in following cases:
    ///  if parent formatted object is not a paragraph (for example calling ITextStyle.DefaultParagraphFormat.Bullet.ApplyDefaultParagraphIndentsShifts() will throw exception);
    ///  or if paragraph wasn't added to any ITextFrame.Paragraphs collection (add it first);
    ///</exception>
    procedure ApplyDefaultParagraphIndentsShifts;
    ///<summary>
    ///  Gets effective bullet formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IBulletFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some effective bullet format properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes[0] as IAutoShape;
    ///  IBulletFormatEffectiveData effectiveBulletFormat = shape.TextFrame.Paragraphs[0].ParagraphFormat.Bullet.GetEffective();
    ///  Console.WriteLine("Bullet type: " + effectiveBulletFormat.Type);
    ///  if (effectiveBulletFormat.Type == BulletType.Numbered)
    ///  {
    ///  Console.WriteLine("Numbered style: " + effectiveBulletFormat.NumberedBulletStyle);
    ///  Console.WriteLine("Starting number: " + effectiveBulletFormat.NumberedBulletStartWith);
    ///  }
    ///  }
    ///</code></example>
    function GetEffective: DNIBulletFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the bullet type of a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.BulletType" />
    ///  .
    ///</summary>
    property &Type: DNBulletType read get_Type write set_Type;
    ///<summary>
    ///  Returns or sets the bullet char of a paragraph with no inheritance.
    ///  Read/write <see cref="T:System.Char" />
    ///  .
    ///</summary>
    property Char: Char read get_Char write set_Char;
    ///<summary>
    ///  Returns or sets the bullet font of a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.IFontData" />
    ///  .
    ///</summary>
    property Font: DNIFontData read get_Font write set_Font;
    ///<summary>
    ///  Returns or sets the bullet height of a paragraph with no inheritance.
    ///  Value float.NaN determines that bullet inherits height from the first portion in the paragraph.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Returns the color format of a bullet of a paragraph with no inheritance.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
    ///<summary>
    ///  Returns or sets the first number which is used for group of numbered bullets with no inheritance.
    ///  Read/write <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property NumberedBulletStartWith: Int16 read get_NumberedBulletStartWith write set_NumberedBulletStartWith;
    ///<summary>
    ///  Returns or sets the style of a numbered bullet with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.NumberedBulletStyle" />
    ///  .
    ///</summary>
    property NumberedBulletStyle: DNNumberedBulletStyle read get_NumberedBulletStyle write set_NumberedBulletStyle;
    ///<summary>
    ///  Determines whether the bullet has own color or inherits it from the first portion in the paragraph.
    ///<b>NullableBool.True</b>
    ///  if bullet has own color and <b>NullableBool.False</b>
    ///  if bullet
    ///  inherits color from the first portion in the paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsBulletHardColor: DNNullableBool read get_IsBulletHardColor write set_IsBulletHardColor;
    ///<summary>
    ///  Determines whether the bullet has own font or inherits it from the first portion in the paragraph.
    ///<b>NullableBool.True</b>
    ///  if bullet has own font and <b>NullableBool.False</b>
    ///  if bullet
    ///  inherits font from the first portion in the paragraph.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property IsBulletHardFont: DNNullableBool read get_IsBulletHardFont write set_IsBulletHardFont;
    ///<summary>
    ///  Returns the picture used as a bullet in a paragraph with no inheritance.
    ///  Read-only <see cref="T:Aspose.Slides.ISlidesPicture" />
    ///  .
    ///</summary>
    property Picture: DNISlidesPicture read get_Picture;
  end;

  TDNBulletFormat = class(TDNGenericImport<DNBulletFormatClass, DNBulletFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCameraClass = interface(DNPVIObjectClass)
  ['{9669A811-5F17-5F02-87E5-346B58886689}']
  end;

  ///<summary>
  ///  Represents Camera.
  ///</summary>
  [DNTypeName('Aspose.Slides.Camera')]
  DNCamera = interface(DNPVIObject)
  ['{4199AC19-4BBC-4893-9A8E-13C810655E63}']
  { getters & setters } 

    function get_CameraType: DNCameraPresetType;
    procedure set_CameraType(value: DNCameraPresetType);
    function get_FieldOfViewAngle: Single;
    procedure set_FieldOfViewAngle(value: Single);
    function get_Zoom: Single;
    procedure set_Zoom(value: Single);

  { methods } 

    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  If any of coordinate value is float.NaN, all rotation is undefined.
    ///</summary>
    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  first element in return array - latitude, second - longitude, third - revolution.
    ///  Returns null if no rotation defined.
    ///</summary>
    function GetRotation: TArray<Single>;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Camera type.
    ///  Read/write <see cref="T:Aspose.Slides.CameraPresetType" />
    ///  .
    ///</summary>
    property CameraType: DNCameraPresetType read get_CameraType write set_CameraType;
    ///<summary>
    ///  Camera FOV (0-180 deg, field of View).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FieldOfViewAngle: Single read get_FieldOfViewAngle write set_FieldOfViewAngle;
    ///<summary>
    ///  Camera zoom (positive value in percentage).
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Zoom: Single read get_Zoom write set_Zoom;
  end;

  TDNCamera = class(TDNGenericImport<DNCameraClass, DNCamera>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCellFormatClass = interface(DNPVIObjectClass)
  ['{D2DBDB8B-C246-5BBA-B29A-25ABBB2E0DD3}']
  end;

  ///<summary>
  ///  Represents format of a table cell.
  ///</summary>
  [DNTypeName('Aspose.Slides.CellFormat')]
  DNCellFormat = interface(DNPVIObject)
  ['{055273AF-3549-38AB-A525-0A792F517382}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;
    function get_BorderLeft: DNILineFormat;
    function get_BorderTop: DNILineFormat;
    function get_BorderRight: DNILineFormat;
    function get_BorderBottom: DNILineFormat;
    function get_BorderDiagonalDown: DNILineFormat;
    function get_BorderDiagonalUp: DNILineFormat;

  { methods } 

    ///<summary>
    ///  Gets effective table cell formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ICellFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective fill format for different table logic parts.
    ///  Please note that cell formatting always has higher priority than row formatting, row - higher than column, column - higher that whole table.
    ///  So finally CellFormatEffectiveData properties always used to draw the table. The following code is just an example of API.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  ITable tbl = pres.Slides[0].Shapes[0] as ITable;
    ///  IFillFormatEffectiveData tableFillFormatEffective = tbl.TableFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData rowFillFormatEffective = tbl.Rows[0].RowFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData columnFillFormatEffective = tbl.Columns[0].ColumnFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData cellFillFormatEffective = tbl[0, 0].CellFormat.GetEffective().FillFormat;
    ///  /* Output and comparison */
    ///  }
    ///</code></example>
    function GetEffective: DNICellFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a cell fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns a left border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderLeft: DNILineFormat read get_BorderLeft;
    ///<summary>
    ///  Returns a top border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderTop: DNILineFormat read get_BorderTop;
    ///<summary>
    ///  Returns a right border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderRight: DNILineFormat read get_BorderRight;
    ///<summary>
    ///  Returns a bottom border line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderBottom: DNILineFormat read get_BorderBottom;
    ///<summary>
    ///  Returns a top-left to bottom-right diagonal line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderDiagonalDown: DNILineFormat read get_BorderDiagonalDown;
    ///<summary>
    ///  Returns a bottom-left to top-right diagonal line properties object.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property BorderDiagonalUp: DNILineFormat read get_BorderDiagonalUp;
  end;

  TDNCellFormat = class(TDNGenericImport<DNCellFormatClass, DNCellFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataLabelFormatClass = interface(DNPVIObjectClass)
  ['{19D431E0-6EB9-5BE4-9890-4A8041E6A015}']
  end;

  ///<summary>
  ///  Represents formatting options for DataLabel.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.DataLabelFormat')]
  DNDataLabelFormat = interface(DNPVIObject)
  ['{8CBD23B3-35C5-33E3-9C55-444297EA4F4C}']
  { getters & setters } 

    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Format: DNIFormat;
    function get_Position: DNLegendDataLabelPosition;
    procedure set_Position(value: DNLegendDataLabelPosition);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowLabelValueFromCell: Boolean;
    procedure set_ShowLabelValueFromCell(value: Boolean);
    function get_ShowLabelAsDataCallout: Boolean;
    procedure set_ShowLabelAsDataCallout(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_TextFormat: DNIChartTextFormat;
    function get_Chart: DNIChart;

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the IsNumberFormatLinkedToSource property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the IsNumberFormatLinkedToSource property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.IsNumberFormatLinkedToSource = val;" cause to
    ///  all DataLabels[i].IsNumberFormatLinkedToSource is equal to val).
    ///</remarks>
    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    ///<summary>
    ///  Represents the format string for the DataLabels object.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the NumberFormat property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Represents the format string for the DataLabel objects.
    ///  Set this property with value also sets this value to the NumberFormat property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.NumberFormat = val;" cause to
    ///  all DataLabels[i].NumberFormat is equal to val).
    ///</remarks>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Represents the format of the data label.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormat" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property represents the default format for the new data labels in the DataLabelCollection collection.
    ///</remarks>
    property Format: DNIFormat read get_Format;
    ///<summary>
    ///  Represents the position of the data label.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.LegendDataLabelPosition" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the Position property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Represents the position for the DataLabel objects.
    ///  Set this property with value also sets this value to the Position property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.Position = val;" cause to
    ///  all DataLabels[i].Position is equal to val).
    ///</remarks>
    property Position: DNLegendDataLabelPosition read get_Position write set_Position;
    ///<summary>
    ///  Represents a specified chart's data label legend key display behavior.
    ///  True if the data label legend key is visible.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLegendKey property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLegendKey property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLegendKey = val;" cause to
    ///  all DataLabels[i].ShowLegendKey is equal to val).
    ///</remarks>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Represents a specified chart's data label percentage value display behavior.
    ///  True displays the percentage value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowValue property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowValue property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowValue = val;" cause to
    ///  all DataLabels[i].ShowValue is equal to val).
    ///</remarks>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    ///<summary>
    ///  Represents a specified chart's data label category name display behavior.
    ///  True to display the category name for the data labels on a chart. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowCategoryName property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowCategoryName property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowCategoryName = val;" cause to
    ///  all DataLabels[i].ShowCategoryName is equal to val).
    ///</remarks>
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    ///<summary>
    ///  Returns or sets a Boolean to indicate the series name display behavior for the data labels on a chart.
    ///  True to show the series name. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowSeriesName property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowSeriesName property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowSeriesName = val;" cause to
    ///  all DataLabels[i].ShowSeriesName is equal to val).
    ///</remarks>
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    ///<summary>
    ///  Represents a specified chart's data label percentage value display behavior.
    ///  True displays the percentage value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowPercentage property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowPercentage property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowPercentage = val;" cause to
    ///  all DataLabels[i].ShowPercentage is equal to val).
    ///</remarks>
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    ///<summary>
    ///  Represents a specified chart's data label bubble size value display behavior.
    ///  True displays the bubble size value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowBubbleSize property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowBubbleSize property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowBubbleSize = val;" cause to
    ///  all DataLabels[i].ShowBubbleSize is equal to val).
    ///</remarks>
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    ///<summary>
    ///  Represents a specified chart's data label leader lines display behavior.
    ///  True displays the leader lines. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLeaderLines property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLeaderLines property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLeaderLines = val;" cause to
    ///  all DataLabels[i].ShowLeaderLines is equal to val).
    ///</remarks>
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    ///<summary>
    ///  Represents a specified chart's data label cell value display behavior.
    ///  True displays cell value. False to hide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLabelValueFromCell property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLabelValueFromCell property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLabelValueFromCell = val;" cause to
    ///  all DataLabels[i].ShowLabelValueFromCell is equal to val).
    ///</remarks>
    property ShowLabelValueFromCell: Boolean read get_ShowLabelValueFromCell write set_ShowLabelValueFromCell;
    ///<summary>
    ///  Determines either specified chart's data label will be displayed as data callout or as data label.
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the ShowLabelAsDataCallout property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the ShowLabelAsDataCallout property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.ShowLabelAsDataCallout = val;" cause to
    ///  all DataLabels[i].ShowLabelAsDataCallout is equal to val).
    ///</remarks>
    ///</summary>
    property ShowLabelAsDataCallout: Boolean read get_ShowLabelAsDataCallout write set_ShowLabelAsDataCallout;
    ///<summary>
    ///  Sets or returns a Variant representing the separator used for the data labels on a chart.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If parent of this DataLabelFormat object is a DataLabelCollection collection of data labels then this
    ///  property gets or sets the default value of the Separator property for the new data
    ///  labels in the DataLabelCollection collection.
    ///  Set this property with value also sets this value to the Separator property
    ///  for all data labels in the DataLabelCollection collection
    ///  (i.e. "DataLabels.DefaultDataLabelFormat.Separator = val;" cause to
    ///  all DataLabels[i].Separator is equal to val).
    ///</remarks>
    property Separator: string read get_Separator write set_Separator;
    ///<summary>
    ///  Returns chart text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Returns the chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChart" />
    ///  .
    ///</summary>
    property Chart: DNIChart read get_Chart;
  end;

  TDNDataLabelFormat = class(TDNGenericImport<DNDataLabelFormatClass, DNDataLabelFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNFormatClass = interface(DNPVIObjectClass)
  ['{8D588E54-427B-58B4-B9E5-7F3C4C4DDD86}']
  end;

  ///<summary>
  ///  Represents chart format properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Format')]
  DNFormat = interface(DNPVIObject)
  ['{DEF19A43-465F-3283-B31D-DFB247553A30}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;
    function get_Effect3D: DNIThreeDFormat;

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns fill style properties of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property Fill: DNIFillFormat read get_Fill;
    ///<summary>
    ///  Returns line style properties of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property Line: DNILineFormat read get_Line;
    ///<summary>
    ///  Returns effects used for a chart.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property Effect: DNIEffectFormat read get_Effect;
    ///<summary>
    ///  Returns 3D format of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property Effect3D: DNIThreeDFormat read get_Effect3D;
  end;

  TDNFormat = class(TDNGenericImport<DNFormatClass, DNFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColorFormatClass = interface(DNPVIObjectClass)
  ['{CBBC066B-6963-5F64-A669-6DC25279A835}']
  end;

  ///<summary>
  ///  Represents a color used in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.ColorFormat')]
  DNColorFormat = interface(DNPVIObject)
  ['{B5A5EF80-0E48-38F7-BFC2-D4527F13B450}']
  { getters & setters } 

    function get_ColorType: DNColorType;
    procedure set_ColorType(value: DNColorType);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_PresetColor: DNPresetColor;
    procedure set_PresetColor(value: DNPresetColor);
    function get_SystemColor: DNSystemColor;
    procedure set_SystemColor(value: DNSystemColor);
    function get_SchemeColor: DNSchemeColor;
    procedure set_SchemeColor(value: DNSchemeColor);
    function get_R: Byte;
    procedure set_R(value: Byte);
    function get_G: Byte;
    procedure set_G(value: Byte);
    function get_B: Byte;
    procedure set_B(value: Byte);
    function get_FloatR: Single;
    procedure set_FloatR(value: Single);
    function get_FloatG: Single;
    procedure set_FloatG(value: Single);
    function get_FloatB: Single;
    procedure set_FloatB(value: Single);
    function get_Hue: Single;
    procedure set_Hue(value: Single);
    function get_Saturation: Single;
    procedure set_Saturation(value: Single);
    function get_Luminance: Single;
    procedure set_Luminance(value: Single);
    function get_ColorTransform: DNIColorOperationCollection;

  { methods } 

    ///<summary>
    ///  Returns a <see cref="T:System.String" />
    ///  that represents the current color format.
    ///</summary>
    ///  <param name="format">A type of color string format.</param>
    ///<returns>A string that represents the current color format.</returns>
    function ToString(format: DNColorStringFormat): string; overload;
    ///<summary>
    ///  Copy color format from "color".
    ///</summary>
    procedure CopyFrom(color: DNIColorFormat);
    ///<summary>
    ///  Checks for equality with specified object.
    ///</summary>
    ///  <param name="obj">Object.</param>
    ///<returns>True if objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns or sets the color definition method.
    ///  Read/write <see cref="T:Aspose.Slides.ColorType" />
    ///  .
    ///</summary>
    property ColorType: DNColorType read get_ColorType write set_ColorType;
    ///<summary>
    ///  Returns resulting color (with all color transformations applied).
    ///  Sets RGB colors and clears all color transformations.
    ///  Read/write <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Returns or sets the color preset.
    ///  Read/write <see cref="T:Aspose.Slides.PresetColor" />
    ///  .
    ///</summary>
    property PresetColor: DNPresetColor read get_PresetColor write set_PresetColor;
    ///<summary>
    ///  Returns or sets the color identified by the system color table.
    ///  Read/write <see cref="T:Aspose.Slides.SystemColor" />
    ///  .
    ///</summary>
    property SystemColor: DNSystemColor read get_SystemColor write set_SystemColor;
    ///<summary>
    ///  Returns or sets the color identified by a color scheme.
    ///  Read/write <see cref="T:Aspose.Slides.SchemeColor" />
    ///  .
    ///</summary>
    property SchemeColor: DNSchemeColor read get_SchemeColor write set_SchemeColor;
    ///<summary>
    ///  Returns or sets the red component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property R: Byte read get_R write set_R;
    ///<summary>
    ///  Returns or sets the green component of a color. All color transformations are ignored.
    ///</summary>
    property G: Byte read get_G write set_G;
    ///<summary>
    ///  Returns or sets the blue component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Byte" />
    ///  .
    ///</summary>
    property B: Byte read get_B write set_B;
    ///<summary>
    ///  Returns or sets the red component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FloatR: Single read get_FloatR write set_FloatR;
    ///<summary>
    ///  Returns or sets the green component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FloatG: Single read get_FloatG write set_FloatG;
    ///<summary>
    ///  Returns or sets the blue component of a color. All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property FloatB: Single read get_FloatB write set_FloatB;
    ///<summary>
    ///  Returns or sets the hue component of a color in HSL representation.
    ///  All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Hue: Single read get_Hue write set_Hue;
    ///<summary>
    ///  Returns or sets the saturation component of a color in HSL representation.
    ///  All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Saturation: Single read get_Saturation write set_Saturation;
    ///<summary>
    ///  Returns or sets the luminance component of a color in HSL representation.
    ///  All color transformations are ignored.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Luminance: Single read get_Luminance write set_Luminance;
    ///<summary>
    ///  Returns the collection of color transformations applied to a color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorOperationCollection" />
    ///  .
    ///</summary>
    property ColorTransform: DNIColorOperationCollection read get_ColorTransform;
  end;

  TDNColorFormat = class(TDNGenericImport<DNColorFormatClass, DNColorFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNEffectFormatClass = interface(DNPVIObjectClass)
  ['{EB17A883-F9DD-56D5-AF63-8C8B1617AEEA}']
  end;

  ///<summary>
  ///  Represents effect properties of shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.EffectFormat')]
  DNEffectFormat = interface(DNPVIObject)
  ['{9E44FD95-E81C-3F50-9B7F-AB204404DF98}']
  { getters & setters } 

    function get_IsNoEffects: Boolean;
    function get_BlurEffect: DNIBlur;
    procedure set_BlurEffect(value: DNIBlur);
    function get_FillOverlayEffect: DNIFillOverlay;
    procedure set_FillOverlayEffect(value: DNIFillOverlay);
    function get_GlowEffect: DNIGlow;
    procedure set_GlowEffect(value: DNIGlow);
    function get_InnerShadowEffect: DNIInnerShadow;
    procedure set_InnerShadowEffect(value: DNIInnerShadow);
    function get_OuterShadowEffect: DNIOuterShadow;
    procedure set_OuterShadowEffect(value: DNIOuterShadow);
    function get_PresetShadowEffect: DNIPresetShadow;
    procedure set_PresetShadowEffect(value: DNIPresetShadow);
    function get_ReflectionEffect: DNIReflection;
    procedure set_ReflectionEffect(value: DNIReflection);
    function get_SoftEdgeEffect: DNISoftEdge;
    procedure set_SoftEdgeEffect(value: DNISoftEdge);

  { methods } 

    ///<summary>
    ///  Sets blur effect.
    ///</summary>
    ///  <param name="radius">Radius.</param>
    ///  <param name="grow">Grow.</param>
    procedure SetBlurEffect(radius: Double; grow: Boolean);
    ///<summary>
    ///  Enables fill overlay effect.
    ///</summary>
    procedure EnableFillOverlayEffect;
    ///<summary>
    ///  Enables glow effect.
    ///</summary>
    procedure EnableGlowEffect;
    ///<summary>
    ///  Enables inner shadow effect.
    ///</summary>
    procedure EnableInnerShadowEffect;
    ///<summary>
    ///  Enables outer shadow effect.
    ///</summary>
    procedure EnableOuterShadowEffect;
    ///<summary>
    ///  Enables preset shadows effect.
    ///</summary>
    procedure EnablePresetShadowEffect;
    ///<summary>
    ///  Enables reflection effect.
    ///</summary>
    procedure EnableReflectionEffect;
    ///<summary>
    ///  Enables soft edge effect.
    ///</summary>
    procedure EnableSoftEdgeEffect;
    ///<summary>
    ///  Disables blur effect.
    ///</summary>
    procedure DisableBlurEffect;
    ///<summary>
    ///  Disables fill overlay effect.
    ///</summary>
    procedure DisableFillOverlayEffect;
    ///<summary>
    ///  Disable glow effect.
    ///</summary>
    procedure DisableGlowEffect;
    ///<summary>
    ///  Disables inner shadow effect.
    ///</summary>
    procedure DisableInnerShadowEffect;
    ///<summary>
    ///  Disables outer shadow effect.
    ///</summary>
    procedure DisableOuterShadowEffect;
    ///<summary>
    ///  Disables preset shadow effect.
    ///</summary>
    procedure DisablePresetShadowEffect;
    ///<summary>
    ///  Disables reflection effect.
    ///</summary>
    procedure DisableReflectionEffect;
    ///<summary>
    ///  Disables soft edge effect.
    ///</summary>
    procedure DisableSoftEdgeEffect;
    ///<summary>
    ///  Gets effective effect formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IEffectFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some of shape's effective effect properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IEffectFormatEffectiveData effectiveEffectFormat = pres.Slides[0].Shapes[0].EffectFormat.GetEffective();
    ///  if (effectiveEffectFormat.IsNoEffects)
    ///  {
    ///  Console.WriteLine("The shape has not effects applied.");
    ///  }
    ///  else
    ///  {
    ///  if (effectiveEffectFormat.BlurEffect != null)
    ///  Console.WriteLine("Blur effect radius: " + effectiveEffectFormat.BlurEffect.Radius);
    ///  if (effectiveEffectFormat.FillOverlayEffect != null)
    ///  Console.WriteLine("Fill overlay effect fill type: " + effectiveEffectFormat.FillOverlayEffect.FillFormat.FillType);
    ///  if (effectiveEffectFormat.GlowEffect != null)
    ///  Console.WriteLine("Glow effect color: " + effectiveEffectFormat.GlowEffect.Color);
    ///  if (effectiveEffectFormat.InnerShadowEffect != null)
    ///  Console.WriteLine("Inner shadow effect shadow color: " + effectiveEffectFormat.InnerShadowEffect.ShadowColor);
    ///  if (effectiveEffectFormat.OuterShadowEffect != null)
    ///  Console.WriteLine("Outer shadow effect shadow color: " + effectiveEffectFormat.OuterShadowEffect.ShadowColor);
    ///  if (effectiveEffectFormat.PresetShadowEffect != null)
    ///  Console.WriteLine("Preset shadow effect shadow color: " + effectiveEffectFormat.PresetShadowEffect.ShadowColor);
    ///  if (effectiveEffectFormat.ReflectionEffect != null)
    ///  Console.WriteLine("Reflection effect distance: " + effectiveEffectFormat.ReflectionEffect.Distance);
    ///  if (effectiveEffectFormat.SoftEdgeEffect != null)
    ///  Console.WriteLine("Soft edge effect radius: " + effectiveEffectFormat.SoftEdgeEffect.Radius);
    ///  }
    ///  }
    ///</code></example>
    function GetEffective: DNIEffectFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns true if all effects are disabled (as just created, default EffectFormat object).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsNoEffects: Boolean read get_IsNoEffects;
    ///<summary>
    ///  Blur effect.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IBlur" />
    ///  .
    ///</summary>
    property BlurEffect: DNIBlur read get_BlurEffect write set_BlurEffect;
    ///<summary>
    ///  Fill overlay effect.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IFillOverlay" />
    ///  .
    ///</summary>
    property FillOverlayEffect: DNIFillOverlay read get_FillOverlayEffect write set_FillOverlayEffect;
    ///<summary>
    ///  Glow effect.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IGlow" />
    ///  .
    ///</summary>
    property GlowEffect: DNIGlow read get_GlowEffect write set_GlowEffect;
    ///<summary>
    ///  Inner shadow.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IInnerShadow" />
    ///  .
    ///</summary>
    property InnerShadowEffect: DNIInnerShadow read get_InnerShadowEffect write set_InnerShadowEffect;
    ///<summary>
    ///  Outer shadow.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IOuterShadow" />
    ///  .
    ///</summary>
    property OuterShadowEffect: DNIOuterShadow read get_OuterShadowEffect write set_OuterShadowEffect;
    ///<summary>
    ///  Preset shadow.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IPresetShadow" />
    ///  .
    ///</summary>
    property PresetShadowEffect: DNIPresetShadow read get_PresetShadowEffect write set_PresetShadowEffect;
    ///<summary>
    ///  Reflection.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.IReflection" />
    ///  .
    ///</summary>
    property ReflectionEffect: DNIReflection read get_ReflectionEffect write set_ReflectionEffect;
    ///<summary>
    ///  Soft edge.
    ///  Read/write <see cref="T:Aspose.Slides.Effects.ISoftEdge" />
    ///  .
    ///</summary>
    property SoftEdgeEffect: DNISoftEdge read get_SoftEdgeEffect write set_SoftEdgeEffect;
  end;

  TDNEffectFormat = class(TDNGenericImport<DNEffectFormatClass, DNEffectFormat>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOperationClass = interface(DNPVIObjectClass)
  ['{15B99DB9-0ECA-5FEF-BA63-1925C21EE504}']
  end;

  ///<summary>
  ///  Represents abstract image transformation effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ImageTransformOperation')]
  DNImageTransformOperation = interface(DNPVIObject)
  ['{72B07CE9-9D35-3CA3-BEF8-A40E41FEECE3}']
  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageTransformOperation = class(TDNGenericImport<DNImageTransformOperationClass, DNImageTransformOperation>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaBiLevelClass = interface(DNImageTransformOperationClass)
  ['{639FF50D-A413-5724-B0D5-C84EC735885A}']
  end;

  ///<summary>
  ///  Represents an Alpha Bi-Level effect.
  ///  Alpha (Opacity) values less than the threshold are changed to 0 (fully transparent) and
  ///  alpha values greater than or equal to the threshold are changed to 100% (fully opaque).
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaBiLevel')]
  DNAlphaBiLevel = interface(DNImageTransformOperation)
  ['{9D328E4E-DE06-30FD-BEAD-1AFDD4667AD4}']
  { getters & setters } 

    function get_Threshold: Single;
    procedure set_Threshold(value: Single);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaBiLevel" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaBiLevel" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaBiLevel" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns effect threshold.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Threshold: Single read get_Threshold write set_Threshold;
  end;

  TDNAlphaBiLevel = class(TDNGenericImport<DNAlphaBiLevelClass, DNAlphaBiLevel>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaCeilingClass = interface(DNImageTransformOperationClass)
  ['{3BC8965A-1978-5D0A-AE8B-DA6D6D99452D}']
  end;

  ///<summary>
  ///  Represents an Alpha Ceiling effect.
  ///  Alpha (opacity) values greater than zero are changed to 100%.
  ///  In other words, anything partially opaque becomes fully opaque.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaCeiling')]
  DNAlphaCeiling = interface(DNImageTransformOperation)
  ['{99F0DF48-637B-46BB-A329-3AC45824CCE7}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaCeiling" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaCeiling" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaCeiling" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaCeiling = class(TDNGenericImport<DNAlphaCeilingClass, DNAlphaCeiling>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaFloorClass = interface(DNImageTransformOperationClass)
  ['{163A9E34-FEBC-5F88-A27E-9D0A58FCE815}']
  end;

  ///<summary>
  ///  Represents an Alpha Floor effect.
  ///  Alpha (opacity) values less than 100% are changed to zero.
  ///  In other words, anything partially transparent becomes fully transparent.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaFloor')]
  DNAlphaFloor = interface(DNImageTransformOperation)
  ['{C4CC7398-1211-47B5-AAD3-59FCA7658A07}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaFloor" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaFloor" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaFloor" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaFloor = class(TDNGenericImport<DNAlphaFloorClass, DNAlphaFloor>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaInverseClass = interface(DNImageTransformOperationClass)
  ['{B202DA76-9BEE-5914-9D36-50ACF3684930}']
  end;

  ///<summary>
  ///  Represents an Alpha Inverse effect.
  ///  Alpha (opacity) values are inverted by subtracting from 100%.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaInverse')]
  DNAlphaInverse = interface(DNImageTransformOperation)
  ['{1ED8918D-D8BD-412A-90D2-D23DD4A81585}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaInverse" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaInverse" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaInverse" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaInverse = class(TDNGenericImport<DNAlphaInverseClass, DNAlphaInverse>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateClass = interface(DNImageTransformOperationClass)
  ['{CD2D2A9E-6ACE-5CF0-9B1A-6EB7A458421A}']
  end;

  ///<summary>
  ///  Represents an Alpha Modulate effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///  The effect container specifies an effect containing alpha values to modulate.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaModulate')]
  DNAlphaModulate = interface(DNImageTransformOperation)
  ['{DF2DE752-3B5E-4684-ACA2-5F74D107A5AB}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaModulate" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaModulate" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaModulate" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaModulate = class(TDNGenericImport<DNAlphaModulateClass, DNAlphaModulate>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateFixedClass = interface(DNImageTransformOperationClass)
  ['{E38BFB60-83F8-5FB1-A465-27BCB8D14F5A}']
  end;

  ///<summary>
  ///  Represents an Alpha Modulate Fixed effect.
  ///  Effect alpha (opacity) values are multiplied by a fixed percentage.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaModulateFixed')]
  DNAlphaModulateFixed = interface(DNImageTransformOperation)
  ['{9A8363A1-3D11-3A3D-8B66-08E4BAFF73D2}']
  { getters & setters } 

    function get_Amount: Single;
    procedure set_Amount(value: Single);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaModulateFixed" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaModulateFixed" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaModulateFixed" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns an amount of effect in percents.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Amount: Single read get_Amount write set_Amount;
  end;

  TDNAlphaModulateFixed = class(TDNGenericImport<DNAlphaModulateFixedClass, DNAlphaModulateFixed>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaReplaceClass = interface(DNImageTransformOperationClass)
  ['{29E40D4F-4688-5138-A3AE-CCCC183C0C85}']
  end;

  ///<summary>
  ///  Represents and Alpha Replace effect.
  ///  Effect alpha (opacity) values are replaced by a fixed alpha.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.AlphaReplace')]
  DNAlphaReplace = interface(DNImageTransformOperation)
  ['{F5F0A28F-F773-35EB-AECC-BAF201147E6A}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.AlphaReplace" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.AlphaReplace" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.AlphaReplace" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaReplace = class(TDNGenericImport<DNAlphaReplaceClass, DNAlphaReplace>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBiLevelClass = interface(DNImageTransformOperationClass)
  ['{0D828DBA-4D8F-5A5B-A162-95B56CCFEE31}']
  end;

  ///<summary>
  ///  Represents a Bi-Level (black/white) effect.
  ///  Input colors whose luminance is less than the specified threshold value are changed to black.
  ///  Input colors whose luminance are greater than or equal the specified value are set to white.
  ///  The alpha effect values are unaffected by this effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.BiLevel')]
  DNBiLevel = interface(DNImageTransformOperation)
  ['{F54441AF-EE99-3FE9-96B9-2D0691F6ACBE}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.BiLevel" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.BiLevel" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.BiLevel" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBiLevel = class(TDNGenericImport<DNBiLevelClass, DNBiLevel>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBlurClass = interface(DNImageTransformOperationClass)
  ['{DE5B9DAC-4FF1-55F9-9CBF-99A2C0C7868B}']
  end;

  ///<summary>
  ///  Represents a Blur effect that is applied to the entire shape, including its fill.
  ///  All color channels, including alpha, are affected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.Blur')]
  DNBlur = interface(DNImageTransformOperation)
  ['{BD2A6EFC-F4D4-45A4-9597-F2721FE27CC3}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Grow: Boolean;
    procedure set_Grow(value: Boolean);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.Blur" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.Blur" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.Blur" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets blur radius.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Determines whether the bounds of the object should be grown as a result of the blurring.
    ///  True indicates the bounds are grown while false indicates that they are not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Grow: Boolean read get_Grow write set_Grow;
  end;

  TDNBlur = class(TDNGenericImport<DNBlurClass, DNBlur>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorChangeClass = interface(DNImageTransformOperationClass)
  ['{1C3A91C4-E966-5978-8D18-11E8E5CB92AD}']
  end;

  ///<summary>
  ///  Represents a Color Change effect.
  ///  Instances of FromColor are replaced with instances of ToColor.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ColorChange')]
  DNColorChange = interface(DNImageTransformOperation)
  ['{0F0C10B0-8149-49B3-88E9-A7E5CC48AA88}']
  { getters & setters } 

    function get_FromColor: DNIColorFormat;
    function get_ToColor: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.ColorChange" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.ColorChange" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.ColorChange" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Color which will be replaced.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FromColor: DNIColorFormat read get_FromColor;
    ///<summary>
    ///  Color which will replace.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ToColor: DNIColorFormat read get_ToColor;
  end;

  TDNColorChange = class(TDNGenericImport<DNColorChangeClass, DNColorChange>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorReplaceClass = interface(DNImageTransformOperationClass)
  ['{F7A0D36F-77CE-5441-9E55-6DB122E2F11E}']
  end;

  ///<summary>
  ///  Represents a Color Replacement effect.
  ///  All effect colors are changed to a fixed color.
  ///  Alpha values are unaffected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ColorReplace')]
  DNColorReplace = interface(DNImageTransformOperation)
  ['{50116F54-8757-49D2-9497-95798B222653}']
  { getters & setters } 

    function get_Color: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.ColorReplace" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.ColorReplace" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.ColorReplace" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns color format which will replace color of every pixel.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
  end;

  TDNColorReplace = class(TDNGenericImport<DNColorReplaceClass, DNColorReplace>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNDuotoneClass = interface(DNImageTransformOperationClass)
  ['{FA7DE336-CC5D-52F1-BAFA-52026555CE4D}']
  end;

  ///<summary>
  ///  Represents a Duotone effect.
  ///  For each pixel, combines Color1 and Color2 through a linear interpolation
  ///  to determine the new color for that pixel.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.Duotone')]
  DNDuotone = interface(DNImageTransformOperation)
  ['{3BD9DE96-F11F-47F7-9F47-572CA5CA7F07}']
  { getters & setters } 

    function get_Color1: DNIColorFormat;
    function get_Color2: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.Duotone" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.Duotone" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.Duotone" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns target color format for dark pixels.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color1: DNIColorFormat read get_Color1;
    ///<summary>
    ///  Returns target color format for light pixels.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color2: DNIColorFormat read get_Color2;
  end;

  TDNDuotone = class(TDNGenericImport<DNDuotoneClass, DNDuotone>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNFillOverlayClass = interface(DNImageTransformOperationClass)
  ['{CF800C6F-2621-5E57-887F-A1D5022D9F58}']
  end;

  ///<summary>
  ///  Represents a Fill Overlay effect. A fill overlay may be used to specify
  ///  an additional fill for an object and blend the two fills together.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.FillOverlay')]
  DNFillOverlay = interface(DNImageTransformOperation)
  ['{4A792264-0307-4294-89B5-D511D1A34EDE}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;
    function get_Blend: DNFillBlendMode;
    procedure set_Blend(value: DNFillBlendMode);

  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.FillOverlay" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.FillOverlay" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.FillOverlay" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  FillBlendMode.
    ///  Read/write <see cref="T:Aspose.Slides.FillBlendMode" />
    ///  .
    ///</summary>
    property Blend: DNFillBlendMode read get_Blend write set_Blend;
  end;

  TDNFillOverlay = class(TDNGenericImport<DNFillOverlayClass, DNFillOverlay>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGrayScaleClass = interface(DNImageTransformOperationClass)
  ['{4FA02265-A8F2-588A-8A36-5074AF3A757B}']
  end;

  ///<summary>
  ///  Represents a Gray Scale effect. Converts all effect color values to a shade of gray,
  ///  corresponding to their luminance. Effect alpha (opacity) values are unaffected.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.GrayScale')]
  DNGrayScale = interface(DNImageTransformOperation)
  ['{847B0403-C75C-4D83-9133-4533DD4D439C}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.GrayScale" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.GrayScale" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.GrayScale" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGrayScale = class(TDNGenericImport<DNGrayScaleClass, DNGrayScale>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNHSLClass = interface(DNImageTransformOperationClass)
  ['{760538B4-E08F-5D57-AB4D-886B02B88F7D}']
  end;

  ///<summary>
  ///  Represents a Hue/Saturation/Luminance effect.
  ///  The hue, saturation, and luminance may each be adjusted relative to its current value.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.HSL')]
  DNHSL = interface(DNImageTransformOperation)
  ['{C3E5089D-4B30-3FE3-92B8-7C303D0470E9}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.HSL" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.HSL" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.HSL" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHSL = class(TDNGenericImport<DNHSLClass, DNHSL>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNLuminanceClass = interface(DNImageTransformOperationClass)
  ['{878A142E-0A85-56AF-9783-E3E255CFE2B8}']
  end;

  ///<summary>
  ///  Represents a Luminance effect.
  ///  Brightness linearly shifts all colors closer to white or black.
  ///  Contrast scales all colors to be either closer or further apart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.Luminance')]
  DNLuminance = interface(DNImageTransformOperation)
  ['{21AC3DB2-358A-3E97-86C3-8E94B0AED79A}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.Luminance" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.Luminance" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.Luminance" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLuminance = class(TDNGenericImport<DNLuminanceClass, DNLuminance>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNTintClass = interface(DNImageTransformOperationClass)
  ['{6B9B7CB9-4942-5FAC-941A-C9C6AB27F392}']
  end;

  ///<summary>
  ///  Represents a Tint effect.
  ///  Shifts effect color values towards/away from hue by the specified amount.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.Tint')]
  DNTint = interface(DNImageTransformOperation)
  ['{20FC2B70-35D3-305E-8F94-EB5835373D89}']
  { methods } 

    ///<summary>
    ///  Determines whether the specified <see cref="T:Aspose.Slides.Effects.Tint" />
    ///  is equal to the current <see cref="T:Aspose.Slides.Effects.Tint" />
    ///  .
    ///</summary>
    ///  <param name="obj">The <see cref="T:Aspose.Slides.Effects.Tint" />
    ///  to compare.</param>
    ///<returns>true if objects are equal; otherwise, false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for the current object.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTint = class(TDNGenericImport<DNTintClass, DNTint>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOperationCollectionClass = interface(DNPVIObjectClass)
  ['{0E098959-242D-589C-9B5B-66EED3852214}']
  end;

  ///<summary>
  ///  Represents a collection of effects apllied to an image.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.ImageTransformOperationCollection')]
  DNImageTransformOperationCollection = interface(DNPVIObject)
  ['{D900ECCD-C99B-389D-9075-CB7AF7D9F467}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Removes an image effect from a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index of an image effect that should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Adds the new Alpha Bi-Level effect to the end of a collection.
    ///</summary>
    ///  <param name="threshold">The threshold value for the alpha bi-level effect.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaBiLevelEffect(threshold: Single): DNIAlphaBiLevel;
    ///<summary>
    ///  Adds the new Alpha Ceiling effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaCeilingEffect: DNIAlphaCeiling;
    ///<summary>
    ///  Adds the new Alpha Floor effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaFloorEffect: DNIAlphaFloor;
    ///<summary>
    ///  Adds the new Alpha Inverse effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaInverseEffect: DNIAlphaInverse;
    ///<summary>
    ///  Adds the new Alpha Modulate effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaModulateEffect: DNIAlphaModulate;
    ///<summary>
    ///  Adds the new Alpha Modulate Fixed effect to the end of a collection.
    ///</summary>
    ///  <param name="amount">The percentage amount to scale the alpha.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaModulateFixedEffect(amount: Single): DNIAlphaModulateFixed;
    ///<summary>
    ///  Adds the new Alpha Replace effect to the end of a collection.
    ///</summary>
    ///  <param name="alpha">The new opacity value.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaReplaceEffect(alpha: Single): DNIAlphaReplace;
    ///<summary>
    ///  Adds the new Bi-Level (black/white) effect to the end of a collection.
    ///</summary>
    ///  <param name="threshold">the luminance threshold for the Bi-Level effect.
    ///  Values greater than or equal to the threshold are set to white.
    ///  Values lesser than the threshold are set to black.
    ///</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddBiLevelEffect(threshold: Single): DNIBiLevel;
    ///<summary>
    ///  Adds the new Blur effect to the end of a collection.
    ///</summary>
    ///  <param name="radius">The radius of blur.</param>
    ///  <param name="grow">
    ///  Specifies whether the bounds of the object should be grown as a result of the blurring.
    ///  True indicates the bounds are grown while false indicates that they are not.
    ///</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddBlurEffect(radius: Double; grow: Boolean): DNIBlur;
    ///<summary>
    ///  Adds the new Color Change effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddColorChangeEffect: DNIColorChange;
    ///<summary>
    ///  Adds the new Color Replacement effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddColorReplaceEffect: DNIColorReplace;
    ///<summary>
    ///  Adds the new Duotone effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddDuotoneEffect: DNIDuotone;
    ///<summary>
    ///  Adds the new Fill Overlay effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddFillOverlayEffect: DNIFillOverlay;
    ///<summary>
    ///  Adds the new Gray Scale effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddGrayScaleEffect: DNIGrayScale;
    ///<summary>
    ///  Adds the new Hue/Saturation/Luminance effect to the end of a collection.
    ///</summary>
    ///  <param name="hue">The number of degrees by which the hue is adjusted.</param>
    ///  <param name="saturation">The percentage by which the saturation is adjusted.</param>
    ///  <param name="luminance">The percentage by which the luminance is adjusted.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddHSLEffect(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    ///<summary>
    ///  Adds the new Luminance effect to the end of a collection.
    ///</summary>
    ///  <param name="brightness">The percent to change the brightness.</param>
    ///  <param name="contrast">The percent to change the contrast.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddLuminanceEffect(brightness: Single; contrast: Single): DNILuminance;
    ///<summary>
    ///  Adds the new Tint effect to the end of a collection.
    ///</summary>
    ///  <param name="hue">The hue towards which to tint.</param>
    ///  <param name="amount">Specifies by how much the color value is shifted.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddTintEffect(hue: Single; amount: Single): DNITint;
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIImageTransformOperation): Boolean;
    ///<summary>
    ///  Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  to an <see cref="T:System.Array" />
    ///  , starting at a particular <see cref="T:System.Array" />
    ///  index.
    ///</summary>
    ///  <param name="array">The one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="arrayIndex">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" />
    ///  is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is greater than the available space from <paramref name="arrayIndex" />
    ///  to the end of the destination <paramref name="array" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNIImageTransformOperation>; arrayIndex: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIImageTransformOperation>;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of image effects in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only; otherwise, false.
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNImageTransformOperationCollection = class(TDNGenericImport<DNImageTransformOperationCollectionClass, DNImageTransformOperationCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFillFormatClass = interface(DNPVIObjectClass)
  ['{1743C8D5-396D-5FBD-80D2-09ED343DA4A0}']
  end;

  ///<summary>
  ///  Represents a fill formatting options.
  ///</summary>
  [DNTypeName('Aspose.Slides.FillFormat')]
  DNFillFormat = interface(DNPVIObject)
  ['{E2413CCF-6632-39EB-8F31-AC422E6CE54F}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;
    function get_PictureFillFormat: DNIPictureFillFormat;
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);

  { methods } 

    ///<summary>
    ///  Gets effective fill formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IFillFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting shape's effective fill format properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IFillFormatEffectiveData effectiveFillFormat = pres.Slides[0].Shapes[0].FillFormat.GetEffective();
    ///  Console.WriteLine("Type: " + effectiveFillFormat.FillType);
    ///  switch (effectiveFillFormat.FillType)
    ///  {
    ///  case FillType.Solid:
    ///  Console.WriteLine("Fill color: " + effectiveFillFormat.SolidFillColor);
    ///  break;
    ///  case FillType.Pattern:
    ///  Console.WriteLine("Pattern style: " + effectiveFillFormat.PatternFormat.PatternStyle);
    ///  Console.WriteLine("Fore color: " + effectiveFillFormat.PatternFormat.ForeColor);
    ///  Console.WriteLine("Back color: " + effectiveFillFormat.PatternFormat.BackColor);
    ///  break;
    ///  case FillType.Gradient:
    ///  Console.WriteLine("Gradient direction: " + effectiveFillFormat.GradientFormat.GradientDirection);
    ///  Console.WriteLine("Gradient stops count: " + effectiveFillFormat.GradientFormat.GradientStops.Count);
    ///  break;
    ///  case FillType.Picture:
    ///  Console.WriteLine("Picture width: " + effectiveFillFormat.PictureFillFormat.Picture.Image.Width);
    ///  Console.WriteLine("Picture height: " + effectiveFillFormat.PictureFillFormat.Picture.Image.Height);
    ///  break;
    ///  }
    ///  }
    ///</code></example>
    function GetEffective: DNIFillFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the type of filling.
    ///  Read/write <see cref="T:Aspose.Slides.FillType" />
    ///  .
    ///</summary>
    property FillType: DNFillType read get_FillType write set_FillType;
    ///<summary>
    ///  Returns the fill color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    ///<summary>
    ///  Returns the gradient fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientFormat" />
    ///  .
    ///</summary>
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    ///<summary>
    ///  Returns the pattern fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPatternFormat" />
    ///  .
    ///</summary>
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
    ///<summary>
    ///  Returns the picture fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property PictureFillFormat: DNIPictureFillFormat read get_PictureFillFormat;
    ///<summary>
    ///  Determines whether the fill should be rotated with shape.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
  end;

  TDNFillFormat = class(TDNGenericImport<DNFillFormatClass, DNFillFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientFormatClass = interface(DNPVIObjectClass)
  ['{7CC04100-5ADE-5DF9-B956-DA5B8BAC4CFD}']
  end;

  ///<summary>
  ///  Represent a gradient format.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientFormat')]
  DNGradientFormat = interface(DNPVIObject)
  ['{0719D300-4D31-3437-8BA8-124FA7A61592}']
  { getters & setters } 

    function get_TileFlip: DNTileFlip;
    procedure set_TileFlip(value: DNTileFlip);
    function get_GradientDirection: DNGradientDirection;
    procedure set_GradientDirection(value: DNGradientDirection);
    function get_LinearGradientAngle: Single;
    procedure set_LinearGradientAngle(value: Single);
    function get_LinearGradientScaled: DNNullableBool;
    procedure set_LinearGradientScaled(value: DNNullableBool);
    function get_GradientShape: DNGradientShape;
    procedure set_GradientShape(value: DNGradientShape);
    function get_GradientStops: DNIGradientStopCollection;

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the flipping mode for a gradient.
    ///  Read/write <see cref="T:Aspose.Slides.TileFlip" />
    ///  .
    ///</summary>
    property TileFlip: DNTileFlip read get_TileFlip write set_TileFlip;
    ///<summary>
    ///  Returns or sets the style of a gradient.
    ///  Read/write <see cref="T:Aspose.Slides.GradientDirection" />
    ///  .
    ///</summary>
    property GradientDirection: DNGradientDirection read get_GradientDirection write set_GradientDirection;
    ///<summary>
    ///  Returns or sets the angle of a gradient.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property LinearGradientAngle: Single read get_LinearGradientAngle write set_LinearGradientAngle;
    ///<summary>
    ///  Determines whether a gradient is scaled.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property LinearGradientScaled: DNNullableBool read get_LinearGradientScaled write set_LinearGradientScaled;
    ///<summary>
    ///  Returns or sets the shape of a gradient.
    ///  Read/write <see cref="T:Aspose.Slides.GradientShape" />
    ///  .
    ///</summary>
    property GradientShape: DNGradientShape read get_GradientShape write set_GradientShape;
    ///<summary>
    ///  Returns the collection of gradient stops.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientStopCollection" />
    ///  .
    ///</summary>
    property GradientStops: DNIGradientStopCollection read get_GradientStops;
  end;

  TDNGradientFormat = class(TDNGenericImport<DNGradientFormatClass, DNGradientFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopClass = interface(DNPVIObjectClass)
  ['{7A44486D-18C6-538B-9238-FFBDE5C4081A}']
  end;

  ///<summary>
  ///  Represents a gradient format.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientStop')]
  DNGradientStop = interface(DNPVIObject)
  ['{16C9E179-CE91-340C-B294-6F606B4FA9D8}']
  { getters & setters } 

    function get_Position: Single;
    procedure set_Position(value: Single);
    function get_Color: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the position (0..1) of a gradient stop.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Position: Single read get_Position write set_Position;
    ///<summary>
    ///  Returns the color of a gradient stop.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Color: DNIColorFormat read get_Color;
  end;

  TDNGradientStop = class(TDNGenericImport<DNGradientStopClass, DNGradientStop>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopCollectionClass = interface(DNPVIObjectClass)
  ['{0D6FA51A-26CF-5494-943B-16EB4B244599}']
  end;

  ///<summary>
  ///  Represnts a collection of gradient stops.
  ///</summary>
  [DNTypeName('Aspose.Slides.GradientStopCollection')]
  DNGradientStopCollection = interface(DNPVIObject)
  ['{E68E20CA-A043-3188-95F3-0AE78E79BA77}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Creates the new gradient stop and inserts it at the specified index to the collection.
    ///</summary>
    ///  <param name="index">Index in the collection where new gradient stop will be inserted.</param>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="color">Color of the new radient stop.</param>
    procedure Insert(index: Int32; position: Single; color: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates the new gradient stop and inserts it at the specified index to the collection.
    ///</summary>
    ///  <param name="index">Index in the collection where new gradient stop will be inserted.</param>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="presetColor">Color of the new radient stop.</param>
    procedure Insert(index: Int32; position: Single; presetColor: DNPresetColor); overload;
    ///<summary>
    ///  Creates the new gradient stop and inserts it at the specified index to the collection.
    ///</summary>
    ///  <param name="index">Index in the collection where new gradient stop will be inserted.</param>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="schemeColor">Color of the new radient stop.</param>
    procedure Insert(index: Int32; position: Single; schemeColor: DNSchemeColor); overload;
    ///<summary>
    ///  Removes a gradient stop at the specified index.
    ///</summary>
    ///  <param name="index">Index of a gradient stop that should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIGradientStop>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of gradient stops in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNGradientStopCollection = class(TDNGenericImport<DNGradientStopCollectionClass, DNGradientStopCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNHyperlinkClass = interface(DNPVIObjectClass)
  ['{814D6340-640B-5BF7-B1CF-C022A3370133}']
  { static getter & setter } 

    {class} function get_NoAction: DNHyperlink;
    {class} function get_Media: DNHyperlink;
    {class} function get_NextSlide: DNHyperlink;
    {class} function get_PreviousSlide: DNHyperlink;
    {class} function get_FirstSlide: DNHyperlink;
    {class} function get_LastSlide: DNHyperlink;
    {class} function get_LastVievedSlide: DNHyperlink;
    {class} function get_EndShow: DNHyperlink;

  { constructors } 

    ///<summary>
    ///  Creates an instance of a hyperlink.
    ///</summary>
    ///  <param name="url">Hyperlink URL.</param>
    {class} function init(url: string): DNHyperlink; overload;
    ///<summary>
    ///  Creates an instance of a hyperlink which points to specific slide.
    ///  Note: created hyperlink should be assigned to some object from the same presentation, otherwise link will be saved as NoAction.
    ///</summary>
    ///  <param name="slide">Target slide.</param>
    {class} function init(slide: DNISlide): DNHyperlink; overload;
    ///<summary>
    ///  Creates an instance of a hyperlink using another hyperlink as source, overriding secondary properties.
    ///</summary>
    ///  <param name="source">Source hyperlink</param>
    ///  <param name="targetFrame">Target frame</param>
    ///  <param name="tooltip">Tooltip text</param>
    ///  <param name="history"></param>
    ///  <param name="stopSoundsOnClick"></param>
    ///  <param name="highlightClick"></param>
    {class} function init(source: DNHyperlink; targetFrame: string; tooltip: string; history: Boolean; stopSoundsOnClick: Boolean; highlightClick: Boolean): DNHyperlink; overload;

  { static propertys } 

    ///<summary>
    ///  Returns a special "do nothing" hyperlink.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property NoAction: DNHyperlink read get_NoAction;
    ///<summary>
    ///  Returns a special "play mediafile" hyperlink. Used in AudioFrame and VideoFrame.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property Media: DNHyperlink read get_Media;
    ///<summary>
    ///  Returns a hyperlink to the next slide.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property NextSlide: DNHyperlink read get_NextSlide;
    ///<summary>
    ///  Returns a hyperlink to the previous slide.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property PreviousSlide: DNHyperlink read get_PreviousSlide;
    ///<summary>
    ///  Returns a hyperlink to the first slide of the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property FirstSlide: DNHyperlink read get_FirstSlide;
    ///<summary>
    ///  Returns a hyperlink to the last slide of the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property LastSlide: DNHyperlink read get_LastSlide;
    ///<summary>
    ///  Returns a hyperlink to the last viewed slide.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property LastVievedSlide: DNHyperlink read get_LastVievedSlide;
    ///<summary>
    ///  Returns a hyperlink which ends the show.
    ///  Read-only <see cref="T:Aspose.Slides.Hyperlink" />
    ///  .
    ///</summary>
    {class} property EndShow: DNHyperlink read get_EndShow;
  end;

  ///<summary>
  ///  Represents a hyperlink.
  ///</summary>
  [DNTypeName('Aspose.Slides.Hyperlink')]
  DNHyperlink = interface(DNPVIObject)
  ['{C70CC6C3-A109-3C88-8B9A-9AB3315A0B7B}']
  { getters & setters } 

    function get_ActionType: DNHyperlinkActionType;
    function get_ExternalUrl: string;
    function get_TargetSlide: DNISlide;
    function get_TargetFrame: string;
    procedure set_TargetFrame(value: string);
    function get_Tooltip: string;
    procedure set_Tooltip(value: string);
    function get_History: Boolean;
    procedure set_History(value: Boolean);
    function get_HighlightClick: Boolean;
    procedure set_HighlightClick(value: Boolean);
    function get_StopSoundOnClick: Boolean;
    procedure set_StopSoundOnClick(value: Boolean);
    function get_ColorSource: DNHyperlinkColorSource;
    procedure set_ColorSource(value: DNHyperlinkColorSource);

  { methods } 

    ///<summary>
    ///  Determines whether the two Hyperlink instances are equal.
    ///</summary>
    ///  <param name="obj">The Hyperlink to compare with the current Hyperlink.</param>
    ///<returns><b>true</b>
    ///  if the specified Hyperlink is equal to the current Hyperlink; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Determines whether the two Hyperlink instances are equal.
    ///</summary>
    ///  <param name="hlink">The Hyperlink to compare with the current Hyperlink.</param>
    ///<returns><b>true</b>
    ///  if the specified Hyperlink is equal to the current Hyperlink; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(hlink: DNIHyperlink): Boolean; overload;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<returns>Hash code for an URL.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns type of Hyperlink's action.
    ///  Read-only <see cref="T:Aspose.Slides.HyperlinkActionType" />
    ///  .
    ///</summary>
    property ActionType: DNHyperlinkActionType read get_ActionType;
    ///<summary>
    ///  Specifies the external URL.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ExternalUrl: string read get_ExternalUrl;
    ///<summary>
    ///  If the Hyperlink targets specific slide returns this slide.
    ///  Read-only <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    property TargetSlide: DNISlide read get_TargetSlide;
    ///<summary>
    ///  Returns the frame within the parent HTML frameset for the target
    ///  of the parent hyperlink when one exists.
    ///  Read/wite <see cref="T:System.String" />
    ///  .
    ///</summary>
    property TargetFrame: string read get_TargetFrame write set_TargetFrame;
    ///<summary>
    ///  Returns the string which may be surfaced in a user interface
    ///  as associated with the parent hyperlink.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Tooltip: string read get_Tooltip write set_Tooltip;
    ///<summary>
    ///  Determines whether the target of the parent hyperlink shall be added
    ///  to a list of viewed hyperlinks when it is invoked.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property History: Boolean read get_History write set_History;
    ///<summary>
    ///  Determines whether the hyperlink should be highlighted on click.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HighlightClick: Boolean read get_HighlightClick write set_HighlightClick;
    ///<summary>
    ///  Determines whether the sound should be stopped on hyperlink click.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property StopSoundOnClick: Boolean read get_StopSoundOnClick write set_StopSoundOnClick;
    ///<summary>
    ///  Represents the source of hyperlink color - either styles or portion format.
    ///  Read/write <see cref="T:Aspose.Slides.HyperlinkColorSource" />
    ///  .
    ///</summary>
    property ColorSource: DNHyperlinkColorSource read get_ColorSource write set_ColorSource;
  end;

  TDNHyperlink = class(TDNGenericImport<DNHyperlinkClass, DNHyperlink>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLightRigClass = interface(DNPVIObjectClass)
  ['{1148980C-D780-5F3D-BE42-6AF03CDE3914}']
  end;

  ///<summary>
  ///  Represents LightRig.
  ///</summary>
  [DNTypeName('Aspose.Slides.LightRig')]
  DNLightRig = interface(DNPVIObject)
  ['{5C094089-BE08-42E6-9145-8E35F16D8421}']
  { getters & setters } 

    function get_Direction: DNLightingDirection;
    procedure set_Direction(value: DNLightingDirection);
    function get_LightType: DNLightRigPresetType;
    procedure set_LightType(value: DNLightRigPresetType);

  { methods } 

    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  If any of coordinate value is float.NaN, all rotation is undefined.
    ///</summary>
    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    ///<summary>
    ///  A rotation is defined through the use of a latitude
    ///  coordinate, a longitude coordinate, and a revolution about the axis
    ///  as the latitude and longitude coordinates.
    ///  first element in return array - latitude, second - longitude, third - revolution.
    ///  Returns null if no rotation defined.
    ///</summary>
    function GetRotation: TArray<Single>;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Light direction.
    ///  Read/write <see cref="T:Aspose.Slides.LightingDirection" />
    ///  .
    ///</summary>
    property Direction: DNLightingDirection read get_Direction write set_Direction;
    ///<summary>
    ///  Represents a preset light right that can be applied to a shape.
    ///  The light rig represents a group of lights oriented
    ///  in a specific way relative to a 3D scene.
    ///  Read/write <see cref="T:Aspose.Slides.LightRigPresetType" />
    ///  .
    ///</summary>
    property LightType: DNLightRigPresetType read get_LightType write set_LightType;
  end;

  TDNLightRig = class(TDNGenericImport<DNLightRigClass, DNLightRig>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLineFillFormatClass = interface(DNPVIObjectClass)
  ['{7ABD77D7-F471-5B26-AE10-28893C61F6E9}']
  end;

  ///<summary>
  ///  Represents properties for lines filling.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineFillFormat')]
  DNLineFillFormat = interface(DNPVIObject)
  ['{B2BADB31-998E-3CF6-AF35-1FD8DDCD0E77}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the fill type.
    ///  Read/write <see cref="T:Aspose.Slides.FillType" />
    ///  .
    ///</summary>
    property FillType: DNFillType read get_FillType write set_FillType;
    ///<summary>
    ///  Determines whether the fill should be rotated with a shape.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
    ///<summary>
    ///  Returns the color of a solid fill.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    ///<summary>
    ///  Returns the gradient fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IGradientFormat" />
    ///  .
    ///</summary>
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    ///<summary>
    ///  Returns the pattern fill format.
    ///  Read-only <see cref="T:Aspose.Slides.IPatternFormat" />
    ///  .
    ///</summary>
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
  end;

  TDNLineFillFormat = class(TDNGenericImport<DNLineFillFormatClass, DNLineFillFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLineFormatClass = interface(DNPVIObjectClass)
  ['{F82AD5FB-CB36-5C00-87EF-D6D4CE3755EC}']
  end;

  ///<summary>
  ///  Represents format of a line.
  ///</summary>
  [DNTypeName('Aspose.Slides.LineFormat')]
  DNLineFormat = interface(DNPVIObject)
  ['{1ECC52A1-4013-3DC0-8E97-6482CD58E720}']
  { getters & setters } 

    function get_IsFormatNotDefined: Boolean;
    function get_FillFormat: DNILineFillFormat;
    function get_SketchFormat: DNISketchFormat;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_DashStyle: DNLineDashStyle;
    procedure set_DashStyle(value: DNLineDashStyle);
    function get_CustomDashPattern: TArray<Single>;
    procedure set_CustomDashPattern(value: TArray<Single>);
    function get_CapStyle: DNLineCapStyle;
    procedure set_CapStyle(value: DNLineCapStyle);
    function get_Style: DNLineStyle;
    procedure set_Style(value: DNLineStyle);
    function get_Alignment: DNLineAlignment;
    procedure set_Alignment(value: DNLineAlignment);
    function get_JoinStyle: DNLineJoinStyle;
    procedure set_JoinStyle(value: DNLineJoinStyle);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_BeginArrowheadStyle: DNLineArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNLineArrowheadStyle);
    function get_EndArrowheadStyle: DNLineArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNLineArrowheadStyle);
    function get_BeginArrowheadWidth: DNLineArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNLineArrowheadWidth);
    function get_EndArrowheadWidth: DNLineArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNLineArrowheadWidth);
    function get_BeginArrowheadLength: DNLineArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNLineArrowheadLength);
    function get_EndArrowheadLength: DNLineArrowheadLength;
    procedure set_EndArrowheadLength(value: DNLineArrowheadLength);

  { methods } 

    ///<summary>
    ///  Determines whether the two LineFormat instances are equal.
    ///</summary>
    ///  <param name="lineFormat">The LineFormat to compare with the current LineFormat.</param>
    ///<returns><b>true</b>
    ///  if the specified LineFormat is equal to the current LineFormat;
    ///  otherwise, <b>false</b>
    ///  .
    ///</returns>
    function Equals(lineFormat: DNILineFormat): Boolean; overload;
    ///<summary>
    ///  Gets effective line formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ILineFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting shape's effective line format properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  ILineFormatEffectiveData effectiveLineFormat = pres.Slides[0].Shapes[0].LineFormat.GetEffective();
    ///  Console.WriteLine("Style: " + effectiveLineFormat.Style);
    ///  Console.WriteLine("Width: " + effectiveLineFormat.Width);
    ///  Console.WriteLine("Fill type: " + effectiveLineFormat.FillFormat.FillType);
    ///  }
    ///</code></example>
    function GetEffective: DNILineFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns true if line format is not defined (as just created, default).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsFormatNotDefined: Boolean read get_IsFormatNotDefined;
    ///<summary>
    ///  Returns the fill format of a line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNILineFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns the sketch format of a line.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFillFormat" />
    ///  .
    ///</summary>
    property SketchFormat: DNISketchFormat read get_SketchFormat;
    ///<summary>
    ///  Returns or sets the width of a line.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the line dash style.
    ///  Read/write <see cref="T:Aspose.Slides.LineDashStyle" />
    ///  .
    ///</summary>
    property DashStyle: DNLineDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  Returns or sets the custom dash pattern.
    ///  Read/write <see cref="T:System.Single" />
    ///  [].
    ///</summary>
    property CustomDashPattern: TArray<Single> read get_CustomDashPattern write set_CustomDashPattern;
    ///<summary>
    ///  Returns or sets the line cap style.
    ///  Read/write <see cref="T:Aspose.Slides.LineCapStyle" />
    ///  .
    ///</summary>
    property CapStyle: DNLineCapStyle read get_CapStyle write set_CapStyle;
    ///<summary>
    ///  Returns or sets the line style.
    ///  Read/write <see cref="T:Aspose.Slides.LineStyle" />
    ///  .
    ///</summary>
    property Style: DNLineStyle read get_Style write set_Style;
    ///<summary>
    ///  Returns or sets the line alignment.
    ///  Read/write <see cref="T:Aspose.Slides.LineAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNLineAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Returns or sets the lines join style.
    ///  Read/write <see cref="T:Aspose.Slides.LineJoinStyle" />
    ///  .
    ///</summary>
    property JoinStyle: DNLineJoinStyle read get_JoinStyle write set_JoinStyle;
    ///<summary>
    ///  Returns or sets the miter limit of a line.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    ///<summary>
    ///  Returns or sets the arrowhead style at the beginning of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadStyle" />
    ///  .
    ///</summary>
    property BeginArrowheadStyle: DNLineArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    ///<summary>
    ///  Returns or sets the arrowhead style at the end of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadStyle" />
    ///  .
    ///</summary>
    property EndArrowheadStyle: DNLineArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    ///<summary>
    ///  Returns or sets the arrowhead width at the beginning of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadWidth" />
    ///  .
    ///</summary>
    property BeginArrowheadWidth: DNLineArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    ///<summary>
    ///  Returns or sets the arrowhead width at the end of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadWidth" />
    ///  .
    ///</summary>
    property EndArrowheadWidth: DNLineArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    ///<summary>
    ///  Returns or sets the arrowhead length at the beginning of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadLength" />
    ///  .
    ///</summary>
    property BeginArrowheadLength: DNLineArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    ///<summary>
    ///  Returns or sets the arrowhead length at the end of a line.
    ///  Read/write <see cref="T:Aspose.Slides.LineArrowheadLength" />
    ///  .
    ///</summary>
    property EndArrowheadLength: DNLineArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
  end;

  TDNLineFormat = class(TDNGenericImport<DNLineFormatClass, DNLineFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphFormatClass = interface(DNPVIObjectClass)
  ['{E1BB1CA6-8FBB-5465-AC11-49E425400561}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Slides.ParagraphFormat" />
    ///  class.
    ///</summary>
    {class} function init: DNParagraphFormat;

  end;

  ///<summary>
  ///  This class contains the paragraph formatting properties. Unlike <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
  ///  , all properties of this class are writeable.
  ///</summary>
  ///<remarks><para>This class is used to return and manipulate paragraph formatting properties defined for the particular paragraph. This means that
  ///  no inheritance is applied when getting values so for the majority of cases you will get values meaning "undefined".</para><para>In order to get the effective formatting parameter values including inherited you need to use <see cref="M:Aspose.Slides.ParagraphFormat.GetEffective" />
  ///  method
  ///  which returns a <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
  ///  instance.</para></remarks>
  [DNTypeName('Aspose.Slides.ParagraphFormat')]
  DNParagraphFormat = interface(DNPVIObject)
  ['{DF3DE8FF-FE22-4672-8246-F3F2E1D3BF89}']
  { getters & setters } 

    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_SpaceWithin: Single;
    procedure set_SpaceWithin(value: Single);
    function get_SpaceBefore: Single;
    procedure set_SpaceBefore(value: Single);
    function get_SpaceAfter: Single;
    procedure set_SpaceAfter(value: Single);
    function get_EastAsianLineBreak: DNNullableBool;
    procedure set_EastAsianLineBreak(value: DNNullableBool);
    function get_RightToLeft: DNNullableBool;
    procedure set_RightToLeft(value: DNNullableBool);
    function get_LatinLineBreak: DNNullableBool;
    procedure set_LatinLineBreak(value: DNNullableBool);
    function get_HangingPunctuation: DNNullableBool;
    procedure set_HangingPunctuation(value: DNNullableBool);
    function get_MarginLeft: Single;
    procedure set_MarginLeft(value: Single);
    function get_MarginRight: Single;
    procedure set_MarginRight(value: Single);
    function get_Indent: Single;
    procedure set_Indent(value: Single);
    function get_DefaultTabSize: Single;
    procedure set_DefaultTabSize(value: Single);
    function get_Tabs: DNITabCollection;
    function get_FontAlignment: DNFontAlignment;
    procedure set_FontAlignment(value: DNFontAlignment);

  { methods } 

    ///<summary>
    ///  Gets effective paragraph formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some effective paragraph format properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes[0] as IAutoShape;
    ///  IParagraphFormatEffectiveData effectiveParagraphFormat = shape.TextFrame.Paragraphs[0].ParagraphFormat.GetEffective();
    ///  Console.WriteLine("Text alignment: " + effectiveParagraphFormat.Alignment);
    ///  Console.WriteLine("Indent: " + effectiveParagraphFormat.Indent);
    ///  Console.WriteLine("Bullet type: " + effectiveParagraphFormat.Bullet.Type);
    ///  }
    ///</code></example>
    function GetEffective: DNIParagraphFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the text alignment in a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.TextAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Returns or sets the amount of space between base lines in a paragraph. Positive value means percentage, negative - size in points. No inheritance applied.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceWithin: Single read get_SpaceWithin write set_SpaceWithin;
    ///<summary>
    ///  Returns or sets the amount of space before the first line in a paragraph with no inheritance.
    ///  A positive value specifies the percentage of the font size that the white space should be.
    ///  A negative value specifies the size of the white space in point size.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceBefore: Single read get_SpaceBefore write set_SpaceBefore;
    ///<summary>
    ///  Returns or sets the amount of space after the last line in a paragraph with no inheritance.
    ///  A positive value specifies the percentage of the font size that the white space should be.
    ///  A negative value specifies the size of the white space in point size.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property SpaceAfter: Single read get_SpaceAfter write set_SpaceAfter;
    ///<summary>
    ///  Determines whether the East Asian line break is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property EastAsianLineBreak: DNNullableBool read get_EastAsianLineBreak write set_EastAsianLineBreak;
    ///<summary>
    ///  Determines whether the Right to Left writing is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property RightToLeft: DNNullableBool read get_RightToLeft write set_RightToLeft;
    ///<summary>
    ///  Determines whether the Latin line break is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property LatinLineBreak: DNNullableBool read get_LatinLineBreak write set_LatinLineBreak;
    ///<summary>
    ///  Determines whether the hanging punctuation is used in a paragraph. No inheritance applied.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property HangingPunctuation: DNNullableBool read get_HangingPunctuation write set_HangingPunctuation;
    ///<summary>
    ///  Returns or sets the left margin in a paragraph with no inheritance.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginLeft: Single read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin in a paragraph with no inheritance.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property MarginRight: Single read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets paragraph First Line Indent/Hanging Indent with no inheritance. Hanging Indent can be defined with negative values.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Indent: Single read get_Indent write set_Indent;
    ///<summary>
    ///  Returns or sets default tabulation size with no inheritance.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property DefaultTabSize: Single read get_DefaultTabSize write set_DefaultTabSize;
    ///<summary>
    ///  Returns tabulations of a paragraph. No inheritance applied.
    ///  Read-only <see cref="T:Aspose.Slides.ITabCollection" />
    ///  .
    ///</summary>
    property Tabs: DNITabCollection read get_Tabs;
    ///<summary>
    ///  Returns or sets a font alignment in a paragraph with no inheritance.
    ///  Read/write <see cref="T:Aspose.Slides.FontAlignment" />
    ///  .
    ///</summary>
    property FontAlignment: DNFontAlignment read get_FontAlignment write set_FontAlignment;
  end;

  TDNParagraphFormat = class(TDNGenericImport<DNParagraphFormatClass, DNParagraphFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPatternFormatClass = interface(DNPVIObjectClass)
  ['{6834213D-FB60-5954-A357-38ACAACE3165}']
  end;

  ///<summary>
  ///  Represents a pattern to fill a shape.
  ///</summary>
  [DNTypeName('Aspose.Slides.PatternFormat')]
  DNPatternFormat = interface(DNPVIObject)
  ['{4CE513BD-142A-3E6C-A99B-708140841EE2}']
  { getters & setters } 

    function get_PatternStyle: DNPatternStyle;
    procedure set_PatternStyle(value: DNPatternStyle);
    function get_ForeColor: DNIColorFormat;
    function get_BackColor: DNIColorFormat;

  { methods } 

    ///<summary>
    ///  Creates a tile image for the pattern fill with a specified colors.
    ///</summary>
    ///  <param name="background">The background <see cref="T:System.Drawing.Color" />
    ///  for the pattern.</param>
    ///  <param name="foreground">The foreground <see cref="T:System.Drawing.Color" />
    ///  for the pattern.</param>
    ///<returns>Tile <see cref="T:System.Drawing.Bitmap" />
    ///  .</returns>
    function GetTileImage(background: DDN.Aspose.Common.DNColor; foreground: DDN.Aspose.Common.DNColor): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Creates a tile image for the pattern fill.
    ///</summary>
    ///  <param name="styleColor">The default <see cref="T:System.Drawing.Color" />
    ///  ,
    ///  defined in ShapeEx's StyleEx object. Fill's colors can depend on this.</param>
    ///<returns>Tile <see cref="T:System.Drawing.Bitmap" />
    ///  .</returns>
    function GetTileImage(styleColor: DDN.Aspose.Common.DNColor): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the pattern style.
    ///  Read/write <see cref="T:Aspose.Slides.PatternStyle" />
    ///  .
    ///</summary>
    property PatternStyle: DNPatternStyle read get_PatternStyle write set_PatternStyle;
    ///<summary>
    ///  Returns the foreground pattern color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ForeColor: DNIColorFormat read get_ForeColor;
    ///<summary>
    ///  Returns the background pattern color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property BackColor: DNIColorFormat read get_BackColor;
  end;

  TDNPatternFormat = class(TDNGenericImport<DNPatternFormatClass, DNPatternFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureClass = interface(DNPVIObjectClass)
  ['{77D045A9-4050-55BA-AD70-A3849FC3D09E}']
  end;

  ///<summary>
  ///  Represents a picture in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Picture')]
  DNPicture = interface(DNPVIObject)
  ['{83ED52A5-3C84-3DFB-A428-7D505E9DC576}']
  { getters & setters } 

    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_ImageTransform: DNIImageTransformOperationCollection;
    function get_Presentation: DNIPresentation;
    function get_Slide: DNIBaseSlide;

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True if objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash.
    ///</summary>
    ///<returns>Hash.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the embedded image.
    ///  Read/write <see cref="T:Aspose.Slides.IPPImage" />
    ///  .
    ///</summary>
    property Image: DNIPPImage read get_Image write set_Image;
    ///<summary>
    ///  Returns of sets linked image's URL.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns the collection of image transform effects.
    ///  Read-only <see cref="T:Aspose.Slides.Effects.IImageTransformOperationCollection" />
    ///  .
    ///</summary>
    property ImageTransform: DNIImageTransformOperationCollection read get_ImageTransform;
    ///<summary>
    ///  Returns the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
    ///<summary>
    ///  Returns the parent slide of a picture.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
  end;

  TDNPicture = class(TDNGenericImport<DNPictureClass, DNPicture>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureFillFormatClass = interface(DNPVIObjectClass)
  ['{CF0DEAF3-4579-572D-B412-0E289A80758F}']
  end;

  ///<summary>
  ///  Represents a picture fill style.
  ///</summary>
  [DNTypeName('Aspose.Slides.PictureFillFormat')]
  DNPictureFillFormat = interface(DNPVIObject)
  ['{699F7A33-A682-3DEA-B2CA-5980BC9F2D58}']
  { getters & setters } 

    function get_Dpi: Int32;
    procedure set_Dpi(value: Int32);
    function get_PictureFillMode: DNPictureFillMode;
    procedure set_PictureFillMode(value: DNPictureFillMode);
    function get_Picture: DNISlidesPicture;
    function get_CropLeft: Single;
    procedure set_CropLeft(value: Single);
    function get_CropTop: Single;
    procedure set_CropTop(value: Single);
    function get_CropRight: Single;
    procedure set_CropRight(value: Single);
    function get_CropBottom: Single;
    procedure set_CropBottom(value: Single);
    function get_StretchOffsetLeft: Single;
    procedure set_StretchOffsetLeft(value: Single);
    function get_StretchOffsetTop: Single;
    procedure set_StretchOffsetTop(value: Single);
    function get_StretchOffsetRight: Single;
    procedure set_StretchOffsetRight(value: Single);
    function get_StretchOffsetBottom: Single;
    procedure set_StretchOffsetBottom(value: Single);

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the dpi which is used to fill a picture.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Dpi: Int32 read get_Dpi write set_Dpi;
    ///<summary>
    ///  Returns or sets the picture fill mode.
    ///  Read/write <see cref="T:Aspose.Slides.PictureFillMode" />
    ///  .
    ///</summary>
    property PictureFillMode: DNPictureFillMode read get_PictureFillMode write set_PictureFillMode;
    ///<summary>
    ///  Returns the picture.
    ///  Read-only <see cref="T:Aspose.Slides.ISlidesPicture" />
    ///  .
    ///</summary>
    property Picture: DNISlidesPicture read get_Picture;
    ///<summary>
    ///  Returns or sets the number of percents of real image width that are cropped off
    ///  the left of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropLeft: Single read get_CropLeft write set_CropLeft;
    ///<summary>
    ///  Returns or sets the number of percents of real image height that are cropped off
    ///  the top of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropTop: Single read get_CropTop write set_CropTop;
    ///<summary>
    ///  Returns or sets the number of percents of real image width that are cropped off
    ///  the right of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropRight: Single read get_CropRight write set_CropRight;
    ///<summary>
    ///  Returns or sets the number of percents of real image height that are cropped off
    ///  the bottom of the picture.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CropBottom: Single read get_CropBottom write set_CropBottom;
    ///<summary>
    ///  Returns or sets left edge of the fill rectangle that is defined by a percentage offset
    ///  from the left edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetLeft: Single read get_StretchOffsetLeft write set_StretchOffsetLeft;
    ///<summary>
    ///  Returns or sets top edge of the fill rectangle that is defined by a percentage offset
    ///  from the top edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetTop: Single read get_StretchOffsetTop write set_StretchOffsetTop;
    ///<summary>
    ///  Returns or sets right edge of the fill rectangle that is defined by a percentage offset
    ///  from the right edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetRight: Single read get_StretchOffsetRight write set_StretchOffsetRight;
    ///<summary>
    ///  Returns or sets bottom edge of the fill rectangle that is defined by a percentage offset
    ///  from the bottom edge of the shape's bounding box.
    ///  A positive percentage specifies an inset, while a negative percentage specifies an outset.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property StretchOffsetBottom: Single read get_StretchOffsetBottom write set_StretchOffsetBottom;
  end;

  TDNPictureFillFormat = class(TDNGenericImport<DNPictureFillFormatClass, DNPictureFillFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeBevelClass = interface(DNPVIObjectClass)
  ['{5D3E0416-319B-5AF7-9BBF-AB4F22122AFC}']
  { constructors } 

    ///<summary>
    ///  Creates new instance.
    ///</summary>
    ///  <param name="bIsTopBevel">Is top bevel.</param>
    {class} function init(bIsTopBevel: Boolean): DNShapeBevel;

  end;

  ///<summary>
  ///  Contains the properties of shape's main face relief.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeBevel')]
  DNShapeBevel = interface(DNPVIObject)
  ['{144A7C0F-3F50-3F6F-845E-1B7A141FD1BB}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_BevelType: DNBevelPresetType;
    procedure set_BevelType(value: DNBevelPresetType);

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Bevel width.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Bevel height.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Bevel type.
    ///  Read/write <see cref="T:Aspose.Slides.BevelPresetType" />
    ///  .
    ///</summary>
    property BevelType: DNBevelPresetType read get_BevelType write set_BevelType;
  end;

  TDNShapeBevel = class(TDNGenericImport<DNShapeBevelClass, DNShapeBevel>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSketchFormatClass = interface(DNPVIObjectClass)
  ['{64CC063E-2462-5429-99AE-42A2E5518E2E}']
  end;

  ///<summary>
  ///  Represents properties for lines sketch format.
  ///</summary>
  [DNTypeName('Aspose.Slides.SketchFormat')]
  DNSketchFormat = interface(DNPVIObject)
  ['{4A917CC4-EE53-31BE-B75F-61884A2F8940}']
  { getters & setters } 

    function get_SketchType: DNLineSketchType;
    procedure set_SketchType(value: DNLineSketchType);

  { methods } 

    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the sketch type.
    ///  Read/write <see cref="T:Aspose.Slides.LineSketchType" />
    ///  .
    ///</summary>
    property SketchType: DNLineSketchType read get_SketchType write set_SketchType;
  end;

  TDNSketchFormat = class(TDNGenericImport<DNSketchFormatClass, DNSketchFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTabClass = interface(DNPVIObjectClass)
  ['{80015206-99C7-5ECC-9B52-D1340C8A7F17}']
  { constructors } 

    ///<summary>
    ///  Creates new Tab
    ///</summary>
    ///  <param name="position">Tab position.</param>
    ///  <param name="align">Align.</param>
    {class} function init(position: Double; align: DNTabAlignment): DNTab;

  end;

  ///<summary>
  ///  Represents a tabulation for a text.
  ///</summary>
  [DNTypeName('Aspose.Slides.Tab')]
  DNTab = interface(DNPVIObject)
  ['{2BDAD4D8-538D-4D32-961F-A2FCB122A7AC}']
  { getters & setters } 

    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_Alignment: DNTabAlignment;
    procedure set_Alignment(value: DNTabAlignment);

  { methods } 

    ///<summary>
    ///  Compares the current instance with another object of the same type.
    ///</summary>
    ///  <param name="obj">An object to compare with this instance.</param>
    ///<returns>A 32-bit integer that indicates the relative order of the comparands.
    ///  The return value has these meanings:
    ///<UL><LI> &lt; 0 - This instance is less than obj.</LI><LI> = 0 - This instance is equal to obj.</LI><LI> &gt; 0 - This instance is greater than obj.</LI></UL></returns>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets position of a tab.
    ///  Assigning this property can change tab's index in collection and invalidate Enumerator.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Position: Double read get_Position write set_Position;
    ///<summary>
    ///  Returns or sets align style of a tab.
    ///  Read/write <see cref="T:Aspose.Slides.TabAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTabAlignment read get_Alignment write set_Alignment;
  end;

  TDNTab = class(TDNGenericImport<DNTabClass, DNTab>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextFrameFormatClass = interface(DNPVIObjectClass)
  ['{0D2570E4-1E3E-55F3-96B8-5FD505EADFF2}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Slides.TextFrameFormat" />
    ///  class.
    ///</summary>
    {class} function init: DNTextFrameFormat;

  end;

  ///<summary>
  ///  Contains the TextFrame's formatTextFrameFormatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextFrameFormat')]
  DNTextFrameFormat = interface(DNPVIObject)
  ['{ADC8E6F4-1F10-4B58-A669-C674FEB48D48}']
  { getters & setters } 

    function get_ThreeDFormat: DNIThreeDFormat;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_WrapText: DNNullableBool;
    procedure set_WrapText(value: DNNullableBool);
    function get_AnchoringType: DNTextAnchorType;
    procedure set_AnchoringType(value: DNTextAnchorType);
    function get_CenterText: DNNullableBool;
    procedure set_CenterText(value: DNNullableBool);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_AutofitType: DNTextAutofitType;
    procedure set_AutofitType(value: DNTextAutofitType);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_ColumnSpacing: Double;
    procedure set_ColumnSpacing(value: Double);
    function get_RotationAngle: Single;
    procedure set_RotationAngle(value: Single);
    function get_Transform: DNTextShapeType;
    procedure set_Transform(value: DNTextShapeType);
    function get_KeepTextFlat: Boolean;
    procedure set_KeepTextFlat(value: Boolean);

  { methods } 

    ///<summary>
    ///  Gets effective text frame formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ITextFrameFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some of effective text frame formatting properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes[0] as IAutoShape;
    ///  ITextFrameFormatEffectiveData effectiveTextFrameFormat = shape.TextFrame.TextFrameFormat.GetEffective();
    ///  Console.WriteLine("Anchoring type: " + effectiveTextFrameFormat.AnchoringType);
    ///  Console.WriteLine("Autofit type: " + effectiveTextFrameFormat.AutofitType);
    ///  Console.WriteLine("Text vertical type: " + effectiveTextFrameFormat.TextVerticalType);
    ///  Console.WriteLine("Margins");
    ///  Console.WriteLine("   Left: " + effectiveTextFrameFormat.MarginLeft);
    ///  Console.WriteLine("   Top: " + effectiveTextFrameFormat.MarginTop);
    ///  Console.WriteLine("   Right: " + effectiveTextFrameFormat.MarginRight);
    ///  Console.WriteLine("   Bottom: " + effectiveTextFrameFormat.MarginBottom);
    ///  }
    ///</code></example>
    function GetEffective: DNITextFrameFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the ThreeDFormat object that represents 3d effect properties for a text.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IAutoShape autoShape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 10, 20, 400, 300);
    ///  ITextFrame textFrame = autoShape.TextFrame;
    ///  textFrame.Text = "Aspose.Slide Test Text";
    ///  // Set text transformation
    ///  textFrame.TextFrameFormat.Transform = TextShapeType.ArchUpPour;
    ///  // Set Extrusion
    ///  textFrame.TextFrameFormat.ThreeDFormat.ExtrusionColor.Color = Color.Orange;
    ///  textFrame.TextFrameFormat.ThreeDFormat.ExtrusionHeight = 6;
    ///  // Set Contour
    ///  textFrame.TextFrameFormat.ThreeDFormat.ContourColor.Color = Color.DarkRed;
    ///  textFrame.TextFrameFormat.ThreeDFormat.ContourWidth = 1.5;
    ///  // Set Depth
    ///  textFrame.TextFrameFormat.ThreeDFormat.Depth = 3;
    ///  // Set Material
    ///  textFrame.TextFrameFormat.ThreeDFormat.Material = MaterialPresetType.Plastic;
    ///  // Set Lighting
    ///  textFrame.TextFrameFormat.ThreeDFormat.LightRig.Direction = LightingDirection.Top;
    ///  textFrame.TextFrameFormat.ThreeDFormat.LightRig.LightType = LightRigPresetType.Balanced;
    ///  textFrame.TextFrameFormat.ThreeDFormat.LightRig.SetRotation(0, 0, 40);
    ///  // Set camera type
    ///  textFrame.TextFrameFormat.ThreeDFormat.Camera.CameraType = CameraPresetType.PerspectiveContrastingRightFacing;
    ///  }
    ///</code></example>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns or sets the left margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    ///<summary>
    ///  Returns or sets the right margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    ///<summary>
    ///  Returns or sets the top margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    ///<summary>
    ///  Returns or sets the bottom margin (points) in a TextFrame.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    ///<summary><b>True</b>
    ///  if text is wrapped at TextFrame's margins.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property WrapText: DNNullableBool read get_WrapText write set_WrapText;
    ///<summary>
    ///  Returns or sets vertical anchor text in a TextFrameEx.
    ///  Read/write <see cref="T:Aspose.Slides.TextAnchorType" />
    ///  .
    ///</summary>
    property AnchoringType: DNTextAnchorType read get_AnchoringType write set_AnchoringType;
    ///<summary>
    ///  If NullableBool.True then text should be centered in box horizontally.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property CenterText: DNNullableBool read get_CenterText write set_CenterText;
    ///<summary>
    ///  Determines text orientation.
    ///  The resulted value of visual text rotation summarized from this property and custom angle
    ///  in property RotationAngle.
    ///  Read/write <see cref="T:Aspose.Slides.TextVerticalType" />
    ///  .
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    ///<summary>
    ///  Returns or sets text's autofit mode.
    ///  Read/write <see cref="T:Aspose.Slides.TextAutofitType" />
    ///  .
    ///</summary>
    property AutofitType: DNTextAutofitType read get_AutofitType write set_AutofitType;
    ///<summary>
    ///  Returns or sets number of columns in the text area.
    ///  This value must be a positive number. Otherwise, the value will be set to zero.
    ///  Value 0 means undefined value.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    ///<summary>
    ///  Returns or sets the space between text columns in the text area (in points). This should only apply
    ///  when there is more than 1 column present.
    ///  This value must be a positive number. Otherwise, the value will be set to zero.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ColumnSpacing: Double read get_ColumnSpacing write set_ColumnSpacing;
    ///<summary>
    ///  Specifies custom the rotation that is being applied to the text within the bounding box. If it not
    ///  specified, the rotation of the accompanying shape is used. If it is specified, then this is
    ///  applied independently from the shape. That is the shape can have a rotation applied in
    ///  addition to the text itself having a rotation applied to it.
    ///  The resulted value of visual text rotation summarized from this property and predefined
    ///  vertical type in property TextVerticalType.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<example>
    ///  Consider the case where a shape has a rotation of 90 degrees clockwise applied to it.
    ///  In addition to this, the text body itself has a rotation of -90 degrees
    ///  counter-clockwise applied to it. Then the resulting shape would appear to
    ///  be rotated but the text within it would appear as though it had not been rotated at all.
    ///</example>
    property RotationAngle: Single read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets or sets text wrapping shape.
    ///  Read/write <see cref="T:Aspose.Slides.TextShapeType" />
    ///  .
    ///</summary>
    property Transform: DNTextShapeType read get_Transform write set_Transform;
    ///<summary>
    ///  Gets or sets keeping text flat even if a 3-D Rotation effect was applied.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property KeepTextFlat: Boolean read get_KeepTextFlat write set_KeepTextFlat;
  end;

  TDNTextFrameFormat = class(TDNGenericImport<DNTextFrameFormatClass, DNTextFrameFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextStyleClass = interface(DNPVIObjectClass)
  ['{E14168E3-422F-501D-B8D1-A4F7FB815B05}']
  { static fields getter & setter } 

   function __fakeFieldGet_MaxLevelCount: Byte;

  { static fields } 

    ///<summary>
    ///  Maximum count of style levels that can be defined.
    ///  Use it with GetLevel(int index)
    ///</summary>
    ///<example><code>
    ///  for (int i = 0; i &lt; TextStyle.MaxLevelCount; i++)
    ///  {
    ///  IParagraphFormat paragraphFormat = GetLevel(i);
    ///  ...
    ///  }
    ///</code></example>
    {class} property MaxLevelCount: Byte read __fakeFieldGet_MaxLevelCount;

  end;

  ///<summary>
  ///  This class contains the text style formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextStyle')]
  DNTextStyle = interface(DNPVIObject)
  ['{F1FD463A-17D6-3953-9C6F-BE23AB259669}']
  { getters & setters } 

    function get_DefaultParagraphFormat: DNIParagraphFormat;

  { methods } 

    ///<summary>
    ///  If level of style exist returns it, otherwise returns null.
    ///</summary>
    ///  <param name="index">Zero-based index of level. Must lay in 0..8 interval.</param>
    ///<returns>Formatting of level <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .</returns>
    function GetLevel(index: Int32): DNIParagraphFormat;
    ///<summary>
    ///  Gets effective text style formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ITextStyleEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting some of effective text style properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IAutoShape shape = pres.Slides[0].Shapes[0] as IAutoShape;
    ///  ITextStyleEffectiveData effectiveTextStyle = shape.TextFrame.TextFrameFormat.TextStyle.GetEffective();
    ///  for (int i = 0; i &lt;= 8; i++)
    ///  {
    ///  IParagraphFormatEffectiveData effectiveStyleLevel = effectiveTextStyle.GetLevel(i);
    ///  Console.WriteLine("= Effective paragraph formatting for style level #" + i + " =");
    ///  Console.WriteLine("Depth: " + effectiveStyleLevel.Depth);
    ///  Console.WriteLine("Indent: " + effectiveStyleLevel.Indent);
    ///  Console.WriteLine("Alignment: " + effectiveStyleLevel.Alignment);
    ///  Console.WriteLine("Font alignment: " + effectiveStyleLevel.FontAlignment);
    ///  }
    ///  }
    ///</code></example>
    function GetEffective: DNITextStyleEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Default paragraph propertiies.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphFormat" />
    ///  .
    ///</summary>
    property DefaultParagraphFormat: DNIParagraphFormat read get_DefaultParagraphFormat;
  end;

  TDNTextStyle = class(TDNGenericImport<DNTextStyleClass, DNTextStyle>) end;

  //-------------namespace: Aspose.Slides----------------
  DNThreeDFormatClass = interface(DNPVIObjectClass)
  ['{A7DD7492-9437-5348-8AAC-FCCAA75C7680}']
  end;

  ///<summary>
  ///  Represents 3-D properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ThreeDFormat')]
  DNThreeDFormat = interface(DNPVIObject)
  ['{54C4BC5C-183B-3284-AF5D-4E9F4D0D7889}']
  { getters & setters } 

    function get_ContourWidth: Double;
    procedure set_ContourWidth(value: Double);
    function get_ExtrusionHeight: Double;
    procedure set_ExtrusionHeight(value: Double);
    function get_Depth: Double;
    procedure set_Depth(value: Double);
    function get_BevelTop: DNIShapeBevel;
    function get_BevelBottom: DNIShapeBevel;
    function get_ContourColor: DNIColorFormat;
    function get_ExtrusionColor: DNIColorFormat;
    function get_Camera: DNICamera;
    function get_LightRig: DNILightRig;
    function get_Material: DNMaterialPresetType;
    procedure set_Material(value: DNMaterialPresetType);

  { methods } 

    ///<summary>
    ///  Gets effective 3-D formatting data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IThreeDFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates how to get effective properties for camera, light rig and shape's top bevel.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IThreeDFormatEffectiveData threeDEffectiveData = pres.Slides[0].Shapes[0].ThreeDFormat.GetEffective();
    ///  Console.WriteLine("= Effective camera properties =");
    ///  Console.WriteLine("Type: " + threeDEffectiveData.Camera.CameraType);
    ///  Console.WriteLine("Field of view: " + threeDEffectiveData.Camera.FieldOfViewAngle);
    ///  Console.WriteLine("Zoom: " + threeDEffectiveData.Camera.Zoom);
    ///  Console.WriteLine("= Effective light rig properties =");
    ///  Console.WriteLine("Type: " + threeDEffectiveData.LightRig.LightType);
    ///  Console.WriteLine("Direction: " + threeDEffectiveData.LightRig.Direction);
    ///  Console.WriteLine("= Effective shape's top face relief properties =");
    ///  Console.WriteLine("Type: " + threeDEffectiveData.BevelTop.BevelType);
    ///  Console.WriteLine("Width: " + threeDEffectiveData.BevelTop.Width);
    ///  Console.WriteLine("Height: " + threeDEffectiveData.BevelTop.Height);
    ///  }
    ///</code></example>
    function GetEffective: DNIThreeDFormatEffectiveData;
    ///<summary>
    ///  Compares with specified object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True is objects are equal, otherwise false.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code.
    ///</summary>
    ///<returns>Hash code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the width of a 3D contour.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ContourWidth: Double read get_ContourWidth write set_ContourWidth;
    ///<summary>
    ///  Returns or sets the height of an extrusion effect.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property ExtrusionHeight: Double read get_ExtrusionHeight write set_ExtrusionHeight;
    ///<summary>
    ///  Returns or sets the depth of a 3D shape.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Depth: Double read get_Depth write set_Depth;
    ///<summary>
    ///  Returns or sets the type of a top 3D bevel.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeBevel" />
    ///  .
    ///</summary>
    property BevelTop: DNIShapeBevel read get_BevelTop;
    ///<summary>
    ///  Returns or sets the type of a bottom 3D bevel.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeBevel" />
    ///  .
    ///</summary>
    property BevelBottom: DNIShapeBevel read get_BevelBottom;
    ///<summary>
    ///  Returns or sets the color of a contour.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ContourColor: DNIColorFormat read get_ContourColor;
    ///<summary>
    ///  Returns or sets the color of an extrusion.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property ExtrusionColor: DNIColorFormat read get_ExtrusionColor;
    ///<summary>
    ///  Returns or sets the settings of a camera.
    ///  Read-only <see cref="T:Aspose.Slides.ICamera" />
    ///  .
    ///</summary>
    property Camera: DNICamera read get_Camera;
    ///<summary>
    ///  Returns or sets the type of a light.
    ///  Read-only <see cref="T:Aspose.Slides.ILightRig" />
    ///  .
    ///</summary>
    property LightRig: DNILightRig read get_LightRig;
    ///<summary>
    ///  Returns or sets the type of a material.
    ///  Read/write <see cref="T:Aspose.Slides.MaterialPresetType" />
    ///  .
    ///</summary>
    property Material: DNMaterialPresetType read get_Material write set_Material;
  end;

  TDNThreeDFormat = class(TDNGenericImport<DNThreeDFormatClass, DNThreeDFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNRowCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F7CACAF-9C45-567E-A191-DB4D66B19A33}']
  end;

  ///<summary>
  ///  Represents table row collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.RowCollection')]
  DNRowCollection = interface(DDN.mscorlib.DNObject)
  ['{76C3CD3D-2DEF-34B5-9774-EBF608397A45}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Creates a copy of the specified template row and inserts it at the bottom of a table.
    ///</summary>
    ///  <param name="templ">Row which is used as a template.</param>
    ///  <param name="withAttachedRows">True to copy also all rows attached to the template row.</param>
    ///<returns>Added rows.</returns>
    function AddClone(templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    ///<summary>
    ///  Creates a copy of the specified template row and insert it at the specified position in a table.
    ///</summary>
    ///  <param name="index">Index of a new row.</param>
    ///  <param name="templ">Row which is used as a template.</param>
    ///  <param name="withAttachedRows">True to copy also all rows attached to the template row.</param>
    ///<returns>Inserted rows.</returns>
    function InsertClone(index: Int32; templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    ///<summary>
    ///  Removes a row at the specified position from a table.
    ///</summary>
    ///  <param name="firstRowIndex">Index of a row to delete.</param>
    ///  <param name="withAttachedRows">True to delete also all attached rows.</param>
    procedure RemoveAt(firstRowIndex: Int32; withAttachedRows: Boolean);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIRow>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of rows actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNRowCollection = class(TDNGenericImport<DNRowCollectionClass, DNRowCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNRowFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5762F82-9B5C-50A2-8A42-A438886CBDF9}']
  end;

  ///<summary>
  ///  Represents format of a table row.
  ///</summary>
  [DNTypeName('Aspose.Slides.RowFormat')]
  DNRowFormat = interface(DDN.mscorlib.DNObject)
  ['{7E642E43-FA54-3E60-AC00-529EEC70E23D}']
  { methods } 

    ///<summary>
    ///  Gets effective table row formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.IRowFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective fill format for different table logic parts.
    ///  Please note that cell formatting always has higher priority than row formatting, row - higher than column, column - higher that whole table.
    ///  So finally CellFormatEffectiveData properties always used to draw the table. The following code is just an example of API.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  ITable tbl = pres.Slides[0].Shapes[0] as ITable;
    ///  IFillFormatEffectiveData tableFillFormatEffective = tbl.TableFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData rowFillFormatEffective = tbl.Rows[0].RowFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData columnFillFormatEffective = tbl.Columns[0].ColumnFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData cellFillFormatEffective = tbl[0, 0].CellFormat.GetEffective().FillFormat;
    ///  /* Output and comparison */
    ///  }
    ///</code></example>
    function GetEffective: DNIRowFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRowFormat = class(TDNGenericImport<DNRowFormatClass, DNRowFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CADC58B-F494-5844-B062-A92073CAEF7A}']
  end;

  ///<summary>
  ///  Represents section of slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.Section')]
  DNSection = interface(DDN.mscorlib.DNObject)
  ['{57C1D7F6-0090-33E5-9A3C-FC0C7EA03637}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StartedFromSlide: DNISlide;

  { methods } 

    ///<summary>
    ///  Returns list of slides in the section.
    ///</summary>
    ///<returns>List of slides.</returns>
    function GetSlidesListOfSection: DNISectionSlideCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Name of the section.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns first slide of the section.
    ///</summary>
    property StartedFromSlide: DNISlide read get_StartedFromSlide;
  end;

  TDNSection = class(TDNGenericImport<DNSectionClass, DNSection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSectionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A9C2E96-2AA3-5B63-BD99-E97DFE6FE557}']
  end;

  ///<summary>
  ///  Represents a collection of sections.
  ///</summary>
  [DNTypeName('Aspose.Slides.SectionCollection')]
  DNSectionCollection = interface(DDN.mscorlib.DNObject)
  ['{5B4FB11E-B753-3643-9D7C-EF5788C39F62}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Add slides section started form specific slide.
    ///</summary>
    ///  <param name="name">Name of the section</param>
    ///  <param name="startedFromSlide">First slide of section</param>
    ///<returns>Added section.</returns>
    function AddSection(name: string; startedFromSlide: DNISlide): DNISection;
    ///<summary>
    ///  Add empty section to the end of the collection.
    ///</summary>
    ///  <param name="name">Name of the section</param>
    ///<returns>Added section.</returns>
    function AppendEmptySection(name: string): DNISection;
    ///<summary>
    ///  Add empty section to specified position of the collection.
    ///</summary>
    ///  <param name="name">Name of the section</param>
    ///  <param name="index">Index of new section.</param>
    ///<returns>Added section.</returns>
    function AddEmptySection(name: string; index: Int32): DNISection;
    ///<summary>
    ///  Returns an index of the specified section in the collection.
    ///</summary>
    ///  <param name="section">Section to find.</param>
    ///<returns>Index of a section or -1 if section not from this collection.</returns>
    function IndexOf(section: DNISection): Int32;
    ///<summary>
    ///  Remove section and slides contained in the section.
    ///</summary>
    ///  <param name="section">The section to remove from the collection.</param>
    procedure RemoveSectionWithSlides(section: DNISection);
    ///<summary>
    ///  Remove section. Slides contained in the section will be merged into previous section.
    ///</summary>
    ///  <param name="section">The section to remove from the collection.</param>
    procedure RemoveSection(section: DNISection);
    ///<summary>
    ///  Moves section and its slides from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="section">Section to move.</param>
    procedure ReorderSectionWithSlides(section: DNISection; index: Int32);
    ///<summary>
    ///  Copies the entire collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array</param>
    ///  <param name="index">Index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISection>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSectionCollection = class(TDNGenericImport<DNSectionCollectionClass, DNSectionCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSectionSlideCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{35178BC2-553C-5A79-91AF-2DD308AA483C}']
  end;

  ///<summary>
  ///  Represents a collection of slides in the section.
  ///</summary>
  [DNTypeName('Aspose.Slides.SectionSlideCollection')]
  DNSectionSlideCollection = interface(DDN.mscorlib.DNObject)
  ['{0E41EF3A-284F-3CCE-B7AF-33BAFC475725}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Copies the entire collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array</param>
    ///  <param name="index">Index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISlide>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSectionSlideCollection = class(TDNGenericImport<DNSectionSlideCollectionClass, DNSectionSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9135A13-8E8B-5A8C-A226-016D3064B86C}']
  end;

  ///<summary>
  ///  Represents a shape on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Shape')]
  DNShape = interface(DDN.mscorlib.DNObject)
  ['{E1A70A21-5C83-3031-A0C4-FCDCA84C174A}']
  { getters & setters } 

    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Defines that this shape isn't a placeholder.
    ///</summary>
    procedure RemovePlaceholder;
    ///<summary>
    ///  Adds a new placeholder if there is no and sets placeholder properties to a specified one.
    ///</summary>
    ///  <param name="placeholderToCopyFrom">Placeholder to copy content from.</param>
    ///<returns>New <see cref="P:Aspose.Slides.Shape.Placeholder" />
    ///  .</returns>
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    ///<summary>
    ///  Returns shape thumbnail.
    ///  ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
    ///</summary>
    ///<returns>Shape thumbnail.</returns>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns shape thumbnail.
    ///</summary>
    ///  <param name="bounds">Shape thumbnail bounds type.</param>
    ///  <param name="scaleX">X scale</param>
    ///  <param name="scaleY">Y scale</param>
    ///<returns>Shape thumbnail or null in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.</returns>
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether the shape is TextHolder_PPT.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsTextHolder: Boolean read get_IsTextHolder;
    ///<summary>
    ///  Returns the placeholder for a shape. Returns null if the shape has no placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.IPlaceholder" />
    ///  .
    ///</summary>
    property Placeholder: DNIPlaceholder read get_Placeholder;
    ///<summary>
    ///  Returns the shape's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns or sets the raw shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<example>
    ///  Code that attempts to assign undefined frame to IShape.Frame doesn't make sence in general case (particulary in case when parent GroupShape is multiple nested into other GroupShape-s). For example:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = new ShapeFrame(float.NaN, float.NaN, float.NaN, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, float.NaN);
    ///</code>
    ///  or
    ///<code>
    ///  slide.Shapes.AddAutoShape(ShapeType.RoundCornerRectangle, float.NaN, float.NaN, float.NaN, float.NaN);
    ///</code>
    ///  Such code can lead to unclear situations. So restrictions had been added for using undefined values for IShape.Frame. Values of x, y, width, height, flipH, flipV and rotationAngle must be defined (not float.NaN or NullableBool.NotDefined). Example code above now throws ArgumentException exception.
    ///  This applies to these use cases:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = ...; // cannot be undefined
    ///  IShapeCollection shapes = ...;
    ///  // x, y, width, height parameters cannot be float.NaN:
    ///  {
    ///  shapes.AddAudioFrameCD(...);
    ///  shapes.AddAudioFrameEmbedded(...);
    ///  shapes.AddAudioFrameLinked(...);
    ///  shapes.AddAutoShape(...);
    ///  shapes.AddChart(...);
    ///  shapes.AddConnector(...);
    ///  shapes.AddOleObjectFrame(...);
    ///  shapes.AddPictureFrame(...);
    ///  shapes.AddSmartArt(...);
    ///  shapes.AddTable(...);
    ///  shapes.AddVideoFrame(...);
    ///  shapes.InsertAudioFrameEmbedded(...);
    ///  shapes.InsertAudioFrameLinked(...);
    ///  shapes.InsertAutoShape(...);
    ///  shapes.InsertChart(...);
    ///  shapes.InsertConnector(...);
    ///  shapes.InsertOleObjectFrame(...);
    ///  shapes.InsertPictureFrame(...);
    ///  shapes.InsertTable(...);
    ///  shapes.InsertVideoFrame(...);
    ///  }
    ///</code>
    ///  But IShape.RawFrame frame properties can be undefined. This make sence when shape is linked to placeholder. Then undefined shape frame values is overridden from the parent placeholder shape. If there is no parent placeholder shape for that shape then that shape uses default values when it evaluates effective frame based on its IShape.RawFrame. Default values are 0 and NullableBool.False for x, y, width, height, flipH, flipV and rotationAngle. For example:
    ///<code>
    ///  IShape shape = ...; // shape is linked to placeholder
    ///  shape.RawFrame = new ShapeFrame(float.NaN, float.NaN, 100, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, 0); // now shape inherits x, y, height, flipH, flipV values form placeholder and overrides width=100 and rotationAngle=0.
    ///</code></example>
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    ///<summary>
    ///  Returns or sets the shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value of each property of the returned IShapeFrame instance is not
    ///  undefined (is not NaN or NotDefined).
    ///  Value of each property of the assigned IShapeFrame instance must be not
    ///  undefined (must be not NaN or NotDefined).
    ///  You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns the LineFormat object that contains line formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have line properties.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the ThreeDFormat object that 3d effect properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have 3d properties.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns the EffectFormat object which contains pixel effects applied to a shape.
    ///  Note: can return null for certain types of shapes which don't have effect properties.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have fill properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse click.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse over.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    ///<summary>
    ///  Returns the hyperlink manager.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkManager" />
    ///  .
    ///</summary>
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    ///<summary>
    ///  Determines whether the shape is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///  Shapes[0] returns the shape at the back of the z-order,
    ///  and Shapes[Shapes.Count - 1] returns the shape at the front of the z-order.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    ///<summary>
    ///  Returns the number of connection sites on the shape.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    ///<summary>
    ///  Returns or sets the number of degrees the specified shape is rotated around
    ///  the z-axis. A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Rotation: Single read get_Rotation write set_Rotation;
    ///<summary>
    ///  Returns or sets the x-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Property specifies how a shape will render in black-and-white display mode..
    ///  Read/write <see cref="T:Aspose.Slides.BlackWhiteMode" />
    ///  .
    ///</summary>
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    ///<summary>
    ///  Gets unique shape identifier in presentation scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.OfficeInteropShapeId" />
    ///  for getting unique shape identifier in slide scope.
    ///</summary>
    property UniqueId: UInt32 read get_UniqueId;
    ///<summary>
    ///  Gets unique shape identifier in slide scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.UniqueId" />
    ///  for getting unique shape identifier in presentation scope.
    ///</summary>
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    ///<summary>
    ///  Returns or sets the alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Returns or sets the title of alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    ///<summary>
    ///  Returns or sets the name of a shape.
    ///  Must be not null. Use empty string value if needed.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    ///<summary>
    ///  Determines whether the shape is grouped.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.ParentGroup" />
    ///  returns parent GroupShape object if shape is grouped.
    ///</remarks>
    property IsGrouped: Boolean read get_IsGrouped;
    ///<summary>
    ///  Returns parent GroupShape object if shape is grouped. Otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.IsGrouped" />
    ///  determines whether the shape is grouped.
    ///</remarks>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    ///<summary>
    ///  Returns the parent slide of a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGeometryShapeClass = interface(DNShapeClass)
  ['{921511E5-1C0D-5217-94B8-5FB6B1323181}']
  end;

  ///<summary>
  ///  Represents the parent class for all geometric shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.GeometryShape')]
  DNGeometryShape = interface(DNShape)
  ['{6CB72E9E-B5BD-3992-8755-5C4B90AD31A0}']
  { getters & setters } 

    function get_ShapeStyle: DNIShapeStyle;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///</returns>
    ///<example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  IGeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    ///<summary>
    ///  Updates shape geometry from <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  object. Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPath">Geometry path</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path found</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath0 = new GeometryPath();
    ///  geometryPath0.MoveTo(0, 0);
    ///  geometryPath0.LineTo(shape.Width, 0);
    ///  geometryPath0.LineTo(shape.Width, shape.Height/3);
    ///  geometryPath0.LineTo(0, shape.Height / 3);
    ///  geometryPath0.CloseFigure();
    ///  GeometryPath geometryPath1 = new GeometryPath();
    ///  geometryPath1.MoveTo(0, shape.Height/3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height / 3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height);
    ///  geometryPath1.LineTo(0, shape.Height);
    ///  geometryPath1.CloseFigure();
    ///  shape.SetGeometryPaths(new GeometryPath[] { geometryPath0, geometryPath1});
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    ///<summary>
    ///  Updates shape geometry from array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  . Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPaths">Array geometry paths</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    ///<summary>
    ///  Creates and returns array of shape's elements.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ShapeElement" />
    ///</returns>
    function CreateShapeElements: TArray<DNIShapeElement>;
    ///<summary>
    ///  Defines that this shape isn't a placeholder.
    ///</summary>
    procedure RemovePlaceholder;
    ///<summary>
    ///  Adds a new placeholder if there is no and sets placeholder properties to a specified one.
    ///</summary>
    ///  <param name="placeholderToCopyFrom">Placeholder to copy content from.</param>
    ///<returns>New <see cref="P:Aspose.Slides.Shape.Placeholder" />
    ///  .</returns>
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    ///<summary>
    ///  Returns shape thumbnail.
    ///  ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
    ///</summary>
    ///<returns>Shape thumbnail.</returns>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns shape thumbnail.
    ///</summary>
    ///  <param name="bounds">Shape thumbnail bounds type.</param>
    ///  <param name="scaleX">X scale</param>
    ///  <param name="scaleY">Y scale</param>
    ///<returns>Shape thumbnail or null in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.</returns>
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns shape's style object.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeStyle" />
    ///  .
    ///</summary>
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    ///<summary>
    ///  Returns or sets the geometry preset type.
    ///  Note: on value changing all adjustment values will reset to their default values.
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns a collection of shape's adjustment values.
    ///  Read-only <see cref="T:Aspose.Slides.IAdjustValueCollection" />
    ///  .
    ///</summary>
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    ///<summary>
    ///  Determines whether the shape is TextHolder_PPT.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsTextHolder: Boolean read get_IsTextHolder;
    ///<summary>
    ///  Returns the placeholder for a shape. Returns null if the shape has no placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.IPlaceholder" />
    ///  .
    ///</summary>
    property Placeholder: DNIPlaceholder read get_Placeholder;
    ///<summary>
    ///  Returns the shape's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns or sets the raw shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<example>
    ///  Code that attempts to assign undefined frame to IShape.Frame doesn't make sence in general case (particulary in case when parent GroupShape is multiple nested into other GroupShape-s). For example:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = new ShapeFrame(float.NaN, float.NaN, float.NaN, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, float.NaN);
    ///</code>
    ///  or
    ///<code>
    ///  slide.Shapes.AddAutoShape(ShapeType.RoundCornerRectangle, float.NaN, float.NaN, float.NaN, float.NaN);
    ///</code>
    ///  Such code can lead to unclear situations. So restrictions had been added for using undefined values for IShape.Frame. Values of x, y, width, height, flipH, flipV and rotationAngle must be defined (not float.NaN or NullableBool.NotDefined). Example code above now throws ArgumentException exception.
    ///  This applies to these use cases:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = ...; // cannot be undefined
    ///  IShapeCollection shapes = ...;
    ///  // x, y, width, height parameters cannot be float.NaN:
    ///  {
    ///  shapes.AddAudioFrameCD(...);
    ///  shapes.AddAudioFrameEmbedded(...);
    ///  shapes.AddAudioFrameLinked(...);
    ///  shapes.AddAutoShape(...);
    ///  shapes.AddChart(...);
    ///  shapes.AddConnector(...);
    ///  shapes.AddOleObjectFrame(...);
    ///  shapes.AddPictureFrame(...);
    ///  shapes.AddSmartArt(...);
    ///  shapes.AddTable(...);
    ///  shapes.AddVideoFrame(...);
    ///  shapes.InsertAudioFrameEmbedded(...);
    ///  shapes.InsertAudioFrameLinked(...);
    ///  shapes.InsertAutoShape(...);
    ///  shapes.InsertChart(...);
    ///  shapes.InsertConnector(...);
    ///  shapes.InsertOleObjectFrame(...);
    ///  shapes.InsertPictureFrame(...);
    ///  shapes.InsertTable(...);
    ///  shapes.InsertVideoFrame(...);
    ///  }
    ///</code>
    ///  But IShape.RawFrame frame properties can be undefined. This make sence when shape is linked to placeholder. Then undefined shape frame values is overridden from the parent placeholder shape. If there is no parent placeholder shape for that shape then that shape uses default values when it evaluates effective frame based on its IShape.RawFrame. Default values are 0 and NullableBool.False for x, y, width, height, flipH, flipV and rotationAngle. For example:
    ///<code>
    ///  IShape shape = ...; // shape is linked to placeholder
    ///  shape.RawFrame = new ShapeFrame(float.NaN, float.NaN, 100, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, 0); // now shape inherits x, y, height, flipH, flipV values form placeholder and overrides width=100 and rotationAngle=0.
    ///</code></example>
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    ///<summary>
    ///  Returns or sets the shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value of each property of the returned IShapeFrame instance is not
    ///  undefined (is not NaN or NotDefined).
    ///  Value of each property of the assigned IShapeFrame instance must be not
    ///  undefined (must be not NaN or NotDefined).
    ///  You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns the LineFormat object that contains line formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have line properties.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the ThreeDFormat object that 3d effect properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have 3d properties.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns the EffectFormat object which contains pixel effects applied to a shape.
    ///  Note: can return null for certain types of shapes which don't have effect properties.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have fill properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse click.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse over.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    ///<summary>
    ///  Returns the hyperlink manager.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkManager" />
    ///  .
    ///</summary>
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    ///<summary>
    ///  Determines whether the shape is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///  Shapes[0] returns the shape at the back of the z-order,
    ///  and Shapes[Shapes.Count - 1] returns the shape at the front of the z-order.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    ///<summary>
    ///  Returns the number of connection sites on the shape.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    ///<summary>
    ///  Returns or sets the number of degrees the specified shape is rotated around
    ///  the z-axis. A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Rotation: Single read get_Rotation write set_Rotation;
    ///<summary>
    ///  Returns or sets the x-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Property specifies how a shape will render in black-and-white display mode..
    ///  Read/write <see cref="T:Aspose.Slides.BlackWhiteMode" />
    ///  .
    ///</summary>
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    ///<summary>
    ///  Gets unique shape identifier in presentation scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.OfficeInteropShapeId" />
    ///  for getting unique shape identifier in slide scope.
    ///</summary>
    property UniqueId: UInt32 read get_UniqueId;
    ///<summary>
    ///  Gets unique shape identifier in slide scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.UniqueId" />
    ///  for getting unique shape identifier in presentation scope.
    ///</summary>
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    ///<summary>
    ///  Returns or sets the alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Returns or sets the title of alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    ///<summary>
    ///  Returns or sets the name of a shape.
    ///  Must be not null. Use empty string value if needed.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    ///<summary>
    ///  Determines whether the shape is grouped.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.ParentGroup" />
    ///  returns parent GroupShape object if shape is grouped.
    ///</remarks>
    property IsGrouped: Boolean read get_IsGrouped;
    ///<summary>
    ///  Returns parent GroupShape object if shape is grouped. Otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.IsGrouped" />
    ///  determines whether the shape is grouped.
    ///</remarks>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    ///<summary>
    ///  Returns the parent slide of a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNGeometryShape = class(TDNGenericImport<DNGeometryShapeClass, DNGeometryShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAutoShapeClass = interface(DNGeometryShapeClass)
  ['{91DC0F9E-3438-5306-93F4-3D90F259A11F}']
  end;

  ///<summary>
  ///  Represents an AutoShape.
  ///</summary>
  [DNTypeName('Aspose.Slides.AutoShape')]
  DNAutoShape = interface(DNGeometryShape)
  ['{FF17C3C9-28EA-3B13-A7B6-BFD0124BEDE1}']
  { getters & setters } 

    function get_ShapeLock: DNIAutoShapeLock;
    function get_AutoShapeLock: DNIAutoShapeLock;
    function get_TextFrame: DNITextFrame;
    function get_UseBackgroundFill: Boolean;
    procedure set_UseBackgroundFill(value: Boolean);
    function get_ShapeStyle: DNIShapeStyle;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Adds a new TextFrame to a shape.
    ///  If shape already has TextFrame then simply changes its text.
    ///</summary>
    ///  <param name="text">Default text for a new TextFrame.</param>
    function AddTextFrame(text: string): DNITextFrame;
    ///<summary>
    ///  Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///</returns>
    ///<example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  IGeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    ///<summary>
    ///  Updates shape geometry from <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  object. Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPath">Geometry path</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path found</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath0 = new GeometryPath();
    ///  geometryPath0.MoveTo(0, 0);
    ///  geometryPath0.LineTo(shape.Width, 0);
    ///  geometryPath0.LineTo(shape.Width, shape.Height/3);
    ///  geometryPath0.LineTo(0, shape.Height / 3);
    ///  geometryPath0.CloseFigure();
    ///  GeometryPath geometryPath1 = new GeometryPath();
    ///  geometryPath1.MoveTo(0, shape.Height/3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height / 3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height);
    ///  geometryPath1.LineTo(0, shape.Height);
    ///  geometryPath1.CloseFigure();
    ///  shape.SetGeometryPaths(new GeometryPath[] { geometryPath0, geometryPath1});
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    ///<summary>
    ///  Updates shape geometry from array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  . Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPaths">Array geometry paths</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    ///<summary>
    ///  Creates and returns array of shape's elements.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ShapeElement" />
    ///</returns>
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IAutoShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIAutoShapeLock read get_ShapeLock;
    ///<summary>
    ///  Returns autoshape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IAutoShapeLock" />
    ///  .
    ///</summary>
    property AutoShapeLock: DNIAutoShapeLock read get_AutoShapeLock;
    ///<summary>
    ///  Returns TextFrame object for the AutoShape.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Determines whether this autoshape should be filled with slide's background fill instead of specified by style or fill format.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UseBackgroundFill: Boolean read get_UseBackgroundFill write set_UseBackgroundFill;
    ///<summary>
    ///  Returns shape's style object.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeStyle" />
    ///  .
    ///</summary>
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    ///<summary>
    ///  Returns or sets the geometry preset type.
    ///  Note: on value changing all adjustment values will reset to their default values.
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns a collection of shape's adjustment values.
    ///  Read-only <see cref="T:Aspose.Slides.IAdjustValueCollection" />
    ///  .
    ///</summary>
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNAutoShape = class(TDNGenericImport<DNAutoShapeClass, DNAutoShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNConnectorClass = interface(DNGeometryShapeClass)
  ['{ACD0AA14-7FDE-56BB-BD9E-3F1A6C3BD029}']
  end;

  ///<summary>
  ///  Represents a connector.
  ///</summary>
  [DNTypeName('Aspose.Slides.Connector')]
  DNConnector = interface(DNGeometryShape)
  ['{2340AA64-B45C-33FC-B0C2-A20BAD4CE09E}']
  { getters & setters } 

    function get_ShapeLock: DNIConnectorLock;
    function get_ConnectorLock: DNIConnectorLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_StartShapeConnectedTo: DNIShape;
    procedure set_StartShapeConnectedTo(value: DNIShape);
    function get_EndShapeConnectedTo: DNIShape;
    procedure set_EndShapeConnectedTo(value: DNIShape);
    function get_StartShapeConnectionSiteIndex: UInt32;
    procedure set_StartShapeConnectionSiteIndex(value: UInt32);
    function get_EndShapeConnectionSiteIndex: UInt32;
    procedure set_EndShapeConnectionSiteIndex(value: UInt32);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Reroutes connector so that it take the shortest possible path between the shapes it connect.
    ///</summary>
    procedure Reroute;
    ///<summary>
    ///  Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///</returns>
    ///<example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  IGeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    ///<summary>
    ///  Updates shape geometry from <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  object. Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPath">Geometry path</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path found</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath0 = new GeometryPath();
    ///  geometryPath0.MoveTo(0, 0);
    ///  geometryPath0.LineTo(shape.Width, 0);
    ///  geometryPath0.LineTo(shape.Width, shape.Height/3);
    ///  geometryPath0.LineTo(0, shape.Height / 3);
    ///  geometryPath0.CloseFigure();
    ///  GeometryPath geometryPath1 = new GeometryPath();
    ///  geometryPath1.MoveTo(0, shape.Height/3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height / 3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height);
    ///  geometryPath1.LineTo(0, shape.Height);
    ///  geometryPath1.CloseFigure();
    ///  shape.SetGeometryPaths(new GeometryPath[] { geometryPath0, geometryPath1});
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    ///<summary>
    ///  Updates shape geometry from array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  . Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPaths">Array geometry paths</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    ///<summary>
    ///  Creates and returns array of shape's elements.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ShapeElement" />
    ///</returns>
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IConnectorLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIConnectorLock read get_ShapeLock;
    ///<summary>
    ///  Returns connector's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IConnectorLock" />
    ///  .
    ///</summary>
    property ConnectorLock: DNIConnectorLock read get_ConnectorLock;
    ///<summary>
    ///  Returns or sets the AutoShape type.
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns or sets the shape to attach the beginning of the connector to.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when connected shape doesn't has any connection sites (IShape.ConnectionSiteCount equals zero)</exception>
    property StartShapeConnectedTo: DNIShape read get_StartShapeConnectedTo write set_StartShapeConnectedTo;
    ///<summary>
    ///  Returns or sets the shape to attach the end of the connector to.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when connected shape doesn't has any connection sites (IShape.ConnectionSiteCount equals zero)</exception>
    property EndShapeConnectedTo: DNIShape read get_EndShapeConnectedTo write set_EndShapeConnectedTo;
    ///<summary>
    ///  Returns or sets the index of connection site for start shape.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when value is less than StartShapeConnectedTo.ConnectionSiteCount</exception>
    property StartShapeConnectionSiteIndex: UInt32 read get_StartShapeConnectionSiteIndex write set_StartShapeConnectionSiteIndex;
    ///<summary>
    ///  Returns or sets the index of connection site for end shape.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when value is less than EndShapeConnectedTo.ConnectionSiteCount</exception>
    property EndShapeConnectionSiteIndex: UInt32 read get_EndShapeConnectionSiteIndex write set_EndShapeConnectionSiteIndex;
    ///<summary>
    ///  Returns shape's style object.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeStyle" />
    ///  .
    ///</summary>
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    ///<summary>
    ///  Returns a collection of shape's adjustment values.
    ///  Read-only <see cref="T:Aspose.Slides.IAdjustValueCollection" />
    ///  .
    ///</summary>
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNConnector = class(TDNGenericImport<DNConnectorClass, DNConnector>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureFrameClass = interface(DNGeometryShapeClass)
  ['{332A0557-8C03-5225-A332-9CE7DC7405B2}']
  end;

  ///<summary>
  ///  Represents a frame with a picture inside.
  ///</summary>
  [DNTypeName('Aspose.Slides.PictureFrame')]
  DNPictureFrame = interface(DNGeometryShape)
  ['{B62F5D89-6A42-33AC-958C-CF5907049749}']
  { getters & setters } 

    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///</returns>
    ///<example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  IGeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    ///<summary>
    ///  Updates shape geometry from <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  object. Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPath">Geometry path</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path found</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath0 = new GeometryPath();
    ///  geometryPath0.MoveTo(0, 0);
    ///  geometryPath0.LineTo(shape.Width, 0);
    ///  geometryPath0.LineTo(shape.Width, shape.Height/3);
    ///  geometryPath0.LineTo(0, shape.Height / 3);
    ///  geometryPath0.CloseFigure();
    ///  GeometryPath geometryPath1 = new GeometryPath();
    ///  geometryPath1.MoveTo(0, shape.Height/3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height / 3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height);
    ///  geometryPath1.LineTo(0, shape.Height);
    ///  geometryPath1.CloseFigure();
    ///  shape.SetGeometryPaths(new GeometryPath[] { geometryPath0, geometryPath1});
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    ///<summary>
    ///  Updates shape geometry from array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  . Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPaths">Array geometry paths</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    ///<summary>
    ///  Creates and returns array of shape's elements.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ShapeElement" />
    ///</returns>
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    ///<summary><para>Returns or sets the AutoShape type for a PictureFrame.
    ///  There are allowable all items of the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  ,
    ///  except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para>
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns the PictureFillFormat object for a picture frame.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    ///<summary>
    ///  Returns or sets the scale of height(relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    ///<summary>
    ///  Returns or sets the scale of width (relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    ///<summary>
    ///  Returns shape's style object.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeStyle" />
    ///  .
    ///</summary>
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    ///<summary>
    ///  Returns a collection of shape's adjustment values.
    ///  Read-only <see cref="T:Aspose.Slides.IAdjustValueCollection" />
    ///  .
    ///</summary>
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNPictureFrame = class(TDNGenericImport<DNPictureFrameClass, DNPictureFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAudioFrameClass = interface(DNPictureFrameClass)
  ['{8746412F-0602-5883-997A-C00729AA2B33}']
  end;

  ///<summary>
  ///  Represents an audio clip on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.AudioFrame')]
  DNAudioFrame = interface(DNPictureFrame)
  ['{924439FE-6750-323D-8AC7-CEFAE64C4041}']
  { getters & setters } 

    function get_AudioCdStartTrack: Int32;
    procedure set_AudioCdStartTrack(value: Int32);
    function get_AudioCdStartTrackTime: Int32;
    procedure set_AudioCdStartTrackTime(value: Int32);
    function get_AudioCdEndTrack: Int32;
    procedure set_AudioCdEndTrack(value: Int32);
    function get_AudioCdEndTrackTime: Int32;
    procedure set_AudioCdEndTrackTime(value: Int32);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNAudioPlayModePreset;
    procedure set_PlayMode(value: DNAudioPlayModePreset);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_PlayAcrossSlides: Boolean;
    procedure set_PlayAcrossSlides(value: Boolean);
    function get_RewindAudio: Boolean;
    procedure set_RewindAudio(value: Boolean);
    function get_Embedded: Boolean;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedAudio: DNIAudio;
    procedure set_EmbeddedAudio(value: DNIAudio);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets a start track index.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdStartTrack: Int32 read get_AudioCdStartTrack write set_AudioCdStartTrack;
    ///<summary>
    ///  Returns or sets a start track time.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdStartTrackTime: Int32 read get_AudioCdStartTrackTime write set_AudioCdStartTrackTime;
    ///<summary>
    ///  Returns or sets a last track index
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdEndTrack: Int32 read get_AudioCdEndTrack write set_AudioCdEndTrack;
    ///<summary>
    ///  Returns or sets a last track time.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property AudioCdEndTrackTime: Int32 read get_AudioCdEndTrackTime write set_AudioCdEndTrackTime;
    ///<summary>
    ///  Returns or sets the audio volume.
    ///  Read/write <see cref="T:Aspose.Slides.AudioVolumeMode" />
    ///  .
    ///</summary>
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    ///<summary>
    ///  Returns or sets the audio play mode.
    ///  Read/write <see cref="T:Aspose.Slides.AudioPlayModePreset" />
    ///  .
    ///</summary>
    property PlayMode: DNAudioPlayModePreset read get_PlayMode write set_PlayMode;
    ///<summary>
    ///  Determines whether an AudioFrame is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    ///<summary>
    ///  Determines whether an audio is looped.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    ///<summary>
    ///  Determines whether audio is playing across the slides.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  // Add Audio Frame
    ///  IAudioFrame audioFrame = slide.Shapes.AddAudioFrameLinked(50, 50, 100, 100, "sampleaudio.wav");
    ///  // Set Audio to play across the slides
    ///  audioFrame.PlayAcrossSlides = true;
    ///  // Set Audio to automatically rewind to start after playing
    ///  audioFrame.RewindAudio = true;
    ///  pres.Save("AudioFrame_out.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    property PlayAcrossSlides: Boolean read get_PlayAcrossSlides write set_PlayAcrossSlides;
    ///<summary>
    ///  Determines whether audio is automatically rewinded to start after playing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  // Add Audio Frame
    ///  IAudioFrame audioFrame = slide.Shapes.AddAudioFrameLinked(50, 50, 100, 100, "sampleaudio.wav");
    ///  // Set Audio to play across the slides
    ///  audioFrame.PlayAcrossSlides = true;
    ///  // Set Audio to automatically rewind to start after playing
    ///  audioFrame.RewindAudio = true;
    ///  pres.Save("AudioFrame_out.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    property RewindAudio: Boolean read get_RewindAudio write set_RewindAudio;
    ///<summary>
    ///  Determines whether a sound is embedded to a presentation.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Embedded: Boolean read get_Embedded;
    ///<summary>
    ///  Returns or sets the name of an audio file which is linked to an AudioFrame.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns or sets embedded audio object.
    ///  Read/write <see cref="T:Aspose.Slides.IAudio" />
    ///  .
    ///</summary>
    property EmbeddedAudio: DNIAudio read get_EmbeddedAudio write set_EmbeddedAudio;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    ///<summary><para>Returns or sets the AutoShape type for a PictureFrame.
    ///  There are allowable all items of the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  ,
    ///  except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para>
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns the PictureFillFormat object for a picture frame.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    ///<summary>
    ///  Returns or sets the scale of height(relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    ///<summary>
    ///  Returns or sets the scale of width (relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNAudioFrame = class(TDNGenericImport<DNAudioFrameClass, DNAudioFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNVideoFrameClass = interface(DNPictureFrameClass)
  ['{54BBA5E4-7542-566B-AD24-A90A7300281A}']
  end;

  ///<summary>
  ///  Represents a video clip on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.VideoFrame')]
  DNVideoFrame = interface(DNPictureFrame)
  ['{7392E3A8-AA6B-33DC-8CDD-5E51BAB7D500}']
  { getters & setters } 

    function get_RewindVideo: Boolean;
    procedure set_RewindVideo(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNVideoPlayModePreset;
    procedure set_PlayMode(value: DNVideoPlayModePreset);
    function get_FullScreenMode: Boolean;
    procedure set_FullScreenMode(value: Boolean);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedVideo: DNIVideo;
    procedure set_EmbeddedVideo(value: DNIVideo);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether a video is automatically rewinded to start
    ///  as soon as the movie has finished playing.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RewindVideo: Boolean read get_RewindVideo write set_RewindVideo;
    ///<summary>
    ///  Determines whether a video is looped.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    ///<summary>
    ///  Determines whether a VideoFrame is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    ///<summary>
    ///  Returns or sets the audio volume.
    ///  Read/write <see cref="T:Aspose.Slides.AudioVolumeMode" />
    ///  .
    ///</summary>
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    ///<summary>
    ///  Returns or sets the video play mode.
    ///  Read/write <see cref="T:Aspose.Slides.VideoPlayModePreset" />
    ///  .
    ///</summary>
    property PlayMode: DNVideoPlayModePreset read get_PlayMode write set_PlayMode;
    ///<summary>
    ///  Determines whether a video is shown in full screen mode.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FullScreenMode: Boolean read get_FullScreenMode write set_FullScreenMode;
    ///<summary>
    ///  Returns or sets the name of an video file which is linked to a VideoFrame.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns or sets embedded video object.
    ///  Read/write <see cref="T:Aspose.Slides.IVideo" />
    ///  .
    ///</summary>
    property EmbeddedVideo: DNIVideo read get_EmbeddedVideo write set_EmbeddedVideo;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFrameLock" />
    ///  .
    ///</summary>
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    ///<summary><para>Returns or sets the AutoShape type for a PictureFrame.
    ///  There are allowable all items of the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  ,
    ///  except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para>
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns the PictureFillFormat object for a picture frame.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    ///<summary>
    ///  Returns or sets the scale of height(relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    ///<summary>
    ///  Returns or sets the scale of width (relative to original picture size) of the picture frame. Value 1.0 corresponds to 100%.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNVideoFrame = class(TDNGenericImport<DNVideoFrameClass, DNVideoFrame>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtShapeClass = interface(DNGeometryShapeClass)
  ['{5FABD0CC-870C-59A6-AC9A-B7C8BC06D0F1}']
  end;

  ///<summary>
  ///  Represents SmartArt shape
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtShape')]
  DNSmartArtShape = interface(DNGeometryShape)
  ['{1F06B1AD-D38F-3004-BD21-A6D7D175D591}']
  { getters & setters } 

    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_TextFrame: DNITextFrame;
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Returns the copy of path of the geometry shape. Coordinates are relative to the left top corner of the shape.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///</returns>
    ///<example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  IGeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    ///<summary>
    ///  Updates shape geometry from <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  object. Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPath">Geometry path</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path found</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath0 = new GeometryPath();
    ///  geometryPath0.MoveTo(0, 0);
    ///  geometryPath0.LineTo(shape.Width, 0);
    ///  geometryPath0.LineTo(shape.Width, shape.Height/3);
    ///  geometryPath0.LineTo(0, shape.Height / 3);
    ///  geometryPath0.CloseFigure();
    ///  GeometryPath geometryPath1 = new GeometryPath();
    ///  geometryPath1.MoveTo(0, shape.Height/3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height / 3 * 2);
    ///  geometryPath1.LineTo(shape.Width, shape.Height);
    ///  geometryPath1.LineTo(0, shape.Height);
    ///  geometryPath1.CloseFigure();
    ///  shape.SetGeometryPaths(new GeometryPath[] { geometryPath0, geometryPath1});
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    ///<summary>
    ///  Updates shape geometry from array of <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  . Coordinates must be relative to the left
    ///  top corner of the shape.
    ///  Changes the type of the shape (<see cref="P:Aspose.Slides.GeometryShape.ShapeType" />
    ///  ) to <see cref="F:Aspose.Slides.ShapeType.Custom" />
    ///  .
    ///</summary>
    ///  <param name="geometryPaths">Array geometry paths</param>
    ///<exception cref="T:System.ArgumentException">No path found</exception><exception cref="T:System.ArgumentException">Empty path</exception><example>
    ///  Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  GeometryShape shape = pres.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 100, 100, 200, 100) as GeometryShape;
    ///  GeometryPath geometryPath = shape.GetGeometryPaths()[0];
    ///  geometryPath.LineTo(100, 50, 1);
    ///  geometryPath.LineTo(100, 50, 4);
    ///  shape.SetGeometryPath(geometryPath);
    ///  pres.Save("output.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    ///<summary>
    ///  Creates and returns array of shape's elements.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ShapeElement" />
    ///</returns>
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the geometry preset type.
    ///  Note: on value changing all adjustment values will reset to their default values.
    ///  Read/write <see cref="T:Aspose.Slides.ShapeType" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Thrown when value is ShapeType.NotDefined or ShapeType.Custom</exception>
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Returns text of the SmartArt shape.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Returns shape's style object.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeStyle" />
    ///  .
    ///</summary>
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    ///<summary>
    ///  Returns a collection of shape's adjustment values.
    ///  Read-only <see cref="T:Aspose.Slides.IAdjustValueCollection" />
    ///  .
    ///</summary>
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNSmartArtShape = class(TDNGenericImport<DNSmartArtShapeClass, DNSmartArtShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGraphicalObjectClass = interface(DNShapeClass)
  ['{8BBA8D47-C80A-57B7-9CEE-EF1BC2038803}']
  end;

  ///<summary>
  ///  Represents abstract graphical object.
  ///</summary>
  [DNTypeName('Aspose.Slides.GraphicalObject')]
  DNGraphicalObject = interface(DNShape)
  ['{0D7EABE1-6D23-3385-95A9-681773C60006}']
  { getters & setters } 

    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Defines that this shape isn't a placeholder.
    ///</summary>
    procedure RemovePlaceholder;
    ///<summary>
    ///  Adds a new placeholder if there is no and sets placeholder properties to a specified one.
    ///</summary>
    ///  <param name="placeholderToCopyFrom">Placeholder to copy content from.</param>
    ///<returns>New <see cref="P:Aspose.Slides.Shape.Placeholder" />
    ///  .</returns>
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    ///<summary>
    ///  Returns shape thumbnail.
    ///  ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
    ///</summary>
    ///<returns>Shape thumbnail.</returns>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns shape thumbnail.
    ///</summary>
    ///  <param name="bounds">Shape thumbnail bounds type.</param>
    ///  <param name="scaleX">X scale</param>
    ///  <param name="scaleY">Y scale</param>
    ///<returns>Shape thumbnail or null in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.</returns>
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    ///<summary>
    ///  Determines whether the shape is TextHolder_PPT.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsTextHolder: Boolean read get_IsTextHolder;
    ///<summary>
    ///  Returns the placeholder for a shape. Returns null if the shape has no placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.IPlaceholder" />
    ///  .
    ///</summary>
    property Placeholder: DNIPlaceholder read get_Placeholder;
    ///<summary>
    ///  Returns the shape's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns or sets the raw shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<example>
    ///  Code that attempts to assign undefined frame to IShape.Frame doesn't make sence in general case (particulary in case when parent GroupShape is multiple nested into other GroupShape-s). For example:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = new ShapeFrame(float.NaN, float.NaN, float.NaN, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, float.NaN);
    ///</code>
    ///  or
    ///<code>
    ///  slide.Shapes.AddAutoShape(ShapeType.RoundCornerRectangle, float.NaN, float.NaN, float.NaN, float.NaN);
    ///</code>
    ///  Such code can lead to unclear situations. So restrictions had been added for using undefined values for IShape.Frame. Values of x, y, width, height, flipH, flipV and rotationAngle must be defined (not float.NaN or NullableBool.NotDefined). Example code above now throws ArgumentException exception.
    ///  This applies to these use cases:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = ...; // cannot be undefined
    ///  IShapeCollection shapes = ...;
    ///  // x, y, width, height parameters cannot be float.NaN:
    ///  {
    ///  shapes.AddAudioFrameCD(...);
    ///  shapes.AddAudioFrameEmbedded(...);
    ///  shapes.AddAudioFrameLinked(...);
    ///  shapes.AddAutoShape(...);
    ///  shapes.AddChart(...);
    ///  shapes.AddConnector(...);
    ///  shapes.AddOleObjectFrame(...);
    ///  shapes.AddPictureFrame(...);
    ///  shapes.AddSmartArt(...);
    ///  shapes.AddTable(...);
    ///  shapes.AddVideoFrame(...);
    ///  shapes.InsertAudioFrameEmbedded(...);
    ///  shapes.InsertAudioFrameLinked(...);
    ///  shapes.InsertAutoShape(...);
    ///  shapes.InsertChart(...);
    ///  shapes.InsertConnector(...);
    ///  shapes.InsertOleObjectFrame(...);
    ///  shapes.InsertPictureFrame(...);
    ///  shapes.InsertTable(...);
    ///  shapes.InsertVideoFrame(...);
    ///  }
    ///</code>
    ///  But IShape.RawFrame frame properties can be undefined. This make sence when shape is linked to placeholder. Then undefined shape frame values is overridden from the parent placeholder shape. If there is no parent placeholder shape for that shape then that shape uses default values when it evaluates effective frame based on its IShape.RawFrame. Default values are 0 and NullableBool.False for x, y, width, height, flipH, flipV and rotationAngle. For example:
    ///<code>
    ///  IShape shape = ...; // shape is linked to placeholder
    ///  shape.RawFrame = new ShapeFrame(float.NaN, float.NaN, 100, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, 0); // now shape inherits x, y, height, flipH, flipV values form placeholder and overrides width=100 and rotationAngle=0.
    ///</code></example>
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    ///<summary>
    ///  Returns or sets the shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value of each property of the returned IShapeFrame instance is not
    ///  undefined (is not NaN or NotDefined).
    ///  Value of each property of the assigned IShapeFrame instance must be not
    ///  undefined (must be not NaN or NotDefined).
    ///  You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns the LineFormat object that contains line formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have line properties.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns the ThreeDFormat object that 3d effect properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have 3d properties.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns the EffectFormat object which contains pixel effects applied to a shape.
    ///  Note: can return null for certain types of shapes which don't have effect properties.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have fill properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse click.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse over.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    ///<summary>
    ///  Returns the hyperlink manager.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkManager" />
    ///  .
    ///</summary>
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    ///<summary>
    ///  Determines whether the shape is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///  Shapes[0] returns the shape at the back of the z-order,
    ///  and Shapes[Shapes.Count - 1] returns the shape at the front of the z-order.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    ///<summary>
    ///  Returns the number of connection sites on the shape.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    ///<summary>
    ///  Returns or sets the number of degrees the specified shape is rotated around
    ///  the z-axis. A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Rotation: Single read get_Rotation write set_Rotation;
    ///<summary>
    ///  Returns or sets the x-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Property specifies how a shape will render in black-and-white display mode..
    ///  Read/write <see cref="T:Aspose.Slides.BlackWhiteMode" />
    ///  .
    ///</summary>
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    ///<summary>
    ///  Gets unique shape identifier in presentation scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.OfficeInteropShapeId" />
    ///  for getting unique shape identifier in slide scope.
    ///</summary>
    property UniqueId: UInt32 read get_UniqueId;
    ///<summary>
    ///  Gets unique shape identifier in slide scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.UniqueId" />
    ///  for getting unique shape identifier in presentation scope.
    ///</summary>
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    ///<summary>
    ///  Returns or sets the alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Returns or sets the title of alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    ///<summary>
    ///  Returns or sets the name of a shape.
    ///  Must be not null. Use empty string value if needed.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Determines whether the shape is grouped.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.ParentGroup" />
    ///  returns parent GroupShape object if shape is grouped.
    ///</remarks>
    property IsGrouped: Boolean read get_IsGrouped;
    ///<summary>
    ///  Returns parent GroupShape object if shape is grouped. Otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.IsGrouped" />
    ///  determines whether the shape is grouped.
    ///</remarks>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    ///<summary>
    ///  Returns the parent slide of a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNGraphicalObject = class(TDNGenericImport<DNGraphicalObjectClass, DNGraphicalObject>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartClass = interface(DNGraphicalObjectClass)
  ['{FB957DE7-CBF7-5A8C-9D60-14CF699A4EF0}']
  end;

  ///<summary>
  ///  Represents an graphic chart on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.Chart')]
  DNChart = interface(DNGraphicalObject)
  ['{A66620B3-20FE-3855-A6EB-D6B16731ABD6}']
  { getters & setters } 

    function get_PlotVisibleCellsOnly: Boolean;
    procedure set_PlotVisibleCellsOnly(value: Boolean);
    function get_DisplayBlanksAs: DNDisplayBlanksAsType;
    procedure set_DisplayBlanksAs(value: DNDisplayBlanksAsType);
    function get_ChartData: DNIChartData;
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_ChartTitle: DNIChartTitle;
    function get_HasDataTable: Boolean;
    procedure set_HasDataTable(value: Boolean);
    function get_HasLegend: Boolean;
    procedure set_HasLegend(value: Boolean);
    function get_Legend: DNILegend;
    function get_ChartDataTable: DNIDataTable;
    function get_Style: DNStyleType;
    procedure set_Style(value: DNStyleType);
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_PlotArea: DNIChartPlotArea;
    function get_Rotation3D: DNIRotation3D;
    function get_BackWall: DNIChartWall;
    function get_SideWall: DNIChartWall;
    function get_Floor: DNIChartWall;
    function get_TextFormat: DNIChartTextFormat;
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_UserShapes: DNIGroupShape;
    function get_Axes: DNIAxesManager;
    function get_ShowDataLabelsOverMaximum: Boolean;
    procedure set_ShowDataLabelsOverMaximum(value: Boolean);
    function get_HasRoundedCorners: Boolean;
    procedure set_HasRoundedCorners(value: Boolean);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;
    function get_AsIThemeable: DNIThemeable;
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Calculates actual values of chart elements. The actual values include position of elements that implement IActualLayout interface
    ///  (IActualLayout.ActualX, IActualLayout.ActualY, IActualLayout.ActualWidth, IActualLayout.ActualHeight)
    ///  and actual axes values (IAxis.ActualMaxValue, IAxis.ActualMinValue, IAxis.ActualMajorUnit, IAxis.ActualMinorUnit,
    ///  IAxis.ActualMajorUnitScale, IAxis.ActualMinorUnitScale)
    ///</summary>
    procedure ValidateChartLayout;
    ///<summary>
    ///  Returns an effective theme for this chart.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Determines whether the only visible cells are plotted. False to plot both visible and hidden cells.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property PlotVisibleCellsOnly: Boolean read get_PlotVisibleCellsOnly write set_PlotVisibleCellsOnly;
    ///<summary>
    ///  Returns or sets the way to plot blank cells on a chart.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DisplayBlanksAsType" />
    ///  .
    ///</summary>
    property DisplayBlanksAs: DNDisplayBlanksAsType read get_DisplayBlanksAs write set_DisplayBlanksAs;
    ///<summary>
    ///  Returns information about the linked or embedded data associated with a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartData" />
    ///  .
    ///</summary>
    property ChartData: DNIChartData read get_ChartData;
    ///<summary>
    ///  Determines whether a chart has a visible title.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    ///<summary>
    ///  Returns or sets a chart title.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTitle" />
    ///  .
    ///</summary>
    property ChartTitle: DNIChartTitle read get_ChartTitle;
    ///<summary>
    ///  Determines whether a chart has a data table.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasDataTable: Boolean read get_HasDataTable write set_HasDataTable;
    ///<summary>
    ///  Determines whether a chart has a legend.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasLegend: Boolean read get_HasLegend write set_HasLegend;
    ///<summary>
    ///  Returns or sets a legend for a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.ILegend" />
    ///  .
    ///</summary>
    property Legend: DNILegend read get_Legend;
    ///<summary>
    ///  Returns a data table of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataTable" />
    ///  .
    ///</summary>
    property ChartDataTable: DNIDataTable read get_ChartDataTable;
    ///<summary>
    ///  Returns or sets the chart style.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.StyleType" />
    ///  .
    ///</summary>
    property Style: DNStyleType read get_Style write set_Style;
    ///<summary>
    ///  Returns or sets the chart type.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.ChartType" />
    ///  .
    ///</summary>
    property &Type: DNChartType read get_Type write set_Type;
    ///<summary>
    ///  Represents the plot area of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartPlotArea" />
    ///  .
    ///</summary>
    property PlotArea: DNIChartPlotArea read get_PlotArea;
    ///<summary>
    ///  Returns a 3D rotation of a chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IRotation3D" />
    ///  .
    ///</summary>
    property Rotation3D: DNIRotation3D read get_Rotation3D;
    ///<summary>
    ///  Returns an object which allows to change format of the back wall of a 3D chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartWall" />
    ///  .
    ///</summary>
    property BackWall: DNIChartWall read get_BackWall;
    ///<summary>
    ///  Returns an object which allows to change format of the side wall of a 3D chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartWall" />
    ///  .
    ///</summary>
    property SideWall: DNIChartWall read get_SideWall;
    ///<summary>
    ///  Returns an object which allows to change format of the floor of a 3D chart.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartWall" />
    ///  .
    ///</summary>
    property Floor: DNIChartWall read get_Floor;
    ///<summary>
    ///  Returns chart text format.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartTextFormat" />
    ///  .
    ///</summary>
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    ///<summary>
    ///  Returns theme manager.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IOverrideThemeManager" />
    ///  .
    ///</summary>
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    ///<summary>
    ///  Specify the shapes drawn on top of the chart.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    property UserShapes: DNIGroupShape read get_UserShapes;
    ///<summary>
    ///  Provide access to chart axes.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IAxesManager" />
    ///  .
    ///</summary>
    property Axes: DNIAxesManager read get_Axes;
    ///<summary>
    ///  Specifies data labels over the maximum of the chart shall be shown.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ShowDataLabelsOverMaximum: Boolean read get_ShowDataLabelsOverMaximum write set_ShowDataLabelsOverMaximum;
    ///<summary>
    ///  Specifies the chart area shall have rounded corners.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasRoundedCorners: Boolean read get_HasRoundedCorners write set_HasRoundedCorners;
    ///<summary>
    ///  Allows to get base IFormattedTextContainer interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IFormattedTextContainer" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
    ///<summary>
    ///  Allows to get base IThemeable interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IThemeable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNChart = class(TDNGenericImport<DNChartClass, DNChart>) end;

  //-------------namespace: Aspose.Slides.Ink----------------
  DNInkClass = interface(DNGraphicalObjectClass)
  ['{4F56208D-0563-5F9F-B3C9-A60D4FC65F5F}']
  end;

  ///<summary>
  ///  Represents an ink object on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Ink.Ink')]
  DNInk = interface(DNGraphicalObject)
  ['{8BDAB38E-422D-3FCE-9139-4AC1246E73CC}']
  { getters & setters } 

    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNInk = class(TDNGenericImport<DNInkClass, DNInk>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLegacyDiagramClass = interface(DNGraphicalObjectClass)
  ['{949CDCEA-C4EF-5B5B-9962-3DCD5AE0B5F5}']
  end;

  ///<summary>
  ///  Represents a legacy diagram object.
  ///</summary>
  [DNTypeName('Aspose.Slides.LegacyDiagram')]
  DNLegacyDiagram = interface(DNGraphicalObject)
  ['{9E427932-9A61-3409-9562-0D3D278E205C}']
  { getters & setters } 

    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Converts legacy digram to editable SmartArt object.
    ///  Created SmartArt object adds to parent group shape at the same position.
    ///</summary>
    ///<returns>Created SmartArt object.</returns>
    function ConvertToSmartArt: DNISmartArt;
    ///<summary>
    ///  Converts legacy digram to editable group shape.
    ///  Created GroupShape object adds to parent group shape at the same position.
    ///</summary>
    ///<returns>Created GroupShape object.</returns>
    function ConvertToGroupShape: DNIGroupShape;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNLegacyDiagram = class(TDNGenericImport<DNLegacyDiagramClass, DNLegacyDiagram>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOleObjectFrameClass = interface(DNGraphicalObjectClass)
  ['{48021984-61D7-56B2-B75E-A2CAEDC5805C}']
  end;

  ///<summary>
  ///  Represents an OLE object on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.OleObjectFrame')]
  DNOleObjectFrame = interface(DNGraphicalObject)
  ['{F85BC4B1-35D2-35A6-8505-2EAA92C384A3}']
  { getters & setters } 

    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_SubstitutePictureTitle: string;
    procedure set_SubstitutePictureTitle(value: string);
    function get_ObjectName: string;
    procedure set_ObjectName(value: string);
    function get_ObjectProgId: string;
    procedure set_ObjectProgId(value: string);
    function get_ObjectData: TArray<Byte>;
    procedure set_ObjectData(value: TArray<Byte>);
    function get_LinkFileName: string;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedFileLabel: string;
    function get_EmbeddedFileName: string;
    function get_EmbeddedFileExtension: string;
    function get_EmbeddedFileData: TArray<Byte>;
    function get_EmbeddedData: DNIOleEmbeddedDataInfo;
    function get_IsObjectIcon: Boolean;
    procedure set_IsObjectIcon(value: Boolean);
    function get_IsObjectLink: Boolean;
    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_UpdateAutomatic: Boolean;
    procedure set_UpdateAutomatic(value: Boolean);
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Sets information about OLE embedded data.
    ///<remarks>
    ///  This method changes the properties of the object to reflect the new data and
    ///  sets the IsObjectLink flag to false, indicating that the OLE object is embedded.
    ///</remarks>
    ///</summary>
    ///  <param name="embeddedData">Embedded data <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">When embeddedData parameter is null.</exception><example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentation.pptx"))
    ///  {
    ///  OleObjectFrame oof = pres.Slides[0].Shapes[0] as OleObjectFrame;
    ///  if (oof != null)
    ///  {
    ///  IOleEmbeddedDataInfo newData = new OleEmbeddedDataInfo(File.ReadAllBytes("Picture.png"), "png");
    ///  oof.SetEmbeddedData(newData);
    ///  }
    ///  }
    ///</code></example>
    procedure SetEmbeddedData(embeddedData: DNIOleEmbeddedDataInfo);
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns OleObject image fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IPictureFillFormat" />
    ///  .
    ///</summary>
    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    ///<summary>
    ///  Returns or sets the title for OleObject icon.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  When IsObjectIcon == false this value is ignored.
    ///  The string can be truncated according to the size of the Ole icon.
    ///</remarks>
    property SubstitutePictureTitle: string read get_SubstitutePictureTitle write set_SubstitutePictureTitle;
    ///<summary>
    ///  Returns or sets the name of an object.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ObjectName: string read get_ObjectName write set_ObjectName;
    ///<summary>
    ///  Returns the ProgID of an object.
    ///  Read only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ObjectProgId: string read get_ObjectProgId write set_ObjectProgId;
    ///<summary>
    ///  Returns or sets embedded object as byte array.
    ///  Read/write <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property ObjectData: TArray<Byte> read get_ObjectData write set_ObjectData;
    ///<summary>
    ///  Returns the full path to a linked file. Short file name will be used.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkFileName: string read get_LinkFileName;
    ///<summary>
    ///  Returns the full path to a linked file. Long file name will be used.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    ///<summary>
    ///  Returns the file name of embedded OLE object
    ///</summary>
    property EmbeddedFileLabel: string read get_EmbeddedFileLabel;
    ///<summary>
    ///  Returns the path of embedded OLE object
    ///</summary>
    property EmbeddedFileName: string read get_EmbeddedFileName;
    ///<summary>
    ///  Returns the file extension for the current embedded object or empty string if object is not a link
    ///</summary>
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
    ///<summary>
    ///  Returns the file data of embedded OLE object
    ///</summary>
    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    ///<summary>
    ///  Gets or sets information about OLE embedded data.
    ///  Read/write <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///  .
    ///</summary>
    property EmbeddedData: DNIOleEmbeddedDataInfo read get_EmbeddedData;
    ///<summary>
    ///  Determines whether an object is visible as icon.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsObjectIcon: Boolean read get_IsObjectIcon write set_IsObjectIcon;
    ///<summary>
    ///  Determines whether an object is linked to external file.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsObjectLink: Boolean read get_IsObjectLink;
    ///<summary>
    ///  Allows to get base IGraphicalObject interface.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObject" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    ///<summary>
    ///  Determines if the linked embedded object is automatically updated when the presentation is opened or printed.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UpdateAutomatic: Boolean read get_UpdateAutomatic write set_UpdateAutomatic;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNOleObjectFrame = class(TDNGenericImport<DNOleObjectFrameClass, DNOleObjectFrame>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtClass = interface(DNGraphicalObjectClass)
  ['{5B8AEC6D-B77B-5BC4-929C-47F5E3ACB329}']
  end;

  ///<summary>
  ///  Represents a SmartArt diagram
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArt')]
  DNSmartArt = interface(DNGraphicalObject)
  ['{0526B026-AC60-3159-BA3A-1945B64C2BCB}']
  { getters & setters } 

    function get_AllNodes: DNISmartArtNodeCollection;
    function get_Nodes: DNISmartArtNodeCollection;
    function get_Layout: DNSmartArtLayoutType;
    procedure set_Layout(value: DNSmartArtLayoutType);
    function get_QuickStyle: DNSmartArtQuickStyleType;
    procedure set_QuickStyle(value: DNSmartArtQuickStyleType);
    function get_ColorStyle: DNSmartArtColorType;
    procedure set_ColorStyle(value: DNSmartArtColorType);
    function get_IsReversed: Boolean;
    procedure set_IsReversed(value: Boolean);
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns collections of all nodes in the SmartArt object.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtNodeCollection" />
    ///  .
    ///</summary>
    property AllNodes: DNISmartArtNodeCollection read get_AllNodes;
    ///<summary>
    ///  Returns collections of root nodes in SmartArt object.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtNodeCollection" />
    ///  .
    ///</summary>
    property Nodes: DNISmartArtNodeCollection read get_Nodes;
    ///<summary>
    ///  Returns or sets layout of the SmartArt object.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.SmartArtLayoutType" />
    ///  .
    ///</summary>
    property Layout: DNSmartArtLayoutType read get_Layout write set_Layout;
    ///<summary>
    ///  Returns or sets quick style of SmartArt object.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.SmartArtQuickStyleType" />
    ///  .
    ///</summary>
    property QuickStyle: DNSmartArtQuickStyleType read get_QuickStyle write set_QuickStyle;
    ///<summary>
    ///  Returns or sets color style of SmartArt object.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.SmartArtColorType" />
    ///  .
    ///</summary>
    property ColorStyle: DNSmartArtColorType read get_ColorStyle write set_ColorStyle;
    ///<summary>
    ///  Return or set the state of the SmartArt diagram with regard to (left-to-right) LTR or (right-to-left) RTL, if the diagram supports reversal.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsReversed: Boolean read get_IsReversed write set_IsReversed;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNSmartArt = class(TDNGenericImport<DNSmartArtClass, DNSmartArt>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTableClass = interface(DNGraphicalObjectClass)
  ['{55676675-A886-5294-A78E-26BB1A309E39}']
  end;

  ///<summary>
  ///  Represents a table on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Table')]
  DNTable = interface(DNGraphicalObject)
  ['{DEC8992D-C02F-3135-A133-D27E656CAB76}']
  { getters & setters } 

    function get_Rows: DNIRowCollection;
    function get_Columns: DNIColumnCollection;
    function get_TableFormat: DNITableFormat;
    function get_StylePreset: DNTableStylePreset;
    procedure set_StylePreset(value: DNTableStylePreset);
    function get_RightToLeft: Boolean;
    procedure set_RightToLeft(value: Boolean);
    function get_FirstRow: Boolean;
    procedure set_FirstRow(value: Boolean);
    function get_FirstCol: Boolean;
    procedure set_FirstCol(value: Boolean);
    function get_LastRow: Boolean;
    procedure set_LastRow(value: Boolean);
    function get_LastCol: Boolean;
    procedure set_LastCol(value: Boolean);
    function get_HorizontalBanding: Boolean;
    procedure set_HorizontalBanding(value: Boolean);
    function get_VerticalBanding: Boolean;
    procedure set_VerticalBanding(value: Boolean);
    function get_FillFormat: DNIFillFormat;
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Merges neighbour cells.
    ///</summary>
    ///  <param name="cell1">Cell to merge.</param>
    ///  <param name="cell2">Cell to merge.</param>
    ///  <param name="allowSplitting">True to allow cells splitting.</param>
    ///<returns>Merged cell.</returns>
    function MergeCells(cell1: DNICell; cell2: DNICell; allowSplitting: Boolean): DNICell;
    ///<summary>
    ///  Sets defined portion format properties to all table cells' portions.
    ///</summary>
    ///  <param name="source">IPortionFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIPortionFormat); overload;
    ///<summary>
    ///  Sets defined paragraph format properties to all table cells' paragraphs.
    ///</summary>
    ///  <param name="source">IParagraphFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    ///<summary>
    ///  Sets defined text frame format properties to all table cells' text frames.
    ///</summary>
    ///  <param name="source">ITextFrameFormat object with necessary properties set.</param>
    procedure SetTextFormat(source: DNITextFrameFormat); overload;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the collectoin of rows.
    ///  Read-only <see cref="T:Aspose.Slides.IRowCollection" />
    ///  .
    ///</summary>
    property Rows: DNIRowCollection read get_Rows;
    ///<summary>
    ///  Returns the collectoin of columns.
    ///  Read-only <see cref="T:Aspose.Slides.IColumnCollection" />
    ///  .
    ///</summary>
    property Columns: DNIColumnCollection read get_Columns;
    ///<summary>
    ///  Returns the TableFormat object that contains formatting properties for this table.
    ///  Read-only <see cref="T:Aspose.Slides.ITableFormat" />
    ///  .
    ///</summary>
    property TableFormat: DNITableFormat read get_TableFormat;
    ///<summary>
    ///  Gets or sets builtin table style.
    ///  Read/write <see cref="T:Aspose.Slides.TableStylePreset" />
    ///  .
    ///</summary>
    property StylePreset: DNTableStylePreset read get_StylePreset write set_StylePreset;
    ///<summary>
    ///  Determines whether the table has right to left reading order.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property RightToLeft: Boolean read get_RightToLeft write set_RightToLeft;
    ///<summary>
    ///  Determines whether the first row of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FirstRow: Boolean read get_FirstRow write set_FirstRow;
    ///<summary>
    ///  Determines whether the first column of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FirstCol: Boolean read get_FirstCol write set_FirstCol;
    ///<summary>
    ///  Determines whether the last row of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property LastRow: Boolean read get_LastRow write set_LastRow;
    ///<summary>
    ///  Determines whether the last column of a table has to be drawn with a special formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property LastCol: Boolean read get_LastCol write set_LastCol;
    ///<summary>
    ///  Determines whether the even rows has to be drawn with a different formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HorizontalBanding: Boolean read get_HorizontalBanding write set_HorizontalBanding;
    ///<summary>
    ///  Determines whether the even columns has to be drawn with a different formatting.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property VerticalBanding: Boolean read get_VerticalBanding write set_VerticalBanding;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have fill properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: Aspose.Slides----------------
  DNZoomFrameClass = interface(DNGraphicalObjectClass)
  ['{AB1967CD-473D-590A-AC6D-93C014EF08AB}']
  end;

  ///<summary>
  ///  Represents an Zoom object on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.ZoomFrame')]
  DNZoomFrame = interface(DNGraphicalObject)
  ['{1220829E-DB7B-307D-A026-0E5EA27F610B}']
  { getters & setters } 

    function get_ImageType: DNZoomImageType;
    procedure set_ImageType(value: DNZoomImageType);
    function get_ReturnToParent: Boolean;
    procedure set_ReturnToParent(value: Boolean);
    function get_TargetSlide: DNISlide;
    procedure set_TargetSlide(value: DNISlide);
    function get_ShowBackground: Boolean;
    procedure set_ShowBackground(value: Boolean);
    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_TransitionDuration: Single;
    procedure set_TransitionDuration(value: Single);
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the image type of a zoom object.
    ///  Read/write <see cref="T:Aspose.Slides.ZoomImageType" />
    ///  .
    ///  Default value: Preview
    ///</summary>
    ///<remarks>
    ///  Specifies whether the Zoom object is using the slide preview or a cover image.
    ///</remarks>
    ///<example>Next example demonstrates changing Image Type to Preview value.
    ///  In this case current image of a Zoom object changes to slide image:
    ///<code>
    ///  [C#]
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1], image);
    ///  zoomFrame.ImageType = ZoomImageType.Preview;
    ///</code></example>
    property ImageType: DNZoomImageType read get_ImageType write set_ImageType;
    ///<summary>
    ///  Gets or sets the navigation behavior in slideshow.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///  Default value: false
    ///</summary>
    ///<remarks>
    ///  True value of the property specifies return to parent navigation behavior in slideshow.
    ///</remarks>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.ReturnToParent = true;
    ///</code></example>
    property ReturnToParent: Boolean read get_ReturnToParent write set_ReturnToParent;
    ///<summary>
    ///  Gets or sets the slide object that the Slide Zoom object links to.
    ///  Read/write <see cref="T:Aspose.Slides.ISlide" />
    ///  .
    ///</summary>
    ///<example>Next example demonstrates changing target slide and creates new image for the zoom object:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.TargetSlide = pres.Slides[2];
    ///</code></example>
    property TargetSlide: DNISlide read get_TargetSlide write set_TargetSlide;
    ///<summary>
    ///  Gets or sets value that specifies whether the Zoom will use the background of the destination slide.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///  Default value: true
    ///</summary>
    ///<example>the example demonstrates removing the background of an image of a Zoom object:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.ShowBg = false;
    ///</code></example>
    property ShowBackground: Boolean read get_ShowBackground write set_ShowBackground;
    ///<summary>
    ///  Gets or sets image for zoom object.
    ///  Read/write <see cref="T:Aspose.Slides.IPPImage" />
    ///  .
    ///</summary>
    ///<example>the example demonstrates changing an image of a Zoom object:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  zoomFrame.Image = image;
    ///</code></example>
    property Image: DNIPPImage read get_Image write set_Image;
    ///<summary>
    ///  Gets or sets the duration of the transition between Zoom and slide.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///  Default value: 1.0f
    ///</summary>
    ///<remarks>
    ///  If not specified (TransitionDur = 0), it will use the destination slide transition and the timings associated with that transition.
    ///</remarks>
    ///<example>the example demonstrates changing the duration of the transition between Zoom and slide:
    ///<code>
    ///  [C#]
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  zoomFrame.TransitionDur = 2.5f;
    ///</code></example>
    property TransitionDuration: Single read get_TransitionDuration write set_TransitionDuration;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGraphicalObjectLock" />
    ///  .
    ///</summary>
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNZoomFrame = class(TDNGenericImport<DNZoomFrameClass, DNZoomFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGroupShapeClass = interface(DNShapeClass)
  ['{580A5088-B93B-5763-AB7C-E1A6F7CFD23C}']
  end;

  ///<summary>
  ///  Represents a group of shapes on a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.GroupShape')]
  DNGroupShape = interface(DNShape)
  ['{1A98F2AA-36DA-3BB0-A2D3-DAC85EE1FB3F}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_ShapeLock: DNIGroupShapeLock;
    function get_GroupShapeLock: DNIGroupShapeLock;
    function get_Shapes: DNIShapeCollection;
    function get_AsIShape: DNIShape;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Defines that this shape isn't a placeholder.
    ///</summary>
    procedure RemovePlaceholder;
    ///<summary>
    ///  Adds a new placeholder if there is no and sets placeholder properties to a specified one.
    ///</summary>
    ///  <param name="placeholderToCopyFrom">Placeholder to copy content from.</param>
    ///<returns>New <see cref="P:Aspose.Slides.Shape.Placeholder" />
    ///  .</returns>
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    ///<summary>
    ///  Returns shape thumbnail.
    ///  ShapeThumbnailBounds.Shape shape thumbnail bounds type is used by default.
    ///</summary>
    ///<returns>Shape thumbnail.</returns>
    function GetThumbnail: DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Returns shape thumbnail.
    ///</summary>
    ///  <param name="bounds">Shape thumbnail bounds type.</param>
    ///  <param name="scaleX">X scale</param>
    ///  <param name="scaleY">Y scale</param>
    ///<returns>Shape thumbnail or null in case when ShapeThumbnailBounds.Appearance is used and a shape doesn't have visible elements.</returns>
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.Aspose.Common.DNBitmap; overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves content of Shape as SVG file.
    ///</summary>
    ///  <param name="stream">Target stream</param>
    ///  <param name="svgOptions">SVG generation options</param>
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the LineFormat object that contains line formatting properties for a shape.
    ///  Note: Returns null for GroupShape objects because they don't have line properties.
    ///  Read-only <see cref="T:Aspose.Slides.ILineFormat" />
    ///  .
    ///</summary>
    property LineFormat: DNILineFormat read get_LineFormat;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShapeLock" />
    ///  .
    ///</summary>
    property ShapeLock: DNIGroupShapeLock read get_ShapeLock;
    ///<summary>
    ///  Returns shape's locks.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShapeLock" />
    ///  .
    ///</summary>
    property GroupShapeLock: DNIGroupShapeLock read get_GroupShapeLock;
    ///<summary>
    ///  Returns the collection of shapes inside the group.
    ///  Read-only <see cref="T:Aspose.Slides.IShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNIShapeCollection read get_Shapes;
    ///<summary>
    ///  Allows to get base IShape interface.
    ///  Read-only <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIShape: DNIShape read get_AsIShape;
    ///<summary>
    ///  Determines whether the shape is TextHolder_PPT.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsTextHolder: Boolean read get_IsTextHolder;
    ///<summary>
    ///  Returns the placeholder for a shape. Returns null if the shape has no placeholder.
    ///  Read-only <see cref="T:Aspose.Slides.IPlaceholder" />
    ///  .
    ///</summary>
    property Placeholder: DNIPlaceholder read get_Placeholder;
    ///<summary>
    ///  Returns the shape's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Returns or sets the raw shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<example>
    ///  Code that attempts to assign undefined frame to IShape.Frame doesn't make sence in general case (particulary in case when parent GroupShape is multiple nested into other GroupShape-s). For example:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = new ShapeFrame(float.NaN, float.NaN, float.NaN, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, float.NaN);
    ///</code>
    ///  or
    ///<code>
    ///  slide.Shapes.AddAutoShape(ShapeType.RoundCornerRectangle, float.NaN, float.NaN, float.NaN, float.NaN);
    ///</code>
    ///  Such code can lead to unclear situations. So restrictions had been added for using undefined values for IShape.Frame. Values of x, y, width, height, flipH, flipV and rotationAngle must be defined (not float.NaN or NullableBool.NotDefined). Example code above now throws ArgumentException exception.
    ///  This applies to these use cases:
    ///<code>
    ///  IShape shape = ...;
    ///  shape.Frame = ...; // cannot be undefined
    ///  IShapeCollection shapes = ...;
    ///  // x, y, width, height parameters cannot be float.NaN:
    ///  {
    ///  shapes.AddAudioFrameCD(...);
    ///  shapes.AddAudioFrameEmbedded(...);
    ///  shapes.AddAudioFrameLinked(...);
    ///  shapes.AddAutoShape(...);
    ///  shapes.AddChart(...);
    ///  shapes.AddConnector(...);
    ///  shapes.AddOleObjectFrame(...);
    ///  shapes.AddPictureFrame(...);
    ///  shapes.AddSmartArt(...);
    ///  shapes.AddTable(...);
    ///  shapes.AddVideoFrame(...);
    ///  shapes.InsertAudioFrameEmbedded(...);
    ///  shapes.InsertAudioFrameLinked(...);
    ///  shapes.InsertAutoShape(...);
    ///  shapes.InsertChart(...);
    ///  shapes.InsertConnector(...);
    ///  shapes.InsertOleObjectFrame(...);
    ///  shapes.InsertPictureFrame(...);
    ///  shapes.InsertTable(...);
    ///  shapes.InsertVideoFrame(...);
    ///  }
    ///</code>
    ///  But IShape.RawFrame frame properties can be undefined. This make sence when shape is linked to placeholder. Then undefined shape frame values is overridden from the parent placeholder shape. If there is no parent placeholder shape for that shape then that shape uses default values when it evaluates effective frame based on its IShape.RawFrame. Default values are 0 and NullableBool.False for x, y, width, height, flipH, flipV and rotationAngle. For example:
    ///<code>
    ///  IShape shape = ...; // shape is linked to placeholder
    ///  shape.RawFrame = new ShapeFrame(float.NaN, float.NaN, 100, float.NaN, NullableBool.NotDefined, NullableBool.NotDefined, 0); // now shape inherits x, y, height, flipH, flipV values form placeholder and overrides width=100 and rotationAngle=0.
    ///</code></example>
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    ///<summary>
    ///  Returns or sets the shape frame's properties.
    ///  Read/write <see cref="T:Aspose.Slides.IShapeFrame" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value of each property of the returned IShapeFrame instance is not
    ///  undefined (is not NaN or NotDefined).
    ///  Value of each property of the assigned IShapeFrame instance must be not
    ///  undefined (must be not NaN or NotDefined).
    ///  You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    ///<summary>
    ///  Returns the ThreeDFormat object that 3d effect properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have 3d properties.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns the EffectFormat object which contains pixel effects applied to a shape.
    ///  Note: can return null for certain types of shapes which don't have effect properties.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a shape.
    ///  Note: can return null for certain types of shapes which don't have fill properties.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse click.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    ///<summary>
    ///  Returns or sets the hyperlink defined for mouse over.
    ///  Read/write <see cref="T:Aspose.Slides.IHyperlink" />
    ///  .
    ///</summary>
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    ///<summary>
    ///  Returns the hyperlink manager.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkManager" />
    ///  .
    ///</summary>
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    ///<summary>
    ///  Determines whether the shape is hidden.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///  Shapes[0] returns the shape at the back of the z-order,
    ///  and Shapes[Shapes.Count - 1] returns the shape at the front of the z-order.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    ///<summary>
    ///  Returns the number of connection sites on the shape.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    ///<summary>
    ///  Returns or sets the number of degrees the specified shape is rotated around
    ///  the z-axis. A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Rotation: Single read get_Rotation write set_Rotation;
    ///<summary>
    ///  Returns or sets the x-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property X: Single read get_X write set_X;
    ///<summary>
    ///  Returns or sets the y-coordinate of the upper-left corner of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Y: Single read get_Y write set_Y;
    ///<summary>
    ///  Returns or sets the width of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the height of the shape.
    ///  Read/write <see cref="T:System.Single" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Returned value is always defined (is not float.NaN).
    ///  Assigned value must be defined (not float.NaN). You can set undefined values for RawFrame instance properties.
    ///</remarks>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Property specifies how a shape will render in black-and-white display mode..
    ///  Read/write <see cref="T:Aspose.Slides.BlackWhiteMode" />
    ///  .
    ///</summary>
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    ///<summary>
    ///  Gets unique shape identifier in presentation scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.OfficeInteropShapeId" />
    ///  for getting unique shape identifier in slide scope.
    ///</summary>
    property UniqueId: UInt32 read get_UniqueId;
    ///<summary>
    ///  Gets unique shape identifier in slide scope.
    ///  Read-only <see cref="T:System.UInt32" />
    ///  .
    ///  See also <see cref="P:Aspose.Slides.Shape.UniqueId" />
    ///  for getting unique shape identifier in presentation scope.
    ///</summary>
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    ///<summary>
    ///  Returns or sets the alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Returns or sets the title of alternative text associated with a shape.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    ///<summary>
    ///  Returns or sets the name of a shape.
    ///  Must be not null. Use empty string value if needed.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Determines whether the shape is grouped.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.ParentGroup" />
    ///  returns parent GroupShape object if shape is grouped.
    ///</remarks>
    property IsGrouped: Boolean read get_IsGrouped;
    ///<summary>
    ///  Returns parent GroupShape object if shape is grouped. Otherwise returns null.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Property <see cref="P:Aspose.Slides.Shape.IsGrouped" />
    ///  determines whether the shape is grouped.
    ///</remarks>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    ///<summary>
    ///  Returns the parent slide of a shape.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a slide.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNGroupShape = class(TDNGenericImport<DNGroupShapeClass, DNGroupShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BBB992F3-3B1C-5476-9574-AB89B628E6F0}']
  end;

  ///<summary>
  ///  Represents a collection of a shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeCollection')]
  DNShapeCollection = interface(DDN.mscorlib.DNObject)
  ['{4D45F021-08C3-3E1E-BE69-9ACF9BD36317}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ParentGroup: DNIGroupShape;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified shape to the end of the collection.
    ///</summary>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///  <param name="width">Width of a new shape.</param>
    ///  <param name="height">Height of a new shape.</param>
    ///<returns>New shape.</returns>
    function AddClone(sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    ///<summary>
    ///  Adds a copy of a specified shape to the end of the collection.
    ///  Width and Height of the new shape are equal to Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///<returns>New shape.</returns>
    function AddClone(sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    ///<summary>
    ///  Adds a copy of a specified shape to the end of the collection.
    ///  X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///<returns>New shape.</returns>
    function AddClone(sourceShape: DNIShape): DNIShape; overload;
    ///<summary>
    ///  Inserts a copy of a specified shape to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new shape.</param>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///  <param name="width">Width of a new shape.</param>
    ///  <param name="height">Height of a new shape.</param>
    ///<returns>Inserted shape.</returns>
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    ///<summary>
    ///  Inserts a copy of a specified shape to specified position of the collection.
    ///  Width and Height of the new shape are equal to Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="index">Index of new shape.</param>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///<returns>Inserted shape.</returns>
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    ///<summary>
    ///  Inserts a copy of a specified shape to specified position of the collection.
    ///  X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="index">Index of new shape.</param>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///<returns>Inserted shape.</returns>
    function InsertClone(index: Int32; sourceShape: DNIShape): DNIShape; overload;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Creates a new Chart, initialize it with sample series data and settings and adds
    ///  it to the end of the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///<returns>Created chart.</returns>
    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single): DNIChart; overload;
    ///<summary>
    ///  Creates a new Chart and adds it to the end of the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///  <param name="initWithSample">
    ///  If true then new chart will be initialized with sample series data and settings.
    ///  If false then new chart will have no series and minimum settings. In this case
    ///  chart creation will be more fast.
    ///</param>
    ///<returns>Created chart.</returns>
    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; initWithSample: Boolean): DNIChart; overload;
    ///<summary>
    ///  Add SmartArt diagram.
    ///</summary>
    ///  <param name="x">The X-coordinate for a left side of diagram's frame.</param>
    ///  <param name="y">The Y-coordinate for a left side of diagram's frame.</param>
    ///  <param name="width">The width of diagram's frame.</param>
    ///  <param name="height">The height of diagram's frame.</param>
    ///  <param name="layoutType">The type of SmartArt diagram</param>
    ///<returns>Create SmartArt diagram</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  Presentation pres = new Presentation();
    ///  Slide slide = pres.Slides[0];
    ///  SmartArt smart = slide.Shapes.AddSmartArt(0, 0, 400, 400, SmartArtLayoutType.BasicBlockList);
    ///</code><code>
    ///  [Visual Basic]
    ///  Private pres As New Presentation()
    ///  Private slide As Slide = pres.Slides(0)
    ///  Private smart As SmartArt = slide.Shapes.AddSmartArt(0, 0, 400, 400, SmartArtLayoutType.BasicBlockList)
    ///</code></example>
    function AddSmartArt(x: Single; y: Single; width: Single; height: Single; layoutType: DNSmartArtLayoutType): DNISmartArt;
    ///<summary>
    ///  Creates a new Chart, initialize it with sample series data and settings and inserts
    ///  it to the specified position in the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///  <param name="index">Chart's position in the collection.</param>
    ///<returns>Created chart.</returns>
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32): DNIChart; overload;
    ///<summary>
    ///  Creates a new Chart and inserts it to the specified position in the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///  <param name="index">Chart's position in the collection.</param>
    ///  <param name="initWithSample">
    ///  If true then new chart will be initialized with sample series data and settings.
    ///  If false then new chart will have no series and minimum settings. In this case
    ///  chart creation will be more fast.
    ///</param>
    ///<returns>Created chart.</returns>
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32; initWithSample: Boolean): DNIChart; overload;
    ///<summary>
    ///  Adds a new Zoom object to the end of a collection.
    ///</summary>
    ///<example>
    ///  This example demonstrates adding a Zoom object to the end of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  }
    ///</code></example><param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    ///<summary>
    ///  Adds a new Zoom object to the end of a collection.
    ///</summary>
    ///<example>
    ///  This example demonstrates adding a Zoom object to the end of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1], image);
    ///  }
    ///</code></example><param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///  <param name="image">The image for the referenced slide <see cref="T:Aspose.Slides.IPPImage" />
    ///</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    ///<summary>
    ///  Creates a new Zoom object and inserts it to a collection at the specified index.
    ///</summary>
    ///<example>
    ///  This example demonstrates creation and inserting a Zoom object at the specified index of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.InsertZoomFrame(2, 150, 20, 50, 50, pres.Slides[1]);
    ///  }
    ///</code></example><param name="index">The zero-based index at which Zoom frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    ///<summary>
    ///  Creates a new Zoom object and inserts it to a collection at the specified index.
    ///</summary>
    ///<example>
    ///  This example demonstrates creation and inserting a Zoom object at the specified index of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.InsertZoomFrame(2, 150, 20, 50, 50, pres.Slides[1], image);
    ///  }
    ///</code></example><param name="index">The zero-based index at which Zoom frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///  <param name="image">The image for the referenced slide <see cref="T:Aspose.Slides.IPPImage" />
    ///</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    ///<summary>
    ///  Adds a new OLE object to the end of a collection.
    ///</summary>
    ///<example>
    ///  This example demonstrates adding an OLE object to the end of a collection:
    ///<code>
    ///  [C#]
    ///  byte[] fileData = File.ReadAllBytes("test.zip");
    ///  IEmbeddedDataInfo dataInfo = new EmbeddedDataInfo(fileData, "zip");
    ///  IOleObjectFrame oleObjectFrame = slidees.Shapes.AddOleObjectFrame(150, 20, 50, 50, dataInfo);
    ///</code></example><param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="dataInfo">Embedded data info <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///  .</param>
    ///<returns>Created OLE object.</returns>
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Adds a new OLE object to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="className">Name of an OLE class.</param>
    ///  <param name="path">Path to the linked file.<para>The path is stored in the presentation as is. If a relative path is specified
    ///  the corresponding file will be inaccessible when opening the presentation from a different directory.</para></param>
    ///<returns>Created OLE object.</returns>
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Creates a new OLE object and inserts it to a collection at the specified index.
    ///</summary>
    ///<example>
    ///  This example demonstrates inserting an OLE object at the second index:
    ///<code>
    ///  [C#]
    ///  byte[] fileData = File.ReadAllBytes("test.zip");
    ///  IOleDataInfo dataInfo = new OleDataInfo(fileData, "zip");
    ///  IOleObjectFrame oleObjectFrame = slidees.Shapes.AddOleObjectFrame(2, 150, 20, 50, 50, dataInfo);
    ///</code></example><param name="index">The zero-based index at which OLE object should be inserted.</param>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="dataInfo">Embedded data info <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///  .</param>
    ///<returns>Created OLE object.</returns>
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Creates a new OLE object and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which OLE object should be inserted.</param>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="className">Name of an OLE class.</param>
    ///  <param name="path">Path to the linked file.</param>
    ///<returns>Created OLE object.</returns>
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Adds a new video frame to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new video frame.</param>
    ///  <param name="y">Y coordinate of a new video frame.</param>
    ///  <param name="width">Width of a new video frame.</param>
    ///  <param name="height">Height of a new video frame.</param>
    ///  <param name="fname">Video file name.</param>
    ///<returns>Created VideoFrame object.</returns>
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame; overload;
    ///<summary>
    ///  Adds a new video frame to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new video frame.</param>
    ///  <param name="y">Y coordinate of a new video frame.</param>
    ///  <param name="width">Width of a new video frame.</param>
    ///  <param name="height">Height of a new video frame.</param>
    ///  <param name="video">Video to add.</param>
    ///<returns>Created VideoFrame object.</returns>
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; video: DNIVideo): DNIVideoFrame; overload;
    ///<summary>
    ///  Creates a new video frame and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which video frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new video frame.</param>
    ///  <param name="y">Y coordinate of a new video frame.</param>
    ///  <param name="width">Width of a new video frame.</param>
    ///  <param name="height">Height of a new video frame.</param>
    ///  <param name="fname">Video file name.</param>
    ///<returns>Created VideoFrame object.</returns>
    function InsertVideoFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame;
    ///<summary>
    ///  Adds an AudioFrame with CD to the end of collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameCD(x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    ///<summary>
    ///  Insert an AudioFrame with CD.
    ///</summary>
    ///  <param name="index">The zero-based index at which video frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameCD(index: Int32; x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    ///<summary>
    ///  Adds a new audio frame with linked audio file to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="fname">Audio file name.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameLinked(x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    ///<summary>
    ///  Creates a new audio frame with linked audio file and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which audio frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="fname">Audio file name.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameLinked(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    ///<summary>
    ///  Adds a new audio frame with embedded audio file to the end of a collection.
    ///  Embedded audio file can be a WAV only.
    ///  It adds new audio into Presentation.Audios list.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio_stream">Inout stream with audio data.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    ///<summary>
    ///  Insert an AudioFrame with embedded audio file.
    ///  Embedded audio file sound can be a WAV only.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio_stream">Audio stream.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    ///<summary>
    ///  Adds a new audio frame with embedded audio file to the end of a collection.
    ///  It uses audio file from Presentation.Audios list.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio">Audio from Presentation.Audios list.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    ///<summary>
    ///  Insert an AudioFrame with embedded audio file.
    ///  It uses audio file from Presentation.Audios list.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio">Audio from Presentation.Audios list.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    ///<summary>
    ///  Returns the zero-based index of the first occurrence of a shape in the collection.
    ///</summary>
    ///  <param name="shape">The shape to locate in the collection.</param>
    ///<returns>The zero-based index of the first occurrence of shape within
    ///  the collection, if found; otherwise, -1.</returns>
    function IndexOf(shape: DNIShape): Int32;
    ///<summary>
    ///  Creates and returns an array with all shapse in it.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.Shape" />
    ///</returns>
    function ToArray: TArray<DNIShape>; overload;
    ///<summary>
    ///  Creates and returns an array with all shapes from the specified range in it.
    ///  <param name="startIndex">An index of a first shape to return.</param>
    ///  <param name="count">A number of shapes to return.</param>
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.Shape" />
    ///</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIShape>; overload;
    ///<summary>
    ///  Moves a shape from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="shape">Shape to move.</param>
    procedure Reorder(index: Int32; shape: DNIShape); overload;
    ///<summary>
    ///  Moves shapes from the collection to the specified position.
    ///  Shapes will be placed starting from index in order they appear in list.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="shapes">Shapes to move.</param>
    procedure Reorder(index: Int32; shapes: TArray<DNIShape>); overload;
    ///<summary>
    ///  Creates a new AutoShape, tunes it from default template and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created AutoShape object.</returns>
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new AutoShape and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>Created AutoShape object.</returns>
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new Autoshape tuned from default template to math content and adds it to the end of the collection.
    ///</summary>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created AutoShape object.</returns>
    function AddMathShape(x: Single; y: Single; width: Single; height: Single): DNIAutoShape;
    ///<summary>
    ///  Creates a new AutoShape, tunes it from default template and inserts it to
    ///  the collection at the specified index.
    ///  Note: the type of the shape will be determined by the shapeType parameter.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created AutoShape object.</returns>
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new AutoShape and inserts it to the collection at the specified index.
    ///  Note: the type of the shape will be determined by the shapeType parameter.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>Created AutoShape object.</returns>
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new GroupShape and adds it to the end of the collection.
    ///  GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
    ///</summary>
    ///<returns>Created GroupShape object.</returns>
    function AddGroupShape: DNIGroupShape; overload;
    ///<summary>
    ///  Creates a new GroupShape, fills it with converted shapes from SVG and adds it to the end of the collection.
    ///</summary>
    ///  <param name="svgImage">Svg image object <see cref="T:Aspose.Slides.ISvgImage" />
    ///</param>
    ///  <param name="x">The X coordinate for the left side of the shape group frame.</param>
    ///  <param name="y">The Y coordinate for the top side of the shape group frame.</param>
    ///  <param name="width">The width of the group of the shape group frame.</param>
    ///  <param name="height">The height of a group of the shape group frame.</param>
    ///<returns>Created GroupShape object.</returns>
    function AddGroupShape(svgImage: DNISvgImage; x: Single; y: Single; width: Single; height: Single): DNIGroupShape; overload;
    ///<summary>
    ///  Creates a new GroupShape and inserts it to the collection at the specified index.
    ///  GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///<returns>Created GroupShape object.</returns>
    function InsertGroupShape(index: Int32): DNIGroupShape;
    ///<summary>
    ///  Creates a new Connector, tunes it from default template and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>The zero-based index of the created shape.</returns>
    ///<returns>Created Connector object.</returns>
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    ///<summary>
    ///  Creates a new Connector and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>The zero-based index of the created shape.</returns>
    ///<returns>Created Connector object.</returns>
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    ///<summary>
    ///  Creates a new Connector, tunes it from default template and inserts it to
    ///  the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created Connector object.</returns>
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    ///<summary>
    ///  Creates a new Connector and inserts it to the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>Created Connector object.</returns>
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    ///<summary>
    ///  Creates a new PictureFrame and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType"><para>The shape contained in the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shapes, except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para></param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="image">The image of picture frame.</param>
    ///<returns>Created PictureFrame object.</returns>
    function AddPictureFrame(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    ///<summary>
    ///  Creates a new PictureFrame and inserts it to the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType"><para>The shape contained in the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shapes, except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para></param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="image">The image of picture frame.</param>
    ///<returns>Created PictureFrame object.</returns>
    function InsertPictureFrame(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    ///<summary>
    ///  Creates a new Table and adds it to the end of the collection.
    ///</summary>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="columnWidths">Array of doubles which represents widths of columns in the table.</param>
    ///  <param name="rowHeights">Array of doubles which represents heights of rows in the table.</param>
    ///<returns>Created Table object.</returns>
    function AddTable(x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    ///<summary>
    ///  Creates a new Table and inserts it to the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="columnWidths">Array of doubles which represents widths of columns in the table.</param>
    ///  <param name="rowHeights">Array of doubles which represents heights of rows in the table.</param>
    ///<returns>Created Table object.</returns>
    function InsertTable(index: Int32; x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIShape>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns parent GroupShape object for a shapes collection.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNShapeCollection = class(TDNGenericImport<DNShapeCollectionClass, DNShapeCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B5A2F513-904D-58A2-B539-F66419DD0CC4}']
  end;

  ///<summary>
  ///  Represents a part of shape with same outline and fill properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeElement')]
  DNShapeElement = interface(DDN.mscorlib.DNObject)
  ['{1FD43CE3-1145-33AD-805C-AB68403205B3}']
  { getters & setters } 

    function get_ParentShape: DNShape;
    function get_GraphicsPath: DDN.Aspose.Common.DNGraphicsPath;
    function get_FillSource: DNShapeElementFillSource;
    function get_StrokeSource: DNShapeElementStrokeSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a Shape_PPT for which element was created.
    ///  Read-only <see cref="T:Aspose.Slides.Shape" />
    ///  .
    ///</summary>
    property ParentShape: DNShape read get_ParentShape;
    ///<summary>
    ///  Returns an element's path.
    ///  Read-only <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .
    ///</summary>
    property GraphicsPath: DDN.Aspose.Common.DNGraphicsPath read get_GraphicsPath;
    ///<summary>
    ///  Returns information about how to fill an element.
    ///  Read-only <see cref="T:Aspose.Slides.ShapeElementFillSource" />
    ///  .
    ///</summary>
    property FillSource: DNShapeElementFillSource read get_FillSource;
    ///<summary>
    ///  Returns information about how to stroke an element.
    ///  Read-only <see cref="T:Aspose.Slides.ShapeElementStrokeSource" />
    ///  .
    ///</summary>
    property StrokeSource: DNShapeElementStrokeSource read get_StrokeSource;
  end;

  TDNShapeElement = class(TDNGenericImport<DNShapeElementClass, DNShapeElement>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{52EB7E74-82FC-5C54-8BD7-6AD3C1B02F5B}']
  { constructors } 

    ///<summary>
    ///  Creates new shape frame's properties.
    ///</summary>
    ///  <param name="x">X coordinate of a frame.</param>
    ///  <param name="y">Y coordinate of a frame.</param>
    ///  <param name="width">Width of a frame.</param>
    ///  <param name="height">Height of a frame.</param>
    ///  <param name="flipH">True if a frame flipped horizontally.</param>
    ///  <param name="flipV">True if a frame flipped vertivally.</param>
    ///  <param name="rotationAngle">Number of degrees a frame is rotated.</param>
    {class} function init(x: Single; y: Single; width: Single; height: Single; flipH: DNNullableBool; flipV: DNNullableBool; rotationAngle: Single): DNShapeFrame;

  end;

  ///<summary>
  ///  Represents shape frame's properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeFrame')]
  DNShapeFrame = interface(DDN.mscorlib.DNObject)
  ['{99ED6B73-87FA-4A5D-B614-2D6EDDD40022}']
  { getters & setters } 

    function get_X: Single;
    function get_Y: Single;
    function get_Width: Single;
    function get_Height: Single;
    function get_Rotation: Single;
    function get_CenterX: Single;
    function get_CenterY: Single;
    function get_FlipH: DNNullableBool;
    function get_FlipV: DNNullableBool;
    function get_Rectangle: DDN.Aspose.Common.DNRectangleF;

  { methods } 

    ///<summary>
    ///  Clones
    ///</summary>
    ///<returns>Cloned shape frame.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Clones.
    ///</summary>
    ///<returns>Cloned shape frame.</returns>
    function CloneT: DNIShapeFrame;
    ///<summary>
    ///  Returns a value indicating whether this instance is equal to a specified object.
    ///</summary>
    ///  <param name="obj">The object to compare with this instance.</param>
    ///<returns><b>True</b>
    ///  if obj is a ShapeFrame that has the same value as this instance; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Returns a value indicating whether this instance is equal to a specified object.
    ///</summary>
    ///  <param name="value">The ShapeFRameEx to compare with this instance.</param>
    ///<returns><b>True</b>
    ///  if value is a ShapeFrame that has the same value as this instance; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(value: DNShapeFrame): Boolean; overload;
    ///<summary>
    ///  Returns a hash code for this object.
    ///</summary>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the X coordinate of the upper-left corner of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X;
    ///<summary>
    ///  Returns the Y coordinate of the upper-left corner of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y;
    ///<summary>
    ///  Returns the width of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width;
    ///<summary>
    ///  Returns the height of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height;
    ///<summary>
    ///  Returns the number of degrees a frame is rotated around the z-axis.
    ///  A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Rotation: Single read get_Rotation;
    ///<summary>
    ///  Returns the X coordinate of a frame's center.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CenterX: Single read get_CenterX;
    ///<summary>
    ///  Returns the Y coordinate of a frame's center.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CenterY: Single read get_CenterY;
    ///<summary>
    ///  Determines whether a frame is flipped horizontally.
    ///  Read-only <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FlipH: DNNullableBool read get_FlipH;
    ///<summary>
    ///  Determines whether a frame is flipped vertically.
    ///  Read-only <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FlipV: DNNullableBool read get_FlipV;
    ///<summary>
    ///  Returns the coordinates of a frame.
    ///  Read-only <see cref="T:System.Drawing.RectangleF" />
    ///  .
    ///</summary>
    property Rectangle: DDN.Aspose.Common.DNRectangleF read get_Rectangle;
  end;

  TDNShapeFrame = class(TDNGenericImport<DNShapeFrameClass, DNShapeFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CB2012B9-0C17-5E58-A959-33345F9F6259}']
  end;

  ///<summary>
  ///  Represent shape's style reference.
  ///</summary>
  [DNTypeName('Aspose.Slides.ShapeStyle')]
  DNShapeStyle = interface(DDN.mscorlib.DNObject)
  ['{22DF9862-B214-3983-892E-97BF2D477024}']
  { getters & setters } 

    function get_LineColor: DNIColorFormat;
    function get_LineStyleIndex: UInt16;
    procedure set_LineStyleIndex(value: UInt16);
    function get_FillColor: DNIColorFormat;
    function get_FillStyleIndex: Int16;
    procedure set_FillStyleIndex(value: Int16);
    function get_EffectColor: DNIColorFormat;
    function get_EffectStyleIndex: UInt32;
    procedure set_EffectStyleIndex(value: UInt32);
    function get_FontColor: DNIColorFormat;
    function get_FontCollectionIndex: DNFontCollectionIndex;
    procedure set_FontCollectionIndex(value: DNFontCollectionIndex);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a shape's outline color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property LineColor: DNIColorFormat read get_LineColor;
    ///<summary>
    ///  Returns or sets line's column index in a style matrix.
    ///  Read/write <see cref="T:System.UInt16" />
    ///  .
    ///</summary>
    property LineStyleIndex: UInt16 read get_LineStyleIndex write set_LineStyleIndex;
    ///<summary>
    ///  Returns a shape's fill color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FillColor: DNIColorFormat read get_FillColor;
    ///<summary>
    ///  Returns or sets shape's fill column index in style matrices.
    ///  0 means no fill,
    ///  positive value - index in theme's fill styles,
    ///  negative value - index in theme's background styles.
    ///  Read/write <see cref="T:System.Int16" />
    ///  .
    ///</summary>
    property FillStyleIndex: Int16 read get_FillStyleIndex write set_FillStyleIndex;
    ///<summary>
    ///  Returns a shape's effect color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property EffectColor: DNIColorFormat read get_EffectColor;
    ///<summary>
    ///  Returns or sets shape's effect column index in a style matrix.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property EffectStyleIndex: UInt32 read get_EffectStyleIndex write set_EffectStyleIndex;
    ///<summary>
    ///  Returns a shape's font color.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FontColor: DNIColorFormat read get_FontColor;
    ///<summary>
    ///  Returns or sets shape's font index in a font collection.
    ///  Read/write <see cref="T:Aspose.Slides.FontCollectionIndex" />
    ///  .
    ///</summary>
    property FontCollectionIndex: DNFontCollectionIndex read get_FontCollectionIndex write set_FontCollectionIndex;
  end;

  TDNShapeStyle = class(TDNGenericImport<DNShapeStyleClass, DNShapeStyle>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D99BADEC-825D-5B5A-85E4-3ED5B14902E7}']
  end;

  ///<summary>
  ///  Represents a collection of a slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideCollection')]
  DNSlideCollection = interface(DDN.mscorlib.DNObject)
  ['{AF0304DE-7C73-33D9-A5C1-94BBAABF9169}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified slide to the end of the collection.
    ///</summary>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///<returns>New slide.</returns>
    ///<remarks>
    ///  When cloning a slide between different presentations slide's master can be cloned too.
    ///  Internal registry is used to track automatically cloned masters to prevent creation of
    ///  multiple clones of the same master slide.
    ///  Manual cloning of master slides will be neither prevented nor registered.
    ///  If you need more control over cloning process use
    ///<see cref="M:Aspose.Slides.SlideCollection.AddClone(Aspose.Slides.ISlide,Aspose.Slides.ILayoutSlide)" />
    ///  or
    ///<see cref="M:Aspose.Slides.SlideCollection.AddClone(Aspose.Slides.ISlide,Aspose.Slides.IMasterSlide,System.Boolean)" />
    ///  for cloning slides,
    ///<see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide)" />
    ///  or
    ///<see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide,Aspose.Slides.IMasterSlide)" />
    ///  for cloning layouts and
    ///<see cref="M:Aspose.Slides.IMasterSlideCollection.AddClone(Aspose.Slides.IMasterSlide)" />
    ///  for cloning masters.
    ///</remarks>
    function AddClone(sourceSlide: DNISlide): DNISlide; overload;
    ///<summary>
    ///  Adds a copy of a specified slide to the end of the specified section.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (IPresentation presentation = new Presentation())
    ///  {
    ///  presentation.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 200, 50, 300, 100);
    ///  presentation.Sections.AddSection("Section 1", presentation.Slides[0]);
    ///  ISection section2 = presentation.Sections.AppendEmptySection("Section 2");
    ///  presentation.Slides.AddClone(presentation.Slides[0], section2);
    ///  // Now the second section contains a copy of the first slide.
    ///  }
    ///</code></example><param name="sourceSlide">Slide to clone.</param>
    ///  <param name="section">Section for a new slide.</param>
    ///<returns>New slide.</returns>
    ///<exception cref="T:System.ArgumentNullException" />
    ///<exception cref="T:Aspose.Slides.PptxEditException" />
    function AddClone(sourceSlide: DNISlide; section: DNISection): DNISlide; overload;
    ///<summary>
    ///  Inserts a copy of a specified slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///<remarks>
    ///  When cloning a slide between different presentations slide's master can be cloned too.
    ///  Internal registry is used to track automatically cloned masters to prevent creation of multiple clones of the same master slide.
    ///  Manual cloning of master slides will be neither prevented nor registered.
    ///  If you need more control over cloning process use
    ///<see cref="M:Aspose.Slides.SlideCollection.InsertClone(System.Int32,Aspose.Slides.ISlide,Aspose.Slides.ILayoutSlide)" />
    ///  or
    ///<see cref="M:Aspose.Slides.SlideCollection.InsertClone(System.Int32,Aspose.Slides.ISlide,Aspose.Slides.IMasterSlide,System.Boolean)" />
    ///  for cloning slides and
    ///<see cref="M:Aspose.Slides.IMasterSlideCollection.AddClone(Aspose.Slides.IMasterSlide)" />
    ///  for cloning masters.
    ///</remarks>
    ///<returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceSlide: DNISlide): DNISlide; overload;
    ///<summary>
    ///  Adds a new empty slide to the end of the collection.
    ///</summary>
    ///  <param name="layout">Layout for a slide.</param>
    ///<returns>Added slide.</returns>
    function AddEmptySlide(layout: DNILayoutSlide): DNISlide;
    ///<summary>
    ///  Inserts a copy of a specified slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of a new slide.</param>
    ///  <param name="layout">Layout for a slide.</param>
    ///<returns>Inserted slide.</returns>
    function InsertEmptySlide(index: Int32; layout: DNILayoutSlide): DNISlide;
    ///<summary>
    ///  Adds a copy of a specified slide to the end of the collection.
    ///</summary>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destLayout">Layout slide for a new slide.</param>
    ///<returns>New slide.</returns>
    function AddClone(sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    ///<summary>
    ///  Inserts a copy of a specified slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destLayout">Layout slide for a new slide.</param>
    ///<returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    ///<summary>
    ///  Adds a copy of a specified source slide to the end of the collection.
    ///  Appropriate layout will be selected automatically from the specified
    ///  master (appropriate layout is the layout with the same Type or Name as
    ///  of layout of the source slide). If there is no appropriate layout then
    ///  layout of the source slide will be cloned (if allowCloneMissingLayout
    ///  is true) or PptxEditException will be thrown (if allowCloneMissingLayout
    ///  is false).
    ///</summary>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destMaster">Master slide for a new slide.</param>
    ///  <param name="allowCloneMissingLayout">
    ///  If there is no appropriate layout in specified master then layout of the
    ///  source slide will be cloned (if allowCloneMissingLayout is true) or
    ///  PptxEditException will be thrown (if allowCloneMissingLayout is false).
    ///</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if there is no appropriate layout in specified master and
    ///  allowCloneMissingLayout is false.
    ///</exception><returns>New slide.</returns>
    function AddClone(sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    ///<summary>
    ///  Inserts a copy of a specified source slide to specified position of the collection.
    ///  Appropriate layout will be selected automatically from the specified
    ///  master (appropriate layout is the layout with the same Type or Name as
    ///  of layout of the source slide). If there is no appropriate layout then
    ///  layout of the source slide will be cloned (if allowCloneMissingLayout
    ///  is true) or PptxEditException will be thrown (if allowCloneMissingLayout
    ///  is false).
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destMaster">Master slide for a new slide.</param>
    ///  <param name="allowCloneMissingLayout">
    ///  If there is no appropriate layout in specified master then layout of the
    ///  source slide will be cloned (if allowCloneMissingLayout is true) or
    ///  PptxEditException will be thrown (if allowCloneMissingLayout is false).
    ///</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if there is no appropriate layout in specified master and
    ///  allowCloneMissingLayout is false.
    ///</exception><returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException" />
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISlide>;
    ///<summary>
    ///  Creates and returns an array with all slides in it.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.Slide" />
    ///</returns>
    function ToArray: TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates and returns an array with all slides from the specified range in it.
    ///  <param name="startIndex">An index of a first slide to add.</param>
    ///  <param name="count">A number of slides to add.</param>
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.Slide" />
    ///</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<DNISlide>; overload;
    ///<summary>
    ///  Moves slide from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="slide">Slide to move.</param>
    procedure Reorder(index: Int32; slide: DNISlide); overload;
    ///<summary>
    ///  Moves slides from the collection to the specified position.
    ///  Slides will be placed starting from index in order they appear in list.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="slides">Slides to move.</param>
    procedure Reorder(index: Int32; slides: TArray<DNISlide>); overload;
    ///<summary>
    ///  Returns an index of the specified slide in the collection.
    ///</summary>
    ///  <param name="slide">Slide to find.</param>
    ///<returns>Index of a slide or -1 if slide not from this collection.</returns>
    function IndexOf(slide: DNISlide): Int32;
    ///<summary>
    ///  Creates slides from the PDF document and adds them to the end of the collection.
    ///</summary>
    ///  <param name="path">A path to the PDF document</param>
    ///<returns>Added slides</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  pres.Slides.AddFromPdf("document.pdf");
    ///  pres.Save("fromPdfDocument.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function AddFromPdf(path: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from the PDF document and adds them to the end of the collection.
    ///</summary>
    ///  <param name="pdfStream">A stream which will be used as a source of the PDF document</param>
    ///<returns>Added slides</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  using (Stream stream = new FileStream("document.pdf", FileMode.Open, FileAccess.Read, FileShare.Read))
    ///  {
    ///  pres.Slides.AddFromPdf(stream);
    ///  }
    ///  pres.Save("fromPdfDocument.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function AddFromPdf(pdfStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlText">Html to add.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function AddFromHtml(htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlText">Html to add.</param>
    ///<returns>Added slides</returns>
    function AddFromHtml(htmlText: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlText">Html to add.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function InsertFromHtml(index: Int32; htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlText">Html to add.</param>
    ///<returns>Added slides</returns>
    function InsertFromHtml(index: Int32; htmlText: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSlideCollection = class(TDNGenericImport<DNSlideCollectionClass, DNSlideCollection>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Represents base class for slide transition effects.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.ITransitionValueBase')]
  DNITransitionValueBase = interface(DDN.mscorlib.DNObject)
  ['{88D7CA12-E9EA-4686-A6F5-CA1649816310}']
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Corner direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.ICornerDirectionTransition')]
  DNICornerDirectionTransition = interface(DNITransitionValueBase)
  ['{AD1E0310-66FE-41EC-B49B-3849FA89EFDC}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerDirectionType;
    procedure set_Direction(value: DNTransitionCornerDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionCornerDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionCornerDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Eight direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IEightDirectionTransition')]
  DNIEightDirectionTransition = interface(DNITransitionValueBase)
  ['{DB442EDE-5CF4-4B94-BB3C-CA34C3A08E3D}']
  { getters & setters } 

    function get_Direction: DNTransitionEightDirectionType;
    procedure set_Direction(value: DNTransitionEightDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionEightDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionEightDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Empty slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IEmptyTransition')]
  DNIEmptyTransition = interface(DNITransitionValueBase)
  ['{36B1B209-870D-4B9D-B343-DF3B8F9F67B2}']
  { getters & setters } 

    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Fly-through slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IFlyThroughTransition')]
  DNIFlyThroughTransition = interface(DNITransitionValueBase)
  ['{C6CB5D47-70FF-42EE-82DB-20958E6E9F9D}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_HasBounce: Boolean;
    procedure set_HasBounce(value: Boolean);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies that the movement of the presentation slides during the transition includes a bounce.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBounce: Boolean read get_HasBounce write set_HasBounce;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Glitter slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IGlitterTransition')]
  DNIGlitterTransition = interface(DNITransitionValueBase)
  ['{08747224-B633-4179-8168-566950FF6663}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);
    function get_Pattern: DNTransitionPattern;
    procedure set_Pattern(value: DNTransitionPattern);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionSideDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies the shape of the visuals used during the transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionPattern" />
    ///  .
    ///</summary>
    property Pattern: DNTransitionPattern read get_Pattern write set_Pattern;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  In-Out slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IInOutTransition')]
  DNIInOutTransition = interface(DNITransitionValueBase)
  ['{3917EAC4-B3F8-4A85-9D7D-F99356555946}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of a transition effect.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Left-right direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.ILeftRightDirectionTransition')]
  DNILeftRightDirectionTransition = interface(DNITransitionValueBase)
  ['{A25AD20C-C615-49A3-80FE-3B38C2E38D23}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionLeftRightDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Ripple slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IMorphTransition')]
  DNIMorphTransition = interface(DNITransitionValueBase)
  ['{5CACDFFB-0A98-452C-A8BC-7AF49B6B654F}']
  { getters & setters } 

    function get_MorphType: DNTransitionMorphType;
    procedure set_MorphType(value: DNTransitionMorphType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Type of morph transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionMorphType" />
    ///  .
    ///</summary>
    property MorphType: DNTransitionMorphType read get_MorphType write set_MorphType;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Optional black slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IOptionalBlackTransition')]
  DNIOptionalBlackTransition = interface(DNITransitionValueBase)
  ['{ABE804DF-5FD5-48D8-B6FF-1012509864A7}']
  { getters & setters } 

    function get_FromBlack: Boolean;
    procedure set_FromBlack(value: Boolean);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  This attribute specifies if the transition will start from a black screen
    ///  (and then transition the new slide over black).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FromBlack: Boolean read get_FromBlack write set_FromBlack;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Orientation slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IOrientationTransition')]
  DNIOrientationTransition = interface(DNITransitionValueBase)
  ['{3C6577B9-4D4F-4292-AE2D-34E5C46E33E7}']
  { getters & setters } 

    function get_Direction: DNOrientation;
    procedure set_Direction(value: DNOrientation);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.Orientation" />
    ///  .
    ///</summary>
    property Direction: DNOrientation read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Reveal slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IRevealTransition')]
  DNIRevealTransition = interface(DNITransitionValueBase)
  ['{0FC1D3E3-3F7A-4223-AE80-AE12959AAFA2}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);
    function get_ThroughBlack: Boolean;
    procedure set_ThroughBlack(value: Boolean);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionLeftRightDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies whether the transition fades through black.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ThroughBlack: Boolean read get_ThroughBlack write set_ThroughBlack;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Ripple slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IRippleTransition')]
  DNIRippleTransition = interface(DNITransitionValueBase)
  ['{C6A7102E-074E-4197-9678-007669F363D4}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerAndCenterDirectionType;
    procedure set_Direction(value: DNTransitionCornerAndCenterDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionCornerAndCenterDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionCornerAndCenterDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Shred slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IShredTransition')]
  DNIShredTransition = interface(DNITransitionValueBase)
  ['{BB61FF5D-F3A1-4D5E-9BA7-A252610F0EE3}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Pattern: DNTransitionShredPattern;
    procedure set_Pattern(value: DNTransitionShredPattern);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies the shape of the visuals used during the transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionShredPattern" />
    ///  .
    ///</summary>
    property Pattern: DNTransitionShredPattern read get_Pattern write set_Pattern;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Side direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.ISideDirectionTransition')]
  DNISideDirectionTransition = interface(DNITransitionValueBase)
  ['{E78A9629-10F1-4E0E-B189-CFFB5E06F689}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionSideDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Split slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.ISplitTransition')]
  DNISplitTransition = interface(DNITransitionValueBase)
  ['{8EA9326E-5952-4813-8E87-8E3D26689410}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Direction of transition split.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Orientation of transition split.
    ///  Read/write <see cref="T:Aspose.Slides.Orientation" />
    ///  .
    ///</summary>
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  ///<summary>
  ///  Wheel slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.IWheelTransition')]
  DNIWheelTransition = interface(DNITransitionValueBase)
  ['{0A5993EC-C7D6-42E8-8209-E30C758F1CD5}']
  { getters & setters } 

    function get_Spokes: UInt32;
    procedure set_Spokes(value: UInt32);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    ///<summary>
    ///  Number spokes of wheel transition.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property Spokes: UInt32 read get_Spokes write set_Spokes;
    ///<summary>
    ///  Allows to get base ITransitionValueBase interface.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNSlideShowTransitionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B36652EF-EA38-5574-863E-FCC4FF92A256}']
  end;

  ///<summary>
  ///  Represents slide show transition.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.SlideShowTransition')]
  DNSlideShowTransition = interface(DDN.mscorlib.DNObject)
  ['{CDE3B641-18A5-3810-BE02-919293CDA255}']
  { getters & setters } 

    function get_Sound: DNIAudio;
    procedure set_Sound(value: DNIAudio);
    function get_SoundMode: DNTransitionSoundMode;
    procedure set_SoundMode(value: DNTransitionSoundMode);
    function get_SoundLoop: Boolean;
    procedure set_SoundLoop(value: Boolean);
    function get_AdvanceOnClick: Boolean;
    procedure set_AdvanceOnClick(value: Boolean);
    function get_AdvanceAfterTime: UInt32;
    procedure set_AdvanceAfterTime(value: UInt32);
    function get_Speed: DNTransitionSpeed;
    procedure set_Speed(value: DNTransitionSpeed);
    function get_Value: DNITransitionValueBase;
    function get_Type: DNTransitionType;
    procedure set_Type(value: DNTransitionType);
    function get_SoundIsBuiltIn: Boolean;
    procedure set_SoundIsBuiltIn(value: Boolean);
    function get_SoundName: string;
    procedure set_SoundName(value: string);

  { methods } 

    ///<summary>
    ///  Determines whether the two SlideShowTransition instances are equal.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///  <param name="obj">The SlideShowTransition to compare with the current SlideShowTransition.</param>
    ///<returns><b>true</b>
    ///  if the specified SlideShowTransition is equal to the current SlideShowTransition; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the embedded audio data.
    ///  Read/write <see cref="T:Aspose.Slides.IAudio" />
    ///  .
    ///</summary>
    property Sound: DNIAudio read get_Sound write set_Sound;
    ///<summary>
    ///  Set or returns sound mode for slide transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionSoundMode" />
    ///  .
    ///</summary>
    property SoundMode: DNTransitionSoundMode read get_SoundMode write set_SoundMode;
    ///<summary>
    ///  This attribute specifies if the sound will loop until the next sound event occurs in
    ///  slideshow.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SoundLoop: Boolean read get_SoundLoop write set_SoundLoop;
    ///<summary>
    ///  Specifies whether a mouse click will advance the slide or not. If this attribute is not
    ///  specified then a value of true is assumed.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property AdvanceOnClick: Boolean read get_AdvanceOnClick write set_AdvanceOnClick;
    ///<summary>
    ///  Specifies the time, in milliseconds, after which the transition should start. This setting
    ///  may be used in conjunction with the advClick attribute. If this attribute is not specified
    ///  then it is assumed that no auto-advance will occur.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property AdvanceAfterTime: UInt32 read get_AdvanceAfterTime write set_AdvanceAfterTime;
    ///<summary>
    ///  Specifies the transition speed that is to be used when transitioning from the current slide
    ///  to the next.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionSpeed" />
    ///  .
    ///</summary>
    property Speed: DNTransitionSpeed read get_Speed write set_Speed;
    ///<summary>
    ///  Slide show transition value.
    ///  Read-only <see cref="T:Aspose.Slides.SlideShow.ITransitionValueBase" />
    ///  .
    ///</summary>
    property Value: DNITransitionValueBase read get_Value;
    ///<summary>
    ///  Type of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionType" />
    ///  .
    ///</summary>
    property &Type: DNTransitionType read get_Type write set_Type;
    ///<summary>
    ///  Specifies whether or not this sound is a built-in sound. If this attribute is set to true then
    ///  the generating application is alerted to check the name attribute specified for this sound
    ///  in it's list of built-in sounds and can then surface a custom name or UI as needed.
    ///  Read-write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property SoundIsBuiltIn: Boolean read get_SoundIsBuiltIn write set_SoundIsBuiltIn;
    ///<summary>
    ///  Specifies a human readable name for the sound of the transition. The <see cref="P:Aspose.Slides.SlideShow.SlideShowTransition.Sound" />
    ///  property must be assigned to get or set the sound name.
    ///  Read-write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<remarks>This name appears in the PowerPoint user interface when configuring the transition sound manually.</remarks>
    ///<exception cref="T:Aspose.Slides.PptxException">When <see cref="P:Aspose.Slides.SlideShow.SlideShowTransition.Sound" />
    ///  property is not assigned.</exception>
    property SoundName: string read get_SoundName write set_SoundName;
  end;

  TDNSlideShowTransition = class(TDNGenericImport<DNSlideShowTransitionClass, DNSlideShowTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNTransitionValueBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B7E00138-C904-5165-A291-BBE6DB3A8E9F}']
  end;

  ///<summary>
  ///  Base class for slide transition effects.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.TransitionValueBase')]
  DNTransitionValueBase = interface(DDN.mscorlib.DNObject)
  ['{0B091180-B04E-347D-9A43-B3FDAAF44789}']
  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransitionValueBase = class(TDNGenericImport<DNTransitionValueBaseClass, DNTransitionValueBase>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNCornerDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{D370DEF6-75DF-58E8-AD09-964B070B596A}']
  end;

  ///<summary>
  ///  Corner direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.CornerDirectionTransition')]
  DNCornerDirectionTransition = interface(DNTransitionValueBase)
  ['{0D08F6D5-AE47-3D95-A185-FF659B8BD245}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerDirectionType;
    procedure set_Direction(value: DNTransitionCornerDirectionType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionCornerDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionCornerDirectionType read get_Direction write set_Direction;
  end;

  TDNCornerDirectionTransition = class(TDNGenericImport<DNCornerDirectionTransitionClass, DNCornerDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNEightDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{66527FF8-45BF-575E-AFD4-297EBEA4F823}']
  end;

  ///<summary>
  ///  Eight direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.EightDirectionTransition')]
  DNEightDirectionTransition = interface(DNTransitionValueBase)
  ['{BBCBFC2E-4F24-358E-81FD-FE558C3BA809}']
  { getters & setters } 

    function get_Direction: DNTransitionEightDirectionType;
    procedure set_Direction(value: DNTransitionEightDirectionType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionEightDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionEightDirectionType read get_Direction write set_Direction;
  end;

  TDNEightDirectionTransition = class(TDNGenericImport<DNEightDirectionTransitionClass, DNEightDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNEmptyTransitionClass = interface(DNTransitionValueBaseClass)
  ['{42107784-A2B0-5150-A8FC-EAE3A1354C2F}']
  end;

  ///<summary>
  ///  Empty slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.EmptyTransition')]
  DNEmptyTransition = interface(DNTransitionValueBase)
  ['{C2C4AF66-3C77-37E5-854D-50A157F6A550}']
  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmptyTransition = class(TDNGenericImport<DNEmptyTransitionClass, DNEmptyTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNFlyThroughTransitionClass = interface(DNTransitionValueBaseClass)
  ['{7851BF46-D209-50F1-917C-7851663641C8}']
  end;

  ///<summary>
  ///  Fly-through slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.FlyThroughTransition')]
  DNFlyThroughTransition = interface(DNTransitionValueBase)
  ['{270D7B72-FCB5-3D6A-8696-3F8AB10C202F}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_HasBounce: Boolean;
    procedure set_HasBounce(value: Boolean);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies that the movement of the presentation slides during the transition includes a bounce.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property HasBounce: Boolean read get_HasBounce write set_HasBounce;
  end;

  TDNFlyThroughTransition = class(TDNGenericImport<DNFlyThroughTransitionClass, DNFlyThroughTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNGlitterTransitionClass = interface(DNTransitionValueBaseClass)
  ['{871509F4-2019-5AB5-95D6-512484F394EC}']
  end;

  ///<summary>
  ///  Glitter slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.GlitterTransition')]
  DNGlitterTransition = interface(DNTransitionValueBase)
  ['{2689AEEA-CADE-3506-BCDC-87EE5549E964}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);
    function get_Pattern: DNTransitionPattern;
    procedure set_Pattern(value: DNTransitionPattern);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionSideDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies the shape of the visuals used during the transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionPattern" />
    ///  .
    ///</summary>
    property Pattern: DNTransitionPattern read get_Pattern write set_Pattern;
  end;

  TDNGlitterTransition = class(TDNGenericImport<DNGlitterTransitionClass, DNGlitterTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNInOutTransitionClass = interface(DNTransitionValueBaseClass)
  ['{6A06948D-70D2-5081-A40F-EA03D9AC6917}']
  end;

  ///<summary>
  ///  In-Out slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.InOutTransition')]
  DNInOutTransition = interface(DNTransitionValueBase)
  ['{5A70219F-5280-3256-89FC-585EAFC01FA0}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of a transition effect.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
  end;

  TDNInOutTransition = class(TDNGenericImport<DNInOutTransitionClass, DNInOutTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNLeftRightDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{50BE5825-872C-55E5-86C0-2059B78C0E50}']
  end;

  ///<summary>
  ///  Left-right direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.LeftRightDirectionTransition')]
  DNLeftRightDirectionTransition = interface(DNTransitionValueBase)
  ['{BC68B90C-77F2-3EFB-85D8-0EC7F9773D04}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionLeftRightDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
  end;

  TDNLeftRightDirectionTransition = class(TDNGenericImport<DNLeftRightDirectionTransitionClass, DNLeftRightDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNMorphTransitionClass = interface(DNTransitionValueBaseClass)
  ['{E55C4674-ABED-5F83-8BB8-C192465A5F43}']
  end;

  ///<summary>
  ///  Ripple slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.MorphTransition')]
  DNMorphTransition = interface(DNTransitionValueBase)
  ['{031F01A4-6717-31AA-B7AB-686E9FFF6FDA}']
  { getters & setters } 

    function get_MorphType: DNTransitionMorphType;
    procedure set_MorphType(value: DNTransitionMorphType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Type of morph transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionMorphType" />
    ///  .
    ///</summary>
    property MorphType: DNTransitionMorphType read get_MorphType write set_MorphType;
  end;

  TDNMorphTransition = class(TDNGenericImport<DNMorphTransitionClass, DNMorphTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNOptionalBlackTransitionClass = interface(DNTransitionValueBaseClass)
  ['{B7C85635-95D3-5089-BCFF-3CDAFC5435FB}']
  end;

  ///<summary>
  ///  Optional black slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.OptionalBlackTransition')]
  DNOptionalBlackTransition = interface(DNTransitionValueBase)
  ['{DFF88790-E569-35D9-A948-53934B64453E}']
  { getters & setters } 

    function get_FromBlack: Boolean;
    procedure set_FromBlack(value: Boolean);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This attribute specifies if the transition will start from a black screen
    ///  (and then transition the new slide over black).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property FromBlack: Boolean read get_FromBlack write set_FromBlack;
  end;

  TDNOptionalBlackTransition = class(TDNGenericImport<DNOptionalBlackTransitionClass, DNOptionalBlackTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNOrientationTransitionClass = interface(DNTransitionValueBaseClass)
  ['{5F94B1FE-7086-5F09-9832-6C7F9E748A53}']
  end;

  ///<summary>
  ///  Orientation slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.OrientationTransition')]
  DNOrientationTransition = interface(DNTransitionValueBase)
  ['{C99D1892-537F-3925-BA53-E7961AFE86CB}']
  { getters & setters } 

    function get_Direction: DNOrientation;
    procedure set_Direction(value: DNOrientation);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.Orientation" />
    ///  .
    ///</summary>
    property Direction: DNOrientation read get_Direction write set_Direction;
  end;

  TDNOrientationTransition = class(TDNGenericImport<DNOrientationTransitionClass, DNOrientationTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNRevealTransitionClass = interface(DNTransitionValueBaseClass)
  ['{E76F2030-580D-57FD-AF2C-B5664933088D}']
  end;

  ///<summary>
  ///  Reveal slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.RevealTransition')]
  DNRevealTransition = interface(DNTransitionValueBase)
  ['{A07DD3A2-E63A-35A4-8918-21F63C0C2321}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);
    function get_ThroughBlack: Boolean;
    procedure set_ThroughBlack(value: Boolean);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionLeftRightDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies whether the transition fades through black.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property ThroughBlack: Boolean read get_ThroughBlack write set_ThroughBlack;
  end;

  TDNRevealTransition = class(TDNGenericImport<DNRevealTransitionClass, DNRevealTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNRippleTransitionClass = interface(DNTransitionValueBaseClass)
  ['{AE2AD47F-52F1-5125-90DD-EBEC01983FEC}']
  end;

  ///<summary>
  ///  Ripple slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.RippleTransition')]
  DNRippleTransition = interface(DNTransitionValueBase)
  ['{75DC5B1E-6482-35E8-BC37-CF2145BCB77B}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerAndCenterDirectionType;
    procedure set_Direction(value: DNTransitionCornerAndCenterDirectionType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionCornerAndCenterDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionCornerAndCenterDirectionType read get_Direction write set_Direction;
  end;

  TDNRippleTransition = class(TDNGenericImport<DNRippleTransitionClass, DNRippleTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNShredTransitionClass = interface(DNTransitionValueBaseClass)
  ['{F49F0179-5DF4-5C75-AA86-65DF00276EC5}']
  end;

  ///<summary>
  ///  Shred slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.ShredTransition')]
  DNShredTransition = interface(DNTransitionValueBase)
  ['{E9C2278B-B9DA-3233-9299-49B51E53F5EB}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Pattern: DNTransitionShredPattern;
    procedure set_Pattern(value: DNTransitionShredPattern);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Specifies the shape of the visuals used during the transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionShredPattern" />
    ///  .
    ///</summary>
    property Pattern: DNTransitionShredPattern read get_Pattern write set_Pattern;
  end;

  TDNShredTransition = class(TDNGenericImport<DNShredTransitionClass, DNShredTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNSideDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{35D1CDA3-9F65-5AE0-8611-3816390A52EF}']
  end;

  ///<summary>
  ///  Side direction slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.SideDirectionTransition')]
  DNSideDirectionTransition = interface(DNTransitionValueBase)
  ['{3E2D81C0-26E5-3819-8B65-3A120DCBA31B}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionSideDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
  end;

  TDNSideDirectionTransition = class(TDNGenericImport<DNSideDirectionTransitionClass, DNSideDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNSplitTransitionClass = interface(DNTransitionValueBaseClass)
  ['{BFEDEFA2-8538-5609-8412-260699CA4CFF}']
  end;

  ///<summary>
  ///  Split slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.SplitTransition')]
  DNSplitTransition = interface(DNTransitionValueBase)
  ['{AA771E87-3A0C-38AD-864B-F1BBC1784604}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Direction of transition split.
    ///  Read/write <see cref="T:Aspose.Slides.SlideShow.TransitionInOutDirectionType" />
    ///  .
    ///</summary>
    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Orientation of transition split.
    ///  Read/write <see cref="T:Aspose.Slides.Orientation" />
    ///  .
    ///</summary>
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
  end;

  TDNSplitTransition = class(TDNGenericImport<DNSplitTransitionClass, DNSplitTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNWheelTransitionClass = interface(DNTransitionValueBaseClass)
  ['{1DFE7450-A516-5423-A6F9-7C1E3069B72F}']
  end;

  ///<summary>
  ///  Wheel slide transition effect.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideShow.WheelTransition')]
  DNWheelTransition = interface(DNTransitionValueBase)
  ['{DC444104-138D-3A9A-968F-F4B2E5AB76D7}']
  { getters & setters } 

    function get_Spokes: UInt32;
    procedure set_Spokes(value: UInt32);

  { methods } 

    ///<summary>
    ///  Determines whether the two TransitionValueBase instances are equal.
    ///</summary>
    ///  <param name="obj">The TransitionValueBase to compare with the current TransitionValueBase.</param>
    ///<returns><b>true</b>
    ///  if the specified TransitionValueBase is equal to the current TransitionValueBase; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a particular type, suitable for use
    ///  in hashing algorithms and data structures like a hash table.
    ///</summary>
    ///<remarks>
    ///  Overriden to make compiler happy. Always returns constant because object is mutable.
    ///</remarks>
    ///<returns>23454</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Number spokes of wheel transition.
    ///  Read/write <see cref="T:System.UInt32" />
    ///  .
    ///</summary>
    property Spokes: UInt32 read get_Spokes write set_Spokes;
  end;

  TDNWheelTransition = class(TDNGenericImport<DNWheelTransitionClass, DNWheelTransition>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86A0DC70-DF13-5FA6-8B51-6045142BAC91}']
  end;

  ///<summary>
  ///  Represents a size of slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.SlideSize')]
  DNSlideSize = interface(DDN.mscorlib.DNObject)
  ['{4716A57B-AFD0-4C1D-826F-B9C78CF43667}']
  { getters & setters } 

    function get_Size: DDN.Aspose.Common.DNSizeF;
    function get_Type: DNSlideSizeType;
    function get_Orientation: DNSlideOrienation;
    procedure set_Orientation(value: DNSlideOrienation);

  { methods } 

    ///<summary>
    ///  Sets the type of slide size and scales content using scale type.
    ///<remarks>Assigning any value except <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  will change <see cref="P:Aspose.Slides.SlideSize.Size">Size</see> accordingly, but will keep <see cref="P:Aspose.Slides.SlideSize.Orientation">Orientation</see> intact.</remarks>
    ///</summary>
    ///  <param name="type">Slide size type.</param>
    ///  <param name="scaleType">Scale type of slide content.</param>
    procedure SetSize(&type: DNSlideSizeType; scaleType: DNSlideSizeScaleType); overload;
    ///<summary>
    ///  Sets the size in points and scales content using scale type.
    ///<remarks>Assigning any value will reset <see cref="P:Aspose.Slides.SlideSize.Type">Type</see> property to <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  and set <see cref="P:Aspose.Slides.SlideSize.Orientation">Orientation</see>.</remarks>
    ///</summary>
    ///  <param name="width">Width.</param>
    ///  <param name="height">Height.</param>
    ///  <param name="scaleType">Scale type of slide content.</param>
    procedure SetSize(width: Single; height: Single; scaleType: DNSlideSizeScaleType); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the size in points.
    ///<remarks>Assigning any value will reset <see cref="P:Aspose.Slides.SlideSize.Type">Type</see> property to <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  and set <see cref="P:Aspose.Slides.SlideSize.Orientation">Orientation</see>.</remarks>
    ///  Read/write <see cref="T:System.Drawing.SizeF" />
    ///  .
    ///</summary>
    property Size: DDN.Aspose.Common.DNSizeF read get_Size;
    ///<summary>
    ///  Returns or sets the type of slide size.
    ///<remarks>Assigning any value except <see cref="F:Aspose.Slides.SlideSizeType.Custom" />
    ///  will change <see cref="P:Aspose.Slides.SlideSize.Size">Size</see> accordingly, but will keep <see cref="P:Aspose.Slides.SlideSize.Orientation">Orientation</see> intact.</remarks>
    ///  Read/write <see cref="T:Aspose.Slides.SlideSizeType" />
    ///  .
    ///</summary>
    property &Type: DNSlideSizeType read get_Type;
    ///<summary>
    ///  Returns or sets the slide orientation.
    ///<remarks>Changing this value will swap slide's dimensions.</remarks>
    ///  Read/write <see cref="T:Aspose.Slides.SlideOrienation" />
    ///  .
    ///</summary>
    property Orientation: DNSlideOrienation read get_Orientation write set_Orientation;
  end;

  TDNSlideSize = class(TDNGenericImport<DNSlideSizeClass, DNSlideSize>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents node of a SmartArt diagram.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtNode')]
  DNISmartArtNode = interface(DDN.mscorlib.DNObject)
  ['{2F9636C7-6E3B-465C-BA75-655B23F31AA7}']
  { getters & setters } 

    function get_ChildNodes: DNISmartArtNodeCollection;
    function get_Shapes: DNISmartArtShapeCollection;
    function get_TextFrame: DNITextFrame;
    function get_IsAssistant: Boolean;
    procedure set_IsAssistant(value: Boolean);
    function get_Level: Int32;
    function get_BulletFillFormat: DNIFillFormat;
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_IsHidden: Boolean;
    function get_OrganizationChartLayout: DNOrganizationChartLayoutType;
    procedure set_OrganizationChartLayout(value: DNOrganizationChartLayoutType);

  { methods } 

    ///<summary>
    ///  Remove current node.
    ///</summary>
    ///<returns><c>True</c> if removed succesfully, otherwise <c>false</c>.</returns>
    function Remove: Boolean;

  { propertys } 

    ///<summary>
    ///  Returns collections of all child nodes of current node.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtNodeCollection" />
    ///  .
    ///</summary>
    property ChildNodes: DNISmartArtNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Returns collections of all shapes associated with the node.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNISmartArtShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns or sets text of the node.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Returns or sets the node as assistant.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAssistant: Boolean read get_IsAssistant write set_IsAssistant;
    ///<summary>
    ///  Returns nesting level of the node.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Level: Int32 read get_Level;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a node bullet.
    ///  Note: can return null for certain types of SmartArt layout which does not provide bullets for nodes.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property BulletFillFormat: DNIFillFormat read get_BulletFillFormat;
    ///<summary>
    ///  Returns or sets zero-based position of the node among sibling nodes.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Value is less than 0.  -or- value is equal to or greater than siblings count.</exception>
    property Position: Int32 read get_Position write set_Position;
    ///<summary>
    ///  Returns true if this node is a hidden node in the data model.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHidden: Boolean read get_IsHidden;
    ///<summary>
    ///  Returns or sets organization chart layout type associated with current node.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.OrganizationChartLayoutType" />
    ///  .
    ///</summary>
    property OrganizationChartLayout: DNOrganizationChartLayoutType read get_OrganizationChartLayout write set_OrganizationChartLayout;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtNodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{017CB2A9-B43D-5D9B-A87E-585204ADC9EF}']
  end;

  ///<summary>
  ///  Represents node of a SmartArt object
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtNode')]
  DNSmartArtNode = interface(DDN.mscorlib.DNObject)
  ['{FBA7D224-8326-34FD-8477-2C3102F3EF4A}']
  { getters & setters } 

    function get_ChildNodes: DNISmartArtNodeCollection;
    function get_Shapes: DNISmartArtShapeCollection;
    function get_TextFrame: DNITextFrame;
    function get_IsAssistant: Boolean;
    procedure set_IsAssistant(value: Boolean);
    function get_Level: Int32;
    function get_BulletFillFormat: DNIFillFormat;
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_IsHidden: Boolean;
    function get_OrganizationChartLayout: DNOrganizationChartLayoutType;
    procedure set_OrganizationChartLayout(value: DNOrganizationChartLayoutType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns collections of all child nodes of the current node.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtNodeCollection" />
    ///  .
    ///</summary>
    property ChildNodes: DNISmartArtNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Returns collections of all shapes associated with the node.
    ///  Read-only <see cref="T:Aspose.Slides.SmartArt.ISmartArtShapeCollection" />
    ///  .
    ///</summary>
    property Shapes: DNISmartArtShapeCollection read get_Shapes;
    ///<summary>
    ///  Returns or sets text of the node.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrame" />
    ///  .
    ///</summary>
    property TextFrame: DNITextFrame read get_TextFrame;
    ///<summary>
    ///  Returns or sets the node as assistant.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsAssistant: Boolean read get_IsAssistant write set_IsAssistant;
    ///<summary>
    ///  Returns nesting level of the node.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Level: Int32 read get_Level;
    ///<summary>
    ///  Returns the FillFormat object that contains fill formatting properties for a node bullet.
    ///  Note: can return null for certain types of SmartArt layout which does not provide bullets for nodes.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property BulletFillFormat: DNIFillFormat read get_BulletFillFormat;
    ///<summary>
    ///  Returns or sets zero-based position of node among sibling nodes.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<exception cref="T:System.ArgumentOutOfRangeException">value is less than 0.  -or- value is equal to or greater than siblings count</exception>
    property Position: Int32 read get_Position write set_Position;
    ///<summary>
    ///  Returns true if this node is a hidden node in the data model.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsHidden: Boolean read get_IsHidden;
    ///<summary>
    ///  Returns or sets organization chart layout type associated with current node.
    ///  Read/write <see cref="T:Aspose.Slides.SmartArt.OrganizationChartLayoutType" />
    ///  .
    ///</summary>
    property OrganizationChartLayout: DNOrganizationChartLayoutType read get_OrganizationChartLayout write set_OrganizationChartLayout;
  end;

  TDNSmartArtNode = class(TDNGenericImport<DNSmartArtNodeClass, DNSmartArtNode>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtNodeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{68B35379-4AD4-5763-B214-EB85EE5C1113}']
  end;

  ///<summary>
  ///  Represents a collection of SmartArt nodes.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtNodeCollection')]
  DNSmartArtNodeCollection = interface(DDN.mscorlib.DNObject)
  ['{1383A30C-96A5-3C27-BD04-88B5447BAD80}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Add new smart art node or sub node.
    ///</summary>
    ///<returns>Added node</returns>
    function AddNode: DNISmartArtNode;
    ///<summary>
    ///  Remove node or sub node by index
    ///</summary>
    ///  <param name="index">Zero-based index of node</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  -or- index is equal to or greater than siblings count</exception>
    procedure RemoveNode(index: Int32); overload;
    ///<summary>
    ///  Remove node or sub node
    ///</summary>
    ///  <param name="node">Node to remove</param>
    procedure RemoveNode(node: DNISmartArtNode); overload;
    ///<summary>
    ///  Add new node in the selected position of nodes collection
    ///</summary>
    ///  <param name="position">Zero-base node position</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">position is less than 0</exception><returns>Added node</returns>
    function AddNodeByPosition(position: Int32): DNISmartArtNode;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISmartArtNode>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array"></param>
    ///  <param name="index"></param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns count of nodes in collection
    ///  Read-only <see cref="T:System.Int32" />
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSmartArtNodeCollection = class(TDNGenericImport<DNSmartArtNodeCollectionClass, DNSmartArtNodeCollection>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtShapeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6161634E-20B6-5C05-AB77-B07A7F647860}']
  end;

  ///<summary>
  ///  Represents a collection of a SmartArt shapes
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtShapeCollection')]
  DNSmartArtShapeCollection = interface(DDN.mscorlib.DNObject)
  ['{0761E651-1987-33AC-9EE4-36822C012E5F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISmartArtShape>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSmartArtShapeCollection = class(TDNGenericImport<DNSmartArtShapeCollectionClass, DNSmartArtShapeCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSpreadsheetOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27CB4A93-2273-5FBE-A7A4-FA2006F010CF}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.SpreadsheetOptions" />
    ///  class.
    ///</summary>
    {class} function init: DNSpreadsheetOptions;

  end;

  ///<summary>
  ///  Represents options which can be used to specify additional spreadsheets behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.SpreadsheetOptions')]
  DNSpreadsheetOptions = interface(DDN.mscorlib.DNObject)
  ['{849A12E6-F815-45E3-BC79-343A25759044}']
  { getters & setters } 

    function get_PreferredCulture: DDN.mscorlib.DNCultureInfo;
    procedure set_PreferredCulture(value: DDN.mscorlib.DNCultureInfo);
    function get_RecoverWorkbookFromChartCache: Boolean;
    procedure set_RecoverWorkbookFromChartCache(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets preferred culture information for calculating some functions intended for use with languages
    ///  that use the double-byte character set (DBCS).
    ///</summary>
    property PreferredCulture: DDN.mscorlib.DNCultureInfo read get_PreferredCulture write set_PreferredCulture;
    ///<summary>
    ///  If data source for the chart is an external workbook and it's not available, it will be recovered from the chart cache.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown when external workbook in unavailable and RecoverWorkbookFromChartCache property value is false.</exception><example> Example:
    ///<code>
    ///  [C#]
    ///  LoadOptions loadOptions = new LoadOptions
    ///  {
    ///  SpreadsheetOptions = new SpreadsheetOptions
    ///  {
    ///  RecoverWorkbookFromChartCache = true
    ///  }
    ///  };
    ///  using (Presentation pres = new Presentation("Presentation.pptx", loadOptions))
    ///  {
    ///  IChart chart = pres.Slides[0].Shapes[0] as IChart;
    ///  IChartDataWorkbook recoveredWorkbook = chart.ChartData.ChartDataWorkbook;
    ///  }
    ///</code></example>
    property RecoverWorkbookFromChartCache: Boolean read get_RecoverWorkbookFromChartCache write set_RecoverWorkbookFromChartCache;
  end;

  TDNSpreadsheetOptions = class(TDNGenericImport<DNSpreadsheetOptionsClass, DNSpreadsheetOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNStreamWrapperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F8B75DCB-39AD-546F-9E59-F8BBA5BE8290}']
  end;

  ///<summary>
  ///  Aspose.IO.Stream wrapper for COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.StreamWrapper')]
  DNStreamWrapper = interface(DDN.mscorlib.DNObject)
  ['{E6D327AD-ACDB-4F44-8682-350A2A0A93A4}']
  { getters & setters } 

    function get_Stream: DDN.mscorlib.DNStream;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;

  { methods } 

    ///<summary>
    ///  Closes the current stream and releases any resources.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
    ///</summary>
    procedure Read(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
    ///</summary>
    ///<returns></returns>
    function ReadByte: Int32;
    ///<summary>
    ///  Sets the position within the current stream
    ///</summary>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
    ///</summary>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  Writes a byte to the current position in the stream and advances the position within the stream by one byte.
    ///</summary>
    ///  <param name="value"></param>
    procedure WriteByte(value: Byte);
    ///<summary>
    ///  Disposes object.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets a stream.
    ///  Read-only <see cref="T:System.IO.Stream" />
    ///  .
    ///</summary>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>
    ///  Gets a value indicating whether the current stream supports reading.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  Gets a value indicating whether the current stream supports seeking.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  Gets a value indicating whether the current stream supports writing.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  Gets the length in bytes of the stream.
    ///  Read-only <see cref="T:System.Int64" />
    ///  .
    ///</summary>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  Gets or sets the position within the current stream.
    ///  Read-only <see cref="T:System.Int64" />
    ///  .
    ///</summary>
    property Position: Int64 read get_Position;
    ///<summary>
    ///  Allows to get base IDisposable interface.
    ///  Read-only <see cref="T:System.IDisposable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
  end;

  TDNStreamWrapper = class(TDNGenericImport<DNStreamWrapperClass, DNStreamWrapper>) end;

  //-------------namespace: Aspose.Slides----------------
  DNStreamWrapperFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C96B7E7-E611-5174-9663-3131E83389C3}']
  { constructors } 

    {class} function init: DNStreamWrapperFactory;

  end;

  ///<summary>
  ///  Factory of StreamWrappers. For COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.StreamWrapperFactory')]
  DNStreamWrapperFactory = interface(DDN.mscorlib.DNObject)
  ['{6B9A3515-0973-4686-BB42-C46B9A5FA12A}']
  { methods } 

    ///<summary>
    ///  Creates MemoryStream wrapper.
    ///</summary>
    function CreateMemoryStreamWrapper: DNIStreamWrapper; overload;
    ///<summary>
    ///  Creates MemoryStream wrapper based on the specified byte array.
    ///</summary>
    function CreateMemoryStreamWrapper(buffer: TArray<Byte>): DNIStreamWrapper; overload;
    ///<summary>
    ///  Creates FileStream with the specified path and creation mode.
    ///</summary>
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode): DNIStreamWrapper; overload;
    ///<summary>
    ///  Creates FileStream with the specified path, creation mode, and read/write permission.
    ///</summary>
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode; fileAccess: DDN.mscorlib.DNFileAccess): DNIStreamWrapper; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStreamWrapperFactory = class(TDNGenericImport<DNStreamWrapperFactoryClass, DNStreamWrapperFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSvgImageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9CB4429A-8C1A-5017-8478-FC4AED566B15}']
  { constructors } 

    ///<summary>
    ///  Creates new SvgImage object.
    ///</summary>
    ///  <param name="data">Svg data.</param>
    {class} function init(data: TArray<Byte>): DNSvgImage; overload;
    ///<summary>
    ///  Creates new SvgImage object.
    ///</summary>
    ///  <param name="svgContent">Svg content.</param>
    {class} function init(svgContent: string): DNSvgImage; overload;
    ///<summary>
    ///  Creates new SvgImage object.
    ///</summary>
    ///  <param name="stream">Svg stream.</param>
    {class} function init(stream: DDN.mscorlib.DNStream): DNSvgImage; overload;
    ///<summary>
    ///  Creates new SvgImage object.
    ///</summary>
    ///  <param name="data">Svg data.</param>
    ///  <param name="externalResResolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="baseUri">Base URI of the specified Svg. Used to resolve relative links.</param>
    {class} function init(data: TArray<Byte>; externalResResolver: DNIExternalResourceResolver; baseUri: string): DNSvgImage; overload;
    ///<summary>
    ///  Creates new SvgImage object.
    ///</summary>
    ///  <param name="svgContent">Svg content.</param>
    ///  <param name="externalResResolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="baseUri">Base URI of the specified Svg. Used to resolve relative links.</param>
    {class} function init(svgContent: string; externalResResolver: DNIExternalResourceResolver; baseUri: string): DNSvgImage; overload;
    ///<summary>
    ///  Creates new SvgImage object.
    ///</summary>
    ///  <param name="stream">Svg stream.</param>
    ///  <param name="externalResResolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="baseUri">Base URI of the specified Svg. Used to resolve relative links.</param>
    {class} function init(stream: DDN.mscorlib.DNStream; externalResResolver: DNIExternalResourceResolver; baseUri: string): DNSvgImage; overload;

  end;

  ///<summary>
  ///  Represents an SVG image.
  ///</summary>
  [DNTypeName('Aspose.Slides.SvgImage')]
  DNSvgImage = interface(DDN.mscorlib.DNObject)
  ['{B6EC6104-5014-350C-88CD-748305AC042A}']
  { getters & setters } 

    function get_SvgData: TArray<Byte>;
    function get_ExternalResourceResolver: DNIExternalResourceResolver;
    function get_BaseUri: string;
    function get_SvgContent: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns SVG data.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property SvgData: TArray<Byte> read get_SvgData;
    ///<summary>
    ///  Return callback interface used to resolve external resources during Svg documents import.
    ///  Read-only <see cref="T:Aspose.Slides.Import.IExternalResourceResolver" />
    ///  .
    ///</summary>
    property ExternalResourceResolver: DNIExternalResourceResolver read get_ExternalResourceResolver;
    ///<summary>
    ///  Returns base URI of the specified Svg. Used to resolve relative links.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property BaseUri: string read get_BaseUri;
    ///<summary>
    ///  Returns SVG content.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property SvgContent: string read get_SvgContent;
  end;

  TDNSvgImage = class(TDNGenericImport<DNSvgImageClass, DNSvgImage>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTabCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3E751340-D671-5CB1-898E-8CBA83F72DBC}']
  end;

  ///<summary>
  ///  Represents a collection of tabs.
  ///</summary>
  [DNTypeName('Aspose.Slides.TabCollection')]
  DNTabCollection = interface(DDN.mscorlib.DNObject)
  ['{F01FC68F-247E-3948-BC6B-324094AE04A3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Determines whether two TabsEx instances are equal.
    ///</summary>
    ///  <param name="obj">The TabsEx to compare with the current TabsEx.</param>
    ///<returns><b>true</b>
    ///  if the specified TabsEx is equal to the current TabsEx; otherwise, <b>false</b>
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns hash code for this object.
    ///</summary>
    function GetHashCode: Int32;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNITab>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNTabCollection = class(TDNGenericImport<DNTabCollectionClass, DNTabCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTabFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F92D60EF-CF7D-5C1F-8B8F-D692ABE79FC6}']
  { constructors } 

    {class} function init: DNTabFactory;

  end;

  ///<summary>
  ///  Allows to create ITab instances
  ///</summary>
  ///<remarks>For COM compatibility.</remarks>
  [DNTypeName('Aspose.Slides.TabFactory')]
  DNTabFactory = interface(DDN.mscorlib.DNObject)
  ['{90A20159-5D64-4018-9ADF-334EF580BC93}']
  { methods } 

    ///<summary>
    ///  Creates a new ITab instance.
    ///</summary>
    ///  <param name="position">Tab position.</param>
    ///  <param name="align">Align.</param>
    ///<returns>Created tab.</returns>
    function CreateTab(position: Double; align: DNTabAlignment): DNITab;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTabFactory = class(TDNGenericImport<DNTabFactoryClass, DNTabFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTableFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{488137F9-2D7A-578E-88A1-0F4024D78537}']
  end;

  ///<summary>
  ///  Represents format of a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.TableFormat')]
  DNTableFormat = interface(DDN.mscorlib.DNObject)
  ['{54866D02-5A97-34F9-A840-5F449C828F0D}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;

  { methods } 

    ///<summary>
    ///  Gets effective table formatting properties with inheritance and table styles applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.ITableFormatEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective fill format for different table logic parts.
    ///  Please note that cell formatting always has higher priority than row formatting, row - higher than column, column - higher that whole table.
    ///  So finally CellFormatEffectiveData properties always used to draw the table. The following code is just an example of API.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  ITable tbl = pres.Slides[0].Shapes[0] as Table;
    ///  IFillFormatEffectiveData tableFillFormatEffective = tbl.TableFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData rowFillFormatEffective = tbl.Rows[0].RowFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData columnFillFormatEffective = tbl.Columns[0].ColumnFormat.GetEffective().FillFormat;
    ///  IFillFormatEffectiveData cellFillFormatEffective = tbl[0, 0].CellFormat.GetEffective().FillFormat;
    ///  /* Output and comparison */
    ///  }
    ///</code></example>
    function GetEffective: DNITableFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a table fill properties object.
    ///  Read-only <see cref="T:Aspose.Slides.IFillFormat" />
    ///  .
    ///</summary>
    property FillFormat: DNIFillFormat read get_FillFormat;
  end;

  TDNTableFormat = class(TDNGenericImport<DNTableFormatClass, DNTableFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTagCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{33FC67F0-6658-59C0-82B8-C270436B7131}']
  end;

  ///<summary>
  ///  Represents the collection of tags (user defined pairs of strings)
  ///</summary>
  [DNTypeName('Aspose.Slides.TagCollection')]
  DNTagCollection = interface(DDN.mscorlib.DNObject)
  ['{3E01F299-0518-3937-B6B6-E2751B5A21A6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns the zero-based index of the specified key in the collection.
    ///</summary>
    ///  <param name="name">The name to locate in the collection.</param>
    ///<returns>The zero-based index of key, if key is found in the collection; otherwise, -1.</returns>
    function IndexOfName(name: string): Int32;
    ///<summary>
    ///  Determines whether the collection contains a specific name.
    ///</summary>
    ///  <param name="name">The key to locate.</param>
    ///<returns>True if the collection contains an tag with the specified key; otherwise, false.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Removes the tag at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the tag to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns value of a tag at the specified index.
    ///</summary>
    ///  <param name="index">Index of a tag to return.</param>
    ///<returns>Value of a tag.</returns>
    function GetValueByIndex(index: Int32): string;
    ///<summary>
    ///  Returns key of a tag at the specified index.
    ///</summary>
    ///  <param name="index">Index of a tag to return.</param>
    ///<returns>Key of a tag.</returns>
    function GetNameByIndex(index: Int32): string;
    ///<summary>
    ///  Returns names of tags.
    ///</summary>
    ///<returns>Names of tags.</returns>
    function GetNamesOfTags: TArray<string>;
    ///<summary>
    ///  Copies all elements from the collection into the specified array.
    ///</summary>
    ///  <param name="array">Array to fill.</param>
    ///  <param name="index">Starting position in target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of tags in the collectoin.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNTagCollection = class(TDNGenericImport<DNTagCollectionClass, DNTagCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4DD0E5C9-321F-55D9-8805-1B72C938C990}']
  end;

  ///<summary>
  ///  Represents a TextFrame.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextFrame')]
  DNTextFrame = interface(DDN.mscorlib.DNObject)
  ['{510C8F72-5CF9-3BD1-9261-E3B9EF8CA411}']
  { getters & setters } 

    function get_Paragraphs: DNIParagraphCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextFrameFormat: DNITextFrameFormat;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Joins runs with same formatting in all paragraphs.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;
    ///<summary>
    ///  Highlight all matches of sample in text frame text using specified color.
    ///</summary>
    ///  <param name="text">Text sample to highlight.</param>
    ///  <param name="highlightColor">Highlighting color.</param>
    procedure HighlightText(text: string; highlightColor: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Highlight all matches of sample in text frame text using specified color.
    ///</summary>
    ///  <param name="text">Text sample to highlight.</param>
    ///  <param name="highlightColor">Highlighting color.</param>
    ///  <param name="options">Highlighting options.</param>
    procedure HighlightText(text: string; highlightColor: DDN.Aspose.Common.DNColor; options: DNITextHighlightingOptions); overload;
    ///<summary>
    ///  Highlight all matches of regular expression in text frame text using specified color.
    ///</summary>
    ///  <param name="regex">Text of regular expression to get text to highlight.</param>
    ///  <param name="highlightColor">Highlighting color.</param>
    ///  <param name="options">Highlighting options.</param>
    procedure HighlightRegex(regex: string; highlightColor: DDN.Aspose.Common.DNColor; options: DNITextHighlightingOptions);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the list of all paragraphs in a frame.
    ///  Read-only <see cref="T:Aspose.Slides.IParagraphCollection" />
    ///  .
    ///</summary>
    property Paragraphs: DNIParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets or sets the plain text for a TextFrame.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    ///<value>
    ///  The text.
    ///</value>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns the formatting object for this TextFrame object.
    ///  Read-only <see cref="T:Aspose.Slides.ITextFrameFormat" />
    ///  .
    ///</summary>
    property TextFrameFormat: DNITextFrameFormat read get_TextFrameFormat;
    ///<summary>
    ///  Provides easy access to contained hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Returns the parent slide of a TextFrame.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation of a TextFrame.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNTextFrame = class(TDNGenericImport<DNTextFrameClass, DNTextFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextHighlightingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D85DD71D-33BF-5EB1-943E-09146893FEBD}']
  { constructors } 

    ///<summary>
    ///  Creates new default text highlighting options.
    ///</summary>
    {class} function init: DNTextHighlightingOptions;

  end;

  ///<summary>
  ///  Represents options which can be used to highlight text in text frame.
  ///</summary>
  [DNTypeName('Aspose.Slides.TextHighlightingOptions')]
  DNTextHighlightingOptions = interface(DDN.mscorlib.DNObject)
  ['{ADF54EB5-7C99-48AD-8F91-7E20CB06E85A}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_WholeWordsOnly: Boolean;
    procedure set_WholeWordsOnly(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Set true to use case-sensitive search, false - otherwise.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  Set true to match only whole words, false - otherwise.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property WholeWordsOnly: Boolean read get_WholeWordsOnly write set_WholeWordsOnly;
  end;

  TDNTextHighlightingOptions = class(TDNGenericImport<DNTextHighlightingOptionsClass, DNTextHighlightingOptions>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNBaseThemeManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{670C140D-A7F2-5857-81A2-7949426DDD45}']
  end;

  ///<summary>
  ///  Base class for classes that provide access to different types of themes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.BaseThemeManager')]
  DNBaseThemeManager = interface(DDN.mscorlib.DNObject)
  ['{D247C15C-CFDA-39DE-BDED-FC0C94789171}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseThemeManager = class(TDNGenericImport<DNBaseThemeManagerClass, DNBaseThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNBaseOverrideThemeManagerClass = interface(DNBaseThemeManagerClass)
  ['{01531C71-F1C7-5E27-84E7-D9389FCAB9A3}']
  end;

  ///<summary>
  ///  Base class for classes that provide access to different types of overriden themes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.BaseOverrideThemeManager')]
  DNBaseOverrideThemeManager = interface(DNBaseThemeManager)
  ['{53E19AFB-C6BE-398B-AA36-DC7A113A1A3C}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme"></param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IOverrideTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme or not.
    ///  To enable OverrideTheme for overriding use OverrideTheme.Init*() methods.
    ///  To disable OverrideTheme from overriding use OverrideTheme.Clear() method.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNBaseOverrideThemeManager = class(TDNGenericImport<DNBaseOverrideThemeManagerClass, DNBaseOverrideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNChartThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{25D89DC4-0958-58AD-9333-DD993AA14270}']
  end;

  ///<summary>
  ///  Provides access to chart theme overriden.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.ChartThemeManager')]
  DNChartThemeManager = interface(DNBaseOverrideThemeManager)
  ['{E7AD711E-54E3-404D-B6F6-54D3D4CC8BAC}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme"></param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IOverrideTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme or not.
    ///  To enable OverrideTheme for overriding use OverrideTheme.Init*() methods.
    ///  To disable OverrideTheme from overriding use OverrideTheme.Clear() method.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNChartThemeManager = class(TDNGenericImport<DNChartThemeManagerClass, DNChartThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNLayoutSlideThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{5C4382E1-F52B-5113-AA89-E8168F0D3EBF}']
  end;

  ///<summary>
  ///  Provides access to layout slide theme overriden.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.LayoutSlideThemeManager')]
  DNLayoutSlideThemeManager = interface(DNBaseOverrideThemeManager)
  ['{4FABDE3A-5FEB-4117-8FEF-F5FEDE7AB6AF}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme"></param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IOverrideTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme or not.
    ///  To enable OverrideTheme for overriding use OverrideTheme.Init*() methods.
    ///  To disable OverrideTheme from overriding use OverrideTheme.Clear() method.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNLayoutSlideThemeManager = class(TDNGenericImport<DNLayoutSlideThemeManagerClass, DNLayoutSlideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNNotesSlideThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{6B9A4D7D-1253-5C68-BB98-0D08F248EF20}']
  end;

  ///<summary>
  ///  Provides access to notes slide theme overriden.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.NotesSlideThemeManager')]
  DNNotesSlideThemeManager = interface(DNBaseOverrideThemeManager)
  ['{5FBD1037-149A-4B4E-BA5D-E2604E72F5B0}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme"></param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IOverrideTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme or not.
    ///  To enable OverrideTheme for overriding use OverrideTheme.Init*() methods.
    ///  To disable OverrideTheme from overriding use OverrideTheme.Clear() method.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNNotesSlideThemeManager = class(TDNGenericImport<DNNotesSlideThemeManagerClass, DNNotesSlideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNSlideThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{13AB5895-CEB6-57CF-AA2B-4E609C8E780C}']
  end;

  ///<summary>
  ///  Provides access to slide theme overriden.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.SlideThemeManager')]
  DNSlideThemeManager = interface(DNBaseOverrideThemeManager)
  ['{977F35FD-3CB3-4155-8863-A12742F2B87B}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme"></param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IOverrideTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme or not.
    ///  To enable OverrideTheme for overriding use OverrideTheme.Init*() methods.
    ///  To disable OverrideTheme from overriding use OverrideTheme.Clear() method.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNSlideThemeManager = class(TDNGenericImport<DNSlideThemeManagerClass, DNSlideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNMasterThemeManagerClass = interface(DNBaseThemeManagerClass)
  ['{11840287-E4DE-5230-9211-4272A617EF7A}']
  end;

  ///<summary>
  ///  Provides access to presentation master theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.MasterThemeManager')]
  DNMasterThemeManager = interface(DNBaseThemeManager)
  ['{5C045869-97A5-3E63-8388-A2F4ACB6CB2B}']
  { getters & setters } 

    function get_OverrideTheme: DNIMasterTheme;
    procedure set_OverrideTheme(value: DNIMasterTheme);
    function get_IsOverrideThemeEnabled: Boolean;
    procedure set_IsOverrideThemeEnabled(value: Boolean);

  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme"></param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IMasterTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIMasterTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme (Presentation.MasterTheme) or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled write set_IsOverrideThemeEnabled;
  end;

  TDNMasterThemeManager = class(TDNGenericImport<DNMasterThemeManagerClass, DNMasterThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNColorSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{999E28B6-7741-5D16-9C19-4FF65E552902}']
  end;

  ///<summary>
  ///  Stores theme-defined colors.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.ColorScheme')]
  DNColorScheme = interface(DDN.mscorlib.DNObject)
  ['{0D4BD219-6FF2-343B-BF5D-4A09701FDC37}']
  { getters & setters } 

    function get_Dark1: DNIColorFormat;
    function get_Light1: DNIColorFormat;
    function get_Dark2: DNIColorFormat;
    function get_Light2: DNIColorFormat;
    function get_Accent1: DNIColorFormat;
    function get_Accent2: DNIColorFormat;
    function get_Accent3: DNIColorFormat;
    function get_Accent4: DNIColorFormat;
    function get_Accent5: DNIColorFormat;
    function get_Accent6: DNIColorFormat;
    function get_Hyperlink: DNIColorFormat;
    function get_FollowedHyperlink: DNIColorFormat;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  First dark color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Dark1: DNIColorFormat read get_Dark1;
    ///<summary>
    ///  First light color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Light1: DNIColorFormat read get_Light1;
    ///<summary>
    ///  Second dark color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Dark2: DNIColorFormat read get_Dark2;
    ///<summary>
    ///  Second light color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Light2: DNIColorFormat read get_Light2;
    ///<summary>
    ///  First accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent1: DNIColorFormat read get_Accent1;
    ///<summary>
    ///  Second accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent2: DNIColorFormat read get_Accent2;
    ///<summary>
    ///  Third accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent3: DNIColorFormat read get_Accent3;
    ///<summary>
    ///  Fourth accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent4: DNIColorFormat read get_Accent4;
    ///<summary>
    ///  Fifth accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent5: DNIColorFormat read get_Accent5;
    ///<summary>
    ///  Sixth accent color in the scheme.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Accent6: DNIColorFormat read get_Accent6;
    ///<summary>
    ///  Color for the hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property Hyperlink: DNIColorFormat read get_Hyperlink;
    ///<summary>
    ///  Color for the visited hyperlinks.
    ///  Read-only <see cref="T:Aspose.Slides.IColorFormat" />
    ///  .
    ///</summary>
    property FollowedHyperlink: DNIColorFormat read get_FollowedHyperlink;
    ///<summary>
    ///  Returns the parent slide.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNColorScheme = class(TDNGenericImport<DNColorSchemeClass, DNColorScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNEffectStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BC4DADC-CFED-501C-9A37-BD7B14C2964A}']
  end;

  ///<summary>
  ///  Represents an effect style.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.EffectStyle')]
  DNEffectStyle = interface(DDN.mscorlib.DNObject)
  ['{2B04E996-BA9E-3595-9A92-9C4BA75B5BA1}']
  { getters & setters } 

    function get_EffectFormat: DNIEffectFormat;
    function get_ThreeDFormat: DNIThreeDFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns an effect format.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns an 3d format.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
  end;

  TDNEffectStyle = class(TDNGenericImport<DNEffectStyleClass, DNEffectStyle>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNEffectStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{828826D5-83BF-5A5A-8142-41F2296344B0}']
  end;

  ///<summary>
  ///  Represents a collection of effect styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.EffectStyleCollection')]
  DNEffectStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{7821F16E-34F2-3536-99C1-8B531549323B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIEffectStyle>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of elements in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  ,
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNEffectStyleCollection = class(TDNGenericImport<DNEffectStyleCollectionClass, DNEffectStyleCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNExtraColorSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EF7A6B08-2931-566F-A9DA-E515DFED7A66}']
  end;

  ///<summary>
  ///  Represents an additional color scheme which can be assigned to a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.ExtraColorScheme')]
  DNExtraColorScheme = interface(DDN.mscorlib.DNObject)
  ['{34352584-AAE1-3841-9917-23164FE8971E}']
  { getters & setters } 

    function get_Name: string;
    function get_ColorScheme: DNIColorScheme;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a name of this scheme.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns a color scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IColorScheme" />
    ///  .
    ///</summary>
    property ColorScheme: DNIColorScheme read get_ColorScheme;
  end;

  TDNExtraColorScheme = class(TDNGenericImport<DNExtraColorSchemeClass, DNExtraColorScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNExtraColorSchemeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D9CD07BF-4703-5B57-B366-63BE235E398E}']
  end;

  ///<summary>
  ///  Represents a collection of additional color schemes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.ExtraColorSchemeCollection')]
  DNExtraColorSchemeCollection = interface(DDN.mscorlib.DNObject)
  ['{0BB49C0E-5CA2-323A-B70C-7985214EA076}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIExtraColorScheme>;
    ///<summary>
    ///  Copies all elements of the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of elements int the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the ArrayList is synchronized (thread safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns an object that can be used to synchronize access to the collection.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNExtraColorSchemeCollection = class(TDNGenericImport<DNExtraColorSchemeCollectionClass, DNExtraColorSchemeCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNFillFormatCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06A86321-B042-5068-BA5E-C2B15E43D21C}']
  end;

  ///<summary>
  ///  Represents the collection of fill styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.FillFormatCollection')]
  DNFillFormatCollection = interface(DDN.mscorlib.DNObject)
  ['{A3E5FF9E-883B-319B-8633-018E83BAFA15}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIFillFormat>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNFillFormatCollection = class(TDNGenericImport<DNFillFormatCollectionClass, DNFillFormatCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNFontSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1420161E-3353-5C05-A031-2A01510EAD68}']
  end;

  ///<summary>
  ///  Stores theme-defined fonts.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.FontScheme')]
  DNFontScheme = interface(DDN.mscorlib.DNObject)
  ['{6902926D-1B2A-3BDD-84C0-35894653AA4F}']
  { getters & setters } 

    function get_Minor: DNIFonts;
    function get_Major: DNIFonts;
    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the fonts collection for a "body" part of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.IFonts" />
    ///  .
    ///</summary>
    property Minor: DNIFonts read get_Minor;
    ///<summary>
    ///  Returns the fonts collection for a "heading" part of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.IFonts" />
    ///  .
    ///</summary>
    property Major: DNIFonts read get_Major;
    ///<summary>
    ///  Returns the font scheme name.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
  end;

  TDNFontScheme = class(TDNGenericImport<DNFontSchemeClass, DNFontScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNFormatSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{415BCB90-4139-5338-9595-01A16F91FD2D}']
  end;

  ///<summary>
  ///  Stores theme-defined formats for the shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.FormatScheme')]
  DNFormatScheme = interface(DDN.mscorlib.DNObject)
  ['{190C69B1-5D6D-3784-A534-6AC283ADA95A}']
  { getters & setters } 

    function get_FillStyles: DNIFillFormatCollection;
    function get_LineStyles: DNILineFormatCollection;
    function get_EffectStyles: DNIEffectStyleCollection;
    function get_BackgroundFillStyles: DNIFillFormatCollection;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a collection of theme defined fill styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFillFormatCollection" />
    ///  .
    ///</summary>
    property FillStyles: DNIFillFormatCollection read get_FillStyles;
    ///<summary>
    ///  Returns a collection of theme defined line styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.ILineFormatCollection" />
    ///  .
    ///</summary>
    property LineStyles: DNILineFormatCollection read get_LineStyles;
    ///<summary>
    ///  Returns a collection of theme defined effect styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IEffectStyleCollection" />
    ///  .
    ///</summary>
    property EffectStyles: DNIEffectStyleCollection read get_EffectStyles;
    ///<summary>
    ///  Returns a collection of theme defined background fill styles.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFillFormatCollection" />
    ///  .
    ///</summary>
    property BackgroundFillStyles: DNIFillFormatCollection read get_BackgroundFillStyles;
    ///<summary>
    ///  Returns the parent slide.
    ///  Read-only <see cref="T:Aspose.Slides.IBaseSlide" />
    ///  .
    ///</summary>
    property Slide: DNIBaseSlide read get_Slide;
    ///<summary>
    ///  Returns the parent presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNFormatScheme = class(TDNGenericImport<DNFormatSchemeClass, DNFormatScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object which contains effective color scheme properties.
  ///</summary>
  ///<remarks>
  ///  This class is used as a part of <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IColorSchemeEffectiveData')]
  DNIColorSchemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{39A80416-48AA-41D1-90B2-2DD096B516CC}']
  { getters & setters } 

    function get_Item(index: DNColorSchemeIndex): DDN.Aspose.Common.DNColor;
    function get_Dark1: DDN.Aspose.Common.DNColor;
    function get_Light1: DDN.Aspose.Common.DNColor;
    function get_Dark2: DDN.Aspose.Common.DNColor;
    function get_Light2: DDN.Aspose.Common.DNColor;
    function get_Accent1: DDN.Aspose.Common.DNColor;
    function get_Accent2: DDN.Aspose.Common.DNColor;
    function get_Accent3: DDN.Aspose.Common.DNColor;
    function get_Accent4: DDN.Aspose.Common.DNColor;
    function get_Accent5: DDN.Aspose.Common.DNColor;
    function get_Accent6: DDN.Aspose.Common.DNColor;
    function get_Hyperlink: DDN.Aspose.Common.DNColor;
    function get_FollowedHyperlink: DDN.Aspose.Common.DNColor;

  { propertys } 

    property Item[index: DNColorSchemeIndex]: DDN.Aspose.Common.DNColor read get_Item; default;
    ///<summary>
    ///  First dark color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Dark1: DDN.Aspose.Common.DNColor read get_Dark1;
    ///<summary>
    ///  First light color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Light1: DDN.Aspose.Common.DNColor read get_Light1;
    ///<summary>
    ///  Second dark color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Dark2: DDN.Aspose.Common.DNColor read get_Dark2;
    ///<summary>
    ///  Second light color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Light2: DDN.Aspose.Common.DNColor read get_Light2;
    ///<summary>
    ///  First accent color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Accent1: DDN.Aspose.Common.DNColor read get_Accent1;
    ///<summary>
    ///  Second accent color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Accent2: DDN.Aspose.Common.DNColor read get_Accent2;
    ///<summary>
    ///  Third accent color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Accent3: DDN.Aspose.Common.DNColor read get_Accent3;
    ///<summary>
    ///  Fourth accent color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Accent4: DDN.Aspose.Common.DNColor read get_Accent4;
    ///<summary>
    ///  Fifth accent color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Accent5: DDN.Aspose.Common.DNColor read get_Accent5;
    ///<summary>
    ///  Sixth accent color in the scheme.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Accent6: DDN.Aspose.Common.DNColor read get_Accent6;
    ///<summary>
    ///  Color for the hyperlinks.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Hyperlink: DDN.Aspose.Common.DNColor read get_Hyperlink;
    ///<summary>
    ///  Color for the visited hyperlinks.
    ///  Read-only <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property FollowedHyperlink: DDN.Aspose.Common.DNColor read get_FollowedHyperlink;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents an effect style.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IEffectStyle')]
  DNIEffectStyle = interface(DDN.mscorlib.DNObject)
  ['{B112BF59-5A82-4556-BCD7-C9BF427CDB1A}']
  { getters & setters } 

    function get_EffectFormat: DNIEffectFormat;
    function get_ThreeDFormat: DNIThreeDFormat;

  { propertys } 

    ///<summary>
    ///  Returns an effect format.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormat" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    ///<summary>
    ///  Returns an 3d format.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormat" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object which contains effective effect style properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.Theme.IEffectStyleCollectionEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IEffectStyleEffectiveData')]
  DNIEffectStyleEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{6748110D-1E26-4067-97E9-BD184E047AEC}']
  { getters & setters } 

    function get_EffectFormat: DNIEffectFormatEffectiveData;
    function get_ThreeDFormat: DNIThreeDFormatEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns an effect format.
    ///  Read-only <see cref="T:Aspose.Slides.IEffectFormatEffectiveData" />
    ///  .
    ///</summary>
    property EffectFormat: DNIEffectFormatEffectiveData read get_EffectFormat;
    ///<summary>
    ///  Returns a 3d format.
    ///  Read-only <see cref="T:Aspose.Slides.IThreeDFormatEffectiveData" />
    ///  .
    ///</summary>
    property ThreeDFormat: DNIThreeDFormatEffectiveData read get_ThreeDFormat;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents an additional color scheme which can be assigned to a slide.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IExtraColorScheme')]
  DNIExtraColorScheme = interface(DDN.mscorlib.DNObject)
  ['{1A300121-25DA-4599-98D1-50203F9108D1}']
  { getters & setters } 

    function get_Name: string;
    function get_ColorScheme: DNIColorScheme;

  { propertys } 

    ///<summary>
    ///  Returns a name of this scheme.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns a color scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IColorScheme" />
    ///  .
    ///</summary>
    property ColorScheme: DNIColorScheme read get_ColorScheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Stores theme-defined fonts.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IFontScheme')]
  DNIFontScheme = interface(DDN.mscorlib.DNObject)
  ['{CFAF023E-4B1C-45B0-B21C-61F641C4070D}']
  { getters & setters } 

    function get_Minor: DNIFonts;
    function get_Major: DNIFonts;
    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    ///<summary>
    ///  Returns the fonts collection for a "body" part of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.IFonts" />
    ///  .
    ///</summary>
    property Minor: DNIFonts read get_Minor;
    ///<summary>
    ///  Returns the fonts collection for a "heading" part of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.IFonts" />
    ///  .
    ///</summary>
    property Major: DNIFonts read get_Major;
    ///<summary>
    ///  Returns the font scheme name.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object which contains effective font scheme properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IFontSchemeEffectiveData')]
  DNIFontSchemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{3830B6C3-7293-4F2B-9E7A-5F0AB05D05D7}']
  { getters & setters } 

    function get_Minor: DNIFontsEffectiveData;
    function get_Major: DNIFontsEffectiveData;
    function get_Name: string;

  { propertys } 

    ///<summary>
    ///  Returns the fonts collection for a "body" part of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.IFontsEffectiveData" />
    ///  .
    ///</summary>
    property Minor: DNIFontsEffectiveData read get_Minor;
    ///<summary>
    ///  Returns the fonts collection for a "heading" part of the slide.
    ///  Read-only <see cref="T:Aspose.Slides.IFontsEffectiveData" />
    ///  .
    ///</summary>
    property Major: DNIFontsEffectiveData read get_Major;
    ///<summary>
    ///  Returns the font scheme name.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object which contains effective format scheme properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IFormatSchemeEffectiveData')]
  DNIFormatSchemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{EDB668FF-A9A7-4E26-9B7F-1A51C47F22E2}']
  { methods } 

    ///<summary>
    ///  Returns a collection of theme defined fill styles.
    ///</summary>
    ///  <param name="styleColor">Color <see cref="T:System.Drawing.Color" />
    ///</param>
    ///<returns>Collection of effective fill formats <see cref="T:Aspose.Slides.Theme.IFillFormatCollectionEffectiveData" />
    ///</returns>
    function GetFillStyles(styleColor: DDN.Aspose.Common.DNColor): DNIFillFormatCollectionEffectiveData;
    ///<summary>
    ///  Returns a collection of theme defined line styles.
    ///</summary>
    ///  <param name="styleColor">Color <see cref="T:System.Drawing.Color" />
    ///</param>
    ///<returns>Collection of effective line formats <see cref="T:Aspose.Slides.Theme.ILineFormatCollectionEffectiveData" />
    ///</returns>
    function GetLineStyles(styleColor: DDN.Aspose.Common.DNColor): DNILineFormatCollectionEffectiveData;
    ///<summary>
    ///  Returns a collection of theme defined effect styles.
    ///</summary>
    ///  <param name="styleColor">Color <see cref="T:System.Drawing.Color" />
    ///</param>
    ///<returns>Collection of effective effect styles <see cref="T:Aspose.Slides.Theme.IEffectStyleCollectionEffectiveData" />
    ///</returns>
    function GetEffectStyles(styleColor: DDN.Aspose.Common.DNColor): DNIEffectStyleCollectionEffectiveData;
    ///<summary>
    ///  Returns a collection of theme defined background fill styles.
    ///</summary>
    ///  <param name="styleColor">Color <see cref="T:System.Drawing.Color" />
    ///</param>
    ///<returns>Collection of effective background fill formats <see cref="T:Aspose.Slides.Theme.IFillFormatCollectionEffectiveData" />
    ///</returns>
    function GetBackgroundFillStyles(styleColor: DDN.Aspose.Common.DNColor): DNIFillFormatCollectionEffectiveData;

  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object which contains effective theme properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used together with the <see cref="T:Aspose.Slides.Theme.ITheme" />
  ///  interface to return effective formatting values with inheritance applied.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IThemeEffectiveData')]
  DNIThemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{89C28913-6DC8-42D6-9EA5-028A04063004}']
  { getters & setters } 

    function get_FontScheme: DNIFontSchemeEffectiveData;
    function get_FormatScheme: DNIFormatSchemeEffectiveData;

  { methods } 

    ///<summary>
    ///  Returns the color scheme.
    ///</summary>
    ///  <param name="styleColor">Color <see cref="T:System.Drawing.Color" />
    ///</param>
    ///<returns>Color scheme <see cref="T:Aspose.Slides.Theme.IColorSchemeEffectiveData" />
    ///</returns>
    function GetColorScheme(styleColor: DDN.Aspose.Common.DNColor): DNIColorSchemeEffectiveData;

  { propertys } 

    ///<summary>
    ///  Returns the font scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFontSchemeEffectiveData" />
    ///  .
    ///</summary>
    property FontScheme: DNIFontSchemeEffectiveData read get_FontScheme;
    ///<summary>
    ///  Returns the shape format scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFormatSchemeEffectiveData" />
    ///  .
    ///</summary>
    property FormatScheme: DNIFormatSchemeEffectiveData read get_FormatScheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represent theme properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IThemeManager')]
  DNIThemeManager = interface(DDN.mscorlib.DNObject)
  ['{42F1CF4F-AE15-4314-837E-6EDE630607C4}']
  { methods } 

    ///<summary>
    ///  Returns the theme object.
    ///</summary>
    ///<returns>Theme object <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
    ///</returns>
    function CreateThemeEffective: DNIThemeEffectiveData;
    ///<summary>
    ///  Applies extra color scheme to a slide.
    ///</summary>
    ///  <param name="scheme">Extra color scheme <see cref="T:Aspose.Slides.Theme.IExtraColorScheme" />
    ///</param>
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);

  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Provides access to presentation master theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IMasterThemeManager')]
  DNIMasterThemeManager = interface(DNIThemeManager)
  ['{ECD85D4E-452C-43D4-A194-75CB372FF2A2}']
  { getters & setters } 

    function get_IsOverrideThemeEnabled: Boolean;
    procedure set_IsOverrideThemeEnabled(value: Boolean);
    function get_OverrideTheme: DNIMasterTheme;
    procedure set_OverrideTheme(value: DNIMasterTheme);
    function get_AsIThemeManager: DNIThemeManager;

  { propertys } 

    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme (Presentation.MasterTheme) or not.
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled write set_IsOverrideThemeEnabled;
    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IMasterTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIMasterTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Allows to get base IThemeManager interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IThemeManager" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIThemeManager: DNIThemeManager read get_AsIThemeManager;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Provides access to different types of overriden themes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IOverrideThemeManager')]
  DNIOverrideThemeManager = interface(DNIThemeManager)
  ['{778502EF-EE3D-4B84-9C60-62C8E155058F}']
  { getters & setters } 

    function get_IsOverrideThemeEnabled: Boolean;
    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_AsIThemeManager: DNIThemeManager;

  { propertys } 

    ///<summary>
    ///  Determines whether OverrideTheme overrides inherited effective theme or not.
    ///  To enable OverrideTheme for overriding use OverrideTheme.Init*() methods.
    ///  To disable OverrideTheme from overriding use OverrideTheme.Clear() method.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
    ///<summary>
    ///  Returns the overriding theme object.
    ///  Read/write <see cref="T:Aspose.Slides.Theme.IOverrideTheme" />
    ///  .
    ///</summary>
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    ///<summary>
    ///  Allows to get base IThemeManager interface.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IThemeManager" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIThemeManager: DNIThemeManager read get_AsIThemeManager;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNLineFormatCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A3D4FA3-CE91-55C4-ABFB-6D4CC014489A}']
  end;

  ///<summary>
  ///  Represents the collection of line styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.LineFormatCollection')]
  DNLineFormatCollection = interface(DDN.mscorlib.DNObject)
  ['{6593E713-AF78-36D3-986A-FCC7633C18CD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILineFormat>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNLineFormatCollection = class(TDNGenericImport<DNLineFormatCollectionClass, DNLineFormatCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNThemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D568702-F8F0-545E-9136-915141D4099C}']
  end;

  ///<summary>
  ///  Represents a theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.Theme')]
  DNTheme = interface(DDN.mscorlib.DNObject)
  ['{8179B58F-19BF-3C81-87A0-A2666EB22BF0}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Gets effective theme data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective theme properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IThemeEffectiveData effectiveTheme  = pres.Slides[0].ThemeManager.OverrideTheme.GetEffective();
    ///  Console.WriteLine("Font scheme name: " + effectiveTheme.FontScheme.Name);
    ///  Console.WriteLine("Major latin font: " + effectiveTheme.FontScheme.Major.LatinFont.FontName);
    ///  Console.WriteLine("Minor latin font: " + effectiveTheme.FontScheme.Minor.LatinFont.FontName);
    ///  }
    ///</code></example>
    function GetEffective: DNIThemeEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the color scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IColorScheme" />
    ///  .
    ///</summary>
    property ColorScheme: DNIColorScheme read get_ColorScheme;
    ///<summary>
    ///  Returns the font scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFontScheme" />
    ///  .
    ///</summary>
    property FontScheme: DNIFontScheme read get_FontScheme;
    ///<summary>
    ///  Returns the shape format scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFormatScheme" />
    ///  .
    ///</summary>
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    ///<summary>
    ///  Returns the parent presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNTheme = class(TDNGenericImport<DNThemeClass, DNTheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNMasterThemeClass = interface(DNThemeClass)
  ['{F773BCFB-3214-5115-BAAF-47611F3E2ACD}']
  end;

  ///<summary>
  ///  Represents a master theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.MasterTheme')]
  DNMasterTheme = interface(DNTheme)
  ['{544AB5F2-3223-325D-8D01-78021F67543C}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_ExtraColorSchemes: DNIExtraColorSchemeCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Gets effective theme data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective theme properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IThemeEffectiveData effectiveTheme  = pres.Slides[0].ThemeManager.OverrideTheme.GetEffective();
    ///  Console.WriteLine("Font scheme name: " + effectiveTheme.FontScheme.Name);
    ///  Console.WriteLine("Major latin font: " + effectiveTheme.FontScheme.Major.LatinFont.FontName);
    ///  Console.WriteLine("Minor latin font: " + effectiveTheme.FontScheme.Minor.LatinFont.FontName);
    ///  }
    ///</code></example>
    function GetEffective: DNIThemeEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the color scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IColorScheme" />
    ///  .
    ///</summary>
    property ColorScheme: DNIColorScheme read get_ColorScheme;
    ///<summary>
    ///  Returns the font scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFontScheme" />
    ///  .
    ///</summary>
    property FontScheme: DNIFontScheme read get_FontScheme;
    ///<summary>
    ///  Returns the shape format scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFormatScheme" />
    ///  .
    ///</summary>
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    ///<summary>
    ///  Returns the collection of additional color schemes.
    ///  These schemes don't affect presentation's look, they can be selected as main color scheme for a slide.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IExtraColorSchemeCollection" />
    ///  .
    ///</summary>
    property ExtraColorSchemes: DNIExtraColorSchemeCollection read get_ExtraColorSchemes;
    ///<summary>
    ///  Returns the name of a theme.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the parent presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterTheme = class(TDNGenericImport<DNMasterThemeClass, DNMasterTheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNOverrideThemeClass = interface(DNThemeClass)
  ['{065F9089-318A-5018-92A3-7BDEBC247AD7}']
  end;

  ///<summary>
  ///  Represents a overriding theme.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.OverrideTheme')]
  DNOverrideTheme = interface(DNTheme)
  ['{2B3905CC-814C-3F15-A0C8-F2781100026A}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_IsEmpty: Boolean;
    function get_Presentation: DNIPresentation;

  { methods } 

    ///<summary>
    ///  Init ColorScheme with new object for overriding ColorScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the ColorScheme is already initialized (not null).</exception>
    procedure InitColorScheme;
    ///<summary>
    ///  Init ColorScheme with new object for overriding ColorScheme of InheritedTheme.
    ///</summary>
    ///  <param name="colorScheme">Data to initialize from.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the ColorScheme is already initialized (not null).</exception><exception cref="T:System.ArgumentNullException">Thrown if the colorScheme parameter is null.</exception>
    procedure InitColorSchemeFrom(colorScheme: DNIColorScheme);
    ///<summary>
    ///  Init ColorScheme with new object for overriding ColorScheme of InheritedTheme. And initialize data of this new object with data of the ColorScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the ColorScheme is already initialized (not null).</exception>
    procedure InitColorSchemeFromInherited;
    ///<summary>
    ///  Init FontScheme with new object for overriding FontScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FontScheme is already initialized (not null).</exception>
    procedure InitFontScheme;
    ///<summary>
    ///  Init FontScheme with new object for overriding FontScheme of InheritedTheme.
    ///</summary>
    ///  <param name="fontScheme">Data to initialize from.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FontScheme is already initialized (not null).</exception><exception cref="T:System.ArgumentNullException">Thrown if the fontScheme parameter is null.</exception>
    procedure InitFontSchemeFrom(fontScheme: DNIFontScheme);
    ///<summary>
    ///  Init FontScheme with new object for overriding FontScheme of InheritedTheme. And initialize data of this new object with data of the FontScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FontScheme is already initialized (not null).</exception>
    procedure InitFontSchemeFromInherited;
    ///<summary>
    ///  Init FormatScheme with new object for overriding FormatScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FormatScheme is already initialized (not null).</exception>
    procedure InitFormatScheme;
    ///<summary>
    ///  Init FormatScheme with new object for overriding FormatScheme of InheritedTheme.
    ///</summary>
    ///  <param name="formatScheme">Data to initialize from.</param>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FormatScheme is already initialized (not null).</exception><exception cref="T:System.ArgumentNullException">Thrown if the formatScheme parameter is null.</exception>
    procedure InitFormatSchemeFrom(formatScheme: DNIFormatScheme);
    ///<summary>
    ///  Init FormatScheme with new object for overriding FormatScheme of InheritedTheme. And initialize data of this new object with data of the FormatScheme of InheritedTheme.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Thrown if the FormatScheme is already initialized (not null).</exception>
    procedure InitFormatSchemeFromInherited;
    ///<summary>
    ///  Gets effective theme data with the inheritance applied.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Slides.Theme.IThemeEffectiveData" />
    ///  .</returns>
    ///<example>
    ///  This example demonstrates getting effective theme properties.
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation(@"MyPresentation.pptx"))
    ///  {
    ///  IThemeEffectiveData effectiveTheme  = pres.Slides[0].ThemeManager.OverrideTheme.GetEffective();
    ///  Console.WriteLine("Font scheme name: " + effectiveTheme.FontScheme.Name);
    ///  Console.WriteLine("Major latin font: " + effectiveTheme.FontScheme.Major.LatinFont.FontName);
    ///  Console.WriteLine("Minor latin font: " + effectiveTheme.FontScheme.Minor.LatinFont.FontName);
    ///  }
    ///</code></example>
    function GetEffective: DNIThemeEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the color scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IColorScheme" />
    ///  .
    ///</summary>
    property ColorScheme: DNIColorScheme read get_ColorScheme;
    ///<summary>
    ///  Returns the font scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFontScheme" />
    ///  .
    ///</summary>
    property FontScheme: DNIFontScheme read get_FontScheme;
    ///<summary>
    ///  Returns the shape format scheme.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IFormatScheme" />
    ///  .
    ///</summary>
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    ///<summary>
    ///  True value means that ColorScheme, FontScheme, FormatScheme is null and any overriding with this theme object are disabled.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  Returns the parent presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentation" />
    ///  .
    ///</summary>
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNOverrideTheme = class(TDNGenericImport<DNOverrideThemeClass, DNOverrideTheme>) end;

  //-------------namespace: Aspose.Slides.Util----------------
  DNShapeUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9499BE31-8183-5CE6-93F2-3434A1B8FC0D}']
  { static methods } 

    ///<summary>
    ///  Converts a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  to the <see cref="T:Aspose.Slides.IGeometryPath" />
    ///<remarks>
    ///  Return value of the method call can be used to change the geometry of a IGeometryShape object with
    ///  IGeometryShape.SetGeometryPaths method.
    ///</remarks>
    ///</summary>
    ///  <param name="graphicsPath">Graphics path</param>
    ///<returns>Geometry path</returns>
    {class} function GraphicsPathToGeometryPath(graphicsPath: DDN.Aspose.Common.DNGraphicsPath): DNIGeometryPath;
    ///<summary>
    ///  Converts <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  to <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />
    ///  .
    ///<remarks></remarks>
    ///  GraphicsPath can be transformed in a different ways using its convenient methods and then transformed back into
    ///  the <see cref="T:Aspose.Slides.IGeometryPath" />
    ///  to use in <see cref="T:Aspose.Slides.GeometryShape" />
    ///  via <see cref="M:Aspose.Slides.Util.ShapeUtil.GraphicsPathToGeometryPath(System.Drawing.Drawing2D.GraphicsPath)" />
    ///  method.
    ///</summary>
    ///  <param name="geometryPath"></param>
    ///<returns>Graphics path</returns>
    {class} function GeometryPathToGraphicsPath(geometryPath: DNIGeometryPath): DDN.Aspose.Common.DNGraphicsPath;

  end;

  ///<summary>
  ///  Offer methods which helps to process shapes objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.Util.ShapeUtil')]
  DNShapeUtil = interface(DDN.mscorlib.DNObject)
  ['{E6E5A9AF-3D1B-37CB-B290-277B35168DFE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNShapeUtil = class(TDNGenericImport<DNShapeUtilClass, DNShapeUtil>) end;

  //-------------namespace: Aspose.Slides.Util----------------
  DNSlideUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{075F5C5A-F042-561F-BE35-CB4A023DA211}']
  { static methods } 

    ///<summary>
    ///  Find shape by alternative text in a PPTX presentation.
    ///</summary>
    ///  <param name="pres">Scanned presentation.</param>
    ///  <param name="altText">Alternative text of a shape.</param>
    ///<returns>Shape or null.</returns>
    {class} function FindShape(pres: DNIPresentation; altText: string): DNIShape; overload;
    ///<summary>
    ///  Find shape by alternative text on a slide in a PPTX presentation.
    ///</summary>
    ///  <param name="slide">Scanned slide.</param>
    ///  <param name="altText">Alternative text of a shape.</param>
    ///<returns>Shape or null.</returns>
    {class} function FindShape(slide: DNIBaseSlide; altText: string): DNIShape; overload;
    ///<summary>
    ///  Changes the placement of all shapes in the collection. Aligns shapes to the margins or the edge of the slide
    ///  or align them relative to each other.
    ///</summary>
    ///  <param name="alignmentType">Determines which type of alignment will be applied.</param>
    ///  <param name="alignToSlide">If true, shapes will be aligned relative to the slide edges</param>
    ///  <param name="shapes">Shapes collection to be aligned</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  SlideUtil.AlignShapes(ShapesAlignmentType.AlignBottom, true, pres.Slides[0].Shapes);
    ///  }
    ///</code></example>
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; shapes: DNIShapeCollection); overload;
    ///<summary>
    ///  Changes the placement of all shapes on the slide. Aligns shapes to the margins or the edge of the slide
    ///  or align them relative to each other.
    ///</summary>
    ///  <param name="alignmentType">Determines which type of alignment will be applied.</param>
    ///  <param name="alignToSlide">If true, shapes will be aligned relative to the slide edges.</param>
    ///  <param name="slide">Parent slide.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  SlideUtil.AlignShapes(ShapesAlignmentType.AlignBottom, true, pres.Slides);
    ///  }
    ///</code></example>
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; slide: DNIBaseSlide); overload;
    ///<summary>
    ///  Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide
    ///  or align them relative to each other.
    ///</summary>
    ///  <param name="alignmentType">Determines which type of alignment will be applied.</param>
    ///  <param name="alignToSlide">If true, shapes will be aligned relative to the slide edges.</param>
    ///  <param name="slide">Parent slide.</param>
    ///  <param name="shapeIndexes">Indexes of shapes to be aligned.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  ISlide slide = pres.Slides[0];
    ///  IShape shape1 = slide.Shapes[0];
    ///  IShape shape2 = slide.Shapes[1];
    ///  SlideUtil.AlignShapes(ShapesAlignmentType.AlignBottom, false, pres.Slides[0], new int[]
    ///  {
    ///  slide.Shapes.IndexOf(shape1),
    ///  slide.Shapes.IndexOf(shape2)
    ///  });
    ///  }
    ///</code></example>
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; slide: DNIBaseSlide; shapeIndexes: TArray<Int32>); overload;
    ///<summary>
    ///  Changes the placement of all shapes within group shape. Aligns shapes to the margins or the edge of the slide
    ///  or align them relative to each other.
    ///</summary>
    ///  <param name="alignmentType">Determines which type of alignment will be applied.</param>
    ///  <param name="alignToSlide">If true, shapes will be aligned relative to the slide edges.</param>
    ///  <param name="groupShape">Parent group shape.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  SlideUtil.AlignShapes(ShapesAlignmentType.AlignLeft, false, (GroupShape)slide.Shapes[0]);
    ///  }
    ///</code></example>
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; groupShape: DNIGroupShape); overload;
    ///<summary>
    ///  Changes the placement of selected shapes within group shape. Aligns shapes to the margins or the edge of the slide
    ///  or align them relative to each other.
    ///</summary>
    ///  <param name="alignmentType">Determines which type of alignment will be applied.</param>
    ///  <param name="alignToSlide">If true, shapes will be aligned relative to the slide edges.</param>
    ///  <param name="groupShape">Parent group shape.</param>
    ///  <param name="shapeIndexes">Indexes of shapes to be aligned.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  SlideUtil.AlignShapes(ShapesAlignmentType.AlignLeft, false, (GroupShape)slide.Shapes[0], new int[] { 0, 2 });
    ///  }
    ///</code></example>
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; groupShape: DNIGroupShape; shapeIndexes: TArray<Int32>); overload;
    ///<summary>
    ///  Returns all text frames on a slide in a PPTX presentation.
    ///</summary>
    ///  <param name="slide">Scanned slide.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.TextFrame" />
    ///  objects.</returns>
    {class} function GetAllTextBoxes(slide: DNIBaseSlide): TArray<DNITextFrame>;
    ///<summary>
    ///  Returns all text frames in a PPTX presentation.
    ///</summary>
    ///  <param name="pres">Scanned presentation.</param>
    ///  <param name="withMasters">Determines whether master slides should be scanned.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.TextFrame" />
    ///  objects.</returns>
    {class} function GetAllTextFrames(pres: DNIPresentation; withMasters: Boolean): TArray<DNITextFrame>;

  end;

  ///<summary>
  ///  Offer methods which help to search shapes and text in a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Util.SlideUtil')]
  DNSlideUtil = interface(DDN.mscorlib.DNObject)
  ['{56008E81-73CC-3EBE-A09C-72002E2F0030}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSlideUtil = class(TDNGenericImport<DNSlideUtilClass, DNSlideUtil>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents module that is contained in VBA project.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaModule')]
  DNIVbaModule = interface(DDN.mscorlib.DNObject)
  ['{BEDF0867-105A-45FE-A4B3-06D8C8758B9B}']
  { getters & setters } 

    function get_Name: string;
    function get_SourceCode: string;
    procedure set_SourceCode(value: string);

  { propertys } 

    ///<summary>
    ///  Name of the module.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Source code of the module.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property SourceCode: string read get_SourceCode write set_SourceCode;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents VBA project with presentation macros.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaProject')]
  DNIVbaProject = interface(DDN.mscorlib.DNObject)
  ['{F145A4F2-4EDF-4954-ABC3-43DE4A62B289}']
  { getters & setters } 

    function get_Name: string;
    function get_Modules: DNIVbaModuleCollection;
    function get_References: DNIVbaReferenceCollection;

  { methods } 

    ///<summary>
    ///  Returns the binary representation of the VBA project as OLE container.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    ///<returns>Binary representation of the VBA project as OLE container</returns>
    function ToBinary: TArray<Byte>;

  { propertys } 

    ///<summary>
    ///  Returns the name of the VBA project.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns the list of all modules that are contained in the VBA project.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaModuleCollection" />
    ///  .
    ///</summary>
    property Modules: DNIVbaModuleCollection read get_Modules;
    ///<summary>
    ///  Returns the list of all references that are contained in the VBA project.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaReferenceCollection" />
    ///  .
    ///</summary>
    property References: DNIVbaReferenceCollection read get_References;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Allows to create VBA project via COM interface
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaProjectFactory')]
  DNIVbaProjectFactory = interface(DDN.mscorlib.DNObject)
  ['{DC326EC1-5A22-4F5B-8A0B-014146939D44}']
  { methods } 

    ///<summary>
    ///  Creates new VBA project.
    ///</summary>
    ///<returns>New VBA project</returns>
    function CreateVbaProject: DNIVbaProject;
    ///<summary>
    ///  Reads VBA project from OLE container.
    ///</summary>
    ///  <param name="data">Ole data <see cref="T:System.Byte" />
    ///  []</param>
    ///<returns>Read VBA project</returns>
    function ReadVbaProject(data: TArray<Byte>): DNIVbaProject;

  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents the name of the VBA project reference.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaReference')]
  DNIVbaReference = interface(DDN.mscorlib.DNObject)
  ['{1277ACBC-9B55-4B1D-AB0E-C114B1E9E74C}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    ///<summary>
    ///  Represents the name of the VBA project reference.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents modified OLE Automation type library reference in which
  ///  all controls are marked as extensible.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceOleTwiddledTypeLib')]
  DNIVbaReferenceOleTwiddledTypeLib = interface(DNIVbaReference)
  ['{A78B3A2C-C490-4A23-B176-D02931CDB9C9}']
  { getters & setters } 

    function get_AsIVbaReference: DNIVbaReference;

  { propertys } 

    ///<summary>
    ///  Returns IVbaReference interface.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaReference" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIVbaReference: DNIVbaReference read get_AsIVbaReference;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents OLE Automation type library reference.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceOleTypeLib')]
  DNIVbaReferenceOleTypeLib = interface(DNIVbaReference)
  ['{D71DB457-E6BD-4A78-8B6C-132A0DAA2F98}']
  { getters & setters } 

    function get_Libid: string;
    procedure set_Libid(value: string);
    function get_AsIVbaReference: DNIVbaReference;

  { propertys } 

    ///<summary>
    ///  Represents the identifier of an Automation type library.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Libid: string read get_Libid write set_Libid;
    ///<summary>
    ///  Returns IVbaReference interface.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaReference" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIVbaReference: DNIVbaReference read get_AsIVbaReference;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents reference to an external VBA project.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceProject')]
  DNIVbaReferenceProject = interface(DNIVbaReference)
  ['{9149B14E-19BA-44C6-98A0-F16871FC0F95}']
  { getters & setters } 

    function get_AsIVbaReference: DNIVbaReference;

  { propertys } 

    ///<summary>
    ///  Returns IVbaReference interface.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaReference" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIVbaReference: DNIVbaReference read get_AsIVbaReference;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Allows to create VBA project references via COM interface
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceFactory')]
  DNIVbaReferenceFactory = interface(DDN.mscorlib.DNObject)
  ['{95ADE943-DEFE-4AF4-8486-74A93B12D148}']
  { methods } 

    ///<summary>
    ///  Creates new OLE Automation type library reference.
    ///</summary>
    ///  <param name="name">Name of the VBA project reference <see cref="T:System.String" />
    ///</param>
    ///  <param name="libid">Identifier of an Automation type library <see cref="T:System.String" />
    ///</param>
    ///<returns>New OLE Automation type library reference <see cref="T:Aspose.Slides.Vba.IVbaReferenceOleTypeLib" />
    ///</returns>
    function CreateOleTypeLibReference(name: string; libid: string): DNIVbaReferenceOleTypeLib;

  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaModuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5ADBBE0A-FC37-5B6A-B8A9-7B306F43909F}']
  end;

  ///<summary>
  ///  Represents module that is contained in VBA project.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaModule')]
  DNVbaModule = interface(DDN.mscorlib.DNObject)
  ['{3F8EC43E-A451-4F07-96D5-AA1D5291B910}']
  { getters & setters } 

    function get_Name: string;
    function get_SourceCode: string;
    procedure set_SourceCode(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the name of the module.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns or sets the source code of the module.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property SourceCode: string read get_SourceCode write set_SourceCode;
  end;

  TDNVbaModule = class(TDNGenericImport<DNVbaModuleClass, DNVbaModule>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaModuleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C1520983-1980-5B61-AAD8-AB34245A49BE}']
  end;

  ///<summary>
  ///  Represents a collection of a VBA Project modules.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaModuleCollection')]
  DNVbaModuleCollection = interface(DDN.mscorlib.DNObject)
  ['{E17AB7D0-A96C-4C90-9D2A-8A17E733A572}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a new empty module to the VBA Project.
    ///</summary>
    ///  <param name="name">Name of the module</param>
    ///<returns>Added module.</returns>
    function AddEmptyModule(name: string): DNIVbaModule;
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIVbaModule>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNVbaModuleCollection = class(TDNGenericImport<DNVbaModuleCollectionClass, DNVbaModuleCollection>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaProjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{98C7A433-04EC-51D0-B2C9-225EE8CDFD56}']
  { constructors } 

    ///<summary>
    ///  This constructor creates new VBA project from scratch.
    ///  Project will be created in 1252 Windows Latin 1 (ANSI) codepage
    ///</summary>
    {class} function init: DNVbaProject; overload;
    ///<summary>
    ///  This constructor loads VBA project from binary representation of OLE container.
    ///</summary>
    {class} function init(data: TArray<Byte>): DNVbaProject; overload;

  end;

  ///<summary>
  ///  Represents VBA project with presentation macros.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaProject')]
  DNVbaProject = interface(DDN.mscorlib.DNObject)
  ['{D9841EF7-1913-46DF-BEB0-6E5F2DACCEE2}']
  { getters & setters } 

    function get_Name: string;
    function get_Modules: DNIVbaModuleCollection;
    function get_References: DNIVbaReferenceCollection;

  { methods } 

    ///<summary>
    ///  Returns the binary representation of the VBA project as OLE container
    ///</summary>
    ///<returns>Binary representation of the VBA project as OLE container</returns>
    function ToBinary: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the name of the VBA project.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns the list of all modules that are contained in the VBA project.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaModuleCollection" />
    ///  .
    ///</summary>
    property Modules: DNIVbaModuleCollection read get_Modules;
    ///<summary>
    ///  Returns the list of all references that are contained in the VBA project.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.IVbaReferenceCollection" />
    ///  .
    ///</summary>
    property References: DNIVbaReferenceCollection read get_References;
  end;

  TDNVbaProject = class(TDNGenericImport<DNVbaProjectClass, DNVbaProject>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaProjectFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7667F42C-0051-54A7-A0D2-07C9A7AD91AE}']
  { static getter & setter } 

    {class} function get_Instance: DNVbaProjectFactory;

  { constructors } 

    {class} function init: DNVbaProjectFactory;

  { static propertys } 

    ///<summary>
    ///  VBA project factory static instance.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.VbaProjectFactory" />
    ///  .
    ///</summary>
    {class} property Instance: DNVbaProjectFactory read get_Instance;
  end;

  ///<summary>
  ///  Allows to create VBA project via COM interface
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaProjectFactory')]
  DNVbaProjectFactory = interface(DDN.mscorlib.DNObject)
  ['{5F121A26-C101-4D65-A22C-F4BB8DA5E009}']
  { methods } 

    ///<summary>
    ///  Creates new VBA project.
    ///</summary>
    ///<returns>New VBA project</returns>
    function CreateVbaProject: DNIVbaProject;
    ///<summary>
    ///  Reads VBA project from OLE container.
    ///</summary>
    ///<returns>Read VBA project</returns>
    function ReadVbaProject(data: TArray<Byte>): DNIVbaProject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVbaProjectFactory = class(TDNGenericImport<DNVbaProjectFactoryClass, DNVbaProjectFactory>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaReferenceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC92B974-BE62-5425-B455-EAC63CA9A296}']
  end;

  ///<summary>
  ///  Represents a collection of a VBA Project references.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaReferenceCollection')]
  DNVbaReferenceCollection = interface(DDN.mscorlib.DNObject)
  ['{DA88A85A-B0DD-4575-971D-FFCA24C96E2F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIVbaReference>;
    ///<summary>
    ///  Copies all elements from the collection to the specified array.
    ///</summary>
    ///  <param name="array">Target array.</param>
    ///  <param name="index">Starting index in the target array.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNVbaReferenceCollection = class(TDNGenericImport<DNVbaReferenceCollectionClass, DNVbaReferenceCollection>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaReferenceFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{04C8F6C7-397F-507E-AF59-A1E2EF000399}']
  { static getter & setter } 

    {class} function get_Instance: DNVbaReferenceFactory;

  { constructors } 

    {class} function init: DNVbaReferenceFactory;

  { static propertys } 

    ///<summary>
    ///  VBA project references factory static instance.
    ///  Read-only <see cref="T:Aspose.Slides.Vba.VbaReferenceFactory" />
    ///  .
    ///</summary>
    {class} property Instance: DNVbaReferenceFactory read get_Instance;
  end;

  ///<summary>
  ///  Allows to create VBA project references via COM interface
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaReferenceFactory')]
  DNVbaReferenceFactory = interface(DDN.mscorlib.DNObject)
  ['{76112CBF-5D2F-48C3-9E0E-495DFBD62612}']
  { methods } 

    ///<summary>
    ///  Creates new OLE Automation type library reference.
    ///</summary>
    ///<returns>New OLE Automation type library reference</returns>
    function CreateOleTypeLibReference(name: string; libid: string): DNIVbaReferenceOleTypeLib;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVbaReferenceFactory = class(TDNGenericImport<DNVbaReferenceFactoryClass, DNVbaReferenceFactory>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaReferenceOleTypeLibClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DE128BAE-CD23-548D-932F-0FC031DFB909}']
  { constructors } 

    ///<summary>
    ///  This constructor creates new OLE Automation type library reference.
    ///</summary>
    {class} function init(name: string; libid: string): DNVbaReferenceOleTypeLib;

  end;

  ///<summary>
  ///  Represents OLE Automation type library reference.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.VbaReferenceOleTypeLib')]
  DNVbaReferenceOleTypeLib = interface(DDN.mscorlib.DNObject)
  ['{108F1522-B8F2-45E6-B86D-A19134A1AF67}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Libid: string;
    procedure set_Libid(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the name of the VBA project reference.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Represents the identifier of an Automation type library.
    ///  Read/write <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Libid: string read get_Libid write set_Libid;
  end;

  TDNVbaReferenceOleTypeLib = class(TDNGenericImport<DNVbaReferenceOleTypeLibClass, DNVbaReferenceOleTypeLib>) end;

  //-------------namespace: Aspose.Slides----------------
  DNVideoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A653686-89ED-53BC-A60D-0BC3C0AA38F7}']
  end;

  ///<summary>
  ///  Represents an image embedded into a presentation.
  ///</summary>
  [DNTypeName('Aspose.Slides.Video')]
  DNVideo = interface(DDN.mscorlib.DNObject)
  ['{36E765B0-CEED-398E-A23A-8E56731642A5}']
  { getters & setters } 

    function get_ContentType: string;
    function get_BinaryData: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  Returns Stream stream for reading.
    ///  Use 'using' or close stream after using.
    ///</summary>
    ///<returns>Stream for reading.</returns>
    function GetStream: DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a MIME type of an video, encoded in <see cref="P:Aspose.Slides.Video.BinaryData" />
    ///  .
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  Returns the copy of an audio's data. In case of large amount of data consider using of
    ///<see cref="M:Aspose.Slides.Video.GetStream" />
    ///  method to prevent unnecessary loading of video's data into memory
    ///  or even OutOfMemoryException.
    ///  Read-only <see cref="T:System.Byte" />
    ///  [].
    ///</summary>
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  TDNVideo = class(TDNGenericImport<DNVideoClass, DNVideo>) end;

  //-------------namespace: Aspose.Slides----------------
  DNVideoCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC61389B-430D-5A9A-8D78-2FDD0A25B54F}']
  end;

  ///<summary>
  ///  Represents a collection of Video objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.VideoCollection')]
  DNVideoCollection = interface(DDN.mscorlib.DNObject)
  ['{F1ED71E4-A180-3375-AAA7-BC0572434E82}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Adds a copy of an video file from an another presentation.
    ///</summary>
    ///  <param name="video">Source video.</param>
    ///<returns>Added video.</returns>
    function AddVideo(video: DNIVideo): DNIVideo; overload;
    ///<summary>
    ///  Creates and adds a video to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add video file from.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.Video" />
    ///  .</returns>
    function AddVideo(stream: DDN.mscorlib.DNStream): DNIVideo; overload;
    ///<summary>
    ///  Creates and adds a video to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add video file from.</param>
    ///  <param name="loadingStreamBehavior">The behavior which will be applied to the stream.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.IVideo" />
    ///  .</returns>
    function AddVideo(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIVideo; overload;
    ///<summary>
    ///  Creates and adds a video to a presentation from byte array.
    ///</summary>
    ///  <param name="videoData">Video bytes.</param>
    ///<returns>Added video.</returns>
    function AddVideo(videoData: TArray<Byte>): DNIVideo; overload;
    ///<summary>
    ///  Copies videos to specified array starting from specified index.
    ///</summary>
    ///  <param name="array">Array.</param>
    ///  <param name="index">Index.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:System.Collections.Generic.IEnumerator`1" />
    ///  that can be used to iterate through the collection.
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIVideo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a number of video files in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns a value indicating whether access to the collection is synchronized (thread-safe).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns a synchronization root.
    ///  Read-only <see cref="T:System.Object" />
    ///  .
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNVideoCollection = class(TDNGenericImport<DNVideoCollectionClass, DNVideoCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNViewPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{92995317-26EC-5B35-9D15-7697DCA0DE90}']
  end;

  ///<summary>
  ///  Presentation wide view properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.ViewProperties')]
  DNViewProperties = interface(DDN.mscorlib.DNObject)
  ['{4527F139-1E6E-43B4-9B88-8028C225B716}']
  { getters & setters } 

    function get_LastView: DNViewType;
    procedure set_LastView(value: DNViewType);
    function get_ShowComments: DNNullableBool;
    procedure set_ShowComments(value: DNNullableBool);
    function get_NormalViewProperties: DNINormalViewProperties;
    function get_SlideViewProperties: DNICommonSlideViewProperties;
    function get_NotesViewProperties: DNICommonSlideViewProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the view mode that was used when the presentation document was last saved.
    ///  Read/write <see cref="T:Aspose.Slides.ViewType" />
    ///  .
    ///</summary>
    property LastView: DNViewType read get_LastView write set_LastView;
    ///<summary>
    ///  Specifies whether the slide comments should be shown.
    ///  Read/write <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property ShowComments: DNNullableBool read get_ShowComments write set_ShowComments;
    ///<summary>
    ///  Represents normal view properties. The normal view consists of
    ///  three content regions: the slide itself, a side content region, and a bottom content region.
    ///  Read-only <see cref="T:Aspose.Slides.INormalViewProperties" />
    ///  .
    ///</summary>
    property NormalViewProperties: DNINormalViewProperties read get_NormalViewProperties;
    ///<summary>
    ///  Specifies common view properties associated with the slide view mode.
    ///  Read-only <see cref="T:Aspose.Slides.ICommonSlideViewProperties" />
    ///  .
    ///</summary>
    property SlideViewProperties: DNICommonSlideViewProperties read get_SlideViewProperties;
    ///<summary>
    ///  Specifies common view properties associated with the notes view mode.
    ///  Read-only <see cref="T:Aspose.Slides.ICommonSlideViewProperties" />
    ///  .
    ///</summary>
    property NotesViewProperties: DNICommonSlideViewProperties read get_NotesViewProperties;
  end;

  TDNViewProperties = class(TDNGenericImport<DNViewPropertiesClass, DNViewProperties>) end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  Interface for classes which receive warning
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{535FD29D-556F-47DB-A2B8-F3759CB4E7EC}']
  { methods } 

    ///<summary>
    ///  Callback method which receives warning and decides whether operation should be aborted.
    ///</summary>
    ///  <param name="warning">Warning to process.</param>
    ///<returns>Abortion decision <see cref="T:Aspose.Slides.Warnings.ReturnAction" />
    ///  .</returns>
    function Warning(warning: DNIWarningInfo): DNReturnAction;

  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  Represents a base interface for all warnings.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.IWarningInfo')]
  DNIWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{D18C1E67-9769-4C03-98A5-16A03A0C0135}']
  { getters & setters } 

    function get_WarningType: DNWarningType;
    function get_Description: string;

  { methods } 

    ///<summary>
    ///  If receiver is not null ends warning to a specified receiver and throws the
    ///  AbortRequestedException if receiver decided to abort a operation.
    ///</summary>
    ///  <param name="receiver">Receiver object <see cref="T:Aspose.Slides.Warnings.IWarningCallback" />
    ///</param>
    procedure SendWarning(receiver: DNIWarningCallback);

  { propertys } 

    ///<summary>
    ///  Returns a type of warning.
    ///  Read-only <see cref="P:Aspose.Slides.Warnings.IWarningInfo.WarningType" />
    ///  .
    ///</summary>
    property WarningType: DNWarningType read get_WarningType;
    ///<summary>
    ///  Returns a human readable description of this warning.
    ///  Read-only <see cref="T:System.String" />
    ///  .
    ///</summary>
    property Description: string read get_Description;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  Represents a warning about known issue which won't be fixed in the near future.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.IKnownIssueWarningInfo')]
  DNIKnownIssueWarningInfo = interface(DNIWarningInfo)
  ['{0788213A-17B3-4E8F-A475-1DF4C291DA35}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    ///<summary>
    ///  Returns IWarningInfo interface.
    ///  Read-only <see cref="T:Aspose.Slides.Warnings.IWarningInfo" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  Represents a warning about known not implemented feature which won't be implemented in the near future.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.INotImplementedWarningInfo')]
  DNINotImplementedWarningInfo = interface(DNIWarningInfo)
  ['{7D8472C9-7877-46A0-A045-B0C5BB1B1096}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    ///<summary>
    ///  Returns IWarningInfo interface.
    ///  Read-only <see cref="T:Aspose.Slides.Warnings.IWarningInfo" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  This warning indicates that an obsolete presentation locking behavior is used.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.IObsoletePresLockingBehaviorWarningInfo')]
  DNIObsoletePresLockingBehaviorWarningInfo = interface(DNIWarningInfo)
  ['{BA7C6117-7392-457F-B07F-FAA18BB63101}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    ///<summary>
    ///  Returns IWarningInfo interface.
    ///  Read-only <see cref="T:Aspose.Slides.Warnings.IWarningInfo" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  ///<summary>
  ///  This warning indicates that the presentation being read has the signature
  ///  and this signature will be removed during processing.
  ///</summary>
  [DNTypeName('Aspose.Slides.Warnings.IPresentationSignedWarningInfo')]
  DNIPresentationSignedWarningInfo = interface(DNIWarningInfo)
  ['{DDB47B1F-D375-455A-8F03-DD90F7C77B6D}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    ///<summary>
    ///  Returns IWarningInfo interface.
    ///  Read-only <see cref="T:Aspose.Slides.Warnings.IWarningInfo" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents collection of behavior effects.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IBehaviorCollection')]
  DNIBehaviorCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{40609D07-A488-4199-864C-AE7AD7F7D45E}']
  { getters & setters } 

    function get_Item(index: Int32): DNIBehavior;
    procedure set_Item(index: Int32; value: DNIBehavior);
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Add new behavior to a collection.
    ///</summary>
    ///  <param name="item">Behavior to add.</param>
    procedure Add(item: DNIBehavior);
    ///<summary>
    ///  Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the list; otherwise, -1.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .</param>
    function IndexOf(item: DNIBehavior): Int32;
    ///<summary>
    ///  Inserts new behavior to a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index where new behavior should be inserted.</param>
    ///  <param name="item">Behavior to insert.</param>
    procedure Insert(index: Int32; item: DNIBehavior);
    ///<summary>
    ///  Removes specified behavior from a collection.
    ///</summary>
    ///  <param name="item">Behavior to remove.</param>
    ///<returns>True if a behavior removed successfully <see cref="T:System.Boolean" />
    ///</returns>
    function Remove(item: DNIBehavior): Boolean;
    ///<summary>
    ///  Removes behavior from a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index of a behavior to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all behaviors from a collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIBehavior): Boolean;

  { propertys } 

    property Item[index: Int32]: DNIBehavior read get_Item write set_Item; default;
    ///<summary>
    ///  Returns the number of behaviors in a collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM Compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents timing properties for the effect behavior.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IBehaviorPropertyCollection')]
  DNIBehaviorPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{D5C3C008-291F-4F39-ADD0-C319B9AA2134}']
  { getters & setters } 

    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds a new property to the collection.
    ///</summary>
    ///  <param name="propertyValue">Value of the property to add.</param>
    procedure Add(propertyValue: string);
    ///<summary>
    ///  Determines the index of a specific item by property value in the <see cref="T:System.Collections.Generic.IList`1" />
    ///  .
    ///</summary>
    ///  <param name="propertyValue">value of the property</param>
    ///<returns>The index of the property with the specified value</returns>
    function IndexOf(propertyValue: string): Int32;
    ///<summary>
    ///  Inserts a new property (with the specified property value) to the collection at the specified index.
    ///</summary>
    ///  <param name="index">Index where a new property should be inserted.</param>
    ///  <param name="propertyValue">Value of the property to add.</param>
    procedure Insert(index: Int32; propertyValue: string);
    ///<summary>
    ///  Removes specified property from the collection.
    ///</summary>
    ///  <param name="propertyValue">Value of the property to remove.</param>
    ///<returns>True if a property removed successfully <see cref="T:System.Boolean" />
    ///</returns>
    function Remove(propertyValue: string): Boolean;
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="propertyValue" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="propertyValue">Value of the property to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(propertyValue: string): Boolean;

  { propertys } 

    ///<summary>
    ///  Returns IEnumerable interfaces.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represent motion path.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IMotionPath')]
  DNIMotionPath = interface(DDN.mscorlib.DNIEnumerable)
  ['{3680EF28-E027-4820-B267-1E50B9475468}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIMotionCmdPath;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Add new command to path
    ///</summary>
    ///  <param name="type">Type of command for animation motion effect behavior <see cref="T:Aspose.Slides.Animation.MotionCommandPathType" />
    ///</param>
    ///  <param name="pts">Points array <see cref="T:System.Drawing.PointF" />
    ///  []</param>
    ///  <param name="ptsType">Type of points in animation motion path <see cref="T:Aspose.Slides.Animation.MotionPathPointsType" />
    ///</param>
    ///  <param name="bRelativeCoord">Indicates whether to use relative coordinates or not <see cref="T:System.Boolean" />
    ///</param>
    ///<returns>Command of a path <see cref="T:Aspose.Slides.Animation.IMotionCmdPath" />
    ///</returns>
    function Add(&type: DNMotionCommandPathType; pts: TArray<DDN.Aspose.Common.DNPointF>; ptsType: DNMotionPathPointsType; bRelativeCoord: Boolean): DNIMotionCmdPath;
    ///<summary>
    ///  Insert new command to path
    ///</summary>
    ///  <param name="index">Index for command insertion <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="type">Type of command for animation motion effect behavior <see cref="T:Aspose.Slides.Animation.MotionCommandPathType" />
    ///</param>
    ///  <param name="pts">Points array <see cref="T:System.Drawing.PointF" />
    ///  []</param>
    ///  <param name="ptsType">Type of points in animation motion path <see cref="T:Aspose.Slides.Animation.MotionPathPointsType" />
    ///</param>
    ///  <param name="bRelativeCoord">Indicates whether to use relative coordinates or not <see cref="T:System.Boolean" />
    ///</param>
    procedure Insert(index: Int32; &type: DNMotionCommandPathType; pts: TArray<DDN.Aspose.Common.DNPointF>; ptsType: DNMotionPathPointsType; bRelativeCoord: Boolean);
    ///<summary>
    ///  Removes all commands from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes specified commans from the collection.
    ///</summary>
    ///  <param name="item">Motion path to remove <see cref="T:Aspose.Slides.Animation.IMotionCmdPath" />
    ///</param>
    procedure Remove(item: DNIMotionCmdPath);
    ///<summary>
    ///  Removes a command at the specified index.
    ///</summary>
    ///  <param name="index">Index for removing command <see cref="T:System.Int32" />
    ///</param>
    procedure RemoveAt(index: Int32);

  { propertys } 

    ///<summary>
    ///  Returns the number of paths in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIMotionCmdPath read get_Item; default;
    ///<summary>
    ///  Allows to get base IBehavior interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents a collection of portions.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.IPointCollection')]
  DNIPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{540E5D77-5ED6-441D-A322-F97E507E2B9A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIPoint;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { propertys } 

    ///<summary>
    ///  Returns the number of points in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIPoint read get_Item; default;
    ///<summary>
    ///  Allows to get base IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents sequence (collection of effects).
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ISequence')]
  DNISequence = interface(DDN.mscorlib.DNIEnumerable)
  ['{E5DCC028-40E4-4693-83DA-F43013063E91}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIEffect;
    function get_TriggerShape: DNIShape;
    procedure set_TriggerShape(value: DNIShape);
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Removes specified effect from a collection.
    ///</summary>
    ///  <param name="item">Effect to remove.</param>
    procedure Remove(item: DNIEffect);
    ///<summary>
    ///  Removes an effect from a collection.
    ///</summary>
    ///  <param name="index">Index of effect to remove <see cref="T:System.Int32" />
    ///</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all effects from a collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Remove effect for the specified shape.
    ///</summary>
    ///  <param name="shape">Shape object <see cref="T:Aspose.Slides.IShape" />
    ///</param>
    procedure RemoveByShape(shape: DNIShape);
    ///<summary>
    ///  Returns array of effects for the specified shape.
    ///</summary>
    ///  <param name="shape">Shape object <see cref="T:Aspose.Slides.IShape" />
    ///</param>
    ///<returns>Array of effects <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function GetEffectsByShape(shape: DNIShape): TArray<DNIEffect>;
    ///<summary>
    ///  Returns array of effects for the specified paragraph.
    ///</summary>
    ///  <param name="paragraph">Paragraph object <see cref="T:Aspose.Slides.IParagraph" />
    ///</param>
    ///<returns>Array of effects <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function GetEffectsByParagraph(paragraph: DNIParagraph): TArray<DNIEffect>;
    ///<summary>
    ///  Returns count of effects for the specified shape.
    ///</summary>
    ///  <param name="shape">Shape object <see cref="T:Aspose.Slides.IShape" />
    ///</param>
    ///<returns>Count of effects <see cref="T:System.Int32" />
    ///</returns>
    function GetCount(shape: DNIShape): Int32;
    ///<summary>
    ///  Add new effect to the end of sequence.
    ///</summary>
    ///  <param name="shape">Shape object <see cref="T:Aspose.Slides.IShape" />
    ///  for adding an effect</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(shape: DNIShape; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    ///<summary>
    ///  Add new animation effect for paragraph to the end of sequence.
    ///</summary>
    ///  <param name="paragraph">Paragraph object <see cref="T:Aspose.Slides.IParagraph" />
    ///</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    ///<example><code>
    ///  [C#]
    ///  using(Presentation presentation = new Presentation(path + "input.pptx"))
    ///  {
    ///  // select paragraph to add effect
    ///  IAutoShape autoShape = (IAutoShape)presentation.Slides[0].Shapes[0];
    ///  IParagraph paragraph = autoShape.TextFrame.Paragraphs[0];
    ///  // add Fly animation effect to selected paragraph
    ///  IEffect effect = presentation.Slides[0].Timeline.MainSequence.AddEffect(
    ///  paragraph, EffectType.Fly, EffectSubtype.Left, EffectTriggerType.OnClick);
    ///  }
    ///</code></example>
    function AddEffect(paragraph: DNIParagraph; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    ///<summary>
    ///  Adds the new chart animation effect for category or series to the end of sequence.
    ///</summary>
    ///  <param name="chart">Chart object <see cref="T:Aspose.Slides.Charts.IChart" />
    ///</param>
    ///  <param name="type">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectChartMinorGroupingType" />
    ///</param>
    ///  <param name="index">Index <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(chart: DNIChart; &type: DNEffectChartMajorGroupingType; index: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    ///<summary>
    ///  Adds the new chart animation effect for elements in category or series to the end of sequence.
    ///</summary>
    ///  <param name="chart">Chart object <see cref="T:Aspose.Slides.Charts.IChart" />
    ///</param>
    ///  <param name="type">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectChartMinorGroupingType" />
    ///</param>
    ///  <param name="seriesIndex">Index of chart series <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="categoriesIndex">Index of category <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="effectType">Type of an animation effect <see cref="T:Aspose.Slides.Animation.EffectType" />
    ///</param>
    ///  <param name="subtype">Subtypes of animation effect <see cref="T:Aspose.Slides.Animation.EffectSubtype" />
    ///</param>
    ///  <param name="triggerType">Trigger type of effect <see cref="T:Aspose.Slides.Animation.EffectTriggerType" />
    ///</param>
    ///<returns>New effect object <see cref="T:Aspose.Slides.Animation.IEffect" />
    ///</returns>
    function AddEffect(chart: DNIChart; &type: DNEffectChartMinorGroupingType; seriesIndex: Int32; categoriesIndex: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;

  { propertys } 

    ///<summary>
    ///  Returns the number of effects in a sequense.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIEffect read get_Item; default;
    ///<summary>
    ///  Returns or sets shape target for INTERACTIVE sequence.
    ///  If sequence is not interactive then returns null.
    ///  Read/write <see cref="T:Aspose.Slides.IShape" />
    ///  .
    ///</summary>
    property TriggerShape: DNIShape read get_TriggerShape write set_TriggerShape;
    ///<summary>
    ///  Allows to get base IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents collection of interactive sequences.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ISequenceCollection')]
  DNISequenceCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{4DE7E704-C135-491F-A3CD-424C40B71C69}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNISequence;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Add new interactive sequence.
    ///</summary>
    ///  <param name="shapeTrigger">Shape object <see cref="T:Aspose.Slides.IShape" />
    ///</param>
    ///<returns>New sequence <see cref="T:Aspose.Slides.Animation.ISequence" />
    ///</returns>
    function Add(shapeTrigger: DNIShape): DNISequence;
    ///<summary>
    ///  Removes specified sequence from a collection.
    ///</summary>
    ///  <param name="item">Sequence to remove.</param>
    procedure Remove(item: DNISequence);
    ///<summary>
    ///  Removes sequence at the specified index.
    ///</summary>
    ///  <param name="index">Index of element in the collection <see cref="T:System.Int32" />
    ///</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all sequences from a collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    ///<summary>
    ///  Returns the number of elements in a collection
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNISequence read get_Item; default;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents collection of a cells with data.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartCellCollection')]
  DNIChartCellCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{8CD3803E-0216-4D96-8867-FF521827D9E8}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartDataCell;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Returns address of the set of cells in workbook.
    ///</summary>
    ///<returns>Address of the set of cells in workbook <see cref="T:System.String" />
    ///</returns>
    function GetCellsAddress: string;
    ///<summary>
    ///  Concatenation string from all cells string values.
    ///</summary>
    ///<returns>Resulting string <see cref="T:System.String" />
    ///</returns>
    function GetConcatenatedValuesFromCells: string;
    ///<summary>
    ///  Add new cell to the collection.
    ///</summary>
    ///  <param name="chartDataCell">New cell to add.</param>
    procedure Add(chartDataCell: DNIChartDataCell); overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  from specified value and adds it to the collection.
    ///</summary>
    ///  <param name="value">The value.</param>
    ///<remarks>This method adds worksheet with name AUTO_DATA and adds all values there.  If you use <see cref="T:Aspose.Slides.Charts.IChartDataWorkbook" />
    ///  to add or edit Cell values, be sure that you do not use this worksheet
    ///  Maximum number of values added using this method must not exceed 16711680</remarks>
    ///<exception cref="T:System.InvalidOperationException">if limit exceeded</exception>
    procedure Add(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Removes a cell from the collection by index.
    ///</summary>
    ///  <param name="index">Index of a cell to remove.</param>
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNIChartDataCell read get_Item; default;
    ///<summary>
    ///  Gets the count of cells in collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns ICollection interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a series labels.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IDataLabelCollection')]
  DNIDataLabelCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{64F87A24-5CBA-47FA-BD47-6329F1821678}']
  { getters & setters } 

    function get_Item(index: Int32): DNIDataLabel;
    function get_DefaultDataLabelFormat: DNIDataLabelFormat;
    function get_IsVisible: Boolean;
    function get_CountOfVisibleDataLabels: Int32;
    function get_Count: Int32;
    function get_ParentSeries: DNIChartSeries;
    function get_AsIChartComponent: DNIChartComponent;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Make data label hidden by default by setting all Show*-flags (ShowValue, ...) of the
    ///  DefaultDataLabelFormat property to false state.
    ///  IsVisible will be false after this.
    ///</summary>
    ///<remarks>
    ///  If data label is not visible by default (IsVisible is false) you can make data label "visible
    ///  by default" with setting Show*-flags (ShowValue, ...) of the DefaultDataLabelFormat property
    ///  to true state.
    ///</remarks>
    procedure Hide;
    ///<summary>
    ///  Returns an index of the specified DataLabel in the collection.
    ///</summary>
    ///  <param name="value">DataLabel to find.</param>
    ///<returns>Index of a DataLabel or -1 if DataLabel not from this collection.</returns>
    function IndexOf(value: DNIDataLabel): Int32;

  { propertys } 

    property Item[index: Int32]: DNIDataLabel read get_Item; default;
    ///<summary>
    ///  Returns default format of all data labels in the collection.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataLabelFormat" />
    ///  .
    ///</summary>
    property DefaultDataLabelFormat: DNIDataLabelFormat read get_DefaultDataLabelFormat;
    ///<summary>
    ///  False means that data label is not visible by default (and so all
    ///  Show*-flags (ShowValue, ...) of the DefaultDataLabelFormat property are false).
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If data label is visible by default you can make it hidden by default with Hide() method.
    ///  But if data label is not visible by default (IsVisible is false) you can make data label "visible
    ///  by default" with setting Show*-flags (ShowValue, ...) of the DefaultDataLabelFormat property
    ///  to true state.
    ///</remarks>
    property IsVisible: Boolean read get_IsVisible;
    ///<summary>
    ///  Gets the number of visible data labels in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property CountOfVisibleDataLabels: Int32 read get_CountOfVisibleDataLabels;
    ///<summary>
    ///  Gets the number of all data labels in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns parent chart series.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartSeries" />
    ///  .
    ///</summary>
    property ParentSeries: DNIChartSeries read get_ParentSeries;
    ///<summary>
    ///  Allows to get base IChartComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IChartComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
    ///<summary>
    ///  Allows to get base IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a collection of points that shall be drawn in the second pie or bar on a bar-of-pie or pie-of-pie chart with a custom split.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IPieSplitCustomPointCollection')]
  DNIPieSplitCustomPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{1189504D-F1C9-4379-B6A1-E38273FA37B3}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartDataPoint;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds data point by its index in parent series points collection.
    ///</summary>
    ///  <param name="dataPointIndex">Index of data point in parent series points collection.</param>
    procedure Add(dataPointIndex: Int32);
    ///<summary>
    ///  Removes item from collection by it index in parent series points collection.
    ///</summary>
    ///  <param name="dataPointIndex">Index of data point in parent series points collection..</param>
    procedure Remove(dataPointIndex: Int32);

  { propertys } 

    property Item[index: Int32]: DNIChartDataPoint read get_Item; default;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a collection of TrendlineEx
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.ITrendlineCollection')]
  DNITrendlineCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{423225CF-BD13-49FF-82D4-9C9B3DDCD1C2}']
  { getters & setters } 

    function get_Item(index: Int32): DNITrendline;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds the new Trendline at the end of a collection and return it.
    ///</summary>
    ///  <param name="trendlineType">Trendline type <see cref="T:Aspose.Slides.Charts.TrendlineType" />
    ///</param>
    ///<returns>New Trendline <see cref="T:Aspose.Slides.Charts.ITrendline" />
    ///</returns>
    function Add(trendlineType: DNTrendlineType): DNITrendline;
    ///<summary>
    ///  Removes the specified value.
    ///</summary>
    ///  <param name="value">Trendline to remove <see cref="T:Aspose.Slides.Charts.ITrendline" />
    ///</param>
    procedure Remove(value: DNITrendline);

  { propertys } 

    property Item[index: Int32]: DNITrendline read get_Item; default;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Allows to get base IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Represents a collection of effects apllied to an image.
  ///</summary>
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOperationCollection')]
  DNIImageTransformOperationCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{7A41712F-E85D-4A01-AA47-FFB741CFAF34}']
  { getters & setters } 

    function get_Item(index: Int32): DNIImageTransformOperation;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Removes an image effect from a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index of an image effect that should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Adds the new Alpha Bi-Level effect to the end of a collection.
    ///</summary>
    ///  <param name="threshold">The threshold value for the alpha bi-level effect.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaBiLevelEffect(threshold: Single): DNIAlphaBiLevel;
    ///<summary>
    ///  Adds the new Alpha Ceiling effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaCeilingEffect: DNIAlphaCeiling;
    ///<summary>
    ///  Adds the new Alpha Floor effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaFloorEffect: DNIAlphaFloor;
    ///<summary>
    ///  Adds the new Alpha Inverse effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaInverseEffect: DNIAlphaInverse;
    ///<summary>
    ///  Adds the new Alpha Modulate effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaModulateEffect: DNIAlphaModulate;
    ///<summary>
    ///  Adds the new Alpha Modulate Fixed effect to the end of a collection.
    ///</summary>
    ///  <param name="amount">The percentage amount to scale the alpha.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaModulateFixedEffect(amount: Single): DNIAlphaModulateFixed;
    ///<summary>
    ///  Adds the new Alpha Replace effect to the end of a collection.
    ///</summary>
    ///  <param name="alpha">The new opacity value.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddAlphaReplaceEffect(alpha: Single): DNIAlphaReplace;
    ///<summary>
    ///  Adds the new Bi-Level (black/white) effect to the end of a collection.
    ///</summary>
    ///  <param name="threshold">the luminance threshold for the Bi-Level effect.
    ///  Values greater than or equal to the threshold are set to white.
    ///  Values lesser than the threshold are set to black.
    ///</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddBiLevelEffect(threshold: Single): DNIBiLevel;
    ///<summary>
    ///  Adds the new Blur effect to the end of a collection.
    ///</summary>
    ///  <param name="radius">The radius of blur.</param>
    ///  <param name="grow">
    ///  Specifies whether the bounds of the object should be grown as a result of the blurring.
    ///  True indicates the bounds are grown while false indicates that they are not.
    ///</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddBlurEffect(radius: Double; grow: Boolean): DNIBlur;
    ///<summary>
    ///  Adds the new Color Change effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddColorChangeEffect: DNIColorChange;
    ///<summary>
    ///  Adds the new Color Replacement effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddColorReplaceEffect: DNIColorReplace;
    ///<summary>
    ///  Adds the new Duotone effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddDuotoneEffect: DNIDuotone;
    ///<summary>
    ///  Adds the new Fill Overlay effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddFillOverlayEffect: DNIFillOverlay;
    ///<summary>
    ///  Adds the new Gray Scale effect to the end of a collection.
    ///</summary>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddGrayScaleEffect: DNIGrayScale;
    ///<summary>
    ///  Adds the new Hue/Saturation/Luminance effect to the end of a collection.
    ///</summary>
    ///  <param name="hue">The number of degrees by which the hue is adjusted.</param>
    ///  <param name="saturation">The percentage by which the saturation is adjusted.</param>
    ///  <param name="luminance">The percentage by which the luminance is adjusted.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddHSLEffect(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    ///<summary>
    ///  Adds the new Luminance effect to the end of a collection.
    ///</summary>
    ///  <param name="brightness">The percent to change the brightness.</param>
    ///  <param name="contrast">The percent to change the contrast.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddLuminanceEffect(brightness: Single; contrast: Single): DNILuminance;
    ///<summary>
    ///  Adds the new Tint effect to the end of a collection.
    ///</summary>
    ///  <param name="hue">The hue towards which to tint.</param>
    ///  <param name="amount">Specifies by how much the color value is shifted.</param>
    ///<returns>Index of the new image effect in a collection.</returns>
    function AddTintEffect(hue: Single; amount: Single): DNITint;

  { propertys } 

    property Item[index: Int32]: DNIImageTransformOperation read get_Item; default;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  A collection of ActiveX controls.
  ///</summary>
  [DNTypeName('Aspose.Slides.IControlPropertiesCollection')]
  DNIControlPropertiesCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{6F4E6038-BE30-4481-A4C8-1C99072308A1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): string;
    procedure set_Item(name: string; value: string);
    function get_NamesOfProperties: DDN.mscorlib.DNICollection;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds a property to the collection.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The alue of the property.</param>
    procedure Add(name: string; value: string);
    ///<summary>
    ///  Removes a property with the specified name.
    ///</summary>
    ///  <param name="name">The name of property to remove.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes all properties.
    ///</summary>
    procedure Clear;

  { propertys } 

    ///<summary>
    ///  Returns a number of properties in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: string read get_Item write set_Item; default;
    ///<summary>
    ///  Returns a number of properties in the collection.
    ///  Read-only <see cref="T:System.Collections.ICollection" />
    ///  .
    ///</summary>
    property NamesOfProperties: DDN.mscorlib.DNICollection read get_NamesOfProperties;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of a portions.
  ///</summary>
  [DNTypeName('Aspose.Slides.IPortionCollection')]
  DNIPortionCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{2517C566-614F-441E-8FFD-E6C6B631584C}']
  { getters & setters } 

    function get_Item(index: Int32): DNIPortion;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds a Portion to the end of collection.
    ///</summary>
    ///  <param name="value">The Portion to be added to the end of the collection.</param>
    procedure Add(value: DNIPortion);
    ///<summary>
    ///  Determines the index of a specific portion in collection.
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the collection; otherwise, -1.
    ///</returns>
    ///  <param name="item">The portion to locate in the collection.</param>
    function IndexOf(item: DNIPortion): Int32;
    ///<summary>
    ///  Inserts a Portion into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which Portion should be inserted.</param>
    ///  <param name="value">The Portion to insert.</param>
    procedure Insert(index: Int32; value: DNIPortion);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  contains a specific value.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false.
    ///</returns>
    ///  <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    function &Contains(item: DNIPortion): Boolean;
    ///<summary>
    ///  Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  ; otherwise, false. This method also returns false if <paramref name="item" />
    ///  is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .
    ///</returns>
    ///  <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  .</param>
    ///<exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" />
    ///  is read-only.</exception>
    function Remove(item: DNIPortion): Boolean;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNIPortion read get_Item; default;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Specifies an instance of mathematical text that contained within a MathParagraph and starts on its own line.
  ///  All math zones, including equations, expressions, arrays of equations or expressions, and formulas are represented by math block.
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathBlock mathBlock = new MathBlock();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathBlock')]
  DNIMathBlock = interface(DDN.mscorlib.DNIEnumerable)
  ['{7E1F2264-DA89-4AE1-85C7-0417B6D8EBE7}']
  { getters & setters } 

    function get_AsIMathElementCollection: DNIMathElementCollection;
    function get_AsIMathElement: DNIMathElement;

  { methods } 

    ///<summary>
    ///  Delimits all child elements with separator character (without the brackets)
    ///</summary>
    ///  <param name="separatorCharacter">Character used as a separator</param>
    ///<returns>Instance of IMathDelimiter element</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlock mathBlock = new MathematicalText("x").Join("y");
    ///  IMathDelimiter delimiterElement = mathBlock.Delimit('|');
    ///</code></example>
    function Delimit(separatorCharacter: Char): DNIMathDelimiter;
    ///<summary>
    ///  Encloses child elements of this block in specified characters such as parenthesis or another as framing
    ///  and delimit with a separator character
    ///</summary>
    ///  <param name="beginningCharacter">Beginning character (usually left bracket)</param>
    ///  <param name="endingCharacter">Ending character (usually right bracket)</param>
    ///  <param name="separatorCharacter">Separator character</param>
    ///<returns>The math element of type <see cref="T:Aspose.Slides.MathText.IMathDelimiter" />
    ///  which includes specified characters as framing and delimiter</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlock mathBlock = new MathematicalText("x").Join("y");
    ///  IMathDelimiter delimiterElement = mathBlock.Enclose('{', '}', '%');
    ///</code></example>
    function Enclose(beginningCharacter: Char; endingCharacter: Char; separatorCharacter: Char): DNIMathDelimiter;
    ///<summary>
    ///  Joins another mathematical block with this one
    ///</summary>
    ///  <param name="other">The joining block</param>
    ///<returns>this mathematical block after joining</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlock block1 = new MathSuperscriptElement(new MathematicalText("c"), new MathematicalText("2")).Join(new MathematicalText("="));
    ///  IMathBlock block2 = new MathSuperscriptElement(new MathematicalText("a"), new MathematicalText("2")).Join(new MathematicalText("+"))
    ///  .Join(new MathSuperscriptElement(new MathematicalText("b"), new MathematicalText("2")));
    ///  IMathBlock block3 = block1.JoinBlock(block2);
    ///</code></example>
    function JoinBlock(other: DNIMathBlock): DNIMathBlock;
    ///<summary>
    ///  Saves content of this <see cref="T:Aspose.Slides.MathText.IMathBlock" />
    ///  as MathML
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);

  { propertys } 

    ///<summary>
    ///  Allows to get base IMathElementCollection interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElementCollection" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElementCollection: DNIMathElementCollection read get_AsIMathElementCollection;
    ///<summary>
    ///  Allows to get base IMathElement interface
    ///<see cref="T:Aspose.Slides.MathText.IMathElement" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Collection of math blocks (IMathBlock)
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathBlockCollection blockCollection = new MathParagraph();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathBlockCollection')]
  DNIMathBlockCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{33A9E451-F737-4959-B55E-73D630B3EBC0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIMathBlock;
    procedure set_Item(index: Int32; value: DNIMathBlock);
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds IMathBlock to the end of collection.
    ///</summary>
    ///  <param name="item">A mathematical block that will be added to the end of the collection</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  blockCollection.Add(new MathBlock(new MathematicalText("x")));
    ///</code></example>
    procedure Add(item: DNIMathBlock);
    ///<summary>
    ///  Inserts IMathBlock into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which an item should be inserted.</param>
    ///  <param name="item">The IMathBlock to insert.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  blockCollection.Insert(0, block);
    ///</code></example>
    procedure Insert(index: Int32; item: DNIMathBlock);
    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection/&gt;.
    ///</summary>
    ///  <param name="item">The object to remove from the collection.</param>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  was successfully removed from the collection; otherwise, false.
    ///  This method also returns false if <paramref name="item" />
    ///  is not found in the original collection/&gt;.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  blockCollection.Add(block);
    ///  blockCollection.Remove(block);
    ///</code></example>
    function Remove(item: DNIMathBlock): Boolean;
    ///<summary>
    ///  Removes an item at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the item to remove.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  blockCollection.Add(block);
    ///  blockCollection.RemoveAt(0);
    ///</code></example>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection.</param>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the collection; otherwise, false.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  blockCollection.Add(block);
    ///  bool contains = blockCollection.Contains(block);
    ///</code></example>
    function &Contains(item: DNIMathBlock): Boolean;
    ///<summary>
    ///  Determines the index of a specific IMathBlock in collection.
    ///</summary>
    ///  <param name="item">The item to locate in the collection.</param>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the collection; otherwise, -1.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  IMathBlock block = new MathBlock(new MathematicalText("y"));
    ///  blockCollection.Add(block);
    ///  int index = blockCollection.IndexOf(block);
    ///</code></example>
    function IndexOf(item: DNIMathBlock): Int32;
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  blockCollection.Add(new MathBlock(new MathematicalText("block1")));
    ///  blockCollection.Add(new MathBlock(new MathematicalText("block2")));
    ///  blockCollection.Clear();
    ///</code></example>
    procedure Clear;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathBlockCollection blockCollection = new MathParagraph();
    ///  blockCollection.Add(new MathBlock(new MathematicalText("block1")));
    ///  blockCollection.Add(new MathBlock(new MathematicalText("block2")));
    ///  int blocksCount = blockCollection.Count;
    ///</code></example>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIMathBlock read get_Item write set_Item; default;
    ///<summary>
    ///  Allows to get base IEnumerable interface
    ///<see cref="T:System.Collections.IEnumerable" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Represents a collection of mathematical elements (MathElement).
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IMathElementCollection collection = new MathBlock();
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathElementCollection')]
  DNIMathElementCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{42B36391-779F-4202-85F4-79537DA2EBBF}']
  { getters & setters } 

    function get_Item(index: Int32): DNIMathElement;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds a math element to the end of the collection.
    ///</summary>
    ///  <param name="item">The IMathElement to be added to the end of the collection.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  collection.Add(new MathematicalText("+"));
    ///  collection.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///</code></example>
    procedure Add(item: DNIMathElement);
    ///<summary>
    ///  Determines the index of a specific math element in collection.
    ///</summary>
    ///<returns>
    ///  The index of <paramref name="item" />
    ///  if found in the collection; otherwise, -1.
    ///</returns>
    ///  <param name="item">The element to locate in the collection.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  collection.Add(plusElement);
    ///  collection.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  int index = collection.IndexOf(plusElement);
    ///</code></example>
    function IndexOf(item: DNIMathElement): Int32;
    ///<summary>
    ///  Inserts a math element into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which IMathElement should be inserted.</param>
    ///  <param name="item">The IMathElement to insert.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  collection.Add(plusElement);
    ///  collection.Insert(0, new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///</code></example>
    procedure Insert(index: Int32; item: DNIMathElement);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  collection.Clear();
    ///</code></example>
    procedure Clear;
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection.</param>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  is found in the collection; otherwise, false.
    ///</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  collection.Add(plusElement);
    ///  collection.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  bool contains = collection.Contains(plusElement);
    ///</code></example>
    function &Contains(item: DNIMathElement): Boolean;
    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" />
    ///  is not found in the original collection.
    ///</returns>
    ///  <param name="item">The object to remove from the collection.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  collection.Add(plusElement);
    ///  collection.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  collection.Remove(plusElement);
    ///</code></example>
    function Remove(item: DNIMathElement): Boolean;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  collection.Add(plusElement);
    ///  collection.Insert(0, new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  collection.RemoveAt(2);
    ///</code></example>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Copy to specified array.
    ///</summary>
    ///  <param name="array">Array to copy to.</param>
    ///  <param name="arrayIndex">Index to begin copying.</param>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  MathematicalText plusElement = new MathematicalText("+");
    ///  collection.Add(plusElement);
    ///  collection.Add(new MathRadical(new MathematicalText("x"), new MathematicalText("3")));
    ///  IMathElement[] destinationArray = new IMathElement[collection.Count];
    ///  collection.CopyTo(destinationArray, 0);
    ///</code></example>
    procedure CopyTo(&array: TArray<DNIMathElement>; arrayIndex: Int32);

  { propertys } 

    property Item[index: Int32]: DNIMathElement read get_Item; default;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IMathElementCollection collection = new MathBlock(new MathematicalText("x"));
    ///  int count = collection.Count;
    ///</code></example>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  ///<summary>
  ///  Mathematical paragraph that is a container for mathematical blocks (IMathBlock)
  ///</summary>
  ///<example>Example:
  ///<code>
  ///  [C#]
  ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
  ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
  ///  mathParagraph.Justification = MathJustification.LeftJustified;
  ///</code></example>
  [DNTypeName('Aspose.Slides.MathText.IMathParagraph')]
  DNIMathParagraph = interface(DDN.mscorlib.DNIEnumerable)
  ['{35FFE60B-ED6B-44B5-88CD-9D26FB2EDA88}']
  { getters & setters } 

    function get_Justification: DNMathJustification;
    procedure set_Justification(value: DNMathJustification);
    function get_AsIMathBlockCollection: DNIMathBlockCollection;

  { methods } 

    ///<summary>
    ///  Saves content of this <see cref="T:Aspose.Slides.MathText.IMathParagraph" />
    ///  as MathML
    ///</summary>
    ///  <param name="stream">Target stream</param>
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);

  { propertys } 

    ///<summary>
    ///  Paragraph Justification
    ///  Default value: CenteredAsGroup
    ///</summary>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  IAutoShape shape = slide.Shapes.AddMathShape(x, y, width, height);
    ///  IMathParagraph mathParagraph = (shape.TextFrame.Paragraphs[0].Portions[0] as MathPortion).MathParagraph;
    ///  mathParagraph.Justification = MathJustification.LeftJustified;
    ///</code></example>
    property Justification: DNMathJustification read get_Justification write set_Justification;
    ///<summary>
    ///  Allows to get base IMathBlockCollection interface
    ///<see cref="T:Aspose.Slides.MathText.IMathBlockCollection" />
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIMathBlockCollection: DNIMathBlockCollection read get_AsIMathBlockCollection;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents collection of  <see cref="T:Aspose.Slides.Charts.IChartSeries" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesCollection')]
  DNIChartSeriesCollection = interface(DDN.mscorlib.DNIEnumerable<DNIChartSeries>)
  ['{8CF1E538-0E68-43B6-84AA-94073440D486}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartSeries;

  { methods } 

    ///<summary>
    ///  Creates new chart series and adds it to the collection.
    ///</summary>
    ///  <param name="type">Type of series</param>
    ///<returns>New chart series.</returns>
    function Add(&type: DNChartType): DNIChartSeries; overload;
    ///<summary>
    ///  Creates new chart series and inserts it into the collection.
    ///</summary>
    ///  <param name="index">Index for insertion <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="type">Chart type <see cref="T:Aspose.Slides.Charts.ChartType" />
    ///</param>
    ///<returns>New chart series <see cref="T:Aspose.Slides.Charts.IChartSeries" />
    ///</returns>
    function Insert(index: Int32; &type: DNChartType): DNIChartSeries;
    ///<summary>
    ///  Creates new chart series from <see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  and adds it to the collection.
    ///</summary>
    ///<remarks>If chart series careted from same cell already in collection
    ///  then method adds nothing and returns it's index.</remarks>
    ///  <param name="cellWithSeriesName">Cell which contain series name.</param>
    ///  <param name="type">Type set type of series</param>
    ///<returns>Added chart series or series that already is in collection.</returns>
    function Add(cellWithSeriesName: DNIChartDataCell; &type: DNChartType): DNIChartSeries; overload;
    ///<summary>
    ///  Creates new chart series from <see cref="T:Aspose.Slides.Charts.IChartCellCollection" />
    ///  and adds it to the collection.
    ///</summary>
    ///<remarks>If chart series careted from same cell already in collection
    ///  then method adds nothing and returns it's index.</remarks>
    ///  <param name="cellsWithSeriesName">Cells which contain series name.</param>
    ///  <param name="type">Type set type of series</param>
    ///<returns>Added chart series or series that already is in collection.</returns>
    function Add(cellsWithSeriesName: DNIChartCellCollection; &type: DNChartType): DNIChartSeries; overload;
    ///<summary>
    ///  Creates new chart series from value and adds it to the collection.
    ///</summary>
    ///  <param name="name">Series name.</param>
    ///  <param name="type">Type set type of series</param>
    ///<returns>Added chart series.</returns>
    function Add(name: string; &type: DNChartType): DNIChartSeries; overload;
    ///<summary>
    ///  Searches for the specified <see cref="T:Aspose.Slides.Charts.IChartSeries" />
    ///  and returns the zero-based index of the first occurrence within the entire Collection
    ///</summary>
    ///  <param name="value">Chart series value.</param>
    ///<returns>The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.</returns>
    function IndexOf(value: DNIChartSeries): Int32;
    ///<summary>
    ///  Removes the specified value.
    ///</summary>
    ///  <param name="value">The value.</param>
    ///<exception cref="T:System.ArgumentException">The value parameter was not found in the collection.</exception>
    procedure Remove(value: DNIChartSeries);
    ///<summary>
    ///  Removes the element at the specified index
    ///</summary>
    ///  <param name="index">Index <see cref="T:System.Int32" />
    ///</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIChartSeries read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents a readonly collection of  <see cref="T:Aspose.Slides.Charts.IChartSeries" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesReadonlyCollection')]
  DNIChartSeriesReadonlyCollection = interface(DDN.mscorlib.DNIEnumerable<DNIChartSeries>)
  ['{3D32ACAE-7A7D-4EB2-AA59-C613715402B8}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartSeries;

  { propertys } 

    property Item[index: Int32]: DNIChartSeries read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of a paragraphs.
  ///</summary>
  [DNTypeName('Aspose.Slides.IParagraphCollection')]
  DNIParagraphCollection = interface(DDN.mscorlib.DNIEnumerable<DNIParagraph>)
  ['{8CADF989-4D96-4E85-BD9E-9264C84EBE35}']
  { getters & setters } 

    function get_Item(index: Int32): DNIParagraph;
    function get_Count: Int32;
    function get_AsISlideComponent: DNISlideComponent;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    ///<summary>
    ///  Adds a Paragraph to the end of collection.
    ///</summary>
    ///  <param name="value">The Paragraph to be added to the end of the collection.</param>
    procedure Add(value: DNIParagraph); overload;
    ///<summary>
    ///  Adds a content of ParagraphCollection to the end of collection.
    ///</summary>
    ///  <param name="value">The ParagraphCollection to be added to the end of the collection.</param>
    ///<returns>The index at which the Paragraph has been added or -1 if there are nothing to add.</returns>
    function Add(value: DNIParagraphCollection): Int32; overload;
    ///<summary>
    ///  Inserts a Paragraph into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which Paragraph should be inserted.</param>
    ///  <param name="value">The Paragraph to insert.</param>
    procedure Insert(index: Int32; value: DNIParagraph); overload;
    ///<summary>
    ///  Inserts a content of ParagraphCollection into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which paragraphs should be inserted.</param>
    ///  <param name="value">The paragraphs to insert.</param>
    procedure Insert(index: Int32; value: DNIParagraphCollection); overload;
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes the first occurrence of a specific paragraph.
    ///</summary>
    ///<returns>
    ///  true if <paramref name="item" />
    ///  was successfully removed; otherwise, false.
    ///</returns>
    ///  <param name="item">The paragraph to remove from collection.</param>
    function Remove(item: DNIParagraph): Boolean;
    ///<summary>
    ///  Adds text from specified html string to the collection.
    ///</summary>
    ///  <param name="text">HTML text.</param>
    procedure AddFromHtml(text: string); overload;
    ///<summary>
    ///  Adds text from specified html string to the collection.
    ///</summary>
    ///  <param name="text">HTML text.</param>
    ///  <param name="resolver">Resolver callback object which resolves URIs and fetches referrenced objects.</param>
    ///  <param name="uri">URI for adding HTML document. Used for resolving relative links.</param>
    ///<remarks>Specifying resolver can potentially introduce a vulnurability. Use with caution.</remarks>
    procedure AddFromHtml(text: string; resolver: DNIExternalResourceResolver; uri: string); overload;
    ///<summary>
    ///  Converts specifying paragraphs to the HTML and returns it as String object.
    ///</summary>
    ///  <param name="firstParagraphIndex">First paragraph index <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="paragraphsCount">Paragraph count <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="options">Convert options <see cref="T:Aspose.Slides.Export.ITextToHtmlConversionOptions" />
    ///</param>
    ///<returns>Generated HTML.</returns>
    function ExportToHtml(firstParagraphIndex: Int32; paragraphsCount: Int32; options: DNITextToHtmlConversionOptions): string;

  { propertys } 

    property Item[index: Int32]: DNIParagraph read get_Item; default;
    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  ///<summary>
  ///  Represents collection of text animations.
  ///</summary>
  [DNTypeName('Aspose.Slides.Animation.ITextAnimationCollection')]
  DNITextAnimationCollection = interface(DDN.mscorlib.DNICollection)
  ['{07EE1E6D-F6BF-46EE-9B99-1D61936D45CB}']
  { getters & setters } 

    function get_Item(index: Int32): DNITextAnimation; overload;
    function get_Item(shape: DNIShape): TArray<DNITextAnimation>; overload;

  { propertys } 

    property Item[index: Int32]: DNITextAnimation read get_Item; default;
    property Item[shape: DNIShape]: TArray<DNITextAnimation> read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents collection of <see cref="T:Aspose.Slides.Charts.IChartCategory" />
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartCategoryCollection')]
  DNIChartCategoryCollection = interface(DDN.mscorlib.DNICollection)
  ['{8780A5AA-2263-4462-A768-44400CB3BE35}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartCategory;
    function get_UseCells: Boolean;
    procedure set_UseCells(value: Boolean);
    function get_GroupingLevelCount: Int32;

  { methods } 

    ///<summary>
    ///  If category exists in collection, return it. Else creates new chart category from
    ///<see cref="T:Aspose.Slides.Charts.IChartDataCell" />
    ///  and adds it to the collection.
    ///</summary>
    ///  <param name="chartDataCell">Cell used to create chart category.</param>
    ///<returns>Added or existing category.</returns>
    function Add(chartDataCell: DNIChartDataCell): DNIChartCategory; overload;
    ///<summary>
    ///  Creates new <see cref="T:Aspose.Slides.Charts.IChartCategory" />
    ///  from value and adds it to the collection.
    ///</summary>
    ///  <param name="value">The value.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.Charts.IChartCategory" />
    ///  .</returns>
    ///<remarks>This method adds worksheet with name AUTO_DATA and adds all values there.  If you use <see cref="T:Aspose.Slides.Charts.IChartDataWorkbook" />
    ///  to add or edit cell values, be sure that you do not use this worksheet
    ///  Maximum number of values added using this method must not exceed 16711680</remarks>
    ///<exception cref="T:System.InvalidOperationException">if limit exceeded</exception>
    function Add(value: DDN.mscorlib.DNObject): DNIChartCategory; overload;
    ///<summary>
    ///  Searches for the specified <see cref="T:Aspose.Slides.Charts.IChartCategory" />
    ///  and returns the zero-based index of the first occurrence within the entire Collection
    ///</summary>
    ///  <param name="value">Chart category.</param>
    ///<returns>The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.</returns>
    function IndexOf(value: DNIChartCategory): Int32;
    ///<summary>
    ///  Removes the specified value.
    ///</summary>
    ///  <param name="value">The value.</param>
    ///<exception cref="T:System.ArgumentException">The value parameter was not found in the collection.</exception>
    procedure Remove(value: DNIChartCategory);
    ///<summary>
    ///  Removes the element at the given index.
    ///</summary>
    ///  <param name="index">Index of a category to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIChartCategory read get_Item; default;
    ///<summary>
    ///  If true then worksheet is used for storing categories (this case supports a multi-level categories).
    ///  If false then worksheet is NOT used for storing values (and this case doesn't support a
    ///  multi-level categories).
    ///  Read/write <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property UseCells: Boolean read get_UseCells write set_UseCells;
    ///<summary>
    ///  Returns count of category grouping levels used.
    ///  Is more then one for multilevel categories.
    ///  Read-only <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property GroupingLevelCount: Int32 read get_GroupingLevelCount;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents collection of a series data point.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.IChartDataPointCollection')]
  DNIChartDataPointCollection = interface(DDN.mscorlib.DNICollection)
  ['{985DF8C2-9EB6-4748-840C-48469F61917F}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartDataPoint; overload;
    function get_Item(pt: DNIChartDataPoint): Int32; overload;
    function get_DataSourceTypeForXValues: DNDataSourceType;
    procedure set_DataSourceTypeForXValues(value: DNDataSourceType);
    function get_DataSourceTypeForYValues: DNDataSourceType;
    procedure set_DataSourceTypeForYValues(value: DNDataSourceType);
    function get_DataSourceTypeForBubbleSizes: DNDataSourceType;
    procedure set_DataSourceTypeForBubbleSizes(value: DNDataSourceType);
    function get_DataSourceTypeForValues: DNDataSourceType;
    procedure set_DataSourceTypeForValues(value: DNDataSourceType);
    function get_DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues;

  { methods } 

    ///<summary>
    ///  If collection already contains data point with index <paramref name="index" />
    ///  then returns this data point.
    ///  If collection doesn't contains data point with index <paramref name="index" />
    ///  ==N (when number of data points in this collection is less or equal then N) then adds deficient data points and returns last (which has requested index). For example, collection indexes are {0, 1, 2}, and requested index is 5. Then method adds deficient data points: {0, 1, 2, 3, 4, 5}. And returns data point with index 5.
    ///</summary>
    ///  <param name="index">Index.</param>
    ///<returns>Returns data point with requested index.</returns>
    function GetOrCreateDataPointByIdx(index: UInt32): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Stock subtypes (see also ChartTypeCharacterizer.IsChartTypeStock(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForStockSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Stock subtypes (see also ChartTypeCharacterizer.IsChartTypeStock(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForStockSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Line subtypes (see also ChartTypeCharacterizer.IsChartTypeLine(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForLineSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Line subtypes (see also ChartTypeCharacterizer.IsChartTypeLine(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value.</param>
    ///<returns>New data point.</returns>
    function AddDataPointForLineSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: Double; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: string; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: Double; yValue: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Scatter subtypes (see also ChartTypeCharacterizer.IsChartTypeScatter(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForScatterSeries(xValue: string; yValue: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Radar subtypes (see also ChartTypeCharacterizer.IsChartTypeRadar(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForRadarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Radar subtypes (see also ChartTypeCharacterizer.IsChartTypeRadar(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForRadarSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Column or Bar subtypes (see also ChartTypeCharacterizer.IsChartTypeColumn(ChartType) and ChartTypeCharacterizer.IsChartTypeBar(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Column or Bar subtypes (see also ChartTypeCharacterizer.IsChartTypeColumn(ChartType) and ChartTypeCharacterizer.IsChartTypeBar(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBarSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Area subtypes (see also ChartTypeCharacterizer.IsChartTypeArea(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForAreaSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Area subtypes (see also ChartTypeCharacterizer.IsChartTypeArea(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForAreaSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Pie subtypes (see also ChartTypeCharacterizer.IsChartTypePie(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForPieSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Pie subtypes (see also ChartTypeCharacterizer.IsChartTypePie(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForPieSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Doughnut subtypes (see also ChartTypeCharacterizer.IsChartTypeDoughnut(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForDoughnutSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Doughnut subtypes (see also ChartTypeCharacterizer.IsChartTypeDoughnut(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForDoughnutSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Bubble subtypes (see also ChartTypeCharacterizer.IsChartTypeBubble(ChartType) method).
    ///</summary>
    ///  <param name="xValue">Data point XValue</param>
    ///  <param name="yValue">Data point YValue</param>
    ///  <param name="bubbleSize">Data point BubbleSize</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Surface subtypes (see also ChartTypeCharacterizer.IsChartTypeSurface(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForSurfaceSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chartType is one of Surface subtypes (see also ChartTypeCharacterizer.IsChartTypeSurface(ChartType) method).
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForSurfaceSeries(value: Double): DNIChartDataPoint; overload;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Sunburst.
    ///</summary>
    ///  <param name="sizeValue">Data point SizeValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForSunburstSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Waterfall.
    ///</summary>
    ///  <param name="value">Data point value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForWaterfallSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is BoxAndWhisker.
    ///</summary>
    ///  <param name="value">Data point Value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForBoxAndWhiskerSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Treemap.
    ///</summary>
    ///  <param name="sizeValue">Data point SizeValue</param>
    ///<returns>New data point.</returns>
    function AddDataPointForTreemapSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Histogram.
    ///</summary>
    ///  <param name="value">Data point value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForHistogramSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Funnel.
    ///</summary>
    ///  <param name="value">Data point value</param>
    ///<returns>New data point.</returns>
    function AddDataPointForFunnelSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Creates the new data point and adds it to the end of collection.
    ///  Applicable for series which chart type is Map.
    ///</summary>
    ///  <param name="value">Data point ColorValue</param>
    ///<returns>New data point.</returns>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  IChart chart = sourcePres.Slides[0].Shapes.AddChart(ChartType.Map, 50, 50, 500, 400, false);
    ///  IChartDataWorkbook wb = chart.ChartData.ChartDataWorkbook;
    ///  IChartSeries series = chart.ChartData.Series.Add(ChartType.Map);
    ///  series.DataPoints.AddDataPointForMapSeries(wb.GetCell(0, "B2", 5));
    ///  series.DataPoints.AddDataPointForMapSeries(wb.GetCell(0, "B3", 1));
    ///  series.DataPoints.AddDataPointForMapSeries(wb.GetCell(0, "B4", 10));
    ///  }
    ///</code></example>
    function AddDataPointForMapSeries(value: DNIChartDataCell): DNIChartDataPoint;
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the specified value.
    ///</summary>
    ///  <param name="value">The value.</param>
    ///<exception cref="T:System.ArgumentException">The value parameter was not found in the collection.</exception>
    procedure Remove(value: DNIChartDataPoint);
    ///<summary>
    ///  Removes the element at the given index.
    ///</summary>
    ///  <param name="index">Index of a data point to remove.</param>
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNIChartDataPoint read get_Item; default;
    property Item[pt: DNIChartDataPoint]: Int32 read get_Item; default;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points XValue property object. In other words it specifies
    ///  the type of value of ChartDataPointEx.XValue.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForXValues: DNDataSourceType read get_DataSourceTypeForXValues write set_DataSourceTypeForXValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points YValue property object. In other words it specifies
    ///  the type of value of ChartDataPointEx.YValue.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForYValues: DNDataSourceType read get_DataSourceTypeForYValues write set_DataSourceTypeForYValues;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points BubbleSize property object. In other words it specifies
    ///  the type of value of ChartDataPointEx.BubbleSize.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForBubbleSizes: DNDataSourceType read get_DataSourceTypeForBubbleSizes write set_DataSourceTypeForBubbleSizes;
    ///<summary>
    ///  Specifies whether AsCell or AsLiteralString or AsLiteralDouble property
    ///  is actual in data points Value property object. In other words it specifies
    ///  the type of value of ChartDataPoint.Value.Data property.
    ///  Read/write <see cref="T:Aspose.Slides.Charts.DataSourceType" />
    ///  .
    ///</summary>
    property DataSourceTypeForValues: DNDataSourceType read get_DataSourceTypeForValues write set_DataSourceTypeForValues;
    ///<summary>
    ///  Specifies the type of values in ChartDataPoint.ErrorBarsCustomValues properties listþ
    ///  Read-only <see cref="T:Aspose.Slides.Charts.IDataSourceTypeForErrorBarsCustomValues" />
    ///  .
    ///</summary>
    property DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues read get_DataSourceTypeForErrorBarsCustomValues;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  ///<summary>
  ///  Represents the coleection of groups of combinable series.
  ///</summary>
  ///<remarks>
  ///  1) Each group of series contains series with combinable types. Groups of
  ///  combinable series types defined and described with CombinableSeriesTypesGroup
  ///  enum.
  ///  Also each group of series contains series witch is plotted whether
  ///  on primary axes or on secondary axes (not both cases in one group).
  ///  So, principle of series grouping is a grouping by type groups mentioned
  ///  above and by primary/secondary plotting type.
  ///  2) Group of series contains some series properies whitch is common for
  ///  each series in group ("series group properties").
  ///  "Series group properties" in ChartSeriesGroup class is read/write.
  ///  Each of "series group properties" can have a read-only projection in ChartSeries class.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesGroupCollection')]
  DNIChartSeriesGroupCollection = interface(DDN.mscorlib.DNICollection)
  ['{DF7F2244-5493-41A4-A98C-67AC49282BF6}']
  { getters & setters } 

    function get_Item(ofSeries: DNIChartSeries): DNIChartSeriesGroup; overload;
    function get_Item(index: Int32): DNIChartSeriesGroup; overload;

  { propertys } 

    property Item[ofSeries: DNIChartSeries]: DNIChartSeriesGroup read get_Item; default;
    property Item[index: Int32]: DNIChartSeriesGroup read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  ///<summary>
  ///  Immutable object that represents a readonly collection of effective image transform effects.
  ///</summary>
  ///<remarks>
  ///  Name IImageTransformOperationCollectionEffectiveData truncuted to IImageTransformOCollectionEffectiveData because of COM names length cannot be more then 39.
  ///</remarks>
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOCollectionEffectiveData')]
  DNIImageTransformOCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{35469424-84AE-4CE6-80F0-1EC7141AA779}']
  { getters & setters } 

    function get_Item(index: Int32): DNIEffectEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIEffectEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Reprasents a collection of shape's adjustments.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAdjustValueCollection')]
  DNIAdjustValueCollection = interface(DDN.mscorlib.DNICollection)
  ['{43018C27-5739-4D78-9666-3D34BFF7EB17}']
  { getters & setters } 

    function get_Item(index: Int32): DNIAdjustValue;
    function get_AsICollection: DDN.mscorlib.DNICollection;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { propertys } 

    property Item[index: Int32]: DNIAdjustValue read get_Item; default;
    ///<summary>
    ///  Allows to get base ICollection interface.
    ///  Read-only <see cref="T:System.Collections.ICollection" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsICollection: DDN.mscorlib.DNICollection read get_AsICollection;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of embedded audio files.
  ///</summary>
  [DNTypeName('Aspose.Slides.IAudioCollection')]
  DNIAudioCollection = interface(DDN.mscorlib.DNICollection)
  ['{8C3F59DB-38E1-4EAD-ADA3-048A42079890}']
  { getters & setters } 

    function get_Item(index: Int32): DNIAudio;

  { methods } 

    ///<summary>
    ///  Adds a copy of an audio file from an another presentation.
    ///</summary>
    ///  <param name="audio">Source audio.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(audio: DNIAudio): DNIAudio; overload;
    ///<summary>
    ///  Creates and adds a audio to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add audio from.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(stream: DDN.mscorlib.DNStream): DNIAudio; overload;
    ///<summary>
    ///  Creates and adds a audio to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add video audio from.</param>
    ///  <param name="loadingStreamBehavior">The behavior which will be applied to the stream.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIAudio; overload;
    ///<summary>
    ///  Creates and adds a audio to a presentation from byte array.
    ///</summary>
    ///  <param name="audioData">Audio bytes.</param>
    ///<returns>Added audio.</returns>
    function AddAudio(audioData: TArray<Byte>): DNIAudio; overload;

  { propertys } 

    property Item[index: Int32]: DNIAudio read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of cells.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICellCollection')]
  DNICellCollection = interface(DDN.mscorlib.DNICollection)
  ['{39EFF844-34B3-4AEB-B848-AB708BA1840B}']
  { getters & setters } 

    function get_Item(index: Int32): DNICell;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property Item[index: Int32]: DNICell read get_Item; default;
    ///<summary>
    ///  Allows to get base ISlideComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of color transform operations.
  ///</summary>
  [DNTypeName('Aspose.Slides.IColorOperationCollection')]
  DNIColorOperationCollection = interface(DDN.mscorlib.DNICollection)
  ['{4779F2AE-C224-41BC-8352-B6B324F271EE}']
  { getters & setters } 

    function get_Item(index: Int32): DNIColorOperation;
    procedure set_Item(index: Int32; value: DNIColorOperation);

  { methods } 

    ///<summary>
    ///  Adds a new operation to the end of collection.
    ///</summary>
    ///  <param name="operation">Operation type.</param>
    ///  <param name="parameter">Operation's parameter. </param>
    ///<returns>Added operation.</returns>
    function Add(operation: DNColorTransformOperation; parameter: Single): DNIColorOperation; overload;
    ///<summary>
    ///  Adds a new operation to the end of collection.
    ///</summary>
    ///  <param name="operation">Operation type.</param>
    ///<returns>Added operation.</returns>
    function Add(operation: DNColorTransformOperation): DNIColorOperation; overload;
    ///<summary>
    ///  Inserts the new operation to a collection.
    ///</summary>
    ///  <param name="position">The index at which the operation will be inserted.</param>
    ///  <param name="operation">Operation type.</param>
    ///  <param name="parameter">Operation's parameter. </param>
    ///<returns>Inserted operation.</returns>
    function Insert(position: Int32; operation: DNColorTransformOperation; parameter: Single): DNIColorOperation; overload;
    ///<summary>
    ///  Inserts the new operation to a collection.
    ///</summary>
    ///  <param name="position">The index at which the operation will be inserted.</param>
    ///  <param name="operation">Operation type.</param>
    ///<returns>Inserted operation.</returns>
    function Insert(position: Int32; operation: DNColorTransformOperation): DNIColorOperation; overload;
    ///<summary>
    ///  Removes the color operation from a collection.
    ///</summary>
    ///  <param name="index">Index of a color operation to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all color operations.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIColorOperation read get_Item write set_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a column in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.IColumn')]
  DNIColumn = interface(DDN.mscorlib.DNICollection)
  ['{B5E43E73-512E-4EE2-BB50-9A0BDD9CCE1C}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_ColumnFormat: DNIColumnFormat;
    function get_AsICellCollection: DNICellCollection;
    function get_AsIBulkTextFormattable: DNIBulkTextFormattable;

  { propertys } 

    ///<summary>
    ///  Returns or sets the width of a column.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Returns the ColumnFormat object that contains formatting properties for this column.
    ///  Read-only <see cref="T:Aspose.Slides.IColumnFormat" />
    ///  .
    ///</summary>
    property ColumnFormat: DNIColumnFormat read get_ColumnFormat;
    ///<summary>
    ///  Allows to get base ICellCollection interface.
    ///  Read-only <see cref="T:Aspose.Slides.ICellCollection" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsICellCollection: DNICellCollection read get_AsICellCollection;
    ///<summary>
    ///  Allows to get base IBulkTextFormattable interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBulkTextFormattable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBulkTextFormattable: DNIBulkTextFormattable read get_AsIBulkTextFormattable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents collection of columns in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.IColumnCollection')]
  DNIColumnCollection = interface(DDN.mscorlib.DNICollection)
  ['{22897944-2303-4386-9859-D8809B1194E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNIColumn;

  { methods } 

    ///<summary>
    ///  Creates a copy of the specified template row and inserts it at the bottom of a table.
    ///</summary>
    ///  <param name="templ">Column which is used as a template.</param>
    ///  <param name="withAttachedColumns">True to copy also all columns attached to the template row.</param>
    ///<returns>Added columns.</returns>
    function AddClone(templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    ///<summary>
    ///  Creates a copy of the specified template column and insert it at the specified position in a table.
    ///</summary>
    ///  <param name="index">Index of a new column.</param>
    ///  <param name="templ">Column which is used as a template.</param>
    ///  <param name="withAttachedColumns">True to copy also all columns attached to the template column.</param>
    ///<returns>Inserted columns.</returns>
    function InsertClone(index: Int32; templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    ///<summary>
    ///  Removes a column at the specified position from a table.
    ///</summary>
    ///  <param name="firstColumnIndex">Index of a column to delete.</param>
    ///  <param name="withAttachedRows">True to delete also all attached columns.</param>
    procedure RemoveAt(firstColumnIndex: Int32; withAttachedRows: Boolean);

  { propertys } 

    property Item[index: Int32]: DNIColumn read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of comment authors.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICommentAuthorCollection')]
  DNICommentAuthorCollection = interface(DDN.mscorlib.DNICollection)
  ['{930C9BCB-4267-4AF1-A71B-8E4003FDD1B9}']
  { getters & setters } 

    function get_Item(index: Int32): DNICommentAuthor;

  { methods } 

    ///<summary>
    ///  Add new author at the end of a collection.
    ///</summary>
    ///  <param name="name">Name of a new author.</param>
    ///  <param name="initials">Initials of a new author.</param>
    ///<returns>New <see cref="T:Aspose.Slides.ICommentAuthor" />
    ///  object.</returns>
    function AddAuthor(name: string; initials: string): DNICommentAuthor;
    ///<summary>
    ///  Creates and returns an array with all authors.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ICommentAuthor" />
    ///</returns>
    function ToArray: TArray<DNICommentAuthor>;
    ///<summary>
    ///  Find author in a collection by name.
    ///</summary>
    ///  <param name="name">Name of an author to find.</param>
    ///<returns>Author or null.</returns>
    function FindByName(name: string): TArray<DNICommentAuthor>;
    ///<summary>
    ///  Find author in a collection by name and initials.
    ///</summary>
    ///  <param name="name">Name of an author to find.</param>
    ///  <param name="initials">Initials of an author to find.</param>
    ///<returns>Author or null.</returns>
    function FindByNameAndInitials(name: string; initials: string): TArray<DNICommentAuthor>;
    ///<summary>
    ///  Removes the author at the specified index of the collection.
    ///</summary>
    ///  <param name="index"> The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or index is equal or greater than Count</exception><exception cref="T:Aspose.Slides.PptxEditException">Thrown if author is already removed.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes the first occurrence of the specified author in a collection.
    ///</summary>
    ///  <param name="author">The author to remove from a collection.</param>
    ///<exception cref="T:System.ArgumentNullException">Author is <c>null</c></exception><exception cref="T:Aspose.Slides.PptxEditException">Thrown if author is already removed.</exception>
    procedure Remove(author: DNICommentAuthor);
    ///<summary>
    ///  Removes all authors from a collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNICommentAuthor read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of comments of one author.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICommentCollection')]
  DNICommentCollection = interface(DDN.mscorlib.DNICollection)
  ['{20443DBF-D3AA-4E2A-82CC-9CF6A57FBA07}']
  { getters & setters } 

    function get_Item(index: Int32): DNIComment;

  { methods } 

    ///<summary>
    ///  Add new comment at the end of a collection.
    ///</summary>
    ///  <param name="text">Plain text of a new comment.</param>
    ///  <param name="slide">Slide in a presentation where to add a new comment.</param>
    ///  <param name="position">Position on a slide where to add a new comment.</param>
    ///  <param name="creationTime">Time of a comment creation.</param>
    ///<returns>Added comment.</returns>
    function AddComment(text: string; slide: DNISlide; position: DDN.Aspose.Common.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    ///<summary>
    ///  Insert new comment to a collection at the specified index.
    ///</summary>
    ///  <param name="index">Index of the element in a collection at which comment should be inserted.</param>
    ///  <param name="text">Plain text of a new comment.</param>
    ///  <param name="slide">Slide in a presentation where to add a new comment.</param>
    ///  <param name="position">Position on a slide where to add a new comment.</param>
    ///  <param name="creationTime">Time of a comment creation.</param>
    ///<returns>Inserted comment.</returns>
    function InsertComment(index: Int32; text: string; slide: DNISlide; position: DDN.Aspose.Common.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    ///<summary>
    ///  Creates and returns an array with all comments.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IComment" />
    ///  .</returns>
    function ToArray: TArray<DNIComment>; overload;
    ///<summary>
    ///  Creates and returns an array with all comments from the specified range.
    ///</summary>
    ///  <param name="startIndex">An index of a first comment to return.</param>
    ///  <param name="count">A number of comments to return.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.IComment" />
    ///  .</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIComment>; overload;
    ///<summary>
    ///  Removes the element at the specified index in a collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0 or index is equal or greater than Count</exception><exception cref="T:Aspose.Slides.PptxEditException">Thrown if comment is already removed.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes the first occurrence of the specified comment in a collection.
    ///</summary>
    ///  <param name="comment">The comment to remove from a collection.</param>
    ///<exception cref="T:System.ArgumentNullException">If comment is <c>null</c></exception><exception cref="T:Aspose.Slides.PptxEditException">Thrown if comment is already removed.</exception>
    procedure Remove(comment: DNIComment);
    ///<summary>
    ///  Removes all comments from a collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIComment read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  A collection of ActiveX controls.
  ///</summary>
  [DNTypeName('Aspose.Slides.IControlCollection')]
  DNIControlCollection = interface(DDN.mscorlib.DNICollection)
  ['{E5B27E6D-62BA-4030-BAC4-C0BDDB749AC5}']
  { getters & setters } 

    function get_Item(index: Int32): DNIControl;

  { methods } 

    ///<summary>
    ///  Removes an ActiveX control from the collection.
    ///</summary>
    ///  <param name="item">A control to remove.</param>
    procedure Remove(item: DNIControl);
    ///<summary>
    ///  Removes an ActiveX control stored at specified position from the collection.
    ///</summary>
    ///  <param name="index">Index of a control to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all controls from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Creates and adds a new control to the collection.
    ///</summary>
    ///  <param name="controlType">Type of a control to add.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created control <see cref="T:Aspose.Slides.IControl" />
    ///  .</returns>
    function AddControl(controlType: DNControlType; x: Single; y: Single; width: Single; height: Single): DNIControl;

  { propertys } 

    property Item[index: Int32]: DNIControl read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents collection of custom xml parts.
  ///</summary>
  [DNTypeName('Aspose.Slides.ICustomXmlPartCollection')]
  DNICustomXmlPartCollection = interface(DDN.mscorlib.DNICollection)
  ['{30B57539-3DC9-441C-A4CE-A8A15535854C}']
  { getters & setters } 

    function get_Item(index: Int32): DNICustomXmlPart;

  { methods } 

    ///<summary>
    ///  Adds new custom xml part.
    ///</summary>
    ///  <param name="xmlData">The xml data of new part to be added.</param>
    ///<returns>Created custom xml part.</returns>
    ///<exception cref="T:System.ArgumentNullException">xmlData is <c>null</c>.</exception><exception cref="T:System.ArgumentException">xmlData is empty or invalid.</exception>
    function Add(xmlData: TArray<Byte>): DNICustomXmlPart; overload;
    ///<summary>
    ///  Adds new custom xml part.
    ///</summary>
    ///  <param name="xmlString">The xml string of new part to be added.</param>
    ///<returns>Created custom xml part.</returns>
    ///<exception cref="T:System.ArgumentNullException">xmlString is <c>null</c>.</exception><exception cref="T:System.ArgumentException">xmlString is empty or xml-data is invalid.</exception>
    function Add(xmlString: string): DNICustomXmlPart; overload;
    ///<summary>
    ///  Adds new custom xml part.
    ///</summary>
    ///  <param name="inputStream">The inputStream with xml data of new part to be added.</param>
    ///<returns>Created custom xml part.</returns>
    ///<exception cref="T:System.ArgumentNullException">inputStream is <c>null</c>.</exception><exception cref="T:System.ArgumentException">Data in inputStream is empty or Sinvalid.</exception>
    function Add(inputStream: DDN.mscorlib.DNStream): DNICustomXmlPart; overload;
    ///<summary>
    ///  Removes custom xml part at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-index is equal to or greater than Count</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection.
    ///</summary>
    ///  <param name="item">The custom xml part to remove.</param>
    ///<exception cref="T:System.ArgumentNullException">item is <c>null</c>.</exception><returns><c>true</c> if item is successfully removed; otherwise, <c>false</c>.</returns>
    function Remove(item: DNICustomXmlPart): Boolean;
    ///<summary>
    ///  Removes all items from the collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNICustomXmlPart read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of digital signatures attached to a document.
  ///</summary>
  [DNTypeName('Aspose.Slides.IDigitalSignatureCollection')]
  DNIDigitalSignatureCollection = interface(DDN.mscorlib.DNICollection)
  ['{9E676F90-15AD-4F1B-AA52-9C5D1FFD911F}']
  { getters & setters } 

    function get_Item(index: Int32): DNIDigitalSignature;

  { methods } 

    ///<summary>
    ///  Adds the signature at the end of collection.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  DigitalSignature signature = new DigitalSignature("testsignature1.pfx", @"testpass1");
    ///  signature.Comments = "Aspose.Slides digital signing test.";
    ///  pres.DigitalSignatures.Add(signature);
    ///  pres.Save("SomePresentationSigned.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example><param name="digitalSignature">Signature to add.</param>
    procedure Add(digitalSignature: DNIDigitalSignature);
    ///<summary>
    ///  Removes the signature at the specified index.
    ///</summary>
    ///  <param name="index">Index of the signature that should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all signatures from collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIDigitalSignature read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of FontFallBack rules, defined by user
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontFallBackRulesCollection')]
  DNIFontFallBackRulesCollection = interface(DDN.mscorlib.DNICollection)
  ['{196A7474-558E-46CD-A24F-A4A2D34B56F3}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFontFallBackRule;

  { methods } 

    ///<summary>
    ///  Add a new FallBack rule to the end of the collection.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation ())
    ///  {
    ///  //Getting of empty or preinitialized rules collection from FontsManager
    ///  IFontFallBackRulesCollection rulesList = pres.FontsManager.FontFallBackRulesCollection;
    ///  //Adding of new rule to collection
    ///  rulesList.Add(new FontFallBackRule(0x400,0x4FF, "Times New Roman"));
    ///  }
    ///</code></example><param name="sourceRule">Specified rule for adding</param>
    procedure Add(sourceRule: DNIFontFallBackRule);
    ///<summary>
    ///  Removes the first occurrence of a specific FallBack rule from the collection.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation ())
    ///  {
    ///  //Getting of empty or preinitialized rules collection from FontsManager
    ///  IFontFallBackRulesCollection rulesList = pres.FontsManager.FontFallBackRulesCollection;
    ///  //Adding of several rules to collection
    ///  rulesList.Add(new FontFallBackRule(0x400,0x4FF, "Times New Roman"));
    ///  rulesList.Add(new FontFallBackRule(0x3040, 0x309F, "MS Mincho"));
    ///  //Retrieving of object of the first rule in collection
    ///  IFontFallBackRule firstRule = rulesList[0];
    ///  //Removing
    ///  rulesList.Remove (firstRule);
    ///  }
    ///</code></example><param name="targetRule">The rule to remove from the collection.</param>
    procedure Remove(targetRule: DNIFontFallBackRule);

  { propertys } 

    property Item[index: Int32]: DNIFontFallBackRule read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents collection of fonts substitution.
  ///</summary>
  [DNTypeName('Aspose.Slides.IFontSubstRuleCollection')]
  DNIFontSubstRuleCollection = interface(DDN.mscorlib.DNICollection)
  ['{43CAACCE-9C16-401A-BE9E-E3F9FCB941E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFontSubstRule;

  { methods } 

    ///<summary>
    ///  Adds the new font substitution rule to the collection
    ///</summary>
    ///  <param name="value">Font substitution rule <see cref="T:Aspose.Slides.IFontSubstRule" />
    ///</param>
    procedure Add(value: DNIFontSubstRule);
    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection.
    ///</summary>
    ///  <param name="value">The module to remove from the collection.</param>
    procedure Remove(value: DNIFontSubstRule);

  { propertys } 

    property Item[index: Int32]: DNIFontSubstRule read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Auxiliary generic collection interface.
  ///</summary>
  ///<typeparam name="T"></typeparam>
  [DNTypeName('Aspose.Slides.IGenericCollection`1')]
  DNIGenericCollection<T> = interface(DDN.mscorlib.DNICollection)
  ['{3E4BAE47-1B7D-447F-AF31-FD0A2D703634}']
  { getters & setters } 

    function get_AsICollection: DDN.mscorlib.DNICollection;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { propertys } 

    ///<summary>
    ///  Returns ICollection interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsICollection: DDN.mscorlib.DNICollection read get_AsICollection;
    ///<summary>
    ///  Returns IEnumerable interface.
    ///  Read-only <see cref="T:System.Collections.IEnumerable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of all layout slides in presentation.
  ///  Extends ILayoutSlideCollection interface with methods for adding/cloning
  ///  layout slides in context of uniting of the individual collections of master's layout slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGlobalLayoutSlideCollection')]
  DNIGlobalLayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{8D7B285A-144F-4B5E-866F-8DB4A5CDE2D6}']
  { getters & setters } 

    function get_AsILayoutSlideCollection: DNILayoutSlideCollection;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified layout slide to the presentation.
    ///</summary>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///<returns>Added slide.</returns>
    ///<remarks>
    ///  When cloning a layout between different presentations layout's master can be cloned too
    ///  to keep source formatting.
    ///  Internal registry is used to track automatically cloned masters to prevent creation of
    ///  multiple clones of the same master slide.
    ///  Manual cloning of master slides will be neither prevented nor registered.
    ///</remarks>
    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide; overload;
    ///<summary>
    ///  Adds a copy of a specified layout slide to the presentation.
    ///</summary>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///  <param name="destMaster">Master slide for a new layout.</param>
    ///<returns>Added slide.</returns>
    ///<remarks>
    ///  New layout will be linked with defined master in destination presentation.
    ///  So this is analogue of copy/paste with "Use Destination Theme" option in PowerPoint.
    ///</remarks>
    function AddClone(sourceLayout: DNILayoutSlide; destMaster: DNIMasterSlide): DNILayoutSlide; overload;
    ///<summary>
    ///  Adds a new layout slide to the presentation.
    ///</summary>
    ///  <param name="master">Master slide for a new layout.</param>
    ///  <param name="layoutType">
    ///  Layout type for a new layout.
    ///  Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
    ///  Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</param>
    ///  <param name="layoutName">
    ///  Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
    ///  If null parameter is passed then name genarated atomatically in regards to passed layout type
    ///  (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
    ///</param>
    ///<exception cref="T:System.NotImplementedException">
    ///  Thrown if unsupported value of parameter <paramref name="layoutType" />
    ///  is passed. Layout types that are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  Thrown if <paramref name="master" />
    ///  is null.
    ///</exception><exception cref="T:System.ArgumentException">
    ///  Thrown if <paramref name="master" />
    ///  belongs to the other presentation.
    ///</exception><exception cref="T:System.ArgumentException">
    ///  Thrown if layout name value <paramref name="layoutName" />
    ///  is already in use in
    ///  collection of the layouts of <paramref name="master" />
    ///  .
    ///</exception><remarks>
    ///  1) Added layout for value SlideLayoutType.Custom of <paramref name="layoutType" />
    ///  contains no placeholders and no shapes.
    ///  2) Analogue of this method is method <see cref="M:Aspose.Slides.IMasterLayoutSlideCollection.Add(Aspose.Slides.SlideLayoutType,System.String)" />
    ///  accessed with <see cref="P:Aspose.Slides.IMasterSlide.LayoutSlides" />
    ///  property.
    ///</remarks>
    ///<returns>Added slide.</returns>
    function Add(master: DNIMasterSlide; layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;

  { propertys } 

    ///<summary>
    ///  Returns ILayoutSlideCollection interface.
    ///  Read-only <see cref="T:Aspose.Slides.ILayoutSlideCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsILayoutSlideCollection: DNILayoutSlideCollection read get_AsILayoutSlideCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represnts a collection of gradient stops.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGradientStopCollection')]
  DNIGradientStopCollection = interface(DDN.mscorlib.DNICollection)
  ['{5C20EE95-8AED-43B7-86E9-AB2339FA932A}']
  { getters & setters } 

    function get_Item(index: Int32): DNIGradientStop;

  { methods } 

    ///<summary>
    ///  Creates the new gradient stop and adds it to the end of collection.
    ///</summary>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="color">Color of the new radient stop.</param>
    ///<returns>Index of the new gradient stop in the collection.</returns>
    function Add(position: Single; color: DDN.Aspose.Common.DNColor): DNIGradientStop; overload;
    ///<summary>
    ///  Creates the new gradient stop and adds it to the end of collection.
    ///</summary>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="presetColor">Color of the new radient stop.</param>
    ///<returns>Index of the new gradient stop in the collection.</returns>
    function Add(position: Single; presetColor: DNPresetColor): DNIGradientStop; overload;
    ///<summary>
    ///  Creates the new gradient stop and adds it to the end of collection.
    ///</summary>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="schemeColor">Color of the new radient stop.</param>
    ///<returns>Index of the new gradient stop in the collection.</returns>
    function Add(position: Single; schemeColor: DNSchemeColor): DNIGradientStop; overload;
    ///<summary>
    ///  Creates the new gradient stop and inserts it at the specified index to the collection.
    ///</summary>
    ///  <param name="index">Index in the collection where new gradient stop will be inserted.</param>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="color">Color of the new radient stop.</param>
    procedure Insert(index: Int32; position: Single; color: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates the new gradient stop and inserts it at the specified index to the collection.
    ///</summary>
    ///  <param name="index">Index in the collection where new gradient stop will be inserted.</param>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="presetColor">Color of the new radient stop.</param>
    procedure Insert(index: Int32; position: Single; presetColor: DNPresetColor); overload;
    ///<summary>
    ///  Creates the new gradient stop and inserts it at the specified index to the collection.
    ///</summary>
    ///  <param name="index">Index in the collection where new gradient stop will be inserted.</param>
    ///  <param name="position">Position of the new gradient stop.</param>
    ///  <param name="schemeColor">Color of the new radient stop.</param>
    procedure Insert(index: Int32; position: Single; schemeColor: DNSchemeColor); overload;
    ///<summary>
    ///  Removes a gradient stop at the specified index.
    ///</summary>
    ///  <param name="index">Index of a gradient stop that should be deleted.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all gradient stops from a collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIGradientStop read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of GradientStopDataEx objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.IGradientStopCollectionEffectiveData')]
  DNIGradientStopCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{A8A37F95-AD07-4D18-921D-6387DC01A6F7}']
  { getters & setters } 

    function get_Item(index: Int32): DNIGradientStopEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIGradientStopEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents collection of PPImage.
  ///</summary>
  [DNTypeName('Aspose.Slides.IImageCollection')]
  DNIImageCollection = interface(DDN.mscorlib.DNICollection)
  ['{D0E444A6-8D77-46E5-BE19-104D1FC2C968}']
  { getters & setters } 

    function get_Item(index: Int32): DNIPPImage;

  { methods } 

    ///<summary>
    ///  Add an image to a presentation.
    ///</summary>
    ///<remarks>This method converts WMF/EMF metafiles to raster PNG image before inserting to a presentation.</remarks>
    ///  <param name="image">Image to add.</param>
    ///<returns>Added image.</returns>
    function AddImage(image: DDN.Aspose.Common.DNImage): DNIPPImage; overload;
    ///<summary>
    ///  Adds image from a memory stream.
    ///</summary>
    ///  <param name="stream">Memory stream.</param>
    ///<returns>Added image.</returns>
    function AddImage(stream: DDN.mscorlib.DNMemoryStream): DNIPPImage; overload;
    ///<summary>
    ///  Add an image to a presentation from stream.
    ///</summary>
    ///<remarks>This method can add WMF/EMF metafiles to a presentation without converting them to raster PNG image.</remarks>
    ///  <param name="stream">Stream to add image from.</param>
    ///<returns>Added image.</returns>
    function AddImage(stream: DDN.mscorlib.DNStream): DNIPPImage; overload;
    ///<summary>
    ///  Creates and adds an image to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add image file from.</param>
    ///  <param name="loadingStreamBehavior">The behavior which will be applied to the stream.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.IPPImage" />
    ///  .</returns>
    function AddImage(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIPPImage; overload;
    ///<summary>
    ///  Adds an image to a presentation from specified buffer.
    ///</summary>
    ///  <param name="buffer">Buffer.</param>
    ///<returns>Added image.</returns>
    function AddImage(buffer: TArray<Byte>): DNIPPImage; overload;
    ///<summary>
    ///  Adds a copy of an image from an another presentation.
    ///</summary>
    ///  <param name="imageSource">Source image.</param>
    ///<returns>Added image.</returns>
    function AddImage(imageSource: DNIPPImage): DNIPPImage; overload;
    ///<summary>
    ///  Add an image to a presentation from SVG object.
    ///</summary>
    ///  <param name="svgImage">SVG image object <see cref="T:Aspose.Slides.ISvgImage" />
    ///</param>
    ///<returns>Added image.</returns>
    ///<exception cref="T:System.ArgumentNullException">Thrown when svgImage parameter is null.</exception>
    function AddImage(svgImage: DNISvgImage): DNIPPImage; overload;

  { propertys } 

    property Item[index: Int32]: DNIPPImage read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a base class for collection of a layout slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.ILayoutSlideCollection')]
  DNILayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{105CEE73-CEE2-4A11-895C-346B60C03923}']
  { getters & setters } 

    function get_Item(index: Int32): DNILayoutSlide;

  { methods } 

    ///<summary>
    ///  Returns the first layout slide of specified type.
    ///</summary>
    ///  <param name="type">A type of layout slide to find.</param>
    ///<returns><see cref="T:Aspose.Slides.ILayoutSlide" />
    ///  with specified type or null if no layouts found.</returns>
    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    ///<summary>
    ///  Removes a layout from the collection.
    ///</summary>
    ///  <param name="value">The layout slide to remove from the collection.</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if layout is used in presentation (its HasDependingSlides property is true).
    ///</exception><remarks>
    ///  1) To avoid throwing of the PptxEditException check layout's HasDependingSlides property before.
    ///  2) You can use also <see cref="M:Aspose.Slides.ILayoutSlide.Remove" />
    ///  method to simplify code.
    ///</remarks>
    procedure Remove(value: DNILayoutSlide);
    ///<summary>
    ///  Removes unused layout slides (layout slides whose HasDependingSlides is false).
    ///</summary>
    procedure RemoveUnused;

  { propertys } 

    property Item[index: Int32]: DNILayoutSlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collections of all layout slides of defined master slide.
  ///  Extends ILayoutSlideCollection interface with methods for adding/inserting/removing/cloning
  ///  layout slides in context of the individual collections of master's layout slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterLayoutSlideCollection')]
  DNIMasterLayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{922F7D7D-8DDC-4930-A6BE-3F0799B244B5}']
  { getters & setters } 

    function get_AsILayoutSlideCollection: DNILayoutSlideCollection;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified layout slide to the end of the collection.
    ///</summary>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///<returns>Added slide.</returns>
    ///<remarks>
    ///  1) New layout will be linked with parent master slide for this layout slides collection.
    ///  So this is analogue of copy/paste with "Use Destination Theme" option in PowerPoint.
    ///  2) Analogue of this method is method <see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide,Aspose.Slides.IMasterSlide)" />
    ///  accessed with <see cref="P:Aspose.Slides.IPresentation.LayoutSlides" />
    ///  property.
    ///</remarks>
    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide;
    ///<summary>
    ///  Inserts a copy of a specified layout slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceLayout">Slide to clone.</param>
    ///<remarks>
    ///  New layout will be linked with parent master slide for this layout slides collection.
    ///  So this is analogue of copy/paste with "Use Destination Theme" option in PowerPoint.
    ///</remarks>
    ///<returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceLayout: DNILayoutSlide): DNILayoutSlide;
    ///<summary>
    ///  Adds a new layout slide to the end of the collection.
    ///</summary>
    ///  <param name="layoutType">
    ///  Layout type for a new layout.
    ///  Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
    ///  Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</param>
    ///  <param name="layoutName">
    ///  Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
    ///  If null parameter is passed then name genarated atomatically in regards to passed layout type
    ///  (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
    ///</param>
    ///<exception cref="T:System.NotImplementedException">
    ///  Thrown if unsupported value of parameter <paramref name="layoutType" />
    ///  is passed. Layout types that are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</exception><exception cref="T:System.ArgumentException">
    ///  Thrown if layout name value <paramref name="layoutName" />
    ///  is already in use in
    ///  this collection of the layouts.
    ///</exception><remarks>
    ///  1) Added layout for value SlideLayoutType.Custom of <paramref name="layoutType" />
    ///  contains no placeholders and no shapes.
    ///  2) Analogue of this method is
    ///  method <see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.Add(Aspose.Slides.IMasterSlide,Aspose.Slides.SlideLayoutType,System.String)" />
    ///  accessed with <see cref="P:Aspose.Slides.IPresentation.LayoutSlides" />
    ///  property.
    ///</remarks>
    ///<returns>Added slide.</returns>
    function Add(layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;
    ///<summary>
    ///  Inserts a new layout slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="layoutType">
    ///  Layout type for a new layout.
    ///  Supported layout types: Title, TitleOnly, Blank, TitleAndObject, VerticalText, VerticalTitleAndText, TwoObjects, SectionHeader, TwoTextAndTwoObjects, TitleObjectAndCaption, PictureAndCaption, Custom.
    ///  Other layout types are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</param>
    ///  <param name="layoutName">
    ///  Name for a new layout. If passed name is already in use the ArgumentException will be thrown.
    ///  If null parameter is passed then name genarated atomatically in regards to passed layout type
    ///  (for example "Title Slide" or "1_Title Slide", "2_..", etc.).
    ///</param>
    ///<exception cref="T:System.NotImplementedException">
    ///  Thrown if unsupported value of parameter <paramref name="layoutType" />
    ///  is passed. Layout types that are not supported now: Text, TwoColumnText, Table, TextAndChart, ChartAndText, Diagram, Chart, TextAndClipArt, ClipArtAndText, TextAndObject, ObjectAndText, Object, TextAndMedia, MediaAndText, ObjectOverText, TextOverObject, TextAndTwoObjects, TwoObjectsAndText, TwoObjectsOverText, FourObjects, ClipArtAndVerticalText, VerticalTitleAndTextOverChart, ObjectAndTwoObject, TwoObjectsAndObject.
    ///</exception><exception cref="T:System.ArgumentException">
    ///  Thrown if layout name value <paramref name="layoutName" />
    ///  is already in use in
    ///  this collection of the layouts.
    ///</exception><remarks>
    ///  Inserted layout for value SlideLayoutType.Custom of <paramref name="layoutType" />
    ///  contains no placeholders and no shapes.
    ///</remarks>
    ///<returns>Inserted slide.</returns>
    function Insert(index: Int32; layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if layout is used in presentation (its HasDependingSlides property is true).
    ///</exception><remarks>
    ///  1) To avoid throwing of the PptxEditException check layout's HasDependingSlides property before.
    ///  2) You can use also <see cref="M:Aspose.Slides.ILayoutSlide.Remove" />
    ///  method to simplify code.
    ///</remarks>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Moves layout slide from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="layoutSlide">Slide to move.</param>
    procedure Reorder(index: Int32; layoutSlide: DNILayoutSlide);

  { propertys } 

    ///<summary>
    ///  Returns ILayoutSlideCollection interface.
    ///  Read-only <see cref="T:Aspose.Slides.ILayoutSlideCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsILayoutSlideCollection: DNILayoutSlideCollection read get_AsILayoutSlideCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of master slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.IMasterSlideCollection')]
  DNIMasterSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{24EF6679-3EF4-472C-A43A-955ED5EDA231}']
  { getters & setters } 

    function get_Item(index: Int32): DNIMasterSlide;

  { methods } 

    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection.
    ///</summary>
    ///  <param name="value">The master slide to remove from the collection.</param>
    procedure Remove(value: DNIMasterSlide);
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes unused master slides.
    ///</summary>
    ///  <param name="ignorePreserveField">Determines, whether this method should remove unused
    ///  master even if its <see cref="P:Aspose.Slides.IMasterSlide.Preserve" />
    ///  property is set to true.</param>
    procedure RemoveUnused(ignorePreserveField: Boolean);
    ///<summary>
    ///  Adds a copy of a specified master slide to the end of the collection.
    ///  Linked layout slides will be copied too.
    ///</summary>
    ///  <param name="sourceMaster">Slide to clone.</param>
    ///<returns>Added slide.</returns>
    function AddClone(sourceMaster: DNIMasterSlide): DNIMasterSlide;
    ///<summary>
    ///  Inserts a copy of a specified master slide to specified position of the collection.
    ///  Linked layout slides will be copied too.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceMaster">Slide to clone.</param>
    ///<returns>Inserted master slide.</returns>
    function InsertClone(index: Int32; sourceMaster: DNIMasterSlide): DNIMasterSlide;

  { propertys } 

    property Item[index: Int32]: DNIMasterSlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a row in a table.
  ///</summary>
  [DNTypeName('Aspose.Slides.IRow')]
  DNIRow = interface(DDN.mscorlib.DNICollection)
  ['{7A241DB4-03DE-4E61-BDB6-F39380D4F898}']
  { getters & setters } 

    function get_Height: Double;
    function get_MinimalHeight: Double;
    procedure set_MinimalHeight(value: Double);
    function get_RowFormat: DNIRowFormat;
    function get_AsICellCollection: DNICellCollection;
    function get_AsIBulkTextFormattable: DNIBulkTextFormattable;

  { propertys } 

    ///<summary>
    ///  Returns the height of a row.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  Returns or sets the minimal possible height of a row.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property MinimalHeight: Double read get_MinimalHeight write set_MinimalHeight;
    ///<summary>
    ///  Returns the RowFormat object that contains formatting properties for this row.
    ///  Read-only <see cref="T:Aspose.Slides.IRowFormat" />
    ///  .
    ///</summary>
    property RowFormat: DNIRowFormat read get_RowFormat;
    ///<summary>
    ///  Allows to get base ICellCollection interface.
    ///  Read-only <see cref="T:Aspose.Slides.ICellCollection" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsICellCollection: DNICellCollection read get_AsICellCollection;
    ///<summary>
    ///  Allows to get base IBulkTextFormattable interface.
    ///  Read-only <see cref="T:Aspose.Slides.IBulkTextFormattable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIBulkTextFormattable: DNIBulkTextFormattable read get_AsIBulkTextFormattable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents table row collection.
  ///</summary>
  [DNTypeName('Aspose.Slides.IRowCollection')]
  DNIRowCollection = interface(DDN.mscorlib.DNICollection)
  ['{0A6D0CA5-19E1-4EEC-838C-8B8363E9356E}']
  { getters & setters } 

    function get_Item(index: Int32): DNIRow;

  { methods } 

    ///<summary>
    ///  Creates a copy of the specified template row and inserts it at the bottom of a table.
    ///</summary>
    ///  <param name="templ">Row which is used as a template.</param>
    ///  <param name="withAttachedRows">True to copy also all rows attached to the template row.</param>
    ///<returns>Added rows.</returns>
    function AddClone(templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    ///<summary>
    ///  Creates a copy of the specified template row and insert it at the specified position in a table.
    ///</summary>
    ///  <param name="index">Index of a new row.</param>
    ///  <param name="templ">Row which is used as a template.</param>
    ///  <param name="withAttachedRows">True to copy also all rows attached to the template row.</param>
    ///<returns>Inserted rows.</returns>
    function InsertClone(index: Int32; templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    ///<summary>
    ///  Removes a row at the specified position from a table.
    ///</summary>
    ///  <param name="firstRowIndex">Index of a row to delete.</param>
    ///  <param name="withAttachedRows">True to delete also all attached rows.</param>
    procedure RemoveAt(firstRowIndex: Int32; withAttachedRows: Boolean);

  { propertys } 

    property Item[index: Int32]: DNIRow read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of sections.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISectionCollection')]
  DNISectionCollection = interface(DDN.mscorlib.DNICollection)
  ['{E7CF9D01-581E-4EEB-8C1C-01771550860A}']
  { getters & setters } 

    function get_Item(index: Int32): DNISection;

  { methods } 

    ///<summary>
    ///  Add new section started form specific slide.
    ///</summary>
    ///  <param name="name">Name of the section</param>
    ///  <param name="startedFromSlide">First slide of section</param>
    ///<returns>Added section.</returns>
    function AddSection(name: string; startedFromSlide: DNISlide): DNISection;
    ///<summary>
    ///  Add empty section to specified position of the collection.
    ///</summary>
    ///  <param name="name">Name of the section</param>
    ///  <param name="index">Index of new section.</param>
    ///<returns>Added section.</returns>
    function AddEmptySection(name: string; index: Int32): DNISection;
    ///<summary>
    ///  Remove section and slides contained in the section.
    ///</summary>
    ///  <param name="section">The section to remove from the collection.</param>
    procedure RemoveSectionWithSlides(section: DNISection);
    ///<summary>
    ///  Remove section. Slides contained in the section will be merged into previous section.
    ///</summary>
    ///  <param name="section">The section to remove from the collection.</param>
    procedure RemoveSection(section: DNISection);
    ///<summary>
    ///  Moves section and its slides from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="section">Section to move.</param>
    procedure ReorderSectionWithSlides(section: DNISection; index: Int32);
    ///<summary>
    ///  Add empty section to the end of the collection.
    ///</summary>
    ///  <param name="name">Name of the section</param>
    ///<returns>Added section.</returns>
    function AppendEmptySection(name: string): DNISection;
    ///<summary>
    ///  Returns an index of the specified section in the collection.
    ///</summary>
    ///  <param name="section">Section to find.</param>
    ///<returns>Index of a section or -1 if section not from this collection.</returns>
    function IndexOf(section: DNISection): Int32;
    ///<summary>
    ///  Removes all sections from the collection.
    ///</summary>
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNISection read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of a slides in the section.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISectionSlideCollection')]
  DNISectionSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{179F89BF-AC07-48D6-90AB-37D341A9335F}']
  { getters & setters } 

    function get_Item(index: Int32): DNISlide;

  { propertys } 

    property Item[index: Int32]: DNISlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of a shapes.
  ///</summary>
  [DNTypeName('Aspose.Slides.IShapeCollection')]
  DNIShapeCollection = interface(DDN.mscorlib.DNICollection)
  ['{20E97D2E-2BF3-4EF4-BC09-63B471DEE64F}']
  { getters & setters } 

    function get_Item(index: Int32): DNIShape;
    function get_ParentGroup: DNIGroupShape;

  { methods } 

    ///<summary>
    ///  Creates a new Chart, initialize it with sample series data and settings and adds
    ///  it to the end of the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///<returns>Created chart.</returns>
    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single): DNIChart; overload;
    ///<summary>
    ///  Creates a new Chart and adds it to the end of the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///  <param name="initWithSample">
    ///  If true then new chart will be initialized with sample series data and settings.
    ///  If false then new chart will have no series and minimum settings. In this case
    ///  chart creation will be more fast.
    ///</param>
    ///<returns>Created chart.</returns>
    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; initWithSample: Boolean): DNIChart; overload;
    ///<summary>
    ///  Add SmartArt diagram.
    ///</summary>
    ///  <param name="x">The X-coordinate for a left side of diagram's frame.</param>
    ///  <param name="y">The Y-coordinate for a left side of diagram's frame.</param>
    ///  <param name="width">The width of diagram's frame.</param>
    ///  <param name="height">The height of diagram's frame.</param>
    ///  <param name="layoutType">The type of SmartArt diagram</param>
    ///<returns>Create SmartArt diagram</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  Presentation pres = new Presentation();
    ///  Slide slide = pres.Slides[0];
    ///  SmartArt smart = slide.Shapes.AddSmartArt(0, 0, 400, 400, SmartArtLayoutType.BasicBlockList);
    ///</code><code>
    ///  [Visual Basic]
    ///  Private pres As New Presentation()
    ///  Private slide As Slide = pres.Slides(0)
    ///  Private smart As SmartArt = slide.Shapes.AddSmartArt(0, 0, 400, 400, SmartArtLayoutType.BasicBlockList)
    ///</code></example>
    function AddSmartArt(x: Single; y: Single; width: Single; height: Single; layoutType: DNSmartArtLayoutType): DNISmartArt;
    ///<summary>
    ///  Creates a new Chart, initialize it with sample series data and settings and inserts
    ///  it to the specified position in the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///  <param name="index">Chart's position in the collection.</param>
    ///<returns>Created chart.</returns>
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32): DNIChart; overload;
    ///<summary>
    ///  Creates a new Chart and inserts it to the specified position in the collection.
    ///</summary>
    ///  <param name="type">Type of chart.</param>
    ///  <param name="x">X coordinate of a new chart.</param>
    ///  <param name="y">Y coordinate of a new chart.</param>
    ///  <param name="width">Chart's width.</param>
    ///  <param name="height">Chart's height.</param>
    ///  <param name="index">Chart's position in the collection.</param>
    ///  <param name="initWithSample">
    ///  If true then new chart will be initialized with sample series data and settings.
    ///  If false then new chart will have no series and minimum settings. In this case
    ///  chart creation will be more fast.
    ///</param>
    ///<returns>Created chart.</returns>
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32; initWithSample: Boolean): DNIChart; overload;
    ///<summary>
    ///  Adds a new OLE object to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="dataInfo">Embedded data info <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///  .</param>
    ///<returns>Created OLE object.</returns>
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Adds a new OLE object to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="className">Name of an OLE class.</param>
    ///  <param name="path">path to the linked file.</param>
    ///<returns>Created OLE object.</returns>
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Creates a new OLE object and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which OLE object should be inserted.</param>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="dataInfo">Embedded data info <see cref="T:Aspose.Slides.IOleEmbeddedDataInfo" />
    ///  .</param>
    ///<returns>Created OLE object.</returns>
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Creates a new OLE object and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which OLE object should be inserted.</param>
    ///  <param name="x">X coordinate of a new OLE frame.</param>
    ///  <param name="y">Y coordinate of a new OLE frame.</param>
    ///  <param name="width">Width of a new OLE frame.</param>
    ///  <param name="height">Height of a new OLE frame.</param>
    ///  <param name="className">Name of an OLE class.</param>
    ///  <param name="path">Path to the linked file.</param>
    ///<returns>Created OLE object.</returns>
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    ///<summary>
    ///  Adds a new Zoom object to the end of a collection.
    ///</summary>
    ///<example>
    ///  This example demonstrates adding a Zoom object to the end of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1]);
    ///  }
    ///</code></example><param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    ///<summary>
    ///  Adds a new Zoom object to the end of a collection.
    ///</summary>
    ///<example>
    ///  This example demonstrates adding a Zoom object to the end of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.AddZoomFrame(150, 20, 50, 50, pres.Slides[1], image);
    ///  }
    ///</code></example><param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///  <param name="image">The image for the referenced slide <see cref="T:Aspose.Slides.IPPImage" />
    ///</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    ///<summary>
    ///  Creates a new Zoom object and inserts it to a collection at the specified index.
    ///</summary>
    ///<example>
    ///  This example demonstrates creation and inserting a Zoom object at the specified index of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.InsertZoomFrame(2, 150, 20, 50, 50, pres.Slides[1]);
    ///  }
    ///</code></example><param name="index">The zero-based index at which Zoom frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    ///<summary>
    ///  Creates a new Zoom object and inserts it to a collection at the specified index.
    ///</summary>
    ///<example>
    ///  This example demonstrates creation and inserting a Zoom object at the specified index of a collection
    ///  (assume that there are at least two slides in the "Presentation.pptx" presentation):
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("Presentation.pptx"))
    ///  {
    ///  IPPImage image = pres.Images.AddImage(Image.FromFile("image.png"));
    ///  IZoomFrame zoomFrame = pres.Slides[0].Shapes.InsertZoomFrame(2, 150, 20, 50, 50, pres.Slides[1], image);
    ///  }
    ///</code></example><param name="index">The zero-based index at which Zoom frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="y">Y coordinate of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="width">Width of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="height">Height of a new Zoom frame <see cref="T:System.Single" />
    ///  .</param>
    ///  <param name="slide">The slide object referenced by the Zoom frame <see cref="T:Aspose.Slides.ISlide" />
    ///  .</param>
    ///  <param name="image">The image for the referenced slide <see cref="T:Aspose.Slides.IPPImage" />
    ///</param>
    ///<returns>Created Zoom object <see cref="T:Aspose.Slides.IZoomFrame" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Referenced slide does not belong to the current presentation.</exception>
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    ///<summary>
    ///  Adds a new video frame to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new video frame.</param>
    ///  <param name="y">Y coordinate of a new video frame.</param>
    ///  <param name="width">Width of a new video frame.</param>
    ///  <param name="height">Height of a new video frame.</param>
    ///  <param name="fname">Video file name.</param>
    ///<returns>Created VideoFrame object.</returns>
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame; overload;
    ///<summary>
    ///  Adds a new video frame to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new video frame.</param>
    ///  <param name="y">Y coordinate of a new video frame.</param>
    ///  <param name="width">Width of a new video frame.</param>
    ///  <param name="height">Height of a new video frame.</param>
    ///  <param name="video">Video.</param>
    ///<returns>Created VideoFrame object.</returns>
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; video: DNIVideo): DNIVideoFrame; overload;
    ///<summary>
    ///  Creates a new video frame and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which video frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new video frame.</param>
    ///  <param name="y">Y coordinate of a new video frame.</param>
    ///  <param name="width">Width of a new video frame.</param>
    ///  <param name="height">Height of a new video frame.</param>
    ///  <param name="fname">Video file name.</param>
    ///<returns>Created VideoFrame object.</returns>
    function InsertVideoFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame;
    ///<summary>
    ///  Adds an AudioFrame with CD to the end of collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameCD(x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    ///<summary>
    ///  Insert an AudioFrame with CD.
    ///</summary>
    ///  <param name="index">The zero-based index at which video frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameCD(index: Int32; x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    ///<summary>
    ///  Adds a new audio frame with linked audio file to the end of a collection.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="fname">Audio file name.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameLinked(x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    ///<summary>
    ///  Creates a new audio frame with linked audio file and inserts it to a collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which audio frame should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="fname">Audio file name.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameLinked(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    ///<summary>
    ///  Adds a new audio frame with embedded audio file to the end of a collection.
    ///  Embedded audio file can be a WAV only.
    ///  It adds new audio into Presentation.Audios list.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio_stream">Inout stream with audio data.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    ///<summary>
    ///  Adds a new audio frame with embedded audio file to the end of a collection.
    ///  It uses audio file from Presentation.Audios list.
    ///</summary>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio">Audio from Presentation.Audios list.</param>
    ///<returns>Created AudioFrame object.</returns>
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    ///<summary>
    ///  Insert an AudioFrame with embedded audio file.
    ///  Embedded audio file sound can be a WAV only.
    ///  It adds new audio into Presentation.Audios list.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio_stream">Audio stream.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    ///<summary>
    ///  Insert an AudioFrame with embedded audio file.
    ///  It uses audio file from Presentation.Audios list.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="x">X coordinate of a new audio frame.</param>
    ///  <param name="y">Y coordinate of a new audio frame.</param>
    ///  <param name="width">Width of a new audio frame.</param>
    ///  <param name="height">Height of a new audio frame.</param>
    ///  <param name="audio">Audio from Presentation.Audios list.</param>
    ///<returns>Created AudioFrame object.</returns>
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    ///<summary>
    ///  Returns the zero-based index of the first occurrence of a shape in the collection.
    ///</summary>
    ///  <param name="shape">The shape to locate in the collection.</param>
    ///<returns>The zero-based index of the first occurrence of shape within
    ///  the collection, if found; otherwise, -1.</returns>
    function IndexOf(shape: DNIShape): Int32;
    ///<summary>
    ///  Creates and returns an array with all shapse in it.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.IShape" />
    ///</returns>
    function ToArray: TArray<DNIShape>; overload;
    ///<summary>
    ///  Creates and returns an array with all shapes from the specified range in it.
    ///</summary>
    ///  <param name="startIndex">An index of a first shape to return.</param>
    ///  <param name="count">A number of shapes to return.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.IShape" />
    ///</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIShape>; overload;
    ///<summary>
    ///  Moves a shape from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="shape">Shape to move.</param>
    procedure Reorder(index: Int32; shape: DNIShape); overload;
    ///<summary>
    ///  Moves shapes from the collection to the specified position.
    ///  Shapes will be placed starting from index in order they appear in list.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="shapes">Shapes to move.</param>
    procedure Reorder(index: Int32; shapes: TArray<DNIShape>); overload;
    ///<summary>
    ///  Creates a new AutoShape, tunes it from default template and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created AutoShape object.</returns>
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new AutoShape and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>Created AutoShape object.</returns>
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new AutoShape of the type Rectangle to host mathematical content inside and adds it to the end of the collection.
    ///</summary>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created AutoShape object.</returns>
    function AddMathShape(x: Single; y: Single; width: Single; height: Single): DNIAutoShape;
    ///<summary>
    ///  Creates a new AutoShape, tunes it from default template and inserts it to
    ///  the collection at the specified index.
    ///  Note: the type of the shape will be determined by the shapeType parameter.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created AutoShape object.</returns>
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new AutoShape and inserts it to the collection at the specified index.
    ///  Note: the type of the shape will be determined by the shapeType parameter.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>Created AutoShape object.</returns>
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    ///<summary>
    ///  Creates a new GroupShape and adds it to the end of the collection.
    ///  GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
    ///</summary>
    ///<returns>Created GroupShape object.</returns>
    function AddGroupShape: DNIGroupShape; overload;
    ///<summary>
    ///  Creates a new GroupShape, fills it with converted shapes from SVG and adds it to the end of the collection.
    ///</summary>
    ///  <param name="svgImage">Svg image object <see cref="T:Aspose.Slides.ISvgImage" />
    ///</param>
    ///  <param name="x">The X coordinate for the left side of the shape group frame.</param>
    ///  <param name="y">The Y coordinate for the top side of the shape group frame.</param>
    ///  <param name="width">The width of the group of the shape group frame.</param>
    ///  <param name="height">The height of a group of the shape group frame.</param>
    ///<returns>Created GroupShape object.</returns>
    function AddGroupShape(svgImage: DNISvgImage; x: Single; y: Single; width: Single; height: Single): DNIGroupShape; overload;
    ///<summary>
    ///  Creates a new GroupShape and inserts it to the collection at the specified index.
    ///  GroupShape frame size and position will be fitted to content when new shape will be added into the GroupShape.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///<returns>Created GroupShape object.</returns>
    function InsertGroupShape(index: Int32): DNIGroupShape;
    ///<summary>
    ///  Creates a new Connector, tunes it from default template and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>The zero-based index of the created shape.</returns>
    ///<returns>Created Connector object.</returns>
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    ///<summary>
    ///  Creates a new Connector and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType">The <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>The zero-based index of the created shape.</returns>
    ///<returns>Created Connector object.</returns>
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    ///<summary>
    ///  Creates a new Connector, tunes it from default template and inserts it to
    ///  the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///<returns>Created Connector object.</returns>
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    ///<summary>
    ///  Creates a new Connector and inserts it to the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType">An <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shape.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="createFromTemplate">
    ///  If true then new shape will be tuned from default template. Not empty name,
    ///  simple style, text centered will be assined to the new shape.
    ///  If false then all values of the properties of the new shape will have default values.
    ///</param>
    ///<returns>Created Connector object.</returns>
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    ///<summary>
    ///  Creates a new PictureFrame and adds it to the end of the collection.
    ///</summary>
    ///  <param name="shapeType"><para>The shape contained in the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shapes, except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para></param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="image">The image of picture frame.</param>
    ///<returns>Created PictureFrame object.</returns>
    function AddPictureFrame(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    ///<summary>
    ///  Creates a new PictureFrame and inserts it to the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="shapeType"><para>The shape contained in the set <see cref="T:Aspose.Slides.ShapeType" />
    ///  of shapes, except all sorts of lines:</para><para>    ShapeType.Line,</para><para>    ShapeType.StraightConnector1,</para><para>    ShapeType.BentConnector2,</para><para>    ShapeType.BentConnector3,</para><para>    ShapeType.BentConnector4,</para><para>    ShapeType.BentConnector5,</para><para>    ShapeType.CurvedConnector2,</para><para>    ShapeType.CurvedConnector3,</para><para>    ShapeType.CurvedConnector4,</para><para>    ShapeType.CurvedConnector5.</para></param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="width">The width of shape's frame.</param>
    ///  <param name="height">The height of shape's frame.</param>
    ///  <param name="image">The image of picture frame.</param>
    ///<returns>Created PictureFrame object.</returns>
    function InsertPictureFrame(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    ///<summary>
    ///  Creates a new Table and adds it to the end of the collection.
    ///</summary>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="columnWidths">Array of doubles which represents widths of columns in the table.</param>
    ///  <param name="rowHeights">Array of doubles which represents heights of rows in the table.</param>
    ///<returns>Created Table object.</returns>
    function AddTable(x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    ///<summary>
    ///  Creates a new Table and inserts it to the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value should be inserted.</param>
    ///  <param name="x">The X-coordinate for a left side of shape's frame.</param>
    ///  <param name="y">The Y-coordinate for a top side of shape's frame.</param>
    ///  <param name="columnWidths">Array of doubles which represents widths of columns in the table.</param>
    ///  <param name="rowHeights">Array of doubles which represents heights of rows in the table.</param>
    ///<returns>Created Table object.</returns>
    function InsertTable(index: Int32; x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes the first occurrence of a specific shape from the collection.
    ///</summary>
    ///  <param name="shape">The shape to remove from the collection.</param>
    procedure Remove(shape: DNIShape);
    ///<summary>
    ///  Removes all shapes from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Adds a copy of a specified shape to the end of the collection.
    ///</summary>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///  <param name="width">Width of a new shape.</param>
    ///  <param name="height">Height of a new shape.</param>
    ///<returns>New shape.</returns>
    function AddClone(sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    ///<summary>
    ///  Adds a copy of a specified shape to the end of the collection.
    ///  Width and Height of the new shape are equal to Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///<returns>New shape.</returns>
    function AddClone(sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    ///<summary>
    ///  Adds a copy of a specified shape to the end of the collection.
    ///  X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///<returns>New shape.</returns>
    function AddClone(sourceShape: DNIShape): DNIShape; overload;
    ///<summary>
    ///  Inserts a copy of a specified shape to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new shape.</param>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///  <param name="width">Width of a new shape.</param>
    ///  <param name="height">Height of a new shape.</param>
    ///<returns>Inserted shape.</returns>
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    ///<summary>
    ///  Inserts a copy of a specified shape to specified position of the collection.
    ///  Width and Height of the new shape are equal to Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="index">Index of new shape.</param>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///  <param name="x">X coordinate of a new shape.</param>
    ///  <param name="y">Y coordinate of a new shape.</param>
    ///<returns>Inserted shape.</returns>
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    ///<summary>
    ///  Inserts a copy of a specified shape to specified position of the collection.
    ///  X, Y, Width and Height of the new shape are equal to X, Y, Width and Height of the <paramref name="sourceShape" />
    ///  .
    ///</summary>
    ///  <param name="index">Index of new shape.</param>
    ///  <param name="sourceShape">Shape to clone.</param>
    ///<returns>Inserted shape.</returns>
    function InsertClone(index: Int32; sourceShape: DNIShape): DNIShape; overload;

  { propertys } 

    property Item[index: Int32]: DNIShape read get_Item; default;
    ///<summary>
    ///  Returns parent GroupShape object for a shapes collection.
    ///  Read-only <see cref="T:Aspose.Slides.IGroupShape" />
    ///  .
    ///</summary>
    property ParentGroup: DNIGroupShape read get_ParentGroup;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of a slides.
  ///</summary>
  [DNTypeName('Aspose.Slides.ISlideCollection')]
  DNISlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{F2375DC3-1D00-4E39-8E6C-0FC7FB011474}']
  { getters & setters } 

    function get_Item(index: Int32): DNISlide;

  { methods } 

    ///<summary>
    ///  Adds a copy of a specified slide to the end of the collection.
    ///</summary>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///<returns>New slide.</returns>
    ///<remarks>
    ///  When cloning a slide between different presentations slide's master can be cloned too.
    ///  Internal registry is used to track automatically cloned masters to prevent creation of
    ///  multiple clones of the same master slide.
    ///  Manual cloning of master slides will be neither prevented nor registered.
    ///  If you need more control over cloning process use
    ///<see cref="M:Aspose.Slides.ISlideCollection.AddClone(Aspose.Slides.ISlide,Aspose.Slides.ILayoutSlide)" />
    ///  or
    ///<see cref="M:Aspose.Slides.ISlideCollection.AddClone(Aspose.Slides.ISlide,Aspose.Slides.IMasterSlide,System.Boolean)" />
    ///  for cloning slides,
    ///<see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide)" />
    ///  or
    ///<see cref="M:Aspose.Slides.IGlobalLayoutSlideCollection.AddClone(Aspose.Slides.ILayoutSlide,Aspose.Slides.IMasterSlide)" />
    ///  for cloning layouts and
    ///<see cref="M:Aspose.Slides.IMasterSlideCollection.AddClone(Aspose.Slides.IMasterSlide)" />
    ///  for cloning masters.
    ///</remarks>
    function AddClone(sourceSlide: DNISlide): DNISlide; overload;
    ///<summary>
    ///  Adds a copy of a specified slide to the end of the specified section.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (IPresentation presentation = new Presentation())
    ///  {
    ///  presentation.Slides[0].Shapes.AddAutoShape(ShapeType.Rectangle, 200, 50, 300, 100);
    ///  presentation.Sections.AddSection("Section 1", presentation.Slides[0]);
    ///  ISection section2 = presentation.Sections.AppendEmptySection("Section 2");
    ///  presentation.Slides.AddClone(presentation.Slides[0], section2);
    ///  // Now the second section contains a copy of the first slide.
    ///  }
    ///</code></example><param name="sourceSlide">Slide to clone.</param>
    ///  <param name="section">Section for a new slide.</param>
    ///<returns>New slide.</returns>
    ///<exception cref="T:System.ArgumentNullException" />
    ///<exception cref="T:Aspose.Slides.PptxEditException" />
    function AddClone(sourceSlide: DNISlide; section: DNISection): DNISlide; overload;
    ///<summary>
    ///  Inserts a copy of a specified slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///<remarks>
    ///  When cloning a slide between different presentations slide's master can be cloned too.
    ///  Internal registry is used to track automatically cloned masters to prevent creation of multiple clones of the same master slide.
    ///  Manual cloning of master slides will be neither prevented nor registered.
    ///  If you need more control over cloning process use
    ///<see cref="M:Aspose.Slides.ISlideCollection.InsertClone(System.Int32,Aspose.Slides.ISlide,Aspose.Slides.ILayoutSlide)" />
    ///  or
    ///<see cref="M:Aspose.Slides.ISlideCollection.InsertClone(System.Int32,Aspose.Slides.ISlide,Aspose.Slides.IMasterSlide,System.Boolean)" />
    ///  for cloning slides and
    ///<see cref="M:Aspose.Slides.IMasterSlideCollection.AddClone(Aspose.Slides.IMasterSlide)" />
    ///  for cloning masters.
    ///</remarks>
    ///<returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceSlide: DNISlide): DNISlide; overload;
    ///<summary>
    ///  Adds a new empty slide to the end of the collection.
    ///</summary>
    ///  <param name="layout">Layout for a slide.</param>
    ///<returns>Added slide.</returns>
    function AddEmptySlide(layout: DNILayoutSlide): DNISlide;
    ///<summary>
    ///  Inserts a copy of a specified slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of a new slide.</param>
    ///  <param name="layout">Layout for a slide.</param>
    ///<returns>Inserted slide.</returns>
    function InsertEmptySlide(index: Int32; layout: DNILayoutSlide): DNISlide;
    ///<summary>
    ///  Adds a copy of a specified slide to the end of the collection.
    ///</summary>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destLayout">Layout slide for a new slide.</param>
    ///<returns>New slide.</returns>
    function AddClone(sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    ///<summary>
    ///  Inserts a copy of a specified slide to specified position of the collection.
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destLayout">Layout slide for a new slide.</param>
    ///<returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    ///<summary>
    ///  Adds a copy of a specified source slide to the end of the collection.
    ///  Appropriate layout will be selected automatically from the specified
    ///  master (appropriate layout is the layout with the same Type or Name as
    ///  of layout of the source slide). If there is no appropriate layout then
    ///  layout of the source slide will be cloned (if allowCloneMissingLayout
    ///  is true) or PptxEditException will be thrown (if allowCloneMissingLayout
    ///  is false).
    ///</summary>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destMaster">Master slide for a new slide.</param>
    ///  <param name="allowCloneMissingLayout">
    ///  If there is no appropriate layout in specified master then layout of the
    ///  source slide will be cloned (if allowCloneMissingLayout is true) or
    ///  PptxEditException will be thrown (if allowCloneMissingLayout is false).
    ///</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if there is no appropriate layout in specified master and
    ///  allowCloneMissingLayout is false.
    ///</exception><returns>New slide.</returns>
    function AddClone(sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    ///<summary>
    ///  Inserts a copy of a specified source slide to specified position of the collection.
    ///  Appropriate layout will be selected automatically from the specified
    ///  master (appropriate layout is the layout with the same Type or Name as
    ///  of layout of the source slide). If there is no appropriate layout then
    ///  layout of the source slide will be cloned (if allowCloneMissingLayout
    ///  is true) or PptxEditException will be thrown (if allowCloneMissingLayout
    ///  is false).
    ///</summary>
    ///  <param name="index">Index of new slide.</param>
    ///  <param name="sourceSlide">Slide to clone.</param>
    ///  <param name="destMaster">Master slide for a new slide.</param>
    ///  <param name="allowCloneMissingLayout">
    ///  If there is no appropriate layout in specified master then layout of the
    ///  source slide will be cloned (if allowCloneMissingLayout is true) or
    ///  PptxEditException will be thrown (if allowCloneMissingLayout is false).
    ///</param>
    ///<exception cref="T:Aspose.Slides.PptxEditException">
    ///  Thrown if there is no appropriate layout in specified master and
    ///  allowCloneMissingLayout is false.
    ///</exception><returns>Inserted slide.</returns>
    function InsertClone(index: Int32; sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection.
    ///</summary>
    ///  <param name="value">The slide to remove from the collection.</param>
    procedure Remove(value: DNISlide);
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException" />
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Creates and returns an array with all slides in it.
    ///</summary>
    ///<returns>Array of <see cref="T:Aspose.Slides.ISlide" />
    ///</returns>
    function ToArray: TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates and returns an array with all slides from the specified range in it.
    ///</summary>
    ///  <param name="startIndex">An index of a first slide to add.</param>
    ///  <param name="count">A number of slides to add.</param>
    ///<returns>Array of <see cref="T:Aspose.Slides.ISlide" />
    ///</returns>
    function ToArray(startIndex: Int32; count: Int32): TArray<DNISlide>; overload;
    ///<summary>
    ///  Moves slide from the collection to the specified position.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="slide">Slide to move.</param>
    procedure Reorder(index: Int32; slide: DNISlide); overload;
    ///<summary>
    ///  Moves slides from the collection to the specified position.
    ///  Slides will be placed starting from index in order they appear in list.
    ///</summary>
    ///  <param name="index">Target index.</param>
    ///  <param name="slides">Slides to move.</param>
    procedure Reorder(index: Int32; slides: TArray<DNISlide>); overload;
    ///<summary>
    ///  Returns an index of the specified slide in the collection.
    ///</summary>
    ///  <param name="slide">Slide to find.</param>
    ///<returns>Index of a slide or -1 if slide not from this collection.</returns>
    function IndexOf(slide: DNISlide): Int32;
    ///<summary>
    ///  Creates slides from the PDF document and adds them to the end of the collection.
    ///</summary>
    ///  <param name="path">A path to the PDF document</param>
    ///<returns>Added slides</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  pres.Slides.AddFromPdf("document.pdf");
    ///  pres.Save("fromPdfDocument.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function AddFromPdf(path: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from the PDF document and adds them to the end of the collection.
    ///</summary>
    ///  <param name="pdfStream">A stream which will be used as a source of the PDF document</param>
    ///<returns>Added slides</returns>
    ///<example>Example:
    ///<code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation())
    ///  {
    ///  using (Stream stream = new FileStream("document.pdf", FileMode.Open, FileAccess.Read, FileShare.Read))
    ///  {
    ///  pres.Slides.AddFromPdf(stream);
    ///  }
    ///  pres.Save("fromPdfDocument.pptx", SaveFormat.Pptx);
    ///  }
    ///</code></example>
    function AddFromPdf(pdfStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlText">Html to add.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function AddFromHtml(htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlText">Html to add.</param>
    ///<returns>Added slides</returns>
    function AddFromHtml(htmlText: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and adds them to the end of the collection.
    ///</summary>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlText">Html to add.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function InsertFromHtml(index: Int32; htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlText">Html to add.</param>
    ///<returns>Added slides</returns>
    function InsertFromHtml(index: Int32; htmlText: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlReader">TextReader object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///  <param name="resolver">A callback object used to fetch external objects. If this parameter is null all external objects will be ignored.</param>
    ///  <param name="uri">An URI of the specified HTML. Used to resolve relative links.</param>
    ///<returns>Added slides.</returns>
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    ///<summary>
    ///  Creates slides from HTML text and inserts them to the collection at the specified position.
    ///</summary>
    ///  <param name="index">Position to insert.</param>
    ///  <param name="htmlStream">A Stream object which will be used as a source of a HTML file.</param>
    ///<returns>Added slides</returns>
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;

  { propertys } 

    property Item[index: Int32]: DNISlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of tabs.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITabCollection')]
  DNITabCollection = interface(DDN.mscorlib.DNICollection)
  ['{48595E9A-14CE-40EC-BF66-0AA0F1617A03}']
  { getters & setters } 

    function get_Item(index: Int32): DNITab;

  { methods } 

    ///<summary>
    ///  Adds a Tab to the collection.
    ///</summary>
    ///  <param name="position">Tab position.</param>
    ///  <param name="align">Tab alignment.</param>
    ///<returns>Added tab.</returns>
    function Add(position: Double; align: DNTabAlignment): DNITab; overload;
    ///<summary>
    ///  Adds a Tab to the collection.
    ///</summary>
    ///  <param name="value">The Tab object to be added at the end of the collection.</param>
    ///<returns>The index at which the tab was added.</returns>
    function Add(value: DNITab): Int32; overload;
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the element at the specified index of the collection.
    ///</summary>
    ///  <param name="index">The zero-based index of the element to remove.</param>
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNITab read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents the collection of tags (user defined pairs of strings)
  ///</summary>
  [DNTypeName('Aspose.Slides.ITagCollection')]
  DNITagCollection = interface(DDN.mscorlib.DNICollection)
  ['{D9E9797F-D2E0-4D42-A802-69F41F347DF1}']
  { getters & setters } 

    function get_Item(name: string): string;
    procedure set_Item(name: string; value: string);

  { methods } 

    ///<summary>
    ///  Adds a new tag to collection.
    ///</summary>
    ///  <param name="name">The name of the tag.</param>
    ///  <param name="value">The value of the tag.</param>
    ///<returns>The index of the added tag.</returns>
    function Add(name: string; value: string): Int32;
    ///<summary>
    ///  Removes the tag with a specified name from the collection.
    ///</summary>
    ///  <param name="name">The name of tag to remove.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Returns the zero-based index of the specified key in the collection.
    ///</summary>
    ///  <param name="name">The name to locate in the collection.</param>
    ///<returns>The zero-based index of key, if key is found in the collection; otherwise, -1.</returns>
    function IndexOfName(name: string): Int32;
    ///<summary>
    ///  Determines whether the collection contains a specific name.
    ///</summary>
    ///  <param name="name">The key to locate.</param>
    ///<returns>True if the collection contains an tag with the specified key; otherwise, false.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Removes the tag at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the tag to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all tags from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns value of a tag at the specified index.
    ///</summary>
    ///  <param name="index">Index of a tag to return.</param>
    ///<returns>Value of a tag.</returns>
    function GetValueByIndex(index: Int32): string;
    ///<summary>
    ///  Returns key of a tag at the specified index.
    ///</summary>
    ///  <param name="index">Index of a tag to return.</param>
    ///<returns>Key of a tag.</returns>
    function GetNameByIndex(index: Int32): string;
    ///<summary>
    ///  Returns names of tags.
    ///</summary>
    ///<returns>Names of tags.</returns>
    function GetNamesOfTags: TArray<string>;

  { propertys } 

    property Item[name: string]: string read get_Item write set_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a collection of Video objects.
  ///</summary>
  [DNTypeName('Aspose.Slides.IVideoCollection')]
  DNIVideoCollection = interface(DDN.mscorlib.DNICollection)
  ['{E77746A2-E55F-487F-A4B0-589345A78E3A}']
  { getters & setters } 

    function get_Item(index: Int32): DNIVideo;

  { methods } 

    ///<summary>
    ///  Adds a copy of an video file from an another presentation.
    ///</summary>
    ///  <param name="video">Source video.</param>
    ///<returns>Added video.</returns>
    function AddVideo(video: DNIVideo): DNIVideo; overload;
    ///<summary>
    ///  Creates and adds a video to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add video file from.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.IVideo" />
    ///  .</returns>
    function AddVideo(stream: DDN.mscorlib.DNStream): DNIVideo; overload;
    ///<summary>
    ///  Creates and adds a video to a presentation from stream.
    ///</summary>
    ///  <param name="stream">Stream to add video file from.</param>
    ///  <param name="loadingStreamBehavior">The behavior which will be applied to the stream.</param>
    ///<returns>Added <see cref="T:Aspose.Slides.IVideo" />
    ///  .</returns>
    function AddVideo(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIVideo; overload;
    ///<summary>
    ///  Creates and adds a video to a presentation from byte array.
    ///</summary>
    ///  <param name="videoData">Video bytes.</param>
    ///<returns>Added video.</returns>
    function AddVideo(videoData: TArray<Byte>): DNIVideo; overload;

  { propertys } 

    property Item[index: Int32]: DNIVideo read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents a collection of SmartArt nodes.
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtNodeCollection')]
  DNISmartArtNodeCollection = interface(DDN.mscorlib.DNICollection)
  ['{875ECF0D-327E-41C5-B697-C9DA54B5B8E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNISmartArtNode;

  { methods } 

    ///<summary>
    ///  Add new node or sub node.
    ///</summary>
    ///<returns>Added node</returns>
    function AddNode: DNISmartArtNode;
    ///<summary>
    ///  Remove node or sub node by index.
    ///</summary>
    ///  <param name="index">Zero-based index of node</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  -or- index is equal to or greater than siblings count.</exception>
    procedure RemoveNode(index: Int32); overload;
    ///<summary>
    ///  Remove node or sub node.
    ///</summary>
    ///  <param name="nodeObj">Node to remove.</param>
    procedure RemoveNode(nodeObj: DNISmartArtNode); overload;
    ///<summary>
    ///  Add new node in the selected position of nodes collection.
    ///</summary>
    ///  <param name="position">Zero-base node position.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException">position is less than 0.</exception><returns>Added node</returns>
    function AddNodeByPosition(position: Int32): DNISmartArtNode;

  { propertys } 

    property Item[index: Int32]: DNISmartArtNode read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  ///<summary>
  ///  Represents a collection of SmartArt shapes
  ///</summary>
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtShapeCollection')]
  DNISmartArtShapeCollection = interface(DDN.mscorlib.DNICollection)
  ['{8C489B44-B181-4618-884D-F8D5FFC372F5}']
  { getters & setters } 

    function get_Item(index: Int32): DNISmartArtShape;

  { propertys } 

    property Item[index: Int32]: DNISmartArtShape read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents a collection of effect styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IEffectStyleCollection')]
  DNIEffectStyleCollection = interface(DDN.mscorlib.DNICollection)
  ['{E398A77E-D8E9-44A3-9B04-6B386638661C}']
  { getters & setters } 

    function get_Item(index: Int32): DNIEffectStyle;

  { propertys } 

    property Item[index: Int32]: DNIEffectStyle read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object that represents a readonly collection of effective effect styles.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.Theme.IFormatSchemeEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IEffectStyleCollectionEffectiveData')]
  DNIEffectStyleCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{AD7BA6EA-9EB0-47A1-9C58-D56B8C22C942}']
  { getters & setters } 

    function get_Item(index: Int32): DNIEffectStyleEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIEffectStyleEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents a collection of additional color schemes.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IExtraColorSchemeCollection')]
  DNIExtraColorSchemeCollection = interface(DDN.mscorlib.DNICollection)
  ['{0C1CA0D5-DC56-46AF-9139-8FB464076BDA}']
  { getters & setters } 

    function get_Item(index: Int32): DNIExtraColorScheme;

  { propertys } 

    property Item[index: Int32]: DNIExtraColorScheme read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents the collection of fill styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.IFillFormatCollection')]
  DNIFillFormatCollection = interface(DDN.mscorlib.DNICollection)
  ['{23581E97-1388-48A8-BD01-63AC009FB199}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFillFormat;

  { propertys } 

    property Item[index: Int32]: DNIFillFormat read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object that represents a readonly collection of effective fill formats.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.Theme.IFormatSchemeEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.IFillFormatCollectionEffectiveData')]
  DNIFillFormatCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{8DDC2E01-14C2-4203-90D0-91EAE0CE2DE0}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFillFormatEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIFillFormatEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Represents the collection of line styles.
  ///</summary>
  [DNTypeName('Aspose.Slides.Theme.ILineFormatCollection')]
  DNILineFormatCollection = interface(DDN.mscorlib.DNICollection)
  ['{41861141-C524-475E-9E7D-4C5F61E46FEA}']
  { getters & setters } 

    function get_Item(index: Int32): DNILineFormat;

  { propertys } 

    property Item[index: Int32]: DNILineFormat read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  ///<summary>
  ///  Immutable object that represents a readonly collection of effective line formats.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.Theme.IFormatSchemeEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.Theme.ILineFormatCollectionEffectiveData')]
  DNILineFormatCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{5E4EE281-9DF1-4A49-A314-F437121DC57E}']
  { getters & setters } 

    function get_Item(index: Int32): DNILineFormatEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNILineFormatEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents a collection of a VBA Project modules.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaModuleCollection')]
  DNIVbaModuleCollection = interface(DDN.mscorlib.DNICollection)
  ['{B1368DF3-F881-48B2-BDDD-30FA70AD4781}']
  { getters & setters } 

    function get_Item(index: Int32): DNIVbaModule;

  { methods } 

    ///<summary>
    ///  Adds a new empty module to the VBA Project.
    ///</summary>
    ///  <param name="name">Name of the module</param>
    ///<returns>Added module.</returns>
    function AddEmptyModule(name: string): DNIVbaModule;
    ///<summary>
    ///  Removes the first occurrence of a specific object from the collection.
    ///</summary>
    ///  <param name="value">The module to remove from the collection.</param>
    procedure Remove(value: DNIVbaModule);

  { propertys } 

    property Item[index: Int32]: DNIVbaModule read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  ///<summary>
  ///  Represents a collection of a VBA Project references.
  ///</summary>
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceCollection')]
  DNIVbaReferenceCollection = interface(DDN.mscorlib.DNICollection)
  ['{89178F2E-6121-49E5-9EA7-179F437F4C80}']
  { getters & setters } 

    function get_Item(index: Int32): DNIVbaReference;

  { methods } 

    ///<summary>
    ///  Adds the new reference to references collection
    ///</summary>
    ///  <param name="value">VBA project reference <see cref="T:Aspose.Slides.Vba.IVbaReference" />
    ///</param>
    procedure Add(value: DNIVbaReference);

  { propertys } 

    property Item[index: Int32]: DNIVbaReference read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  DNInvalidPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{F8E194DC-D922-59BB-857C-C14E01321827}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNInvalidPasswordException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNInvalidPasswordException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNInvalidPasswordException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when presentation file format is unsupported.
  ///</summary>
  [DNTypeName('Aspose.Slides.InvalidPasswordException')]
  DNInvalidPasswordException = interface(DDN.mscorlib.DNException)
  ['{50F7B82C-F4C2-4DDB-BEE1-A8D0790E59DB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPasswordException = class(TDNGenericImport<DNInvalidPasswordExceptionClass, DNInvalidPasswordException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOdpExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{BF4C1835-3A7D-58BF-B791-1236702617C0}']
  { constructors } 

    ///<summary>
    ///  Default constructor
    ///</summary>
    {class} function init: DNOdpException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNOdpException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOdpException; overload;

  end;

  ///<summary>
  ///  Represents a standard internal exception type.
  ///</summary>
  [DNTypeName('Aspose.Slides.OdpException')]
  DNOdpException = interface(DDN.mscorlib.DNException)
  ['{7223E594-64C5-4583-BC33-975F198378B0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOdpException = class(TDNGenericImport<DNOdpExceptionClass, DNOdpException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOdpReadExceptionClass = interface(DNOdpExceptionClass)
  ['{EE661C5C-D708-5322-9C43-55884E498046}']
  { constructors } 

    ///<summary>
    ///  Default constructor
    ///</summary>
    {class} function init: DNOdpReadException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNOdpReadException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOdpReadException; overload;

  end;

  ///<summary>
  ///  Represents an exception which thrown on presentation reading errors.
  ///</summary>
  [DNTypeName('Aspose.Slides.OdpReadException')]
  DNOdpReadException = interface(DNOdpException)
  ['{CF0AD269-23FD-4D9B-A9F8-4C8C5EFD237B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOdpReadException = class(TDNGenericImport<DNOdpReadExceptionClass, DNOdpReadException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOOXMLExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{D15A10BF-1196-5F58-B349-1EC0109BDEB6}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNOOXMLException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNOOXMLException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOOXMLException; overload;

  end;

  ///<summary>
  ///  Represents a standard internal exception type related to Office Open XML file format.
  ///</summary>
  [DNTypeName('Aspose.Slides.OOXMLException')]
  DNOOXMLException = interface(DDN.mscorlib.DNException)
  ['{625093FE-824B-4031-81C4-C2034905D2FC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOOXMLException = class(TDNGenericImport<DNOOXMLExceptionClass, DNOOXMLException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOOXMLCorruptFileExceptionClass = interface(DNOOXMLExceptionClass)
  ['{D5035DB1-89CC-5AA2-979B-779BDBB45828}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNOOXMLCorruptFileException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNOOXMLCorruptFileException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOOXMLCorruptFileException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when Office Open XML file format is corrupted.
  ///</summary>
  [DNTypeName('Aspose.Slides.OOXMLCorruptFileException')]
  DNOOXMLCorruptFileException = interface(DNOOXMLException)
  ['{DAE5905C-5248-4960-986F-780BE8E416E9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOOXMLCorruptFileException = class(TDNGenericImport<DNOOXMLCorruptFileExceptionClass, DNOOXMLCorruptFileException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxExceptionClass = interface(DNOOXMLExceptionClass)
  ['{B6E36CE7-0127-52D9-A728-57E0C83C8CD1}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptxException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptxException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxException; overload;

  end;

  ///<summary>
  ///  Represents a standard internal exception type.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptxException')]
  DNPptxException = interface(DNOOXMLException)
  ['{9BE14B96-EF22-494B-8F1F-A5C1CD3DD1BA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxException = class(TDNGenericImport<DNPptxExceptionClass, DNPptxException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxEditExceptionClass = interface(DNPptxExceptionClass)
  ['{AFEAC3EF-990F-5022-8D44-83F3DD80CA71}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptxEditException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptxEditException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxEditException; overload;

  end;

  ///<summary>
  ///  Represents an exception thrown when edit presentation error is detected.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptxEditException')]
  DNPptxEditException = interface(DNPptxException)
  ['{CDA3676D-3E25-49B6-9406-326ED1468804}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxEditException = class(TDNGenericImport<DNPptxEditExceptionClass, DNPptxEditException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellCircularReferenceExceptionClass = interface(DNPptxEditExceptionClass)
  ['{31E3122B-3541-5387-96D0-8B85786F5E2F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellCircularReferenceException" />
    ///  class.
    ///</summary>
    {class} function init: DNCellCircularReferenceException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellCircularReferenceException" />
    ///  class with a specified error message.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    {class} function init(message: string): DNCellCircularReferenceException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellCircularReferenceException" />
    ///  class with a specified error message
    ///  and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellCircularReferenceException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellCircularReferenceException" />
    ///  class with a specified error message
    ///  and circular cell reference.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    ///  <param name="reference">A circular cell reference.</param>
    {class} function init(message: string; reference: string): DNCellCircularReferenceException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when one or more circular references are detected where a formula refers to its
  ///  own cell either directly or indirectly.
  ///</summary>
  [DNTypeName('Aspose.Slides.Spreadsheet.CellCircularReferenceException')]
  DNCellCircularReferenceException = interface(DNPptxEditException)
  ['{17F8045F-B606-4432-8CC6-922E0953977D}']
  { getters & setters } 

    function get_Reference: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets a circular cell reference.
    ///</summary>
    property Reference: string read get_Reference;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellCircularReferenceException = class(TDNGenericImport<DNCellCircularReferenceExceptionClass, DNCellCircularReferenceException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellInvalidFormulaExceptionClass = interface(DNPptxEditExceptionClass)
  ['{E7E49970-5CB8-5F78-BD0A-44033565B5C7}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidFormulaException" />
    ///  class.
    ///</summary>
    {class} function init: DNCellInvalidFormulaException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidFormulaException" />
    ///  class with a specified error message.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    {class} function init(message: string): DNCellInvalidFormulaException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidFormulaException" />
    ///  class with a specified error message
    ///  and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellInvalidFormulaException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidFormulaException" />
    ///  class with a specified error message
    ///  and a cell reference that contains the invalid formula.
    ///</summary>
    ///  <param name="message"></param>
    ///  <param name="reference"></param>
    {class} function init(message: string; reference: string): DNCellInvalidFormulaException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when a calculated formula is not correct or was not parsed.
  ///</summary>
  [DNTypeName('Aspose.Slides.Spreadsheet.CellInvalidFormulaException')]
  DNCellInvalidFormulaException = interface(DNPptxEditException)
  ['{D0714D67-A449-4649-AF2D-D2FCE25B50B4}']
  { getters & setters } 

    function get_Reference: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets a cell reference that contains the invalid formula.
    ///</summary>
    property Reference: string read get_Reference;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellInvalidFormulaException = class(TDNGenericImport<DNCellInvalidFormulaExceptionClass, DNCellInvalidFormulaException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellInvalidReferenceExceptionClass = interface(DNPptxEditExceptionClass)
  ['{58B0F1F9-3EA0-5D6B-A252-8D272AD3839A}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidReferenceException" />
    ///  class.
    ///</summary>
    {class} function init: DNCellInvalidReferenceException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidReferenceException" />
    ///  class with a specified error message.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    {class} function init(message: string): DNCellInvalidReferenceException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellInvalidReferenceException" />
    ///  class with a specified error message
    ///  and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellInvalidReferenceException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellCircularReferenceException" />
    ///  class with a specified error message
    ///  and an invalid cell reference.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    ///  <param name="reference">An invalid cell reference.</param>
    {class} function init(message: string; reference: string): DNCellInvalidReferenceException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when an invalid cell reference is encountered.
  ///</summary>
  [DNTypeName('Aspose.Slides.Spreadsheet.CellInvalidReferenceException')]
  DNCellInvalidReferenceException = interface(DNPptxEditException)
  ['{E2159DDF-1E7E-4674-AFFC-540CDC827292}']
  { getters & setters } 

    function get_Reference: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets an invalid cell reference.
    ///</summary>
    property Reference: string read get_Reference;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellInvalidReferenceException = class(TDNGenericImport<DNCellInvalidReferenceExceptionClass, DNCellInvalidReferenceException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellUnsupportedDataExceptionClass = interface(DNPptxEditExceptionClass)
  ['{FCB7984E-2FCF-51AD-9FDB-F5E69750A83B}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellUnsupportedDataException" />
    ///  class.
    ///</summary>
    {class} function init: DNCellUnsupportedDataException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellUnsupportedDataException" />
    ///  class with a specified error
    ///  message.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    {class} function init(message: string): DNCellUnsupportedDataException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Slides.Spreadsheet.CellUnsupportedDataException" />
    ///  class with a specified error
    ///  message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">A string that describes the error.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellUnsupportedDataException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when an unsupported data is encountered in a spreadsheet cell.
  ///</summary>
  [DNTypeName('Aspose.Slides.Spreadsheet.CellUnsupportedDataException')]
  DNCellUnsupportedDataException = interface(DNPptxEditException)
  ['{C16A4BA5-5289-4643-A7FB-4178B991BBE0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellUnsupportedDataException = class(TDNGenericImport<DNCellUnsupportedDataExceptionClass, DNCellUnsupportedDataException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxReadExceptionClass = interface(DNPptxExceptionClass)
  ['{C12571A4-7018-5587-81B0-52A9FC1466B8}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptxReadException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptxReadException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxReadException; overload;

  end;

  ///<summary>
  ///  Represents an exception which thrown on presentation reading errors.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptxReadException')]
  DNPptxReadException = interface(DNPptxException)
  ['{C647C67B-EF68-403B-AF3F-CCFF86320942}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxReadException = class(TDNGenericImport<DNPptxReadExceptionClass, DNPptxReadException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxCorruptFileExceptionClass = interface(DNPptxReadExceptionClass)
  ['{0F361140-9199-5174-9C27-440D0F024D7F}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptxCorruptFileException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptxCorruptFileException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxCorruptFileException; overload;

  end;

  ///<summary>
  ///  Represents an exception which thrown on presentation reading errors.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptxCorruptFileException')]
  DNPptxCorruptFileException = interface(DNPptxReadException)
  ['{0D7DADD4-98BA-4EEB-A7BB-05DF27C4D091}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxCorruptFileException = class(TDNGenericImport<DNPptxCorruptFileExceptionClass, DNPptxCorruptFileException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxUnsupportedFormatExceptionClass = interface(DNPptxReadExceptionClass)
  ['{DFDAE425-EC46-53CB-A5E1-A3D6AD0B22E6}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptxUnsupportedFormatException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptxUnsupportedFormatException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxUnsupportedFormatException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when presentation file format is unsupported.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptxUnsupportedFormatException')]
  DNPptxUnsupportedFormatException = interface(DNPptxReadException)
  ['{343A80FE-0550-4569-9062-B69BF9BD7E54}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxUnsupportedFormatException = class(TDNGenericImport<DNPptxUnsupportedFormatExceptionClass, DNPptxUnsupportedFormatException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{63A90C90-85BD-5B10-9280-959E69CBBADF}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptException; overload;

  end;

  ///<summary>
  ///  Represents a standard internal exception type.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptException')]
  DNPptException = interface(DDN.mscorlib.DNException)
  ['{B80025B6-795E-4513-9121-A42D351F9B3A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptException = class(TDNGenericImport<DNPptExceptionClass, DNPptException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptEditExceptionClass = interface(DNPptExceptionClass)
  ['{7A54AA0A-2E09-516F-8272-5403CF14F64D}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptEditException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptEditException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptEditException; overload;

  end;

  ///<summary>
  ///  Represents an exception thrown when edit presentation error is detected.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptEditException')]
  DNPptEditException = interface(DNPptException)
  ['{65ED44D6-C14D-483B-BC07-50512D3C0B5E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptEditException = class(TDNGenericImport<DNPptEditExceptionClass, DNPptEditException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptReadExceptionClass = interface(DNPptExceptionClass)
  ['{D7939598-0CDF-5CF5-9994-762B7AE70211}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptReadException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptReadException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptReadException; overload;

  end;

  ///<summary>
  ///  Represents an exception which thrown on presentation reading errors.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptReadException')]
  DNPptReadException = interface(DNPptException)
  ['{6D44CB3A-71FD-46AF-848D-666ABE7091FE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptReadException = class(TDNGenericImport<DNPptReadExceptionClass, DNPptReadException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptCorruptFileExceptionClass = interface(DNPptReadExceptionClass)
  ['{DDD82DFA-F1B9-5771-9793-9581104F3A47}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptCorruptFileException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptCorruptFileException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptCorruptFileException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when presentation file is probably corrupt.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptCorruptFileException')]
  DNPptCorruptFileException = interface(DNPptReadException)
  ['{685C7A71-77F6-463D-BFFF-4D5461B3A9A9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptCorruptFileException = class(TDNGenericImport<DNPptCorruptFileExceptionClass, DNPptCorruptFileException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptUnsupportedFormatExceptionClass = interface(DNPptReadExceptionClass)
  ['{928BC1A6-06A2-5787-A9CA-CD4DBB090E8C}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNPptUnsupportedFormatException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNPptUnsupportedFormatException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptUnsupportedFormatException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when presentation file format is unsupported.
  ///</summary>
  [DNTypeName('Aspose.Slides.PptUnsupportedFormatException')]
  DNPptUnsupportedFormatException = interface(DNPptReadException)
  ['{D8DCB7FD-B04C-417A-8969-D3EB4F492659}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptUnsupportedFormatException = class(TDNGenericImport<DNPptUnsupportedFormatExceptionClass, DNPptUnsupportedFormatException>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxesCompositionNotCombinableExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{4DD54A9D-F357-5045-99E7-562A2E83D5B1}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNAxesCompositionNotCombinableException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNAxesCompositionNotCombinableException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNAxesCompositionNotCombinableException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when axes composition of the series is not combinable with present axes
  ///  composition in chart.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.AxesCompositionNotCombinableException')]
  DNAxesCompositionNotCombinableException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{3CB68FAC-D34E-444F-AF87-738E03F33D0D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAxesCompositionNotCombinableException = class(TDNGenericImport<DNAxesCompositionNotCombinableExceptionClass, DNAxesCompositionNotCombinableException>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNCannotCombine2DAnd3DChartsExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{559640DD-AF7B-5039-9968-5D225C4451EA}']
  { constructors } 

    ///<summary>
    ///  Default constructor.
    ///</summary>
    {class} function init: DNCannotCombine2DAnd3DChartsException; overload;
    ///<summary>
    ///  Constructor allowing a message to be added to this exception.
    ///</summary>
    ///  <param name="message">message</param>
    {class} function init(message: string): DNCannotCombine2DAnd3DChartsException; overload;
    ///<summary>
    ///  Constructor for an exception containing a message and an embedded exception.
    ///</summary>
    ///  <param name="message">message </param>
    ///  <param name="exception">original exception</param>
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNCannotCombine2DAnd3DChartsException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when trying to combine 2D and 3D chart types.
  ///</summary>
  [DNTypeName('Aspose.Slides.Charts.CannotCombine2DAnd3DChartsException')]
  DNCannotCombine2DAnd3DChartsException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{50A79AD9-B315-4CFE-A4C4-9EC32ADD5341}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCannotCombine2DAnd3DChartsException = class(TDNGenericImport<DNCannotCombine2DAnd3DChartsExceptionClass, DNCannotCombine2DAnd3DChartsException>) end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents generic version of ICloneable
  ///</summary>
  ///<typeparam name="T">The type of object to clone</typeparam>
  [DNTypeName('Aspose.Slides.IGenericCloneable`1')]
  DNIGenericCloneable<T> = interface(DDN.mscorlib.DNICloneable)
  ['{D0D4221B-61A1-49E4-96BA-A2C7BDB3689E}']
  { getters & setters } 

    function get_AsICloneable: DDN.mscorlib.DNICloneable;

  { methods } 

    ///<summary>
    ///  Creates a new object that is a copy of the current instance.
    ///</summary>
    ///<returns>A new object that is a copy of this instance.</returns>
    function CloneT: T;

  { propertys } 

    ///<summary>
    ///  Returns ICloneable interface.
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsICloneable: DDN.mscorlib.DNICloneable read get_AsICloneable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents shape frame's properties.
  ///</summary>
  [DNTypeName('Aspose.Slides.IShapeFrame')]
  DNIShapeFrame = interface(DDN.mscorlib.DNICloneable)
  ['{8A495BAD-AC20-4481-8C43-C53A490533E4}']
  { getters & setters } 

    function get_X: Single;
    function get_Y: Single;
    function get_Width: Single;
    function get_Height: Single;
    function get_Rotation: Single;
    function get_CenterX: Single;
    function get_CenterY: Single;
    function get_FlipH: DNNullableBool;
    function get_FlipV: DNNullableBool;
    function get_Rectangle: DDN.Aspose.Common.DNRectangleF;

  { propertys } 

    ///<summary>
    ///  Returns the X coordinate of the upper-left corner of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property X: Single read get_X;
    ///<summary>
    ///  Returns the Y coordinate of the upper-left corner of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Y: Single read get_Y;
    ///<summary>
    ///  Returns the width of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Width: Single read get_Width;
    ///<summary>
    ///  Returns the height of a frame.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Height: Single read get_Height;
    ///<summary>
    ///  Returns the number of degrees a frame is rotated around the z-axis.
    ///  A positive value indicates clockwise rotation; a negative value
    ///  indicates counterclockwise rotation.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property Rotation: Single read get_Rotation;
    ///<summary>
    ///  Returns the X coordinate of a frame's center.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CenterX: Single read get_CenterX;
    ///<summary>
    ///  Returns the Y coordinate of a frame's center.
    ///  Read-only <see cref="T:System.Single" />
    ///  .
    ///</summary>
    property CenterY: Single read get_CenterY;
    ///<summary>
    ///  Determines whether a frame is flipped horizontally.
    ///  Read-only <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FlipH: DNNullableBool read get_FlipH;
    ///<summary>
    ///  Determines whether a frame is flipped vertically.
    ///  Read-only <see cref="T:Aspose.Slides.NullableBool" />
    ///  .
    ///</summary>
    property FlipV: DNNullableBool read get_FlipV;
    ///<summary>
    ///  Returns the coordinates of a frame.
    ///  Read-only <see cref="T:System.Drawing.RectangleF" />
    ///  .
    ///</summary>
    property Rectangle: DDN.Aspose.Common.DNRectangleF read get_Rectangle;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Represents a tabulation for a text.
  ///</summary>
  [DNTypeName('Aspose.Slides.ITab')]
  DNITab = interface(DDN.mscorlib.DNIComparable)
  ['{F35F4DFA-9D67-47C9-9D4D-EC9BEE3EF33E}']
  { getters & setters } 

    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_Alignment: DNTabAlignment;
    procedure set_Alignment(value: DNTabAlignment);
    function get_AsIComparable: DDN.mscorlib.DNIComparable;

  { propertys } 

    ///<summary>
    ///  Returns or sets position of a tab.
    ///  Assigning this property can change tab's index in collection and invalidate Enumerator.
    ///  Read/write <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Position: Double read get_Position write set_Position;
    ///<summary>
    ///  Returns or sets align style of a tab.
    ///  Read/write <see cref="T:Aspose.Slides.TabAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTabAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Returns IComparable interface.
    ///  Read-only <see cref="T:System.IComparable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIComparable: DDN.mscorlib.DNIComparable read get_AsIComparable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Immutable object which contains effective text's tabulation stop properties.
  ///</summary>
  ///<remarks>
  ///  This interface is used as a part of <see cref="T:Aspose.Slides.IParagraphFormatEffectiveData" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Slides.ITabEffectiveData')]
  DNITabEffectiveData = interface(DDN.mscorlib.DNIComparable)
  ['{211F70BC-7F75-450F-AEA2-5B316878D75F}']
  { getters & setters } 

    function get_Position: Double;
    function get_Alignment: DNTabAlignment;
    function get_AsIComparable: DDN.mscorlib.DNIComparable;

  { propertys } 

    ///<summary>
    ///  Returns position of a tab.
    ///  Assigning this property can change tab's index in collection and invalidate Enumerator.
    ///  Read-only <see cref="T:System.Double" />
    ///  .
    ///</summary>
    property Position: Double read get_Position;
    ///<summary>
    ///  Returns align style of a tab.
    ///  Read-only <see cref="T:Aspose.Slides.TabAlignment" />
    ///  .
    ///</summary>
    property Alignment: DNTabAlignment read get_Alignment;
    ///<summary>
    ///  Returns IComparable interface.
    ///  Read-only <see cref="T:System.IComparable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIComparable: DDN.mscorlib.DNIComparable read get_AsIComparable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  System.Drawing.Image wrapper for COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.IImageWrapper')]
  DNIImageWrapper = interface(DDN.mscorlib.DNIDisposable)
  ['{1469C473-95A4-48E4-A158-D3BD8BF9DFA4}']
  { getters & setters } 

    function get_Image: DDN.Aspose.Common.DNImage;
    function get_Size: DDN.Aspose.Common.DNSize;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;

  { methods } 

    ///<summary>
    ///  Saves Image to the specified file
    ///</summary>
    ///  <param name="fileName">File name <see cref="T:System.String" />
    ///</param>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Saves the Image to the specified stream in the specified format.
    ///</summary>
    ///  <param name="stream">Stream for saving image <see cref="T:System.IO.Stream" />
    ///</param>
    ///  <param name="imageFormat">Image format <see cref="T:Aspose.Slides.PPImageFormat" />
    ///</param>
    procedure Save(stream: DDN.mscorlib.DNStream; imageFormat: DNPPImageFormat); overload;
    ///<summary>
    ///  Saves the Image to the specified file in the specified format.
    ///</summary>
    ///  <param name="fileName">File name <see cref="T:System.String" />
    ///</param>
    ///  <param name="imageFormat">Image format <see cref="T:Aspose.Slides.PPImageFormat" />
    ///</param>
    procedure Save(fileName: string; imageFormat: DNPPImageFormat); overload;

  { propertys } 

    ///<summary>
    ///  Gets the Syste.Drawing.Image
    ///  Read-only <see cref="P:Aspose.Slides.IImageWrapper.Image" />
    ///  .
    ///</summary>
    property Image: DDN.Aspose.Common.DNImage read get_Image;
    ///<summary>
    ///  Gets the width and height, in pixels, of the Image
    ///  Read-only <see cref="P:Aspose.Slides.IImageWrapper.Size" />
    ///  .
    ///</summary>
    property Size: DDN.Aspose.Common.DNSize read get_Size;
    ///<summary>
    ///  Returns IDisposable interface.
    ///  Read-only <see cref="T:System.IDisposable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Presentation document
  ///</summary>
  [DNTypeName('Aspose.Slides.IPresentation')]
  DNIPresentation = interface(DDN.mscorlib.DNIDisposable)
  ['{35314620-7834-4794-A544-E437789339C8}']
  { getters & setters } 

    function get_CurrentDateTime: DDN.mscorlib.DNDateTime;
    procedure set_CurrentDateTime(value: DDN.mscorlib.DNDateTime);
    function get_HeaderFooterManager: DNIPresentationHeaderFooterManager;
    function get_ProtectionManager: DNIProtectionManager;
    function get_Slides: DNISlideCollection;
    function get_Sections: DNISectionCollection;
    function get_SlideSize: DNISlideSize;
    function get_NotesSize: DNINotesSize;
    function get_LayoutSlides: DNIGlobalLayoutSlideCollection;
    function get_Masters: DNIMasterSlideCollection;
    function get_MasterNotesSlideManager: DNIMasterNotesSlideManager;
    function get_MasterHandoutSlideManager: DNIMasterHandoutSlideManager;
    function get_FontsManager: DNIFontsManager;
    function get_DefaultTextStyle: DNITextStyle;
    function get_CommentAuthors: DNICommentAuthorCollection;
    function get_DocumentProperties: DNIDocumentProperties;
    function get_Images: DNIImageCollection;
    function get_Audios: DNIAudioCollection;
    function get_Videos: DNIVideoCollection;
    function get_CustomData: DNICustomData;
    function get_VbaProject: DNIVbaProject;
    procedure set_VbaProject(value: DNIVbaProject);
    function get_SourceFormat: DNSourceFormat;
    function get_MasterTheme: DNIMasterTheme;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ViewProperties: DNIViewProperties;
    function get_FirstSlideNumber: Int32;
    procedure set_FirstSlideNumber(value: Int32);
    function get_AllCustomXmlParts: TArray<DNICustomXmlPart>;
    function get_DigitalSignatures: DNIDigitalSignatureCollection;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { methods } 

    ///<summary>
    ///  Saves all slides of a presentation to a file with the specified format.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="format">Format of the exported data.</param>
    procedure Save(fname: string; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="format">Format of the exported data.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a file with the specified format and with additional options.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    procedure Save(fname: string; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a stream in the specified format and with additional options.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    ///<exception cref="T:System.NotSupportedException">If you try to save encrypted file in
    ///  none Office 2007-2010 format</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a file with the specified format.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///<exception cref="T:System.ArgumentNullException">When stream or slides parameter is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">When slides parameter contains wrong page numbers.</exception><exception cref="T:System.InvalidOperationException">When an unsupported SaveFormat is used, e.g. PPTX, PPTM, PPSX, PPSM, POTX, POTM, PPT, ODP.</exception>
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a file with the specified format.
    ///</summary>
    ///  <param name="fname">Path to the created file.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    ///<exception cref="T:System.ArgumentNullException">When stream or slides parameter is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">When slides parameter contains wrong page numbers.</exception><exception cref="T:System.InvalidOperationException">When an unsupported SaveFormat is used, e.g. PPTX, PPTM, PPSX, PPSM, POTX, POTM, PPT, ODP.</exception>
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///<exception cref="T:System.ArgumentNullException">When stream or slides parameter is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">When slides parameter contains wrong page numbers.</exception><exception cref="T:System.InvalidOperationException">When an unsupported SaveFormat is used, e.g. PPTX, PPTM, PPSX, PPSM, POTX, POTM, PPT, ODP.</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves specified slides of a presentation to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">Output stream.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="format">Format of the exported data.</param>
    ///  <param name="options">Additional format options.</param>
    ///<exception cref="T:System.ArgumentNullException">When stream or slides parameter is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">When slides parameter contains wrong page numbers.</exception><exception cref="T:System.InvalidOperationException">When an unsupported SaveFormat is used, e.g. PPTX, PPTM, PPSX, PPSM, POTX, POTM, PPT, ODP.</exception>
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    ///<summary>
    ///  Saves all slides of a presentation to a set of files representing XAML markup.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("pres.pptx"))
    ///  {
    ///  pres.Save(new XamlOptions { ExportHiddenSlides = true });
    ///  }
    ///</code></example><param name="options">The XAML format options.</param>
    procedure Save(options: DNIXamlOptions); overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with specified size.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with specified size.
    ///</summary>
    ///  <param name="notesCommentsLayouting">Options for notes and comments layouting.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with custom scaling.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="scaleX">The value by which to scale this Thumbnail in the x-axis direction.</param>
    ///  <param name="scaleY">The value by which to scale this Thumbnail in the y-axis direction.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for all slides of a presentation with specified size.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Thumbnail Bitmap objects for specified slides of a presentation with specified size.
    ///</summary>
    ///  <param name="options">Rendering options.</param>
    ///  <param name="slides">Array with slide positions, starting from 1.</param>
    ///  <param name="imageSize">Size of the image to create.</param>
    ///<returns>Bitmap objects.</returns>
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; imageSize: DDN.Aspose.Common.DNSize): TArray<DDN.Aspose.Common.DNBitmap>; overload;
    ///<summary>
    ///  Returns a Slide, MasterSlide or LayoutSlide by Id.
    ///</summary>
    ///  <param name="id">Id of a slide.</param>
    ///<returns>IBaseSlide object.</returns>
    function GetSlideById(id: UInt32): DNIBaseSlide;
    ///<summary>
    ///  Prints the whole presentation to the default printer.
    ///</summary>
    procedure Print; overload;
    ///<summary>
    ///  Prints the presentation according to the specified printer settings,
    ///  using the standard (no User Interface) print controller.
    ///</summary>
    ///  <param name="printerSettings">The .NET printer settings to use.</param>
    procedure Print(printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Print the whole presentation to the specified printer,
    ///  using the standard (no User Interface) print controller.
    ///</summary>
    ///  <param name="printerName">The name of the printer.</param>
    procedure Print(printerName: string); overload;
    ///<summary>
    ///  Prints the document according to the specified printer settings, using
    ///  the standard (no User Interface) print controller and a presentation name.
    ///</summary>
    ///  <param name="printerSettings">The .NET printer settings to use.</param>
    ///  <param name="presName">The presentation name to display (for example, in a print
    ///  status dialog box or printer queue) while printing the presentation.</param>
    procedure Print(printerSettings: DDN.Aspose.Common.DNPrinterSettings; presName: string); overload;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs in all acceptable shapes in all slides.
    ///</summary>
    procedure JoinPortionsWithSameFormatting;

  { propertys } 

    ///<summary>
    ///  Returns or sets date and time which will substitute content of datetime fields.
    ///  Time of this Presentation object creation by default.
    ///  Read/write <see cref="T:System.DateTime" />
    ///  .
    ///</summary>
    property CurrentDateTime: DDN.mscorlib.DNDateTime read get_CurrentDateTime write set_CurrentDateTime;
    ///<summary>
    ///  Returns HeaderFooter manager of the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentationHeaderFooterManager" />
    ///  .
    ///</summary>
    property HeaderFooterManager: DNIPresentationHeaderFooterManager read get_HeaderFooterManager;
    ///<summary>
    ///  Gets manager of the permissions for this presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IProtectionManager" />
    ///  .
    ///</summary>
    property ProtectionManager: DNIProtectionManager read get_ProtectionManager;
    ///<summary>
    ///  Returns a list of all slides that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideCollection" />
    ///  .
    ///</summary>
    property Slides: DNISlideCollection read get_Slides;
    ///<summary>
    ///  Returns a list of all slides sections that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.ISectionCollection" />
    ///  .
    ///</summary>
    property Sections: DNISectionCollection read get_Sections;
    ///<summary>
    ///  Returns slide size object.
    ///  Read-only <see cref="T:Aspose.Slides.ISlideSize" />
    ///  .
    ///</summary>
    property SlideSize: DNISlideSize read get_SlideSize;
    ///<summary>
    ///  Returns notes slide size object.
    ///  Read-only <see cref="T:Aspose.Slides.INotesSize" />
    ///  .
    ///</summary>
    property NotesSize: DNINotesSize read get_NotesSize;
    ///<summary>
    ///  Returns a list of all layout slides that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IGlobalLayoutSlideCollection" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  You can access to alternative API for adding/inserting/removing/cloning layout slides
    ///  by using IMasterSlide.LayoutSlides property.
    ///</remarks>
    property LayoutSlides: DNIGlobalLayoutSlideCollection read get_LayoutSlides;
    ///<summary>
    ///  Returns a list of all master slides that are defined in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterSlideCollection" />
    ///  .
    ///</summary>
    property Masters: DNIMasterSlideCollection read get_Masters;
    ///<summary>
    ///  Returns notes master manager.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterNotesSlideManager" />
    ///  .
    ///</summary>
    property MasterNotesSlideManager: DNIMasterNotesSlideManager read get_MasterNotesSlideManager;
    ///<summary>
    ///  Returns handout master manager.
    ///  Read-only <see cref="T:Aspose.Slides.IMasterHandoutSlideManager" />
    ///  .
    ///</summary>
    property MasterHandoutSlideManager: DNIMasterHandoutSlideManager read get_MasterHandoutSlideManager;
    ///<summary>
    ///  Returns fonts manager.
    ///  Read-only <see cref="T:Aspose.Slides.IFontsManager" />
    ///  .
    ///</summary>
    property FontsManager: DNIFontsManager read get_FontsManager;
    ///<summary>
    ///  Returns default text style for shapes.
    ///  Read-only <see cref="T:Aspose.Slides.ITextStyle" />
    ///  .
    ///</summary>
    property DefaultTextStyle: DNITextStyle read get_DefaultTextStyle;
    ///<summary>
    ///  Returns the collection of comments autors.
    ///  Read-only <see cref="T:Aspose.Slides.ICommentAuthorCollection" />
    ///  .
    ///</summary>
    property CommentAuthors: DNICommentAuthorCollection read get_CommentAuthors;
    ///<summary>
    ///  Returns DocumentProperties object which contains standard and custom document properties.
    ///  Read-only <see cref="T:Aspose.Slides.IDocumentProperties" />
    ///  .
    ///</summary>
    property DocumentProperties: DNIDocumentProperties read get_DocumentProperties;
    ///<summary>
    ///  Returns the collection of all images in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IImageCollection" />
    ///  .
    ///</summary>
    property Images: DNIImageCollection read get_Images;
    ///<summary>
    ///  Returns the collection of all embedded audio files in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IAudioCollection" />
    ///  .
    ///</summary>
    property Audios: DNIAudioCollection read get_Audios;
    ///<summary>
    ///  Returns the collection of all embedded video files in the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IVideoCollection" />
    ///  .
    ///</summary>
    property Videos: DNIVideoCollection read get_Videos;
    ///<summary>
    ///  Returns the presentation's custom data.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomData" />
    ///  .
    ///</summary>
    property CustomData: DNICustomData read get_CustomData;
    ///<summary>
    ///  Gets VBA project with presentation macros.
    ///  Read/write <see cref="T:Aspose.Slides.Vba.IVbaProject" />
    ///  .
    ///</summary>
    property VbaProject: DNIVbaProject read get_VbaProject write set_VbaProject;
    ///<summary>
    ///  Returns information about from which format presentation was loaded.
    ///  Read-only <see cref="P:Aspose.Slides.IPresentation.SourceFormat" />
    ///  .
    ///</summary>
    property SourceFormat: DNSourceFormat read get_SourceFormat;
    ///<summary>
    ///  Returns master theme of the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.Theme.IMasterTheme" />
    ///  .
    ///</summary>
    property MasterTheme: DNIMasterTheme read get_MasterTheme;
    ///<summary>
    ///  Provides easy access to all hyperlinks contained in all presentation slides (not in master, layout, notes slides).
    ///  Read-only <see cref="T:Aspose.Slides.IHyperlinkQueries" />
    ///  .
    ///</summary>
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    ///<summary>
    ///  Gets presentation wide view properties.
    ///  Read-only <see cref="T:Aspose.Slides.IViewProperties" />
    ///  .
    ///</summary>
    property ViewProperties: DNIViewProperties read get_ViewProperties;
    ///<summary>
    ///  Represents the first slide number in the presentation.
    ///  Read/write <see cref="T:System.Int32" />
    ///  .
    ///</summary>
    property FirstSlideNumber: Int32 read get_FirstSlideNumber write set_FirstSlideNumber;
    ///<summary>
    ///  Returns all custom data parts in the presentaion.
    ///  Read-only <see cref="T:Aspose.Slides.ICustomXmlPart" />
    ///  [].
    ///</summary>
    property AllCustomXmlParts: TArray<DNICustomXmlPart> read get_AllCustomXmlParts;
    ///<summary>
    ///  Returns the collection of signatures used to sign the presentation.
    ///  Read-only <see cref="T:Aspose.Slides.IDigitalSignatureCollection" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  using (Presentation pres = new Presentation("SomePresentationSigned.pptx"))
    ///  {
    ///  if (pres.DigitalSignatures.Count &gt; 0)
    ///  {
    ///  bool allSignaturesAreValid = true;
    ///  Console.WriteLine("Signatures used to sign the presentation: ");
    ///  foreach (DigitalSignature signature in pres.DigitalSignatures)
    ///  {
    ///  Console.WriteLine(signature.Certificate.SubjectName.Name + ", "
    ///  + signature.SignTime.ToString("yyyy-MM-dd HH:mm") + " -- " + (signature.IsValid ? "VALID" : "INVALID"));
    ///  allSignaturesAreValid &amp;= signature.IsValid;
    ///  }
    ///  if (allSignaturesAreValid)
    ///  Console.WriteLine("Presentation is genuine, all signatures are valid.");
    ///  else
    ///  Console.WriteLine("Presentation has been modified since signing.");
    ///  }
    ///  }
    ///</code></example>
    property DigitalSignatures: DNIDigitalSignatureCollection read get_DigitalSignatures;
    ///<summary>
    ///  Returns IDisposable interface.
    ///  Read-only <see cref="T:System.IDisposable" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  For COM compatibility.
    ///</remarks>
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
    ///<summary>
    ///  Allows to get base IPresentationComponent interface.
    ///  Read-only <see cref="T:Aspose.Slides.IPresentationComponent" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  ///<summary>
  ///  Aspose.IO.Stream wrapper for COM interface.
  ///</summary>
  [DNTypeName('Aspose.Slides.IStreamWrapper')]
  DNIStreamWrapper = interface(DDN.mscorlib.DNIDisposable)
  ['{774C0DFE-E38C-4D3C-8EF1-0C67EE1EF214}']
  { getters & setters } 

    function get_Stream: DDN.mscorlib.DNStream;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;

  { methods } 

    ///<summary>
    ///  Closes the current stream and releases any resources.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
    ///</summary>
    ///  <param name="buffer">Sequence of bytes <see cref="T:System.Byte" />
    ///  []</param>
    ///  <param name="offset">Start reading position <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="count">Count bytes for reading <see cref="T:System.Int32" />
    ///</param>
    procedure Read(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
    ///</summary>
    ///<returns>Read byte <see cref="T:System.Int32" />
    ///</returns>
    function ReadByte: Int32;
    ///<summary>
    ///  Sets the position within the current stream
    ///</summary>
    ///  <param name="offset">A byte offset relative to the origin parameter <see cref="T:System.Int64" />
    ///</param>
    ///  <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" />
    ///  indicating the reference point used to obtain the new position</param>
    ///<returns>The new position within the current stream <see cref="T:System.Int64" />
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
    ///</summary>
    ///  <param name="buffer">An array of bytes <see cref="T:System.Byte" />
    ///  []</param>
    ///  <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream <see cref="T:System.Int32" />
    ///</param>
    ///  <param name="count">The number of bytes to be written to the current stream <see cref="T:System.Int32" />
    ///</param>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    ///<summary>
    ///  Writes a byte to the current position in the stream and advances the position within the stream by one byte.
    ///</summary>
    ///  <param name="value">Byte for writion <see cref="T:System.Byte" />
    ///</param>
    procedure WriteByte(value: Byte);

  { propertys } 

    ///<summary>
    ///  Gets a stream.
    ///  Read-only <see cref="T:System.IO.Stream" />
    ///  .
    ///</summary>
    property Stream: DDN.mscorlib.DNStream read get_Stream;
    ///<summary>
    ///  Gets a value indicating whether the current stream supports reading.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  Gets a value indicating whether the current stream supports seeking.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  Gets a value indicating whether the current stream supports writing.
    ///  Read-only <see cref="T:System.Boolean" />
    ///  .
    ///</summary>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  Gets the length in bytes of the stream.
    ///  Read-only <see cref="T:System.Int64" />
    ///  .
    ///</summary>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  Gets the position within the current stream.
    ///  Read-only <see cref="T:System.Int64" />
    ///  .
    ///</summary>
    property Position: Int64 read get_Position;
    ///<summary>
    ///  Allows to get base IDisposable interface.
    ///  Read-only <see cref="T:System.IDisposable" />
    ///  .
    ///</summary>
    ///<remark>
    ///  This is for COM compatibility.
    ///</remark>
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
  end;


implementation

end.
