//----------------------------------------------------------------------------
//  Aspose.Cells.dll: Aspose.Cells, Version=21.6.0.0, Culture=neutral, PublicKeyToken=716fcc553a201e56
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.Aspose.Cells
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Aspose.Cells;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Drawing,
  DDN.System.Data,
  DDN.System.Web,
  DDN.System;

type

{ enums }

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Cache options for data access. Can be combined with | operator for multiple options together.
  ///</summary>
  ///<remarks>
  ///  For some features, accessing large dataset requires a lot of repeated and complicated operations
  ///  such as search, calculation, ...etc and those operations will take a lot of extra time.
  ///  For common situations, all dependent data remains unchanged during the access, so some caches can be built and used to
  ///  improve the access performance.
  ///  For this purpose, we provide this API so that user can specify which kind of data access needs
  ///  to be optimized by possible caching mechanism.
  ///<br></br>
  ///  Please note, for different options, different data set may be required to be "read-only".
  ///  And performance of accessing data depends on many aspects, the use of caching mechanism
  ///  does not guarantee that performance will be improved. For some situations,
  ///  such as the dataset to be accessed is small, using cache may cause even more time because
  ///  caching itself also needs certain extra time.
  ///</remarks>
  [DNTypeName('Aspose.Cells.AccessCacheOptions')]
  DNAccessCacheOptions = type Integer;
  DNAccessCacheOptionsHelper = record helper for DNAccessCacheOptions
  public const
    ///<summary>
    ///  No cache for any data access.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Apply possible optimization for getting object(such as Shape)'s position and size.
    ///  Row height and column width settings should not be changed during the optimized access.
    ///</summary>
    PositionAndSize = 3;
    ///<summary>
    ///  Apply possible optimization for getting cells' values.
    ///  Cells data(data and settings of Cell, Row) should not be changed during
    ///  the optimized access, no new Cell/Row objects should be created either(such as
    ///  by <see cref="P:Aspose.Cells.Cells.Item(System.Int32,System.Int32)" />
    ///  ).
    ///</summary>
    CellsData = 9;
    ///<summary>
    ///  Apply possible optimization for getting display-related results of
    ///  cells(<see cref="P:Aspose.Cells.Cell.DisplayStringValue" />
    ///  , <see cref="M:Aspose.Cells.Cell.GetStyle" />
    ///  , <see cref="M:Aspose.Cells.Cell.GetDisplayStyle" />
    ///  , etc.).
    ///  Cells data and style-related objects(Cell/Row/Column styles, column width, etc.) should not be changed
    ///  during the optimized access.
    ///</summary>
    CellDisplay = 1048710;
    ///<summary>
    ///  Apply possible optimization for getting formulas.
    ///  All data and settings which may affect the formula expression(Worksheet's name, Name's text,
    ///  table's column, etc.) should not be changed during the optimized access.
    ///</summary>
    GetFormula = 2097152;
    ///<summary>
    ///  Apply possible optimization for setting formulas.
    ///  All data and settings which may affect the formula expression(Worksheet's name, Name's text,
    ///  table's column, etc.) should not be changed during the optimized access.
    ///</summary>
    SetFormula = 4194304;
    ///<summary>
    ///  Apply possible optimization for calculating formulas.
    ///  Cells data should not be changed during the optimized access, none new objects(Cell, Row, etc.)
    ///  should be created either(such as by <see cref="P:Aspose.Cells.Cells.Item(System.Int32,System.Int32)" />
    ///  ).
    ///</summary>
    CalculateFormula = 8388617;
    ///<summary>
    ///  Apply possible optimization for getting formatting result of conditional formattings.
    ///  All data and settings which may affect the result of conditional formattings(settings of
    ///  conditional formattings, dependent cell values, etc.) should not be changed during the optimized access.
    ///</summary>
    ConditionalFormatting = 16777225;
    ///<summary>
    ///  Apply possible optimization for getting validation result.
    ///  All data and settings which may affect the result of validation(settings of the validation,
    ///  dependent cell values, etc.) should not be changed during the optimized access.
    ///</summary>
    Validation = 33554441;
    ///<summary>
    ///  Apply all possible optimizations for all kinds of data access in the workbook.
    ///  All settings and data should not be changed during the optimized access.
    ///</summary>
    All = -1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the type of auto fitting merged cells.
  ///</summary>
  [DNTypeName('Aspose.Cells.AutoFitMergedCellsType')]
  DNAutoFitMergedCellsType = type Integer;
  DNAutoFitMergedCellsTypeHelper = record helper for DNAutoFitMergedCellsType
  public const
    ///<summary>
    ///  Ignore merged cells.
    ///</summary>
    ///<remarks>
    ///  Default.
    ///</remarks>
    None = 0;
    ///<summary>
    ///  Only expands the height of the first row.
    ///</summary>
    FirstLine = 1;
    ///<summary>
    ///  Only expands the height of the last row.
    ///</summary>
    LastLine = 2;
    ///<summary>
    ///  Only expands the height of each row.
    ///</summary>
    EachLine = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the type of auto fitting wrapped text.
  ///</summary>
  [DNTypeName('Aspose.Cells.AutoFitWrappedTextType')]
  DNAutoFitWrappedTextType = type Integer;
  DNAutoFitWrappedTextTypeHelper = record helper for DNAutoFitWrappedTextType
  public const
    ///<summary>
    ///  Works as MS Excel.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Auto fit width with the longest paragraph.
    ///</summary>
    Paragraph = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates cell background pattern types.
  ///</summary>
  [DNTypeName('Aspose.Cells.BackgroundType')]
  DNBackgroundType = type Integer;
  DNBackgroundTypeHelper = record helper for DNBackgroundType
  public const
    ///<summary>
    ///  Represents no background.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents solid pattern.
    ///</summary>
    Solid = 1;
    ///<summary>
    ///  Represents 50% gray pattern.
    ///</summary>
    Gray50 = 2;
    ///<summary>
    ///  Represents 75% gray pattern.
    ///</summary>
    Gray75 = 3;
    ///<summary>
    ///  Represents 25% gray pattern.
    ///</summary>
    Gray25 = 4;
    ///<summary>
    ///  Represents horizontal stripe pattern.
    ///</summary>
    HorizontalStripe = 5;
    ///<summary>
    ///  Represents vertical stripe pattern.
    ///</summary>
    VerticalStripe = 6;
    ///<summary>
    ///  Represents reverse diagonal stripe pattern.
    ///</summary>
    ReverseDiagonalStripe = 7;
    ///<summary>
    ///  Represents diagonal stripe pattern.
    ///</summary>
    DiagonalStripe = 8;
    ///<summary>
    ///  Represents diagonal crosshatch pattern.
    ///</summary>
    DiagonalCrosshatch = 9;
    ///<summary>
    ///  Represents thick diagonal crosshatch pattern.
    ///</summary>
    ThickDiagonalCrosshatch = 10;
    ///<summary>
    ///  Represents thin horizontal stripe pattern.
    ///</summary>
    ThinHorizontalStripe = 11;
    ///<summary>
    ///  Represents thin vertical stripe pattern.
    ///</summary>
    ThinVerticalStripe = 12;
    ///<summary>
    ///  Represents thin reverse diagonal stripe pattern.
    ///</summary>
    ThinReverseDiagonalStripe = 13;
    ///<summary>
    ///  Represents thin diagonal stripe pattern.
    ///</summary>
    ThinDiagonalStripe = 14;
    ///<summary>
    ///  Represents thin horizontal crosshatch pattern.
    ///</summary>
    ThinHorizontalCrosshatch = 15;
    ///<summary>
    ///  Represents thin diagonal crosshatch pattern.
    ///</summary>
    ThinDiagonalCrosshatch = 16;
    ///<summary>
    ///  Represents 12.5% gray pattern
    ///</summary>
    Gray12 = 17;
    ///<summary>
    ///  Represents 6.25% gray pattern
    ///</summary>
    Gray6 = 18;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates the border line and diagonal line types.
  ///</summary>
  [DNTypeName('Aspose.Cells.BorderType')]
  DNBorderType = type Integer;
  DNBorderTypeHelper = record helper for DNBorderType
  public const
    ///<summary>
    ///  Represents left border line.
    ///</summary>
    LeftBorder = 1;
    ///<summary>
    ///  Represents right border line exists.
    ///</summary>
    RightBorder = 2;
    ///<summary>
    ///  Represents top border line.
    ///</summary>
    TopBorder = 4;
    ///<summary>
    ///  Represents bottom border line.
    ///</summary>
    BottomBorder = 8;
    ///<summary>
    ///  Represents the diagonal line from top left to right bottom.
    ///</summary>
    DiagonalDown = 16;
    ///<summary>
    ///  Represents the diagonal line from bottom left to right top.
    ///</summary>
    DiagonalUp = 32;
    ///<summary>
    ///  Only for dynamic style,such as conditional formatting.
    ///</summary>
    Vertical = 64;
    ///<summary>
    ///  Only for dynamic style,such as conditional formatting.
    ///</summary>
    Horizontal = 128;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents all built-in style type
  ///</summary>
  [DNTypeName('Aspose.Cells.BuiltinStyleType')]
  DNBuiltinStyleType = type Integer;
  DNBuiltinStyleTypeHelper = record helper for DNBuiltinStyleType
  public const
    ///<summary></summary>
    Normal = 0;
    ///<summary></summary>
    RowLevel = 1;
    ///<summary></summary>
    ColumnLevel = 2;
    ///<summary></summary>
    Comma = 3;
    ///<summary></summary>
    Currency = 4;
    ///<summary></summary>
    Percent = 5;
    ///<summary></summary>
    Comma1 = 6;
    ///<summary></summary>
    Currency1 = 7;
    ///<summary></summary>
    Hyperlink = 8;
    ///<summary></summary>
    FollowedHyperlink = 9;
    ///<summary></summary>
    Note = 10;
    ///<summary></summary>
    WarningText = 11;
    ///<summary></summary>
    Title = 15;
    ///<summary></summary>
    Header1 = 16;
    ///<summary></summary>
    Header2 = 17;
    ///<summary></summary>
    Header3 = 18;
    ///<summary></summary>
    Header4 = 19;
    ///<summary></summary>
    Input = 20;
    ///<summary></summary>
    Output = 21;
    ///<summary></summary>
    Calculation = 22;
    ///<summary></summary>
    CheckCell = 23;
    ///<summary></summary>
    LinkedCell = 24;
    ///<summary></summary>
    Total = 25;
    ///<summary></summary>
    Good = 26;
    ///<summary></summary>
    Bad = 27;
    ///<summary></summary>
    Neutral = 28;
    ///<summary></summary>
    Accent1 = 29;
    ///<summary></summary>
    TwentyPercentAccent1 = 30;
    ///<summary></summary>
    FortyPercentAccent1 = 31;
    ///<summary></summary>
    SixtyPercentAccent1 = 32;
    ///<summary></summary>
    Accent2 = 33;
    ///<summary></summary>
    TwentyPercentAccent2 = 34;
    ///<summary></summary>
    FortyPercentAccent2 = 35;
    ///<summary></summary>
    SixtyPercentAccent2 = 36;
    ///<summary></summary>
    Accent3 = 37;
    ///<summary></summary>
    TwentyPercentAccent3 = 38;
    ///<summary></summary>
    FortyPercentAccent3 = 39;
    ///<summary></summary>
    SixtyPercentAccent3 = 40;
    ///<summary></summary>
    Accent4 = 41;
    ///<summary></summary>
    TwentyPercentAccent4 = 42;
    ///<summary></summary>
    FortyPercentAccent4 = 43;
    ///<summary></summary>
    SixtyPercentAccent4 = 44;
    ///<summary></summary>
    Accent5 = 45;
    ///<summary></summary>
    TwentyPercentAccent5 = 46;
    ///<summary></summary>
    FortyPercentAccent5 = 47;
    ///<summary></summary>
    SixtyPercentAccent5 = 48;
    ///<summary></summary>
    Accent6 = 49;
    ///<summary></summary>
    TwentyPercentAccent6 = 50;
    ///<summary></summary>
    FortyPercentAccent6 = 51;
    ///<summary></summary>
    SixtyPercentAccent6 = 52;
    ///<summary></summary>
    ExplanatoryText = 53;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the mode type of calculating formulas.
  ///</summary>
  ///<remarks>
  ///  Only sets for MS Excel.
  ///</remarks>
  [DNTypeName('Aspose.Cells.CalcModeType')]
  DNCalcModeType = type Integer;
  DNCalcModeTypeHelper = record helper for DNCalcModeType
  public const
    ///<summary></summary>
    Automatic = 0;
    ///<summary></summary>
    AutomaticExceptTable = 1;
    ///<summary></summary>
    Manual = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates strategies for handling calculation precision.
  ///  Because of the precision issue of IEEE 754 Floating-Point Arithmetic, some "seemingly simple" formulas may not be calculated as the expected result.
  ///  Such as formula "=-0.45+0.43+0.02", when calculating operands by '+' operator directly, the result is not zero. For such kind of precision issue,
  ///  some special strategies may give the expected result.
  ///</summary>
  [DNTypeName('Aspose.Cells.CalculationPrecisionStrategy')]
  DNCalculationPrecisionStrategy = type Integer;
  DNCalculationPrecisionStrategyHelper = record helper for DNCalculationPrecisionStrategy
  public const
    ///<summary>
    ///  No strategy applied on calculation.
    ///  When calculating just use the original double value as operand and return the result directly.
    ///  Most efficient for performance and applicable for most cases.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Rounds the calculation result according with significant digits.
    ///</summary>
    Round = 1;
    ///<summary>
    ///  Uses decimal as operands when possible.
    ///  Most inefficient for performance.
    ///</summary>
    Decimal = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates a cell's border type.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellBorderType')]
  DNCellBorderType = type Integer;
  DNCellBorderTypeHelper = record helper for DNCellBorderType
  public const
    ///<summary>
    ///  Represents no line.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents thin line.
    ///</summary>
    Thin = 1;
    ///<summary>
    ///  Represents medium line.
    ///</summary>
    Medium = 2;
    ///<summary>
    ///  Represents dashed line.
    ///</summary>
    Dashed = 3;
    ///<summary>
    ///  Represents dotted line.
    ///</summary>
    Dotted = 4;
    ///<summary>
    ///  Represents thick line.
    ///</summary>
    Thick = 5;
    ///<summary>
    ///  Represents double line.
    ///</summary>
    Double = 6;
    ///<summary>
    ///  Represents hair line.
    ///</summary>
    Hair = 7;
    ///<summary>
    ///  Represents medium dashed line.
    ///</summary>
    MediumDashed = 8;
    ///<summary>
    ///  Represents thin dash-dotted line.
    ///</summary>
    DashDot = 9;
    ///<summary>
    ///  Represents medium dash-dotted line.
    ///</summary>
    MediumDashDot = 10;
    ///<summary>
    ///  Represents thin dash-dot-dotted line.
    ///</summary>
    DashDotDot = 11;
    ///<summary>
    ///  Represents medium dash-dot-dotted line.
    ///</summary>
    MediumDashDotDot = 12;
    ///<summary>
    ///  Represents slanted medium dash-dotted line.
    ///</summary>
    SlantedDashDot = 13;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies how to apply style for the value of the cell.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellValueFormatStrategy')]
  DNCellValueFormatStrategy = type Integer;
  DNCellValueFormatStrategyHelper = record helper for DNCellValueFormatStrategy
  public const
    ///<summary>
    ///  Not formatted.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Only formatted with the cell's original style.
    ///</summary>
    CellStyle = 1;
    ///<summary>
    ///  Formatted with the cell's displayed style.
    ///</summary>
    DisplayStyle = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies a cell value type.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellValueType')]
  DNCellValueType = type Integer;
  DNCellValueTypeHelper = record helper for DNCellValueType
  public const
    ///<summary>
    ///  Cell value is boolean.
    ///</summary>
    IsBool = 0;
    ///<summary>
    ///  Cell value is datetime.
    ///</summary>
    IsDateTime = 1;
    ///<summary>
    ///  Cell contains error value
    ///</summary>
    IsError = 2;
    ///<summary>
    ///  Blank cell.
    ///</summary>
    IsNull = 3;
    ///<summary>
    ///  Cell value is numeric.
    ///</summary>
    IsNumeric = 4;
    ///<summary>
    ///  Cell value is string.
    ///</summary>
    IsString = 5;
    ///<summary>
    ///  Cell value type is unknown.
    ///</summary>
    IsUnknown = 6;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the axis type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.AxisType')]
  DNAxisType = type Integer;
  DNAxisTypeHelper = record helper for DNAxisType
  public const
    ///<summary>
    ///  Category axis
    ///</summary>
    Category = 0;
    ///<summary>
    ///  Value axis
    ///</summary>
    Value = 1;
    ///<summary>
    ///  Series axis
    ///</summary>
    Series = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the display mode of the background.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.BackgroundMode')]
  DNBackgroundMode = type Integer;
  DNBackgroundModeHelper = record helper for DNBackgroundMode
  public const
    ///<summary>
    ///  Automatic
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Opaque
    ///</summary>
    Opaque = 1;
    ///<summary>
    ///  Transparent
    ///</summary>
    Transparent = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the shape used with the 3-D bar or column chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.Bar3DShapeType')]
  DNBar3DShapeType = type Integer;
  DNBar3DShapeTypeHelper = record helper for DNBar3DShapeType
  public const
    ///<summary>
    ///  Box
    ///</summary>
    Box = 0;
    ///<summary>
    ///  PyramidToPoint
    ///</summary>
    PyramidToPoint = 1;
    ///<summary>
    ///  PyramidToMax
    ///</summary>
    PyramidToMax = 2;
    ///<summary>
    ///  Cylinder
    ///</summary>
    Cylinder = 3;
    ///<summary>
    ///  ConeToPoint
    ///</summary>
    ConeToPoint = 4;
    ///<summary>
    ///  ConeToMax
    ///</summary>
    ConeToMax = 5;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents what the bubble size represents on a bubble chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.BubbleSizeRepresents')]
  DNBubbleSizeRepresents = type Integer;
  DNBubbleSizeRepresentsHelper = record helper for DNBubbleSizeRepresents
  public const
    ///<summary>
    ///  Represents the value of <see cref="P:Aspose.Cells.Charts.Series.BubbleSizes" />
    ///  is area of the bubble.
    ///</summary>
    SizeIsArea = 0;
    ///<summary>
    ///  Represents the value of <see cref="P:Aspose.Cells.Charts.Series.BubbleSizes" />
    ///  is width of the bubble.
    ///</summary>
    SizeIsWidth = 1;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the category axis type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.CategoryType')]
  DNCategoryType = type Integer;
  DNCategoryTypeHelper = record helper for DNCategoryType
  public const
    ///<summary>
    ///  AutomaticScale
    ///</summary>
    AutomaticScale = 0;
    ///<summary>
    ///  CategoryScale
    ///</summary>
    CategoryScale = 1;
    ///<summary>
    ///  TimeScale
    ///</summary>
    TimeScale = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents line format type of chart line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartLineFormattingType')]
  DNChartLineFormattingType = type Integer;
  DNChartLineFormattingTypeHelper = record helper for DNChartLineFormattingType
  public const
    ///<summary>
    ///  Represents automatic formatting type.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Represents solid formatting type.
    ///</summary>
    Solid = 1;
    ///<summary>
    ///  Represents none formatting type.
    ///</summary>
    None = 2;
    ///<summary>
    ///  Gradient
    ///</summary>
    Gradient = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the marker style in a line chart, scatter chart, or radar chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartMarkerType')]
  DNChartMarkerType = type Integer;
  DNChartMarkerTypeHelper = record helper for DNChartMarkerType
  public const
    ///<summary>
    ///  Automatic markers.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Circular markers.
    ///</summary>
    Circle = 1;
    ///<summary>
    ///  Long bar markers
    ///</summary>
    Dash = 2;
    ///<summary>
    ///  Diamond-shaped markers.
    ///</summary>
    Diamond = 3;
    ///<summary>
    ///  Short bar markers.
    ///</summary>
    Dot = 4;
    ///<summary>
    ///  No markers.
    ///</summary>
    None = 5;
    ///<summary>
    ///  Square markers with a plus sign.
    ///</summary>
    SquarePlus = 6;
    ///<summary>
    ///  Square markers.
    ///</summary>
    Square = 7;
    ///<summary>
    ///  Square markers with an asterisk.
    ///</summary>
    SquareStar = 8;
    ///<summary>
    ///  Triangular markers.
    ///</summary>
    Triangle = 9;
    ///<summary>
    ///  Square markers with an X.
    ///</summary>
    SquareX = 10;
    ///<summary>
    ///  Picture
    ///</summary>
    Picture = 11;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the way the two sections of either a pie of pie chart or a bar of pie chart are split.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartSplitType')]
  DNChartSplitType = type Integer;
  DNChartSplitTypeHelper = record helper for DNChartSplitType
  public const
    ///<summary>
    ///  Represents the data points shall be split between the pie
    ///  and the second chart by putting the last Split Position
    ///  of the data points in the second chart
    ///</summary>
    Position = 0;
    ///<summary>
    ///  Represents the data points shall be split between the pie
    ///  and the second chart by putting the data points with
    ///  value less than Split Position in the second chart.
    ///</summary>
    Value = 1;
    ///<summary>
    ///  Represents the data points shall be split between the pie
    ///  and the second chart by putting the points with
    ///  percentage less than Split Position percent in the
    ///  second chart.
    ///</summary>
    PercentValue = 2;
    ///<summary>
    ///  Represents the data points shall be split between the pie
    ///  and the second chart according to the Custom Split
    ///  values.
    ///</summary>
    Custom = 3;
    ///<summary>
    ///  Represents the data points shall be split using the default
    ///  mechanism for this chart type.
    ///</summary>
    Auto = 4;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the text direction type of the chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartTextDirectionType')]
  DNChartTextDirectionType = type Integer;
  DNChartTextDirectionTypeHelper = record helper for DNChartTextDirectionType
  public const
    ///<summary>
    ///  Horizontal direction type.
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  Vertical direction type.
    ///</summary>
    Vertical = 1;
    ///<summary>
    ///  Rotate 90 angle.
    ///</summary>
    Rotate90 = 2;
    ///<summary>
    ///  Rotate 270 angle.
    ///</summary>
    Rotate270 = 3;
    ///<summary>
    ///  Stacked text.
    ///</summary>
    Stacked = 4;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Enumerates all chart types used in Excel.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartType')]
  DNChartType = type Integer;
  DNChartTypeHelper = record helper for DNChartType
  public const
    ///<summary>
    ///  Represents Area Chart.
    ///</summary>
    Area = 0;
    ///<summary>
    ///  Represents Stacked Area Chart.
    ///</summary>
    AreaStacked = 1;
    ///<summary>
    ///  Represents 100% Stacked Area Chart.
    ///</summary>
    Area100PercentStacked = 2;
    ///<summary>
    ///  Represents 3D Area Chart.
    ///</summary>
    Area3D = 3;
    ///<summary>
    ///  Represents 3D Stacked Area Chart.
    ///</summary>
    Area3DStacked = 4;
    ///<summary>
    ///  Represents 3D 100% Stacked Area Chart.
    ///</summary>
    Area3D100PercentStacked = 5;
    ///<summary>
    ///  Represents Bar Chart: Clustered Bar Chart.
    ///</summary>
    Bar = 6;
    ///<summary>
    ///  Represents Stacked Bar Chart.
    ///</summary>
    BarStacked = 7;
    ///<summary>
    ///  Represents 100% Stacked Bar Chart.
    ///</summary>
    Bar100PercentStacked = 8;
    ///<summary>
    ///  Represents 3D Colustered Bar Chart.
    ///</summary>
    Bar3DClustered = 9;
    ///<summary>
    ///  Represents 3D Stacked Bar Chart.
    ///</summary>
    Bar3DStacked = 10;
    ///<summary>
    ///  Represents 3D 100% Stacked Bar Chart.
    ///</summary>
    Bar3D100PercentStacked = 11;
    ///<summary>
    ///  Represents Bubble Chart.
    ///</summary>
    Bubble = 12;
    ///<summary>
    ///  Represents 3D Bubble Chart.
    ///</summary>
    Bubble3D = 13;
    ///<summary>
    ///  Represents Column Chart: Clustered Column Chart.
    ///</summary>
    Column = 14;
    ///<summary>
    ///  Represents Stacked Column Chart.
    ///</summary>
    ColumnStacked = 15;
    ///<summary>
    ///  Represents 100% Stacked Column Chart.
    ///</summary>
    Column100PercentStacked = 16;
    ///<summary>
    ///  Represents 3D Column Chart.
    ///</summary>
    Column3D = 17;
    ///<summary>
    ///  Represents 3D Clustered Column Chart.
    ///</summary>
    Column3DClustered = 18;
    ///<summary>
    ///  Represents 3D Stacked Column Chart.
    ///</summary>
    Column3DStacked = 19;
    ///<summary>
    ///  Represents 3D 100% Stacked Column Chart.
    ///</summary>
    Column3D100PercentStacked = 20;
    ///<summary>
    ///  Represents Cone Chart.
    ///</summary>
    Cone = 21;
    ///<summary>
    ///  Represents Stacked Cone Chart.
    ///</summary>
    ConeStacked = 22;
    ///<summary>
    ///  Represents 100% Stacked Cone Chart.
    ///</summary>
    Cone100PercentStacked = 23;
    ///<summary>
    ///  Represents Conical Bar Chart.
    ///</summary>
    ConicalBar = 24;
    ///<summary>
    ///  Represents Stacked Conical Bar Chart.
    ///</summary>
    ConicalBarStacked = 25;
    ///<summary>
    ///  Represents 100% Stacked Conical Bar Chart.
    ///</summary>
    ConicalBar100PercentStacked = 26;
    ///<summary>
    ///  Represents 3D Conical Column Chart.
    ///</summary>
    ConicalColumn3D = 27;
    ///<summary>
    ///  Represents Cylinder Chart.
    ///</summary>
    Cylinder = 28;
    ///<summary>
    ///  Represents Stacked Cylinder Chart.
    ///</summary>
    CylinderStacked = 29;
    ///<summary>
    ///  Represents 100% Stacked Cylinder Chart.
    ///</summary>
    Cylinder100PercentStacked = 30;
    ///<summary>
    ///  Represents Cylindrical Bar Chart.
    ///</summary>
    CylindricalBar = 31;
    ///<summary>
    ///  Represents Stacked Cylindrical Bar Chart.
    ///</summary>
    CylindricalBarStacked = 32;
    ///<summary>
    ///  Represents 100% Stacked Cylindrical Bar Chart.
    ///</summary>
    CylindricalBar100PercentStacked = 33;
    ///<summary>
    ///  Represents 3D Cylindrical Column Chart.
    ///</summary>
    CylindricalColumn3D = 34;
    ///<summary>
    ///  Represents Doughnut Chart.
    ///</summary>
    Doughnut = 35;
    ///<summary>
    ///  Represents Exploded Doughnut Chart.
    ///</summary>
    DoughnutExploded = 36;
    ///<summary>
    ///  Represents Line Chart.
    ///</summary>
    Line = 37;
    ///<summary>
    ///  Represents Stacked Line Chart.
    ///</summary>
    LineStacked = 38;
    ///<summary>
    ///  Represents 100% Stacked Line Chart.
    ///</summary>
    Line100PercentStacked = 39;
    ///<summary>
    ///  Represents Line Chart with data markers.
    ///</summary>
    LineWithDataMarkers = 40;
    ///<summary>
    ///  Represents Stacked Line Chart with data markers.
    ///</summary>
    LineStackedWithDataMarkers = 41;
    ///<summary>
    ///  Represents 100% Stacked Line Chart with data markers.
    ///</summary>
    Line100PercentStackedWithDataMarkers = 42;
    ///<summary>
    ///  Represents 3D Line Chart.
    ///</summary>
    Line3D = 43;
    ///<summary>
    ///  Represents Pie Chart.
    ///</summary>
    Pie = 44;
    ///<summary>
    ///  Represents 3D Pie Chart.
    ///</summary>
    Pie3D = 45;
    ///<summary>
    ///  Represents Pie of Pie Chart.
    ///</summary>
    PiePie = 46;
    ///<summary>
    ///  Represents Exploded Pie Chart.
    ///</summary>
    PieExploded = 47;
    ///<summary>
    ///  Represents 3D Exploded Pie Chart.
    ///</summary>
    Pie3DExploded = 48;
    ///<summary>
    ///  Represents Bar of Pie Chart.
    ///</summary>
    PieBar = 49;
    ///<summary>
    ///  Represents Pyramid Chart.
    ///</summary>
    Pyramid = 50;
    ///<summary>
    ///  Represents Stacked Pyramid Chart.
    ///</summary>
    PyramidStacked = 51;
    ///<summary>
    ///  Represents 100% Stacked Pyramid Chart.
    ///</summary>
    Pyramid100PercentStacked = 52;
    ///<summary>
    ///  Represents Pyramid Bar Chart.
    ///</summary>
    PyramidBar = 53;
    ///<summary>
    ///  Represents Stacked Pyramid Bar Chart.
    ///</summary>
    PyramidBarStacked = 54;
    ///<summary>
    ///  Represents 100% Stacked Pyramid Bar Chart.
    ///</summary>
    PyramidBar100PercentStacked = 55;
    ///<summary>
    ///  Represents 3D Pyramid Column Chart.
    ///</summary>
    PyramidColumn3D = 56;
    ///<summary>
    ///  Represents Radar Chart.
    ///</summary>
    Radar = 57;
    ///<summary>
    ///  Represents Radar Chart with data markers.
    ///</summary>
    RadarWithDataMarkers = 58;
    ///<summary>
    ///  Represents Filled Radar Chart.
    ///</summary>
    RadarFilled = 59;
    ///<summary>
    ///  Represents Scatter Chart.
    ///</summary>
    Scatter = 60;
    ///<summary>
    ///  Represents Scatter Chart connected by curves, with data markers.
    ///</summary>
    ScatterConnectedByCurvesWithDataMarker = 61;
    ///<summary>
    ///  Represents Scatter Chart connected by curves, without data markers.
    ///</summary>
    ScatterConnectedByCurvesWithoutDataMarker = 62;
    ///<summary>
    ///  Represents Scatter Chart connected by lines, with data markers.
    ///</summary>
    ScatterConnectedByLinesWithDataMarker = 63;
    ///<summary>
    ///  Represents Scatter Chart connected by lines, without data markers.
    ///</summary>
    ScatterConnectedByLinesWithoutDataMarker = 64;
    ///<summary>
    ///  Represents High-Low-Close Stock Chart.
    ///</summary>
    StockHighLowClose = 65;
    ///<summary>
    ///  Represents Open-High-Low-Close Stock Chart.
    ///</summary>
    StockOpenHighLowClose = 66;
    ///<summary>
    ///  Represents Volume-High-Low-Close Stock Chart.
    ///</summary>
    StockVolumeHighLowClose = 67;
    ///<summary>
    ///  Represents Volume-Open-High-Low-Close Stock Chart.
    ///</summary>
    StockVolumeOpenHighLowClose = 68;
    ///<summary>
    ///  Represents Surface Chart: 3D Surface Chart.
    ///</summary>
    Surface3D = 69;
    ///<summary>
    ///  Represents Wireframe 3D Surface Chart.
    ///</summary>
    SurfaceWireframe3D = 70;
    ///<summary>
    ///  Represents Contour Chart.
    ///</summary>
    SurfaceContour = 71;
    ///<summary>
    ///  Represents Wireframe Contour Chart.
    ///</summary>
    SurfaceContourWireframe = 72;
    ///<summary>
    ///  The series is laid out as box and whisker.
    ///</summary>
    BoxWhisker = 73;
    ///<summary>
    ///  The series is laid out as a funnel.
    ///</summary>
    Funnel = 74;
    ///<summary>
    ///  The series is laid out as pareto lines.
    ///</summary>
    ParetoLine = 75;
    ///<summary>
    ///  The series is laid out as a sunburst.
    ///</summary>
    Sunburst = 76;
    ///<summary>
    ///  The series is laid out as a treemap.
    ///</summary>
    Treemap = 77;
    ///<summary>
    ///  The series is laid out as a waterfall.
    ///</summary>
    Waterfall = 78;
    ///<summary>
    ///  The series is laid out as a histogram.
    ///</summary>
    Histogram = 79;
    ///<summary>
    ///  The series is laid out as a region map.
    ///</summary>
    Map = 80;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the axis cross type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.CrossType')]
  DNCrossType = type Integer;
  DNCrossTypeHelper = record helper for DNCrossType
  public const
    ///<summary>
    ///  Microsoft Excel sets the axis crossing point.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  The axis crosses at the maximum value.
    ///</summary>
    Maximum = 1;
    ///<summary>
    ///  The axis crosses at the minimum value.
    ///</summary>
    Minimum = 2;
    ///<summary>
    ///  The axis crosses at the custom value.
    ///</summary>
    Custom = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the separator type of DataLabels.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.DataLabelsSeparatorType')]
  DNDataLabelsSeparatorType = type Integer;
  DNDataLabelsSeparatorTypeHelper = record helper for DNDataLabelsSeparatorType
  public const
    ///<summary>
    ///  Represents automatic separator
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Represents space(" ")
    ///</summary>
    Space = 1;
    ///<summary>
    ///  Represents comma(",")
    ///</summary>
    Comma = 2;
    ///<summary>
    ///  Represents semicolon(";")
    ///</summary>
    Semicolon = 3;
    ///<summary>
    ///  Represents period(".")
    ///</summary>
    Period = 4;
    ///<summary>
    ///  Represents newline("\n")
    ///</summary>
    NewLine = 5;
    ///<summary>
    ///  Represents custom separator
    ///</summary>
    Custom = 6;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the separator type of DataLabels.
  ///</summary>
  ///<remarks>
  ///  NOTE: This member is now obsolete. Instead,
  ///  please use DataLabelsSeparatorType enum.
  ///  This property will be removed 12 months later since September 2020.
  ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
  [DNTypeName('Aspose.Cells.Charts.DataLablesSeparatorType')]
  DNDataLablesSeparatorType = type Integer;
  DNDataLablesSeparatorTypeHelper = record helper for DNDataLablesSeparatorType
  public const
    ///<summary>
    ///  Represents automatic separator
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Represents space(" ")
    ///</summary>
    Space = 1;
    ///<summary>
    ///  Represents comma(",")
    ///</summary>
    Comma = 2;
    ///<summary>
    ///  Represents semicolon(";")
    ///</summary>
    Semicolon = 3;
    ///<summary>
    ///  Represents period(".")
    ///</summary>
    Period = 4;
    ///<summary>
    ///  Represents newline("\n")
    ///</summary>
    NewLine = 5;
    ///<summary>
    ///  Represents custom separator
    ///</summary>
    Custom = 6;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the type of display unit.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.DisplayUnitType')]
  DNDisplayUnitType = type Integer;
  DNDisplayUnitTypeHelper = record helper for DNDisplayUnitType
  public const
    ///<summary>
    ///  Display unit is None.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100.
    ///</summary>
    Hundreds = 1;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000.
    ///</summary>
    Thousands = 2;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 10,000.
    ///</summary>
    TenThousands = 3;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100,000.
    ///</summary>
    HundredThousands = 4;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000.
    ///</summary>
    Millions = 5;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 10,000,000.
    ///</summary>
    TenMillions = 6;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100,000,000.
    ///</summary>
    HundredMillions = 7;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000,000.
    ///</summary>
    Billions = 8;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000,000,000.
    ///</summary>
    Trillions = 9;
    ///<summary>
    ///  The values on the chart shall be divided by 0.01.
    ///</summary>
    Percentage = 10;
    ///<summary>
    ///  specifies a custom value for the display unit.
    ///</summary>
    Cust = 11;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents error bar display type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ErrorBarDisplayType')]
  DNErrorBarDisplayType = type Integer;
  DNErrorBarDisplayTypeHelper = record helper for DNErrorBarDisplayType
  public const
    ///<summary>
    ///  Both
    ///</summary>
    Both = 0;
    ///<summary>
    ///  Minus
    ///</summary>
    Minus = 1;
    ///<summary>
    ///  None
    ///</summary>
    None = 2;
    ///<summary>
    ///  Plus
    ///</summary>
    Plus = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents error bar amount type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ErrorBarType')]
  DNErrorBarType = type Integer;
  DNErrorBarTypeHelper = record helper for DNErrorBarType
  public const
    ///<summary>
    ///  InnerCustom value type.
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Fixed value type.
    ///</summary>
    FixedValue = 1;
    ///<summary>
    ///  Percentage type
    ///</summary>
    Percent = 2;
    ///<summary>
    ///  Standard deviation type.
    ///</summary>
    StDev = 3;
    ///<summary>
    ///  Standard error type.
    ///</summary>
    StError = 4;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the type of formatting applied to an <see cref="T:Aspose.Cells.Drawing.Area" />
  ///  object or a <see cref="T:Aspose.Cells.Drawing.Line" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.FormattingType')]
  DNFormattingType = type Integer;
  DNFormattingTypeHelper = record helper for DNFormattingType
  public const
    ///<summary>
    ///  Represents automatic formatting type.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Represents none formatting type.
    ///</summary>
    None = 1;
    ///<summary>
    ///  Represents custom formatting type.
    ///</summary>
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents data label position type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.LabelPositionType')]
  DNLabelPositionType = type Integer;
  DNLabelPositionTypeHelper = record helper for DNLabelPositionType
  public const
    ///<summary>
    ///  Applies only to bar, 2d/3d pie charts
    ///</summary>
    Center = 0;
    ///<summary>
    ///  Applies only to bar, 2d/3d pie charts
    ///</summary>
    InsideBase = 1;
    ///<summary>
    ///  Applies only to bar charts
    ///</summary>
    InsideEnd = 2;
    ///<summary>
    ///  Applies only to bar, 2d/3d pie charts
    ///</summary>
    OutsideEnd = 3;
    ///<summary>
    ///  Applies only to line charts
    ///</summary>
    Above = 4;
    ///<summary>
    ///  Applies only to line charts
    ///</summary>
    Below = 5;
    ///<summary>
    ///  Applies only to line charts
    ///</summary>
    Left = 6;
    ///<summary>
    ///  Applies only to line charts
    ///</summary>
    Right = 7;
    ///<summary>
    ///  Applies only to 2d/3d pie charts
    ///</summary>
    BestFit = 8;
    ///<summary>
    ///  User moved the data labels, Only for reading chart from template file.
    ///</summary>
    Moved = 9;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Enumerates the legend position types.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.LegendPositionType')]
  DNLegendPositionType = type Integer;
  DNLegendPositionTypeHelper = record helper for DNLegendPositionType
  public const
    ///<summary>
    ///  Displays the legend to the bottom of the chart's plot area.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Displays the legend to the corner of the chart's plot area.
    ///</summary>
    Corner = 1;
    ///<summary>
    ///  Displays the legend to the top of the chart's plot area.
    ///</summary>
    Top = 2;
    ///<summary>
    ///  Displays the legend to the right of the chart's plot area.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Displays the legend to the left of the chart's plot area.
    ///</summary>
    Left = 4;
    ///<summary>
    ///  Represents that the legend is not docked.
    ///</summary>
    NotDocked = 7;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the layout of map chart's labels.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.MapChartLabelLayout')]
  DNMapChartLabelLayout = type Integer;
  DNMapChartLabelLayoutHelper = record helper for DNMapChartLabelLayout
  public const
    ///<summary>
    ///  Only best fit.
    ///</summary>
    BestFitOnly = 0;
    ///<summary>
    ///  Shows all labels.
    ///</summary>
    ShowAll = 1;
    ///<summary>
    ///  No labels.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents projection type of the map chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.MapChartProjectionType')]
  DNMapChartProjectionType = type Integer;
  DNMapChartProjectionTypeHelper = record helper for DNMapChartProjectionType
  public const
    ///<summary>
    ///  Automatic
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Mercator
    ///</summary>
    Mercator = 1;
    ///<summary>
    ///  Miller
    ///</summary>
    Miller = 2;
    ///<summary>
    ///  Albers
    ///</summary>
    Albers = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the region type of the map chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.MapChartRegionType')]
  DNMapChartRegionType = type Integer;
  DNMapChartRegionTypeHelper = record helper for DNMapChartRegionType
  public const
    ///<summary>
    ///  Automatic
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Only Data.
    ///</summary>
    DataOnly = 1;
    ///<summary>
    ///  Country region list.
    ///</summary>
    CountryRegionList = 2;
    ///<summary>
    ///  World.
    ///</summary>
    World = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the type of data plot by row or column.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.PlotDataByType')]
  DNPlotDataByType = type Integer;
  DNPlotDataByTypeHelper = record helper for DNPlotDataByType
  public const
    ///<summary>
    ///  By row.
    ///</summary>
    Row = 0;
    ///<summary>
    ///  By column.
    ///</summary>
    Column = 1;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents all plot empty cells type of a chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.PlotEmptyCellsType')]
  DNPlotEmptyCellsType = type Integer;
  DNPlotEmptyCellsTypeHelper = record helper for DNPlotEmptyCellsType
  public const
    ///<summary>
    ///  Not plotted(leave gap)
    ///</summary>
    NotPlotted = 0;
    ///<summary>
    ///  Zero
    ///</summary>
    Zero = 1;
    ///<summary>
    ///  Interpolated
    ///</summary>
    Interpolated = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents quartile calculation methods.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.QuartileCalculationType')]
  DNQuartileCalculationType = type Integer;
  DNQuartileCalculationTypeHelper = record helper for DNQuartileCalculationType
  public const
    ///<summary>
    ///  The quartile calculation includes the median when splitting the dataset into quartiles.
    ///</summary>
    Exclusive = 0;
    ///<summary>
    ///  The quartile calculation excludes the median when splitting the dataset into quartiles.
    ///</summary>
    Inclusive = 1;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the minimum and maximum value types for the sparkline vertical axis.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.SparklineAxisMinMaxType')]
  DNSparklineAxisMinMaxType = type Integer;
  DNSparklineAxisMinMaxTypeHelper = record helper for DNSparklineAxisMinMaxType
  public const
    ///<summary>
    ///  Automatic for each sparkline.
    ///</summary>
    AutoIndividual = 0;
    ///<summary>
    ///  Same for all sparklines in the group.
    ///</summary>
    Group = 1;
    ///<summary>
    ///  Custom value for sparkline.
    ///</summary>
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the preset style types for sparkline.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.SparklinePresetStyleType')]
  DNSparklinePresetStyleType = type Integer;
  DNSparklinePresetStyleTypeHelper = record helper for DNSparklinePresetStyleType
  public const
    ///<summary>
    ///  Style 1
    ///</summary>
    Style1 = 0;
    ///<summary>
    ///  Style 2
    ///</summary>
    Style2 = 1;
    ///<summary>
    ///  Style 3
    ///</summary>
    Style3 = 2;
    ///<summary>
    ///  Style 4
    ///</summary>
    Style4 = 3;
    ///<summary>
    ///  Style 5
    ///</summary>
    Style5 = 4;
    ///<summary>
    ///  Style 6
    ///</summary>
    Style6 = 5;
    ///<summary>
    ///  Style 7
    ///</summary>
    Style7 = 6;
    ///<summary>
    ///  Style 8
    ///</summary>
    Style8 = 7;
    ///<summary>
    ///  Style 9
    ///</summary>
    Style9 = 8;
    ///<summary>
    ///  Style 10
    ///</summary>
    Style10 = 9;
    ///<summary>
    ///  Style 11
    ///</summary>
    Style11 = 10;
    ///<summary>
    ///  Style 12
    ///</summary>
    Style12 = 11;
    ///<summary>
    ///  Style 13
    ///</summary>
    Style13 = 12;
    ///<summary>
    ///  Style 14
    ///</summary>
    Style14 = 13;
    ///<summary>
    ///  Style 15
    ///</summary>
    Style15 = 14;
    ///<summary>
    ///  Style 16
    ///</summary>
    Style16 = 15;
    ///<summary>
    ///  Style 17
    ///</summary>
    Style17 = 16;
    ///<summary>
    ///  Style 18
    ///</summary>
    Style18 = 17;
    ///<summary>
    ///  Style 19
    ///</summary>
    Style19 = 18;
    ///<summary>
    ///  Style 20
    ///</summary>
    Style20 = 19;
    ///<summary>
    ///  Style 21
    ///</summary>
    Style21 = 20;
    ///<summary>
    ///  Style 22
    ///</summary>
    Style22 = 21;
    ///<summary>
    ///  Style 23
    ///</summary>
    Style23 = 22;
    ///<summary>
    ///  Style 24
    ///</summary>
    Style24 = 23;
    ///<summary>
    ///  Style 25
    ///</summary>
    Style25 = 24;
    ///<summary>
    ///  Style 26
    ///</summary>
    Style26 = 25;
    ///<summary>
    ///  Style 27
    ///</summary>
    Style27 = 26;
    ///<summary>
    ///  Style 28
    ///</summary>
    Style28 = 27;
    ///<summary>
    ///  Style 29
    ///</summary>
    Style29 = 28;
    ///<summary>
    ///  Style 30
    ///</summary>
    Style30 = 29;
    ///<summary>
    ///  Style 31
    ///</summary>
    Style31 = 30;
    ///<summary>
    ///  Style 32
    ///</summary>
    Style32 = 31;
    ///<summary>
    ///  Style 33
    ///</summary>
    Style33 = 32;
    ///<summary>
    ///  Style 34
    ///</summary>
    Style34 = 33;
    ///<summary>
    ///  Style 35
    ///</summary>
    Style35 = 34;
    ///<summary>
    ///  Style 36
    ///</summary>
    Style36 = 35;
    ///<summary>
    ///  No preset style.
    ///</summary>
    Custom = 36;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the sparkline types.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.SparklineType')]
  DNSparklineType = type Integer;
  DNSparklineTypeHelper = record helper for DNSparklineType
  public const
    ///<summary>
    ///  Line sparkline.
    ///</summary>
    Line = 0;
    ///<summary>
    ///  Column sparkline.
    ///</summary>
    Column = 1;
    ///<summary>
    ///  Win/Loss sparkline.
    ///</summary>
    Stacked = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the position type of tick-mark labels on the specified axis.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.TickLabelPositionType')]
  DNTickLabelPositionType = type Integer;
  DNTickLabelPositionTypeHelper = record helper for DNTickLabelPositionType
  public const
    ///<summary>
    ///  Position type is high.
    ///</summary>
    High = 0;
    ///<summary>
    ///  Position type is low.
    ///</summary>
    Low = 1;
    ///<summary>
    ///  Position type is next to axis.
    ///</summary>
    NextToAxis = 2;
    ///<summary>
    ///  Position type is none.
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the tick mark type for the specified axis.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.TickMarkType')]
  DNTickMarkType = type Integer;
  DNTickMarkTypeHelper = record helper for DNTickMarkType
  public const
    ///<summary>
    ///  Tick mark type is Cross.
    ///</summary>
    Cross = 0;
    ///<summary>
    ///  Tick mark type is Inside.
    ///</summary>
    Inside = 1;
    ///<summary>
    ///  Tick mark type is None.
    ///</summary>
    None = 2;
    ///<summary>
    ///  Tick mark type is Outside
    ///</summary>
    Outside = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the base unit for the category axis.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.TimeUnit')]
  DNTimeUnit = type Integer;
  DNTimeUnitHelper = record helper for DNTimeUnit
  public const
    ///<summary>
    ///  Days
    ///</summary>
    Days = 0;
    ///<summary>
    ///  Months
    ///</summary>
    Months = 1;
    ///<summary>
    ///  Years
    ///</summary>
    Years = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  ///<summary>
  ///  Represents the trendline type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.TrendlineType')]
  DNTrendlineType = type Integer;
  DNTrendlineTypeHelper = record helper for DNTrendlineType
  public const
    ///<summary>
    ///  Exponential
    ///</summary>
    Exponential = 0;
    ///<summary>
    ///  Linear
    ///</summary>
    Linear = 1;
    ///<summary>
    ///  Logarithmic
    ///</summary>
    Logarithmic = 2;
    ///<summary>
    ///  MovingAverage
    ///</summary>
    MovingAverage = 3;
    ///<summary>
    ///  Polynomial
    ///</summary>
    Polynomial = 4;
    ///<summary>
    ///  Power
    ///</summary>
    Power = 5;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents all color type
  ///</summary>
  [DNTypeName('Aspose.Cells.ColorType')]
  DNColorType = type Integer;
  DNColorTypeHelper = record helper for DNColorType
  public const
    ///<summary>
    ///  Automatic color.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  It's automatic color,but the displayed color depends the setting of the OS System.
    ///</summary>
    ///<remarks>
    ///  Not supported.
    ///</remarks>
    AutomaticIndex = 1;
    ///<summary>
    ///  The RGB color.
    ///</summary>
    RGB = 2;
    ///<summary>
    ///  The color index in the color palette.
    ///</summary>
    IndexedColor = 3;
    ///<summary>
    ///  The theme color.
    ///</summary>
    Theme = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents consolidation function.
  ///</summary>
  [DNTypeName('Aspose.Cells.ConsolidationFunction')]
  DNConsolidationFunction = type Integer;
  DNConsolidationFunctionHelper = record helper for DNConsolidationFunction
  public const
    ///<summary>
    ///  Represents Sum function.
    ///</summary>
    Sum = 0;
    ///<summary>
    ///  Represents Count function.
    ///</summary>
    Count = 1;
    ///<summary>
    ///  Represents Average function.
    ///</summary>
    Average = 2;
    ///<summary>
    ///  Represents Max function.
    ///</summary>
    Max = 3;
    ///<summary>
    ///  Represents Min function.
    ///</summary>
    Min = 4;
    ///<summary>
    ///  Represents Product function.
    ///</summary>
    Product = 5;
    ///<summary>
    ///  Represents Count Nums function.
    ///</summary>
    CountNums = 6;
    ///<summary>
    ///  Represents StdDev function.
    ///</summary>
    StdDev = 7;
    ///<summary>
    ///  Represents StdDevp function.
    ///</summary>
    StdDevp = 8;
    ///<summary>
    ///  Represents Var function.
    ///</summary>
    Var_ = 9;
    ///<summary>
    ///  Represents Varp function.
    ///</summary>
    Varp = 10;
    ///<summary>
    ///  Represents Distinct Count function.
    ///</summary>
    ///<remarks>
    ///  Only valid for PivotTable with Data Module created since by 2013.
    ///</remarks>
    DistinctCount = 11;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  The content disposition type.
  ///</summary>
  [DNTypeName('Aspose.Cells.ContentDisposition')]
  DNContentDisposition = type Integer;
  DNContentDispositionHelper = record helper for DNContentDisposition
  public const
    ///<summary></summary>
    Inline_ = 0;
    ///<summary></summary>
    Attachment = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents type of copying format when inserting rows.
  ///</summary>
  [DNTypeName('Aspose.Cells.CopyFormatType')]
  DNCopyFormatType = type Integer;
  DNCopyFormatTypeHelper = record helper for DNCopyFormatType
  public const
    ///<summary>
    ///  Formats same as above row.
    ///</summary>
    SameAsAbove = 0;
    ///<summary>
    ///  Formats same as below row.
    ///</summary>
    SameAsBelow = 1;
    ///<summary>
    ///  Clears formatting.
    ///</summary>
    Clear = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents Excel country identifiers.
  ///</summary>
  [DNTypeName('Aspose.Cells.CountryCode')]
  DNCountryCode = type Integer;
  DNCountryCodeHelper = record helper for DNCountryCode
  public const
    ///<summary></summary>
    Default_ = 0;
    ///<summary>
    ///  United States
    ///</summary>
    USA = 1;
    ///<summary>
    ///  Canada
    ///</summary>
    Canada = 2;
    ///<summary>
    ///  Latin America, except Brazil
    ///</summary>
    LatinAmeric = 3;
    ///<summary>
    ///  Russia
    ///</summary>
    Russia = 7;
    ///<summary>
    ///  Egypt
    ///</summary>
    Egypt = 20;
    ///<summary>
    ///  Greece
    ///</summary>
    Greece = 30;
    ///<summary>
    ///  Netherlands
    ///</summary>
    Netherlands = 31;
    ///<summary>
    ///  Belgium
    ///</summary>
    Belgium = 32;
    ///<summary>
    ///  France
    ///</summary>
    France = 33;
    ///<summary>
    ///  Spain
    ///</summary>
    Spain = 34;
    ///<summary>
    ///  Hungary
    ///</summary>
    Hungary = 36;
    ///<summary>
    ///  Italy
    ///</summary>
    Italy = 39;
    ///<summary>
    ///  Switzerland
    ///</summary>
    Switzerland = 41;
    ///<summary>
    ///  Austria
    ///</summary>
    Austria = 43;
    ///<summary>
    ///  United Kingdom
    ///</summary>
    UnitedKingdom = 44;
    ///<summary>
    ///  Denmark
    ///</summary>
    Denmark = 45;
    ///<summary>
    ///  Sweden
    ///</summary>
    Sweden = 46;
    ///<summary>
    ///  Norway
    ///</summary>
    Norway = 47;
    ///<summary>
    ///  Poland
    ///</summary>
    Poland = 48;
    ///<summary>
    ///  Germany
    ///</summary>
    Germany = 49;
    ///<summary>
    ///  Mexico
    ///</summary>
    Mexico = 52;
    ///<summary>
    ///  Brazil
    ///</summary>
    Brazil = 55;
    ///<summary>
    ///  Australia
    ///</summary>
    Australia = 61;
    ///<summary>
    ///  New Zealand
    ///</summary>
    NewZealand = 64;
    ///<summary>
    ///  Thailand
    ///</summary>
    Thailand = 66;
    ///<summary>
    ///  Japan
    ///</summary>
    Japan = 81;
    ///<summary>
    ///  SouthKorea
    ///</summary>
    SouthKorea = 82;
    ///<summary>
    ///  Viet Nam
    ///</summary>
    VietNam = 84;
    ///<summary>
    ///  People's Republic of China
    ///</summary>
    China = 86;
    ///<summary>
    ///  Turkey
    ///</summary>
    Turkey = 90;
    ///<summary>
    ///  India
    ///</summary>
    India = 91;
    ///<summary>
    ///  Algeria
    ///</summary>
    Algeria = 213;
    ///<summary>
    ///  Morocco
    ///</summary>
    Morocco = 216;
    ///<summary>
    ///  Libya
    ///</summary>
    Libya = 218;
    ///<summary>
    ///  Portugal
    ///</summary>
    Portugal = 351;
    ///<summary>
    ///  Iceland
    ///</summary>
    Iceland = 354;
    ///<summary>
    ///  Finland
    ///</summary>
    Finland = 358;
    ///<summary>
    ///  Czech Republic
    ///</summary>
    Czech = 420;
    ///<summary>
    ///  Taiwan
    ///</summary>
    Taiwan = 886;
    ///<summary>
    ///  Lebanon
    ///</summary>
    Lebanon = 961;
    ///<summary>
    ///  Jordan
    ///</summary>
    Jordan = 962;
    ///<summary>
    ///  Syria
    ///</summary>
    Syria = 963;
    ///<summary>
    ///  Iraq
    ///</summary>
    Iraq = 964;
    ///<summary>
    ///  Kuwait
    ///</summary>
    Kuwait = 965;
    ///<summary>
    ///  Saudi Arabia
    ///</summary>
    Saudi = 966;
    ///<summary>
    ///  United Arab Emirates
    ///</summary>
    UnitedArabEmirates = 971;
    ///<summary>
    ///  Israel
    ///</summary>
    Israel = 972;
    ///<summary>
    ///  Qatar
    ///</summary>
    Qatar = 974;
    ///<summary>
    ///  Iran
    ///</summary>
    Iran = 981;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies the axis position for a range of cells with conditional formatting as data bars.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataBarAxisPosition')]
  DNDataBarAxisPosition = type Integer;
  DNDataBarAxisPositionHelper = record helper for DNDataBarAxisPosition
  public const
    ///<summary>
    ///  Display the axis at a variable position based on the ratio of the minimum negative value to the maximum positive value in the range.
    ///  Positive values are displayed in a left-to-right direction.
    ///  Negative values are displayed in a right-to-left direction.
    ///  When all values are positive or all values are negative, no axis is displayed.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Display the axis at the midpoint of the cell regardless of the set of values in the range.
    ///  Positive values are displayed in a left-to-right direction.
    ///  Negative values are displayed in a right-to-left direction.
    ///</summary>
    Midpoint = 1;
    ///<summary>
    ///  No axis is displayed, and both positive and negative values are displayed in the left-to-right direction.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies the border type of a data bar.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataBarBorderType')]
  DNDataBarBorderType = type Integer;
  DNDataBarBorderTypeHelper = record helper for DNDataBarBorderType
  public const
    ///<summary>
    ///  The data bar has no border.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The data bar has a solid border.
    ///</summary>
    Solid = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies how a data bar is filled with color.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataBarFillType')]
  DNDataBarFillType = type Integer;
  DNDataBarFillTypeHelper = record helper for DNDataBarFillType
  public const
    ///<summary>
    ///  The data bar is filled with solid color.
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  The data bar is filled with a color gradient.
    ///</summary>
    Gradient = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies whether to use the same border and fill color as positive data bars.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataBarNegativeColorType')]
  DNDataBarNegativeColorType = type Integer;
  DNDataBarNegativeColorTypeHelper = record helper for DNDataBarNegativeColorType
  public const
    ///<summary>
    ///  Use the color specified in the Negative Value and Axis Setting dialog box
    ///  or by using the ColorType and BorderColorType properties of the NegativeBarFormat object.
    ///</summary>
    Color = 0;
    ///<summary>
    ///  Use the same color as positive data bars.
    ///</summary>
    SameAsPositive = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies how to group dateTime values.
  ///</summary>
  [DNTypeName('Aspose.Cells.DateTimeGroupingType')]
  DNDateTimeGroupingType = type Integer;
  DNDateTimeGroupingTypeHelper = record helper for DNDateTimeGroupingType
  public const
    ///<summary>
    ///  Group by day.
    ///</summary>
    Day = 0;
    ///<summary>
    ///  Group by hour.
    ///</summary>
    Hour = 1;
    ///<summary>
    ///  Group by Minute.
    ///</summary>
    Minute = 2;
    ///<summary>
    ///  Group by Month.
    ///</summary>
    Month = 3;
    ///<summary>
    ///  Group by Second.
    ///</summary>
    Second = 4;
    ///<summary>
    ///  Group by Year.
    ///</summary>
    Year = 5;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the default edit language.
  ///</summary>
  [DNTypeName('Aspose.Cells.DefaultEditLanguage')]
  DNDefaultEditLanguage = type Integer;
  DNDefaultEditLanguageHelper = record helper for DNDefaultEditLanguage
  public const
    ///<summary>
    ///  Represents auto detecting edit language according to the text itself.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Represents English language.
    ///</summary>
    English = 1;
    ///<summary>
    ///  Represents Chinese, Japanese, Korean language.
    ///</summary>
    CJK = 2;
  end;


  //-------------namespace: Aspose.Cells.DigitalSignatures----------------
  ///<summary>
  ///  Type of XML Advanced Electronic Signature (XAdES).
  ///</summary>
  [DNTypeName('Aspose.Cells.DigitalSignatures.XAdESType')]
  DNXAdESType = type Integer;
  DNXAdESTypeHelper = record helper for DNXAdESType
  public const
    ///<summary>
    ///  XAdES is off.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Basic XAdES.
    ///</summary>
    XAdES = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the directory  type of the file name.
  ///</summary>
  [DNTypeName('Aspose.Cells.DirectoryType')]
  DNDirectoryType = type Integer;
  DNDirectoryTypeHelper = record helper for DNDirectoryType
  public const
    ///<summary>
    ///  Represents an MS-DOS drive letter. It is followed by the drive letter.
    ///  Or UNC file names, such as \\server\share\myfile.xls
    ///</summary>
    Volume = 0;
    ///<summary>
    ///  Indicates that the source workbook is on the same drive as the dependent workbook (the drive letter is omitted)
    ///</summary>
    SameVolume = 1;
    ///<summary>
    ///  Indicates that the source workbook is in a subdirectory of the current directory.
    ///</summary>
    DownDirectory = 2;
    ///<summary>
    ///  Indicates that the source workbook is in the parent directory of the current directory.
    ///</summary>
    UpDirectory = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents whether and how to show objects in the workbook.
  ///</summary>
  [DNTypeName('Aspose.Cells.DisplayDrawingObjects')]
  DNDisplayDrawingObjects = type Integer;
  DNDisplayDrawingObjectsHelper = record helper for DNDisplayDrawingObjects
  public const
    ///<summary>
    ///  Show all objects
    ///</summary>
    DisplayShapes = 0;
    ///<summary>
    ///  Show placeholders
    ///</summary>
    Placeholders = 1;
    ///<summary>
    ///  Hide all shapes.
    ///</summary>
    Hide = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the persistence method to persist an ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ActiveXPersistenceType')]
  DNActiveXPersistenceType = type Integer;
  DNActiveXPersistenceTypeHelper = record helper for DNActiveXPersistenceType
  public const
    ///<summary>
    ///  The data is stored as xml data.
    ///</summary>
    PropertyBag = 0;
    ///<summary>
    ///  The data is stored as a storage binary data.
    ///</summary>
    Storage = 1;
    ///<summary>
    ///  The data is stored as a stream binary data.
    ///</summary>
    Stream = 2;
    ///<summary>
    ///  The data is stored as a streaminit binary data.
    ///</summary>
    StreamInit = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the border type of the ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlBorderType')]
  DNControlBorderType = type Integer;
  DNControlBorderTypeHelper = record helper for DNControlBorderType
  public const
    ///<summary>
    ///  No border.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The single line.
    ///</summary>
    Single = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the position of the Caption relative to the control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlCaptionAlignmentType')]
  DNControlCaptionAlignmentType = type Integer;
  DNControlCaptionAlignmentTypeHelper = record helper for DNControlCaptionAlignmentType
  public const
    ///<summary>
    ///  The left of the control.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  The right of the control.
    ///</summary>
    Right = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the visual appearance of the list in a ListBox or ComboBox.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlListStyle')]
  DNControlListStyle = type Integer;
  DNControlListStyleHelper = record helper for DNControlListStyle
  public const
    ///<summary>
    ///  Displays a list in which the background of an item is highlighted when it is selected.
    ///</summary>
    Plain = 0;
    ///<summary>
    ///  Displays a list in which an option button or a checkbox next to each entry displays the selection state of that item.
    ///</summary>
    Option = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents how a ListBox or ComboBox searches its list as the user types.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlMatchEntryType')]
  DNControlMatchEntryType = type Integer;
  DNControlMatchEntryTypeHelper = record helper for DNControlMatchEntryType
  public const
    ///<summary>
    ///  The control searches for the next entry that starts with the character entered.
    ///  Repeatedly typing the same letter cycles through all entries beginning with that letter.
    ///</summary>
    FirstLetter = 0;
    ///<summary>
    ///  As each character is typed, the control searches for an entry matching all characters entered.
    ///</summary>
    Complete = 1;
    ///<summary>
    ///  The list will not be searched when characters are typed.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the type of icon displayed as the mouse pointer for the control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlMousePointerType')]
  DNControlMousePointerType = type Integer;
  DNControlMousePointerTypeHelper = record helper for DNControlMousePointerType
  public const
    ///<summary>
    ///  Standard pointer.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Arrow.
    ///</summary>
    Arrow = 1;
    ///<summary>
    ///  Cross-hair pointer.
    ///</summary>
    Cross = 2;
    ///<summary>
    ///  I-beam.
    ///</summary>
    IBeam = 3;
    ///<summary>
    ///  Double arrow pointing northeast and southwest.
    ///</summary>
    SizeNESW = 6;
    ///<summary>
    ///  Double arrow pointing north and south.
    ///</summary>
    SizeNS = 7;
    ///<summary>
    ///  Double arrow pointing northwest and southeast.
    ///</summary>
    SizeNWSE = 8;
    ///<summary>
    ///  Double arrow pointing west and east.
    ///</summary>
    SizeWE = 9;
    ///<summary>
    ///  Up arrow.
    ///</summary>
    UpArrow = 10;
    ///<summary>
    ///  Hourglass.
    ///</summary>
    HourGlass = 11;
    ///<summary>
    ///  "Not” symbol (circle with a diagonal line) on top of the object being dragged.
    ///</summary>
    NoDrop = 12;
    ///<summary>
    ///  Arrow with an hourglass.
    ///</summary>
    AppStarting = 13;
    ///<summary>
    ///  Arrow with a question mark.
    ///</summary>
    Help = 14;
    ///<summary>
    ///  "Size-all” cursor (arrows pointing north, south, east, and west).
    ///</summary>
    SizeAll = 15;
    ///<summary>
    ///  Uses the icon specified by the MouseIcon property.
    ///</summary>
    Custom = 99;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the alignment of the picture inside the Form or Image.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlPictureAlignmentType')]
  DNControlPictureAlignmentType = type Integer;
  DNControlPictureAlignmentTypeHelper = record helper for DNControlPictureAlignmentType
  public const
    ///<summary>
    ///  The top left corner.
    ///</summary>
    TopLeft = 0;
    ///<summary>
    ///  The top right corner.
    ///</summary>
    TopRight = 1;
    ///<summary>
    ///  The center.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  The bottom left corner.
    ///</summary>
    BottomLeft = 3;
    ///<summary>
    ///  The bottom right corner.
    ///</summary>
    BottomRight = 4;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the location of the control's picture relative to its caption.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlPicturePositionType')]
  DNControlPicturePositionType = type Integer;
  DNControlPicturePositionTypeHelper = record helper for DNControlPicturePositionType
  public const
    ///<summary>
    ///  The picture appears to the right of the caption.
    ///  The caption is aligned with the top of the picture.
    ///</summary>
    RightTop = 2;
    ///<summary>
    ///  The picture appears below the caption.
    ///  The caption is aligned with the left edge of the picture.
    ///</summary>
    BelowLeft = 6;
    ///<summary>
    ///  The picture appears below the caption.
    ///  The caption is centered above the picture.
    ///</summary>
    BelowCenter = 65543;
    ///<summary>
    ///  The picture appears to the left of the caption.
    ///  The caption is aligned with the top of the picture.
    ///</summary>
    LeftTop = 131072;
    ///<summary>
    ///  The picture appears below the caption.
    ///  The caption is aligned with the right edge of the picture.
    ///</summary>
    BelowRight = 131080;
    ///<summary>
    ///  The picture appears to the right of the caption.
    ///  The caption is centered relative to the picture.
    ///</summary>
    RightCenter = 196613;
    ///<summary>
    ///  The picture appears in the center of the control.
    ///  The caption is centered horizontally and vertically on top of the picture.
    ///</summary>
    Center = 262148;
    ///<summary>
    ///  The picture appears to the left of the caption.
    ///  The caption is centered relative to the picture.
    ///</summary>
    LeftCenter = 327683;
    ///<summary>
    ///  The picture appears above the caption.
    ///  The caption is aligned with the left edge of the picture.
    ///</summary>
    AboveLeft = 393216;
    ///<summary>
    ///  The picture appears to the right of the caption.
    ///  The caption is aligned with the bottom of the picture.
    ///</summary>
    RightBottom = 393224;
    ///<summary>
    ///  The picture appears above the caption.
    ///  The caption is centered below the picture.
    ///</summary>
    AboveCenter = 458753;
    ///<summary>
    ///  The picture appears above the caption.
    ///  The caption is aligned with the right edge of the picture.
    ///</summary>
    AboveRight = 524290;
    ///<summary>
    ///  The picture appears to the left of the caption.
    ///  The caption is aligned with the bottom of the picture.
    ///</summary>
    LeftBottom = 524294;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents how to display the picture.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlPictureSizeMode')]
  DNControlPictureSizeMode = type Integer;
  DNControlPictureSizeModeHelper = record helper for DNControlPictureSizeMode
  public const
    ///<summary>
    ///  Crops any part of the picture that is larger than the control's boundaries.
    ///</summary>
    Clip = 0;
    ///<summary>
    ///  Stretches the picture to fill the control's area.
    ///  This setting distorts the picture in either the horizontal or vertical direction.
    ///</summary>
    Stretch = 1;
    ///<summary>
    ///  Enlarges the picture, but does not distort the picture in either the horizontal or vertical direction.
    ///</summary>
    Zoom = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the type of scroll bar.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlScrollBarType')]
  DNControlScrollBarType = type Integer;
  DNControlScrollBarTypeHelper = record helper for DNControlScrollBarType
  public const
    ///<summary>
    ///  Displays no scroll bars.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Displays a horizontal scroll bar.
    ///</summary>
    Horizontal = 1;
    ///<summary>
    ///  Displays a vertical scroll bar.
    ///</summary>
    BarsVertical = 2;
    ///<summary>
    ///  Displays both a horizontal and a vertical scroll bar.
    ///</summary>
    BarsBoth = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents type of scroll orientation
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlScrollOrientation')]
  DNControlScrollOrientation = type Integer;
  DNControlScrollOrientationHelper = record helper for DNControlScrollOrientation
  public const
    ///<summary>
    ///  Control is rendered vertically.
    ///</summary>
    Vertical = 0;
    ///<summary>
    ///  Control is rendered horizontally.
    ///</summary>
    Horizontal = 1;
    ///<summary>
    ///  Control is rendered horizontally when the control's width is greater than its height.
    ///  Control is rendered vertically otherwise.
    ///</summary>
    Auto = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the type of special effect.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlSpecialEffectType')]
  DNControlSpecialEffectType = type Integer;
  DNControlSpecialEffectTypeHelper = record helper for DNControlSpecialEffectType
  public const
    ///<summary>
    ///  Flat
    ///</summary>
    Flat = 0;
    ///<summary>
    ///  Raised
    ///</summary>
    Raised = 1;
    ///<summary>
    ///  Sunken
    ///</summary>
    Sunken = 2;
    ///<summary>
    ///  Etched
    ///</summary>
    Etched = 3;
    ///<summary>
    ///  Bump
    ///</summary>
    Bump = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents all type of ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlType')]
  DNControlType = type Integer;
  DNControlTypeHelper = record helper for DNControlType
  public const
    ///<summary>
    ///  Button
    ///</summary>
    CommandButton = 0;
    ///<summary>
    ///  ComboBox
    ///</summary>
    ComboBox = 1;
    ///<summary>
    ///  CheckBox
    ///</summary>
    CheckBox = 2;
    ///<summary>
    ///  ListBox
    ///</summary>
    ListBox = 3;
    ///<summary>
    ///  TextBox
    ///</summary>
    TextBox = 4;
    ///<summary>
    ///  Spinner
    ///</summary>
    SpinButton = 5;
    ///<summary>
    ///  RadioButton
    ///</summary>
    RadioButton = 6;
    ///<summary>
    ///  Label
    ///</summary>
    Label_ = 7;
    ///<summary>
    ///  Image
    ///</summary>
    Image = 8;
    ///<summary>
    ///  ToggleButton
    ///</summary>
    ToggleButton = 9;
    ///<summary>
    ///  ScrollBar
    ///</summary>
    ScrollBar = 10;
    ///<summary>
    ///  Unknown
    ///</summary>
    Unknown = 11;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the symbol displayed on the drop button.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.DropButtonStyle')]
  DNDropButtonStyle = type Integer;
  DNDropButtonStyleHelper = record helper for DNDropButtonStyle
  public const
    ///<summary>
    ///  Displays a button with no symbol.
    ///</summary>
    Plain = 0;
    ///<summary>
    ///  Displays a button with a down arrow.
    ///</summary>
    Arrow = 1;
    ///<summary>
    ///  Displays a button with an ellipsis (...).
    ///</summary>
    Ellipsis = 2;
    ///<summary>
    ///  Displays a button with a horizontal line like an underscore character.
    ///</summary>
    Reduce = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Represents the default run-time mode of the Input Method Editor.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.InputMethodEditorMode')]
  DNInputMethodEditorMode = type Integer;
  DNInputMethodEditorModeHelper = record helper for DNInputMethodEditorMode
  public const
    ///<summary>
    ///  Does not control IME.
    ///</summary>
    NoControl = 0;
    ///<summary>
    ///  IME on.
    ///</summary>
    On_ = 1;
    ///<summary>
    ///  IME off. English mode.
    ///</summary>
    Off = 2;
    ///<summary>
    ///  IME off.User can't turn on IME by keyboard.
    ///</summary>
    Disable = 3;
    ///<summary>
    ///  IME on with Full-width hiragana mode.
    ///</summary>
    Hiragana = 4;
    ///<summary>
    ///  IME on with Full-width katakana mode.
    ///</summary>
    Katakana = 5;
    ///<summary>
    ///  IME on with Half-width katakana mode.
    ///</summary>
    KatakanaHalf = 6;
    ///<summary>
    ///  IME on with Full-width Alphanumeric mode.
    ///</summary>
    AlphaFull = 7;
    ///<summary>
    ///  IME on with Half-width Alphanumeric mode.
    ///</summary>
    Alpha = 8;
    ///<summary>
    ///  IME on with Full-width hangul mode.
    ///</summary>
    HangulFull = 9;
    ///<summary>
    ///  IME on with Half-width hangul mode.
    ///</summary>
    Hangul = 10;
    ///<summary>
    ///  IME on with Full-width hanzi mode.
    ///</summary>
    HanziFull = 11;
    ///<summary>
    ///  IME on with Half-width hanzi mode.
    ///</summary>
    Hanzi = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  ///<summary>
  ///  Specifies when to show the drop button
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ShowDropButtonType')]
  DNShowDropButtonType = type Integer;
  DNShowDropButtonTypeHelper = record helper for DNShowDropButtonType
  public const
    ///<summary>
    ///  Never show the drop button.
    ///</summary>
    Never = 0;
    ///<summary>
    ///  Show the drop button when the control has the focus.
    ///</summary>
    Focus = 1;
    ///<summary>
    ///  Always show the drop button.
    ///</summary>
    Always = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents all built-in auto shape type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.AutoShapeType')]
  DNAutoShapeType = type Integer;
  DNAutoShapeTypeHelper = record helper for DNAutoShapeType
  public const
    ///<summary></summary>
    NotPrimitive = 0;
    ///<summary></summary>
    Rectangle = 1;
    ///<summary></summary>
    RoundedRectangle = 2;
    ///<summary></summary>
    Oval = 3;
    ///<summary></summary>
    Diamond = 4;
    ///<summary></summary>
    IsoscelesTriangle = 5;
    ///<summary></summary>
    RightTriangle = 6;
    ///<summary></summary>
    Parallelogram = 7;
    ///<summary></summary>
    Trapezoid = 8;
    ///<summary></summary>
    Hexagon = 9;
    ///<summary></summary>
    Octagon = 10;
    ///<summary></summary>
    Cross = 11;
    ///<summary></summary>
    Star5 = 12;
    ///<summary></summary>
    RightArrow = 13;
    ///<summary></summary>
    HomePlate = 15;
    ///<summary></summary>
    Cube = 16;
    ///<summary></summary>
    Balloon = 17;
    ///<summary></summary>
    Seal = 18;
    ///<summary></summary>
    Arc = 19;
    ///<summary></summary>
    Line = 20;
    ///<summary></summary>
    Plaque = 21;
    ///<summary></summary>
    Can = 22;
    ///<summary></summary>
    Donut = 23;
    ///<summary></summary>
    TextSimple = 24;
    ///<summary></summary>
    TextOctagon = 25;
    ///<summary></summary>
    TextHexagon = 26;
    ///<summary></summary>
    TextCurve = 27;
    ///<summary></summary>
    TextWave = 28;
    ///<summary></summary>
    TextRing = 29;
    ///<summary></summary>
    TextOnCurve = 30;
    ///<summary></summary>
    msosptTextOnRing = 31;
    ///<summary></summary>
    StraightConnector = 32;
    ///<summary></summary>
    BentConnector2 = 33;
    ///<summary></summary>
    ElbowConnector = 34;
    ///<summary></summary>
    BentConnector4 = 35;
    ///<summary></summary>
    BentConnector5 = 36;
    ///<summary></summary>
    CurvedConnector2 = 37;
    ///<summary></summary>
    CurvedConnector = 38;
    ///<summary></summary>
    CurvedConnector4 = 39;
    ///<summary></summary>
    CurvedConnector5 = 40;
    ///<summary></summary>
    LineCalloutNoBorder2 = 41;
    ///<summary></summary>
    LineCalloutNoBorder3 = 42;
    ///<summary></summary>
    LineCalloutNoBorder4 = 43;
    ///<summary></summary>
    LineCalloutWithAccentBar2 = 44;
    ///<summary></summary>
    LineCalloutWithAccentBar3 = 45;
    ///<summary></summary>
    LineCalloutWithAccentBar4 = 46;
    ///<summary></summary>
    LineCalloutWithBorder2 = 47;
    ///<summary></summary>
    LineCalloutWithBorder3 = 48;
    ///<summary></summary>
    LineCalloutWithBorder4 = 49;
    ///<summary></summary>
    LineCalloutWithBorderAndAccentBar2 = 50;
    ///<summary></summary>
    LineCalloutWithBorderAndAccentBar3 = 51;
    ///<summary></summary>
    LineCalloutWithBorderAndAccentBar4 = 52;
    ///<summary></summary>
    DownRibbon = 53;
    ///<summary></summary>
    UpRibbon = 54;
    ///<summary></summary>
    Chevron = 55;
    ///<summary></summary>
    RegularPentagon = 56;
    ///<summary></summary>
    NoSymbol = 57;
    ///<summary></summary>
    Star8 = 58;
    ///<summary></summary>
    Star16 = 59;
    ///<summary></summary>
    Star32 = 60;
    ///<summary></summary>
    RectangularCallout = 61;
    ///<summary></summary>
    RoundedRectangularCallout = 62;
    ///<summary></summary>
    OvalCallout = 63;
    ///<summary></summary>
    Wave = 64;
    ///<summary></summary>
    FoldedCorner = 65;
    ///<summary></summary>
    LeftArrow = 66;
    ///<summary></summary>
    DownArrow = 67;
    ///<summary></summary>
    UpArrow = 68;
    ///<summary></summary>
    LeftRightArrow = 69;
    ///<summary></summary>
    UpDownArrow = 70;
    ///<summary></summary>
    Explosion1 = 71;
    ///<summary></summary>
    Explosion2 = 72;
    ///<summary></summary>
    LightningBolt = 73;
    ///<summary></summary>
    Heart = 74;
    ///<summary></summary>
    PictureFrame = 75;
    ///<summary></summary>
    QuadArrow = 76;
    ///<summary></summary>
    LeftArrowCallout = 77;
    ///<summary></summary>
    RightArrowCallout = 78;
    ///<summary></summary>
    UpArrowCallout = 79;
    ///<summary></summary>
    DownArrowCallout = 80;
    ///<summary></summary>
    LeftRightArrowCallout = 81;
    ///<summary></summary>
    UpDownArrowCallout = 82;
    ///<summary></summary>
    QuadArrowCallout = 83;
    ///<summary></summary>
    Bevel = 84;
    ///<summary></summary>
    LeftBracket = 85;
    ///<summary></summary>
    RightBracket = 86;
    ///<summary></summary>
    LeftBrace = 87;
    ///<summary></summary>
    RightBrace = 88;
    ///<summary></summary>
    LeftUpArrow = 89;
    ///<summary></summary>
    BentUpArrow = 90;
    ///<summary></summary>
    BentArrow = 91;
    ///<summary></summary>
    Star24 = 92;
    ///<summary></summary>
    StripedRightArrow = 93;
    ///<summary></summary>
    NotchedRightArrow = 94;
    ///<summary></summary>
    BlockArc = 95;
    ///<summary></summary>
    SmileyFace = 96;
    ///<summary></summary>
    VerticalScroll = 97;
    ///<summary></summary>
    HorizontalScroll = 98;
    ///<summary></summary>
    CircularArrow = 99;
    ///<summary>
    ///  A value that SHOULD NOT be used.
    ///</summary>
    NotchedCircularArrow = 100;
    ///<summary></summary>
    UTurnArrow = 101;
    ///<summary></summary>
    CurvedRightArrow = 102;
    ///<summary></summary>
    CurvedLeftArrow = 103;
    ///<summary></summary>
    CurvedUpArrow = 104;
    ///<summary></summary>
    CurvedDownArrow = 105;
    ///<summary></summary>
    CloudCallout = 106;
    ///<summary></summary>
    CurvedDownRibbon = 107;
    ///<summary></summary>
    CurvedUpRibbon = 108;
    ///<summary></summary>
    FlowChartProcess = 109;
    ///<summary></summary>
    FlowChartDecision = 110;
    ///<summary></summary>
    FlowChartData = 111;
    ///<summary></summary>
    FlowChartPredefinedProcess = 112;
    ///<summary></summary>
    FlowChartInternalStorage = 113;
    ///<summary></summary>
    FlowChartDocument = 114;
    ///<summary></summary>
    FlowChartMultidocument = 115;
    ///<summary></summary>
    FlowChartTerminator = 116;
    ///<summary></summary>
    FlowChartPreparation = 117;
    ///<summary></summary>
    FlowChartManualInput = 118;
    ///<summary></summary>
    FlowChartManualOperation = 119;
    ///<summary></summary>
    FlowChartConnector = 120;
    ///<summary></summary>
    FlowChartCard = 121;
    ///<summary></summary>
    FlowChartPunchedTape = 122;
    ///<summary></summary>
    FlowChartSummingJunction = 123;
    ///<summary></summary>
    FlowChartOr = 124;
    ///<summary></summary>
    FlowChartCollate = 125;
    ///<summary></summary>
    FlowChartSort = 126;
    ///<summary></summary>
    FlowChartExtract = 127;
    ///<summary></summary>
    FlowChartMerge = 128;
    ///<summary></summary>
    FlowChartOfflineStorage = 129;
    ///<summary></summary>
    FlowChartStoredData = 130;
    ///<summary></summary>
    FlowChartSequentialAccessStorage = 131;
    ///<summary></summary>
    FlowChartMagneticDisk = 132;
    ///<summary></summary>
    FlowChartDirectAccessStorage = 133;
    ///<summary></summary>
    FlowChartDisplay = 134;
    ///<summary></summary>
    FlowChartDelay = 135;
    ///<summary>
    ///  A plain text shape.
    ///</summary>
    TextPlainText = 136;
    ///<summary>
    ///  An octagonal text shape.
    ///</summary>
    TextStop = 137;
    ///<summary>
    ///  A triangular text shape pointing upwards.
    ///</summary>
    TextTriangle = 138;
    ///<summary>
    ///  A triangular text shape pointing downwards.
    ///</summary>
    TextTriangleInverted = 139;
    ///<summary>
    ///  A chevron text shape pointing upwards.
    ///</summary>
    TextChevron = 140;
    ///<summary>
    ///  A chevron text shape pointing downwards.
    ///</summary>
    TextChevronInverted = 141;
    ///<summary>
    ///  A circular text shape, as if reading an inscription on the inside of a ring.
    ///</summary>
    TextRingInside = 142;
    ///<summary>
    ///  A circular text shape, as if reading an inscription on the outside of a ring.
    ///</summary>
    TextRingOutside = 143;
    ///<summary>
    ///  An upward arching curved text shape.
    ///</summary>
    TextArchUpCurve = 144;
    ///<summary>
    ///  A downward arching curved text shape.
    ///</summary>
    TextArchDownCurve = 145;
    ///<summary>
    ///  A circular text shape.
    ///</summary>
    TextCircleCurve = 146;
    ///<summary>
    ///  A text shape that resembles a button.
    ///</summary>
    TextButtonCurve = 147;
    ///<summary>
    ///  An upward arching text shape.
    ///</summary>
    TextArchUpPour = 148;
    ///<summary>
    ///  A downward arching text shape.
    ///</summary>
    TextArchDownPour = 149;
    ///<summary>
    ///  A circular text shape.
    ///</summary>
    TextCirclePour = 150;
    ///<summary>
    ///  A text shape that resembles a button.
    ///</summary>
    TextButtonPour = 151;
    ///<summary>
    ///  An upward curving text shape.
    ///</summary>
    TextCurveUp = 152;
    ///<summary>
    ///  A downward curving text shape.
    ///</summary>
    TextCurveDown = 153;
    ///<summary>
    ///  A cascading text shape pointed upwards.
    ///</summary>
    TextCascadeUp = 154;
    ///<summary>
    ///  A cascading text shape pointed downwards.
    ///</summary>
    TextCascadeDown = 155;
    ///<summary>
    ///  A wavy text shape.
    ///</summary>
    TextWave1 = 156;
    ///<summary>
    ///  A wavy text shape.
    ///</summary>
    TextWave2 = 157;
    ///<summary>
    ///  A wavy text shape.
    ///</summary>
    TextDoubleWave1 = 158;
    ///<summary>
    ///  A wavy text shape.
    ///</summary>
    ///<remarks>
    ///  NOTE: This enum is now obsolete. Instead, please use AutoShape.TextDoubleWave1.
    ///  This property will be removed 12 months later since April 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    TextWave3 = 158;
    ///<summary>
    ///  A wavy text shape.
    ///</summary>
    ///<remarks>
    ///  NOTE: This enum is now obsolete. Instead, please use AutoShape.TextDoubleWave2.
    ///  This property will be removed 12 months later since April 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    TextWave4 = 159;
    ///<summary>
    ///  A wavy text shape.
    ///</summary>
    TextDoubleWave2 = 159;
    ///<summary>
    ///  A text shape that expands vertically in the middle.
    ///</summary>
    TextInflate = 160;
    ///<summary>
    ///  A text shape that shrinks vertically in the middle.
    ///</summary>
    TextDeflate = 161;
    ///<summary>
    ///  A text shape that expands downward in the middle.
    ///</summary>
    TextInflateBottom = 162;
    ///<summary>
    ///  A text shape that shrinks upwards in the middle.
    ///</summary>
    TextDeflateBottom = 163;
    ///<summary>
    ///  A text shape that expands upward in the middle.
    ///</summary>
    TextInflateTop = 164;
    ///<summary>
    ///  A text shape that shrinks downward in the middle.
    ///</summary>
    TextDeflateTop = 165;
    ///<summary>
    ///  A text shape where lower lines expand upward. Upper lines shrink to compensate.
    ///</summary>
    TextDeflateInflate = 166;
    ///<summary>
    ///  A text shape where lines in the center expand vertically. Upper and lower lines shrink to compensate.
    ///</summary>
    TextDeflateInflateDeflate = 167;
    ///<summary>
    ///  A text shape that shrinks vertically on the right side.
    ///</summary>
    TextFadeRight = 168;
    ///<summary>
    ///  A text shape that shrinks vertically on the left side.
    ///</summary>
    TextFadeLeft = 169;
    ///<summary>
    ///  A text shape that shrinks horizontally on top.
    ///</summary>
    TextFadeUp = 170;
    ///<summary>
    ///  A text shape that shrinks horizontally on bottom.
    ///</summary>
    TextFadeDown = 171;
    ///<summary>
    ///  An upward slanted text shape.
    ///</summary>
    TextSlantUp = 172;
    ///<summary>
    ///  A downward slanted text shape.
    ///</summary>
    TextSlantDown = 173;
    ///<summary>
    ///  A text shape that is curved upwards as if being read on the side of a can.
    ///</summary>
    TextCanUp = 174;
    ///<summary>
    ///  A text shape that is curved downwards as if being read on the side of a can.
    ///</summary>
    TextCanDown = 175;
    ///<summary></summary>
    FlowChartAlternateProcess = 176;
    ///<summary></summary>
    FlowChartOffpageConnector = 177;
    ///<summary></summary>
    LineCalloutNoBorder1 = 178;
    ///<summary></summary>
    LineCalloutWithAccentBar1 = 179;
    ///<summary></summary>
    LineCalloutWithBorder1 = 180;
    ///<summary></summary>
    LineCalloutWithBorderAndAccentBar1 = 181;
    ///<summary></summary>
    LeftRightUpArrow = 182;
    ///<summary></summary>
    Sun = 183;
    ///<summary></summary>
    Moon = 184;
    ///<summary>
    ///  A shape enclosed in brackets.
    ///</summary>
    DoubleBracket = 185;
    ///<summary>
    ///  A shape enclosed in braces.
    ///</summary>
    DoubleBrace = 186;
    ///<summary></summary>
    Star4 = 187;
    ///<summary></summary>
    DoubleWave = 188;
    ///<summary></summary>
    BlankActionButton = 189;
    ///<summary></summary>
    HomeActionButton = 190;
    ///<summary></summary>
    HelpActionButton = 191;
    ///<summary></summary>
    InformationActionButton = 192;
    ///<summary></summary>
    ForwardNextActionButton = 193;
    ///<summary></summary>
    BackPreviousActionButton = 194;
    ///<summary></summary>
    EndActionButton = 195;
    ///<summary></summary>
    BeginningActionButton = 196;
    ///<summary></summary>
    ReturnActionButton = 197;
    ///<summary></summary>
    DocumentActionButton = 198;
    ///<summary></summary>
    SoundActionButton = 199;
    ///<summary></summary>
    MovieActionButton = 200;
    ///<summary>
    ///  This value SHOULD NOT be used.
    ///</summary>
    HostControl = 201;
    ///<summary></summary>
    TextBox = 202;
    ///<summary></summary>
    Heptagon = 2049;
    ///<summary></summary>
    Decagon = 2050;
    ///<summary></summary>
    Dodecagon = 2051;
    ///<summary></summary>
    Star6 = 2052;
    ///<summary></summary>
    Star7 = 2053;
    ///<summary></summary>
    Star10 = 2054;
    ///<summary></summary>
    Star12 = 2055;
    ///<summary></summary>
    RoundSingleCornerRectangle = 2056;
    ///<summary></summary>
    RoundSameSideCornerRectangle = 2057;
    ///<summary></summary>
    RoundDiagonalCornerRectangle = 2058;
    ///<summary></summary>
    SnipRoundSingleCornerRectangle = 2059;
    ///<summary></summary>
    SnipSingleCornerRectangle = 2060;
    ///<summary></summary>
    SnipSameSideCornerRectangle = 2061;
    ///<summary></summary>
    SnipDiagonalCornerRectangle = 2062;
    ///<summary></summary>
    Teardrop = 2063;
    ///<summary></summary>
    Pie = 2064;
    ///<summary></summary>
    HalfFrame = 2066;
    ///<summary></summary>
    L_Shape = 2067;
    ///<summary></summary>
    DiagonalStripe = 2068;
    ///<summary></summary>
    Chord = 2069;
    ///<summary></summary>
    Cloud = 2070;
    ///<summary></summary>
    MathPlus = 2071;
    ///<summary></summary>
    MathMinus = 2072;
    ///<summary></summary>
    MathMultiply = 2073;
    ///<summary></summary>
    MathDivide = 2074;
    ///<summary></summary>
    MathEqual = 2075;
    ///<summary></summary>
    MathNotEqual = 2076;
    ///<summary></summary>
    LineInv = 2077;
    ///<summary></summary>
    NonIsoscelesTrapezoid = 2078;
    ///<summary></summary>
    PieWedge = 2079;
    ///<summary></summary>
    LeftCircularArrow = 2080;
    ///<summary></summary>
    LeftRightCircularArrow = 2081;
    ///<summary></summary>
    SwooshArrow = 2082;
    ///<summary></summary>
    LeftRightRibbon = 2083;
    ///<summary></summary>
    TextNoShape = 2084;
    ///<summary></summary>
    Gear6 = 2097;
    ///<summary></summary>
    Gear9 = 2098;
    ///<summary></summary>
    Funnel = 2099;
    ///<summary></summary>
    CornerTabs = 2100;
    ///<summary></summary>
    SquareTabs = 2101;
    ///<summary></summary>
    PlaqueTabs = 2102;
    ///<summary></summary>
    ChartX = 2103;
    ///<summary></summary>
    ChartStar = 2104;
    ///<summary></summary>
    ChartPlus = 2105;
    ///<summary></summary>
    Frame = 2106;
    ///<summary></summary>
    Model3D = 2107;
    ///<summary>
    ///  There is no such type in Excel
    ///</summary>
    RoundCallout = 2108;
    ///<summary>
    ///  There is no such type in Excel
    ///</summary>
    TextArchLeftPour = 2109;
    ///<summary>
    ///  There is no such type in Excel
    ///</summary>
    TextArchRightPour = 2110;
    ///<summary>
    ///  There is no such type in Excel
    ///</summary>
    TextArchLeftCurve = 2111;
    ///<summary>
    ///  There is no such type in Excel
    ///</summary>
    TextArchRightCurve = 2112;
    ///<summary></summary>
    Unknown = 4095;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents a preset for a type of bevel which can be applied to a shape in 3D.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.BevelPresetType')]
  DNBevelPresetType = type Integer;
  DNBevelPresetTypeHelper = record helper for DNBevelPresetType
  public const
    ///<summary>
    ///  No bevel
    ///</summary>
    None = 0;
    ///<summary>
    ///  Angle
    ///</summary>
    Angle = 1;
    ///<summary>
    ///  Art deco
    ///</summary>
    ArtDeco = 2;
    ///<summary>
    ///  Circle
    ///</summary>
    Circle = 3;
    ///<summary>
    ///  Convex
    ///</summary>
    Convex = 4;
    ///<summary>
    ///  Cool slant
    ///</summary>
    CoolSlant = 5;
    ///<summary>
    ///  Cross
    ///</summary>
    Cross = 6;
    ///<summary>
    ///  Divot
    ///</summary>
    Divot = 7;
    ///<summary>
    ///  Hard edge
    ///</summary>
    HardEdge = 8;
    ///<summary>
    ///  Relaxed inset
    ///</summary>
    RelaxedInset = 9;
    ///<summary>
    ///  Riblet
    ///</summary>
    Riblet = 10;
    ///<summary>
    ///  Slope
    ///</summary>
    Slope = 11;
    ///<summary>
    ///  Soft round
    ///</summary>
    SoftRound = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents a preset for a type of bevel which can be applied to a shape in 3D.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.BevelType')]
  DNBevelType = type Integer;
  DNBevelTypeHelper = record helper for DNBevelType
  public const
    ///<summary>
    ///  No bevel
    ///</summary>
    None = 0;
    ///<summary>
    ///  Angle
    ///</summary>
    Angle = 1;
    ///<summary>
    ///  Art deco
    ///</summary>
    ArtDeco = 2;
    ///<summary>
    ///  Circle
    ///</summary>
    Circle = 3;
    ///<summary>
    ///  Convex
    ///</summary>
    Convex = 4;
    ///<summary>
    ///  Cool slant
    ///</summary>
    CoolSlant = 5;
    ///<summary>
    ///  Cross
    ///</summary>
    Cross = 6;
    ///<summary>
    ///  Divot
    ///</summary>
    Divot = 7;
    ///<summary>
    ///  Hard edge
    ///</summary>
    HardEdge = 8;
    ///<summary>
    ///  Relaxed inset
    ///</summary>
    RelaxedInset = 9;
    ///<summary>
    ///  Riblet
    ///</summary>
    Riblet = 10;
    ///<summary>
    ///  Slope
    ///</summary>
    Slope = 11;
    ///<summary>
    ///  Soft round
    ///</summary>
    SoftRound = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the check value type of the check box.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.CheckValueType')]
  DNCheckValueType = type Integer;
  DNCheckValueTypeHelper = record helper for DNCheckValueType
  public const
    ///<summary>
    ///  UnChecked
    ///</summary>
    UnChecked = 0;
    ///<summary>
    ///  Checked
    ///</summary>
    Checked = 1;
    ///<summary>
    ///  Mixed
    ///</summary>
    Mixed = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Specifies the preset shape geometry that is to be used for a chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.DataLabelShapeType')]
  DNDataLabelShapeType = type Integer;
  DNDataLabelShapeTypeHelper = record helper for DNDataLabelShapeType
  public const
    ///<summary>
    ///  Represents the rectangle shape.
    ///</summary>
    Rect = 0;
    ///<summary>
    ///  Represents the round rectangle shape.
    ///</summary>
    RoundRect = 1;
    ///<summary>
    ///  Represents the ellipse shape.
    ///</summary>
    Ellipse = 2;
    ///<summary>
    ///  Represents the right arrow callout shape.
    ///</summary>
    RightArrowCallout = 3;
    ///<summary>
    ///  Represents the down arrow callout shape.
    ///</summary>
    DownArrowCallout = 4;
    ///<summary>
    ///  Represents the left arrow callout shape.
    ///</summary>
    LeftArrowCallout = 5;
    ///<summary>
    ///  Represents the up arrow callout shape.
    ///</summary>
    UpArrowCallout = 6;
    ///<summary>
    ///  Represents the wedge rectangle callout shape.
    ///</summary>
    WedgeRectCallout = 7;
    ///<summary>
    ///  Represents the wedge round rectangle callout shape.
    ///</summary>
    WedgeRoundRectCallout = 8;
    ///<summary>
    ///  Represents the wedge ellipse callout shape.
    ///</summary>
    WedgeEllipseCallout = 9;
    ///<summary>
    ///  Represents the line callout shape.
    ///</summary>
    LineCallout = 10;
    ///<summary>
    ///  Represents the bent line callout  shape.
    ///</summary>
    BentLineCallout = 11;
    ///<summary>
    ///  Represents the line with accent bar callout shape.
    ///</summary>
    LineWithAccentBarCallout = 12;
    ///<summary>
    ///  Represents the bent line with accent bar callout shape.
    ///</summary>
    BentLineWithAccentBarCallout = 13;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Enumerates shape fill pattern types.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.FillPattern')]
  DNFillPattern = type Integer;
  DNFillPatternHelper = record helper for DNFillPattern
  public const
    ///<summary>
    ///  Represents no background.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents solid pattern.
    ///</summary>
    Solid = 1;
    ///<summary>
    ///  Represents 5% gray pattern.
    ///</summary>
    Gray5 = 2;
    ///<summary>
    ///  Represents 10% gray pattern.
    ///</summary>
    Gray10 = 3;
    ///<summary>
    ///  Represents 20% gray pattern.
    ///</summary>
    Gray20 = 4;
    ///<summary>
    ///  Represents 30% gray pattern.
    ///</summary>
    Gray30 = 5;
    ///<summary>
    ///  Represents 40% gray pattern.
    ///</summary>
    Gray40 = 6;
    ///<summary>
    ///  Represents 50% gray pattern.
    ///</summary>
    Gray50 = 7;
    ///<summary>
    ///  Represents 60% gray pattern.
    ///</summary>
    Gray60 = 8;
    ///<summary>
    ///  Represents 70% gray pattern.
    ///</summary>
    Gray70 = 9;
    ///<summary>
    ///  Represents 75% gray pattern.
    ///</summary>
    Gray75 = 10;
    ///<summary>
    ///  Represents 80% gray pattern.
    ///</summary>
    Gray80 = 11;
    ///<summary>
    ///  Represents 90% gray pattern.
    ///</summary>
    Gray90 = 12;
    ///<summary>
    ///  Represents 25% gray pattern.
    ///</summary>
    Gray25 = 13;
    ///<summary>
    ///  Represents light downward diagonal pattern.
    ///</summary>
    LightDownwardDiagonal = 14;
    ///<summary>
    ///  Represents light upward diagonal pattern.
    ///</summary>
    LightUpwardDiagonal = 15;
    ///<summary>
    ///  Represents dark downward diagonal pattern.
    ///</summary>
    DarkDownwardDiagonal = 16;
    ///<summary>
    ///  Represents dark upward diagonal pattern.
    ///</summary>
    DarkUpwardDiagonal = 17;
    ///<summary>
    ///  Represents wide downward diagonal pattern.
    ///</summary>
    WideDownwardDiagonal = 18;
    ///<summary>
    ///  Represents wide upward diagonal pattern.
    ///</summary>
    WideUpwardDiagonal = 19;
    ///<summary>
    ///  Represents light vertical pattern.
    ///</summary>
    LightVertical = 20;
    ///<summary>
    ///  Represents light horizontal pattern.
    ///</summary>
    LightHorizontal = 21;
    ///<summary>
    ///  Represents narrow vertical pattern.
    ///</summary>
    NarrowVertical = 22;
    ///<summary>
    ///  Represents narrow horizontal pattern.
    ///</summary>
    NarrowHorizontal = 23;
    ///<summary>
    ///  Represents dark vertical pattern.
    ///</summary>
    DarkVertical = 24;
    ///<summary>
    ///  Represents dark horizontal pattern.
    ///</summary>
    DarkHorizontal = 25;
    ///<summary>
    ///  Represents dashed downward diagonal pattern.
    ///</summary>
    DashedDownwardDiagonal = 26;
    ///<summary>
    ///  Represents dashed upward diagonal pattern.
    ///</summary>
    DashedUpwardDiagonal = 27;
    ///<summary>
    ///  Represents dashed vertical pattern.
    ///</summary>
    DashedVertical = 28;
    ///<summary>
    ///  Represents dashed horizontal pattern.
    ///</summary>
    DashedHorizontal = 29;
    ///<summary>
    ///  Represents small confetti pattern.
    ///</summary>
    SmallConfetti = 30;
    ///<summary>
    ///  Represents large confetti pattern.
    ///</summary>
    LargeConfetti = 31;
    ///<summary>
    ///  Represents zig zag pattern.
    ///</summary>
    ZigZag = 32;
    ///<summary>
    ///  Represents wave pattern.
    ///</summary>
    Wave = 33;
    ///<summary>
    ///  Represents diagonal brick pattern.
    ///</summary>
    DiagonalBrick = 34;
    ///<summary>
    ///  Represents horizontal brick pattern.
    ///</summary>
    HorizontalBrick = 35;
    ///<summary>
    ///  Represents weave pattern.
    ///</summary>
    Weave = 36;
    ///<summary>
    ///  Represents plaid pattern.
    ///</summary>
    Plaid = 37;
    ///<summary>
    ///  Represents divot pattern.
    ///</summary>
    Divot = 38;
    ///<summary>
    ///  Represents dotted grid pattern.
    ///</summary>
    DottedGrid = 39;
    ///<summary>
    ///  Represents dotted diamond pattern.
    ///</summary>
    DottedDiamond = 40;
    ///<summary>
    ///  Represents shingle pattern.
    ///</summary>
    Shingle = 41;
    ///<summary>
    ///  Represents trellis pattern.
    ///</summary>
    Trellis = 42;
    ///<summary>
    ///  Represents sphere pattern.
    ///</summary>
    Sphere = 43;
    ///<summary>
    ///  Represents small grid pattern.
    ///</summary>
    SmallGrid = 44;
    ///<summary>
    ///  Represents large grid pattern.
    ///</summary>
    LargeGrid = 45;
    ///<summary>
    ///  Represents small checker board pattern.
    ///</summary>
    SmallCheckerBoard = 46;
    ///<summary>
    ///  Represents large checker board pattern.
    ///</summary>
    LargeCheckerBoard = 47;
    ///<summary>
    ///  Represents outlined diamond pattern.
    ///</summary>
    OutlinedDiamond = 48;
    ///<summary>
    ///  Represents solid diamond pattern.
    ///</summary>
    SolidDiamond = 49;
    ///<summary>
    ///  Represents unknown pattern.
    ///</summary>
    Unknown = 50;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the picture fill type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.FillPictureType')]
  DNFillPictureType = type Integer;
  DNFillPictureTypeHelper = record helper for DNFillPictureType
  public const
    ///<summary>
    ///  Stretch
    ///</summary>
    Stretch = 0;
    ///<summary>
    ///  Stack
    ///</summary>
    Stack = 1;
    ///<summary>
    ///  StackAndScale
    ///</summary>
    StackAndScale = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Fill format type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.FillType')]
  DNFillType = type Integer;
  DNFillTypeHelper = record helper for DNFillType
  public const
    ///<summary>
    ///  Represents automatic formatting type.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Represents none formatting type.
    ///</summary>
    None = 1;
    ///<summary>
    ///  Solid fill format.
    ///</summary>
    Solid = 2;
    ///<summary>
    ///  Gradient fill format.
    ///</summary>
    Gradient = 3;
    ///<summary>
    ///  Texture fill format(includes picture fill).
    ///</summary>
    Texture = 4;
    ///<summary>
    ///  Pattern fill format.
    ///</summary>
    Pattern = 5;
    ///<summary>
    ///  Inherit the fill properties of the group.
    ///</summary>
    Group = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Fill format set type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.FormatSetType')]
  DNFormatSetType = type Integer;
  DNFormatSetTypeHelper = record helper for DNFormatSetType
  public const
    ///<summary>
    ///  No Fill format.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Gradient fill format.
    ///</summary>
    IsGradientSet = 1;
    ///<summary>
    ///  Texture fill format.
    ///</summary>
    IsTextureSet = 2;
    ///<summary>
    ///  Pattern fill format.
    ///</summary>
    IsPatternSet = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the gradient color type for the specified fill.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientColorType')]
  DNGradientColorType = type Integer;
  DNGradientColorTypeHelper = record helper for DNGradientColorType
  public const
    ///<summary>
    ///  No gradient color
    ///</summary>
    None = 0;
    ///<summary>
    ///  One gradient color
    ///</summary>
    OneColor = 1;
    ///<summary>
    ///  Preset gradient colors
    ///</summary>
    PresetColors = 2;
    ///<summary>
    ///  Two gradient colors
    ///</summary>
    TwoColors = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents all direction type of gradient.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientDirectionType')]
  DNGradientDirectionType = type Integer;
  DNGradientDirectionTypeHelper = record helper for DNGradientDirectionType
  public const
    ///<summary>
    ///  FromUpperLeftCorner
    ///</summary>
    FromUpperLeftCorner = 0;
    ///<summary>
    ///  FromUpperRightCorner
    ///</summary>
    FromUpperRightCorner = 1;
    ///<summary>
    ///  FromLowerLeftCorner
    ///</summary>
    FromLowerLeftCorner = 2;
    ///<summary>
    ///  FromLowerRightCorner
    ///</summary>
    FromLowerRightCorner = 3;
    ///<summary>
    ///  FromCenter
    ///</summary>
    FromCenter = 4;
    ///<summary>
    ///  Unknown
    ///</summary>
    Unknown = 5;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents all Gradient fill type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientFillType')]
  DNGradientFillType = type Integer;
  DNGradientFillTypeHelper = record helper for DNGradientFillType
  public const
    ///<summary>
    ///  Linear
    ///</summary>
    Linear = 0;
    ///<summary>
    ///  Radial
    ///</summary>
    Radial = 1;
    ///<summary>
    ///  Rectangle
    ///</summary>
    Rectangle = 2;
    ///<summary>
    ///  Path
    ///</summary>
    Path = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents gradient preset color type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientPresetType')]
  DNGradientPresetType = type Integer;
  DNGradientPresetTypeHelper = record helper for DNGradientPresetType
  public const
    ///<summary>
    ///  Brass preset color
    ///</summary>
    Brass = 0;
    ///<summary>
    ///  Calm Water preset color
    ///</summary>
    CalmWater = 1;
    ///<summary>
    ///  Chrome preset color
    ///</summary>
    Chrome = 2;
    ///<summary>
    ///  Chrome II preset color
    ///</summary>
    ChromeII = 3;
    ///<summary>
    ///  Daybreak preset color
    ///</summary>
    Daybreak = 4;
    ///<summary>
    ///  Desert preset color
    ///</summary>
    Desert = 5;
    ///<summary>
    ///  Early Sunset preset color
    ///</summary>
    EarlySunset = 6;
    ///<summary>
    ///  Fire preset color
    ///</summary>
    Fire = 7;
    ///<summary>
    ///  Fog preset color
    ///</summary>
    Fog = 8;
    ///<summary>
    ///  Gold preset color
    ///</summary>
    Gold = 9;
    ///<summary>
    ///  Gold II preset color
    ///</summary>
    GoldII = 10;
    ///<summary>
    ///  Horizon preset color
    ///</summary>
    Horizon = 11;
    ///<summary>
    ///  Late Sunset preset color
    ///</summary>
    LateSunset = 12;
    ///<summary>
    ///  Mahogany preset color
    ///</summary>
    Mahogany = 13;
    ///<summary>
    ///  Moss preset color
    ///</summary>
    Moss = 14;
    ///<summary>
    ///  Nightfall preset color
    ///</summary>
    Nightfall = 15;
    ///<summary>
    ///  Ocean preset color
    ///</summary>
    Ocean = 16;
    ///<summary>
    ///  Parchment preset color
    ///</summary>
    Parchment = 17;
    ///<summary>
    ///  Peacock preset color
    ///</summary>
    Peacock = 18;
    ///<summary>
    ///  Rainbow preset color
    ///</summary>
    Rainbow = 19;
    ///<summary>
    ///  Rainbow II preset color
    ///</summary>
    RainbowII = 20;
    ///<summary>
    ///  Sapphire preset color
    ///</summary>
    Sapphire = 21;
    ///<summary>
    ///  Silver preset color
    ///</summary>
    Silver = 22;
    ///<summary>
    ///  Wheat preset color
    ///</summary>
    Wheat = 23;
    ///<summary>
    ///  Unknown preset color.
    ///  Only for the preset color (which is not same as any known preset color) in the template workbook.
    ///</summary>
    Unknown = 24;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents gradient shading style.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientStyleType')]
  DNGradientStyleType = type Integer;
  DNGradientStyleTypeHelper = record helper for DNGradientStyleType
  public const
    ///<summary>
    ///  Diagonal down shading style
    ///</summary>
    DiagonalDown = 0;
    ///<summary>
    ///  Diagonal up shading style
    ///</summary>
    DiagonalUp = 1;
    ///<summary>
    ///  From center shading style
    ///</summary>
    FromCenter = 2;
    ///<summary>
    ///  From corner shading style
    ///</summary>
    FromCorner = 3;
    ///<summary>
    ///  Horizontal shading style
    ///</summary>
    Horizontal = 4;
    ///<summary>
    ///  Vertical shading style
    ///</summary>
    Vertical = 5;
    ///<summary>
    ///  Unknown shading style.Only for the shading style(which is not for any member of the GradientStyleType) in the template file.
    ///</summary>
    Unknown = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Specifies the type (format) of an image.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ImageType')]
  DNImageType = type Integer;
  DNImageTypeHelper = record helper for DNImageType
  public const
    ///<summary>
    ///  An unknown image type.
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  Windows Enhanced Metafile.
    ///</summary>
    Emf = 2;
    ///<summary>
    ///  Windows Metafile.
    ///</summary>
    Wmf = 3;
    ///<summary>
    ///  Macintosh PICT.
    ///</summary>
    Pict = 4;
    ///<summary>
    ///  JPEG JFIF.
    ///</summary>
    Jpeg = 5;
    ///<summary>
    ///  Portable Network Graphics.
    ///</summary>
    Png = 6;
    ///<summary>
    ///  Windows Bitmap
    ///</summary>
    Bmp = 7;
    ///<summary>
    ///  Gif
    ///</summary>
    Gif = 66;
    ///<summary>
    ///  Tiff
    ///</summary>
    Tiff = 67;
    ///<summary>
    ///  Svg
    ///</summary>
    Svg = 68;
    ///<summary>
    ///  Svm
    ///</summary>
    Svm = 69;
    ///<summary>
    ///  glTF
    ///</summary>
    Gltf = 70;
    ///<summary>
    ///  Windows Enhanced Metafile which is more compatible with Office.
    ///</summary>
    OfficeCompatibleEmf = 71;
    ///<summary>
    ///  Weppy image format
    ///</summary>
    WebP = 72;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the light rig direction type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.LightRigDirectionType')]
  DNLightRigDirectionType = type Integer;
  DNLightRigDirectionTypeHelper = record helper for DNLightRigDirectionType
  public const
    ///<summary>
    ///  Bottom
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Bottom left.
    ///</summary>
    BottomLeft = 1;
    ///<summary>
    ///  Bottom Right.
    ///</summary>
    BottomRight = 2;
    ///<summary>
    ///  Left.
    ///</summary>
    Left = 3;
    ///<summary>
    ///  Right.
    ///</summary>
    Right = 4;
    ///<summary>
    ///  Top.
    ///</summary>
    Top = 5;
    ///<summary>
    ///  Top left.
    ///</summary>
    TopLeft = 6;
    ///<summary>
    ///  Top Right.
    ///</summary>
    TopRight = 7;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents a preset light right that can be applied to a shape
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.LightRigType')]
  DNLightRigType = type Integer;
  DNLightRigTypeHelper = record helper for DNLightRigType
  public const
    ///<summary>
    ///  Balanced
    ///</summary>
    Balanced = 0;
    ///<summary>
    ///  Bright room
    ///</summary>
    BrightRoom = 1;
    ///<summary>
    ///  Chilly
    ///</summary>
    Chilly = 2;
    ///<summary>
    ///  Contrasting
    ///</summary>
    Contrasting = 3;
    ///<summary>
    ///  Flat
    ///</summary>
    Flat = 4;
    ///<summary>
    ///  Flood
    ///</summary>
    Flood = 5;
    ///<summary>
    ///  Freezing
    ///</summary>
    Freezing = 6;
    ///<summary>
    ///  Glow
    ///</summary>
    Glow = 7;
    ///<summary>
    ///  Harsh
    ///</summary>
    Harsh = 8;
    ///<summary>
    ///  LegacyFlat1
    ///</summary>
    LegacyFlat1 = 9;
    ///<summary>
    ///  LegacyFlat2
    ///</summary>
    LegacyFlat2 = 10;
    ///<summary>
    ///  LegacyFlat3
    ///</summary>
    LegacyFlat3 = 11;
    ///<summary>
    ///  LegacyFlat4
    ///</summary>
    LegacyFlat4 = 12;
    ///<summary>
    ///  LegacyHarsh1
    ///</summary>
    LegacyHarsh1 = 13;
    ///<summary>
    ///  LegacyHarsh2
    ///</summary>
    LegacyHarsh2 = 14;
    ///<summary>
    ///  LegacyHarsh3
    ///</summary>
    LegacyHarsh3 = 15;
    ///<summary>
    ///  LegacyHarsh4
    ///</summary>
    LegacyHarsh4 = 16;
    ///<summary>
    ///  LegacyNormal1
    ///</summary>
    LegacyNormal1 = 17;
    ///<summary>
    ///  LegacyNormal2
    ///</summary>
    LegacyNormal2 = 18;
    ///<summary>
    ///  LegacyNormal3
    ///</summary>
    LegacyNormal3 = 19;
    ///<summary>
    ///  LegacyNormal4
    ///</summary>
    LegacyNormal4 = 20;
    ///<summary>
    ///  Morning
    ///</summary>
    Morning = 21;
    ///<summary>
    ///  Soft
    ///</summary>
    Soft = 22;
    ///<summary>
    ///  Sunrise
    ///</summary>
    Sunrise = 23;
    ///<summary>
    ///  Sunset
    ///</summary>
    Sunset = 24;
    ///<summary>
    ///  Three point
    ///</summary>
    ThreePoint = 25;
    ///<summary>
    ///  Two point
    ///</summary>
    TwoPoint = 26;
    ///<summary>
    ///  No light rig.
    ///</summary>
    None = 27;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the caps of a line
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.LineCapType')]
  DNLineCapType = type Integer;
  DNLineCapTypeHelper = record helper for DNLineCapType
  public const
    ///<summary>
    ///  Square protrudes by half line width.
    ///</summary>
    Square = 0;
    ///<summary>
    ///  Rounded ends.
    ///</summary>
    Round = 1;
    ///<summary>
    ///  Line ends at end point.
    ///</summary>
    Flat = 2;
    ///<summary>
    ///  None cap
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the join styles of a line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.LineJoinType')]
  DNLineJoinType = type Integer;
  DNLineJoinTypeHelper = record helper for DNLineJoinType
  public const
    ///<summary>
    ///  Round joint
    ///</summary>
    Round = 0;
    ///<summary>
    ///  Bevel joint
    ///</summary>
    Bevel = 1;
    ///<summary>
    ///  Miter joint
    ///</summary>
    Miter = 2;
    ///<summary>
    ///  None joint
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Enumerates the type of <see cref="T:Aspose.Cells.Drawing.Picture" />
  ///  border or <see cref="T:Aspose.Cells.Charts.Chart" />
  ///  line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.LineType')]
  DNLineType = type Integer;
  DNLineTypeHelper = record helper for DNLineType
  public const
    ///<summary>
    ///  Represent a solid line.
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  Represent a dash line.
    ///</summary>
    Dash = 1;
    ///<summary>
    ///  Represents a dotted line.
    ///</summary>
    Dot = 2;
    ///<summary>
    ///  Represents a dash-dot line
    ///</summary>
    DashDot = 3;
    ///<summary>
    ///  Represents a dash-dot-dot line.
    ///</summary>
    DashDotDot = 4;
    ///<summary>
    ///  Represents a dark gray line.
    ///</summary>
    DarkGray = 6;
    ///<summary>
    ///  Represents a medium gray line.
    ///</summary>
    MediumGray = 7;
    ///<summary>
    ///  Represents a light gray line.
    ///</summary>
    LightGray = 8;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents mirror type of texture fill
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MirrorType')]
  DNMirrorType = type Integer;
  DNMirrorTypeHelper = record helper for DNMirrorType
  public const
    ///<summary>
    ///  None
    ///</summary>
    None = 0;
    ///<summary>
    ///  Horizonal
    ///</summary>
    Horizonal = 1;
    ///<summary>
    ///  Vertical
    ///</summary>
    Vertical = 2;
    ///<summary>
    ///  Both
    ///</summary>
    Both = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Enumerates the line end width of the shape border line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoArrowheadLength')]
  DNMsoArrowheadLength = type Integer;
  DNMsoArrowheadLengthHelper = record helper for DNMsoArrowheadLength
  public const
    ///<summary>
    ///  Short line end length
    ///</summary>
    Short = 0;
    ///<summary>
    ///  Medium line end length
    ///</summary>
    Medium = 1;
    ///<summary>
    ///  Long line end length
    ///</summary>
    Long = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Enumerates the line end type of the shape border line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoArrowheadStyle')]
  DNMsoArrowheadStyle = type Integer;
  DNMsoArrowheadStyleHelper = record helper for DNMsoArrowheadStyle
  public const
    ///<summary>
    ///  No line end type.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Arrow line end type.
    ///</summary>
    Arrow = 1;
    ///<summary>
    ///  Arrow Stealth line end type.
    ///</summary>
    ArrowStealth = 2;
    ///<summary>
    ///  Arrow Diamond Line end type.
    ///</summary>
    ArrowDiamond = 3;
    ///<summary>
    ///  Arrow Oval line end type.
    ///</summary>
    ArrowOval = 4;
    ///<summary>
    ///  Arrow Open line end type.
    ///</summary>
    ArrowOpen = 5;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Enumerates the line end width of the shape border line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoArrowheadWidth')]
  DNMsoArrowheadWidth = type Integer;
  DNMsoArrowheadWidthHelper = record helper for DNMsoArrowheadWidth
  public const
    ///<summary>
    ///  Short line end width.
    ///</summary>
    Narrow = 0;
    ///<summary>
    ///  Medium line end width.
    ///</summary>
    Medium = 1;
    ///<summary>
    ///  Wide line end width.
    ///</summary>
    Wide = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents office drawing objects type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoDrawingType')]
  DNMsoDrawingType = type Integer;
  DNMsoDrawingTypeHelper = record helper for DNMsoDrawingType
  public const
    ///<summary>
    ///  Group
    ///</summary>
    Group = 0;
    ///<summary>
    ///  Line
    ///</summary>
    Line = 1;
    ///<summary>
    ///  Rectangle
    ///</summary>
    Rectangle = 2;
    ///<summary>
    ///  Oval
    ///</summary>
    Oval = 3;
    ///<summary>
    ///  Arc
    ///</summary>
    Arc = 4;
    ///<summary>
    ///  Chart
    ///</summary>
    Chart = 5;
    ///<summary>
    ///  TextBox
    ///</summary>
    TextBox = 6;
    ///<summary>
    ///  Button
    ///</summary>
    Button = 7;
    ///<summary>
    ///  Picture
    ///</summary>
    Picture = 8;
    ///<summary>
    ///  Polygon
    ///</summary>
    Polygon = 9;
    ///<summary>
    ///  CheckBox
    ///</summary>
    CheckBox = 11;
    ///<summary>
    ///  RadioButton
    ///</summary>
    RadioButton = 12;
    ///<summary>
    ///  Label
    ///</summary>
    Label_ = 14;
    ///<summary>
    ///  DialogBox
    ///</summary>
    DialogBox = 15;
    ///<summary>
    ///  Spinner
    ///</summary>
    Spinner = 16;
    ///<summary>
    ///  ScrollBar
    ///</summary>
    ScrollBar = 17;
    ///<summary>
    ///  ListBox
    ///</summary>
    ListBox = 18;
    ///<summary>
    ///  GroupBox
    ///</summary>
    GroupBox = 19;
    ///<summary>
    ///  ComboBox
    ///</summary>
    ComboBox = 20;
    ///<summary>
    ///  OleObject
    ///</summary>
    OleObject = 24;
    ///<summary>
    ///  Comment
    ///</summary>
    Comment = 25;
    ///<summary>
    ///  Only for preserving the drawing object in the xlsx file.
    ///</summary>
    Unknown = 29;
    ///<summary>
    ///  Only for preserving the drawing object in the template file.
    ///</summary>
    CellsDrawing = 30;
    ///<summary>
    ///  Slicer
    ///</summary>
    Slicer = 31;
    ///<summary>
    ///  Web extension
    ///</summary>
    WebExtension = 32;
    ///<summary>
    ///  Smart Art
    ///</summary>
    SmartArt = 33;
    ///<summary>
    ///  Custom xml shape ,such as Ink.
    ///</summary>
    CustomXml = 34;
    ///<summary>
    ///  3D Model
    ///</summary>
    Model3D = 35;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents style of dash drawing lines.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoLineDashStyle')]
  DNMsoLineDashStyle = type Integer;
  DNMsoLineDashStyleHelper = record helper for DNMsoLineDashStyle
  public const
    ///<summary>
    ///  Represent a dash line.
    ///</summary>
    Dash = 0;
    ///<summary>
    ///  Represents a dash-dot line.
    ///</summary>
    DashDot = 1;
    ///<summary>
    ///  Represents a dash-dot-dot line.
    ///</summary>
    DashDotDot = 2;
    ///<summary>
    ///  Represents a long dash-short dash line.
    ///</summary>
    DashLongDash = 3;
    ///<summary>
    ///  Represents a long dash-short dash-dot line.
    ///</summary>
    DashLongDashDot = 4;
    ///<summary>
    ///  Represents a round-dot line.
    ///</summary>
    RoundDot = 5;
    ///<summary>
    ///  Represent a solid line.
    ///</summary>
    Solid = 6;
    ///<summary>
    ///  Represents a square-dot line.
    ///</summary>
    SquareDot = 7;
    ///<summary>
    ///  Custom dash style.
    ///</summary>
    Custom = 8;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents style of drawing lines.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoLineStyle')]
  DNMsoLineStyle = type Integer;
  DNMsoLineStyleHelper = record helper for DNMsoLineStyle
  public const
    ///<summary>
    ///  Single line (of width lineWidth)
    ///</summary>
    Single = 0;
    ///<summary>
    ///  Three lines, thin, thick, thin
    ///</summary>
    ThickBetweenThin = 1;
    ///<summary>
    ///  Double lines, one thin, one thick
    ///</summary>
    ThinThick = 2;
    ///<summary>
    ///  Double lines, one thick, one thin
    ///</summary>
    ThickThin = 3;
    ///<summary>
    ///  Double lines of equal width
    ///</summary>
    ThinThin = 4;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents preset text effect type of WordArt.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoPresetTextEffect')]
  DNMsoPresetTextEffect = type Integer;
  DNMsoPresetTextEffectHelper = record helper for DNMsoPresetTextEffect
  public const
    ///<summary>
    ///  TextEffect1
    ///</summary>
    TextEffect1 = 0;
    ///<summary>
    ///  TextEffect2
    ///</summary>
    TextEffect2 = 1;
    ///<summary>
    ///  TextEffect3
    ///</summary>
    TextEffect3 = 2;
    ///<summary>
    ///  TextEffect4
    ///</summary>
    TextEffect4 = 3;
    ///<summary>
    ///  TextEffect5
    ///</summary>
    TextEffect5 = 4;
    ///<summary>
    ///  TextEffect6
    ///</summary>
    TextEffect6 = 5;
    ///<summary>
    ///  TextEffect7
    ///</summary>
    TextEffect7 = 6;
    ///<summary>
    ///  TextEffect8
    ///</summary>
    TextEffect8 = 7;
    ///<summary>
    ///  TextEffect9
    ///</summary>
    TextEffect9 = 8;
    ///<summary>
    ///  TextEffect10
    ///</summary>
    TextEffect10 = 9;
    ///<summary>
    ///  TextEffect11
    ///</summary>
    TextEffect11 = 10;
    ///<summary>
    ///  TextEffect12
    ///</summary>
    TextEffect12 = 11;
    ///<summary>
    ///  TextEffect13
    ///</summary>
    TextEffect13 = 12;
    ///<summary>
    ///  TextEffect14
    ///</summary>
    TextEffect14 = 13;
    ///<summary>
    ///  TextEffect15
    ///</summary>
    TextEffect15 = 14;
    ///<summary>
    ///  TextEffect16
    ///</summary>
    TextEffect16 = 15;
    ///<summary>
    ///  TextEffect17
    ///</summary>
    TextEffect17 = 16;
    ///<summary>
    ///  TextEffect18
    ///</summary>
    TextEffect18 = 17;
    ///<summary>
    ///  TextEffect19
    ///</summary>
    TextEffect19 = 18;
    ///<summary>
    ///  TextEffect20
    ///</summary>
    TextEffect20 = 19;
    ///<summary>
    ///  TextEffect21
    ///</summary>
    TextEffect21 = 20;
    ///<summary>
    ///  TextEffect22
    ///</summary>
    TextEffect22 = 21;
    ///<summary>
    ///  TextEffect23
    ///</summary>
    TextEffect23 = 22;
    ///<summary>
    ///  TextEffect24
    ///</summary>
    TextEffect24 = 23;
    ///<summary>
    ///  TextEffect25
    ///</summary>
    TextEffect25 = 24;
    ///<summary>
    ///  TextEffect26
    ///</summary>
    TextEffect26 = 25;
    ///<summary>
    ///  TextEffect27
    ///</summary>
    TextEffect27 = 26;
    ///<summary>
    ///  TextEffect28
    ///</summary>
    TextEffect28 = 27;
    ///<summary>
    ///  TextEffect29
    ///</summary>
    TextEffect29 = 28;
    ///<summary>
    ///  TextEffect30
    ///</summary>
    TextEffect30 = 29;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents preset text effect shape type of WordArt.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoPresetTextEffectShape')]
  DNMsoPresetTextEffectShape = type Integer;
  DNMsoPresetTextEffectShapeHelper = record helper for DNMsoPresetTextEffectShape
  public const
    ///<summary>
    ///  PlainText
    ///</summary>
    PlainText = 136;
    ///<summary>
    ///  Stop
    ///</summary>
    Stop = 137;
    ///<summary>
    ///  TriangleUp
    ///</summary>
    TriangleUp = 138;
    ///<summary>
    ///  TriangleDown
    ///</summary>
    TriangleDown = 139;
    ///<summary>
    ///  ChevronUp
    ///</summary>
    ChevronUp = 140;
    ///<summary>
    ///  ChevronDown
    ///</summary>
    ChevronDown = 141;
    ///<summary>
    ///  RingInside
    ///</summary>
    RingInside = 142;
    ///<summary>
    ///  RingOutside
    ///</summary>
    RingOutside = 143;
    ///<summary>
    ///  ArchUpCurve
    ///</summary>
    ArchUpCurve = 144;
    ///<summary>
    ///  ArchDownCurve
    ///</summary>
    ArchDownCurve = 145;
    ///<summary>
    ///  CircleCurve
    ///</summary>
    CircleCurve = 146;
    ///<summary>
    ///  ButtonCurve
    ///</summary>
    ButtonCurve = 147;
    ///<summary>
    ///  ArchUpPour
    ///</summary>
    ArchUpPour = 148;
    ///<summary>
    ///  ArchDownPour
    ///</summary>
    ArchDownPour = 149;
    ///<summary>
    ///  CirclePour
    ///</summary>
    CirclePour = 150;
    ///<summary>
    ///  ButtonPour
    ///</summary>
    ButtonPour = 151;
    ///<summary>
    ///  CurveUp
    ///</summary>
    CurveUp = 152;
    ///<summary>
    ///  CurveDown
    ///</summary>
    CurveDown = 153;
    ///<summary>
    ///  CascadeUp
    ///</summary>
    CascadeUp = 154;
    ///<summary>
    ///  CascadeDown
    ///</summary>
    CascadeDown = 155;
    ///<summary>
    ///  Wave1
    ///</summary>
    Wave1 = 156;
    ///<summary>
    ///  Wave2
    ///</summary>
    Wave2 = 157;
    ///<summary>
    ///  DoubleWave1
    ///</summary>
    DoubleWave1 = 158;
    ///<summary>
    ///  DoubleWave2
    ///</summary>
    DoubleWave2 = 159;
    ///<summary>
    ///  Inflate
    ///</summary>
    Inflate = 160;
    ///<summary>
    ///  Deflate
    ///</summary>
    Deflate = 161;
    ///<summary>
    ///  InflateBottom
    ///</summary>
    InflateBottom = 162;
    ///<summary>
    ///  DeflateBottom
    ///</summary>
    DeflateBottom = 163;
    ///<summary>
    ///  InflateTop
    ///</summary>
    InflateTop = 164;
    ///<summary>
    ///  DeflateTop
    ///</summary>
    DeflateTop = 165;
    ///<summary>
    ///  DeflateInflate
    ///</summary>
    DeflateInflate = 166;
    ///<summary>
    ///  DeflateInflateDeflate
    ///</summary>
    DeflateInflateDeflate = 167;
    ///<summary>
    ///  FadeRight
    ///</summary>
    FadeRight = 168;
    ///<summary>
    ///  FadeLeft
    ///</summary>
    FadeLeft = 169;
    ///<summary>
    ///  FadeUp
    ///</summary>
    FadeUp = 170;
    ///<summary>
    ///  FadeDown
    ///</summary>
    FadeDown = 171;
    ///<summary>
    ///  SlantUp
    ///</summary>
    SlantUp = 172;
    ///<summary>
    ///  SlantDown
    ///</summary>
    SlantDown = 173;
    ///<summary>
    ///  CanUp
    ///</summary>
    CanUp = 174;
    ///<summary>
    ///  CanDown
    ///</summary>
    CanDown = 175;
    ///<summary>
    ///  Mixed
    ///</summary>
    Mixed = 255;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the way the drawing object is attached to the cells below it.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PlacementType')]
  DNPlacementType = type Integer;
  DNPlacementTypeHelper = record helper for DNPlacementType
  public const
    ///<summary>
    ///  Don't move or size with cells.
    ///</summary>
    FreeFloating = 0;
    ///<summary>
    ///  Move but don't size with cells.
    ///</summary>
    Move = 1;
    ///<summary>
    ///  Move and size with cells.
    ///</summary>
    MoveAndSize = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represent different algorithmic methods for setting all camera properties, including position.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PresetCameraType')]
  DNPresetCameraType = type Integer;
  DNPresetCameraTypeHelper = record helper for DNPresetCameraType
  public const
    ///<summary></summary>
    IsometricBottomDown = 0;
    ///<summary></summary>
    IsometricBottomUp = 1;
    ///<summary></summary>
    IsometricLeftDown = 2;
    ///<summary></summary>
    IsometricLeftUp = 3;
    ///<summary></summary>
    IsometricOffAxis1Left = 4;
    ///<summary></summary>
    IsometricOffAxis1Right = 5;
    ///<summary></summary>
    IsometricOffAxis1Top = 6;
    ///<summary></summary>
    IsometricOffAxis2Left = 7;
    ///<summary></summary>
    IsometricOffAxis2Right = 8;
    ///<summary></summary>
    IsometricOffAxis2Top = 9;
    ///<summary></summary>
    IsometricOffAxis3Bottom = 10;
    ///<summary></summary>
    IsometricOffAxis3Left = 11;
    ///<summary></summary>
    IsometricOffAxis3Right = 12;
    ///<summary></summary>
    IsometricOffAxis4Bottom = 13;
    ///<summary></summary>
    IsometricOffAxis4Left = 14;
    ///<summary></summary>
    IsometricOffAxis4Right = 15;
    ///<summary></summary>
    IsometricRightDown = 16;
    ///<summary></summary>
    IsometricRightUp = 17;
    ///<summary></summary>
    IsometricTopDown = 18;
    ///<summary></summary>
    IsometricTopUp = 19;
    ///<summary></summary>
    LegacyObliqueBottom = 20;
    ///<summary></summary>
    LegacyObliqueBottomLeft = 21;
    ///<summary></summary>
    LegacyObliqueBottomRight = 22;
    ///<summary></summary>
    LegacyObliqueFront = 23;
    ///<summary></summary>
    LegacyObliqueLeft = 24;
    ///<summary></summary>
    LegacyObliqueRight = 25;
    ///<summary></summary>
    LegacyObliqueTop = 26;
    ///<summary></summary>
    LegacyObliqueTopLeft = 27;
    ///<summary></summary>
    LegacyObliqueTopRight = 28;
    ///<summary></summary>
    LegacyPerspectiveBottom = 29;
    ///<summary></summary>
    LegacyPerspectiveBottomLeft = 30;
    ///<summary></summary>
    LegacyPerspectiveBottomRight = 31;
    ///<summary></summary>
    LegacyPerspectiveFront = 32;
    ///<summary></summary>
    LegacyPerspectiveLeft = 33;
    ///<summary></summary>
    LegacyPerspectiveRight = 34;
    ///<summary></summary>
    LegacyPerspectiveTop = 35;
    ///<summary></summary>
    LegacyPerspectiveTopLeft = 36;
    ///<summary></summary>
    LegacyPerspectiveTopRight = 37;
    ///<summary></summary>
    ObliqueBottom = 38;
    ///<summary></summary>
    ObliqueBottomLeft = 39;
    ///<summary></summary>
    ObliqueBottomRight = 40;
    ///<summary></summary>
    ObliqueLeft = 41;
    ///<summary></summary>
    ObliqueRight = 42;
    ///<summary></summary>
    ObliqueTop = 43;
    ///<summary></summary>
    ObliqueTopLeft = 44;
    ///<summary></summary>
    ObliqueTopRight = 45;
    ///<summary></summary>
    OrthographicFront = 46;
    ///<summary></summary>
    PerspectiveAbove = 47;
    ///<summary></summary>
    PerspectiveAboveLeftFacing = 48;
    ///<summary></summary>
    PerspectiveAboveRightFacing = 49;
    ///<summary></summary>
    PerspectiveBelow = 50;
    ///<summary></summary>
    PerspectiveContrastingLeftFacing = 51;
    ///<summary></summary>
    PerspectiveContrastingRightFacing = 52;
    ///<summary></summary>
    PerspectiveFront = 53;
    ///<summary></summary>
    PerspectiveHeroicExtremeLeftFacing = 54;
    ///<summary></summary>
    PerspectiveHeroicExtremeRightFacing = 55;
    ///<summary></summary>
    PerspectiveHeroicLeftFacing = 56;
    ///<summary></summary>
    PerspectiveHeroicRightFacing = 57;
    ///<summary></summary>
    PerspectiveLeft = 58;
    ///<summary></summary>
    PerspectiveRelaxed = 59;
    ///<summary></summary>
    PerspectiveRelaxedModerately = 60;
    ///<summary></summary>
    PerspectiveRight = 61;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Describes surface appearance of a shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PresetMaterialType')]
  DNPresetMaterialType = type Integer;
  DNPresetMaterialTypeHelper = record helper for DNPresetMaterialType
  public const
    ///<summary>
    ///  Clear
    ///</summary>
    Clear = 0;
    ///<summary>
    ///  Dark edge
    ///</summary>
    DarkEdge = 1;
    ///<summary>
    ///  Flat
    ///</summary>
    Flat = 2;
    ///<summary>
    ///  Legacy matte
    ///</summary>
    LegacyMatte = 3;
    ///<summary>
    ///  Legacy metal
    ///</summary>
    LegacyMetal = 4;
    ///<summary>
    ///  Legacy plastic
    ///</summary>
    LegacyPlastic = 5;
    ///<summary>
    ///  Legacy wireframe
    ///</summary>
    LegacyWireframe = 6;
    ///<summary>
    ///  Matte
    ///</summary>
    Matte = 7;
    ///<summary>
    ///  Metal
    ///</summary>
    Metal = 8;
    ///<summary>
    ///  Plastic
    ///</summary>
    Plastic = 9;
    ///<summary>
    ///  Powder
    ///</summary>
    Powder = 10;
    ///<summary>
    ///  Soft edge
    ///</summary>
    SoftEdge = 11;
    ///<summary>
    ///  Soft metal
    ///</summary>
    SoftMetal = 12;
    ///<summary>
    ///  Translucent powder
    ///</summary>
    TranslucentPowder = 13;
    ///<summary>
    ///  Warm matte
    ///</summary>
    WarmMatte = 14;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents preset shadow type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PresetShadowType')]
  DNPresetShadowType = type Integer;
  DNPresetShadowTypeHelper = record helper for DNPresetShadowType
  public const
    ///<summary>
    ///  No shadow.
    ///</summary>
    NoShadow = 0;
    ///<summary>
    ///  Custom shadow.
    ///</summary>
    Custom = 1;
    ///<summary>
    ///  Outer shadow offset diagonal bottom right.
    ///</summary>
    OffsetDiagonalBottomRight = 2;
    ///<summary>
    ///  Outer shadow offset bottom.
    ///</summary>
    OffsetBottom = 3;
    ///<summary>
    ///  Outer shadow offset diagonal bottom left.
    ///</summary>
    OffsetDiagonalBottomLeft = 4;
    ///<summary>
    ///  Outer shadow offset right.
    ///</summary>
    OffsetRight = 5;
    ///<summary>
    ///  Outer shadow offset center.
    ///</summary>
    OffsetCenter = 6;
    ///<summary>
    ///  Outer shadow offset left.
    ///</summary>
    OffsetLeft = 7;
    ///<summary>
    ///  Outer shadow offset diagonal top right.
    ///</summary>
    OffsetDiagonalTopRight = 8;
    ///<summary>
    ///  Outer shadow offset top.
    ///</summary>
    OffsetTop = 9;
    ///<summary>
    ///  Outer shadow offset diagonal top left.
    ///</summary>
    OffsetDiagonalTopLeft = 10;
    ///<summary>
    ///  Inner shadow inside diagonal top Left.
    ///</summary>
    InsideDiagonalTopLeft = 11;
    ///<summary>
    ///  Inner shadow inside top.
    ///</summary>
    InsideTop = 12;
    ///<summary>
    ///  Inner shadow inside diagonal top right.
    ///</summary>
    InsideDiagonalTopRight = 13;
    ///<summary>
    ///  Inner shadow inside left.
    ///</summary>
    InsideLeft = 14;
    ///<summary>
    ///  Inner shadow inside center.
    ///</summary>
    InsideCenter = 15;
    ///<summary>
    ///  Inner shadow inside right.
    ///</summary>
    InsideRight = 16;
    ///<summary>
    ///  Inner shadow inside diagonal bottom left.
    ///</summary>
    InsideDiagonalBottomLeft = 17;
    ///<summary>
    ///  Inner shadow inside bottom.
    ///</summary>
    InsideBottom = 18;
    ///<summary>
    ///  Inner shadow inside diagonal bottom right.
    ///</summary>
    InsideDiagonalBottomRight = 19;
    ///<summary>
    ///  Outer shadow perspective diagonal upper left.
    ///</summary>
    PerspectiveDiagonalUpperLeft = 20;
    ///<summary>
    ///  Outer shadow perspective diagonal upper right.
    ///</summary>
    PerspectiveDiagonalUpperRight = 21;
    ///<summary>
    ///  Outer shadow below.
    ///</summary>
    Below = 22;
    ///<summary>
    ///  Outer shadow perspective diagonal lower left.
    ///</summary>
    PerspectiveDiagonalLowerLeft = 23;
    ///<summary>
    ///  Outer shadow perspective diagonal lower right.
    ///</summary>
    PerspectiveDiagonalLowerRight = 24;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the preset WordArt styles.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PresetWordArtStyle')]
  DNPresetWordArtStyle = type Integer;
  DNPresetWordArtStyleHelper = record helper for DNPresetWordArtStyle
  public const
    ///<summary>
    ///  Fill - Black, Text 1, Shadow
    ///</summary>
    WordArtStyle1 = 1;
    ///<summary>
    ///  Fill - Blue, Accent 1, Shadow
    ///</summary>
    WordArtStyle2 = 2;
    ///<summary>
    ///  Fill - Orange, Accent 2, Outline - Accent 2
    ///</summary>
    WordArtStyle3 = 3;
    ///<summary>
    ///  Fill - White, Outline - Accent 1, Shadow
    ///</summary>
    WordArtStyle4 = 4;
    ///<summary>
    ///  Fill - Gold, Accent 4, Soft Bevel
    ///</summary>
    WordArtStyle5 = 5;
    ///<summary>
    ///  Gradient Fill - Gray
    ///</summary>
    WordArtStyle6 = 6;
    ///<summary>
    ///  Gradient Fill - Blue, Accent 1, Reflection
    ///</summary>
    WordArtStyle7 = 7;
    ///<summary>
    ///  Gradient Fill - Gold, Accent 4, Outline - Accent 4
    ///</summary>
    WordArtStyle8 = 8;
    ///<summary>
    ///  Fill - White, Outline - Accent 1, Glow - Accent 1
    ///</summary>
    WordArtStyle9 = 9;
    ///<summary>
    ///  Fill - Gray-50%, Accent 3, Sharp Bevel
    ///</summary>
    WordArtStyle10 = 10;
    ///<summary>
    ///  Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Background 1
    ///</summary>
    WordArtStyle11 = 11;
    ///<summary>
    ///  Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Accent 1
    ///</summary>
    WordArtStyle12 = 12;
    ///<summary>
    ///  Fill - Blue, Accent 1, Outline - Background 1, Hard Shadow - Accent 1
    ///</summary>
    WordArtStyle13 = 13;
    ///<summary>
    ///  Fill - White, Outline - Accent 2, Hard Shadow - Accent 2
    ///</summary>
    WordArtStyle14 = 14;
    ///<summary>
    ///  Fill - Gray-25%, Background 2, Inner Shadow
    ///</summary>
    WordArtStyle15 = 15;
    ///<summary>
    ///  Pattern Fill - White, Text 2, Dark Upward Diagonal, Shadow
    ///</summary>
    WordArtStyle16 = 16;
    ///<summary>
    ///  Pattern Fill - Gray-50%, Accent 3, Narrow Horizontal, Inner Shadow
    ///</summary>
    WordArtStyle17 = 17;
    ///<summary>
    ///  Fill - Blue, Accent 1, 50%, Hard Shadow - Accent 1
    ///</summary>
    WordArtStyle18 = 18;
    ///<summary>
    ///  Pattern Fill - Blue, Accent 1, Light Downward Diagonal, Outline - Accent 1
    ///</summary>
    WordArtStyle19 = 19;
    ///<summary>
    ///  Pattern Fill - Blue-Gray, Text 2, Dark Upward Diagonal, Hard Shadow - Text 2
    ///</summary>
    WordArtStyle20 = 20;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents how to position two rectangles relative to each other.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.RectangleAlignmentType')]
  DNRectangleAlignmentType = type Integer;
  DNRectangleAlignmentTypeHelper = record helper for DNRectangleAlignmentType
  public const
    ///<summary>
    ///  Bottom
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  BottomLeft
    ///</summary>
    BottomLeft = 1;
    ///<summary>
    ///  BottomRight
    ///</summary>
    BottomRight = 2;
    ///<summary>
    ///  Center
    ///</summary>
    Center = 3;
    ///<summary>
    ///  Left
    ///</summary>
    Left = 4;
    ///<summary>
    ///  Right
    ///</summary>
    Right = 5;
    ///<summary>
    ///  Top
    ///</summary>
    Top = 6;
    ///<summary>
    ///  TopLeft
    ///</summary>
    TopLeft = 7;
    ///<summary>
    ///  TopRight
    ///</summary>
    TopRight = 8;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary></summary>
  [DNTypeName('Aspose.Cells.Drawing.ReflectionEffectType')]
  DNReflectionEffectType = type Integer;
  DNReflectionEffectTypeHelper = record helper for DNReflectionEffectType
  public const
    ///<summary>
    ///  No reflection effect.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Custom reflection effect.
    ///</summary>
    Custom = 1;
    ///<summary>
    ///  Tight reflection, touching.
    ///</summary>
    TightReflectionTouching = 2;
    ///<summary>
    ///  Half reflection, touching.
    ///</summary>
    HalfReflectionTouching = 3;
    ///<summary>
    ///  Full reflection, touching.
    ///</summary>
    FullReflectionTouching = 4;
    ///<summary>
    ///  Tight reflection, 4 pt offset.
    ///</summary>
    TightReflection4PtOffset = 5;
    ///<summary>
    ///  Half reflection, 4 pt offset.
    ///</summary>
    HalfReflection4PtOffset = 6;
    ///<summary>
    ///  Full reflection, 4 pt offset.
    ///</summary>
    FullReflection4PtOffset = 7;
    ///<summary>
    ///  Tight reflection, 8 pt offset.
    ///</summary>
    TightReflection8PtOffset = 8;
    ///<summary>
    ///  Half reflection, 8 pt offset.
    ///</summary>
    HalfReflection8PtOffset = 9;
    ///<summary>
    ///  Full reflection, 8 pt offset.
    ///</summary>
    FullReflection8PtOffset = 10;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  The selection type of list box.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.SelectionType')]
  DNSelectionType = type Integer;
  DNSelectionTypeHelper = record helper for DNSelectionType
  public const
    ///<summary>
    ///  Sigle selection type.
    ///</summary>
    Single = 0;
    ///<summary>
    ///  Multiple selection type.
    ///</summary>
    Multi = 1;
    ///<summary>
    ///  Extend selection type.
    ///</summary>
    Extend = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the anchor type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeAnchorType')]
  DNShapeAnchorType = type Integer;
  DNShapeAnchorTypeHelper = record helper for DNShapeAnchorType
  public const
    ///<summary>
    ///  Represents a two cell anchor placeholder
    ///</summary>
    TwoCellAnchor = 0;
    ///<summary>
    ///  Represents a one cell anchor placeholder
    ///</summary>
    OneCellAnchor = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents type of the property to be locked.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeLockType')]
  DNShapeLockType = type Integer;
  DNShapeLockTypeHelper = record helper for DNShapeLockType
  public const
    ///<summary>
    ///  Group
    ///</summary>
    Group = 0;
    ///<summary>
    ///  AdjustHandles
    ///</summary>
    AdjustHandles = 1;
    ///<summary>
    ///  Text
    ///</summary>
    Text = 2;
    ///<summary>
    ///  Points
    ///</summary>
    Points = 3;
    ///<summary>
    ///  Crop
    ///</summary>
    Crop = 4;
    ///<summary>
    ///  Selection
    ///</summary>
    Selection = 5;
    ///<summary>
    ///  Move
    ///</summary>
    Move = 6;
    ///<summary>
    ///  AspectRatio
    ///</summary>
    AspectRatio = 7;
    ///<summary>
    ///  Rotation
    ///</summary>
    Rotation = 8;
    ///<summary>
    ///  Ungroup
    ///</summary>
    Ungroup = 9;
    ///<summary>
    ///  Resize
    ///</summary>
    Resize = 10;
    ///<summary>
    ///  ShapeType
    ///</summary>
    ShapeType = 11;
    ///<summary>
    ///  Arrowhead
    ///</summary>
    Arrowhead = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents path segment type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapePathType')]
  DNShapePathType = type Integer;
  DNShapePathTypeHelper = record helper for DNShapePathType
  public const
    ///<summary>
    ///  Straight line segment
    ///</summary>
    LineTo = 0;
    ///<summary>
    ///  Cubic Bezier curve
    ///</summary>
    CubicBezierCurveTo = 1;
    ///<summary>
    ///  Start a new path
    ///</summary>
    MoveTo = 2;
    ///<summary>
    ///  If the starting POINT and the end POINT are not the same, a single
    ///  straight line is drawn to connect the starting POINT and ending POINT of the path.
    ///</summary>
    Close = 3;
    ///<summary>
    ///  The end of the current path
    ///</summary>
    End_ = 4;
    ///<summary>
    ///  Escape
    ///</summary>
    Escape = 5;
    ///<summary>
    ///  An arc
    ///</summary>
    ArcTo = 6;
    ///<summary>
    ///  Unknown
    ///</summary>
    Unknown = 7;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the way the text vertical or horizontal overflow.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.TextOverflowType')]
  DNTextOverflowType = type Integer;
  DNTextOverflowTypeHelper = record helper for DNTextOverflowType
  public const
    ///<summary>
    ///  Pay attention to top and bottom barriers.
    ///  Provide no indication that there is text which is not visible.
    ///</summary>
    Clip = 0;
    ///<summary>
    ///  Pay attention to top and bottom barriers.
    ///  Use an ellipsis to denote that there is text which is not visible.
    ///  Only for vertical overflow.
    ///</summary>
    Ellipsis = 1;
    ///<summary>
    ///  Overflow the text and pay no attention to top and bottom barriers.
    ///</summary>
    Overflow = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents the type of the bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.BulletType')]
  DNBulletType = type Integer;
  DNBulletTypeHelper = record helper for DNBulletType
  public const
    ///<summary>
    ///  No bullet.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Character bullet.
    ///</summary>
    Character = 1;
    ///<summary>
    ///  Image bullet.
    ///</summary>
    Picture = 2;
    ///<summary>
    ///  Automatic numbered bullet.
    ///</summary>
    AutoNumbered = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents the unit type of line space size.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.LineSpaceSizeType')]
  DNLineSpaceSizeType = type Integer;
  DNLineSpaceSizeTypeHelper = record helper for DNLineSpaceSizeType
  public const
    ///<summary>
    ///  Represents in unit of a percentage of the text size.
    ///</summary>
    Percentage = 0;
    ///<summary>
    ///  Represents in unit of points.
    ///</summary>
    Points = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents all automatic number scheme.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextAutonumberScheme')]
  DNTextAutonumberScheme = type Integer;
  DNTextAutonumberSchemeHelper = record helper for DNTextAutonumberScheme
  public const
    ///<summary></summary>
    None = 0;
    ///<summary>
    ///  (a), (b), (c), …
    ///</summary>
    AlphaLcParenBoth = 1;
    ///<summary>
    ///  a), b), c), …
    ///</summary>
    AlphaLcParenR = 2;
    ///<summary>
    ///  a., b., c., …
    ///</summary>
    AlphaLcPeriod = 3;
    ///<summary>
    ///  (A), (B), (C), …
    ///</summary>
    AlphaUcParenBoth = 4;
    ///<summary>
    ///  A), B), C), …
    ///</summary>
    AlphaUcParenR = 5;
    ///<summary>
    ///  A., B., C., …
    ///</summary>
    AlphaUcPeriod = 6;
    ///<summary>
    ///  Bidi Arabic 1 (AraAlpha) with ANSI minus symbol
    ///</summary>
    Arabic1Minus = 7;
    ///<summary>
    ///  Bidi Arabic 2 (AraAbjad) with ANSI minus symbol
    ///</summary>
    Arabic2Minus = 8;
    ///<summary>
    ///  Dbl-byte Arabic numbers w/ double-byte period
    ///</summary>
    ArabicDbPeriod = 9;
    ///<summary>
    ///  Dbl-byte Arabic numbers
    ///</summary>
    ArabicDbPlain = 10;
    ///<summary>
    ///  (1), (2), (3), …
    ///</summary>
    ArabicParenBoth = 11;
    ///<summary>
    ///  1), 2), 3), …
    ///</summary>
    ArabicParenR = 12;
    ///<summary>
    ///  1., 2., 3., …
    ///</summary>
    ArabicPeriod = 13;
    ///<summary>
    ///  1, 2, 3, …
    ///</summary>
    ArabicPlain = 14;
    ///<summary>
    ///  Dbl-byte circle numbers (1-10 circle[0x2460-], 11-arabic numbers)
    ///</summary>
    CircleNumDbPlain = 15;
    ///<summary>
    ///  Wingdings black circle numbers
    ///</summary>
    CircleNumWdBlackPlain = 16;
    ///<summary>
    ///  Wingdings white circle numbers (0-10 circle[0x0080-],11- arabic numbers)
    ///</summary>
    CircleNumWdWhitePlain = 17;
    ///<summary>
    ///  EA: Simplified Chinese w/ single-byte period
    ///</summary>
    Ea1ChsPeriod = 18;
    ///<summary>
    ///  EA: Simplified Chinese (TypeA 1-99, TypeC 100-)
    ///</summary>
    Ea1ChsPlain = 19;
    ///<summary>
    ///  EA: Traditional Chinese w/ single-byte period
    ///</summary>
    Ea1ChtPeriod = 20;
    ///<summary>
    ///  EA: Traditional Chinese (TypeA 1-19, TypeC 20-)
    ///</summary>
    Ea1ChtPlain = 21;
    ///<summary>
    ///  EA: Japanese w/ double-byte period
    ///</summary>
    Ea1JpnChsDbPeriod = 22;
    ///<summary>
    ///  EA: Japanese/Korean w/ single-byte period
    ///</summary>
    Ea1JpnKorPeriod = 23;
    ///<summary>
    ///  EA: Japanese/Korean (TypeC 1-)
    ///</summary>
    Ea1JpnKorPlain = 24;
    ///<summary>
    ///  Bidi Hebrew 2 with ANSI minus symbol
    ///</summary>
    Hebrew2Minus = 25;
    ///<summary>
    ///  Hindi alphabet period - consonants
    ///</summary>
    HindiAlpha1Period = 26;
    ///<summary>
    ///  Hindi alphabet period - vowels
    ///</summary>
    HindiAlphaPeriod = 27;
    ///  /// <summary>
    ///  Hindi numerical parentheses - right
    ///</summary>
    HindiNumParenR = 28;
    ///<summary>
    ///  Hindi numerical period
    ///</summary>
    HindiNumPeriod = 29;
    ///<summary>
    ///  (i), (ii), (iii), …
    ///</summary>
    RomanLcParenBoth = 30;
    ///<summary>
    ///  i), ii), iii), …
    ///</summary>
    RomanLcParenR = 31;
    ///<summary>
    ///  i., ii., iii., …
    ///</summary>
    RomanLcPeriod = 32;
    ///<summary>
    ///  (I), (II), (III), …
    ///</summary>
    RomanUcParenBoth = 33;
    ///<summary>
    ///  I), II), III), …
    ///</summary>
    RomanUcParenR = 34;
    ///<summary>
    ///  I., II., III., …
    ///</summary>
    RomanUcPeriod = 35;
    ///<summary>
    ///  Thai alphabet parentheses - both
    ///</summary>
    ThaiAlphaParenBoth = 36;
    ///<summary>
    ///  Thai alphabet parentheses - right
    ///</summary>
    ThaiAlphaParenR = 37;
    ///<summary>
    ///  Thai alphabet period
    ///</summary>
    ThaiAlphaPeriod = 38;
    ///<summary>
    ///  Thai numerical parentheses - both
    ///</summary>
    ThaiNumParenBoth = 39;
    ///<summary>
    ///  Thai numerical parentheses - right
    ///</summary>
    ThaiNumParenR = 40;
    ///<summary>
    ///  Thai numerical period
    ///</summary>
    ThaiNumPeriod = 41;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents the different types of font alignment.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextFontAlignType')]
  DNTextFontAlignType = type Integer;
  DNTextFontAlignTypeHelper = record helper for DNTextFontAlignType
  public const
    ///<summary>
    ///  When the text flow is horizontal or simple vertical same as fontBaseline
    ///  but for other vertical modes same as fontCenter.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  The letters are anchored to the very bottom of a single line.
    ///</summary>
    Bottom = 1;
    ///<summary>
    ///  The letters are anchored to the bottom baseline of a single line.
    ///</summary>
    Baseline = 2;
    ///<summary>
    ///  The letters are anchored between the two baselines of a single line.
    ///</summary>
    Center = 3;
    ///<summary>
    ///  The letters are anchored to the top baseline of a single dline.
    ///</summary>
    Top = 4;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents the node type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextNodeType')]
  DNTextNodeType = type Integer;
  DNTextNodeTypeHelper = record helper for DNTextNodeType
  public const
    ///<summary>
    ///  Represents the text node.
    ///</summary>
    TextRun = 0;
    ///<summary>
    ///  Represents the text paragraph.
    ///</summary>
    TextParagraph = 1;
    ///<summary>
    ///  Represents the equation text.
    ///</summary>
    Equation = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents the text tab alignment types.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextTabAlignmentType')]
  DNTextTabAlignmentType = type Integer;
  DNTextTabAlignmentTypeHelper = record helper for DNTextTabAlignmentType
  public const
    ///<summary>
    ///  The text at this tab stop is center aligned.
    ///</summary>
    Center = 0;
    ///<summary>
    ///  At this tab stop, the decimals are lined up.
    ///</summary>
    Decimal = 1;
    ///<summary>
    ///  The text at this tab stop is left aligned.
    ///</summary>
    Left = 2;
    ///<summary>
    ///  The text at this tab stop is right aligned.
    ///</summary>
    Right = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  ///<summary>
  ///  Represents the text direct type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextVerticalType')]
  DNTextVerticalType = type Integer;
  DNTextVerticalTypeHelper = record helper for DNTextVerticalType
  public const
    ///<summary>
    ///  East Asian Vertical display.
    ///</summary>
    Vertical = 0;
    ///<summary>
    ///  Horizontal text.
    ///</summary>
    Horizontal = 1;
    ///<summary>
    ///  Displayed vertical and the text flows top down then LEFT to RIGHT
    ///</summary>
    VerticalLeftToRight = 2;
    ///<summary>
    ///  Each line is 90 degrees rotated clockwise
    ///</summary>
    Vertical90 = 3;
    ///<summary>
    ///  Each line is 270 degrees rotated clockwise
    ///</summary>
    Vertical270 = 4;
    ///<summary>
    ///  Determines if all of the text is vertical
    ///</summary>
    Stacked = 5;
    ///<summary>
    ///  Specifies that vertical WordArt should be shown from right to left rather than left to right.
    ///</summary>
    StackedRightToLeft = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Represents the preset texture type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.TextureType')]
  DNTextureType = type Integer;
  DNTextureTypeHelper = record helper for DNTextureType
  public const
    ///<summary>
    ///  Represents Blue Tissue Paper texture type.
    ///</summary>
    BlueTissuePaper = 0;
    ///<summary>
    ///  Represents Bouquet texture type.
    ///</summary>
    Bouquet = 1;
    ///<summary>
    ///  Represents Brown Marble texture type.
    ///</summary>
    BrownMarble = 2;
    ///<summary>
    ///  Represents Canvas texture type.
    ///</summary>
    Canvas = 3;
    ///<summary>
    ///  Represents Cork texture type.
    ///</summary>
    Cork = 4;
    ///<summary>
    ///  Represents Denim texture type.
    ///</summary>
    Denim = 5;
    ///<summary>
    ///  Represents Fish Fossil texture type.
    ///</summary>
    FishFossil = 6;
    ///<summary>
    ///  Represents Granite texture type.
    ///</summary>
    Granite = 7;
    ///<summary>
    ///  Represents Green Marble texture type.
    ///</summary>
    GreenMarble = 8;
    ///<summary>
    ///  Represents Medium Wood texture type.
    ///</summary>
    MediumWood = 9;
    ///<summary>
    ///  Represents Newsprint texture type.
    ///</summary>
    Newsprint = 10;
    ///<summary>
    ///  Represents Oak texture type.
    ///</summary>
    Oak = 11;
    ///<summary>
    ///  Represents Paper Bag texture type.
    ///</summary>
    PaperBag = 12;
    ///<summary>
    ///  Represents Papyrus texture type.
    ///</summary>
    Papyrus = 13;
    ///<summary>
    ///  Represents Parchment texture type.
    ///</summary>
    Parchment = 14;
    ///<summary>
    ///  Represents Pink Tissue Paper texture type.
    ///</summary>
    PinkTissuePaper = 15;
    ///<summary>
    ///  Represents Purple Mesh texture type.
    ///</summary>
    PurpleMesh = 16;
    ///<summary>
    ///  Represents Recycled Paper texture type.
    ///</summary>
    RecycledPaper = 17;
    ///<summary>
    ///  Represents Sand texture type.
    ///</summary>
    Sand = 18;
    ///<summary>
    ///  Represents Stationery texture type.
    ///</summary>
    Stationery = 19;
    ///<summary>
    ///  Represents Walnut Droplets texture type.
    ///</summary>
    Walnut = 20;
    ///<summary>
    ///  Represents Water Droplets texture type.
    ///</summary>
    WaterDroplets = 21;
    ///<summary>
    ///  Represents White Marble texture type.
    ///</summary>
    WhiteMarble = 22;
    ///<summary>
    ///  Represents Woven Mat texture type.
    ///</summary>
    WovenMat = 23;
    ///<summary>
    ///  Represents Unknown texture type.
    ///</summary>
    Unknown = 24;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  ///<summary>
  ///  Enumerates the weight types for a picture border or a chart line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.WeightType')]
  DNWeightType = type Integer;
  DNWeightTypeHelper = record helper for DNWeightType
  public const
    ///<summary>
    ///  Represents the weight of single line.
    ///</summary>
    SingleLine = 0;
    ///<summary>
    ///  Represents the weight of medium line.
    ///</summary>
    MediumLine = 1;
    ///<summary>
    ///  Represents the weight of wide line.
    ///</summary>
    WideLine = 2;
    ///<summary>
    ///  Represents the weight of hair line.
    ///</summary>
    HairLine = -1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Dynamic filter type.
  ///</summary>
  [DNTypeName('Aspose.Cells.DynamicFilterType')]
  DNDynamicFilterType = type Integer;
  DNDynamicFilterTypeHelper = record helper for DNDynamicFilterType
  public const
    ///<summary>
    ///  Shows values that are above average.
    ///</summary>
    AboveAverage = 0;
    ///<summary>
    ///  Shows values that are below average.
    ///</summary>
    BelowAverage = 1;
    ///<summary>
    ///  Shows last month's dates.
    ///</summary>
    LastMonth = 2;
    ///<summary>
    ///  Shows last quarter's dates.
    ///</summary>
    LastQuarter = 3;
    ///<summary>
    ///  Shows last week's dates.
    ///</summary>
    LastWeek = 4;
    ///<summary>
    ///  Shows last year's dates.
    ///</summary>
    LastYear = 5;
    ///<summary>
    ///  Shows the dates that are in January, regardless of year.
    ///</summary>
    January = 6;
    ///<summary>
    ///  Shows the dates that are in October, regardless of year.
    ///</summary>
    October = 7;
    ///<summary>
    ///  Shows the dates that are in November, regardless of year.
    ///</summary>
    November = 8;
    ///<summary>
    ///  Shows the dates that are in December, regardless of year.
    ///</summary>
    December = 9;
    ///<summary>
    ///  Shows the dates that are in February, regardless of year.
    ///</summary>
    February = 10;
    ///<summary>
    ///  Shows the dates that are in March, regardless of year.
    ///</summary>
    March = 11;
    ///<summary>
    ///  Shows the dates that are in April, regardless of year.
    ///</summary>
    April = 12;
    ///<summary>
    ///  Shows the dates that are in May, regardless of year.
    ///</summary>
    May = 13;
    ///<summary>
    ///  Shows the dates that are in June, regardless of year.
    ///</summary>
    June = 14;
    ///<summary>
    ///  Shows the dates that are in July, regardless of year.
    ///</summary>
    July = 15;
    ///<summary>
    ///  Shows the dates that are in August, regardless of year.
    ///</summary>
    August = 16;
    ///<summary>
    ///  Shows the dates that are in September, regardless of year.
    ///</summary>
    September = 17;
    ///<summary>
    ///  Shows next month's dates.
    ///</summary>
    NextMonth = 18;
    ///<summary>
    ///  Shows next quarter's dates.
    ///</summary>
    NextQuarter = 19;
    ///<summary>
    ///  Shows next week's dates.
    ///</summary>
    NextWeek = 20;
    ///<summary>
    ///  Shows next year's dates.
    ///</summary>
    NextYear = 21;
    ///<summary>
    ///  None.
    ///</summary>
    None = 22;
    ///<summary>
    ///  Shows the dates that are in the 1st quarter, regardless of year.
    ///</summary>
    Quarter1 = 23;
    ///<summary>
    ///  Shows the dates that are in the 2nd quarter, regardless of year.
    ///</summary>
    Quarter2 = 24;
    ///<summary>
    ///  Shows the dates that are in the 3rd quarter, regardless of year.
    ///</summary>
    Quarter3 = 25;
    ///<summary>
    ///  Shows the dates that are in the 4th quarter, regardless of year.
    ///</summary>
    Quarter4 = 26;
    ///<summary>
    ///  Shows this month's dates.
    ///</summary>
    ThisMonth = 27;
    ///<summary>
    ///  Shows this quarter's dates.
    ///</summary>
    ThisQuarter = 28;
    ///<summary>
    ///  Shows this week's dates.
    ///</summary>
    ThisWeek = 29;
    ///<summary>
    ///  Shows this year's dates.
    ///</summary>
    ThisYear = 30;
    ///<summary>
    ///  Shows today's dates.
    ///</summary>
    Today = 31;
    ///<summary>
    ///  Shows tomorrow's dates.
    ///</summary>
    Tomorrow = 32;
    ///<summary>
    ///  Shows the dates between the beginning of the year and today, inclusive.
    ///</summary>
    YearToDate = 33;
    ///<summary>
    ///  Shows yesterday's dates.
    ///</summary>
    Yesterday = 34;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Setting for rendering Emf metafile.
  ///</summary>
  [DNTypeName('Aspose.Cells.EmfRenderSetting')]
  DNEmfRenderSetting = type Integer;
  DNEmfRenderSettingHelper = record helper for DNEmfRenderSetting
  public const
    ///<summary>
    ///  Only rendering Emf records.
    ///</summary>
    EmfOnly = 0;
    ///<summary>
    ///  Prefer rendering EmfPlus records.
    ///</summary>
    EmfPlusPrefer = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Encryption Type.
  ///  Only used by excel2003.
  ///  We will encrypt 2007/2010 workbook using SHA AES the same as Excel does, and this EncryptionType will be ignored.
  ///</summary>
  [DNTypeName('Aspose.Cells.EncryptionType')]
  DNEncryptionType = type Integer;
  DNEncryptionTypeHelper = record helper for DNEncryptionType
  public const
    ///<summary></summary>
    XOR_ = 0;
    ///<summary>
    ///  Office 97/2000 compatible.
    ///</summary>
    Compatible = 1;
    ///<summary></summary>
    EnhancedCryptographicProviderV1 = 2;
    ///<summary></summary>
    StrongCryptographicProvider = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents all error check type.
  ///</summary>
  [DNTypeName('Aspose.Cells.ErrorCheckType')]
  DNErrorCheckType = type Integer;
  DNErrorCheckTypeHelper = record helper for DNErrorCheckType
  public const
    ///<summary>
    ///  check for calculation errors
    ///</summary>
    Calc = 1;
    ///<summary>
    ///  check for references to empty cells
    ///</summary>
    EmptyCellRef = 2;
    ///<summary>
    ///  check the format of numeric values
    ///</summary>
    TextNumber = 4;
    ///<summary>
    ///  check formulas with references to less than the entirety
    ///  of a range containing continuous data
    ///</summary>
    InconsistRange = 8;
    ///<summary>
    ///  check formulas that are inconsistent with formulas in neighboring cells.
    ///</summary>
    InconsistFormula = 16;
    ///<summary>
    ///  check the format of date/time values
    ///</summary>
    TextDate = 32;
    ///<summary>
    ///  check for unprotected formulas
    ///</summary>
    UnproctedFormula = 64;
    ///<summary>
    ///  whether to perform data validation
    ///</summary>
    Validation = 128;
    ///<summary>
    ///  Ignore errors when cells contain a value different from a calculated column formula.
    ///</summary>
    CalculatedColumn = 129;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents custom exception type code.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExceptionType')]
  DNExceptionType = type Integer;
  DNExceptionTypeHelper = record helper for DNExceptionType
  public const
    ///<summary>
    ///  Invalid chart setting.
    ///</summary>
    Chart = 0;
    ///<summary>
    ///  Invalid data type setting.
    ///</summary>
    DataType = 1;
    ///<summary>
    ///  Invalid data validation setting.
    ///</summary>
    DataValidation = 2;
    ///<summary>
    ///  Invalid data validation setting.
    ///</summary>
    ConditionalFormatting = 3;
    ///<summary>
    ///  Invalid file format.
    ///</summary>
    FileFormat = 4;
    ///<summary>
    ///  Invalid formula.
    ///</summary>
    Formula = 5;
    ///<summary>
    ///  Invalid data.
    ///</summary>
    InvalidData = 6;
    ///<summary>
    ///  Invalid operator.
    ///</summary>
    InvalidOperator = 7;
    ///<summary>
    ///  Incorrect password.
    ///</summary>
    IncorrectPassword = 8;
    ///<summary>
    ///  License related errors.
    ///</summary>
    License = 9;
    ///<summary>
    ///  Out of MS Excel limitation error.
    ///</summary>
    Limitation = 10;
    ///<summary>
    ///  Invalid page setup setting.
    ///</summary>
    PageSetup = 11;
    ///<summary>
    ///  Invalid pivotTable setting.
    ///</summary>
    PivotTable = 12;
    ///<summary>
    ///  Invalid drawing object setting.
    ///</summary>
    Shape = 13;
    ///<summary>
    ///  Invalid sparkline object setting.
    ///</summary>
    Sparkline = 14;
    ///<summary>
    ///  Invalid worksheet name.
    ///</summary>
    SheetName = 15;
    ///<summary>
    ///  Invalid worksheet type.
    ///</summary>
    SheetType = 16;
    ///<summary>
    ///  The process is interrupted.
    ///</summary>
    Interrupted = 17;
    ///<summary>
    ///  The file is invalid.
    ///</summary>
    IO = 18;
    ///<summary>
    ///  Permission is required to open this file.
    ///</summary>
    Permission = 19;
    ///<summary>
    ///  Unsupported feature.
    ///</summary>
    UnsupportedFeature = 20;
    ///<summary>
    ///  Unsupported stream to be opened.
    ///</summary>
    UnsupportedStream = 21;
    ///<summary>
    ///  Files contains some undisclosed information.
    ///</summary>
    UndisclosedInformation = 22;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies external database source type
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionDataSourceType')]
  DNConnectionDataSourceType = type Integer;
  DNConnectionDataSourceTypeHelper = record helper for DNConnectionDataSourceType
  public const
    ///<summary>
    ///  ODBC-based source
    ///</summary>
    ODBCBasedSource = 1;
    ///<summary>
    ///  DAO-based source
    ///</summary>
    DAOBasedSource = 2;
    ///<summary>
    ///  File based database source
    ///</summary>
    FileBasedDataBaseSource = 3;
    ///<summary>
    ///  Web query
    ///</summary>
    WebQuery = 4;
    ///<summary>
    ///  OLE DB-based source
    ///</summary>
    OLEDBBasedSource = 5;
    ///<summary>
    ///  Text-based source
    ///</summary>
    TextBasedSource = 6;
    ///<summary>
    ///  ADO record set
    ///</summary>
    ADORecordSet = 7;
    ///<summary>
    ///  DSP
    ///</summary>
    DSP = 8;
    ///<summary>
    ///  OLE DB data source created by the Spreadsheet Data Model.
    ///</summary>
    OLEDBDataModel = 100;
    ///<summary>
    ///  Data feed data source created by the Spreadsheet Data Model.
    ///</summary>
    DataFeedDataModel = 101;
    ///<summary>
    ///  Worksheet data source created by the Spreadsheet Data Model.
    ///</summary>
    WorksheetDataModel = 102;
    ///<summary>
    ///  Worksheet data source created by the Spreadsheet Data Model.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use WorksheetDataModel enum.
    ///  This property will be removed 12 months later since September 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    Table = 102;
    ///<summary>
    ///  Text data source created by the Spreadsheet Data Model.
    ///</summary>
    TextDataModel = 103;
    ///<summary>
    ///  Text data source created by the Spreadsheet Data Model.
    ///</summary>
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies the parameter type of external connection
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionParameterType')]
  DNConnectionParameterType = type Integer;
  DNConnectionParameterTypeHelper = record helper for DNConnectionParameterType
  public const
    ///<summary>
    ///  Get the parameter value from a cell on each refresh.
    ///</summary>
    Cell = 0;
    ///<summary>
    ///  Prompt the user on each refresh for a parameter value.
    ///</summary>
    Prompt = 1;
    ///<summary>
    ///  Use a constant value on each refresh for the parameter value.
    ///</summary>
    Value = 2;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies Credentials method used for server access.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.CredentialsMethodType')]
  DNCredentialsMethodType = type Integer;
  DNCredentialsMethodTypeHelper = record helper for DNCredentialsMethodType
  public const
    ///<summary>
    ///  Integrated Authentication
    ///</summary>
    Integrated = 0;
    ///<summary>
    ///  No Credentials
    ///</summary>
    None = 1;
    ///<summary>
    ///  Prompt Credentials
    ///</summary>
    Prompt = 2;
    ///<summary>
    ///  Stored Credentials
    ///</summary>
    Stored_ = 3;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies how to handle formatting from the HTML source
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.HtmlFormatHandlingType')]
  DNHtmlFormatHandlingType = type Integer;
  DNHtmlFormatHandlingTypeHelper = record helper for DNHtmlFormatHandlingType
  public const
    ///<summary>
    ///  Transfer all HTML formatting into the worksheet along with data.
    ///</summary>
    All = 0;
    ///<summary>
    ///  Bring data in as unformatted text (setting data types still occurs).
    ///</summary>
    None = 1;
    ///<summary>
    ///  Translate HTML formatting to rich text formatting on the data brought into the worksheet.
    ///</summary>
    Rtf = 2;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies the OLE DB command type.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.OLEDBCommandType')]
  DNOLEDBCommandType = type Integer;
  DNOLEDBCommandTypeHelper = record helper for DNOLEDBCommandType
  public const
    ///<summary>
    ///  The command type is not specified.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies a cube name
    ///</summary>
    ///<remarks>unsupported</remarks>
    CubeName = 1;
    ///<summary>
    ///  Specifies a SQL statement
    ///</summary>
    SqlStatement = 2;
    ///<summary>
    ///  Specifies a table name
    ///</summary>
    TableName = 3;
    ///<summary>
    ///  Specifies that default information has been given, and it is up to the provider how to interpret.
    ///</summary>
    ///<remarks>unsupported</remarks>
    DefaultInformation = 4;
    ///<summary>
    ///  Specifies a query which is against a web based List Data Provider.
    ///</summary>
    ///<remarks>unsupported</remarks>
    WebBasedList = 5;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies what the spreadsheet application should do when a connection fails.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.ReConnectionMethodType')]
  DNReConnectionMethodType = type Integer;
  DNReConnectionMethodTypeHelper = record helper for DNReConnectionMethodType
  public const
    ///<summary>
    ///  On refresh use the existing connection information and if it ends up being invalid
    ///  then get updated connection information, if available from the external connection file.
    ///</summary>
    Required = 1;
    ///<summary>
    ///  On every refresh get updated connection information from the external connection file,
    ///  if available, and use that instead of the existing connection information.
    ///  In this case the data refresh will fail if the external connection file is unavailable.
    ///</summary>
    Always = 2;
    ///<summary>
    ///  Never get updated connection information from the external connection file
    ///  even if it is available and even if the existing connection information is invalid
    ///</summary>
    Never = 3;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  ///<summary>
  ///  Specifies SQL data type of the parameter. Only valid for ODBC sources.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.SqlDataType')]
  DNSqlDataType = type Integer;
  DNSqlDataTypeHelper = record helper for DNSqlDataType
  public const
    ///<summary>
    ///  sql unknown type
    ///</summary>
    SqlUnknownType = 0;
    ///<summary>
    ///  sql char
    ///</summary>
    SqlChar = 1;
    ///<summary>
    ///  sql numeric
    ///</summary>
    SqlNumeric = 2;
    ///<summary>
    ///  sql decimal
    ///</summary>
    SqlDecimal = 3;
    ///<summary>
    ///  sql integer
    ///</summary>
    SqlInteger = 4;
    ///<summary>
    ///  sql small int
    ///</summary>
    SqlSmallInt = 5;
    ///<summary>
    ///  sql float
    ///</summary>
    SqlFloat = 6;
    ///<summary>
    ///  sql real
    ///</summary>
    SqlReal = 7;
    ///<summary>
    ///  sql double
    ///</summary>
    SqlDouble = 8;
    ///<summary>
    ///  sql date type
    ///</summary>
    SqlTypeDate = 9;
    ///<summary>
    ///  sql time type
    ///</summary>
    SqlTypeTime = 10;
    ///<summary>
    ///  sql timestamp type
    ///</summary>
    SqlTypeTimestamp = 11;
    ///<summary>
    ///  sql variable char
    ///</summary>
    SqlVarChar = 12;
    ///<summary>
    ///  sql interval year
    ///</summary>
    SqlIntervalYear = 101;
    ///<summary>
    ///  sql interval month
    ///</summary>
    SqlIntervalMonth = 102;
    ///<summary>
    ///  sql interval day
    ///</summary>
    SqlIntervalDay = 103;
    ///<summary>
    ///  sql interval hour
    ///</summary>
    SqlIntervalHour = 104;
    ///<summary>
    ///  sql interval minute
    ///</summary>
    SqlIntervalMinute = 105;
    ///<summary>
    ///  sql interval second
    ///</summary>
    SqlIntervalSecond = 106;
    ///<summary>
    ///  sql interval year to month
    ///</summary>
    SqlIntervalYearToMonth = 107;
    ///<summary>
    ///  sql interval day to hour
    ///</summary>
    SqlIntervalDayToHour = 108;
    ///<summary>
    ///  sql interval day to minute
    ///</summary>
    SqlIntervalDayToMinute = 109;
    ///<summary>
    ///  sql interval day to second
    ///</summary>
    SqlIntervalDayToSecond = 110;
    ///<summary>
    ///  sql interval hour to minute
    ///</summary>
    SqlIntervalHourToMinute = 111;
    ///<summary>
    ///  sql interval hour to second
    ///</summary>
    SqlIntervalHourToSecond = 112;
    ///<summary>
    ///  sql interval minute to second
    ///</summary>
    SqlIntervalMinuteToSecond = 113;
    ///<summary>
    ///  sql unsigned offset
    ///</summary>
    SqlUnsignedOffset = -22;
    ///<summary>
    ///  sql signed offset
    ///</summary>
    SqlSignedOffset = -20;
    ///<summary>
    ///  sql guid
    ///</summary>
    SqlGUID = -11;
    ///<summary>
    ///  sql wide long variable char
    ///</summary>
    SqlWLongVarchar = -10;
    ///<summary>
    ///  sql wide variable char
    ///</summary>
    SqlWVarchar = -9;
    ///<summary>
    ///  sql wide char
    ///</summary>
    SqlWChar = -8;
    ///<summary>
    ///  sql bit
    ///</summary>
    SqlBit = -7;
    ///<summary>
    ///  sql tiny int
    ///</summary>
    SqlTinyInt = -6;
    ///<summary>
    ///  sql big int
    ///</summary>
    SqlBigInt = -5;
    ///<summary>
    ///  sql long variable binary
    ///</summary>
    SqlLongVarBinary = -4;
    ///<summary>
    ///  sql variable binary
    ///</summary>
    SqlVarBinary = -3;
    ///<summary>
    ///  sql binary
    ///</summary>
    SqlBinary = -2;
    ///<summary>
    ///  sql long variable char
    ///</summary>
    SqlLongVarChar = -1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the type of external link.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalLinkType')]
  DNExternalLinkType = type Integer;
  DNExternalLinkTypeHelper = record helper for DNExternalLinkType
  public const
    ///<summary>
    ///  Represents the DDE link.
    ///</summary>
    DDELink = 0;
    ///<summary>
    ///  Represents external link.
    ///</summary>
    External_ = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the file format types.
  ///</summary>
  [DNTypeName('Aspose.Cells.FileFormatType')]
  DNFileFormatType = type Integer;
  DNFileFormatTypeHelper = record helper for DNFileFormatType
  public const
    ///<summary>
    ///  Comma-Separated Values(CSV) text file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Csv" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    CSV = 1;
    ///<summary>
    ///  Excel97-2003 spreadsheet file.
    ///</summary>
    Excel97To2003 = 5;
    ///<summary>
    ///  Office Open XML SpreadsheetML file (macro-free).
    ///</summary>
    Xlsx = 6;
    ///<summary>
    ///  Office Open XML SpreadsheetML Macro-Enabled file.
    ///</summary>
    Xlsm = 7;
    ///<summary>
    ///  Office Open XML SpreadsheetML Template (macro-free).
    ///</summary>
    Xltx = 8;
    ///<summary>
    ///  Office Open XML SpreadsheetML Macro-Enabled Template.
    ///</summary>
    Xltm = 9;
    ///<summary>
    ///  Office Open XML SpreadsheetML addinMacro-Enabled file.
    ///</summary>
    Xlam = 10;
    ///<summary>
    ///  Tab-Separated Values(TSV) text file, same with <see cref="F:Aspose.Cells.FileFormatType.Tsv" />
    ///  .
    ///</summary>
    TabDelimited = 11;
    ///<summary>
    ///  Tab-Separated Values(TSV) text file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Tsv" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    TSV = 11;
    ///<summary>
    ///  HTML format.
    ///</summary>
    Html = 12;
    ///<summary>
    ///  PDF (Adobe Portable Document) format.
    ///</summary>
    Pdf = 13;
    ///<summary>
    ///  Open Document Sheet(ODS) file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Ods" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    ODS = 14;
    ///<summary>
    ///  Excel 2003 SpreadsheetML file.
    ///</summary>
    SpreadsheetML = 15;
    ///<summary>
    ///  Excel 2003 SpreadsheetML file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.SpreadsheetML" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    Excel2003XML = 15;
    ///<summary>
    ///  The Excel Binary File Format (.xlsb)
    ///</summary>
    Xlsb = 16;
    ///<summary>
    ///  MHTML (Web archive) format.
    ///</summary>
    MHtml = 17;
    ///<summary>
    ///  XPS (XML Paper Specification) format.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Xps" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    XPS = 20;
    ///<summary>
    ///  Represents a TIFF file.
    ///</summary>
    Tiff = 21;
    ///<summary>
    ///  Represents an Excel95 xls file.
    ///</summary>
    Excel95 = 22;
    ///<summary>
    ///  Represents an Excel4.0 xls file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///</remarks>
    Excel4 = 23;
    ///<summary>
    ///  Represents an Excel3.0 xls file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///</remarks>
    Excel3 = 24;
    ///<summary>
    ///  Represents an Excel2.1 xls file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///</remarks>
    Excel2 = 25;
    ///<summary>
    ///  Represents a pptx file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Pptx = 26;
    ///<summary>
    ///  Represents a docx file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Docx = 27;
    ///<summary>
    ///  SVG file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Svg" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    SVG = 28;
    ///<summary>
    ///  Data Interchange Format.
    ///</summary>
    Dif = 30;
    ///<summary>
    ///  Represents a doc file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Doc = 31;
    ///<summary>
    ///  Represents a ppt file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Ppt = 32;
    ///<summary>
    ///  Represents a email file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    MapiMessage = 33;
    ///<summary>
    ///  Represents the MS Equation 3.0 object.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    MsEquation = 34;
    ///<summary>
    ///  Represents the embedded native object.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Ole10Native = 35;
    ///<summary>
    ///  Represents MS Visio VSD binary format.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Vsd = 36;
    ///<summary>
    ///  Represents MS Visio 2013 VSDX file format.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Vsdx" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    VSDX = 37;
    ///<summary>
    ///  Represents a docm file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Docm = 38;
    ///<summary>
    ///  Represents a dotx file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Dotx = 39;
    ///<summary>
    ///  Represents a dotm file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Dotm = 40;
    ///<summary>
    ///  Represents a pptm file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Pptm = 41;
    ///<summary>
    ///  Represents a Potx file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Potx = 42;
    ///<summary>
    ///  Represents a Potm file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Potm = 43;
    ///<summary>
    ///  Represents a ppsx file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Ppsx = 44;
    ///<summary>
    ///  Represents a ppsm file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Ppsm = 45;
    ///<summary>
    ///  Represents office open xml file(such as xlsx, docx,pptx, etc).
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///  If the office open xml file is encrypted, it could not be detected as xlsx ,docx, pptx,etc.
    ///</remarks>
    Ooxml = 46;
    ///<summary>
    ///  Represents an ODT file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Odt" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    ODT = 47;
    ///<summary>
    ///  Represents a ODP file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Odp = 48;
    ///<summary>
    ///  Represents an ODF file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Odf" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    ODF = 49;
    ///<summary>
    ///  Represents an ODG file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Odg" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    ODG = 50;
    ///<summary>
    ///  Represents a simple xml file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Xml = 51;
    ///<summary>
    ///  Excel97-2003 spreadsheet template.
    ///</summary>
    Xlt = 52;
    ///<summary>
    ///  Represents an OTT file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Ott" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    OTT = 53;
    ///<summary>
    ///  Represents a BMP file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported
    ///  Only for detecting file type.
    ///</remarks>
    Bmp = 54;
    ///<summary>
    ///  Represents an OTS file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Ots" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    OTS = 55;
    ///<summary>
    ///  Represents Numbers 9.0 file format by Apple Inc
    ///</summary>
    Numbers09 = 56;
    ///<summary>
    ///  Represents Numbers 9.0 file format by Apple Inc
    ///</summary>
    Numbers = 56;
    ///<summary>
    ///  Represents markdown document.
    ///</summary>
    Markdown = 57;
    ///<summary>
    ///  Represents embedded graph chart.
    ///</summary>
    GraphChart = 58;
    ///<summary>
    ///  Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
    ///</summary>
    Fods = 59;
    ///<summary>
    ///  Represents StarOffice Calc Spreadsheet (.sxc) file format.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.FileFormatType.Sxc" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    SXC = 60;
    ///<summary>
    ///  Represents a OTP file.
    ///</summary>
    ///<remarks>
    ///  The file format is not supported.
    ///  Only for detecting file type.
    ///</remarks>
    Otp = 61;
    ///<summary>
    ///  Represents Numbers 3.5 file format since 2014 by Apple Inc
    ///</summary>
    ///<remarks>
    ///  The file format is not supported.
    ///  Only for detecting file type.
    ///</remarks>
    Numbers35 = 62;
    ///<summary>
    ///  Represents unrecognized format, cannot be loaded.
    ///</summary>
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Custom Filter operator type.
  ///</summary>
  [DNTypeName('Aspose.Cells.FilterOperatorType')]
  DNFilterOperatorType = type Integer;
  DNFilterOperatorTypeHelper = record helper for DNFilterOperatorType
  public const
    ///<summary>
    ///  Represents LessOrEqual operator.
    ///</summary>
    LessOrEqual = 0;
    ///<summary>
    ///  Represents LessThan operator.
    ///</summary>
    LessThan = 1;
    ///<summary>
    ///  Represents Equal operator.
    ///</summary>
    Equal = 2;
    ///<summary>
    ///  Represents GreaterThan operator.
    ///</summary>
    GreaterThan = 3;
    ///<summary>
    ///  Represents NotEqual operator.
    ///</summary>
    NotEqual = 4;
    ///<summary>
    ///  Represents GreaterOrEqual operator.
    ///</summary>
    GreaterOrEqual = 5;
    ///<summary>
    ///  Represents no comparison.
    ///</summary>
    None = 6;
    ///<summary>
    ///  Begins with the text.
    ///</summary>
    BeginsWith = 7;
    ///<summary>
    ///  Ends with the text.
    ///</summary>
    EndsWith = 8;
    ///<summary>
    ///  Contains the text.
    ///</summary>
    Contains_ = 9;
    ///<summary>
    ///  Not contains the text.
    ///</summary>
    NotContains = 10;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  The filter type.
  ///</summary>
  [DNTypeName('Aspose.Cells.FilterType')]
  DNFilterType = type Integer;
  DNFilterTypeHelper = record helper for DNFilterType
  public const
    ///<summary>
    ///  Filter by fill color of the cell.
    ///</summary>
    ColorFilter = 0;
    ///<summary>
    ///  Custom filter type.
    ///</summary>
    CustomFilters = 1;
    ///<summary>
    ///  Dynamic filter type.
    ///</summary>
    DynamicFilter = 2;
    ///<summary>
    ///  When multiple values are chosen to filter by, or when a group of date values are chosen to filter by,
    ///  this element groups those criteria together.
    ///</summary>
    MultipleFilters = 3;
    ///<summary>
    ///  Filter by icon of conditonal formatting.
    ///</summary>
    IconFilter = 4;
    ///<summary>
    ///  Top 10 filter.
    ///</summary>
    Top10 = 5;
    ///<summary>
    ///  No filter.
    ///</summary>
    None = 6;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the scheme type of the font.
  ///</summary>
  [DNTypeName('Aspose.Cells.FontSchemeType')]
  DNFontSchemeType = type Integer;
  DNFontSchemeTypeHelper = record helper for DNFontSchemeType
  public const
    ///<summary>
    ///  None
    ///</summary>
    None = 0;
    ///<summary>
    ///  Major scheme.
    ///</summary>
    Major = 1;
    ///<summary>
    ///  Minor scheme.
    ///</summary>
    ///<remarks>
    ///  The font's name will be automatically changed with the language.
    ///</remarks>
    Minor = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies the type of a font source.
  ///</summary>
  [DNTypeName('Aspose.Cells.FontSourceType')]
  DNFontSourceType = type Integer;
  DNFontSourceTypeHelper = record helper for DNFontSourceType
  public const
    ///<summary>
    ///  represents single font file.
    ///</summary>
    FontFile = 0;
    ///<summary>
    ///  represents folder with font files.
    ///</summary>
    FontsFolder = 1;
    ///<summary>
    ///  represents single font in memory.
    ///</summary>
    MemoryFont = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates the font underline types.
  ///</summary>
  [DNTypeName('Aspose.Cells.FontUnderlineType')]
  DNFontUnderlineType = type Integer;
  DNFontUnderlineTypeHelper = record helper for DNFontUnderlineType
  public const
    ///<summary>
    ///  Represents no underline.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents single underline.
    ///</summary>
    Single = 1;
    ///<summary>
    ///  Represents double underline.
    ///</summary>
    Double = 2;
    ///<summary>
    ///  Represents single accounting underline.
    ///</summary>
    Accounting = 3;
    ///<summary>
    ///  Represents double accounting underline.
    ///</summary>
    DoubleAccounting = 4;
    ///<summary>
    ///  Represents Dashed Underline
    ///</summary>
    Dash = 5;
    ///<summary>
    ///  Represents Thick Dash-Dot-Dot Underline
    ///</summary>
    DashDotDotHeavy = 6;
    ///<summary>
    ///  Represents Thick Dash-Dot Underline
    ///</summary>
    DashDotHeavy = 7;
    ///<summary>
    ///  Represents Thick Dashed Underline
    ///</summary>
    DashedHeavy = 8;
    ///<summary>
    ///  Represents Long Dashed Underline
    ///</summary>
    DashLong = 9;
    ///<summary>
    ///  Represents Thick Long Dashed Underline
    ///</summary>
    DashLongHeavy = 10;
    ///<summary>
    ///  Represents Dash-Dot Underline
    ///</summary>
    DotDash = 11;
    ///<summary>
    ///  Represents Dash-Dot-Dot Underline
    ///</summary>
    DotDotDash = 12;
    ///<summary>
    ///  Represents Dotted Underline
    ///</summary>
    Dotted = 13;
    ///<summary>
    ///  Represents Thick Dotted Underline
    ///</summary>
    DottedHeavy = 14;
    ///<summary>
    ///  Represents Thick Underline
    ///</summary>
    Heavy = 15;
    ///<summary>
    ///  Represents Wave Underline
    ///</summary>
    Wave = 16;
    ///<summary>
    ///  Represents Double Wave Underline
    ///</summary>
    WavyDouble = 17;
    ///<summary>
    ///  Represents Heavy Wave Underline
    ///</summary>
    WavyHeavy = 18;
    ///<summary>
    ///  Represents Underline Non-Space Characters Only
    ///</summary>
    Words = 19;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Conditional format rule type.
  ///</summary>
  [DNTypeName('Aspose.Cells.FormatConditionType')]
  DNFormatConditionType = type Integer;
  DNFormatConditionTypeHelper = record helper for DNFormatConditionType
  public const
    ///<summary>
    ///  This conditional formatting rule compares a cell value
    ///  to a formula calculated result, using an operator.
    ///</summary>
    CellValue = 0;
    ///<summary>
    ///  This conditional formatting rule contains a formula to
    ///  evaluate. When the formula result is true, the cell is
    ///  highlighted.
    ///</summary>
    Expression = 1;
    ///<summary>
    ///  This conditional formatting rule creates a gradated
    ///  color scale on the cells.
    ///</summary>
    ColorScale = 2;
    ///<summary>
    ///  This conditional formatting rule displays a gradated
    ///  data bar in the range of cells.
    ///</summary>
    DataBar = 3;
    ///<summary>
    ///  This conditional formatting rule applies icons to cells
    ///  according to their values.
    ///</summary>
    IconSet = 4;
    ///<summary>
    ///  This conditional formatting rule highlights cells whose
    ///  values fall in the top N or bottom N bracket, as
    ///  specified.
    ///</summary>
    Top10 = 5;
    ///<summary>
    ///  This conditional formatting rule highlights unique
    ///  values in the range.
    ///</summary>
    UniqueValues = 6;
    ///<summary>
    ///  This conditional formatting rule highlights duplicated
    ///  values.
    ///</summary>
    DuplicateValues = 7;
    ///<summary>
    ///  This conditional formatting rule highlights cells
    ///  containing given text. Equivalent to using the SEARCH()
    ///  sheet function to determine whether the cell contains
    ///  the text.
    ///</summary>
    ContainsText = 8;
    ///<summary>
    ///  This conditional formatting rule highlights cells that
    ///  are not blank. Equivalent of using LEN(TRIM()). This
    ///  means that if the cell contains only characters that
    ///  TRIM() would remove, then it is considered blank. An
    ///  empty cell is also considered blank.
    ///</summary>
    NotContainsText = 9;
    ///<summary>
    ///  This conditional formatting rule highlights cells in the
    ///  range that begin with the given text. Equivalent to
    ///  using the LEFT() sheet function and comparing values.
    ///</summary>
    BeginsWith = 10;
    ///<summary>
    ///  This conditional formatting rule highlights cells ending
    ///  with given text. Equivalent to using the RIGHT() sheet
    ///  function and comparing values.
    ///</summary>
    EndsWith = 11;
    ///<summary>
    ///  This conditional formatting rule highlights cells that
    ///  are completely blank. Equivalent of using LEN(TRIM()).
    ///  This means that if the cell contains only characters
    ///  that TRIM() would remove, then it is considered blank.
    ///  An empty cell is also considered blank.
    ///</summary>
    ContainsBlanks = 12;
    ///<summary>
    ///  This conditional formatting rule highlights cells that
    ///  are not blank. Equivalent of using LEN(TRIM()). This
    ///  means that if the cell contains only characters that
    ///  TRIM() would remove, then it is considered blank. An
    ///  empty cell is also considered blank.
    ///</summary>
    NotContainsBlanks = 13;
    ///<summary>
    ///  This conditional formatting rule highlights cells with
    ///  formula errors. Equivalent to using ISERROR() sheet
    ///  function to determine if there is a formula error.
    ///</summary>
    ContainsErrors = 14;
    ///<summary>
    ///  This conditional formatting rule highlights cells
    ///  without formula errors. Equivalent to using ISERROR()
    ///  sheet function to determine if there is a formula error.
    ///</summary>
    NotContainsErrors = 15;
    ///<summary>
    ///  This conditional formatting rule highlights cells
    ///  containing dates in the specified time period. The
    ///  underlying value of the cell is evaluated, therefore the
    ///  cell does not need to be formatted as a date to be
    ///  evaluated. For example, with a cell containing the
    ///  value 38913 the conditional format shall be applied if
    ///  the rule requires a value of 7/14/2006.
    ///</summary>
    TimePeriod = 16;
    ///<summary>
    ///  This conditional formatting rule highlights cells that
    ///  are above or below the average for all values in the
    ///  range.
    ///</summary>
    AboveAverage = 17;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Condition value type.
  ///</summary>
  [DNTypeName('Aspose.Cells.FormatConditionValueType')]
  DNFormatConditionValueType = type Integer;
  DNFormatConditionValueTypeHelper = record helper for DNFormatConditionValueType
  public const
    ///<summary>
    ///  The minimum/ midpoint / maximum value for the
    ///  gradient is determined by a formula.
    ///</summary>
    Formula = 0;
    ///<summary>
    ///  Indicates that the maximum value in the range shall be
    ///  used as the maximum value for the gradient.
    ///</summary>
    Max = 1;
    ///<summary>
    ///  Indicates that the minimum value in the range shall be
    ///  used as the minimum value for the gradient.
    ///</summary>
    Min = 2;
    ///<summary>
    ///  Indicates that the minimum / midpoint / maximum
    ///  value for the gradient is specified by a constant
    ///  numeric value.
    ///</summary>
    Number = 3;
    ///<summary>
    ///  Value indicates a percentage between the minimum
    ///  and maximum values in the range shall be used as the
    ///  minimum / midpoint / maximum value for the gradient.
    ///</summary>
    Percent = 4;
    ///<summary>
    ///  Value indicates a percentile ranking in the range shall
    ///  be used as the minimum / midpoint / maximum value
    ///  for the gradient.
    ///</summary>
    Percentile = 5;
    ///<summary>
    ///  Indicates that the Automatic maximum value in the range shall be
    ///  used as the Automatic maximum value for the gradient.
    ///</summary>
    AutomaticMax = 6;
    ///<summary>
    ///  Indicates that the Automatic minimum value in the range shall be
    ///  used as the Automatic minimum value for the gradient.
    ///</summary>
    AutomaticMin = 7;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates grid line Type.
  ///</summary>
  [DNTypeName('Aspose.Cells.GridlineType')]
  DNGridlineType = type Integer;
  DNGridlineTypeHelper = record helper for DNGridlineType
  public const
    ///<summary>
    ///  Represents dotted line.
    ///</summary>
    Dotted = 0;
    ///<summary>
    ///  Represents hair line.
    ///</summary>
    Hair = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the command type of header and footer.
  ///</summary>
  [DNTypeName('Aspose.Cells.HeaderFooterCommandType')]
  DNHeaderFooterCommandType = type Integer;
  DNHeaderFooterCommandTypeHelper = record helper for DNHeaderFooterCommandType
  public const
    ///<summary>
    ///  The text.
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Current page number
    ///</summary>
    CurrentPage = 1;
    ///<summary>
    ///  Page count
    ///</summary>
    Pagecount = 2;
    ///<summary>
    ///  Current date
    ///</summary>
    CurrentDate = 3;
    ///<summary>
    ///  Current time
    ///</summary>
    CurrentTime = 4;
    ///<summary>
    ///  Sheet name
    ///</summary>
    SheetName = 5;
    ///<summary>
    ///  File name without path
    ///</summary>
    FileName = 6;
    ///<summary>
    ///  File path without file name
    ///</summary>
    FilePath = 7;
    ///<summary>
    ///  Picture
    ///</summary>
    Picture = 8;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents five types of html cross string.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlCrossType')]
  DNHtmlCrossType = type Integer;
  DNHtmlCrossTypeHelper = record helper for DNHtmlCrossType
  public const
    ///<summary>
    ///  Display like MS Excel,depends on the next cell.
    ///  If the next cell is null,the string will cross,or it will be truncated
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Display the string like MS Excel exporting html.
    ///</summary>
    MSExport = 1;
    ///<summary>
    ///  Display HTML cross string, this performance for creating large html files will be more than ten times faster than setting the value to Default or FitToCell.
    ///</summary>
    Cross = 2;
    ///<summary>
    ///  Display HTML cross string and hide the right string when the texts overlap.
    ///</summary>
    CrossHideRight = 3;
    ///<summary>
    ///  Only displaying the string within the width of cell.
    ///</summary>
    FitToCell = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the options for exporting html data.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlExportDataOptions')]
  DNHtmlExportDataOptions = type Integer;
  DNHtmlExportDataOptionsHelper = record helper for DNHtmlExportDataOptions
  public const
    ///<summary>
    ///  Export file to html which only contains table part.
    ///</summary>
    Table = 1;
    ///<summary>
    ///  Export all the data to html.
    ///</summary>
    All = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents two types of showing the hidden columns in html.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlHiddenColDisplayType')]
  DNHtmlHiddenColDisplayType = type Integer;
  DNHtmlHiddenColDisplayTypeHelper = record helper for DNHtmlHiddenColDisplayType
  public const
    ///<summary>
    ///  Hidden the hidden columns in html page.
    ///</summary>
    Hidden = 0;
    ///<summary>
    ///  Remove the hidden columns in html page.
    ///</summary>
    Remove = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents two types of showing the hidden rows in html.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlHiddenRowDisplayType')]
  DNHtmlHiddenRowDisplayType = type Integer;
  DNHtmlHiddenRowDisplayTypeHelper = record helper for DNHtmlHiddenRowDisplayType
  public const
    ///<summary>
    ///  Hidden the hidden rows in html page.
    ///</summary>
    Hidden = 0;
    ///<summary>
    ///  Remove the hidden rows in html page.
    ///</summary>
    Remove = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the type of target attribute in HTML <a /> tag.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlLinkTargetType')]
  DNHtmlLinkTargetType = type Integer;
  DNHtmlLinkTargetTypeHelper = record helper for DNHtmlLinkTargetType
  public const
    ///<summary>
    ///  Opens the linked document in a new window or tab
    ///</summary>
    Blank = 0;
    ///<summary>
    ///  Opens the linked document in the parent frame
    ///</summary>
    Parent = 1;
    ///<summary>
    ///  Opens the linked document in the same frame as it was clicked (this is default)
    ///</summary>
    Self = 2;
    ///<summary>
    ///  Opens the linked document in the full body of the window
    ///</summary>
    Top = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Icon set type for conditional formatting.
  ///  The threshold values for triggering the different icons within a set are
  ///  configurable, and the icon order is reversible.
  ///</summary>
  [DNTypeName('Aspose.Cells.IconSetType')]
  DNIconSetType = type Integer;
  DNIconSetTypeHelper = record helper for DNIconSetType
  public const
    ///<summary>
    ///  3 arrows icon set.
    ///</summary>
    Arrows3 = 0;
    ///<summary>
    ///  3 gray arrows icon set.
    ///</summary>
    ArrowsGray3 = 1;
    ///<summary>
    ///  3 flags icon set.
    ///</summary>
    Flags3 = 2;
    ///<summary>
    ///  3 signs icon set.
    ///</summary>
    Signs3 = 3;
    ///<summary>
    ///  3 symbols icon set (circled).
    ///</summary>
    Symbols3 = 4;
    ///<summary>
    ///  3 Symbols icon set (uncircled).
    ///</summary>
    Symbols32 = 5;
    ///<summary>
    ///  3 traffic lights icon set (unrimmed).
    ///</summary>
    TrafficLights31 = 6;
    ///<summary>
    ///  3 traffic lights icon set with thick black border.
    ///</summary>
    TrafficLights32 = 7;
    ///<summary>
    ///  4 arrows icon set.
    ///</summary>
    Arrows4 = 8;
    ///<summary>
    ///  4 gray arrows icon set.
    ///</summary>
    ArrowsGray4 = 9;
    ///<summary>
    ///  4 ratings icon set.
    ///</summary>
    Rating4 = 10;
    ///<summary>
    ///  4 'red to black' icon set.
    ///</summary>
    RedToBlack4 = 11;
    ///<summary>
    ///  4 traffic lights icon set.
    ///</summary>
    TrafficLights4 = 12;
    ///<summary>
    ///  5 arrows icon set.
    ///</summary>
    Arrows5 = 13;
    ///<summary>
    ///  5 gray arrows icon set.
    ///</summary>
    ArrowsGray5 = 14;
    ///<summary>
    ///  5 quarters icon set.
    ///</summary>
    Quarters5 = 15;
    ///<summary>
    ///  5 rating icon set.
    ///</summary>
    Rating5 = 16;
    ///<summary>
    ///  3 stars set
    ///</summary>
    Stars3 = 17;
    ///<summary>
    ///  5 boxes set
    ///</summary>
    Boxes5 = 18;
    ///<summary>
    ///  3 triangles set
    ///</summary>
    Triangles3 = 19;
    ///<summary>
    ///  None
    ///</summary>
    None = 20;
    ///<summary>
    ///  CustomSet.
    ///  This element is read-only.
    ///</summary>
    CustomSet = 21;
    ///<summary>
    ///  3 smilies.
    ///  Only for .ods.
    ///</summary>
    Smilies3 = 22;
    ///<summary>
    ///  3 color smilies.
    ///  Only for .ods.
    ///</summary>
    ColorSmilies3 = 23;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the options to filter data when loading workbook from template.
  ///</summary>
  [DNTypeName('Aspose.Cells.LoadDataFilterOptions')]
  DNLoadDataFilterOptions = type Integer;
  DNLoadDataFilterOptionsHelper = record helper for DNLoadDataFilterOptions
  public const
    ///<summary>
    ///  Load nothing for sheet data
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete and please use Structure instead.
    ///  This property will be removed 12 months later since December 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    None = 0;
    ///<summary>
    ///  Load cells whose value is blank
    ///</summary>
    CellBlank = 1;
    ///<summary>
    ///  Load cells whose value is string
    ///</summary>
    CellString = 2;
    ///<summary>
    ///  Load cells whose value is numeric(including datetime)
    ///</summary>
    CellNumeric = 4;
    ///<summary>
    ///  Load cells whose value is error
    ///</summary>
    CellError = 8;
    ///<summary>
    ///  Load cells whose value is bool
    ///</summary>
    CellBool = 16;
    ///<summary>
    ///  Load cells value(all value types) only
    ///</summary>
    CellValue = 31;
    ///<summary>
    ///  Load cell formulas.
    ///</summary>
    ///<remarks>
    ///  Generally defined Name objects(DefinedNames) also need to be loaded when loading formulas because they may be referenced by formulas.
    ///  So Formula or CellData option should work with DefinedNames option together(Formula|DefinedNames or CellData|DefinedNames) for most scenarios.
    ///</remarks>
    Formula = 32;
    ///<summary>
    ///  Load charts
    ///</summary>
    Chart = 256;
    ///<summary>
    ///  Load merged cells
    ///</summary>
    MergedArea = 1024;
    ///<summary>
    ///  Load conditional formatting
    ///</summary>
    ConditionalFormatting = 2048;
    ///<summary>
    ///  Load data validations
    ///</summary>
    DataValidation = 4096;
    ///<summary>
    ///  Load pivot tables
    ///</summary>
    PivotTable = 8192;
    ///<summary>
    ///  Load tables
    ///</summary>
    Table = 16384;
    ///<summary>
    ///  Load hyperlinks
    ///</summary>
    Hyperlinks = 32768;
    ///<summary>
    ///  Load settings for worksheet
    ///</summary>
    SheetSettings = 65536;
    ///<summary>
    ///  Load settings for workbook
    ///</summary>
    BookSettings = 1048576;
    ///<summary>
    ///  Load settings for workbook and worksheet
    ///</summary>
    Settings = 1114112;
    ///<summary>
    ///  Load XmlMap
    ///</summary>
    XmlMap = 2097152;
    ///<summary>
    ///  Load structure of the workbook
    ///</summary>
    Structure = 4194304;
    ///<summary>
    ///  Load document properties
    ///</summary>
    DocumentProperties = 8388608;
    ///<summary>
    ///  Load defined Name objects
    ///</summary>
    DefinedNames = 16777216;
    ///<summary>
    ///  Load VBA projects
    ///</summary>
    VBA = 33554432;
    ///<summary>
    ///  Load styles for cell formatting
    ///</summary>
    Style = 67108864;
    ///<summary>
    ///  Load cells data including values, formulas and formatting
    ///</summary>
    CellData = 67108927;
    ///<summary>
    ///  Load pictures
    ///</summary>
    Picture = 134217728;
    ///<summary>
    ///  Load OleObjects
    ///</summary>
    OleObject = 268435456;
    ///<summary>
    ///  Load shapes
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete and please use Drawing instead.
    ///  This property will be removed 12 months later since November 2019.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    Shape = 402653696;
    ///<summary>
    ///  Drawing objects(including Chart, Picture, OleObject and all other drawing objects)
    ///</summary>
    Drawing = 402653952;
    ///<summary>
    ///  Load all data of worksheet, such as cells data, settings, objects, ...etc.
    ///</summary>
    SheetData = 403701759;
    ///<summary>
    ///  Load all
    ///</summary>
    All = 2147483647;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the load file format.
  ///</summary>
  [DNTypeName('Aspose.Cells.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    ///<summary>
    ///  Represents recognizing the format automatically.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Comma-Separated Values(CSV) text file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.LoadFormat.Csv" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    CSV = 1;
    ///<summary>
    ///  Represents an Excel97-2003 xls file.
    ///</summary>
    Excel97To2003 = 5;
    ///<summary>
    ///  Represents Office Open XML spreadsheetML workbook or template, with or without macros.
    ///</summary>
    Xlsx = 6;
    ///<summary>
    ///  Tab-Separated Values(TSV) text file.
    ///</summary>
    Tsv = 11;
    ///<summary>
    ///  Represents a tab delimited text file, same with <see cref="F:Aspose.Cells.LoadFormat.Tsv" />
    ///  .
    ///</summary>
    TabDelimited = 11;
    ///<summary>
    ///  Represents a html file.
    ///</summary>
    Html = 12;
    ///<summary>
    ///  Represents a mhtml file.
    ///</summary>
    MHtml = 13;
    ///<summary>
    ///  Open Document Sheet(ODS) file.
    ///</summary>
    Ods = 14;
    ///<summary>
    ///  Represents an Excel 2003 xml file.
    ///</summary>
    SpreadsheetML = 15;
    ///<summary>
    ///  Represents an xlsb file.
    ///</summary>
    Xlsb = 16;
    ///<summary>
    ///  Represents a numbers file.
    ///</summary>
    Numbers = 56;
    ///<summary>
    ///  Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
    ///</summary>
    Fods = 59;
    ///<summary>
    ///  Represents StarOffice Calc Spreadsheet (.sxc) file format.
    ///</summary>
    Sxc = 60;
    ///<summary>
    ///  Represents unrecognized format, cannot be loaded.
    ///</summary>
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents look at type.
  ///</summary>
  [DNTypeName('Aspose.Cells.LookAtType')]
  DNLookAtType = type Integer;
  DNLookAtTypeHelper = record helper for DNLookAtType
  public const
    ///<summary>
    ///  Cell value Contains the find object.
    ///</summary>
    Contains_ = 0;
    ///<summary>
    ///  Cell value Starts with the find object.
    ///</summary>
    StartWith = 1;
    ///<summary>
    ///  Cell value ends with the find object.
    ///</summary>
    EndWith = 2;
    ///<summary>
    ///  Cell value is same as the find object.
    ///</summary>
    EntireContent = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents look in type.
  ///</summary>
  [DNTypeName('Aspose.Cells.LookInType')]
  DNLookInType = type Integer;
  DNLookInTypeHelper = record helper for DNLookInType
  public const
    ///<summary>
    ///  If the cell contains a formula, find object from formula,else find it from the value.
    ///</summary>
    Formulas = 0;
    ///<summary>
    ///  Only find object from the formatted values.
    ///</summary>
    Values = 1;
    ///<summary>
    ///  Only find object from the values of cells which do not contains formula.
    ///</summary>
    ValuesExcludeFormulaCell = 2;
    ///<summary>
    ///  Only find object from the comments.
    ///</summary>
    Comments = 3;
    ///<summary>
    ///  Only find object from formulas.
    ///</summary>
    OnlyFormulas = 4;
    ///<summary>
    ///  Only find object from the original values.
    ///</summary>
    OriginalValues = 5;
  end;


  //-------------namespace: Aspose.Cells.Markup----------------
  ///<summary>
  ///  Represents the show type of the smart tag.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTagShowType')]
  DNSmartTagShowType = type Integer;
  DNSmartTagShowTypeHelper = record helper for DNSmartTagShowType
  public const
    ///<summary>
    ///  Indicates that smart tags are enabled and shown
    ///</summary>
    All = 0;
    ///<summary>
    ///  Indicates that the smart tags are enabled but the indicator not be shown.
    ///</summary>
    NoSmartTagIndicator = 1;
    ///<summary>
    ///  Indicates that smart tags are disabled and not displayed.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Memory usage options.
  ///</summary>
  [DNTypeName('Aspose.Cells.MemorySetting')]
  DNMemorySetting = type Integer;
  DNMemorySettingHelper = record helper for DNMemorySetting
  public const
    ///<summary>
    ///  Default option for cells model.
    ///</summary>
    ///<remarks>This option is applied for all versions.</remarks>
    Normal = 0;
    ///<summary>
    ///  Memory performance preferrable.
    ///  With this option the data will be held in compact format so for common scenarios it may give lower memory cost.
    ///  However, this option also may degrade R/W performance a bit in some special cases.
    ///</summary>
    ///<remarks>This option is available since v 8.0.0.</remarks>
    MemoryPreference = 1;
  end;


  //-------------namespace: Aspose.Cells.Metadata----------------
  ///<summary>
  ///  Represents the type of metadata.
  ///</summary>
  [DNTypeName('Aspose.Cells.Metadata.MetadataType')]
  DNMetadataType = type Integer;
  DNMetadataTypeHelper = record helper for DNMetadataType
  public const
    ///<summary>
    ///  Encrypts the file.
    ///</summary>
    Encryption = 1;
    ///<summary>
    ///  Decrypts the file.
    ///</summary>
    Decryption = 2;
    ///<summary>
    ///  Load the properties of the file.
    ///</summary>
    DocumentProperties = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents category type of cell's number formatting.
  ///</summary>
  [DNTypeName('Aspose.Cells.NumberCategoryType')]
  DNNumberCategoryType = type Integer;
  DNNumberCategoryTypeHelper = record helper for DNNumberCategoryType
  public const
    ///<summary>
    ///  General
    ///</summary>
    General = 0;
    ///<summary>
    ///  Text
    ///</summary>
    Text = 1;
    ///<summary>
    ///  Number
    ///</summary>
    Number = 2;
    ///<summary>
    ///  Date or Date and Time
    ///</summary>
    Date = 3;
    ///<summary>
    ///  Time
    ///</summary>
    Time = 4;
    ///<summary>
    ///  Fraction
    ///</summary>
    Fraction = 5;
    ///<summary>
    ///  Scientific
    ///</summary>
    Scientific = 6;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  ///<summary>
  ///  Represents the cell field type of ods.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsCellFieldType')]
  DNOdsCellFieldType = type Integer;
  DNOdsCellFieldTypeHelper = record helper for DNOdsCellFieldType
  public const
    ///<summary>
    ///  Current date.
    ///</summary>
    Date = 0;
    ///<summary>
    ///  The name of the sheet.
    ///</summary>
    SheetName = 1;
    ///<summary>
    ///  The name of the file.
    ///</summary>
    Title = 2;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  ///<summary>
  ///  Represents the type of ODS generator.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsGeneratorType')]
  DNOdsGeneratorType = type Integer;
  DNOdsGeneratorTypeHelper = record helper for DNOdsGeneratorType
  public const
    ///<summary>
    ///  Libre Office
    ///</summary>
    LibreOffice = 0;
    ///<summary>
    ///  Open Office
    ///</summary>
    OpenOffice = 1;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  ///<summary>
  ///  Represents the position.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackgroundGraphicPositionType')]
  DNOdsPageBackgroundGraphicPositionType = type Integer;
  DNOdsPageBackgroundGraphicPositionTypeHelper = record helper for DNOdsPageBackgroundGraphicPositionType
  public const
    ///<summary>
    ///  Top left.
    ///</summary>
    TopLeft = 0;
    ///<summary>
    ///  Top center.
    ///</summary>
    TopCenter = 1;
    ///<summary>
    ///  Top right.
    ///</summary>
    TopRight = 2;
    ///<summary>
    ///  Center left.
    ///</summary>
    CenterLeft = 3;
    ///<summary>
    ///  Center.
    ///</summary>
    CenterCenter = 4;
    ///<summary>
    ///  Center right.
    ///</summary>
    CenterRight = 5;
    ///<summary>
    ///  Bottom left.
    ///</summary>
    BottomLeft = 6;
    ///<summary>
    ///  Bottom center.
    ///</summary>
    BottomCenter = 7;
    ///<summary>
    ///  Bottom right.
    ///</summary>
    BottomRight = 8;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  ///<summary>
  ///  Represents the type of formatting page background with image.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackgroundGraphicType')]
  DNOdsPageBackgroundGraphicType = type Integer;
  DNOdsPageBackgroundGraphicTypeHelper = record helper for DNOdsPageBackgroundGraphicType
  public const
    ///<summary>
    ///  Set the image at specific position.
    ///</summary>
    Position = 0;
    ///<summary>
    ///  Stretch the image.
    ///</summary>
    Area = 1;
    ///<summary>
    ///  Repeat and repeat the image.
    ///</summary>
    Tile = 2;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  ///<summary>
  ///  Represents the page background type of ods.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackgroundType')]
  DNOdsPageBackgroundType = type Integer;
  DNOdsPageBackgroundTypeHelper = record helper for DNOdsPageBackgroundType
  public const
    ///<summary>
    ///  No background.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Formats the background with color.
    ///</summary>
    Color = 1;
    ///<summary>
    ///  Formats the background with image.
    ///</summary>
    Graphic = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Allows to specify which OOXML specification will be used when saving in the Xlsx format.
  ///</summary>
  [DNTypeName('Aspose.Cells.OoxmlCompliance')]
  DNOoxmlCompliance = type Integer;
  DNOoxmlComplianceHelper = record helper for DNOoxmlCompliance
  public const
    ///<summary>
    ///  ECMA-376 1st Edition, 2006.
    ///</summary>
    Ecma376_2006 = 0;
    ///<summary>
    ///  ISO/IEC 29500:2008 Strict compliance level.
    ///</summary>
    Iso29500_2008_Strict = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  The Ooxml compression type
  ///</summary>
  [DNTypeName('Aspose.Cells.OoxmlCompressionType')]
  DNOoxmlCompressionType = type Integer;
  DNOoxmlCompressionTypeHelper = record helper for DNOoxmlCompressionType
  public const
    ///<summary>
    ///  The fastest but least effective compression.
    ///</summary>
    Level1 = 1;
    ///<summary>
    ///  A little slower, but better, than level 1.
    ///</summary>
    Level2 = 2;
    ///<summary>
    ///  A little slower, but better, than level 2.
    ///</summary>
    Level3 = 3;
    ///<summary>
    ///  A little slower, but better, than level 3.
    ///</summary>
    Level4 = 4;
    ///<summary>
    ///  A little slower than level 4, but with better compression.
    ///</summary>
    Level5 = 5;
    ///<summary>
    ///  A good balance of speed and compression efficiency.
    ///</summary>
    Level6 = 6;
    ///<summary>
    ///  Pretty good compression!
    ///</summary>
    Level7 = 7;
    ///<summary>
    ///  Better compression than Level7!
    ///</summary>
    Level8 = 8;
    ///<summary>
    ///  The "best" compression, where best means greatest reduction in size of the input data stream.
    ///  This is also the slowest compression.
    ///</summary>
    Level9 = 9;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the operator type of conditional format and data validation.
  ///</summary>
  [DNTypeName('Aspose.Cells.OperatorType')]
  DNOperatorType = type Integer;
  DNOperatorTypeHelper = record helper for DNOperatorType
  public const
    ///<summary>
    ///  Represents Between operator of conditional format and data validation.
    ///</summary>
    Between = 0;
    ///<summary>
    ///  Represents Equal operator of conditional format and data validation.
    ///</summary>
    Equal = 1;
    ///<summary>
    ///  Represents GreaterThan operator of conditional format and data validation.
    ///</summary>
    GreaterThan = 2;
    ///<summary>
    ///  Represents GreaterOrEqual operator of conditional format and data validation.
    ///</summary>
    GreaterOrEqual = 3;
    ///<summary>
    ///  Represents LessThan operator of conditional format and data validation.
    ///</summary>
    LessThan = 4;
    ///<summary>
    ///  Represents LessOrEqual operator of conditional format and data validation.
    ///</summary>
    LessOrEqual = 5;
    ///<summary>
    ///  Represents no comparison.
    ///</summary>
    None = 6;
    ///<summary>
    ///  Represents NotBetween operator of conditional format and data validation.
    ///</summary>
    NotBetween = 7;
    ///<summary>
    ///  Represents NotEqual operator of conditional format and data validation.
    ///</summary>
    NotEqual = 8;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates page layout alignment types.
  ///</summary>
  [DNTypeName('Aspose.Cells.PageLayoutAlignmentType')]
  DNPageLayoutAlignmentType = type Integer;
  DNPageLayoutAlignmentTypeHelper = record helper for DNPageLayoutAlignmentType
  public const
    ///<summary>
    ///  Represents bottom page layout alignment.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Represents center page layout alignment.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Represents left page layout alignment.
    ///</summary>
    Left = 2;
    ///<summary>
    ///  Represents right page layout alignment.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Represents top page layout alignment.
    ///</summary>
    Top = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents print orientation constants.
  ///</summary>
  [DNTypeName('Aspose.Cells.PageOrientationType')]
  DNPageOrientationType = type Integer;
  DNPageOrientationTypeHelper = record helper for DNPageOrientationType
  public const
    ///<summary>
    ///  Landscape orientation
    ///</summary>
    Landscape = 0;
    ///<summary>
    ///  Portrait orientation
    ///</summary>
    Portrait = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents state of the sheet's pane.
  ///</summary>
  [DNTypeName('Aspose.Cells.PaneStateType')]
  DNPaneStateType = type Integer;
  DNPaneStateTypeHelper = record helper for DNPaneStateType
  public const
    ///<summary>
    ///  Panes are frozen, but were not before being frozen.
    ///</summary>
    Frozen = 0;
    ///<summary>
    ///  Panes are frozen and were split before being frozen.
    ///</summary>
    FrozenSplit = 1;
    ///<summary>
    ///  Panes are split, but not frozen.
    ///</summary>
    Split = 2;
    ///<summary>
    ///  Panes are not frozen and not split.
    ///</summary>
    Normal = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents paper size constants.
  ///</summary>
  [DNTypeName('Aspose.Cells.PaperSizeType')]
  DNPaperSizeType = type Integer;
  DNPaperSizeTypeHelper = record helper for DNPaperSizeType
  public const
    ///<summary>
    ///  Represents the custom paper size.
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Letter (8-1/2 in. x 11 in.)
    ///</summary>
    PaperLetter = 1;
    ///<summary>
    ///  Letter Small (8-1/2 in. x 11 in.)
    ///</summary>
    PaperLetterSmall = 2;
    ///<summary>
    ///  Tabloid (11 in. x 17 in.)
    ///</summary>
    PaperTabloid = 3;
    ///<summary>
    ///  Ledger (17 in. x 11 in.)
    ///</summary>
    PaperLedger = 4;
    ///<summary>
    ///  Legal (8-1/2 in. x 14 in.)
    ///</summary>
    PaperLegal = 5;
    ///<summary>
    ///  Statement (5-1/2 in. x 8-1/2 in.)
    ///</summary>
    PaperStatement = 6;
    ///<summary>
    ///  Executive (7-1/4 in. x 10-1/2 in.)
    ///</summary>
    PaperExecutive = 7;
    ///<summary>
    ///  A3 (297 mm x 420 mm)
    ///</summary>
    PaperA3 = 8;
    ///<summary>
    ///  A4 (210 mm x 297 mm)
    ///</summary>
    PaperA4 = 9;
    ///<summary>
    ///  A4 Small (210 mm x 297 mm)
    ///</summary>
    PaperA4Small = 10;
    ///<summary>
    ///  A5 (148 mm x 210 mm)
    ///</summary>
    PaperA5 = 11;
    ///<summary>
    ///  JIS B4 (257 mm x 364 mm)
    ///</summary>
    PaperB4 = 12;
    ///<summary>
    ///  JIS B5 (182 mm x 257 mm)
    ///</summary>
    PaperB5 = 13;
    ///<summary>
    ///  Folio (8-1/2 in. x 13 in.)
    ///</summary>
    PaperFolio = 14;
    ///<summary>
    ///  Quarto (215 mm x 275 mm)
    ///</summary>
    PaperQuarto = 15;
    ///<summary>
    ///  10 in. x 14 in.
    ///</summary>
    Paper10x14 = 16;
    ///<summary>
    ///  11 in. x 17 in.
    ///</summary>
    Paper11x17 = 17;
    ///<summary>
    ///  Note (8-1/2 in. x 11 in.)
    ///</summary>
    PaperNote = 18;
    ///<summary>
    ///  Envelope #9 (3-7/8 in. x 8-7/8 in.)
    ///</summary>
    PaperEnvelope9 = 19;
    ///<summary>
    ///  Envelope #10 (4-1/8 in. x 9-1/2 in.)
    ///</summary>
    PaperEnvelope10 = 20;
    ///<summary>
    ///  Envelope #11 (4-1/2 in. x 10-3/8 in.)
    ///</summary>
    PaperEnvelope11 = 21;
    ///<summary>
    ///  Envelope #12 (4-1/2 in. x 11 in.)
    ///</summary>
    PaperEnvelope12 = 22;
    ///<summary>
    ///  Envelope #14 (5 in. x 11-1/2 in.)
    ///</summary>
    PaperEnvelope14 = 23;
    ///<summary>
    ///  C size sheet
    ///</summary>
    PaperCSheet = 24;
    ///<summary>
    ///  D size sheet
    ///</summary>
    PaperDSheet = 25;
    ///<summary>
    ///  E size sheet
    ///</summary>
    PaperESheet = 26;
    ///<summary>
    ///  Envelope DL (110 mm x 220 mm)
    ///</summary>
    PaperEnvelopeDL = 27;
    ///<summary>
    ///  Envelope C5 (162 mm x 229 mm)
    ///</summary>
    PaperEnvelopeC5 = 28;
    ///<summary>
    ///  Envelope C3 (324 mm x 458 mm)
    ///</summary>
    PaperEnvelopeC3 = 29;
    ///<summary>
    ///  Envelope C4 (229 mm x 324 mm)
    ///</summary>
    PaperEnvelopeC4 = 30;
    ///<summary>
    ///  Envelope C6 (114 mm x 162 mm)
    ///</summary>
    PaperEnvelopeC6 = 31;
    ///<summary>
    ///  Envelope C65 (114 mm x 229 mm)
    ///</summary>
    PaperEnvelopeC65 = 32;
    ///<summary>
    ///  Envelope B4 (250 mm x 353 mm)
    ///</summary>
    PaperEnvelopeB4 = 33;
    ///<summary>
    ///  Envelope B5 (176 mm x 250 mm)
    ///</summary>
    PaperEnvelopeB5 = 34;
    ///<summary>
    ///  Envelope B6 (176 mm x 125 mm)
    ///</summary>
    PaperEnvelopeB6 = 35;
    ///<summary>
    ///  Envelope Italy (110 mm x 230 mm)
    ///</summary>
    PaperEnvelopeItaly = 36;
    ///<summary>
    ///  Envelope Monarch (3-7/8 in. x 7-1/2 in.)
    ///</summary>
    PaperEnvelopeMonarch = 37;
    ///<summary>
    ///  Envelope (3-5/8 in. x 6-1/2 in.)
    ///</summary>
    PaperEnvelopePersonal = 38;
    ///<summary>
    ///  U.S. Standard Fanfold (14-7/8 in. x 11 in.)
    ///</summary>
    PaperFanfoldUS = 39;
    ///<summary>
    ///  German Standard Fanfold (8-1/2 in. x 12 in.)
    ///</summary>
    PaperFanfoldStdGerman = 40;
    ///<summary>
    ///  German Legal Fanfold (8-1/2 in. x 13 in.)
    ///</summary>
    PaperFanfoldLegalGerman = 41;
    ///<summary>
    ///  B4 (ISO) 250 x 353 mm
    ///</summary>
    PaperISOB4 = 42;
    ///<summary>
    ///  Japanese Postcard (100mm ¡Á 148mm)
    ///</summary>
    PaperJapanesePostcard = 43;
    ///<summary>
    ///  9? ¡Á 11?
    ///</summary>
    Paper9x11 = 44;
    ///<summary>
    ///  10? ¡Á 11?
    ///</summary>
    Paper10x11 = 45;
    ///<summary>
    ///  15? ¡Á 11?
    ///</summary>
    Paper15x11 = 46;
    ///<summary>
    ///  Envelope Invite(220mm ¡Á 220mm)
    ///</summary>
    PaperEnvelopeInvite = 47;
    ///<summary>
    ///  US Letter Extra 9 \275 x 12 in
    ///</summary>
    PaperLetterExtra = 50;
    ///<summary>
    ///  US Legal Extra 9 \275 x 15 in
    ///</summary>
    PaperLegalExtra = 51;
    ///<summary>
    ///  US Tabloid Extra 11.69 x 18 in
    ///</summary>
    PaperTabloidExtra = 52;
    ///<summary>
    ///  A4 Extra 9.27 x 12.69 in
    ///</summary>
    PaperA4Extra = 53;
    ///<summary>
    ///  Letter Transverse 8 \275 x 11 in
    ///</summary>
    PaperLetterTransverse = 54;
    ///<summary>
    ///  A4 Transverse 210 x 297 mm
    ///</summary>
    PaperA4Transverse = 55;
    ///<summary>
    ///  Letter Extra Transverse 9\275 x 12 in
    ///</summary>
    PaperLetterExtraTransverse = 56;
    ///<summary>
    ///  SuperA/SuperA/A4 227 x 356 mm
    ///</summary>
    PaperSuperA = 57;
    ///<summary>
    ///  SuperB/SuperB/A3 305 x 487 mm
    ///</summary>
    PaperSuperB = 58;
    ///<summary>
    ///  US Letter Plus 8.5 x 12.69 in
    ///</summary>
    PaperLetterPlus = 59;
    ///<summary>
    ///  A4 Plus 210 x 330 mm
    ///</summary>
    PaperA4Plus = 60;
    ///<summary>
    ///  A5 Transverse 148 x 210 mm
    ///</summary>
    PaperA5Transverse = 61;
    ///<summary>
    ///  B5 (JIS) Transverse 182 x 257 mm
    ///</summary>
    PaperJISB5Transverse = 62;
    ///<summary>
    ///  A3 Extra 322 x 445 mm
    ///</summary>
    PaperA3Extra = 63;
    ///<summary>
    ///  A5 Extra 174 x 235 mm
    ///</summary>
    PaperA5Extra = 64;
    ///<summary>
    ///  B5 (ISO) Extra 201 x 276 mm
    ///</summary>
    PaperISOB5Extra = 65;
    ///<summary>
    ///  A2 420 x 594 mm
    ///</summary>
    PaperA2 = 66;
    ///<summary>
    ///  A3 Transverse 297 x 420 mm
    ///</summary>
    PaperA3Transverse = 67;
    ///<summary>
    ///  A3 Extra Transverse 322 x 445 mm
    ///</summary>
    PaperA3ExtraTransverse = 68;
    ///<summary>
    ///  Japanese Double Postcard 200 x 148 mm
    ///</summary>
    PaperJapaneseDoublePostcard = 69;
    ///<summary>
    ///  A6 105 x 148 mm
    ///</summary>
    PaperA6 = 70;
    ///<summary>
    ///  Japanese Envelope Kaku #2
    ///</summary>
    PaperJapaneseEnvelopeKaku2 = 71;
    ///<summary>
    ///  Japanese Envelope Kaku #3
    ///</summary>
    PaperJapaneseEnvelopeKaku3 = 72;
    ///<summary>
    ///  Japanese Envelope Chou #3
    ///</summary>
    PaperJapaneseEnvelopeChou3 = 73;
    ///<summary>
    ///  Japanese Envelope Chou #4
    ///</summary>
    PaperJapaneseEnvelopeChou4 = 74;
    ///<summary>
    ///  11in ¡Á 8.5in
    ///</summary>
    PaperLetterRotated = 75;
    ///<summary>
    ///  420mm ¡Á 297mm
    ///</summary>
    PaperA3Rotated = 76;
    ///<summary>
    ///  297mm ¡Á 210mm
    ///</summary>
    PaperA4Rotated = 77;
    ///<summary>
    ///  210mm ¡Á 148mm
    ///</summary>
    PaperA5Rotated = 78;
    ///<summary>
    ///  B4 (JIS) Rotated 364 x 257 mm
    ///</summary>
    PaperJISB4Rotated = 79;
    ///<summary>
    ///  B5 (JIS) Rotated 257 x 182 mm
    ///</summary>
    PaperJISB5Rotated = 80;
    ///<summary>
    ///  Japanese Postcard Rotated 148 x 100 mm
    ///</summary>
    PaperJapanesePostcardRotated = 81;
    ///<summary>
    ///  Double Japanese Postcard Rotated 148 x 200 mm
    ///</summary>
    PaperJapaneseDoublePostcardRotated = 82;
    ///<summary>
    ///  A6 Rotated 148 x 105 mm
    ///</summary>
    PaperA6Rotated = 83;
    ///<summary>
    ///  Japanese Envelope Kaku #2 Rotated
    ///</summary>
    PaperJapaneseEnvelopeKaku2Rotated = 84;
    ///<summary>
    ///  Japanese Envelope Kaku #3 Rotated
    ///</summary>
    PaperJapaneseEnvelopeKaku3Rotated = 85;
    ///<summary>
    ///  Japanese Envelope Chou #3 Rotated
    ///</summary>
    PaperJapaneseEnvelopeChou3Rotated = 86;
    ///<summary>
    ///  Japanese Envelope Chou #4 Rotated
    ///</summary>
    PaperJapaneseEnvelopeChou4Rotated = 87;
    ///<summary>
    ///  B6 (JIS) 128 x 182 mm
    ///</summary>
    PaperJISB6 = 88;
    ///<summary>
    ///  B6 (JIS) Rotated 182 x 128 mm
    ///</summary>
    PaperJISB6Rotated = 89;
    ///<summary>
    ///  12 x 11 in
    ///</summary>
    Paper12x11 = 90;
    ///<summary>
    ///  Japanese Envelope You #4
    ///</summary>
    PaperJapaneseEnvelopeYou4 = 91;
    ///<summary>
    ///  Japanese Envelope You #4 Rotated
    ///</summary>
    PaperJapaneseEnvelopeYou4Rotated = 92;
    ///<summary>
    ///  PRC 16K 146 x 215 mm
    ///</summary>
    PaperPRC16K = 93;
    ///<summary>
    ///  PRC 32K 97 x 151 mm
    ///</summary>
    PaperPRC32K = 94;
    ///<summary>
    ///  PRC 32K(Big) 97 x 151 mm
    ///</summary>
    PaperPRCBig32K = 95;
    ///<summary>
    ///  PRC Envelope #1 102 x 165 mm
    ///</summary>
    PaperPRCEnvelope1 = 96;
    ///<summary>
    ///  PRC Envelope #2 102 x 176 mm
    ///</summary>
    PaperPRCEnvelope2 = 97;
    ///<summary>
    ///  PRC Envelope #3 125 x 176 mm
    ///</summary>
    PaperPRCEnvelope3 = 98;
    ///<summary>
    ///  PRC Envelope #4 110 x 208 mm
    ///</summary>
    PaperPRCEnvelope4 = 99;
    ///<summary>
    ///  PRC Envelope #5 110 x 220 mm
    ///</summary>
    PaperPRCEnvelope5 = 100;
    ///<summary>
    ///  PRC Envelope #6 120 x 230 mm
    ///</summary>
    PaperPRCEnvelope6 = 101;
    ///<summary>
    ///  PRC Envelope #7 160 x 230 mm
    ///</summary>
    PaperPRCEnvelope7 = 102;
    ///<summary>
    ///  PRC Envelope #8 120 x 309 mm
    ///</summary>
    PaperPRCEnvelope8 = 103;
    ///<summary>
    ///  PRC Envelope #9 229 x 324 mm
    ///</summary>
    PaperPRCEnvelope9 = 104;
    ///<summary>
    ///  PRC Envelope #10 324 x 458 mm
    ///</summary>
    PaperPRCEnvelope10 = 105;
    ///<summary>
    ///  PRC 16K Rotated
    ///</summary>
    PaperPRC16KRotated = 106;
    ///<summary>
    ///  PRC 32K Rotated
    ///</summary>
    PaperPRC32KRotated = 107;
    ///<summary>
    ///  PRC 32K(Big) Rotated
    ///</summary>
    PaperPRCBig32KRotated = 108;
    ///<summary>
    ///  PRC Envelope #1 Rotated 165 x 102 mm
    ///</summary>
    PaperPRCEnvelope1Rotated = 109;
    ///<summary>
    ///  PRC Envelope #2 Rotated 176 x 102 mm
    ///</summary>
    PaperPRCEnvelope2Rotated = 110;
    ///<summary>
    ///  PRC Envelope #3 Rotated 176 x 125 mm
    ///</summary>
    PaperPRCEnvelope3Rotated = 111;
    ///<summary>
    ///  PRC Envelope #4 Rotated 208 x 110 mm
    ///</summary>
    PaperPRCEnvelope4Rotated = 112;
    ///<summary>
    ///  PRC Envelope #5 Rotated 220 x 110 mm
    ///</summary>
    PaperPRCEnvelope5Rotated = 113;
    ///<summary>
    ///  PRC Envelope #6 Rotated 230 x 120 mm
    ///</summary>
    PaperPRCEnvelope6Rotated = 114;
    ///<summary>
    ///  PRC Envelope #7 Rotated 230 x 160 mm
    ///</summary>
    PaperPRCEnvelope7Rotated = 115;
    ///<summary>
    ///  PRC Envelope #8 Rotated 309 x 120 mm
    ///</summary>
    PaperPRCEnvelope8Rotated = 116;
    ///<summary>
    ///  PRC Envelope #9 Rotated 324 x 229 mm
    ///</summary>
    PaperPRCEnvelope9Rotated = 117;
    ///<summary>
    ///  PRC Envelope #10 Rotated 458 x 324 mm
    ///</summary>
    PaperPRCEnvelope10Rotated = 118;
    ///<summary>
    ///  usual B3(13.9 x 19.7 in)
    ///</summary>
    PaperB3 = 300;
    ///<summary>
    ///  Business Card(90mm x 55 mm)
    ///</summary>
    PaperBusinessCard = 301;
    ///<summary>
    ///  Thermal(3 x 11 in)
    ///</summary>
    PaperThermal = 302;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents all parameters' type or return value type of function.
  ///</summary>
  [DNTypeName('Aspose.Cells.ParameterType')]
  DNParameterType = type Integer;
  DNParameterTypeHelper = record helper for DNParameterType
  public const
    ///<summary></summary>
    Reference = 0;
    ///<summary></summary>
    Value = 1;
    ///<summary></summary>
    Array_ = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the paste special type.
  ///</summary>
  [DNTypeName('Aspose.Cells.PasteType')]
  DNPasteType = type Integer;
  DNPasteTypeHelper = record helper for DNPasteType
  public const
    ///<summary>
    ///  Copies all data of the range.
    ///</summary>
    All = 0;
    ///<summary>
    ///  It works as "All" behavior of MS Excel.
    ///</summary>
    Default_ = 1;
    ///<summary>
    ///  Copies all data of the range without the range.
    ///</summary>
    AllExceptBorders = 2;
    ///<summary>
    ///  It works as "All except borders" behavior of MS Excel.
    ///</summary>
    DefaultExceptBorders = 3;
    ///<summary>
    ///  Only copies the widths of the range.
    ///</summary>
    ColumnWidths = 4;
    ///<summary>
    ///  Only copies the heights of the range.
    ///</summary>
    RowHeights = 5;
    ///<summary></summary>
    Comments = 6;
    ///<summary></summary>
    Formats = 7;
    ///<summary></summary>
    Formulas = 8;
    ///<summary></summary>
    FormulasAndNumberFormats = 9;
    ///<summary></summary>
    Validation = 10;
    ///<summary></summary>
    Values = 11;
    ///<summary></summary>
    ValuesAndNumberFormats = 12;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable condition formatting rule type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotConditionFormatRuleType')]
  DNPivotConditionFormatRuleType = type Integer;
  DNPivotConditionFormatRuleTypeHelper = record helper for DNPivotConditionFormatRuleType
  public const
    ///<summary>
    ///  Indicates that Top N conditional formatting is not evaluated
    ///</summary>
    None = 0;
    ///<summary>
    ///  Indicates that Top N conditional formatting is
    ///  evaluated across the entire scope range.
    ///</summary>
    All = 1;
    ///<summary>
    ///  Indicates that Top N conditional formatting is evaluated for each row.
    ///</summary>
    Row = 2;
    ///<summary>
    ///  Indicates that Top N conditional formatting is
    ///  evaluated for each column.
    ///</summary>
    Column = 3;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable condition formatting scope type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotConditionFormatScopeType')]
  DNPivotConditionFormatScopeType = type Integer;
  DNPivotConditionFormatScopeTypeHelper = record helper for DNPivotConditionFormatScopeType
  public const
    ///<summary>
    ///  Indicates that conditional formatting is applied to the selected data fields.
    ///</summary>
    Data = 0;
    ///<summary>
    ///  Indicates that conditional formatting is applied to the selected PivotTable field intersections.
    ///</summary>
    Field = 1;
    ///<summary>
    ///  Indicates that conditional formatting is applied to the selected cells.
    ///</summary>
    Selection = 2;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents data display format in the PivotTable data field.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldDataDisplayFormat')]
  DNPivotFieldDataDisplayFormat = type Integer;
  DNPivotFieldDataDisplayFormatHelper = record helper for DNPivotFieldDataDisplayFormat
  public const
    ///<summary>
    ///  Represents normal display format.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  Represents difference from display format.
    ///</summary>
    DifferenceFrom = 1;
    ///<summary>
    ///  Represents percentage of display format.
    ///</summary>
    PercentageOf = 2;
    ///<summary>
    ///  Represents percentage difference from  display format.
    ///</summary>
    PercentageDifferenceFrom = 3;
    ///<summary>
    ///  Represents running total in display format.
    ///</summary>
    RunningTotalIn = 4;
    ///<summary>
    ///  Represents percentage of row display format.
    ///</summary>
    PercentageOfRow = 5;
    ///<summary>
    ///  Represents percentage of column display format.
    ///</summary>
    PercentageOfColumn = 6;
    ///<summary>
    ///  Represents percentage of total display format.
    ///</summary>
    PercentageOfTotal = 7;
    ///<summary>
    ///  Represents index display format.
    ///</summary>
    Index = 8;
    ///<summary>
    ///  Represents percentage of parent row total display format.
    ///</summary>
    PercentageOfParentRowTotal = 9;
    ///<summary>
    ///  Represents percentage of parent column total display format.
    ///</summary>
    PercentageOfParentColumnTotal = 10;
    ///<summary>
    ///  Represents percentage of parent total display format.
    ///</summary>
    PercentageOfParentTotal = 11;
    ///<summary>
    ///  Represents percentage of running total in display format.
    ///</summary>
    PercentageOfRunningTotalIn = 12;
    ///<summary>
    ///  Represents smallest to largest display format.
    ///</summary>
    RankSmallestToLargest = 13;
    ///<summary>
    ///  Represents largest to smallest display format.
    ///</summary>
    RankLargestToSmallest = 14;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Summary description for PivotFieldSubtotalType.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldSubtotalType')]
  DNPivotFieldSubtotalType = type Integer;
  DNPivotFieldSubtotalTypeHelper = record helper for DNPivotFieldSubtotalType
  public const
    ///<summary>
    ///  Represents None subtotal type.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents Automatic subtotal type.
    ///</summary>
    Automatic = 1;
    ///<summary>
    ///  Represents Sum subtotal type.
    ///</summary>
    Sum = 2;
    ///<summary>
    ///  Represents Count subtotal type.
    ///</summary>
    Count = 4;
    ///<summary>
    ///  Represents Average subtotal type.
    ///</summary>
    Average = 8;
    ///<summary>
    ///  Represents Max subtotal type.
    ///</summary>
    Max = 16;
    ///<summary>
    ///  Represents Min subtotal type.
    ///</summary>
    Min = 32;
    ///<summary>
    ///  Represents Product subtotal type.
    ///</summary>
    Product = 64;
    ///<summary>
    ///  Represents Count Nums subtotal type.
    ///</summary>
    CountNums = 128;
    ///<summary>
    ///  Represents Stdev subtotal type.
    ///</summary>
    Stdev = 256;
    ///<summary>
    ///  Represents Stdevp subtotal type.
    ///</summary>
    Stdevp = 512;
    ///<summary>
    ///  Represents Var subtotal type.
    ///</summary>
    Var_ = 1024;
    ///<summary>
    ///  Represents Varp subtotal type.
    ///</summary>
    Varp = 2048;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable field type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldType')]
  DNPivotFieldType = type Integer;
  DNPivotFieldTypeHelper = record helper for DNPivotFieldType
  public const
    ///<summary>
    ///  Presents base pivot field type.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  Presents row pivot field type.
    ///</summary>
    Row = 1;
    ///<summary>
    ///  Presents column pivot field type.
    ///</summary>
    Column = 2;
    ///<summary>
    ///  Presents page pivot field type.
    ///</summary>
    Page = 4;
    ///<summary>
    ///  Presents data pivot field type.
    ///</summary>
    Data = 8;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable Filter type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFilterType')]
  DNPivotFilterType = type Integer;
  DNPivotFilterTypeHelper = record helper for DNPivotFilterType
  public const
    ///<summary>
    ///  Indicates the "begins with" filter for field captions.
    ///</summary>
    CaptionBeginsWith = 0;
    ///<summary>
    ///  Indicates the "is between" filter for field captions.
    ///</summary>
    CaptionBetween = 1;
    ///<summary>
    ///  Indicates the "contains" filter for field captions.
    ///</summary>
    CaptionContains = 2;
    ///<summary>
    ///  Indicates the "ends with" filter for field captions.
    ///</summary>
    CaptionEndsWith = 3;
    ///<summary>
    ///  Indicates the "equal" filter for field captions.
    ///</summary>
    CaptionEqual = 4;
    ///<summary>
    ///  Indicates the "is greater than" filter for field captions.
    ///</summary>
    CaptionGreaterThan = 5;
    ///<summary>
    ///  Indicates the "is greater than or equal to" filter for field captions.
    ///</summary>
    CaptionGreaterThanOrEqual = 6;
    ///<summary>
    ///  Indicates the "is less than" filter for field captions.
    ///</summary>
    CaptionLessThan = 7;
    ///<summary>
    ///  Indicates the "is less than or equal to" filter for field captions.
    ///</summary>
    CaptionLessThanOrEqual = 8;
    ///<summary>
    ///  Indicates the "does not begin with" filter for field captions.
    ///</summary>
    CaptionNotBeginsWith = 9;
    ///<summary>
    ///  Indicates the "is not between" filter for field captions.
    ///</summary>
    CaptionNotBetween = 10;
    ///<summary>
    ///  Indicates the "does not contain" filter for field captions.
    ///</summary>
    CaptionNotContains = 11;
    ///<summary>
    ///  Indicates the "does not end with" filter for field captions.
    ///</summary>
    CaptionNotEndsWith = 12;
    ///<summary>
    ///  Indicates the "not equal" filter for field captions.
    ///</summary>
    CaptionNotEqual = 13;
    ///<summary>
    ///  Indicates the "count" filter.
    ///</summary>
    Count = 14;
    ///<summary>
    ///  Indicates the "between" filter for date values.
    ///</summary>
    DateBetween = 15;
    ///<summary>
    ///  Indicates the "equals" filter for date values.
    ///</summary>
    DateEqual = 16;
    ///<summary>
    ///  Indicates the "newer than" filter for date values.
    ///</summary>
    DateNewerThan = 17;
    ///<summary>
    ///  Indicates the "newer than or equal to" filter for date values.
    ///</summary>
    DateNewerThanOrEqual = 18;
    ///<summary>
    ///  Indicates the "not between" filter for date values.
    ///</summary>
    DateNotBetween = 19;
    ///<summary>
    ///  Indicates the "does not equal" filter for date values.
    ///</summary>
    DateNotEqual = 20;
    ///<summary>
    ///  Indicates the "older than" filter for date values.
    ///</summary>
    DateOlderThan = 21;
    ///<summary>
    ///  Indicates the "older than or equal to" filter for date values.
    ///</summary>
    DateOlderThanOrEqual = 22;
    ///<summary>
    ///  Indicates the "last month" filter for date values.
    ///</summary>
    LastMonth = 23;
    ///<summary>
    ///  Indicates the "last quarter" filter for date values.
    ///</summary>
    LastQuarter = 24;
    ///<summary>
    ///  Indicates the "last week" filter for date values.
    ///</summary>
    LastWeek = 25;
    ///<summary>
    ///  Indicates the "last year" filter for date values.
    ///</summary>
    LastYear = 26;
    ///<summary>
    ///  Indicates the "January" filter for date values.
    ///</summary>
    M1 = 27;
    ///<summary>
    ///  Indicates the "February" filter for date values.
    ///</summary>
    M2 = 28;
    ///<summary>
    ///  Indicates the "March" filter for date values.
    ///</summary>
    M3 = 29;
    ///<summary>
    ///  Indicates the "April" filter for date values.
    ///</summary>
    M4 = 30;
    ///<summary>
    ///  Indicates the "May" filter for date values.
    ///</summary>
    M5 = 31;
    ///<summary>
    ///  Indicates the "June" filter for date values.
    ///</summary>
    M6 = 32;
    ///<summary>
    ///  Indicates the "July" filter for date values.
    ///</summary>
    M7 = 33;
    ///<summary>
    ///  Indicates the "August" filter for date values.
    ///</summary>
    M8 = 34;
    ///<summary>
    ///  Indicates the "September" filter for date values.
    ///</summary>
    M9 = 35;
    ///<summary>
    ///  Indicates the "October" filter for date values.
    ///</summary>
    M10 = 36;
    ///<summary>
    ///  Indicates the "November" filter for date values.
    ///</summary>
    M11 = 37;
    ///<summary>
    ///  Indicates the "December" filter for date values.
    ///</summary>
    M12 = 38;
    ///<summary>
    ///  Indicates the "next month" filter for date values.
    ///</summary>
    NextMonth = 39;
    ///<summary>
    ///  Indicates the "next quarter" for date values.
    ///</summary>
    NextQuarter = 40;
    ///<summary>
    ///  Indicates the "next week" for date values.
    ///</summary>
    NextWeek = 41;
    ///<summary>
    ///  Indicates the "next year" filter for date values.
    ///</summary>
    NextYear = 42;
    ///<summary>
    ///  Indicates the "percent" filter for numeric values.
    ///</summary>
    Percent = 43;
    ///<summary>
    ///  Indicates the "first quarter" filter for date values.
    ///</summary>
    Q1 = 44;
    ///<summary>
    ///  Indicates the "second quarter" filter for date values.
    ///</summary>
    Q2 = 45;
    ///<summary>
    ///  Indicates the "third quarter" filter for date values.
    ///</summary>
    Q3 = 46;
    ///<summary>
    ///  Indicates the "fourth quarter" filter for date values.
    ///</summary>
    Q4 = 47;
    ///<summary>
    ///  Indicates the "sum" filter for numeric values.
    ///</summary>
    Sum = 48;
    ///<summary>
    ///  Indicates the "this month" filter for date values.
    ///</summary>
    ThisMonth = 49;
    ///<summary>
    ///  Indicates the "this quarter" filter for date values.
    ///</summary>
    ThisQuarter = 50;
    ///<summary>
    ///  Indicates the "this week" filter for date values.
    ///</summary>
    ThisWeek = 51;
    ///<summary>
    ///  Indicate the "this year" filter for date values.
    ///</summary>
    ThisYear = 52;
    ///<summary>
    ///  Indicates the "today" filter for date values.
    ///</summary>
    Today = 53;
    ///<summary>
    ///  Indicates the "tomorrow" filter for date values.
    ///</summary>
    Tomorrow = 54;
    ///<summary>
    ///  Indicates the PivotTable filter is unknown to the application.
    ///</summary>
    Unknown = 55;
    ///<summary>
    ///  Indicates the "Value between" filter for text and numeric values.
    ///</summary>
    ValueBetween = 56;
    ///<summary>
    ///  Indicates the "value equal" filter for text and numeric values.
    ///</summary>
    ValueEqual = 57;
    ///<summary>
    ///  Indicates the "value greater than" filter for text and numeric values.
    ///</summary>
    ValueGreaterThan = 58;
    ///<summary>
    ///  Indicates the "value greater than or equal to" filter for text and numeric values.
    ///</summary>
    ValueGreaterThanOrEqual = 59;
    ///<summary>
    ///  Indicates the "value less than" filter for text and numeric values.
    ///</summary>
    ValueLessThan = 60;
    ///<summary>
    ///  Indicates the "value less than or equal to" filter for text and numeric values.
    ///</summary>
    ValueLessThanOrEqual = 61;
    ///<summary>
    ///  Indicates the "value not between" filter for text and numeric values.
    ///</summary>
    ValueNotBetween = 62;
    ///<summary>
    ///  Indicates the "value not equal" filter for text and numeric values.
    ///</summary>
    ValueNotEqual = 63;
    ///<summary>
    ///  Indicates the "year-to-date" filter for date values.
    ///</summary>
    YearToDate = 64;
    ///<summary>
    ///  Indicates the "yesterday" filter for date values.
    ///</summary>
    Yesterday = 65;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable groupby type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotGroupByType')]
  DNPivotGroupByType = type Integer;
  DNPivotGroupByTypeHelper = record helper for DNPivotGroupByType
  public const
    ///<summary>
    ///  Presents range of values groupby type.
    ///</summary>
    RangeOfValues = 0;
    ///<summary>
    ///  Presents Seconds groupby type.
    ///</summary>
    Seconds = 1;
    ///<summary>
    ///  Presents Minutes groupby type.
    ///</summary>
    Minutes = 2;
    ///<summary>
    ///  Presents Hours groupby type.
    ///</summary>
    Hours = 3;
    ///<summary>
    ///  Presents Days groupby type.
    ///</summary>
    Days = 4;
    ///<summary>
    ///  Presents Months groupby type.
    ///</summary>
    Months = 5;
    ///<summary>
    ///  Presents Quarters groupby type.
    ///</summary>
    Quarters = 6;
    ///<summary>
    ///  Presents Years groupby type.
    ///</summary>
    Years = 7;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable base item Next/Previous/All position in the base field .
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotItemPosition')]
  DNPivotItemPosition = type Integer;
  DNPivotItemPositionHelper = record helper for DNPivotItemPosition
  public const
    ///<summary>
    ///  Represents the previous pivot item in the PivotField.
    ///</summary>
    Previous = 0;
    ///<summary>
    ///  Represents the next pivot item in the PivotField.
    ///</summary>
    Next = 1;
    ///<summary>
    ///  Represents a pivot item index, as specified by Pivot Items, that specifies a pivot item in the PivotField.
    ///<remarks>only read</remarks>
    ///</summary>
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents number of items to retain per field.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotMissingItemLimitType')]
  DNPivotMissingItemLimitType = type Integer;
  DNPivotMissingItemLimitTypeHelper = record helper for DNPivotMissingItemLimitType
  public const
    ///<summary>
    ///  The default number of unique items per PivotField allowed.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  The maximum number of unique items per PivotField allowed (&gt;32,500).
    ///</summary>
    Max = 1;
    ///<summary>
    ///  No unique items per PivotField allowed.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents PivotTable auto format type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotTableAutoFormatType')]
  DNPivotTableAutoFormatType = type Integer;
  DNPivotTableAutoFormatTypeHelper = record helper for DNPivotTableAutoFormatType
  public const
    ///<summary>
    ///  Represents None format type.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents Classic auto format type.
    ///</summary>
    Classic = 1;
    ///<summary>
    ///  Represents Report1 format type.
    ///</summary>
    Report1 = 2;
    ///<summary>
    ///  Represents Report2 format type.
    ///</summary>
    Report2 = 3;
    ///<summary>
    ///  Represents Report3 format type.
    ///</summary>
    Report3 = 4;
    ///<summary>
    ///  Represents Report4 format type.
    ///</summary>
    Report4 = 5;
    ///<summary>
    ///  Represents Report5 format type.
    ///</summary>
    Report5 = 6;
    ///<summary>
    ///  Represents Report6 format type.
    ///</summary>
    Report6 = 7;
    ///<summary>
    ///  Represents Report7 format type.
    ///</summary>
    Report7 = 8;
    ///<summary>
    ///  Represents Report8 format type.
    ///</summary>
    Report8 = 9;
    ///<summary>
    ///  Represents Report9 format type.
    ///</summary>
    Report9 = 10;
    ///<summary>
    ///  Represents Report10 format type.
    ///</summary>
    Report10 = 11;
    ///<summary>
    ///  Represents Table1 format type.
    ///</summary>
    Table1 = 12;
    ///<summary>
    ///  Represents Table2 format type.
    ///</summary>
    Table2 = 13;
    ///<summary>
    ///  Represents Table3 format type.
    ///</summary>
    Table3 = 14;
    ///<summary>
    ///  Represents Table4 format type.
    ///</summary>
    Table4 = 15;
    ///<summary>
    ///  Represents Table5 format type.
    ///</summary>
    Table5 = 16;
    ///<summary>
    ///  Represents Table6 format type.
    ///</summary>
    Table6 = 17;
    ///<summary>
    ///  Represents Table7 format type.
    ///</summary>
    Table7 = 18;
    ///<summary>
    ///  Represents Table8 format type.
    ///</summary>
    Table8 = 19;
    ///<summary>
    ///  Represents Table9 format type.
    ///</summary>
    Table9 = 20;
    ///<summary>
    ///  Represents Table10 format type.
    ///</summary>
    Table10 = 21;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  ///<summary>
  ///  Represents the pivot table style type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotTableStyleType')]
  DNPivotTableStyleType = type Integer;
  DNPivotTableStyleTypeHelper = record helper for DNPivotTableStyleType
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    PivotTableStyleLight1 = 1;
    ///<summary></summary>
    PivotTableStyleLight2 = 2;
    ///<summary></summary>
    PivotTableStyleLight3 = 3;
    ///<summary></summary>
    PivotTableStyleLight4 = 4;
    ///<summary></summary>
    PivotTableStyleLight5 = 5;
    ///<summary></summary>
    PivotTableStyleLight6 = 6;
    ///<summary></summary>
    PivotTableStyleLight7 = 7;
    ///<summary></summary>
    PivotTableStyleLight8 = 8;
    ///<summary></summary>
    PivotTableStyleLight9 = 9;
    ///<summary></summary>
    PivotTableStyleLight10 = 10;
    ///<summary></summary>
    PivotTableStyleLight11 = 11;
    ///<summary></summary>
    PivotTableStyleLight12 = 12;
    ///<summary></summary>
    PivotTableStyleLight13 = 13;
    ///<summary></summary>
    PivotTableStyleLight14 = 14;
    ///<summary></summary>
    PivotTableStyleLight15 = 15;
    ///<summary></summary>
    PivotTableStyleLight16 = 16;
    ///<summary></summary>
    PivotTableStyleLight17 = 17;
    ///<summary></summary>
    PivotTableStyleLight18 = 18;
    ///<summary></summary>
    PivotTableStyleLight19 = 19;
    ///<summary></summary>
    PivotTableStyleLight20 = 20;
    ///<summary></summary>
    PivotTableStyleLight21 = 21;
    ///<summary></summary>
    PivotTableStyleLight22 = 22;
    ///<summary></summary>
    PivotTableStyleLight23 = 23;
    ///<summary></summary>
    PivotTableStyleLight24 = 24;
    ///<summary></summary>
    PivotTableStyleLight25 = 25;
    ///<summary></summary>
    PivotTableStyleLight26 = 26;
    ///<summary></summary>
    PivotTableStyleLight27 = 27;
    ///<summary></summary>
    PivotTableStyleLight28 = 28;
    ///<summary></summary>
    PivotTableStyleMedium1 = 29;
    ///<summary></summary>
    PivotTableStyleMedium2 = 30;
    ///<summary></summary>
    PivotTableStyleMedium3 = 31;
    ///<summary></summary>
    PivotTableStyleMedium4 = 32;
    ///<summary></summary>
    PivotTableStyleMedium5 = 33;
    ///<summary></summary>
    PivotTableStyleMedium6 = 34;
    ///<summary></summary>
    PivotTableStyleMedium7 = 35;
    ///<summary></summary>
    PivotTableStyleMedium8 = 36;
    ///<summary></summary>
    PivotTableStyleMedium9 = 37;
    ///<summary></summary>
    PivotTableStyleMedium10 = 38;
    ///<summary></summary>
    PivotTableStyleMedium11 = 39;
    ///<summary></summary>
    PivotTableStyleMedium12 = 40;
    ///<summary></summary>
    PivotTableStyleMedium13 = 41;
    ///<summary></summary>
    PivotTableStyleMedium14 = 42;
    ///<summary></summary>
    PivotTableStyleMedium15 = 43;
    ///<summary></summary>
    PivotTableStyleMedium16 = 44;
    ///<summary></summary>
    PivotTableStyleMedium17 = 45;
    ///<summary></summary>
    PivotTableStyleMedium18 = 46;
    ///<summary></summary>
    PivotTableStyleMedium19 = 47;
    ///<summary></summary>
    PivotTableStyleMedium20 = 48;
    ///<summary></summary>
    PivotTableStyleMedium21 = 49;
    ///<summary></summary>
    PivotTableStyleMedium22 = 50;
    ///<summary></summary>
    PivotTableStyleMedium23 = 51;
    ///<summary></summary>
    PivotTableStyleMedium24 = 52;
    ///<summary></summary>
    PivotTableStyleMedium25 = 53;
    ///<summary></summary>
    PivotTableStyleMedium26 = 54;
    ///<summary></summary>
    PivotTableStyleMedium27 = 55;
    ///<summary></summary>
    PivotTableStyleMedium28 = 56;
    ///<summary></summary>
    PivotTableStyleDark1 = 57;
    ///<summary></summary>
    PivotTableStyleDark2 = 58;
    ///<summary></summary>
    PivotTableStyleDark3 = 59;
    ///<summary></summary>
    PivotTableStyleDark4 = 60;
    ///<summary></summary>
    PivotTableStyleDark5 = 61;
    ///<summary></summary>
    PivotTableStyleDark6 = 62;
    ///<summary></summary>
    PivotTableStyleDark7 = 63;
    ///<summary></summary>
    PivotTableStyleDark8 = 64;
    ///<summary></summary>
    PivotTableStyleDark9 = 65;
    ///<summary></summary>
    PivotTableStyleDark10 = 66;
    ///<summary></summary>
    PivotTableStyleDark11 = 67;
    ///<summary></summary>
    PivotTableStyleDark12 = 68;
    ///<summary></summary>
    PivotTableStyleDark13 = 69;
    ///<summary></summary>
    PivotTableStyleDark14 = 70;
    ///<summary></summary>
    PivotTableStyleDark15 = 71;
    ///<summary></summary>
    PivotTableStyleDark16 = 72;
    ///<summary></summary>
    PivotTableStyleDark17 = 73;
    ///<summary></summary>
    PivotTableStyleDark18 = 74;
    ///<summary></summary>
    PivotTableStyleDark19 = 75;
    ///<summary></summary>
    PivotTableStyleDark20 = 76;
    ///<summary></summary>
    PivotTableStyleDark21 = 77;
    ///<summary></summary>
    PivotTableStyleDark22 = 78;
    ///<summary></summary>
    PivotTableStyleDark23 = 79;
    ///<summary></summary>
    PivotTableStyleDark24 = 80;
    ///<summary></summary>
    PivotTableStyleDark25 = 81;
    ///<summary></summary>
    PivotTableStyleDark26 = 82;
    ///<summary></summary>
    PivotTableStyleDark27 = 83;
    ///<summary></summary>
    PivotTableStyleDark28 = 84;
    ///<summary></summary>
    Custom = 85;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the way comments are printed with the sheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.PrintCommentsType')]
  DNPrintCommentsType = type Integer;
  DNPrintCommentsTypeHelper = record helper for DNPrintCommentsType
  public const
    ///<summary>
    ///  Represents to print comments as displayed on sheet.
    ///</summary>
    PrintInPlace = 0;
    ///<summary>
    ///  Represents not to print comments.
    ///</summary>
    PrintNoComments = 1;
    ///<summary>
    ///  Represents to print comments at end of sheet.
    ///</summary>
    PrintSheetEnd = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents print errors constants.
  ///</summary>
  [DNTypeName('Aspose.Cells.PrintErrorsType')]
  DNPrintErrorsType = type Integer;
  DNPrintErrorsTypeHelper = record helper for DNPrintErrorsType
  public const
    ///<summary>
    ///  Represents not to print errors.
    ///</summary>
    PrintErrorsBlank = 0;
    ///<summary>
    ///  Represents to print errors as "--".
    ///</summary>
    PrintErrorsDash = 1;
    ///<summary>
    ///  Represents to print errors as displayed.
    ///</summary>
    PrintErrorsDisplayed = 2;
    ///<summary>
    ///  Represents to print errors as "#N/A".
    ///</summary>
    PrintErrorsNA = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Indicates which pages will not be printed.
  ///</summary>
  [DNTypeName('Aspose.Cells.PrintingPageType')]
  DNPrintingPageType = type Integer;
  DNPrintingPageTypeHelper = record helper for DNPrintingPageType
  public const
    ///<summary>
    ///  Prints all pages.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Don't print the pages which the cells are blank.
    ///</summary>
    IgnoreBlank = 1;
    ///<summary>
    ///  Don't print the pages which cells only contain styles.
    ///</summary>
    IgnoreStyle = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represent print order constants.
  ///</summary>
  [DNTypeName('Aspose.Cells.PrintOrderType')]
  DNPrintOrderType = type Integer;
  DNPrintOrderTypeHelper = record helper for DNPrintOrderType
  public const
    ///<summary>
    ///  Down, then over
    ///</summary>
    DownThenOver = 0;
    ///<summary>
    ///  Over, then down
    ///</summary>
    OverThenDown = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the printed chart size.
  ///</summary>
  [DNTypeName('Aspose.Cells.PrintSizeType')]
  DNPrintSizeType = type Integer;
  DNPrintSizeTypeHelper = record helper for DNPrintSizeType
  public const
    ///<summary>
    ///  Use full page.
    ///</summary>
    Full = 0;
    ///<summary>
    ///  Scale to fit page.
    ///</summary>
    Fit = 1;
    ///<summary>
    ///  Custom.
    ///</summary>
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Properties----------------
  ///<summary>
  ///  Specifies data type of a document property.
  ///</summary>
  [DNTypeName('Aspose.Cells.Properties.PropertyType')]
  DNPropertyType = type Integer;
  DNPropertyTypeHelper = record helper for DNPropertyType
  public const
    ///<summary>
    ///  The property is a boolean value.
    ///</summary>
    Boolean = 0;
    ///<summary>
    ///  The property is a date time value.
    ///</summary>
    DateTime = 1;
    ///<summary>
    ///  The property is a floating number.
    ///</summary>
    Double = 2;
    ///<summary>
    ///  The property is an integer number.
    ///</summary>
    Number = 3;
    ///<summary>
    ///  The property is a string value.
    ///</summary>
    String_ = 4;
    ///<summary>
    ///  The property is a byte array.
    ///</summary>
    Blob = 5;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents workbook/worksheet protection type.
  ///</summary>
  [DNTypeName('Aspose.Cells.ProtectionType')]
  DNProtectionType = type Integer;
  DNProtectionTypeHelper = record helper for DNProtectionType
  public const
    ///<summary>
    ///  Represents to protect all.
    ///</summary>
    All = 0;
    ///<summary>
    ///  Represents to protect contents, used in Worksheet protection.
    ///</summary>
    Contents = 1;
    ///<summary>
    ///  Represents to protect objects, used in Worksheet protection.
    ///</summary>
    Objects = 2;
    ///<summary>
    ///  Represents to protect scenarios, used in Worksheet protection.
    ///</summary>
    Scenarios = 3;
    ///<summary>
    ///  Represents to protect structure, used in Workbook protection.
    ///</summary>
    Structure = 4;
    ///<summary>
    ///  Represents to protect window, used in Workbook protection.
    ///</summary>
    Windows = 5;
    ///<summary>
    ///  Represents no protection. Only for Reading property.
    ///</summary>
    None = 6;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Renames strategy when columns contains the duplicate names.
  ///</summary>
  [DNTypeName('Aspose.Cells.RenameStrategy')]
  DNRenameStrategy = type Integer;
  DNRenameStrategyHelper = record helper for DNRenameStrategy
  public const
    ///<summary>
    ///  Throws exception.
    ///</summary>
    Exception = 0;
    ///<summary>
    ///  Named with digit.
    ///</summary>
    Digit = 1;
    ///<summary>
    ///  Named with letter.
    ///</summary>
    Letter = 2;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Enumerates Bit Depth Type for tiff image.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.ColorDepth')]
  DNColorDepth = type Integer;
  DNColorDepthHelper = record helper for DNColorDepth
  public const
    ///<summary>
    ///  Default value, not set value.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  1 bit per pixel
    ///</summary>
    Format1bpp = 1;
    ///<summary>
    ///  84 bits per pixel
    ///</summary>
    Format4bpp = 4;
    ///<summary>
    ///  8 bits per pixel
    ///</summary>
    Format8bpp = 8;
    ///<summary>
    ///  24 bits per pixel
    ///</summary>
    Format24bpp = 24;
    ///<summary>
    ///  32 bits per pixel
    ///</summary>
    Format32bpp = 32;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Indicate Cell or Image of DrawObject.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.DrawObjectEnum')]
  DNDrawObjectEnum = type Integer;
  DNDrawObjectEnumHelper = record helper for DNDrawObjectEnum
  public const
    ///<summary>
    ///  Indicate DrawObject is an Image
    ///</summary>
    Image = 0;
    ///<summary>
    ///  indicate DrawObject is an Cell
    ///</summary>
    Cell = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Allowing user to set PDF conversion's Compatibility
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PdfCompliance')]
  DNPdfCompliance = type Integer;
  DNPdfComplianceHelper = record helper for DNPdfCompliance
  public const
    ///<summary>
    ///  Normal pdf format
    ///</summary>
    None = 0;
    ///<summary>
    ///  Pdf format compatible with PDFA-1b
    ///</summary>
    PdfA1b = 1;
    ///<summary>
    ///  Pdf format compatible with PDFA-1a
    ///</summary>
    PdfA1a = 2;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Specifies a type of compression applied to all content in the PDF file except images.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PdfCompressionCore')]
  DNPdfCompressionCore = type Integer;
  DNPdfCompressionCoreHelper = record helper for DNPdfCompressionCore
  public const
    ///<summary>
    ///  None
    ///</summary>
    None = 0;
    ///<summary>
    ///  Rle
    ///</summary>
    Rle = 1;
    ///<summary>
    ///  Lzw
    ///</summary>
    Lzw = 2;
    ///<summary>
    ///  Flate
    ///</summary>
    Flate = 3;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Specifies the way <see cref="T:Aspose.Cells.Properties.CustomDocumentPropertyCollection" />
  ///  are exported to PDF file.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PdfCustomPropertiesExport')]
  DNPdfCustomPropertiesExport = type Integer;
  DNPdfCustomPropertiesExportHelper = record helper for DNPdfCustomPropertiesExport
  public const
    ///<summary>
    ///  No custom properties are exported.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Custom properties are exported as entries in Info dictionary.
    ///</summary>
    ///<remarks>
    ///  Custom properties with the following names are not exported:
    ///  "Title", "Author", "Subject", "Keywords", "Creator", "Producer", "CreationDate", "ModDate", "Trapped".
    ///</remarks>
    Standard = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.PdfFontEncoding')]
  DNPdfFontEncoding = type Integer;
  DNPdfFontEncodingHelper = record helper for DNPdfFontEncoding
  public const
    Identity = 0;
    AnsiPrefer = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Specifies a type of optimization.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PdfOptimizationType')]
  DNPdfOptimizationType = type Integer;
  DNPdfOptimizationTypeHelper = record helper for DNPdfOptimizationType
  public const
    ///<summary>
    ///  High print quality
    ///</summary>
    Standard = 0;
    ///<summary>
    ///  File size is more important than print quality
    ///</summary>
    MinimumSize = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Specifies what type of compression to apply when saving images into TIFF format file.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.TiffCompression')]
  DNTiffCompression = type Integer;
  DNTiffCompressionHelper = record helper for DNTiffCompression
  public const
    ///<summary>
    ///  Specifies no compression.
    ///</summary>
    CompressionNone = 0;
    ///<summary>
    ///  Specifies the RLE compression scheme.
    ///</summary>
    CompressionRle = 1;
    ///<summary>
    ///  Specifies the LZW compression scheme.
    ///</summary>
    CompressionLZW = 2;
    ///<summary>
    ///  Specifies the CCITT3 compression scheme.
    ///</summary>
    CompressionCCITT3 = 3;
    ///<summary>
    ///  Specifies the CCITT4 compression scheme.
    ///</summary>
    CompressionCCITT4 = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents how to loading the linked resource.
  ///</summary>
  [DNTypeName('Aspose.Cells.ResourceLoadingType')]
  DNResourceLoadingType = type Integer;
  DNResourceLoadingTypeHelper = record helper for DNResourceLoadingType
  public const
    ///<summary>
    ///  Loads this resource as usual.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Skips loading of this resource.
    ///</summary>
    Skip = 1;
    ///<summary>
    ///  Use stream provided by user
    ///</summary>
    UserProvided = 2;
  end;


  //-------------namespace: Aspose.Cells.Revisions----------------
  ///<summary>
  ///  Represents the type of revision action.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionActionType')]
  DNRevisionActionType = type Integer;
  DNRevisionActionTypeHelper = record helper for DNRevisionActionType
  public const
    ///<summary>
    ///  Add revision.
    ///</summary>
    Add = 0;
    ///<summary>
    ///  Delete revision.
    ///</summary>
    Delete = 1;
    ///<summary>
    ///  Column delete revision.
    ///</summary>
    DeleteColumn = 2;
    ///<summary>
    ///  Row delete revision.
    ///</summary>
    DeleteRow = 3;
    ///<summary>
    ///  Column insert revision.
    ///</summary>
    InsertColumn = 4;
    ///<summary>
    ///  Row insert revision.
    ///</summary>
    InsertRow = 5;
  end;


  //-------------namespace: Aspose.Cells.Revisions----------------
  ///<summary>
  ///  Represents the revision type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionType')]
  DNRevisionType = type Integer;
  DNRevisionTypeHelper = record helper for DNRevisionType
  public const
    ///<summary>
    ///  Custom view.
    ///</summary>
    CustomView = 0;
    ///<summary>
    ///  Defined name.
    ///</summary>
    DefinedName = 1;
    ///<summary>
    ///  Cells change.
    ///</summary>
    ChangeCells = 2;
    ///<summary>
    ///  Auto format.
    ///</summary>
    AutoFormat = 3;
    ///<summary>
    ///  Merge conflict.
    ///</summary>
    MergeConflict = 4;
    ///<summary>
    ///  Comment.
    ///</summary>
    Comment = 5;
    ///<summary>
    ///  Format.
    ///</summary>
    Format = 6;
    ///<summary>
    ///  Insert worksheet.
    ///</summary>
    InsertSheet = 7;
    ///<summary>
    ///  Move cells.
    ///</summary>
    MoveCells = 8;
    ///<summary>
    ///  Undo.
    ///</summary>
    Undo = 9;
    ///<summary>
    ///  Query table.
    ///</summary>
    QueryTable = 10;
    ///<summary>
    ///  Inserting or deleting.
    ///</summary>
    InsertDelete = 11;
    ///<summary>
    ///  Rename worksheet.
    ///</summary>
    RenameSheet = 12;
    ///<summary>
    ///  Unknown.
    ///</summary>
    Unknown = 13;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the format in which the workbook is saved.
  ///</summary>
  [DNTypeName('Aspose.Cells.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    ///<summary>
    ///  If saving the file to the disk,the file format accords to the extension of the file name.
    ///  If saving the file to the stream, the file format is xlsx.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Comma-Separated Values(CSV) text file.
    ///</summary>
    Csv = 1;
    ///<summary>
    ///  Represents an Excel97-2003 xls file.
    ///</summary>
    Excel97To2003 = 5;
    ///<summary>
    ///  Represents an xlsx file.
    ///</summary>
    Xlsx = 6;
    ///<summary>
    ///  Represents an xlsm file which enable macros.
    ///</summary>
    Xlsm = 7;
    ///<summary>
    ///  Represents an xltx file.
    ///</summary>
    Xltx = 8;
    ///<summary>
    ///  Represents an xltm file which enable macros.
    ///</summary>
    Xltm = 9;
    ///<summary>
    ///  Represents an xltm file which enable addin macros.
    ///</summary>
    Xlam = 10;
    ///<summary>
    ///  Tab-Separated Values(TSV) text file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.SaveFormat.Tsv" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    TSV = 11;
    ///<summary>
    ///  Represents a tab delimited text file, same with <see cref="F:Aspose.Cells.SaveFormat.Tsv" />
    ///  .
    ///</summary>
    TabDelimited = 11;
    ///<summary>
    ///  Represents a html file.
    ///</summary>
    Html = 12;
    ///<summary>
    ///  Represents a Pdf file.
    ///</summary>
    Pdf = 13;
    ///<summary>
    ///  Open Document Sheet(ODS) file.
    ///</summary>
    Ods = 14;
    ///<summary>
    ///  Represents an Excel 2003 xml file.
    ///</summary>
    SpreadsheetML = 15;
    ///<summary>
    ///  Represents an xlsb file.
    ///</summary>
    Xlsb = 16;
    ///<summary>
    ///  Represents a mhtml file.
    ///</summary>
    MHtml = 17;
    ///<summary>
    ///  XPS (XML Paper Specification) format.
    ///</summary>
    Xps = 20;
    ///<summary>
    ///  Represents a TIFF file.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.SaveFormat.Tiff" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    TIFF = 21;
    ///<summary>
    ///  SVG file.
    ///</summary>
    Svg = 28;
    ///<summary>
    ///  Data Interchange Format.
    ///</summary>
    Dif = 30;
    ///<summary>
    ///  Represents a numbers file.
    ///</summary>
    Numbers = 56;
    ///<summary>
    ///  Represents markdown document.
    ///</summary>
    Markdown = 57;
    ///<summary>
    ///  Represents OpenDocument Flat XML Spreadsheet (.fods) file format.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use <see cref="F:Aspose.Cells.SaveFormat.Fods" />
    ///  property.
    ///  This property will be removed 6 months later since April 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</summary>
    FODS = 59;
    ///<summary>
    ///  Represents StarOffice Calc Spreadsheet (.sxc) file format.
    ///</summary>
    Sxc = 60;
    ///<summary>
    ///  Represents .pptx file.
    ///</summary>
    Pptx = 61;
    ///<summary>
    ///  Represents .docx file.
    ///</summary>
    Docx = 62;
    ///<summary>
    ///  Represents unrecognized format, cannot be saved.
    ///</summary>
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies the worksheet type.
  ///</summary>
  [DNTypeName('Aspose.Cells.SheetType')]
  DNSheetType = type Integer;
  DNSheetTypeHelper = record helper for DNSheetType
  public const
    ///<summary>
    ///  Visual Basic module
    ///</summary>
    VB = 0;
    ///<summary></summary>
    Worksheet = 1;
    ///<summary>
    ///  Chart
    ///</summary>
    Chart = 2;
    ///<summary>
    ///  BIFF4 Macro sheet
    ///</summary>
    BIFF4Macro = 3;
    ///<summary>
    ///  International Macro sheet
    ///</summary>
    InternationalMacro = 4;
    ///<summary></summary>
    Other = 5;
    ///<summary>
    ///  Dialog worksheet
    ///</summary>
    Dialog = 6;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represent the shift options when deleting a range of cells.
  ///</summary>
  [DNTypeName('Aspose.Cells.ShiftType')]
  DNShiftType = type Integer;
  DNShiftTypeHelper = record helper for DNShiftType
  public const
    ///<summary>
    ///  Shift cells down.
    ///</summary>
    Down = 0;
    ///<summary>
    ///  Shift cells left.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Do not shift cells.
    ///</summary>
    None = 2;
    ///<summary>
    ///  Shift cells right.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Shift cells up.
    ///</summary>
    Up = 4;
  end;


  //-------------namespace: Aspose.Cells.Slicers----------------
  ///<summary>
  ///  Represent the type of SlicerCacheCrossFilterType
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheCrossFilterType')]
  DNSlicerCacheCrossFilterType = type Integer;
  DNSlicerCacheCrossFilterTypeHelper = record helper for DNSlicerCacheCrossFilterType
  public const
    ///<summary>
    ///  The table style element of the slicer style for slicer items
    ///  with no data is not applied to slicer items with no data, and slicer items
    ///  with no data are not sorted separately in the list of slicer items in the slicer view
    ///</summary>
    None = 0;
    ///<summary>
    ///  The table style element of the slicer style for slicer items with
    ///  no data is applied to slicer items with no data, and slicer items
    ///  with no data are sorted at the bottom in the list of slicer items in the slicer view
    ///</summary>
    ShowItemsWithDataAtTop = 1;
    ///<summary>
    ///  The table style element of the slicer style for slicer items with no data
    ///  is applied to slicer items with no data, and slicer items with no data
    ///  are not sorted separately in the list of slicer items in the slicer view.
    ///</summary>
    ShowItemsWithNoData = 2;
  end;


  //-------------namespace: Aspose.Cells.Slicers----------------
  ///<summary>
  ///  Specify the sort type of SlicerCacheItem
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheItemSortType')]
  DNSlicerCacheItemSortType = type Integer;
  DNSlicerCacheItemSortTypeHelper = record helper for DNSlicerCacheItemSortType
  public const
    ///<summary>
    ///  Ascending sort type
    ///</summary>
    Ascending = 0;
    ///<summary>
    ///  Descending sort type
    ///</summary>
    Descending = 1;
  end;


  //-------------namespace: Aspose.Cells.Slicers----------------
  ///<summary>
  ///  Specify the style of slicer view
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerStyleType')]
  DNSlicerStyleType = type Integer;
  DNSlicerStyleTypeHelper = record helper for DNSlicerStyleType
  public const
    ///<summary>
    ///  built-in light style one
    ///</summary>
    SlicerStyleLight1 = 0;
    ///<summary>
    ///  built-in light style two
    ///</summary>
    SlicerStyleLight2 = 1;
    ///<summary>
    ///  built-in light style three
    ///</summary>
    SlicerStyleLight3 = 2;
    ///<summary>
    ///  built-in light style four
    ///</summary>
    SlicerStyleLight4 = 3;
    ///<summary>
    ///  built-in light style five
    ///</summary>
    SlicerStyleLight5 = 4;
    ///<summary>
    ///  built-in light style six
    ///</summary>
    SlicerStyleLight6 = 5;
    ///<summary>
    ///  built-in style other one
    ///</summary>
    SlicerStyleOther1 = 6;
    ///<summary>
    ///  built-in style other two
    ///</summary>
    SlicerStyleOther2 = 7;
    ///<summary>
    ///  built-in dark style one
    ///</summary>
    SlicerStyleDark1 = 8;
    ///<summary>
    ///  built-in dark style tow
    ///</summary>
    SlicerStyleDark2 = 9;
    ///<summary>
    ///  built-in dark style three
    ///</summary>
    SlicerStyleDark3 = 10;
    ///<summary>
    ///  built-in dark style four
    ///</summary>
    SlicerStyleDark4 = 11;
    ///<summary>
    ///  built-in dark style five
    ///</summary>
    SlicerStyleDark5 = 12;
    ///<summary>
    ///  built-in dark style six
    ///</summary>
    SlicerStyleDark6 = 13;
    ///<summary>
    ///  user-defined style, unsupported for now
    ///</summary>
    ///<remarks>unsupported</remarks>
    Custom = 14;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Sorted value type.
  ///</summary>
  [DNTypeName('Aspose.Cells.SortOnType')]
  DNSortOnType = type Integer;
  DNSortOnTypeHelper = record helper for DNSortOnType
  public const
    ///<summary>
    ///  Sorts by cells' value.
    ///</summary>
    Value = 0;
    ///<summary>
    ///  Sorts by cells' color.
    ///</summary>
    CellColor = 1;
    ///<summary>
    ///  Sorts by cells' font color.
    ///</summary>
    FontColor = 2;
    ///<summary>
    ///  Sorts by conditional icon.
    ///</summary>
    Icon = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents sort order for the data range.
  ///</summary>
  [DNTypeName('Aspose.Cells.SortOrder')]
  DNSortOrder = type Integer;
  DNSortOrderHelper = record helper for DNSortOrder
  public const
    ///<summary></summary>
    Ascending = 0;
    ///<summary></summary>
    Descending = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  The style modified flags.
  ///</summary>
  [DNTypeName('Aspose.Cells.StyleModifyFlag')]
  DNStyleModifyFlag = type Integer;
  DNStyleModifyFlagHelper = record helper for DNStyleModifyFlag
  public const
    ///<summary></summary>
    All = 0;
    ///<summary></summary>
    Borders = 1;
    ///<summary></summary>
    LeftBorder = 2;
    ///<summary></summary>
    RightBorder = 3;
    ///<summary></summary>
    TopBorder = 4;
    ///<summary></summary>
    BottomBorder = 5;
    ///<summary>
    ///  Only for dynamic style,such as conditional formatting.
    ///</summary>
    HorizontalBorder = 6;
    ///<summary>
    ///  Only for dynamic style,such as conditional formatting.
    ///</summary>
    VerticalBorder = 7;
    ///<summary></summary>
    Diagonal = 8;
    ///<summary></summary>
    DiagonalDownBorder = 9;
    ///<summary></summary>
    DiagonalUpBorder = 10;
    ///<summary></summary>
    Font = 11;
    ///<summary></summary>
    FontSize = 12;
    ///<summary></summary>
    FontName = 13;
    ///<summary></summary>
    FontFamily = 14;
    ///<summary></summary>
    FontCharset = 15;
    ///<summary></summary>
    FontColor = 16;
    ///<summary></summary>
    FontWeight = 17;
    ///<summary></summary>
    FontItalic = 18;
    ///<summary></summary>
    FontUnderline = 19;
    ///<summary></summary>
    FontStrike = 20;
    ///<summary></summary>
    ///<remarks>NOTE: This member is now obsolete. Instead, please use FontScript.
    ///  This property will be removed 12 months later since August 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    FontSubscript = 21;
    ///<summary></summary>
    ///<summary></summary>
    ///<remarks>NOTE: This member is now obsolete. Instead, please use FontScript.
    ///  This property will be removed 12 months later since August 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    FontSuperscript = 22;
    ///<summary></summary>
    FontScript = 23;
    ///<summary></summary>
    NumberFormat = 24;
    ///<summary></summary>
    HorizontalAlignment = 25;
    ///<summary></summary>
    VerticalAlignment = 26;
    ///<summary></summary>
    Indent = 27;
    ///<summary></summary>
    Rotation = 28;
    ///<summary></summary>
    WrapText = 29;
    ///<summary></summary>
    ShrinkToFit = 30;
    ///<summary></summary>
    TextDirection = 31;
    ///<summary></summary>
    CellShading = 32;
    ///<summary></summary>
    Pattern = 33;
    ///<summary></summary>
    ForegroundColor = 34;
    ///<summary></summary>
    BackgroundColor = 35;
    ///<summary></summary>
    Locked = 36;
    ///<summary></summary>
    HideFormula = 37;
    ///<summary>
    ///  Includes horizontal/vertical Alignment, rotation,wrap Text,indent,shrinkToFit,Text Direction
    ///</summary>
    AlignmentSettings = 38;
    ///<summary>
    ///  Includes Locked,  HideFormula
    ///</summary>
    ProtectionSettings = 39;
    ///<summary>
    ///  unused.
    ///</summary>
    FontScheme = 40;
    ///<summary>
    ///  unused.
    ///</summary>
    FontDirty = 41;
    ///<summary>
    ///  unused.
    ///</summary>
    FontSpellingError = 42;
    ///<summary>
    ///  unused.
    ///</summary>
    FontUFillTx = 43;
    ///<summary>
    ///  unused.
    ///</summary>
    FontSpacing = 44;
    ///<summary>
    ///  unused.
    ///</summary>
    FontKerning = 45;
    ///<summary>
    ///  unused.
    ///</summary>
    FontEqualize = 46;
    ///<summary>
    ///  unused.
    ///</summary>
    FontCap = 47;
    ///<summary></summary>
    RelativeIndent = 48;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  ///<summary>
  ///  Represents the table's data source type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableDataSourceType')]
  DNTableDataSourceType = type Integer;
  DNTableDataSourceTypeHelper = record helper for DNTableDataSourceType
  public const
    ///<summary>
    ///  Excel Worksheet Table
    ///</summary>
    Worksheet = 0;
    ///<summary>
    ///  Read-write SharePoint linked List
    ///</summary>
    SharePoint = 1;
    ///<summary>
    ///  XML mapper Table
    ///</summary>
    XML = 2;
    ///<summary>
    ///  Query Table
    ///</summary>
    QueryTable = 3;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  ///<summary>
  ///  Represents the Table or PivotTable style element type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableStyleElementType')]
  DNTableStyleElementType = type Integer;
  DNTableStyleElementTypeHelper = record helper for DNTableStyleElementType
  public const
    ///<summary>
    ///  Table style element that applies to table's entire content.
    ///</summary>
    WholeTable = 0;
    ///<summary>
    ///  Table style element that applies to pivot table's page field labels.
    ///</summary>
    PageFieldLabels = 1;
    ///<summary>
    ///  Table style element that applies to pivot table's page field values.
    ///</summary>
    PageFieldValues = 2;
    ///<summary>
    ///  Table style element that applies to table's first column stripes.
    ///</summary>
    FirstColumnStripe = 3;
    ///<summary>
    ///  Table style element that applies to table's second column stripes.
    ///</summary>
    SecondColumnStripe = 4;
    ///<summary>
    ///  Table style element that applies to table's first row stripes.
    ///</summary>
    FirstRowStripe = 5;
    ///<summary>
    ///  Table style element that applies to table's second row stripes.
    ///</summary>
    SecondRowStripe = 6;
    ///<summary>
    ///  Table style element that applies to table's last column.
    ///</summary>
    LastColumn = 7;
    ///<summary>
    ///  Table style element that applies to table's first column.
    ///</summary>
    FirstColumn = 8;
    ///<summary>
    ///  Table style element that applies to table's header row.
    ///</summary>
    HeaderRow = 9;
    ///<summary>
    ///  Table style element that applies to table's total row.
    ///</summary>
    TotalRow = 10;
    ///<summary>
    ///  Table style element that applies to table's first header row cell.
    ///</summary>
    FirstHeaderCell = 11;
    ///<summary>
    ///  Table style element that applies to table's last header row cell.
    ///</summary>
    LastHeaderCell = 12;
    ///<summary>
    ///  Table style element that applies to table's first total row cell.
    ///</summary>
    FirstTotalCell = 13;
    ///<summary>
    ///  Table style element that applies to table's last total row cell.
    ///</summary>
    LastTotalCell = 14;
    ///<summary>
    ///  Table style element that applies to PivotTable's first subtotal column.
    ///</summary>
    FirstSubtotalColumn = 15;
    ///<summary>
    ///  Table style element that applies to PivotTable's second subtotal column.
    ///</summary>
    SecondSubtotalColumn = 16;
    ///<summary>
    ///  Table style element that applies to pivot table's third subtotal column.
    ///</summary>
    ThirdSubtotalColumn = 17;
    ///<summary>
    ///  Table style element that applies to PivotTable's blank rows.
    ///</summary>
    BlankRow = 18;
    ///<summary>
    ///  Table style element that applies to pivot table's first subtotal row.
    ///</summary>
    FirstSubtotalRow = 19;
    ///<summary>
    ///  Table style element that applies to PivotTable's second subtotal row.
    ///</summary>
    SecondSubtotalRow = 20;
    ///<summary>
    ///  Table style element that applies to PivotTable's third subtotal row.
    ///</summary>
    ThirdSubtotalRow = 21;
    ///<summary>
    ///  Table style element that applies to PivotTable's first column subheading.
    ///</summary>
    FirstColumnSubheading = 22;
    ///<summary>
    ///  Table style element that applies to pivot table's second column subheading.
    ///</summary>
    SecondColumnSubheading = 23;
    ///<summary>
    ///  Table style element that applies to PivotTable's third column subheading.
    ///</summary>
    ThirdColumnSubheading = 24;
    ///<summary>
    ///  Table style element that applies to PivotTable's first row subheading.
    ///</summary>
    FirstRowSubheading = 25;
    ///<summary>
    ///  Table style element that applies to pivot table's second row subheading.
    ///</summary>
    SecondRowSubheading = 26;
    ///<summary>
    ///  Table style element that applies to PivotTable's third row subheading.
    ///</summary>
    ThirdRowSubheading = 27;
    ///<summary>
    ///  Table style element that applies to pivot table's grand total column.
    ///</summary>
    GrandTotalColumn = 28;
    ///<summary>
    ///  Table style element that applies to pivot table's grand total row.
    ///</summary>
    GrandTotalRow = 29;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  ///<summary>
  ///  Represents the built-in table style type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableStyleType')]
  DNTableStyleType = type Integer;
  DNTableStyleTypeHelper = record helper for DNTableStyleType
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    TableStyleLight1 = 1;
    ///<summary></summary>
    TableStyleLight2 = 2;
    ///<summary></summary>
    TableStyleLight3 = 3;
    ///<summary></summary>
    TableStyleLight4 = 4;
    ///<summary></summary>
    TableStyleLight5 = 5;
    ///<summary></summary>
    TableStyleLight6 = 6;
    ///<summary></summary>
    TableStyleLight7 = 7;
    ///<summary></summary>
    TableStyleLight8 = 8;
    ///<summary></summary>
    TableStyleLight9 = 9;
    ///<summary></summary>
    TableStyleLight10 = 10;
    ///<summary></summary>
    TableStyleLight11 = 11;
    ///<summary></summary>
    TableStyleLight12 = 12;
    ///<summary></summary>
    TableStyleLight13 = 13;
    ///<summary></summary>
    TableStyleLight14 = 14;
    ///<summary></summary>
    TableStyleLight15 = 15;
    ///<summary></summary>
    TableStyleLight16 = 16;
    ///<summary></summary>
    TableStyleLight17 = 17;
    ///<summary></summary>
    TableStyleLight18 = 18;
    ///<summary></summary>
    TableStyleLight19 = 19;
    ///<summary></summary>
    TableStyleLight20 = 20;
    ///<summary></summary>
    TableStyleLight21 = 21;
    ///<summary></summary>
    TableStyleMedium1 = 22;
    ///<summary></summary>
    TableStyleMedium2 = 23;
    ///<summary></summary>
    TableStyleMedium3 = 24;
    ///<summary></summary>
    TableStyleMedium4 = 25;
    ///<summary></summary>
    TableStyleMedium5 = 26;
    ///<summary></summary>
    TableStyleMedium6 = 27;
    ///<summary></summary>
    TableStyleMedium7 = 28;
    ///<summary></summary>
    TableStyleMedium8 = 29;
    ///<summary></summary>
    TableStyleMedium9 = 30;
    ///<summary></summary>
    TableStyleMedium10 = 31;
    ///<summary></summary>
    TableStyleMedium11 = 32;
    ///<summary></summary>
    TableStyleMedium12 = 33;
    ///<summary></summary>
    TableStyleMedium13 = 34;
    ///<summary></summary>
    TableStyleMedium14 = 35;
    ///<summary></summary>
    TableStyleMedium15 = 36;
    ///<summary></summary>
    TableStyleMedium16 = 37;
    ///<summary></summary>
    TableStyleMedium17 = 38;
    ///<summary></summary>
    TableStyleMedium18 = 39;
    ///<summary></summary>
    TableStyleMedium19 = 40;
    ///<summary></summary>
    TableStyleMedium20 = 41;
    ///<summary></summary>
    TableStyleMedium21 = 42;
    ///<summary></summary>
    TableStyleMedium22 = 43;
    ///<summary></summary>
    TableStyleMedium23 = 44;
    ///<summary></summary>
    TableStyleMedium24 = 45;
    ///<summary></summary>
    TableStyleMedium25 = 46;
    ///<summary></summary>
    TableStyleMedium26 = 47;
    ///<summary></summary>
    TableStyleMedium27 = 48;
    ///<summary></summary>
    TableStyleMedium28 = 49;
    ///<summary></summary>
    TableStyleDark1 = 50;
    ///<summary></summary>
    TableStyleDark2 = 51;
    ///<summary></summary>
    TableStyleDark3 = 52;
    ///<summary></summary>
    TableStyleDark4 = 53;
    ///<summary></summary>
    TableStyleDark5 = 54;
    ///<summary></summary>
    TableStyleDark6 = 55;
    ///<summary></summary>
    TableStyleDark7 = 56;
    ///<summary></summary>
    TableStyleDark8 = 57;
    ///<summary></summary>
    TableStyleDark9 = 58;
    ///<summary></summary>
    TableStyleDark10 = 59;
    ///<summary></summary>
    TableStyleDark11 = 60;
    ///<summary></summary>
    Custom = 61;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  ///<summary>
  ///  Determines the type of calculation in the Totals row of the list column.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TotalsCalculation')]
  DNTotalsCalculation = type Integer;
  DNTotalsCalculationHelper = record helper for DNTotalsCalculation
  public const
    ///<summary>
    ///  Represents No totals calculation.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents Average totals calculation.
    ///</summary>
    Average = 1;
    ///<summary>
    ///  Represents Count totals calculation.
    ///</summary>
    Count = 2;
    ///<summary>
    ///  Represents Count Nums totals calculation.
    ///</summary>
    CountNums = 3;
    ///<summary>
    ///  Represents Max totals calculation.
    ///</summary>
    Max = 4;
    ///<summary>
    ///  Represents Min totals calculation.
    ///</summary>
    Min = 5;
    ///<summary>
    ///  Represents Sum totals calculation.
    ///</summary>
    Sum = 6;
    ///<summary>
    ///  Represents StdDev totals calculation.
    ///</summary>
    StdDev = 7;
    ///<summary>
    ///  Represents Var totals calculation.
    ///</summary>
    Var_ = 8;
    ///<summary>
    ///  Represents custom calculation.
    ///</summary>
    Custom = 9;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the type of target mode.
  ///</summary>
  [DNTypeName('Aspose.Cells.TargetModeType')]
  DNTargetModeType = type Integer;
  DNTargetModeTypeHelper = record helper for DNTargetModeType
  public const
    ///<summary>
    ///  External link
    ///</summary>
    External_ = 0;
    ///<summary>
    ///  Local and full paths to files or folders.
    ///</summary>
    FilePath = 1;
    ///<summary>
    ///  Email.
    ///</summary>
    Email = 2;
    ///<summary>
    ///  Link on cell or named range.
    ///</summary>
    CellReference = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates text alignment types.
  ///</summary>
  [DNTypeName('Aspose.Cells.TextAlignmentType')]
  DNTextAlignmentType = type Integer;
  DNTextAlignmentTypeHelper = record helper for DNTextAlignmentType
  public const
    ///<summary>
    ///  Represents bottom text alignment.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Represents center text alignment.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Represents center across text alignment.
    ///</summary>
    CenterAcross = 2;
    ///<summary>
    ///  Represents distributed text alignment.
    ///</summary>
    Distributed = 3;
    ///<summary>
    ///  Represents fill text alignment.
    ///</summary>
    Fill = 4;
    ///<summary>
    ///  Represents general text alignment.
    ///</summary>
    General = 5;
    ///<summary>
    ///  Represents justify text alignment.
    ///</summary>
    Justify = 6;
    ///<summary>
    ///  Represents left text alignment.
    ///</summary>
    Left = 7;
    ///<summary>
    ///  Represents right text alignment.
    ///</summary>
    Right = 8;
    ///<summary>
    ///  Represents top text alignment.
    ///</summary>
    Top = 9;
    ///<summary>
    ///  Aligns the text with an adjusted kashida length for Arabic text.
    ///</summary>
    JustifiedLow = 10;
    ///<summary>
    ///  Distributes Thai text specially, because each character is treated as a word.
    ///</summary>
    ThaiDistributed = 11;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  This type specifies the cap types of the text.
  ///</summary>
  [DNTypeName('Aspose.Cells.TextCapsType')]
  DNTextCapsType = type Integer;
  DNTextCapsTypeHelper = record helper for DNTextCapsType
  public const
    ///<summary>
    ///  None caps
    ///</summary>
    None = 0;
    ///<summary>
    ///  Apply all caps on the text.
    ///</summary>
    All = 1;
    ///<summary>
    ///  Apply small caps to the text.
    ///</summary>
    Small = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates displaying text type when the text width is larger than cell width.
  ///</summary>
  [DNTypeName('Aspose.Cells.TextCrossType')]
  DNTextCrossType = type Integer;
  DNTextCrossTypeHelper = record helper for DNTextCrossType
  public const
    ///<summary>
    ///  Display text like in Microsoft Excel.
    ///</summary>
    Default_ = 1;
    ///<summary>
    ///  Display all the text by crossing other cells and keep text of crossed cells.
    ///</summary>
    CrossKeep = 2;
    ///<summary>
    ///  Display all the text by crossing other cells and override text of crossed cells.
    ///</summary>
    CrossOverride = 3;
    ///<summary>
    ///  Only display the text within the width of cell.
    ///</summary>
    StrictInCell = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the direction of the text flow for this paragraph.
  ///</summary>
  [DNTypeName('Aspose.Cells.TextDirectionType')]
  DNTextDirectionType = type Integer;
  DNTextDirectionTypeHelper = record helper for DNTextDirectionType
  public const
    ///<summary></summary>
    Context = 0;
    ///<summary></summary>
    LeftToRight = 1;
    ///<summary></summary>
    RightToLeft = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates text orientation types.
  ///</summary>
  [DNTypeName('Aspose.Cells.TextOrientationType')]
  DNTextOrientationType = type Integer;
  DNTextOrientationTypeHelper = record helper for DNTextOrientationType
  public const
    ///<summary>
    ///  Rotates text with 90 degrees clockwise.
    ///</summary>
    ClockWise = 0;
    ///<summary>
    ///  Rotates text with 90 degrees counterclockwise.
    ///</summary>
    CounterClockWise = 1;
    ///<summary>
    ///  Represents the default value.
    ///</summary>
    NoRotation = 2;
    ///<summary>
    ///  Displays text from top to bottom of the cell. Stacked text.
    ///</summary>
    TopToBottom = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  This type specifies the strike type.
  ///</summary>
  [DNTypeName('Aspose.Cells.TextStrikeType')]
  DNTextStrikeType = type Integer;
  DNTextStrikeTypeHelper = record helper for DNTextStrikeType
  public const
    ///<summary>
    ///  A single strikethrough applied on the text.
    ///</summary>
    Single = 0;
    ///<summary>
    ///  A double strikethrough applied on the text.
    ///</summary>
    Double = 1;
    ///<summary>
    ///  No strike is applied to the text.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Enumerates  the theme color types.
  ///</summary>
  [DNTypeName('Aspose.Cells.ThemeColorType')]
  DNThemeColorType = type Integer;
  DNThemeColorTypeHelper = record helper for DNThemeColorType
  public const
    ///<summary></summary>
    Background1 = 0;
    ///<summary></summary>
    Text1 = 1;
    ///<summary></summary>
    Background2 = 2;
    ///<summary></summary>
    Text2 = 3;
    ///<summary></summary>
    Accent1 = 4;
    ///<summary></summary>
    Accent2 = 5;
    ///<summary></summary>
    Accent3 = 6;
    ///<summary></summary>
    Accent4 = 7;
    ///<summary></summary>
    Accent5 = 8;
    ///<summary></summary>
    Accent6 = 9;
    ///<summary></summary>
    Hyperlink = 10;
    ///<summary></summary>
    FollowedHyperlink = 11;
    ///<summary>
    ///  Inner used.
    ///  A color used in theme definitions which means to use the color of the style.
    ///</summary>
    StyleColor = 12;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Used in a FormatConditionType.TimePeriod conditional formatting rule.
  ///  These are dynamic time periods, which change based on
  ///  the date the conditional formatting is refreshed / applied.
  ///</summary>
  [DNTypeName('Aspose.Cells.TimePeriodType')]
  DNTimePeriodType = type Integer;
  DNTimePeriodTypeHelper = record helper for DNTimePeriodType
  public const
    ///<summary>
    ///  Today's date.
    ///</summary>
    Today = 0;
    ///<summary>
    ///  Yesterday's date.
    ///</summary>
    Yesterday = 1;
    ///<summary>
    ///  Tomorrow's date.
    ///</summary>
    Tomorrow = 2;
    ///<summary>
    ///  A date in the last seven days.
    ///</summary>
    Last7Days = 3;
    ///<summary>
    ///  A date occurring in this calendar month.
    ///</summary>
    ThisMonth = 4;
    ///<summary>
    ///  A date occurring in the last calendar month.
    ///</summary>
    LastMonth = 5;
    ///<summary>
    ///  A date occurring in the next calendar month.
    ///</summary>
    NextMonth = 6;
    ///<summary>
    ///  A date occurring this week.
    ///</summary>
    ThisWeek = 7;
    ///<summary>
    ///  A date occurring last week.
    ///</summary>
    LastWeek = 8;
    ///<summary>
    ///  A date occurring next week.
    ///</summary>
    NextWeek = 9;
    ///<summary>
    ///  A date occurring this year.
    ///  Only for .ods.
    ///</summary>
    ThisYear = 10;
    ///<summary>
    ///  A date occurring last year.
    ///  Only for .ods.
    ///</summary>
    LastYear = 11;
    ///<summary>
    ///  A date occurring next year.
    ///  Only for .ods.
    ///</summary>
    NextYear = 12;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies how to apply style for parsed values when converting string value to number or datetime.
  ///</summary>
  [DNTypeName('Aspose.Cells.TxtLoadStyleStrategy')]
  DNTxtLoadStyleStrategy = type Integer;
  DNTxtLoadStyleStrategyHelper = record helper for DNTxtLoadStyleStrategy
  public const
    ///<summary>
    ///  Does not set style for the parsed value.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Set the style as built-in number/datetime when the parsed value are plain numeric/datetime values.
    ///</summary>
    ///<remarks>
    ///  When ms excel parsing datetime or numeric values according to user's input(such as CSV file),
    ///  the formatting of those values may be changed, such as
    ///  leading/tailing zeros of number, year/month/day order of datetime, ...etc.
    ///  This type is for simulating ms excel's behavior.
    ///</remarks>
    BuiltIn = 1;
    ///<summary>
    ///  Set the exact custom format for the parsed value to make the formatted value be same with the original input one.
    ///</summary>
    ExactFormat = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Specifies the type of using quotation marks for values in text format files.
  ///</summary>
  [DNTypeName('Aspose.Cells.TxtValueQuoteType')]
  DNTxtValueQuoteType = type Integer;
  DNTxtValueQuoteTypeHelper = record helper for DNTxtValueQuoteType
  public const
    ///<summary>
    ///  All values that contain special characters such as quotation mark, separator character will be quoted.
    ///  Same with the behavior of ms excel for exporting text file.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  All values will be quoted always.
    ///</summary>
    Always = 1;
    ///<summary>
    ///  Only quote values when needed. Such as, if one value contains quotation mark but the quotation mark is not at the begin of this value, this value will not be quoted.
    ///</summary>
    Minimum = 2;
    ///<summary>
    ///  All values will not be quoted. The exported text file with this type may not be read back correctly because the needed quotation marks being absent.
    ///</summary>
    Never = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents how to update links to other workbooks when the workbook is opened.
  ///</summary>
  [DNTypeName('Aspose.Cells.UpdateLinksType')]
  DNUpdateLinksType = type Integer;
  DNUpdateLinksTypeHelper = record helper for DNUpdateLinksType
  public const
    ///<summary>
    ///  Prompt user to update.
    ///</summary>
    UserSet = 0;
    ///<summary>
    ///  Do not update, and do not prompt user.
    ///</summary>
    Never = 1;
    ///<summary>
    ///  Always update.
    ///</summary>
    Always = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the data validation alert style.
  ///</summary>
  [DNTypeName('Aspose.Cells.ValidationAlertType')]
  DNValidationAlertType = type Integer;
  DNValidationAlertTypeHelper = record helper for DNValidationAlertType
  public const
    ///<summary>
    ///  Information alert style.
    ///</summary>
    Information = 0;
    ///<summary>
    ///  Stop alert style.
    ///</summary>
    Stop = 1;
    ///<summary>
    ///  Warning alert style.
    ///</summary>
    Warning = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents data validation type.
  ///</summary>
  [DNTypeName('Aspose.Cells.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    ///<summary>
    ///  Any value validation type.
    ///</summary>
    AnyValue = 0;
    ///<summary>
    ///  Whole number validation type.
    ///</summary>
    WholeNumber = 1;
    ///<summary>
    ///  Decimal validation type.
    ///</summary>
    Decimal = 2;
    ///<summary>
    ///  List validation type.
    ///</summary>
    List = 3;
    ///<summary>
    ///  Date validation type.
    ///</summary>
    Date = 4;
    ///<summary>
    ///  Time validation type.
    ///</summary>
    Time = 5;
    ///<summary>
    ///  Text length validation type.
    ///</summary>
    TextLength = 6;
    ///<summary>
    ///  Custom validation type.
    ///</summary>
    Custom = 7;
  end;


  //-------------namespace: Aspose.Cells.Vba----------------
  ///<summary>
  ///  Represents the type of VBA module.
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaModuleType')]
  DNVbaModuleType = type Integer;
  DNVbaModuleTypeHelper = record helper for DNVbaModuleType
  public const
    ///<summary>
    ///  Represents a procedural module.
    ///</summary>
    Procedural = 0;
    ///<summary>
    ///  Represents a document module.
    ///</summary>
    Document = 1;
    ///<summary>
    ///  Represents a class module.
    ///</summary>
    Class_ = 2;
    ///<summary>
    ///  Represents a designer module.
    ///</summary>
    Designer = 3;
  end;


  //-------------namespace: Aspose.Cells.Vba----------------
  ///<summary>
  ///  Represents the type of VBA project reference.
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaProjectReferenceType')]
  DNVbaProjectReferenceType = type Integer;
  DNVbaProjectReferenceTypeHelper = record helper for DNVbaProjectReferenceType
  public const
    ///<summary>
    ///  Specifies a reference to an Automation type library.
    ///</summary>
    Registered = 0;
    ///<summary>
    ///  Specifies a reference to a twiddled type library and its extended type library.
    ///</summary>
    Control = 1;
    ///<summary>
    ///  Specifies a reference to an external VBA project.
    ///</summary>
    Project = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the view type of the worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.ViewType')]
  DNViewType = type Integer;
  DNViewTypeHelper = record helper for DNViewType
  public const
    ///<summary></summary>
    NormalView = 0;
    ///<summary></summary>
    PageBreakPreview = 1;
    ///<summary></summary>
    PageLayoutView = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the states for sheet visibility.
  ///</summary>
  [DNTypeName('Aspose.Cells.VisibilityType')]
  DNVisibilityType = type Integer;
  DNVisibilityTypeHelper = record helper for DNVisibilityType
  public const
    ///<summary>
    ///  Indicates the sheet is visible.
    ///</summary>
    Visible = 0;
    ///<summary>
    ///  Indicates the sheet is hidden, but can be shown by the user via the user interface.
    ///</summary>
    Hidden = 1;
    ///<summary>
    ///  Indicates the sheet is hidden and cannot be shown in the user interface (UI).
    ///  This state is only available programmatically.
    ///</summary>
    VeryHidden = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  WaringType
  ///</summary>
  [DNTypeName('Aspose.Cells.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    ///<summary>
    ///  Font substitution warning type
    ///  when a font has not been found, this warning type can be get.
    ///</summary>
    FontSubstitution = 0;
    ///<summary>
    ///  Duplicate defined name is found in the file.
    ///</summary>
    DuplicateDefinedName = 1;
    ///<summary>
    ///  Unsupported file format.
    ///</summary>
    UnsupportedFileFormat = 2;
    ///<summary>
    ///  Invalid text of the defined name.
    ///</summary>
    InvalidTextOfDefinedName = 3;
    ///<summary>
    ///  Invalid the font name.
    ///</summary>
    InvalidFontName = 4;
    ///<summary>
    ///  Invalid autofilter range.
    ///</summary>
    InvalidAutoFilterRange = 5;
  end;


  //-------------namespace: Aspose.Cells.WebExtensions----------------
  ///<summary>
  ///  Represents the store type of web extension.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionStoreType')]
  DNWebExtensionStoreType = type Integer;
  DNWebExtensionStoreTypeHelper = record helper for DNWebExtensionStoreType
  public const
    ///<summary>
    ///  Specifies that the store type is Office.com.
    ///</summary>
    OMEX = 0;
    ///<summary>
    ///  Specifies that the store type is SharePoint corporate catalog.
    ///</summary>
    SPCatalog = 1;
    ///<summary>
    ///  Specifies that the store type is a SharePoint web application.
    ///</summary>
    SPApp = 2;
    ///<summary>
    ///  Specifies that the store type is an Exchange server.
    ///</summary>
    Exchange = 3;
    ///<summary>
    ///  Specifies that the store type is a file system share.
    ///</summary>
    FileSystem = 4;
    ///<summary>
    ///  Specifies that the store type is the system registry.
    ///</summary>
    Registry = 5;
    ///<summary>
    ///  Specifies that the store type is Centralized Deployment via Exchange.
    ///</summary>
    ExCatalog = 6;
  end;




type


{ declares }

  DNICellsDataTable = interface; // type: Aspose.Cells.ICellsDataTable, namespace: Aspose.Cells
  DNICustomFunction = interface; // type: Aspose.Cells.ICustomFunction, namespace: Aspose.Cells
  DNICustomParser = interface; // type: Aspose.Cells.ICustomParser, namespace: Aspose.Cells
  DNIExportObjectListener = interface; // type: Aspose.Cells.IExportObjectListener, namespace: Aspose.Cells
  DNIFilePathProvider = interface; // type: Aspose.Cells.IFilePathProvider, namespace: Aspose.Cells
  DNISmartMarkerCallBack = interface; // type: Aspose.Cells.ISmartMarkerCallBack, namespace: Aspose.Cells
  DNIStreamProvider = interface; // type: Aspose.Cells.IStreamProvider, namespace: Aspose.Cells
  DNIWarningCallback = interface; // type: Aspose.Cells.IWarningCallback, namespace: Aspose.Cells
  DNLightCellsDataHandler = interface; // type: Aspose.Cells.LightCellsDataHandler, namespace: Aspose.Cells
  DNLightCellsDataProvider = interface; // type: Aspose.Cells.LightCellsDataProvider, namespace: Aspose.Cells
  DNIPageSavingCallback = interface; // type: Aspose.Cells.Rendering.IPageSavingCallback, namespace: Aspose.Cells.Rendering
  DNAboveAverage = interface; // type: Aspose.Cells.AboveAverage, namespace: Aspose.Cells
  DNAbstractCalculationEngine = interface; // type: Aspose.Cells.AbstractCalculationEngine, namespace: Aspose.Cells
  DNAbstractCalculationMonitor = interface; // type: Aspose.Cells.AbstractCalculationMonitor, namespace: Aspose.Cells
  DNAutoFilter = interface; // type: Aspose.Cells.AutoFilter, namespace: Aspose.Cells
  DNAutoFitterOptions = interface; // type: Aspose.Cells.AutoFitterOptions, namespace: Aspose.Cells
  DNBorder = interface; // type: Aspose.Cells.Border, namespace: Aspose.Cells
  DNBorderCollection = interface; // type: Aspose.Cells.BorderCollection, namespace: Aspose.Cells
  DNCalculationCell = interface; // type: Aspose.Cells.CalculationCell, namespace: Aspose.Cells
  DNCalculationData = interface; // type: Aspose.Cells.CalculationData, namespace: Aspose.Cells
  DNCalculationOptions = interface; // type: Aspose.Cells.CalculationOptions, namespace: Aspose.Cells
  DNCell = interface; // type: Aspose.Cells.Cell, namespace: Aspose.Cells
  DNCells = interface; // type: Aspose.Cells.Cells, namespace: Aspose.Cells
  DNCellsColor = interface; // type: Aspose.Cells.CellsColor, namespace: Aspose.Cells
  DNCellsFactory = interface; // type: Aspose.Cells.CellsFactory, namespace: Aspose.Cells
  DNCellsHelper = interface; // type: Aspose.Cells.CellsHelper, namespace: Aspose.Cells
  DNCellWatch = interface; // type: Aspose.Cells.CellWatch, namespace: Aspose.Cells
  DNAxis = interface; // type: Aspose.Cells.Charts.Axis, namespace: Aspose.Cells.Charts
  DNChart = interface; // type: Aspose.Cells.Charts.Chart, namespace: Aspose.Cells.Charts
  DNChartDataTable = interface; // type: Aspose.Cells.Charts.ChartDataTable, namespace: Aspose.Cells.Charts
  DNChartFrame = interface; // type: Aspose.Cells.Charts.ChartFrame, namespace: Aspose.Cells.Charts
  DNChartArea = interface; // type: Aspose.Cells.Charts.ChartArea, namespace: Aspose.Cells.Charts
  DNChartTextFrame = interface; // type: Aspose.Cells.Charts.ChartTextFrame, namespace: Aspose.Cells.Charts
  DNDataLabels = interface; // type: Aspose.Cells.Charts.DataLabels, namespace: Aspose.Cells.Charts
  DNDisplayUnitLabel = interface; // type: Aspose.Cells.Charts.DisplayUnitLabel, namespace: Aspose.Cells.Charts
  DNLegend = interface; // type: Aspose.Cells.Charts.Legend, namespace: Aspose.Cells.Charts
  DNTitle = interface; // type: Aspose.Cells.Charts.Title, namespace: Aspose.Cells.Charts
  DNPlotArea = interface; // type: Aspose.Cells.Charts.PlotArea, namespace: Aspose.Cells.Charts
  DNChartPoint = interface; // type: Aspose.Cells.Charts.ChartPoint, namespace: Aspose.Cells.Charts
  DNChartPointCollection = interface; // type: Aspose.Cells.Charts.ChartPointCollection, namespace: Aspose.Cells.Charts
  DNDropBars = interface; // type: Aspose.Cells.Charts.DropBars, namespace: Aspose.Cells.Charts
  DNLegendEntry = interface; // type: Aspose.Cells.Charts.LegendEntry, namespace: Aspose.Cells.Charts
  DNMarker = interface; // type: Aspose.Cells.Charts.Marker, namespace: Aspose.Cells.Charts
  DNPivotOptions = interface; // type: Aspose.Cells.Charts.PivotOptions, namespace: Aspose.Cells.Charts
  DNSeries = interface; // type: Aspose.Cells.Charts.Series, namespace: Aspose.Cells.Charts
  DNSeriesLayoutProperties = interface; // type: Aspose.Cells.Charts.SeriesLayoutProperties, namespace: Aspose.Cells.Charts
  DNSparkline = interface; // type: Aspose.Cells.Charts.Sparkline, namespace: Aspose.Cells.Charts
  DNSparklineGroup = interface; // type: Aspose.Cells.Charts.SparklineGroup, namespace: Aspose.Cells.Charts
  DNTickLabels = interface; // type: Aspose.Cells.Charts.TickLabels, namespace: Aspose.Cells.Charts
  DNCellWatchCollection = interface; // type: Aspose.Cells.CellWatchCollection, namespace: Aspose.Cells
  DNChartCollection = interface; // type: Aspose.Cells.Charts.ChartCollection, namespace: Aspose.Cells.Charts
  DNLegendEntryCollection = interface; // type: Aspose.Cells.Charts.LegendEntryCollection, namespace: Aspose.Cells.Charts
  DNSeriesCollection = interface; // type: Aspose.Cells.Charts.SeriesCollection, namespace: Aspose.Cells.Charts
  DNSparklineCollection = interface; // type: Aspose.Cells.Charts.SparklineCollection, namespace: Aspose.Cells.Charts
  DNSparklineGroupCollection = interface; // type: Aspose.Cells.Charts.SparklineGroupCollection, namespace: Aspose.Cells.Charts
  DNTrendlineCollection = interface; // type: Aspose.Cells.Charts.TrendlineCollection, namespace: Aspose.Cells.Charts
  DNColumnCollection = interface; // type: Aspose.Cells.ColumnCollection, namespace: Aspose.Cells
  DNCommentCollection = interface; // type: Aspose.Cells.CommentCollection, namespace: Aspose.Cells
  DNConditionalFormattingIconCollection = interface; // type: Aspose.Cells.ConditionalFormattingIconCollection, namespace: Aspose.Cells
  DNConditionalFormattingValueCollection = interface; // type: Aspose.Cells.ConditionalFormattingValueCollection, namespace: Aspose.Cells
  DNCustomFilterCollection = interface; // type: Aspose.Cells.CustomFilterCollection, namespace: Aspose.Cells
  DNDataSorterKeyCollection = interface; // type: Aspose.Cells.DataSorterKeyCollection, namespace: Aspose.Cells
  DNCheckBoxCollection = interface; // type: Aspose.Cells.Drawing.CheckBoxCollection, namespace: Aspose.Cells.Drawing
  DNGradientStopCollection = interface; // type: Aspose.Cells.Drawing.GradientStopCollection, namespace: Aspose.Cells.Drawing
  DNOleObjectCollection = interface; // type: Aspose.Cells.Drawing.OleObjectCollection, namespace: Aspose.Cells.Drawing
  DNPictureCollection = interface; // type: Aspose.Cells.Drawing.PictureCollection, namespace: Aspose.Cells.Drawing
  DNShapeCollection = interface; // type: Aspose.Cells.Drawing.ShapeCollection, namespace: Aspose.Cells.Drawing
  DNShapeGuideCollection = interface; // type: Aspose.Cells.Drawing.ShapeGuideCollection, namespace: Aspose.Cells.Drawing
  DNShapePathCollection = interface; // type: Aspose.Cells.Drawing.ShapePathCollection, namespace: Aspose.Cells.Drawing
  DNShapePathPointCollection = interface; // type: Aspose.Cells.Drawing.ShapePathPointCollection, namespace: Aspose.Cells.Drawing
  DNShapeSegmentPathCollection = interface; // type: Aspose.Cells.Drawing.ShapeSegmentPathCollection, namespace: Aspose.Cells.Drawing
  DNTextBoxCollection = interface; // type: Aspose.Cells.Drawing.TextBoxCollection, namespace: Aspose.Cells.Drawing
  DNTextTabStopCollection = interface; // type: Aspose.Cells.Drawing.Texts.TextTabStopCollection, namespace: Aspose.Cells.Drawing.Texts
  DNErrorCheckOptionCollection = interface; // type: Aspose.Cells.ErrorCheckOptionCollection, namespace: Aspose.Cells
  DNConnectionParameterCollection = interface; // type: Aspose.Cells.ExternalConnections.ConnectionParameterCollection, namespace: Aspose.Cells.ExternalConnections
  DNExternalConnectionCollection = interface; // type: Aspose.Cells.ExternalConnections.ExternalConnectionCollection, namespace: Aspose.Cells.ExternalConnections
  DNFilterColumnCollection = interface; // type: Aspose.Cells.FilterColumnCollection, namespace: Aspose.Cells
  DNFontSettingCollection = interface; // type: Aspose.Cells.Drawing.Texts.FontSettingCollection, namespace: Aspose.Cells.Drawing.Texts
  DNConditionalFormattingCollection = interface; // type: Aspose.Cells.ConditionalFormattingCollection, namespace: Aspose.Cells
  DNHorizontalPageBreakCollection = interface; // type: Aspose.Cells.HorizontalPageBreakCollection, namespace: Aspose.Cells
  DNHyperlinkCollection = interface; // type: Aspose.Cells.HyperlinkCollection, namespace: Aspose.Cells
  DNCustomXmlPartCollection = interface; // type: Aspose.Cells.Markup.CustomXmlPartCollection, namespace: Aspose.Cells.Markup
  DNSmartTagCollection = interface; // type: Aspose.Cells.Markup.SmartTagCollection, namespace: Aspose.Cells.Markup
  DNSmartTagPropertyCollection = interface; // type: Aspose.Cells.Markup.SmartTagPropertyCollection, namespace: Aspose.Cells.Markup
  DNNameCollection = interface; // type: Aspose.Cells.NameCollection, namespace: Aspose.Cells
  DNOdsCellFieldCollection = interface; // type: Aspose.Cells.Ods.OdsCellFieldCollection, namespace: Aspose.Cells.Ods
  DNPivotFilterCollection = interface; // type: Aspose.Cells.Pivot.PivotFilterCollection, namespace: Aspose.Cells.Pivot
  DNPivotFormatConditionCollection = interface; // type: Aspose.Cells.Pivot.PivotFormatConditionCollection, namespace: Aspose.Cells.Pivot
  DNPivotTableCollection = interface; // type: Aspose.Cells.Pivot.PivotTableCollection, namespace: Aspose.Cells.Pivot
  DNContentTypePropertyCollection = interface; // type: Aspose.Cells.Properties.ContentTypePropertyCollection, namespace: Aspose.Cells.Properties
  DNCustomPropertyCollection = interface; // type: Aspose.Cells.Properties.CustomPropertyCollection, namespace: Aspose.Cells.Properties
  DNProtectedRangeCollection = interface; // type: Aspose.Cells.ProtectedRangeCollection, namespace: Aspose.Cells
  DNQueryTableCollection = interface; // type: Aspose.Cells.QueryTableCollection, namespace: Aspose.Cells
  DNPowerQueryFormulaCollction = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaCollction, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaItemCollection = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaItemCollection, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaParameterCollection = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaParameterCollection, namespace: Aspose.Cells.QueryTables
  DNRangeCollection = interface; // type: Aspose.Cells.RangeCollection, namespace: Aspose.Cells
  DNReferredAreaCollection = interface; // type: Aspose.Cells.ReferredAreaCollection, namespace: Aspose.Cells
  DNRevisionCollection = interface; // type: Aspose.Cells.Revisions.RevisionCollection, namespace: Aspose.Cells.Revisions
  DNRevisionLogCollection = interface; // type: Aspose.Cells.Revisions.RevisionLogCollection, namespace: Aspose.Cells.Revisions
  DNScenarioCollection = interface; // type: Aspose.Cells.ScenarioCollection, namespace: Aspose.Cells
  DNScenarioInputCellCollection = interface; // type: Aspose.Cells.ScenarioInputCellCollection, namespace: Aspose.Cells
  DNSlicerCollection = interface; // type: Aspose.Cells.Slicers.SlicerCollection, namespace: Aspose.Cells.Slicers
  DNSlicerCacheItemCollection = interface; // type: Aspose.Cells.Slicers.SlicerCacheItemCollection, namespace: Aspose.Cells.Slicers
  DNDxfCollection = interface; // type: Aspose.Cells.DxfCollection, namespace: Aspose.Cells
  DNListColumnCollection = interface; // type: Aspose.Cells.Tables.ListColumnCollection, namespace: Aspose.Cells.Tables
  DNListObjectCollection = interface; // type: Aspose.Cells.Tables.ListObjectCollection, namespace: Aspose.Cells.Tables
  DNTableStyleCollection = interface; // type: Aspose.Cells.Tables.TableStyleCollection, namespace: Aspose.Cells.Tables
  DNTableStyleElementCollection = interface; // type: Aspose.Cells.Tables.TableStyleElementCollection, namespace: Aspose.Cells.Tables
  DNThreadedCommentCollection = interface; // type: Aspose.Cells.ThreadedCommentCollection, namespace: Aspose.Cells
  DNThreadedCommentAuthorCollection = interface; // type: Aspose.Cells.ThreadedCommentAuthorCollection, namespace: Aspose.Cells
  DNValidationCollection = interface; // type: Aspose.Cells.ValidationCollection, namespace: Aspose.Cells
  DNVbaModuleCollection = interface; // type: Aspose.Cells.Vba.VbaModuleCollection, namespace: Aspose.Cells.Vba
  DNVbaProjectReferenceCollection = interface; // type: Aspose.Cells.Vba.VbaProjectReferenceCollection, namespace: Aspose.Cells.Vba
  DNVerticalPageBreakCollection = interface; // type: Aspose.Cells.VerticalPageBreakCollection, namespace: Aspose.Cells
  DNWebExtensionCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionBindingCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionBindingCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionPropertyCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionPropertyCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionReferenceCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionReferenceCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionTaskPaneCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionTaskPaneCollection, namespace: Aspose.Cells.WebExtensions
  DNWorksheetCollection = interface; // type: Aspose.Cells.WorksheetCollection, namespace: Aspose.Cells
  DNXmlMapCollection = interface; // type: Aspose.Cells.XmlMapCollection, namespace: Aspose.Cells
  DNCollectionBase<T> = interface; // type: Aspose.Cells.CollectionBase`1, namespace: Aspose.Cells
  DNColorFilter = interface; // type: Aspose.Cells.ColorFilter, namespace: Aspose.Cells
  DNColorScale = interface; // type: Aspose.Cells.ColorScale, namespace: Aspose.Cells
  DNColumn = interface; // type: Aspose.Cells.Column, namespace: Aspose.Cells
  DNComment = interface; // type: Aspose.Cells.Comment, namespace: Aspose.Cells
  DNConditionalFormattingIcon = interface; // type: Aspose.Cells.ConditionalFormattingIcon, namespace: Aspose.Cells
  DNConditionalFormattingResult = interface; // type: Aspose.Cells.ConditionalFormattingResult, namespace: Aspose.Cells
  DNConditionalFormattingValue = interface; // type: Aspose.Cells.ConditionalFormattingValue, namespace: Aspose.Cells
  DNCopyOptions = interface; // type: Aspose.Cells.CopyOptions, namespace: Aspose.Cells
  DNCustomFilter = interface; // type: Aspose.Cells.CustomFilter, namespace: Aspose.Cells
  DNCustomImplementationFactory = interface; // type: Aspose.Cells.CustomImplementationFactory, namespace: Aspose.Cells
  DNDataBar = interface; // type: Aspose.Cells.DataBar, namespace: Aspose.Cells
  DNDataBarBorder = interface; // type: Aspose.Cells.DataBarBorder, namespace: Aspose.Cells
  DNDataSorter = interface; // type: Aspose.Cells.DataSorter, namespace: Aspose.Cells
  DNDataSorterKey = interface; // type: Aspose.Cells.DataSorterKey, namespace: Aspose.Cells
  DNDateTimeGroupItem = interface; // type: Aspose.Cells.DateTimeGroupItem, namespace: Aspose.Cells
  DNDeleteOptions = interface; // type: Aspose.Cells.DeleteOptions, namespace: Aspose.Cells
  DNDigitalSignature = interface; // type: Aspose.Cells.DigitalSignatures.DigitalSignature, namespace: Aspose.Cells.DigitalSignatures
  DNDigitalSignatureCollection = interface; // type: Aspose.Cells.DigitalSignatures.DigitalSignatureCollection, namespace: Aspose.Cells.DigitalSignatures
  DNActiveXControlBase = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNCheckBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.CheckBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNComboBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ComboBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNCommandButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.CommandButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNImageActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ImageActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNLabelActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.LabelActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNListBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ListBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNSpinButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.SpinButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNScrollBarActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ScrollBarActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNTextBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.TextBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNToggleButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ToggleButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNRadioButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.RadioButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNUnknownControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.UnknownControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNArea = interface; // type: Aspose.Cells.Drawing.Area, namespace: Aspose.Cells.Drawing
  DNFloor = interface; // type: Aspose.Cells.Charts.Floor, namespace: Aspose.Cells.Charts
  DNWalls = interface; // type: Aspose.Cells.Charts.Walls, namespace: Aspose.Cells.Charts
  DNBevel = interface; // type: Aspose.Cells.Drawing.Bevel, namespace: Aspose.Cells.Drawing
  DNColorHelper = interface; // type: Aspose.Cells.Drawing.ColorHelper, namespace: Aspose.Cells.Drawing
  DNFill = interface; // type: Aspose.Cells.Drawing.Fill, namespace: Aspose.Cells.Drawing
  DNAutomaticFill = interface; // type: Aspose.Cells.Drawing.AutomaticFill, namespace: Aspose.Cells.Drawing
  DNGradientFill = interface; // type: Aspose.Cells.Drawing.GradientFill, namespace: Aspose.Cells.Drawing
  DNGroupFill = interface; // type: Aspose.Cells.Drawing.GroupFill, namespace: Aspose.Cells.Drawing
  DNNoneFill = interface; // type: Aspose.Cells.Drawing.NoneFill, namespace: Aspose.Cells.Drawing
  DNPatternFill = interface; // type: Aspose.Cells.Drawing.PatternFill, namespace: Aspose.Cells.Drawing
  DNSolidFill = interface; // type: Aspose.Cells.Drawing.SolidFill, namespace: Aspose.Cells.Drawing
  DNTextureFill = interface; // type: Aspose.Cells.Drawing.TextureFill, namespace: Aspose.Cells.Drawing
  DNFillFormat = interface; // type: Aspose.Cells.Drawing.FillFormat, namespace: Aspose.Cells.Drawing
  DNLineFormat = interface; // type: Aspose.Cells.Drawing.LineFormat, namespace: Aspose.Cells.Drawing
  DNFormat3D = interface; // type: Aspose.Cells.Drawing.Format3D, namespace: Aspose.Cells.Drawing
  DNGeometry = interface; // type: Aspose.Cells.Drawing.Geometry, namespace: Aspose.Cells.Drawing
  DNCustomGeometry = interface; // type: Aspose.Cells.Drawing.CustomGeometry, namespace: Aspose.Cells.Drawing
  DNGlowEffect = interface; // type: Aspose.Cells.Drawing.GlowEffect, namespace: Aspose.Cells.Drawing
  DNGradientStop = interface; // type: Aspose.Cells.Drawing.GradientStop, namespace: Aspose.Cells.Drawing
  DNLine = interface; // type: Aspose.Cells.Drawing.Line, namespace: Aspose.Cells.Drawing
  DNErrorBar = interface; // type: Aspose.Cells.Charts.ErrorBar, namespace: Aspose.Cells.Charts
  DNTrendline = interface; // type: Aspose.Cells.Charts.Trendline, namespace: Aspose.Cells.Charts
  DNMsoFillFormat = interface; // type: Aspose.Cells.Drawing.MsoFillFormat, namespace: Aspose.Cells.Drawing
  DNMsoFillFormatHelper = interface; // type: Aspose.Cells.Drawing.MsoFillFormatHelper, namespace: Aspose.Cells.Drawing
  DNMsoFormatPicture = interface; // type: Aspose.Cells.Drawing.MsoFormatPicture, namespace: Aspose.Cells.Drawing
  DNMsoLineFormat = interface; // type: Aspose.Cells.Drawing.MsoLineFormat, namespace: Aspose.Cells.Drawing
  DNMsoLineFormatHelper = interface; // type: Aspose.Cells.Drawing.MsoLineFormatHelper, namespace: Aspose.Cells.Drawing
  DNMsoTextFrame = interface; // type: Aspose.Cells.Drawing.MsoTextFrame, namespace: Aspose.Cells.Drawing
  DNPicFormatOption = interface; // type: Aspose.Cells.Drawing.PicFormatOption, namespace: Aspose.Cells.Drawing
  DNReflectionEffect = interface; // type: Aspose.Cells.Drawing.ReflectionEffect, namespace: Aspose.Cells.Drawing
  DNShadowEffect = interface; // type: Aspose.Cells.Drawing.ShadowEffect, namespace: Aspose.Cells.Drawing
  DNShape = interface; // type: Aspose.Cells.Drawing.Shape, namespace: Aspose.Cells.Drawing
  DNArcShape = interface; // type: Aspose.Cells.Drawing.ArcShape, namespace: Aspose.Cells.Drawing
  DNButton = interface; // type: Aspose.Cells.Drawing.Button, namespace: Aspose.Cells.Drawing
  DNCellsDrawing = interface; // type: Aspose.Cells.Drawing.CellsDrawing, namespace: Aspose.Cells.Drawing
  DNChartShape = interface; // type: Aspose.Cells.Drawing.ChartShape, namespace: Aspose.Cells.Drawing
  DNCheckBox = interface; // type: Aspose.Cells.Drawing.CheckBox, namespace: Aspose.Cells.Drawing
  DNComboBox = interface; // type: Aspose.Cells.Drawing.ComboBox, namespace: Aspose.Cells.Drawing
  DNCommentShape = interface; // type: Aspose.Cells.Drawing.CommentShape, namespace: Aspose.Cells.Drawing
  DNCustomXmlShape = interface; // type: Aspose.Cells.Drawing.CustomXmlShape, namespace: Aspose.Cells.Drawing
  DNDialogBox = interface; // type: Aspose.Cells.Drawing.DialogBox, namespace: Aspose.Cells.Drawing
  DNGroupBox = interface; // type: Aspose.Cells.Drawing.GroupBox, namespace: Aspose.Cells.Drawing
  DNGroupShape = interface; // type: Aspose.Cells.Drawing.GroupShape, namespace: Aspose.Cells.Drawing
  DNLabel = interface; // type: Aspose.Cells.Drawing.Label, namespace: Aspose.Cells.Drawing
  DNLineShape = interface; // type: Aspose.Cells.Drawing.LineShape, namespace: Aspose.Cells.Drawing
  DNListBox = interface; // type: Aspose.Cells.Drawing.ListBox, namespace: Aspose.Cells.Drawing
  DNOleObject = interface; // type: Aspose.Cells.Drawing.OleObject, namespace: Aspose.Cells.Drawing
  DNOval = interface; // type: Aspose.Cells.Drawing.Oval, namespace: Aspose.Cells.Drawing
  DNPicture = interface; // type: Aspose.Cells.Drawing.Picture, namespace: Aspose.Cells.Drawing
  DNRadioButton = interface; // type: Aspose.Cells.Drawing.RadioButton, namespace: Aspose.Cells.Drawing
  DNRectangleShape = interface; // type: Aspose.Cells.Drawing.RectangleShape, namespace: Aspose.Cells.Drawing
  DNScrollBar = interface; // type: Aspose.Cells.Drawing.ScrollBar, namespace: Aspose.Cells.Drawing
  DNSmartArtShape = interface; // type: Aspose.Cells.Drawing.SmartArtShape, namespace: Aspose.Cells.Drawing
  DNSpinner = interface; // type: Aspose.Cells.Drawing.Spinner, namespace: Aspose.Cells.Drawing
  DNTextBox = interface; // type: Aspose.Cells.Drawing.TextBox, namespace: Aspose.Cells.Drawing
  DNWebExtensionShape = interface; // type: Aspose.Cells.Drawing.WebExtensionShape, namespace: Aspose.Cells.Drawing
  DNShapeFormat = interface; // type: Aspose.Cells.Drawing.ShapeFormat, namespace: Aspose.Cells.Drawing
  DNShapeGuide = interface; // type: Aspose.Cells.Drawing.ShapeGuide, namespace: Aspose.Cells.Drawing
  DNShapePath = interface; // type: Aspose.Cells.Drawing.ShapePath, namespace: Aspose.Cells.Drawing
  DNShapePathPoint = interface; // type: Aspose.Cells.Drawing.ShapePathPoint, namespace: Aspose.Cells.Drawing
  DNShapePropertyCollection = interface; // type: Aspose.Cells.Drawing.ShapePropertyCollection, namespace: Aspose.Cells.Drawing
  DNShapeSegmentPath = interface; // type: Aspose.Cells.Drawing.ShapeSegmentPath, namespace: Aspose.Cells.Drawing
  DNSignatureLine = interface; // type: Aspose.Cells.Drawing.SignatureLine, namespace: Aspose.Cells.Drawing
  DNTextEffectFormat = interface; // type: Aspose.Cells.Drawing.TextEffectFormat, namespace: Aspose.Cells.Drawing
  DNBullet = interface; // type: Aspose.Cells.Drawing.Texts.Bullet, namespace: Aspose.Cells.Drawing.Texts
  DNBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.BulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNAutoNumberedBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.AutoNumberedBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNCharacterBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.CharacterBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNNoneBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.NoneBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNPictureBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.PictureBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNShapeTextAlignment = interface; // type: Aspose.Cells.Drawing.Texts.ShapeTextAlignment, namespace: Aspose.Cells.Drawing.Texts
  DNTextParagraphCollection = interface; // type: Aspose.Cells.Drawing.Texts.TextParagraphCollection, namespace: Aspose.Cells.Drawing.Texts
  DNTextTabStop = interface; // type: Aspose.Cells.Drawing.Texts.TextTabStop, namespace: Aspose.Cells.Drawing.Texts
  DNThreeDFormat = interface; // type: Aspose.Cells.Drawing.ThreeDFormat, namespace: Aspose.Cells.Drawing
  DNTilePicOption = interface; // type: Aspose.Cells.Drawing.TilePicOption, namespace: Aspose.Cells.Drawing
  DNDynamicFilter = interface; // type: Aspose.Cells.DynamicFilter, namespace: Aspose.Cells
  DNErrorCheckOption = interface; // type: Aspose.Cells.ErrorCheckOption, namespace: Aspose.Cells
  DNExportObjectEvent = interface; // type: Aspose.Cells.ExportObjectEvent, namespace: Aspose.Cells
  DNExportTableOptions = interface; // type: Aspose.Cells.ExportTableOptions, namespace: Aspose.Cells
  DNConnectionParameter = interface; // type: Aspose.Cells.ExternalConnections.ConnectionParameter, namespace: Aspose.Cells.ExternalConnections
  DNExternalConnection = interface; // type: Aspose.Cells.ExternalConnections.ExternalConnection, namespace: Aspose.Cells.ExternalConnections
  DNDBConnection = interface; // type: Aspose.Cells.ExternalConnections.DBConnection, namespace: Aspose.Cells.ExternalConnections
  DNWebQueryConnection = interface; // type: Aspose.Cells.ExternalConnections.WebQueryConnection, namespace: Aspose.Cells.ExternalConnections
  DNExternalLink = interface; // type: Aspose.Cells.ExternalLink, namespace: Aspose.Cells
  DNExternalLinkCollection = interface; // type: Aspose.Cells.ExternalLinkCollection, namespace: Aspose.Cells
  DNFileFormatInfo = interface; // type: Aspose.Cells.FileFormatInfo, namespace: Aspose.Cells
  DNFileFormatUtil = interface; // type: Aspose.Cells.FileFormatUtil, namespace: Aspose.Cells
  DNFilterColumn = interface; // type: Aspose.Cells.FilterColumn, namespace: Aspose.Cells
  DNFindOptions = interface; // type: Aspose.Cells.FindOptions, namespace: Aspose.Cells
  DNFont = interface; // type: Aspose.Cells.Font, namespace: Aspose.Cells
  DNTextOptions = interface; // type: Aspose.Cells.Drawing.Texts.TextOptions, namespace: Aspose.Cells.Drawing.Texts
  DNFontConfigs = interface; // type: Aspose.Cells.FontConfigs, namespace: Aspose.Cells
  DNFontSetting = interface; // type: Aspose.Cells.FontSetting, namespace: Aspose.Cells
  DNTextParagraph = interface; // type: Aspose.Cells.Drawing.Texts.TextParagraph, namespace: Aspose.Cells.Drawing.Texts
  DNFontSourceBase = interface; // type: Aspose.Cells.FontSourceBase, namespace: Aspose.Cells
  DNFileFontSource = interface; // type: Aspose.Cells.FileFontSource, namespace: Aspose.Cells
  DNFolderFontSource = interface; // type: Aspose.Cells.FolderFontSource, namespace: Aspose.Cells
  DNMemoryFontSource = interface; // type: Aspose.Cells.MemoryFontSource, namespace: Aspose.Cells
  DNFormatCondition = interface; // type: Aspose.Cells.FormatCondition, namespace: Aspose.Cells
  DNFormatConditionCollection = interface; // type: Aspose.Cells.FormatConditionCollection, namespace: Aspose.Cells
  DNFormulaParseOptions = interface; // type: Aspose.Cells.FormulaParseOptions, namespace: Aspose.Cells
  DNGlobalizationSettings = interface; // type: Aspose.Cells.GlobalizationSettings, namespace: Aspose.Cells
  DNHeaderFooterCommand = interface; // type: Aspose.Cells.HeaderFooterCommand, namespace: Aspose.Cells
  DNHorizontalPageBreak = interface; // type: Aspose.Cells.HorizontalPageBreak, namespace: Aspose.Cells
  DNHyperlink = interface; // type: Aspose.Cells.Hyperlink, namespace: Aspose.Cells
  DNIconFilter = interface; // type: Aspose.Cells.IconFilter, namespace: Aspose.Cells
  DNIconSet = interface; // type: Aspose.Cells.IconSet, namespace: Aspose.Cells
  DNImportTableOptions = interface; // type: Aspose.Cells.ImportTableOptions, namespace: Aspose.Cells
  DNIndividualFontConfigs = interface; // type: Aspose.Cells.IndividualFontConfigs, namespace: Aspose.Cells
  DNInsertOptions = interface; // type: Aspose.Cells.InsertOptions, namespace: Aspose.Cells
  DNInterruptMonitor = interface; // type: Aspose.Cells.InterruptMonitor, namespace: Aspose.Cells
  DNLicense = interface; // type: Aspose.Cells.License, namespace: Aspose.Cells
  DNLoadFilter = interface; // type: Aspose.Cells.LoadFilter, namespace: Aspose.Cells
  DNLoadOptions = interface; // type: Aspose.Cells.LoadOptions, namespace: Aspose.Cells
  DNAbstractTextLoadOptions = interface; // type: Aspose.Cells.AbstractTextLoadOptions, namespace: Aspose.Cells
  DNHtmlLoadOptions = interface; // type: Aspose.Cells.HtmlLoadOptions, namespace: Aspose.Cells
  DNTxtLoadOptions = interface; // type: Aspose.Cells.TxtLoadOptions, namespace: Aspose.Cells
  DNOdsLoadOptions = interface; // type: Aspose.Cells.OdsLoadOptions, namespace: Aspose.Cells
  DNCustomXmlPart = interface; // type: Aspose.Cells.Markup.CustomXmlPart, namespace: Aspose.Cells.Markup
  DNSmartTag = interface; // type: Aspose.Cells.Markup.SmartTag, namespace: Aspose.Cells.Markup
  DNSmartTagOptions = interface; // type: Aspose.Cells.Markup.SmartTagOptions, namespace: Aspose.Cells.Markup
  DNSmartTagProperty = interface; // type: Aspose.Cells.Markup.SmartTagProperty, namespace: Aspose.Cells.Markup
  DNMetadataOptions = interface; // type: Aspose.Cells.Metadata.MetadataOptions, namespace: Aspose.Cells.Metadata
  DNWorkbookMetadata = interface; // type: Aspose.Cells.Metadata.WorkbookMetadata, namespace: Aspose.Cells.Metadata
  DNMetered = interface; // type: Aspose.Cells.Metered, namespace: Aspose.Cells
  DNName = interface; // type: Aspose.Cells.Name, namespace: Aspose.Cells
  DNNegativeBarFormat = interface; // type: Aspose.Cells.NegativeBarFormat, namespace: Aspose.Cells
  DNOdsCellField = interface; // type: Aspose.Cells.Ods.OdsCellField, namespace: Aspose.Cells.Ods
  DNOdsPageBackground = interface; // type: Aspose.Cells.Ods.OdsPageBackground, namespace: Aspose.Cells.Ods
  DNOutline = interface; // type: Aspose.Cells.Outline, namespace: Aspose.Cells
  DNPageSetup = interface; // type: Aspose.Cells.PageSetup, namespace: Aspose.Cells
  DNPaneCollection = interface; // type: Aspose.Cells.PaneCollection, namespace: Aspose.Cells
  DNPasteOptions = interface; // type: Aspose.Cells.PasteOptions, namespace: Aspose.Cells
  DNPivotField = interface; // type: Aspose.Cells.Pivot.PivotField, namespace: Aspose.Cells.Pivot
  DNPivotFieldCollection = interface; // type: Aspose.Cells.Pivot.PivotFieldCollection, namespace: Aspose.Cells.Pivot
  DNPivotFilter = interface; // type: Aspose.Cells.Pivot.PivotFilter, namespace: Aspose.Cells.Pivot
  DNPivotFormatCondition = interface; // type: Aspose.Cells.Pivot.PivotFormatCondition, namespace: Aspose.Cells.Pivot
  DNPivotItem = interface; // type: Aspose.Cells.Pivot.PivotItem, namespace: Aspose.Cells.Pivot
  DNPivotItemCollection = interface; // type: Aspose.Cells.Pivot.PivotItemCollection, namespace: Aspose.Cells.Pivot
  DNPivotPageFields = interface; // type: Aspose.Cells.Pivot.PivotPageFields, namespace: Aspose.Cells.Pivot
  DNPivotTable = interface; // type: Aspose.Cells.Pivot.PivotTable, namespace: Aspose.Cells.Pivot
  DNSxRng = interface; // type: Aspose.Cells.Pivot.SxRng, namespace: Aspose.Cells.Pivot
  DNContentTypeProperty = interface; // type: Aspose.Cells.Properties.ContentTypeProperty, namespace: Aspose.Cells.Properties
  DNCustomProperty = interface; // type: Aspose.Cells.Properties.CustomProperty, namespace: Aspose.Cells.Properties
  DNDocumentProperty = interface; // type: Aspose.Cells.Properties.DocumentProperty, namespace: Aspose.Cells.Properties
  DNDocumentPropertyCollection = interface; // type: Aspose.Cells.Properties.DocumentPropertyCollection, namespace: Aspose.Cells.Properties
  DNBuiltInDocumentPropertyCollection = interface; // type: Aspose.Cells.Properties.BuiltInDocumentPropertyCollection, namespace: Aspose.Cells.Properties
  DNCustomDocumentPropertyCollection = interface; // type: Aspose.Cells.Properties.CustomDocumentPropertyCollection, namespace: Aspose.Cells.Properties
  DNProtectedRange = interface; // type: Aspose.Cells.ProtectedRange, namespace: Aspose.Cells
  DNProtection = interface; // type: Aspose.Cells.Protection, namespace: Aspose.Cells
  DNQueryTable = interface; // type: Aspose.Cells.QueryTable, namespace: Aspose.Cells
  DNDataMashup = interface; // type: Aspose.Cells.QueryTables.DataMashup, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormula = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormula, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaFunction = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaFunction, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaItem = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaItem, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaParameter = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaParameter, namespace: Aspose.Cells.QueryTables
  DNRange = interface; // type: Aspose.Cells.Range, namespace: Aspose.Cells
  DNReferredArea = interface; // type: Aspose.Cells.ReferredArea, namespace: Aspose.Cells
  DNDrawObject = interface; // type: Aspose.Cells.Rendering.DrawObject, namespace: Aspose.Cells.Rendering
  DNDrawObjectEventHandler = interface; // type: Aspose.Cells.Rendering.DrawObjectEventHandler, namespace: Aspose.Cells.Rendering
  DNImageOrPrintOptions = interface; // type: Aspose.Cells.Rendering.ImageOrPrintOptions, namespace: Aspose.Cells.Rendering
  DNPageSavingArgs = interface; // type: Aspose.Cells.Rendering.PageSavingArgs, namespace: Aspose.Cells.Rendering
  DNPageEndSavingArgs = interface; // type: Aspose.Cells.Rendering.PageEndSavingArgs, namespace: Aspose.Cells.Rendering
  DNPageStartSavingArgs = interface; // type: Aspose.Cells.Rendering.PageStartSavingArgs, namespace: Aspose.Cells.Rendering
  DNPdfBookmarkEntry = interface; // type: Aspose.Cells.Rendering.PdfBookmarkEntry, namespace: Aspose.Cells.Rendering
  DNPdfSecurityOptions = interface; // type: Aspose.Cells.Rendering.PdfSecurity.PdfSecurityOptions, namespace: Aspose.Cells.Rendering.PdfSecurity
  DNSheetPrintingPreview = interface; // type: Aspose.Cells.Rendering.SheetPrintingPreview, namespace: Aspose.Cells.Rendering
  DNSheetRender = interface; // type: Aspose.Cells.Rendering.SheetRender, namespace: Aspose.Cells.Rendering
  DNWorkbookPrintingPreview = interface; // type: Aspose.Cells.Rendering.WorkbookPrintingPreview, namespace: Aspose.Cells.Rendering
  DNWorkbookRender = interface; // type: Aspose.Cells.Rendering.WorkbookRender, namespace: Aspose.Cells.Rendering
  DNReplaceOptions = interface; // type: Aspose.Cells.ReplaceOptions, namespace: Aspose.Cells
  DNRevision = interface; // type: Aspose.Cells.Revisions.Revision, namespace: Aspose.Cells.Revisions
  DNRevisionAutoFormat = interface; // type: Aspose.Cells.Revisions.RevisionAutoFormat, namespace: Aspose.Cells.Revisions
  DNRevisionCellChange = interface; // type: Aspose.Cells.Revisions.RevisionCellChange, namespace: Aspose.Cells.Revisions
  DNRevisionCellComment = interface; // type: Aspose.Cells.Revisions.RevisionCellComment, namespace: Aspose.Cells.Revisions
  DNRevisionCellMove = interface; // type: Aspose.Cells.Revisions.RevisionCellMove, namespace: Aspose.Cells.Revisions
  DNRevisionCustomView = interface; // type: Aspose.Cells.Revisions.RevisionCustomView, namespace: Aspose.Cells.Revisions
  DNRevisionDefinedName = interface; // type: Aspose.Cells.Revisions.RevisionDefinedName, namespace: Aspose.Cells.Revisions
  DNRevisionFormat = interface; // type: Aspose.Cells.Revisions.RevisionFormat, namespace: Aspose.Cells.Revisions
  DNRevisionInsertDelete = interface; // type: Aspose.Cells.Revisions.RevisionInsertDelete, namespace: Aspose.Cells.Revisions
  DNRevisionInsertSheet = interface; // type: Aspose.Cells.Revisions.RevisionInsertSheet, namespace: Aspose.Cells.Revisions
  DNRevisionMergeConflict = interface; // type: Aspose.Cells.Revisions.RevisionMergeConflict, namespace: Aspose.Cells.Revisions
  DNRevisionQueryTable = interface; // type: Aspose.Cells.Revisions.RevisionQueryTable, namespace: Aspose.Cells.Revisions
  DNRevisionRenameSheet = interface; // type: Aspose.Cells.Revisions.RevisionRenameSheet, namespace: Aspose.Cells.Revisions
  DNRevisionLog = interface; // type: Aspose.Cells.Revisions.RevisionLog, namespace: Aspose.Cells.Revisions
  DNRow = interface; // type: Aspose.Cells.Row, namespace: Aspose.Cells
  DNRowCollection = interface; // type: Aspose.Cells.RowCollection, namespace: Aspose.Cells
  DNSaveOptions = interface; // type: Aspose.Cells.SaveOptions, namespace: Aspose.Cells
  DNDifSaveOptions = interface; // type: Aspose.Cells.DifSaveOptions, namespace: Aspose.Cells
  DNDocxSaveOptions = interface; // type: Aspose.Cells.DocxSaveOptions, namespace: Aspose.Cells
  DNHtmlSaveOptions = interface; // type: Aspose.Cells.HtmlSaveOptions, namespace: Aspose.Cells
  DNImageSaveOptions = interface; // type: Aspose.Cells.ImageSaveOptions, namespace: Aspose.Cells
  DNSvgSaveOptions = interface; // type: Aspose.Cells.SvgSaveOptions, namespace: Aspose.Cells
  DNMarkdownSaveOptions = interface; // type: Aspose.Cells.MarkdownSaveOptions, namespace: Aspose.Cells
  DNOdsSaveOptions = interface; // type: Aspose.Cells.OdsSaveOptions, namespace: Aspose.Cells
  DNOoxmlSaveOptions = interface; // type: Aspose.Cells.OoxmlSaveOptions, namespace: Aspose.Cells
  DNPdfSaveOptions = interface; // type: Aspose.Cells.PdfSaveOptions, namespace: Aspose.Cells
  DNPptxSaveOptions = interface; // type: Aspose.Cells.PptxSaveOptions, namespace: Aspose.Cells
  DNSpreadsheetML2003SaveOptions = interface; // type: Aspose.Cells.SpreadsheetML2003SaveOptions, namespace: Aspose.Cells
  DNTxtSaveOptions = interface; // type: Aspose.Cells.TxtSaveOptions, namespace: Aspose.Cells
  DNXlsbSaveOptions = interface; // type: Aspose.Cells.XlsbSaveOptions, namespace: Aspose.Cells
  DNXlsSaveOptions = interface; // type: Aspose.Cells.XlsSaveOptions, namespace: Aspose.Cells
  DNXpsSaveOptions = interface; // type: Aspose.Cells.XpsSaveOptions, namespace: Aspose.Cells
  DNScenario = interface; // type: Aspose.Cells.Scenario, namespace: Aspose.Cells
  DNScenarioInputCell = interface; // type: Aspose.Cells.ScenarioInputCell, namespace: Aspose.Cells
  DNSlicer = interface; // type: Aspose.Cells.Slicers.Slicer, namespace: Aspose.Cells.Slicers
  DNSlicerCache = interface; // type: Aspose.Cells.Slicers.SlicerCache, namespace: Aspose.Cells.Slicers
  DNSlicerCacheItem = interface; // type: Aspose.Cells.Slicers.SlicerCacheItem, namespace: Aspose.Cells.Slicers
  DNStreamProviderOptions = interface; // type: Aspose.Cells.StreamProviderOptions, namespace: Aspose.Cells
  DNStyle = interface; // type: Aspose.Cells.Style, namespace: Aspose.Cells
  DNStyleCollection = interface; // type: Aspose.Cells.StyleCollection, namespace: Aspose.Cells
  DNStyleFlag = interface; // type: Aspose.Cells.StyleFlag, namespace: Aspose.Cells
  DNSubtotalSetting = interface; // type: Aspose.Cells.SubtotalSetting, namespace: Aspose.Cells
  DNListColumn = interface; // type: Aspose.Cells.Tables.ListColumn, namespace: Aspose.Cells.Tables
  DNListObject = interface; // type: Aspose.Cells.Tables.ListObject, namespace: Aspose.Cells.Tables
  DNTableStyle = interface; // type: Aspose.Cells.Tables.TableStyle, namespace: Aspose.Cells.Tables
  DNTableStyleElement = interface; // type: Aspose.Cells.Tables.TableStyleElement, namespace: Aspose.Cells.Tables
  DNTableToRangeOptions = interface; // type: Aspose.Cells.Tables.TableToRangeOptions, namespace: Aspose.Cells.Tables
  DNThemeColor = interface; // type: Aspose.Cells.ThemeColor, namespace: Aspose.Cells
  DNThreadedComment = interface; // type: Aspose.Cells.ThreadedComment, namespace: Aspose.Cells
  DNThreadedCommentAuthor = interface; // type: Aspose.Cells.ThreadedCommentAuthor, namespace: Aspose.Cells
  DNTop10 = interface; // type: Aspose.Cells.Top10, namespace: Aspose.Cells
  DNTop10Filter = interface; // type: Aspose.Cells.Top10Filter, namespace: Aspose.Cells
  DNUnionRange = interface; // type: Aspose.Cells.UnionRange, namespace: Aspose.Cells
  DNExportRangeToJsonOptions = interface; // type: Aspose.Cells.Utility.ExportRangeToJsonOptions, namespace: Aspose.Cells.Utility
  DNJsonLayoutOptions = interface; // type: Aspose.Cells.Utility.JsonLayoutOptions, namespace: Aspose.Cells.Utility
  DNJsonUtility = interface; // type: Aspose.Cells.Utility.JsonUtility, namespace: Aspose.Cells.Utility
  DNValidation = interface; // type: Aspose.Cells.Validation, namespace: Aspose.Cells
  DNVbaModule = interface; // type: Aspose.Cells.Vba.VbaModule, namespace: Aspose.Cells.Vba
  DNVbaProject = interface; // type: Aspose.Cells.Vba.VbaProject, namespace: Aspose.Cells.Vba
  DNVbaProjectReference = interface; // type: Aspose.Cells.Vba.VbaProjectReference, namespace: Aspose.Cells.Vba
  DNVerticalPageBreak = interface; // type: Aspose.Cells.VerticalPageBreak, namespace: Aspose.Cells
  DNWarningInfo = interface; // type: Aspose.Cells.WarningInfo, namespace: Aspose.Cells
  DNWebExtension = interface; // type: Aspose.Cells.WebExtensions.WebExtension, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionBinding = interface; // type: Aspose.Cells.WebExtensions.WebExtensionBinding, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionProperty = interface; // type: Aspose.Cells.WebExtensions.WebExtensionProperty, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionReference = interface; // type: Aspose.Cells.WebExtensions.WebExtensionReference, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionTaskPane = interface; // type: Aspose.Cells.WebExtensions.WebExtensionTaskPane, namespace: Aspose.Cells.WebExtensions
  DNWorkbook = interface; // type: Aspose.Cells.Workbook, namespace: Aspose.Cells
  DNWorkbookDesigner = interface; // type: Aspose.Cells.WorkbookDesigner, namespace: Aspose.Cells
  DNWorkbookSettings = interface; // type: Aspose.Cells.WorkbookSettings, namespace: Aspose.Cells
  DNWorksheet = interface; // type: Aspose.Cells.Worksheet, namespace: Aspose.Cells
  DNWriteProtection = interface; // type: Aspose.Cells.WriteProtection, namespace: Aspose.Cells
  DNXmlColumnProperty = interface; // type: Aspose.Cells.XmlColumnProperty, namespace: Aspose.Cells
  DNXmlDataBinding = interface; // type: Aspose.Cells.XmlDataBinding, namespace: Aspose.Cells
  DNXmlMap = interface; // type: Aspose.Cells.XmlMap, namespace: Aspose.Cells
  DNSmartTagSetting = interface; // type: Aspose.Cells.Markup.SmartTagSetting, namespace: Aspose.Cells.Markup
  DNMultipleFilterCollection = interface; // type: Aspose.Cells.MultipleFilterCollection, namespace: Aspose.Cells
  DNCellsException = interface; // type: Aspose.Cells.CellsException, namespace: Aspose.Cells
  DNCellArea = interface; // type: Aspose.Cells.CellArea, namespace: Aspose.Cells


{ objects }

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents data table.
  ///</summary>
  ///<remarks></remarks>
  [DNTypeName('Aspose.Cells.ICellsDataTable')]
  DNICellsDataTable = interface(DDN.mscorlib.DNObject)
  ['{9D828D3E-9414-3329-A2CC-9616A0735080}']
  { getters & setters } 

    function get_Columns: TArray<string>;
    function get_Count: Int32;
    function get_Item(columnIndex: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(columnName: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    ///<summary>
    ///  Move the cursor to the front of this object, just before the first row.
    ///</summary>
    procedure BeforeFirst;
    ///<summary>
    ///  Moves the cursor down one row from its current position.
    ///</summary>
    ///<returns> if the new current row is valid; false if there are no more rows </returns>
    function Next: Boolean;

  { propertys } 

    ///<summary>
    ///  Gets the columns' name.
    ///</summary>
    property Columns: TArray<string> read get_Columns;
    ///<summary>
    ///  Gets the count of the records. -1 for unknown records count.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[columnIndex: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[columnName: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ICustomFunction')]
  DNICustomFunction = interface(DDN.mscorlib.DNObject)
  ['{46BFF052-3D0F-35A7-AC02-DB4669497BD9}']
  { methods } 

    function CalculateCustomFunction(functionName: string; paramsList: DDN.mscorlib.DNArrayList; contextObjects: DDN.mscorlib.DNArrayList): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Allows users to add their custom value parser for parsing string values to other proper cell value object.
  ///</summary>
  [DNTypeName('Aspose.Cells.ICustomParser')]
  DNICustomParser = interface(DDN.mscorlib.DNObject)
  ['{4A55C564-704E-35DE-BD6E-E7629A0A80FD}']
  { methods } 

    ///<summary>
    ///  Parses given string to proper value object.
    ///</summary>
    ///  <param name="value">The string value to be parsed</param>
    ///<returns>
    ///  Parsed value object from given string. If given string cannot be parsed to proper value object, returns null.
    ///</returns>
    function ParseObject(value: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Gets the formatting pattern corresponding to the parsed value by last invocation of <see cref="M:Aspose.Cells.ICustomParser.ParseObject(System.String)" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  The returned formatting pattern may be used to format corresponding cell(set to Style.Custom for the cell).
    ///</remarks>
    function GetFormat: string;

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Allows users to manipulate objects while exporting.
  ///</summary>
  ///<example>
  ///  The following example creates a Workbook, opens a file named designer.xls in it and makes the horizontal and vertical scroll bars invisible for the Workbook. It then replaces two string values with an Integer value and string value respectively within the spreadsheet and finally sends the updated file to the client browser.
  ///<code>
  ///  [C#]
  ///  //custom implementation of IExportObjectListener
  ///  class CustomExportObjectListener : IExportObjectListener
  ///  {
  ///  private int imgIdx = 0;
  ///  public object ExportObject(ExportObjectEvent e)
  ///  {
  ///  Object source = e.GetSource();
  ///  if (source is Shape)
  ///  {
  ///  Shape shape = (Shape)source;
  ///  string url = null;
  ///  switch (shape.MsoDrawingType)
  ///  {
  ///  case MsoDrawingType.Picture:
  ///  {
  ///  url = SaveImage(((Picture)shape).Data, imgIdx, ((Picture)shape).ImageFormat);
  ///  break;
  ///  }
  ///  }
  ///  if (url != null)
  ///  {
  ///  imgIdx++;
  ///  }
  ///  return url;
  ///  }
  ///  return null;
  ///  }
  ///  private string SaveImage(byte[] data, int imgIdx, ImageFormat format)
  ///  {
  ///  //here save the image to any location, then return the url(relative or absolute) that the generated html can get the image
  ///  return "temp1/temp2.png";
  ///  }
  ///  }
  ///  //Save html file with custom listener
  ///  HtmlSaveOptions saveOptions = new HtmlSaveOptions();
  ///  saveOptions.ExportObjectListener = new CustomExportObjectListener();
  ///  Stream stream = File.Create(outfn);
  ///  book.Save(stream, saveOptions);
  ///  stream.Flush();
  ///  stream.Close();
  ///</code></example>
  [DNTypeName('Aspose.Cells.IExportObjectListener')]
  DNIExportObjectListener = interface(DDN.mscorlib.DNObject)
  ['{971994BF-4126-3637-8120-B417D2B45CA9}']
  { methods } 

    ///<summary>
    ///  Export one object.
    ///</summary>
    ///  <param name="e">The event triggered when one object needs to be exported.</param>
    ///<returns>
    ///  The information about the result of exporting object.
    ///<ul><li>For exporting objects when export workbook to HTML format,
    ///  the result is URL string to access the saved Image from the html file which contains this exported object.
    ///</li></ul></returns>
    function ExportObject(e: DNExportObjectEvent): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the exported file path provider.
  ///</summary>
  [DNTypeName('Aspose.Cells.IFilePathProvider')]
  DNIFilePathProvider = interface(DDN.mscorlib.DNObject)
  ['{6B165796-0113-36E5-B9E9-915618589062}']
  { methods } 

    ///<summary>
    ///  Gets the full path of the file by Worksheet name when exporting Worksheet to html separately.
    ///  So the references among the Worksheets can be exported correctly.
    ///</summary>
    ///  <param name="sheetName">Worksheet name</param>
    ///<returns>the full path of the file</returns>
    function GetFullName(sheetName: string): string;

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents callback interface of processing smartmarker.
  ///</summary>
  [DNTypeName('Aspose.Cells.ISmartMarkerCallBack')]
  DNISmartMarkerCallBack = interface(DDN.mscorlib.DNObject)
  ['{AE1756CB-F104-3D9B-83C9-20C3F8B31122}']
  { methods } 

    ///<summary>
    ///  Callback for processing a smart marker.
    ///</summary>
    ///  <param name="sheetIndex">The sheet index.</param>
    ///  <param name="rowIndex">The row index.</param>
    ///  <param name="colIndex">The column index.</param>
    ///  <param name="tableName">The table name of smartmarker.</param>
    ///  <param name="columnName">The table name of smartmarker.</param>
    procedure Process(sheetIndex: Int32; rowIndex: Int32; colIndex: Int32; tableName: string; columnName: string);

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents the exported stream provider.
  ///</summary>
  [DNTypeName('Aspose.Cells.IStreamProvider')]
  DNIStreamProvider = interface(DDN.mscorlib.DNObject)
  ['{04008A5A-1FF8-3E26-9645-8B88669AE372}']
  { methods } 

    ///<summary>
    ///  Gets the stream.
    ///</summary>
    ///  <param name="options"></param>
    procedure InitStream(options: DNStreamProviderOptions);
    ///<summary>
    ///  Closes the stream.
    ///</summary>
    ///  <param name="options"></param>
    procedure CloseStream(options: DNStreamProviderOptions);

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Callback interface of warning.
  ///</summary>
  [DNTypeName('Aspose.Cells.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{C3A26AF5-FCE8-3100-961E-4907E7C11E14}']
  { methods } 

    ///<summary>
    ///  Our callback only needs to implement the "Warning" method.
    ///</summary>
    ///  <param name="warningInfo"> warning info</param>
    procedure Warning(warningInfo: DNWarningInfo);

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents cells data handler for reading large spreadsheet files in light weight mode.
  ///</summary>
  ///<remarks>
  ///  When reading a workbook by this mode, <see cref="M:Aspose.Cells.LightCellsDataHandler.StartSheet(Aspose.Cells.Worksheet)" />
  ///  will be checked when reading every worksheet in the workbook.
  ///  For one sheet, if <see cref="M:Aspose.Cells.LightCellsDataHandler.StartSheet(Aspose.Cells.Worksheet)" />
  ///  gives true, then all data and properties of rows/cells of this sheet will be checked
  ///  and processed by the implementation of this interface. For every row, <see cref="M:Aspose.Cells.LightCellsDataHandler.StartRow(System.Int32)" />
  ///  will be called to check whether it need to be processed.
  ///  If a row needs to be processed, properties of this row will be read firstly and user can access its properties by <see cref="M:Aspose.Cells.LightCellsDataHandler.ProcessRow(Aspose.Cells.Row)" />
  ///  .
  ///  if row's cells need to be processed too, then <see cref="M:Aspose.Cells.LightCellsDataHandler.ProcessRow(Aspose.Cells.Row)" />
  ///  should returns true and then <see cref="M:Aspose.Cells.LightCellsDataHandler.StartCell(System.Int32)" />
  ///  will be
  ///  called for every existing cell in this row to check whether one cell need to be processed. If one cell needs to be processed,
  ///  then <see cref="M:Aspose.Cells.LightCellsDataHandler.ProcessCell(Aspose.Cells.Cell)" />
  ///  will be called to process the cell by the implementation of this interface.
  ///</remarks>
  [DNTypeName('Aspose.Cells.LightCellsDataHandler')]
  DNLightCellsDataHandler = interface(DDN.mscorlib.DNObject)
  ['{BDBC6223-AE14-33B8-BB42-42FB443A26A1}']
  { methods } 

    ///<summary>
    ///  Starts to process a worksheet.
    ///</summary>
    ///<remarks>
    ///  It will be called before reading cells data of a worksheet.
    ///</remarks>
    ///  <param name="sheet">the worksheet to read cells data.</param>
    ///<returns>
    ///  whether this sheet's cells data needs to be processed. false to ignore this sheet.
    ///</returns>
    function StartSheet(sheet: DNWorksheet): Boolean;
    ///<summary>
    ///  Prepares to process a row.
    ///</summary>
    ///  <param name="rowIndex">the index of next row to be processed</param>
    ///<returns>whether this row(properties or cells data) needs to be processed. false to ignore this row and its cells and check the next row.</returns>
    function StartRow(rowIndex: Int32): Boolean;
    ///<summary>
    ///  Starts to process one row.
    ///</summary>
    ///<remarks>
    ///  It will be called after row's properties such as height, style, ...etc. have been read. However, cells in this row has not been read yet.
    ///</remarks>
    ///  <param name="row">
    ///  Row object which is being processed currently.
    ///</param>
    ///<returns>whether this row's cells need to be processed. false to ignore all cells in this row.</returns>
    function ProcessRow(row: DNRow): Boolean;
    ///<summary>
    ///  Prepares to process a cell.
    ///</summary>
    ///<remarks>
    ///  It will be called when reaching an existing cell in current row. Current row is the row of last call of <see cref="M:Aspose.Cells.LightCellsDataHandler.ProcessRow(Aspose.Cells.Row)" />
    ///  .
    ///</remarks>
    ///  <param name="columnIndex">column index of the cell to be processed</param>
    ///<returns>whether this cell needs to be processed. false to ignore the cell and check the next one until reach the end of cells data of current row</returns>
    function StartCell(columnIndex: Int32): Boolean;
    ///<summary>
    ///  Starts to process one cell.
    ///</summary>
    ///<remarks>
    ///  It will be called after one cell's data has been read.
    ///</remarks>
    ///  <param name="cell">
    ///  Cell object which is being processed currently
    ///</param>
    ///<returns>whether this cell needs to be kept in cells model of current sheet.
    ///  Commonly it should be false so that all cells will not be kept in memory after being processed and then memory be saved.
    ///  For some special purpose such as user needs to access some cells later after the whole workbook having been processed,
    ///  user can make this method return true to keep those special cells in Cells model and access them later by APIs such as Cells[row, column].
    ///  However, keeping cells data in Cells model will requires more memory and if all cells are kept then reading template file
    ///  in LightCells mode will become same with reading it in normal way.</returns>
    function ProcessCell(cell: DNCell): Boolean;

  end;

  //-------------namespace: Aspose.Cells----------------
  ///<summary>
  ///  Represents Data provider for saving large spreadsheet files in light weight mode.
  ///</summary>
  ///<remarks>
  ///  When saving a workbook by this mode, <see cref="M:Aspose.Cells.LightCellsDataProvider.StartSheet(System.Int32)" />
  ///  will be checked when saving every worksheet in the workbook.
  ///  For one sheet, if <see cref="M:Aspose.Cells.LightCellsDataProvider.StartSheet(System.Int32)" />
  ///  gives true, then all data and properties of rows/cells of this sheet to be saved
  ///  will be provided by the implementation of this interface. In the first place, <see cref="M:Aspose.Cells.LightCellsDataProvider.NextRow" />
  ///  will be called to get the next row index to be saved.
  ///  If a valid row index is returned(the row index must be in ascending order for the rows to be saved),
  ///  then a Row object representing this row will be provided for implementation to set its properties by <see cref="M:Aspose.Cells.LightCellsDataProvider.StartRow(Aspose.Cells.Row)" />
  ///  .
  ///  For one row, <see cref="M:Aspose.Cells.LightCellsDataProvider.NextCell" />
  ///  will be checked firstly. If a valid column index be returned(the column index must be in ascending order for all cells of one row to be saved),
  ///  then a Cell object representing this cell will be provided for implementation to set its data and properties by <see cref="M:Aspose.Cells.LightCellsDataProvider.StartCell(Aspose.Cells.Cell)" />
  ///  .
  ///  After data of this cell is set, this cell will be saved directly to the generated spreadsheet file and the next cell will be checked and processed.
  ///</remarks>
  [DNTypeName('Aspose.Cells.LightCellsDataProvider')]
  DNLightCellsDataProvider = interface(DDN.mscorlib.DNObject)
  ['{C2E815BD-9D2E-30E7-8FD8-E7440184CF57}']
  { methods } 

    ///<summary>
    ///  Starts to save a worksheet.
    ///</summary>
    ///<remarks>
    ///  It will be called at the beginning of saving a worksheet during saving a workbook.
    ///  If the provider needs to refer to <i><code>sheetIndex</code></i> later
    ///  in startRow(Row) or startCell(Cell) method,
    ///  that is, if the process needs to know which worksheet is being processed,
    ///  the implementation should retain the <i><code>sheetIndex</code></i> value here.
    ///</remarks>
    ///  <param name="sheetIndex">index of current sheet to be saved.</param>
    ///<returns>
    ///  true if this provider will provide data for the given sheet; false if given sheet should use its normal data model(Cells).
    ///</returns>
    function StartSheet(sheetIndex: Int32): Boolean;
    ///<summary>
    ///  Gets the next row to be saved.
    ///</summary>
    ///<remarks>
    ///  It will be called at the beginning of saving a row and its cells data(before <see cref="M:Aspose.Cells.LightCellsDataProvider.StartRow(Aspose.Cells.Row)" />
    ///  ).
    ///</remarks>
    ///<returns>
    ///  the next row index to be saved. -1 means the end of current sheet data has been reached and no further row of current sheet to be saved.
    ///</returns>
    function NextRow: Int32;
    ///<summary>
    ///  Starts to save data of one row.
    ///</summary>
    ///<remarks>
    ///  It will be called at the beginning of saving a row and its cells data.
    ///  If current row has some custom properties such as height, style, ...etc.,
    ///  implementation should set those properties to given Row object here.
    ///</remarks>
    ///  <param name="row">
    ///  Row object for implementation to fill data. Its row index is the returned value of latest call of <see cref="M:Aspose.Cells.LightCellsDataProvider.NextRow" />
    ///  .
    ///  If the row has been initialized in the inner cells model, the existing row object will be used.
    ///  Otherwise a temporary Row object will be used for implementation to fill data.
    ///</param>
    procedure StartRow(row: DNRow);
    ///<summary>
    ///  Gets next cell to be saved.
    ///</summary>
    ///<remarks>
    ///  It will be called at the beginning of saving one cell.
    ///</remarks>
    ///<returns>
    ///  column index of the next cell to be saved. -1 means the end of current row data has been reached and no further cell of current row to be saved.
    ///</returns>
    function NextCell: Int32;
    ///<summary>
    ///  Starts to save data of one cell.
    ///</summary>
    ///<remarks></remarks>
    ///  <param name="cell">
    ///  Cell object for implementation to fill data. Its column index is the returned value of latest call of <see cref="M:Aspose.Cells.LightCellsDataProvider.NextCell" />
    ///  .
    ///  If the cell has been initialized in the inner cells model, the existed cell object will be used.
    ///  Otherwise a temporary Cell object will be used for implementation to fill data.
    ///</param>
    procedure StartCell(cell: DNCell);
    ///<summary>
    ///  Checks whether the current string value of cell needs to be gathered into a global pool.
    ///</summary>
    ///<remarks>
    ///  Gathering string values will take advantage only when there are many duplicated string values for the cells provided by this implementation.
    ///  In this situation gathering string will save much memory and generate smaller resultant file.
    ///  If there are many string values for the cells provided by LightCellsDataProvider but few of them are same,
    ///  gathering string will cost more memory and time and has no advantage for the resultant file.
    ///</remarks>
    ///<returns>
    ///  true if string value need to be gathered into a global pool for the resultant file.
    ///</returns>
    function IsGatherString: Boolean;

  end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  ///<summary>
  ///  Control/Indicate progress of page saving process.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.IPageSavingCallback')]
  DNIPageSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{8FD528EC-770F-3C30-BDEE-1947090E3085}']
  { methods } 

    ///<summary>
    ///  Control/Indicate a page starts to be output.
    ///</summary>
    ///  <param name="args">Info for a page starts saving process.</param>
    procedure PageStartSaving(args: DNPageStartSavingArgs);
    ///<summary>
    ///  Control/Indicate a page ends to be output.
    ///</summary>
    ///  <param name="args">Info for a page ends saving process.</param>
    procedure PageEndSaving(args: DNPageEndSavingArgs);

  end;

  //-------------namespace: Aspose.Cells----------------
  DNAboveAverageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65348485-A503-5F62-8DA2-B691473052DF}']
  { constructors } 

    {class} function init: DNAboveAverage;

  end;

  ///<summary>
  ///  Describe the AboveAverage conditional formatting rule.
  ///  This conditional formatting rule highlights cells that
  ///  are above or below the average for all values in the range.
  ///</summary>
  [DNTypeName('Aspose.Cells.AboveAverage')]
  DNAboveAverage = interface(DDN.mscorlib.DNObject)
  ['{0983160A-2486-3119-9261-6418AF1C8F87}']
  { getters & setters } 

    function get_IsAboveAverage: Boolean;
    procedure set_IsAboveAverage(value: Boolean);
    function get_IsEqualAverage: Boolean;
    procedure set_IsEqualAverage(value: Boolean);
    function get_StdDev: Int32;
    procedure set_StdDev(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get or set the flag indicating whether the rule is an "above average" rule.
    ///  'true' indicates 'above average'.
    ///  Default value is true.
    ///</summary>
    property IsAboveAverage: Boolean read get_IsAboveAverage write set_IsAboveAverage;
    ///<summary>
    ///  Get or set the flag indicating whether the 'aboveAverage' and 'belowAverage' criteria
    ///  is inclusive of the average itself, or exclusive of that value.
    ///  'true' indicates to include the average value in the criteria.
    ///  Default value is false.
    ///</summary>
    property IsEqualAverage: Boolean read get_IsEqualAverage write set_IsEqualAverage;
    ///<summary>
    ///  Get or set the number of standard deviations to include above or below the average in the
    ///  conditional formatting rule.
    ///  The input value must between 0 and 3 (include 0 and 3).
    ///  Setting this value to 0 means stdDev is not set.
    ///  The default value is 0.
    ///</summary>
    property StdDev: Int32 read get_StdDev write set_StdDev;
  end;

  TDNAboveAverage = class(TDNGenericImport<DNAboveAverageClass, DNAboveAverage>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAbstractCalculationEngineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CFC3855D-6F08-516D-A90A-FF5ADF2C45C9}']
  end;

  ///<summary>
  ///  Represents user's custom calculation engine to extend the default calculation engine of Aspose.Cells.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  public class MyEngine : AbstractCalculationEngine
  ///  {
  ///  public override void Calculate(CalculationData data)
  ///  {
  ///  string funcName = data.FunctionName.ToUpper();
  ///  if ("MYFUNC".Equals(funcName))
  ///  {
  ///  //do calculation for MYFUNC here
  ///  int count = data.ParamCount;
  ///  object res = null;
  ///  for (int i = 0; i &lt; count; i++)
  ///  {
  ///  object pv = data.GetParamValue(i);
  ///  if (pv is ReferredArea)
  ///  {
  ///  ReferredArea ra = (ReferredArea)pv;
  ///  pv = ra.GetValue(0, 0);
  ///  }
  ///  //process the parameter here
  ///  //res = ...;
  ///  }
  ///  data.CalculatedValue = res;
  ///  }
  ///  }
  ///  }
  ///</code></example><remarks>User should not modify any part of the Workbook directly in this implementation(except the calculated result of the custom function, which can be set by CalculationData.CalculatedValue property).
  ///  Otherwise unexpected result or Exception may be caused.
  ///  If user needs to change other data than calculated result in the implementation for some custom functions,
  ///  for example, change cell's formula, style, ...etc., user should gather those data in this implementation and change them out of the scope of formula calculation.</remarks>
  [DNTypeName('Aspose.Cells.AbstractCalculationEngine')]
  DNAbstractCalculationEngine = interface(DDN.mscorlib.DNObject)
  ['{A6E818F1-1AD7-36F1-8523-7F5C0B1D92EB}']
  { getters & setters } 

    function get_IsParamLiteralRequired: Boolean;
    function get_ProcessBuiltInFunctions: Boolean;

  { methods } 

    ///<summary>
    ///  Calculates one function with given data.
    ///</summary>
    ///  <param name="data">the required data to calculate function such as function name, parameters, ...etc.</param>
    ///<remarks>User should set the calculated value for given data for all functions(including excel native functions)
    ///  that he wants to calculate by himself in this implementation.
    ///</remarks>
    procedure Calculate(data: DNCalculationData);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether this engine needs the literal text of parameter while doing calculation. Default value is false.
    ///</summary>
    ///<remarks>If this custom calculation engine requires the parameter's literal text, more stacks will be required to cache the literal text for parameters and Calculate() method may be called recursively to calculate the parameter's value.
    ///  Commonly the literal text is not needed for calculating formulas and this method should return false for most implementations to get better performance.
    ///</remarks>
    property IsParamLiteralRequired: Boolean read get_IsParamLiteralRequired;
    ///<summary>
    ///  Whether built-in functions that have been supported by the built-in engine should be checked and processed by this implementation.
    ///  Default is false.
    ///  If user needs to change the calculation logic of some built-in functions, this property should be set as true.
    ///</summary>
    property ProcessBuiltInFunctions: Boolean read get_ProcessBuiltInFunctions;
  end;

  TDNAbstractCalculationEngine = class(TDNGenericImport<DNAbstractCalculationEngineClass, DNAbstractCalculationEngine>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAbstractCalculationMonitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B26EE762-8307-588D-9801-CD090C7ED3A6}']
  end;

  ///<summary>
  ///  Monitor for user to track the progress of formula calculation.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Custom monitor to check possibility of StackOverflowException
  ///  public class MyCalculationMonitor : AbstractCalculationMonitor
  ///  {
  ///  public override void BeforeCalculate(int sheetIndex, int rowIndex, int colIndex)
  ///  {
  ///  if(new StackTrace(false).FrameCount &gt; 1000)
  ///  {
  ///  throw new Exception("Stop the formula calculation because risk of StackOverflowException");
  ///  }
  ///  }
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Cells.AbstractCalculationMonitor')]
  DNAbstractCalculationMonitor = interface(DDN.mscorlib.DNObject)
  ['{F1297480-B72D-3335-92B9-02F333CAA266}']
  { getters & setters } 

    function get_OriginalValue: DDN.mscorlib.DNObject;
    function get_ValueChanged: Boolean;
    function get_CalculatedValue: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Implement this method to do business before calculating one cell.
    ///</summary>
    ///  <param name="sheetIndex">Index of the sheet that the cell belongs to.</param>
    ///  <param name="rowIndex">Row index of the cell</param>
    ///  <param name="colIndex">Column index of the cell</param>
    procedure BeforeCalculate(sheetIndex: Int32; rowIndex: Int32; colIndex: Int32);
    ///<summary>
    ///  Implement this method to do business after one cell has been calculated.
    ///</summary>
    ///  <param name="sheetIndex">Index of the sheet that the cell belongs to.</param>
    ///  <param name="rowIndex">Row index of the cell</param>
    ///  <param name="colIndex">Column index of the cell</param>
    procedure AfterCalculate(sheetIndex: Int32; rowIndex: Int32; colIndex: Int32);
    ///<summary>
    ///  Implement this method to do business when calculating formulas with circular references.
    ///</summary>
    ///  <param name="circularCellsData">IEnumerator with CalculationCell items representing cells that
    ///  depend on circular references.</param>
    ///<returns>Whether the formula engine needs to calculate those cells in circular after this call.
    ///  True to let the formula engine continue to do calculation for them.
    ///  False to let the formula engine just mark those cells as Calculated.
    ///</returns>
    ///<remarks>In the implementation user may also set the expected value as calculated result
    ///  for part/all of those cells so the formula engine will not calculate them recursively.
    ///</remarks>
    function OnCircular(circularCellsData: DDN.mscorlib.DNIEnumerator): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the old value of the calculated cell.
    ///  Should be used only in <see cref="M:Aspose.Cells.AbstractCalculationMonitor.BeforeCalculate(System.Int32,System.Int32,System.Int32)" />
    ///  and <see cref="M:Aspose.Cells.AbstractCalculationMonitor.AfterCalculate(System.Int32,System.Int32,System.Int32)" />
    ///  .
    ///</summary>
    property OriginalValue: DDN.mscorlib.DNObject read get_OriginalValue;
    ///<summary>
    ///  Whether the cell's value has been changed after the calculation.
    ///  Should be used only in <see cref="M:Aspose.Cells.AbstractCalculationMonitor.AfterCalculate(System.Int32,System.Int32,System.Int32)" />
    ///  .
    ///</summary>
    property ValueChanged: Boolean read get_ValueChanged;
    ///<summary>
    ///  Gets the newly calculated value of the cell.
    ///  Should be used only in <see cref="M:Aspose.Cells.AbstractCalculationMonitor.AfterCalculate(System.Int32,System.Int32,System.Int32)" />
    ///  .
    ///</summary>
    property CalculatedValue: DDN.mscorlib.DNObject read get_CalculatedValue;
  end;

  TDNAbstractCalculationMonitor = class(TDNGenericImport<DNAbstractCalculationMonitorClass, DNAbstractCalculationMonitor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAutoFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{413B363F-A09E-5FB3-8168-588C9DA27667}']
  end;

  ///<summary>
  ///  Represents autofiltering for the specified worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Creating a file stream containing the Excel file to be opened
  ///  FileStream fstream = new FileStream("C:\\book1.xls", FileMode.Open);
  ///  //Instantiating a Workbook object and open a stream.
  ///  Workbook workbook = new Workbook(fstream);
  ///  //Accessing the first worksheet in the Excel file
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Creating AutoFilter by giving the cells range of the heading row
  ///  worksheet.AutoFilter.Range = "A1:B1";
  ///  //Filtering columns with specified values
  ///  worksheet.AutoFilter.Filter(1, "Bananas");
  ///  //Saving the modified Excel file.
  ///  workbook.Save("C:\\output.xls");
  ///  //Closing the file stream to free all resources
  ///  fstream.Close();
  ///  [Visual Basic]
  ///  'Creating a file stream containing the Excel file to be opened
  ///  Dim fstream As FileStream = New FileStream("C:\\book1.xls", FileMode.Open)
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook(fstream)
  ///  'Accessing the first worksheet in the Excel file
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Creating AutoFilter by giving the cells range of the heading row
  ///  worksheet.AutoFilter.Range = "A1:B1"
  ///  'Filtering columns with specified values
  ///  Worksheet.AutoFilter.Filter(1, "Bananas")
  ///  'Saving the modified Excel file
  ///  workbook.Save("C:\\output.xls")
  ///  'Closing the file stream to free all resources
  ///  fstream.Close()
  ///</code></example>
  [DNTypeName('Aspose.Cells.AutoFilter')]
  DNAutoFilter = interface(DDN.mscorlib.DNObject)
  ['{129FF2F8-EE89-3F74-A5EF-53828411140B}']
  { getters & setters } 

    function get_Sorter: DNDataSorter;
    function get_Range: string;
    procedure set_Range(value: string);
    function get_ShowFilterButton: Boolean;
    procedure set_ShowFilterButton(value: Boolean);
    function get_FilterColumns: DNFilterColumnCollection;

  { methods } 

    ///<summary>
    ///  Sets the range to which the specified AutoFilter applies.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endColumn">End column Index.</param>
    procedure SetRange(row: Int32; startColumn: Int32; endColumn: Int32);
    ///<summary>
    ///  Adds a filter for a filter column.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).
    ///</param>
    ///  <param name="criteria">The specified criteria (a string; for example, "101").
    ///  It only can be null or be one of the cells' value in this column.
    ///</param>
    ///<remarks>
    ///  MS Excel 2007 supports multiple selection in a filter column.
    ///</remarks>
    procedure AddFilter(fieldIndex: Int32; criteria: string);
    ///<summary>
    ///  Adds a date filter.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).
    ///</param>
    ///  <param name="dateTimeGroupingType"><see cref="T:Aspose.Cells.DateTimeGroupingType" />
    ///</param>
    ///  <param name="year">The year.</param>
    ///  <param name="month">The month.</param>
    ///  <param name="day">The day.</param>
    ///  <param name="hour">The hour.</param>
    ///  <param name="minute">The minute.</param>
    ///  <param name="second">The second.</param>
    ///<remarks>
    ///  If DateTimeGroupingType is Year, only the param year effects.
    ///  If DateTiemGroupingType is Month, only the param year and month effect.
    ///</remarks>
    procedure AddDateFilter(fieldIndex: Int32; dateTimeGroupingType: DNDateTimeGroupingType; year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32);
    ///<summary>
    ///  Removes a date filter.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).
    ///</param>
    ///  <param name="dateTimeGroupingType"><see cref="T:Aspose.Cells.DateTimeGroupingType" />
    ///</param>
    ///  <param name="year">The year.</param>
    ///  <param name="month">The month.</param>
    ///  <param name="day">The day.</param>
    ///  <param name="hour">The hour.</param>
    ///  <param name="minute">The minute.</param>
    ///  <param name="second">The second.</param>
    ///<remarks>
    ///  If DateTimeGroupingType is Year, only the param year effects.
    ///  If DateTiemGroupingType is Month, only the param year and month effect.
    ///</remarks>
    procedure RemoveDateFilter(fieldIndex: Int32; dateTimeGroupingType: DNDateTimeGroupingType; year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32);
    ///<summary>
    ///  Removes a filter for a filter column.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).
    ///</param>
    ///  <param name="criteria">The specified criteria (a string; for example, "101").
    ///  It only can be null or be one of the cells' value in this column.
    ///</param>
    procedure RemoveFilter(fieldIndex: Int32; criteria: string); overload;
    ///<summary>
    ///  Filters a list with specified criteria.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).
    ///</param>
    ///  <param name="criteria">The specified criteria (a string; for example, "101"). </param>
    ///<remarks>
    ///  Aspose.Cells will remove all other filter setting on this field as Ms Excel 97-2003.
    ///</remarks>
    procedure Filter(fieldIndex: Int32; criteria: string);
    ///<summary>
    ///  Filter the top 10 item in the list
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="isTop">Indicates whether filter from top or bottom</param>
    ///  <param name="isPercent">Indicates whether the items is percent or count </param>
    ///  <param name="itemCount">The item count</param>
    procedure FilterTop10(fieldIndex: Int32; isTop: Boolean; isPercent: Boolean; itemCount: Int32);
    ///<summary>
    ///  Adds a dynamic filter.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="dynamicFilterType">
    ///  Dynamic filter type.
    ///</param>
    procedure DynamicFilter(fieldIndex: Int32; dynamicFilterType: DNDynamicFilterType);
    ///<summary>
    ///  Adds a font color filter.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="color">The <see cref="T:Aspose.Cells.CellsColor" />
    ///  object.
    ///</param>
    procedure AddFontColorFilter(fieldIndex: Int32; color: DNCellsColor);
    ///<summary>
    ///  Adds a fill color filter.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="pattern">The background pattern type.</param>
    ///  <param name="foregroundColor">The foreground color.</param>
    ///  <param name="backgroundColor">The background color.</param>
    procedure AddFillColorFilter(fieldIndex: Int32; pattern: DNBackgroundType; foregroundColor: DNCellsColor; backgroundColor: DNCellsColor);
    ///<summary>
    ///  Adds an icon filter.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="iconSetType">The icon set type.</param>
    ///  <param name="iconId">The icon id.</param>
    ///<remarks>
    ///  Only supports to add the icon filter.
    ///  Not supports checking which row is visible if the filter is icon filter.
    ///</remarks>
    procedure AddIconFilter(fieldIndex: Int32; iconSetType: DNIconSetType; iconId: Int32);
    ///<summary>
    ///  Match all blank cell in the list.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    procedure MatchBlanks(fieldIndex: Int32);
    ///<summary>
    ///  Match all not blank cell in the list.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    procedure MatchNonBlanks(fieldIndex: Int32);
    ///<summary>
    ///  Filters a list with a custom criteria.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="operatorType1">The filter operator type</param>
    ///  <param name="criteria1">The custom criteria</param>
    procedure Custom(fieldIndex: Int32; operatorType1: DNFilterOperatorType; criteria1: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Filters a list with custom criteria.
    ///</summary>
    ///  <param name="fieldIndex">The integer offset of the field on which you want to base the filter
    ///  (from the left of the list; the leftmost field is field 0).</param>
    ///  <param name="operatorType1">The filter operator type</param>
    ///  <param name="criteria1">The custom criteria</param>
    ///  <param name="isAnd"></param>
    ///  <param name="operatorType2">The filter operator type</param>
    ///  <param name="criteria2">The custom criteria</param>
    procedure Custom(fieldIndex: Int32; operatorType1: DNFilterOperatorType; criteria1: DDN.mscorlib.DNObject; isAnd: Boolean; operatorType2: DNFilterOperatorType; criteria2: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Unhide all rows.
    ///</summary>
    procedure ShowAll;
    ///<summary>
    ///  Remove the specific filter.
    ///</summary>
    ///  <param name="fieldIndex">The specific filter index</param>
    procedure RemoveFilter(fieldIndex: Int32); overload;
    ///<summary>
    ///  Refresh auto filters to hide or unhide the rows.
    ///</summary>
    ///<returns>
    ///  Returns all hidden rows' indexes.
    ///</returns>
    function Refresh: TArray<Int32>; overload;
    ///<summary>
    ///  Gets all hidden rows' indexes.
    ///</summary>
    ///  <param name="hideRows">
    ///  If true, hide the filtered rows.
    ///</param>
    ///<returns>
    ///  Returns all hidden rows indexes.
    ///</returns>
    function Refresh(hideRows: Boolean): TArray<Int32>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the data sorter.
    ///</summary>
    property Sorter: DNDataSorter read get_Sorter;
    ///<summary>
    ///  Represents the range to which the specified AutoFilter applies.
    ///</summary>
    property Range: string read get_Range write set_Range;
    ///<summary>
    ///  Indicates whether the AutoFilter button for this column is visible.
    ///</summary>
    property ShowFilterButton: Boolean read get_ShowFilterButton write set_ShowFilterButton;
    ///<summary>
    ///  Gets the collection of the filter columns.
    ///</summary>
    property FilterColumns: DNFilterColumnCollection read get_FilterColumns;
  end;

  TDNAutoFilter = class(TDNGenericImport<DNAutoFilterClass, DNAutoFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAutoFitterOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CD1F678-4397-5751-ADDB-8034B4757289}']
  { constructors } 

    {class} function init: DNAutoFitterOptions;

  end;

  ///<summary>
  ///  Represents all auto fitter options.
  ///</summary>
  [DNTypeName('Aspose.Cells.AutoFitterOptions')]
  DNAutoFitterOptions = interface(DDN.mscorlib.DNObject)
  ['{F22C6652-4DEB-3062-B97A-FCE99CB09D82}']
  { getters & setters } 

    function get_DefaultEditLanguage: DNDefaultEditLanguage;
    procedure set_DefaultEditLanguage(value: DNDefaultEditLanguage);
    function get_AutoFitMergedCells: Boolean;
    procedure set_AutoFitMergedCells(value: Boolean);
    function get_AutoFitMergedCellsType: DNAutoFitMergedCellsType;
    procedure set_AutoFitMergedCellsType(value: DNAutoFitMergedCellsType);
    function get_OnlyAuto: Boolean;
    procedure set_OnlyAuto(value: Boolean);
    function get_IgnoreHidden: Boolean;
    procedure set_IgnoreHidden(value: Boolean);
    function get_MaxRowHeight: Double;
    procedure set_MaxRowHeight(value: Double);
    function get_AutoFitWrappedTextType: DNAutoFitWrappedTextType;
    procedure set_AutoFitWrappedTextType(value: DNAutoFitWrappedTextType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets default edit language.
    ///</summary>
    ///<remarks>
    ///  It may display/render different layouts for text paragraph when different edit languages is set.
    ///  Default is <see cref="!:DefaultEditLanguage.Auto" />
    ///  .
    ///</remarks>
    property DefaultEditLanguage: DNDefaultEditLanguage read get_DefaultEditLanguage write set_DefaultEditLanguage;
    ///<summary>
    ///  Indicates whether auto fit row height when the cells is merged in a row.
    ///  The default value is false.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use AutoFitterOptions.AutoFitMergedCellsType property, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property AutoFitMergedCells: Boolean read get_AutoFitMergedCells write set_AutoFitMergedCells;
    ///<summary>
    ///  Gets and set the type of auto fitting row height of merged cells.
    ///</summary>
    ///<remarks>
    ///  Excel defaults to ignore merged cells when fitting the row height, so Aspose.Cells works as MS Excel default.
    ///  Please set this type to change the way of auto fitting row height of merged cells.
    ///</remarks>
    property AutoFitMergedCellsType: DNAutoFitMergedCellsType read get_AutoFitMergedCellsType write set_AutoFitMergedCellsType;
    ///<summary>
    ///  Indicates whether only fit the rows which height are not customed.
    ///</summary>
    property OnlyAuto: Boolean read get_OnlyAuto write set_OnlyAuto;
    ///<summary>
    ///  Ignores the hidden rows/columns.
    ///</summary>
    property IgnoreHidden: Boolean read get_IgnoreHidden write set_IgnoreHidden;
    ///<summary>
    ///  Gets and sets the max row height(in unit of Point) when autofitting rows.
    ///</summary>
    property MaxRowHeight: Double read get_MaxRowHeight write set_MaxRowHeight;
    ///<summary>
    ///  Gets and sets the type of auto fitting wrapped text.
    ///</summary>
    property AutoFitWrappedTextType: DNAutoFitWrappedTextType read get_AutoFitWrappedTextType write set_AutoFitWrappedTextType;
  end;

  TDNAutoFitterOptions = class(TDNGenericImport<DNAutoFitterOptionsClass, DNAutoFitterOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNBorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{156C581B-ABEA-5CDE-A9A8-ED5D9B93BE23}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the cell border.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Style style = cell.GetStyle();
  ///  //Set top border style and color
  ///  Border border = style.Borders[BorderType.TopBorder];
  ///  border.LineStyle = CellBorderType.Medium;
  ///  border.Color = Color.Red;
  ///  cell.SetStyle(style);
  ///  [Visual Basic]
  ///  Dim style as Style = cell.GetStyle()
  ///  'Set top border style and color
  ///  Dim border as Border = style.Borders(BorderType.TopBorder)
  ///  border.LineStyle = CellBorderType.Medium
  ///  border.Color = Color.Red
  ///  cell.SetStyle(style);
  ///</code></example>
  [DNTypeName('Aspose.Cells.Border')]
  DNBorder = interface(DDN.mscorlib.DNObject)
  ['{98F782CF-7936-3786-A877-07BBB28D0409}']
  { getters & setters } 

    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ArgbColor: Int32;
    procedure set_ArgbColor(value: Int32);
    function get_LineStyle: DNCellBorderType;
    procedure set_LineStyle(value: DNCellBorderType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the theme color of the border.
    ///</summary>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Gets or sets the <see cref="T:System.Drawing.Color" />
    ///  of the border.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the color with a 32-bit ARGB value.
    ///</summary>
    property ArgbColor: Int32 read get_ArgbColor write set_ArgbColor;
    ///<summary>
    ///  Gets or sets the cell border type.
    ///</summary>
    property LineStyle: DNCellBorderType read get_LineStyle write set_LineStyle;
  end;

  TDNBorder = class(TDNGenericImport<DNBorderClass, DNBorder>) end;

  //-------------namespace: Aspose.Cells----------------
  DNBorderCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34D26A30-E514-52E5-A1D4-958EE0ECE8A6}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Border" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Accessing the "A1" cell from the worksheet
  ///  Cell cell = worksheet.Cells["A1"];
  ///  //Adding some value to the "A1" cell
  ///  cell.PutValue("Visit Aspose!");
  ///  Style style = cell.GetStyle();
  ///  //Setting the line style of the top border
  ///  style.Borders[BorderType.TopBorder].LineStyle = CellBorderType.Thick;
  ///  //Setting the color of the top border
  ///  style.Borders[BorderType.TopBorder].Color = Color.Black;
  ///  //Setting the line style of the bottom border
  ///  style.Borders[BorderType.BottomBorder].LineStyle = CellBorderType.Thick;
  ///  //Setting the color of the bottom border
  ///  style.Borders[BorderType.BottomBorder].Color = Color.Black;
  ///  //Setting the line style of the left border
  ///  style.Borders[BorderType.LeftBorder].LineStyle = CellBorderType.Thick;
  ///  //Setting the color of the left border
  ///  style.Borders[BorderType.LeftBorder].Color = Color.Black;
  ///  //Setting the line style of the right border
  ///  style.Borders[BorderType.RightBorder].LineStyle = CellBorderType.Thick;
  ///  //Setting the color of the right border
  ///  style.Borders[BorderType.RightBorder].Color = Color.Black;
  ///  cell.SetStyle(style);
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Workbook object
  ///  workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Accessing the "A1" cell from the worksheet
  ///  Dim cell As Cell = worksheet.Cells("A1")
  ///  'Adding some value to the "A1" cell
  ///  cell.PutValue("Visit Aspose!")
  ///  Dim style as Style = cell.GetStyle()
  ///  'Setting the line style of the top border
  ///  style.Borders(BorderType.TopBorder).LineStyle = CellBorderType.Thick
  ///  'Setting the color of the top border
  ///  style.Borders(BorderType.TopBorder).Color = Color.Black
  ///  'Setting the line style of the bottom border
  ///  style.Borders(BorderType.BottomBorder).LineStyle = CellBorderType.Thick
  ///  'Setting the color of the bottom border
  ///  style.Borders(BorderType.BottomBorder).Color = Color.Black
  ///  'Setting the line style of the left border
  ///  style.Borders(BorderType.LeftBorder).LineStyle = CellBorderType.Thick
  ///  'Setting the color of the left border
  ///  style.Borders(BorderType.LeftBorder).Color = Color.Black
  ///  'Setting the line style of the right border
  ///  style.Borders(BorderType.RightBorder).LineStyle = CellBorderType.Thick
  ///  'Setting the color of the right border
  ///  style.Borders(BorderType.RightBorder).Color = Color.Black
  ///  cell.SetStyle(style)
  ///  'Saving the Excel file
  ///  workbook.Save("C:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.BorderCollection')]
  DNBorderCollection = interface(DDN.mscorlib.DNObject)
  ['{40E2CFD5-3BB5-3861-A2D8-880A13678BDE}']
  { getters & setters } 

    function get_Item(borderType: DNBorderType): DNBorder;
    function get_DiagonalColor: DDN.System.Drawing.DNColor;
    procedure set_DiagonalColor(value: DDN.System.Drawing.DNColor);
    function get_DiagonalStyle: DNCellBorderType;
    procedure set_DiagonalStyle(value: DNCellBorderType);

  { methods } 

    ///<summary>
    ///  Sets the <see cref="T:System.Drawing.Color" />
    ///  of all borders in the collection.
    ///</summary>
    ///  <param name="color">Borders' <see cref="T:System.Drawing.Color" />
    ///  .</param>
    procedure SetColor(color: DDN.System.Drawing.DNColor);
    ///<summary>
    ///  Sets the style of all borders of the collection.
    ///</summary>
    ///  <param name="style">Borders' style</param>
    procedure SetStyle(style: DNCellBorderType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[borderType: DNBorderType]: DNBorder read get_Item; default;
    ///<summary>
    ///  Gets or sets the <see cref="T:System.Drawing.Color" />
    ///  of Diagonal lines.
    ///</summary>
    property DiagonalColor: DDN.System.Drawing.DNColor read get_DiagonalColor write set_DiagonalColor;
    ///<summary>
    ///  Gets or sets the style of Diagonal lines.
    ///</summary>
    property DiagonalStyle: DNCellBorderType read get_DiagonalStyle write set_DiagonalStyle;
  end;

  TDNBorderCollection = class(TDNGenericImport<DNBorderCollectionClass, DNBorderCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCalculationCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D1E7A5B-B09C-5139-BEBD-A3605841D03D}']
  end;

  ///<summary>
  ///  Represents the calculation relevant data about one cell which is being calculated.
  ///</summary>
  ///<remarks>All objects provided by this class are for "read" purpose only.
  ///  User should not change any data in the Workbook during the formula calculation process,
  ///  Otherwise unexpected result or Exception may be caused.
  ///</remarks>
  [DNTypeName('Aspose.Cells.CalculationCell')]
  DNCalculationCell = interface(DDN.mscorlib.DNObject)
  ['{BB27924D-0E53-36D9-8DBC-509A6D8DDFA9}']
  { getters & setters } 

    function get_Workbook: DNWorkbook;
    function get_Worksheet: DNWorksheet;
    function get_CellRow: Int32;
    function get_CellColumn: Int32;
    function get_Cell: DNCell;

  { methods } 

    ///<summary>
    ///  Sets the calculated value for the cell.
    ///</summary>
    ///<remarks>User can set the calculated result by this method to ignore the automatic calculation for the cell.</remarks>
    procedure SetCalculatedValue(v: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the Workbook object.
    ///</summary>
    property Workbook: DNWorkbook read get_Workbook;
    ///<summary>
    ///  Gets the Worksheet object where the cell is in.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the row index of the cell.
    ///</summary>
    property CellRow: Int32 read get_CellRow;
    ///<summary>
    ///  Gets the column index of the cell.
    ///</summary>
    property CellColumn: Int32 read get_CellColumn;
    ///<summary>
    ///  Gets the Cell object which is being calculated.
    ///</summary>
    property Cell: DNCell read get_Cell;
  end;

  TDNCalculationCell = class(TDNGenericImport<DNCalculationCellClass, DNCalculationCell>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCalculationDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{910601AA-1AAF-5883-8C78-D3EBC4508A33}']
  end;

  ///<summary>
  ///  Represents the required data when calculating one function, such as function name, parameters, ...etc.
  ///</summary>
  ///<remarks>All objects provided by this class are for "read" purpose only.
  ///  User should not change any data in the Workbook during the formula calculation process,
  ///  Otherwise unexpected result or Exception may be caused.</remarks>
  [DNTypeName('Aspose.Cells.CalculationData')]
  DNCalculationData = interface(DDN.mscorlib.DNObject)
  ['{F4137B84-CBCB-34C7-A7D2-FCA79230A971}']
  { getters & setters } 

    function get_CalculatedValue: DDN.mscorlib.DNObject;
    procedure set_CalculatedValue(value: DDN.mscorlib.DNObject);
    function get_Workbook: DNWorkbook;
    function get_Worksheet: DNWorksheet;
    function get_CellRow: Int32;
    function get_CellColumn: Int32;
    function get_Cell: DNCell;
    function get_FunctionName: string;
    function get_ParamCount: Int32;

  { methods } 

    ///<summary>
    ///  Gets the represented value object of the parameter at given index.
    ///</summary>
    ///  <param name="index">index of the parameter(0 based)</param>
    ///<returns>If the parameter is plain value, then returns the plain value.
    ///  If the parameter is reference, then returns ReferredArea object.
    ///  If the parameter references to multiple datasets, then returns array of objects.</returns>
    function GetParamValue(index: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Gets the literal text of the parameter at given index.
    ///</summary>
    ///  <param name="index">index of the parameter(0 based)</param>
    ///<returns>literal text of the parameter</returns>
    function GetParamText(index: Int32): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the calculated value for this function.
    ///</summary>
    ///<remarks>User should set this property in his custom calculation engine for those functions the engine supports,
    ///  and the set value will be returned when getting this property later.
    ///  The set value can be any value of those objects that can be set to a Cell(Cell.Value).
    ///  And it can also be array of such kind of values, or a Range, Name, ReferredArea.
    ///  Getting this property before setting will make the function be calculated by the default calculation engine of Aspose.Cells and the calculated value will be returned.
    ///</remarks>
    property CalculatedValue: DDN.mscorlib.DNObject read get_CalculatedValue write set_CalculatedValue;
    ///<summary>
    ///  Gets the Workbook object where the function is in.
    ///</summary>
    property Workbook: DNWorkbook read get_Workbook;
    ///<summary>
    ///  Gets the Worksheet object where the function is in.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the row index of the cell where the function is in.
    ///</summary>
    property CellRow: Int32 read get_CellRow;
    ///<summary>
    ///  Gets the column index of the cell where the function is in.
    ///</summary>
    property CellColumn: Int32 read get_CellColumn;
    ///<summary>
    ///  Gets the Cell object where the function is in.
    ///</summary>
    property Cell: DNCell read get_Cell;
    ///<summary>
    ///  Gets the function name to be calculated.
    ///</summary>
    property FunctionName: string read get_FunctionName;
    ///<summary>
    ///  Gets the count of parameters
    ///</summary>
    property ParamCount: Int32 read get_ParamCount;
  end;

  TDNCalculationData = class(TDNGenericImport<DNCalculationDataClass, DNCalculationData>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCalculationOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1358E8C-C697-529E-AB16-C453F1BB6CB8}']
  { constructors } 

    {class} function init: DNCalculationOptions;

  end;

  ///<summary>
  ///  Represents options for calculation.
  ///</summary>
  [DNTypeName('Aspose.Cells.CalculationOptions')]
  DNCalculationOptions = interface(DDN.mscorlib.DNObject)
  ['{246947CD-902D-3B14-B7A7-C1F461D870FE}']
  { getters & setters } 

    function get_IgnoreError: Boolean;
    procedure set_IgnoreError(value: Boolean);
    function get_CustomFunction: DNICustomFunction;
    procedure set_CustomFunction(value: DNICustomFunction);
    function get_CustomEngine: DNAbstractCalculationEngine;
    procedure set_CustomEngine(value: DNAbstractCalculationEngine);
    function get_CalculationMonitor: DNAbstractCalculationMonitor;
    procedure set_CalculationMonitor(value: DNAbstractCalculationMonitor);
    function get_CalcStackSize: Int32;
    procedure set_CalcStackSize(value: Int32);
    function get_PrecisionStrategy: DNCalculationPrecisionStrategy;
    procedure set_PrecisionStrategy(value: DNCalculationPrecisionStrategy);
    function get_Recursive: Boolean;
    procedure set_Recursive(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if you need to hide the error in calculating formulas.
    ///  The error may be unsupported function, external links, etc.
    ///</summary>
    property IgnoreError: Boolean read get_IgnoreError write set_IgnoreError;
    ///<summary>
    ///  The custom formula calculation functions to extend the calculation engine.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use CustomEngine property, AbstractCalculationEngine provides more convenient and flexible APIs
    ///  for manipulating custom functions.
    ///  This property will be removed 12 months later since August 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property CustomFunction: DNICustomFunction read get_CustomFunction write set_CustomFunction;
    ///<summary>
    ///  The custom formula calculation engine to extend the default calculation engine of Aspose.Cells.
    ///</summary>
    property CustomEngine: DNAbstractCalculationEngine read get_CustomEngine write set_CustomEngine;
    ///<summary>
    ///  The monitor for user to track the progress of formula calculation.
    ///</summary>
    property CalculationMonitor: DNAbstractCalculationMonitor read get_CalculationMonitor write set_CalculationMonitor;
    ///<summary>
    ///  Specifies the stack size for calculating cells recursively.
    ///  -1 for this property means the calculation will use WorkbookSettings.CalcStackSize of corresponding workbook.
    ///</summary>
    ///<see cref="P:Aspose.Cells.WorkbookSettings.CalcStackSize" />
    property CalcStackSize: Int32 read get_CalcStackSize write set_CalcStackSize;
    ///<summary>
    ///  Specifies the strategy for processing precision of calculation.
    ///</summary>
    property PrecisionStrategy: DNCalculationPrecisionStrategy read get_PrecisionStrategy write set_PrecisionStrategy;
    ///<summary>
    ///  Indicates whether calculate the dependent cells recursively when calculating one cell and it depends on other cells.
    ///</summary>
    property Recursive: Boolean read get_Recursive write set_Recursive;
  end;

  TDNCalculationOptions = class(TDNGenericImport<DNCalculationOptionsClass, DNCalculationOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDC27DD2-0396-5A92-A300-1B781B4B4C73}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a single Workbook cell.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook excel = new Workbook();
  ///  Cells cells = excel.Worksheets[0].Cells;
  ///  //Put a string into a cell
  ///  Cell cell = cells[0, 0];
  ///  cell.PutValue("Hello");
  ///  string first = cell.StringValue;
  ///  //Put an integer into a cell
  ///  cell = cells["B1"];
  ///  cell.PutValue(12);
  ///  int second = cell.IntValue;
  ///  //Put a double into a cell
  ///  cell = cells[0, 2];
  ///  cell.PutValue(-1.234);
  ///  double third = cell.DoubleValue;
  ///  //Put a formula into a cell
  ///  cell = cells["D1"];
  ///  cell.Formula = "=B1 + C1";
  ///  //Put a combined formula: "sum(average(b1,c1), b1)" to cell at b2
  ///  cell = cells["b2"];
  ///  cell.Formula = "=sum(average(b1,c1), b1)";
  ///  //Set style of a cell
  ///  Style style = cell.GetStyle();
  ///  //Set background color
  ///  style.BackgroundColor = Color.Yellow;
  ///  //Set format of a cell
  ///  style.Font.Name = "Courier New";
  ///  style.VerticalAlignment = TextAlignmentType.Top;
  ///  cell.SetStyle(style);
  ///  [Visual Basic]
  ///  Dim excel as Workbook = new Workbook()
  ///  Dim cells as Cells = exce.Worksheets(0).Cells
  ///  'Put a string into a cell
  ///  Dim cell as Cell = cells(0, 0)
  ///  cell.PutValue("Hello")
  ///  Dim first as String = cell.StringValue
  ///  //Put an integer into a cell
  ///  cell = cells("B1")
  ///  cell.PutValue(12)
  ///  Dim second as Integer = cell.IntValue
  ///  //Put a double into a cell
  ///  cell = cells(0, 2)
  ///  cell.PutValue(-1.234)
  ///  Dim third as Double = cell.DoubleValue
  ///  //Put a formula into a cell
  ///  cell = cells("D1")
  ///  cell.Formula = "=B1 + C1"
  ///  //Put a combined formula: "sum(average(b1,c1), b1)" to cell at b2
  ///  cell = cells("b2")
  ///  cell.Formula = "=sum(average(b1,c1), b1)"
  ///  //Set style of a cell
  ///  Dim style as Style = cell.GetStyle()
  ///  //Set background color
  ///  style.BackgroundColor = Color.Yellow
  ///  //Set font of a cell
  ///  style.Font.Name = "Courier New"
  ///  style.VerticalAlignment = TextAlignmentType.Top
  ///  cell.SetStyle(style)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Cell')]
  DNCell = interface(DDN.mscorlib.DNObject)
  ['{E899A3E7-C9D3-30F1-8F3A-5EF77E76137D}']
  { getters & setters } 

    function get_Worksheet: DNWorksheet;
    function get_DateTimeValue: DDN.mscorlib.DNDateTime;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_IsFormula: Boolean;
    function get_Type: DNCellValueType;
    function get_Name: string;
    function get_IsErrorValue: Boolean;
    function get_IsNumericValue: Boolean;
    function get_StringValue: string;
    function get_StringValueWithoutFormat: string;
    function get_NumberCategoryType: DNNumberCategoryType;
    function get_DisplayStringValue: string;
    function get_IntValue: Int32;
    function get_DoubleValue: Double;
    function get_FloatValue: Single;
    function get_BoolValue: Boolean;
    function get_SharedStyleIndex: Int32;
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_FormulaLocal: string;
    procedure set_FormulaLocal(value: string);
    function get_R1C1Formula: string;
    procedure set_R1C1Formula(value: string);
    function get_ContainsExternalLink: Boolean;
    function get_IsArrayHeader: Boolean;
    function get_IsArrayFormula: Boolean;
    function get_IsInArray: Boolean;
    function get_IsSharedFormula: Boolean;
    function get_IsTableFormula: Boolean;
    function get_IsInTable: Boolean;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_IsStyleSet: Boolean;
    function get_IsMerged: Boolean;
    function get_Comment: DNComment;
    function get_HtmlString: string;
    procedure set_HtmlString(value: string);

  { methods } 

    ///<summary>
    ///  Sets a formula to a range of cells.
    ///</summary>
    ///  <param name="sharedFormula">Shared formula.</param>
    ///  <param name="rowNumber">Number of rows to populate the formula.</param>
    ///  <param name="columnNumber">Number of columns to populate the formula.</param>
    ///<remarks></remarks>
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32); overload;
    ///<summary>
    ///  Remove array formula.
    ///</summary>
    ///  <param name="leaveNormalFormula">True represents converting the array formula to normal formula.</param>
    procedure RemoveArrayFormula(leaveNormalFormula: Boolean);
    ///<summary>
    ///  Sets an Add-In formula to the cell.
    ///</summary>
    ///  <param name="addInFileName">Add-In file name.</param>
    ///  <param name="addInFunction">Add-In function name.</param>
    ///<example><code>
    ///  [C#]
    ///  cells["h11"].SetAddInFormula("HRVSTTRK.xla", "=pct_overcut(F3:G3)");
    ///  cells["h12"].SetAddInFormula("HRVSTTRK.xla", "=pct_overcut()");
    ///  [Visual Basic]
    ///  cells("h11").SetAddInFormula("HRVSTTRK.xla", "=pct_overcut(F3:G3)")
    ///  cells("h12").SetAddInFormula("HRVSTTRK.xla", "=pct_overcut()")
    ///</code></example><remarks>
    ///  Add-In file should be placed in the directory or sub-directory of Workbook Add-In library.
    ///  For example, file name can be "Eurotool.xla" or "solver\solver.xla".
    ///  NOTE: This class is now obsolete. Instead,
    ///  please use Cell.Formula/Cell.SetFormula() to set cell formula with the Add-In functions after registering it by WorksheetCollection.RegisterAddInFunction().
    ///  This property will be removed 12 months later since January 2019.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    procedure SetAddInFormula(addInFileName: string; addInFunction: string);
    ///<summary>
    ///  Copies data from a source cell.
    ///</summary>
    ///  <param name="cell">Source <see cref="T:Aspose.Cells.Cell" />
    ///  object.</param>
    procedure Copy(cell: DNCell);
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the cell text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on cell with string value.</remarks>
    ///<example><code>
    ///  [C#]
    ///  excel.Worksheets[0].Cells["A1"].PutValue("Helloworld");
    ///  excel.Worksheets[0].Cells["A1"].Characters(5, 5).Font.IsBold = true;
    ///  excel.Worksheets[0].Cells["A1"].Characters(5, 5).Font.Color = Color.Blue;
    ///  [Visual Basic]
    ///  excel.Worksheets(0).Cells("A1").PutValue("Helloworld")
    ///  excel.Worksheets(0).Cells("A1").Characters(5, 5).Font.IsBold = True
    ///  excel.Worksheets(0).Cells("A1").Characters(5, 5).Font.Color = Color.Blue
    ///</code></example>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Indicates whether the cell string value is a rich text.
    ///</summary>
    function IsRichText: Boolean;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the cell text.
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: TArray<DNFontSetting>; overload;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the cell text.
    ///</summary>
    ///  <param name="flag">Indicates whether applying table style to the cell if the cell is in the table.</param>
    ///<returns>All Characters objects </returns>
    function GetCharacters(flag: Boolean): TArray<DNFontSetting>; overload;
    ///<summary>
    ///  Sets rich text format of the cell.
    ///</summary>
    ///  <param name="characters">All Characters objects.</param>
    procedure SetCharacters(characters: TArray<DNFontSetting>);
    ///<summary>
    ///  Returns a <see cref="T:Aspose.Cells.Range" />
    ///  object which represents a merged range.
    ///</summary>
    ///<returns><see cref="T:Aspose.Cells.Range" />
    ///  object. Null if this cell is not merged.</returns>
    function GetMergedRange: DNRange;
    ///<summary>
    ///  Gets the html string which contains data and some formats in this cell.
    ///</summary>
    ///  <param name="html5">Indicates whether the value is compatible for html5</param>
    ///<returns></returns>
    function GetHtmlString(html5: Boolean): string;
    ///<summary>
    ///  Returns a string represents the current Cell object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    ///<summary>
    ///  Checks whether this object refers to the same cell with another.
    ///</summary>
    ///  <param name="obj">another object</param>
    ///<returns>true if two objects refers to the same cell.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Serves as a hash function for a particular type.
    ///</summary>
    ///<returns>A hash code for current Cell object.</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  Checks whether this object refers to the same cell with another cell object.
    ///</summary>
    ///  <param name="cell">another cell object</param>
    ///<returns>true if two cell objects refers to the same cell.</returns>
    function Equals(cell: DNCell): Boolean; overload;
    ///<summary>
    ///  Get the result of the conditional formatting.
    ///</summary>
    ///<remarks>
    ///  Returns null if no conditional formatting is applied to this cell,
    ///</remarks>
    function GetConditionalFormattingResult: DNConditionalFormattingResult;
    ///<summary>
    ///  Gets the validation applied to this cell.
    ///</summary>
    ///<returns></returns>
    function GetValidation: DNValidation;
    ///<summary>
    ///  Gets the value of validation which applied to this cell.
    ///</summary>
    ///<returns></returns>
    function GetValidationValue: Boolean;
    ///<summary>
    ///  Gets the table which contains this cell.
    ///</summary>
    ///<returns></returns>
    function GetTable: DNListObject;
    ///<summary>
    ///  Calculates the formula of the cell.
    ///</summary>
    ///  <param name="options">Options for calculation</param>
    procedure Calculate(options: DNCalculationOptions); overload;
    ///<summary>
    ///  Calculates the formula of the cell.
    ///</summary>
    ///  <param name="ignoreError">Indicates if hide the error in calculating formulas.
    ///  The error may be unsupported function, external links, etc.</param>
    ///  <param name="customFunction">The custom formula calculation functions to extend the calculation engine.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Calculate(CalculationOptions) method.
    ///  This method will be removed 12 months later since August 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure Calculate(ignoreError: Boolean; customFunction: DNICustomFunction); overload;
    ///<summary>
    ///  Puts an boolean value into the cell.
    ///</summary>
    ///  <param name="boolValue"></param>
    procedure PutValue(boolValue: Boolean); overload;
    ///<summary>
    ///  Puts an integer value into the cell.
    ///</summary>
    ///  <param name="intValue">Input value</param>
    procedure PutValue(intValue: Int32); overload;
    ///<summary>
    ///  Puts a double value into the cell.
    ///</summary>
    ///  <param name="doubleValue">Input value</param>
    procedure PutValue(doubleValue: Double); overload;
    ///<summary>
    ///  Puts a value into the cell, if appropriate the value will be converted to other data type and cell's number format will be reset.
    ///</summary>
    ///  <param name="stringValue">Input value</param>
    ///  <param name="isConverted">True: converted to other data type if appropriate.</param>
    ///  <param name="setStyle">True: set the number format to cell's style when converting to other data type</param>
    procedure PutValue(stringValue: string; isConverted: Boolean; setStyle: Boolean); overload;
    ///<summary>
    ///  Puts a string value into the cell and converts the value to other data type if appropriate.
    ///</summary>
    ///  <param name="stringValue">Input value</param>
    ///  <param name="isConverted">True: converted to other data type if appropriate.</param>
    procedure PutValue(stringValue: string; isConverted: Boolean); overload;
    ///<summary>
    ///  Puts a string value into the cell.
    ///</summary>
    ///  <param name="stringValue">Input value</param>
    procedure PutValue(stringValue: string); overload;
    ///<summary>
    ///  Puts a DateTime value into the cell.
    ///</summary>
    ///  <param name="dateTime">Input value</param>
    procedure PutValue(dateTime: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  Puts an object value into the cell.
    ///</summary>
    ///  <param name="objectValue">input value</param>
    procedure PutValue(objectValue: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Gets the string value by specific formatted strategy.
    ///</summary>
    ///  <param name="formatStrategy">The formatted strategy.</param>
    ///<returns></returns>
    function GetStringValue(formatStrategy: DNCellValueFormatStrategy): string;
    ///<summary>
    ///  Gets the width of the value in unit of pixels.
    ///</summary>
    ///<returns></returns>
    function GetWidthOfValue: Int32;
    ///<summary>
    ///  Gets the height of the value in unit of pixels.
    ///</summary>
    ///<returns></returns>
    function GetHeightOfValue: Int32;
    ///<summary>
    ///  Gets the display style of the cell.
    ///  If the cell is conditional formatted, the display style is not same as the cell.GetStyle().
    ///</summary>
    function GetDisplayStyle: DNStyle; overload;
    ///<summary>
    ///  Gets the display style of the cell.
    ///  If the cell is conditional formatted, the display style is not same as the cell.GetStyle().
    ///</summary>
    ///  <param name="includeMergedBorders">Indicates whether checking borders of the merged cells.
    ///</param>
    function GetDisplayStyle(includeMergedBorders: Boolean): DNStyle; overload;
    ///<summary>
    ///  Gets format conditions which applies to this cell.
    ///</summary>
    ///<returns>Returns <see cref="T:Aspose.Cells.FormatConditionCollection" />
    ///  object</returns>
    function GetFormatConditions: TArray<DNFormatConditionCollection>;
    ///<summary>
    ///  Gets the cell style.
    ///</summary>
    ///<returns>Style object.</returns>
    ///<remarks>To change the style of the cell, please call Cell.SetStyle() method after changing the style.
    ///</remarks>
    function GetStyle: DNStyle; overload;
    ///<summary>
    ///  If checkBorders is true, check whether other cells' borders will effect the style of this cell.
    ///</summary>
    ///  <param name="checkBorders">Check other cells' borders</param>
    ///<returns>Style object.</returns>
    ///<remarks></remarks>
    function GetStyle(checkBorders: Boolean): DNStyle; overload;
    ///<summary>
    ///  Sets the cell style.
    ///</summary>
    ///  <param name="style">The cell style.</param>
    ///<remarks>
    ///  If the border settings are changed, the border of adjust cells will be updated too.
    ///</remarks>
    procedure SetStyle(style: DNStyle); overload;
    ///<summary>
    ///  Apply the cell style.
    ///</summary>
    ///  <param name="style">The cell style.</param>
    ///  <param name="explicitFlag">True, only overwriting formatting which is explicitly set.
    ///</param>
    procedure SetStyle(style: DNStyle; explicitFlag: Boolean); overload;
    ///<summary>
    ///  Apply the cell style.
    ///</summary>
    ///  <param name="style">The cell style.</param>
    ///  <param name="flag">The style flag.</param>
    procedure SetStyle(style: DNStyle; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Set the formula and the value of the formula.
    ///</summary>
    ///  <param name="formula">The formula.</param>
    ///  <param name="value">The value of the formula.</param>
    procedure SetFormula(formula: string; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Get the formula of this cell.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>the formula of this cell.</returns>
    function GetFormula(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Set the formula and the value of the formula.
    ///</summary>
    ///  <param name="formula">The formula.</param>
    ///  <param name="isR1C1">Whether the formula is R1C1 formula.</param>
    ///  <param name="isLocal">Whether the formula is locale formatted.</param>
    ///  <param name="value">The value of the formula.</param>
    ///<remarks>
    ///  NOTE: This class is now obsolete. Instead,
    ///  please use Cell.SetFormula(string,FormulaParseOptions,object).
    ///  This property will be removed 12 months later since December 2019.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    procedure SetFormula(formula: string; isR1C1: Boolean; isLocal: Boolean; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Set the formula and the value of the formula.
    ///</summary>
    ///  <param name="formula">The formula.</param>
    ///  <param name="options">Options for parsing the formula.</param>
    ///  <param name="value">The value of the formula.</param>
    procedure SetFormula(formula: string; options: DNFormulaParseOptions; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Sets an array formula to a range of cells.
    ///</summary>
    ///  <param name="arrayFormula">Array formula.</param>
    ///  <param name="rowNumber">Number of rows to populate result of the array formula.</param>
    ///  <param name="columnNumber">Number of columns to populate result of the array formula.</param>
    ///  <param name="isR1C1">whether the formula is R1C1 formula</param>
    ///  <param name="isLocal">whether the formula is locale formatted</param>
    ///<remarks>
    ///  NOTE: This class is now obsolete. Instead,
    ///  please use Cell.SetArrayFormula(string,int,int,FormulaParseOptions).
    ///  This property will be removed 12 months later since December 2019.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32; isR1C1: Boolean; isLocal: Boolean); overload;
    ///<summary>
    ///  Sets an array formula to a range of cells.
    ///</summary>
    ///  <param name="arrayFormula">Array formula.</param>
    ///  <param name="rowNumber">Number of rows to populate result of the array formula.</param>
    ///  <param name="columnNumber">Number of columns to populate result of the array formula.</param>
    ///  <param name="options">Options for parsing the formula.</param>
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions); overload;
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions; values: TArray<TArray<DDN.mscorlib.DNObject>>); overload;
    ///<summary>
    ///  Sets a formula to a range of cells.
    ///</summary>
    ///  <param name="sharedFormula">Shared formula.</param>
    ///  <param name="rowNumber">Number of rows to populate the formula.</param>
    ///  <param name="columnNumber">Number of columns to populate the formula.</param>
    ///  <param name="isR1C1">whether the formula is R1C1 formula</param>
    ///  <param name="isLocal">whether the formula is locale formatted</param>
    ///<remarks>
    ///  NOTE: This class is now obsolete. Instead,
    ///  please use Cell.SetSharedFormula(string,int,int,FormulaParseOptions).
    ///  This property will be removed 12 months later since December 2019.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32; isR1C1: Boolean; isLocal: Boolean); overload;
    ///<summary>
    ///  Sets a formula to a range of cells.
    ///</summary>
    ///  <param name="sharedFormula">Shared formula.</param>
    ///  <param name="rowNumber">Number of rows to populate the formula.</param>
    ///  <param name="columnNumber">Number of columns to populate the formula.</param>
    ///  <param name="options">Options for parsing the formula.</param>
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions); overload;
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions; values: TArray<TArray<DDN.mscorlib.DNObject>>); overload;
    ///<summary>
    ///  Gets all cells or ranges which this cell's formula depends on.
    ///</summary>
    ///<returns>
    ///  Returns all cells or ranges.
    ///</returns>
    ///<remarks>Returns null if this is not a formula cell.</remarks>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  Cells cells = workbook.Worksheets[0].Cells;
    ///  cells["A1"].Formula = "= B1 + SUM(B1:B10) + [Book1.xls]Sheet1!A1";
    ///  ReferredAreas areas = cells["A1"].GetPrecedents();
    ///  for (int i = 0; i &lt; areas.Count; i++)
    ///  {
    ///  ReferredArea area = areas[i];
    ///  StringBuilder stringBuilder = new StringBuilder();
    ///  if (area.IsExternalLink)
    ///  {
    ///  stringBuilder.Append("[");
    ///  stringBuilder.Append(area.ExternalFileName);
    ///  stringBuilder.Append("]");
    ///  }
    ///  stringBuilder.Append(area.SheetName);
    ///  stringBuilder.Append("!");
    ///  stringBuilder.Append(CellsHelper.CellIndexToName(area.StartRow, area.StartColumn));
    ///  if (area.IsArea)
    ///  {
    ///  stringBuilder.Append(":");
    ///  stringBuilder.Append(CellsHelper.CellIndexToName(area.EndRow, area.EndColumn));
    ///  }
    ///  Console.WriteLine(stringBuilder.ToString());
    ///  }
    ///  workbook.Save(@"C:\Book2.xls");
    ///  [Visual Basic]
    ///  Dim workbook As Workbook = New Workbook()
    ///  Dim cells As Cells = workbook.Worksheets(0).Cells
    ///  cells("A1").Formula = "= B1 + SUM(B1:B10) + [Book1.xls]Sheet1!A1"
    ///  Dim areas As ReferredAreas = cells("A1").GetPrecedents()
    ///  For i As Integer = 0 To areas.Count - 1
    ///  Dim area As ReferredArea = areas(i)
    ///  Dim stringBuilder As StringBuilder = New StringBuilder()
    ///  If (area.IsExternalLink) Then
    ///  stringBuilder.Append("[")
    ///  stringBuilder.Append(area.ExternalFileName)
    ///  stringBuilder.Append("]")
    ///  End If
    ///  stringBuilder.Append(area.SheetName)
    ///  stringBuilder.Append("!")
    ///  stringBuilder.Append(CellsHelper.CellIndexToName(area.StartRow, area.StartColumn))
    ///  If (area.IsArea) Then
    ///  stringBuilder.Append(":")
    ///  stringBuilder.Append(CellsHelper.CellIndexToName(area.EndRow, area.EndColumn))
    ///  End If
    ///  Console.WriteLine(stringBuilder.ToString())
    ///  Next
    ///  workbook.Save("C:\Book2.xls")
    ///</code></example>
    function GetPrecedents: DNReferredAreaCollection;
    ///<summary>
    ///  Get all cells which refer to the specific cell.
    ///</summary>
    ///  <param name="isAll">Indicates whether check other worksheets</param>
    function GetDependents(isAll: Boolean): TArray<DNCell>;
    ///<summary>
    ///  Get all cells which will be updated when this cell is modified.
    ///  This method can only work after calling Workbook.CalculateFormula
    ///  with WorkbookSettings.CreateCalcChain of value true.
    ///</summary>
    function GetLeafs: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Gets the array range if the cell's formula is an array formula.
    ///</summary>
    ///<returns>
    ///  The array range.
    ///</returns>
    ///<remarks>Only applies when the cell's formula is an array formula</remarks>
    function GetArrayRange: DNCellArea;
    ///<summary>
    ///  Sets dynamic array formula and make the formula spill into neighboring cells if possible.
    ///</summary>
    ///  <param name="arrayFormula">the formula expression</param>
    ///  <param name="options">options to parse formula.
    ///  "Parse" option will be ignored and the formula will always be parsed immediately</param>
    ///  <param name="calculate">Whether calculate this dynamic array formula for those cells in the spilled range.</param>
    ///<returns>the range that the formula should spill into.</returns>
    function SetDynamicArrayFormula(arrayFormula: string; options: DNFormulaParseOptions; calculateValue: Boolean): DNCellArea; overload;
    function SetDynamicArrayFormula(arrayFormula: string; options: DNFormulaParseOptions; values: TArray<TArray<DDN.mscorlib.DNObject>>; calculateRange: Boolean; calculateValue: Boolean): DNCellArea; overload;
    ///<summary>
    ///  Sets an array formula(legacy array formula entered via CTRL+SHIFT+ENTER in ms excel) to a range of cells.
    ///</summary>
    ///  <param name="arrayFormula">Array formula.</param>
    ///  <param name="rowNumber">Number of rows to populate result of the array formula.</param>
    ///  <param name="columnNumber">Number of columns to populate result of the array formula.</param>
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32); overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the parent worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the DateTime value contained in the cell.
    ///</summary>
    property DateTimeValue: DDN.mscorlib.DNDateTime read get_DateTimeValue;
    ///<summary>
    ///  Gets row number (zero based) of the cell.
    ///</summary>
    ///<value>Cell row number</value>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets column number (zero based) of the cell.
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Represents if the specified cell contains formula.
    ///</summary>
    property IsFormula: Boolean read get_IsFormula;
    ///<summary>
    ///  Represents cell value type.
    ///</summary>
    property &Type: DNCellValueType read get_Type;
    ///<summary>
    ///  Gets the name of the cell.
    ///</summary>
    ///<remarks>
    ///  A cell name includes its column letter and row number. For example, the name of a cell in row 0 and column 0 is A1.
    ///</remarks>
    property Name: string read get_Name;
    ///<summary>
    ///  Checks if a formula can properly evaluate a result.
    ///</summary>
    ///<remarks>Only applies to formula cell.</remarks>
    property IsErrorValue: Boolean read get_IsErrorValue;
    property IsNumericValue: Boolean read get_IsNumericValue;
    ///<summary>
    ///  Gets the string value contained in the cell. If the type of this cell is string, then return the string value itself.
    ///  For other cell types, the formatted string value (formatted with the specified style of this cell) will be returned.
    ///  The formatted cell value is same with what you can get from excel when copying a cell as text(such as
    ///  copying cell to text editor or exporting to csv).
    ///</summary>
    property StringValue: string read get_StringValue;
    ///<summary>
    ///  Gets cell's value as string without any format.
    ///</summary>
    ///<remarks>
    ///  NOTE: This class is now obsolete. Instead,
    ///  User should get the value object and format it according to the value type and the specific requirement.
    ///  This property will be removed 12 months later since December 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    property StringValueWithoutFormat: string read get_StringValueWithoutFormat;
    ///<summary>
    ///  Represents the category type of this cell's number formatting.
    ///</summary>
    property NumberCategoryType: DNNumberCategoryType read get_NumberCategoryType;
    ///<summary>
    ///  Gets the formatted string value of this cell.
    ///</summary>
    property DisplayStringValue: string read get_DisplayStringValue;
    ///<summary>
    ///  Gets the integer value contained in the cell.
    ///</summary>
    property IntValue: Int32 read get_IntValue;
    ///<summary>
    ///  Gets the double value contained in the cell.
    ///</summary>
    property DoubleValue: Double read get_DoubleValue;
    ///<summary>
    ///  Gets the float value contained in the cell.
    ///</summary>
    property FloatValue: Single read get_FloatValue;
    ///<summary>
    ///  Gets the boolean value contained in the cell.
    ///</summary>
    property BoolValue: Boolean read get_BoolValue;
    ///<summary>
    ///  Gets cell's shared style index in the style pool.
    ///</summary>
    property SharedStyleIndex: Int32 read get_SharedStyleIndex;
    ///<summary>
    ///  Gets or sets a formula of the <see cref="T:Aspose.Cells.Cell" />
    ///  .
    ///</summary>
    ///<remarks>A formula string always begins with an equal sign (=).
    ///  And please always use comma(,) as parameters delimiter, such as "=SUM(A1, E1, H2)".
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  Workbook excel = new Workbook();
    ///  Cells cells = excel.Worksheets[0];
    ///  cells["B6"].Formula = "=SUM(B2:B5, E1) + sheet1!A1";
    ///  [Visual Basic]
    ///  Dim excel As Workbook =  New Workbook()
    ///  Dim cells As Cells =  excel.Worksheets(0)
    ///  cells("B6").Formula = "=SUM(B2:B5, E1) + sheet1!A1"
    ///</code></example>
    property Formula: string read get_Formula write set_Formula;
    ///<summary>
    ///  Get the locale formatted formula of the cell.
    ///</summary>
    property FormulaLocal: string read get_FormulaLocal write set_FormulaLocal;
    ///<summary>
    ///  Gets or sets a R1C1 formula of the <see cref="T:Aspose.Cells.Cell" />
    ///  .
    ///</summary>
    property R1C1Formula: string read get_R1C1Formula write set_R1C1Formula;
    ///<summary>
    ///  Indicates whether this cell contains an external link.
    ///  Only applies when the cell is a formula cell.
    ///</summary>
    property ContainsExternalLink: Boolean read get_ContainsExternalLink;
    ///<summary>
    ///  Indicates the cell's formula is and array formula
    ///  and it is the first cell of the array.
    ///</summary>
    property IsArrayHeader: Boolean read get_IsArrayHeader;
    ///<summary>
    ///  Indicates whether the cell formula is an array formula.
    ///</summary>
    property IsArrayFormula: Boolean read get_IsArrayFormula;
    ///<summary>
    ///  Indicates whether the cell formula is an array formula.
    ///</summary>
    ///<remarks>
    ///  NOTE: This class is now obsolete. Instead,
    ///  please use Cell.IsArrayFormula to check whether the cell formula is an array formula.
    ///  This property will be removed 12 months later since May 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    property IsInArray: Boolean read get_IsInArray;
    ///<summary>
    ///  Indicates whether the cell formula is part of shared formula.
    ///</summary>
    property IsSharedFormula: Boolean read get_IsSharedFormula;
    ///<summary>
    ///  Indicates whether this cell is part of table formula.
    ///</summary>
    property IsTableFormula: Boolean read get_IsTableFormula;
    ///<summary>
    ///  Indicates whether this cell is part of table formula.
    ///</summary>
    ///<remarks>
    ///  NOTE: This class is now obsolete. Instead,
    ///  please use Cell.IsTableFormula to check whether the cell formula is part of table formula.
    ///  This property will be removed 12 months later since May 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.
    ///</remarks>
    property IsInTable: Boolean read get_IsInTable;
    ///<summary>
    ///  Gets the value contained in this cell.
    ///</summary>
    ///<remarks>Possible type:
    ///  <p>null,</p>
    ///  <p>Boolean,</p>
    ///  <p>DateTime,</p>
    ///  <p>Double,</p>
    ///  <p>Integer</p>
    ///  <p>String.</p>
    ///  For int value, it may be returned as an Integer object or a Double object.
    ///  And there is no guarantee that the returned value will be kept as the same type of object always.
    ///</remarks>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Indicates if the cell's style is set. If return false, it means this cell has a default cell format.
    ///</summary>
    property IsStyleSet: Boolean read get_IsStyleSet;
    ///<summary>
    ///  Checks if a cell is part of a merged range or not.
    ///</summary>
    property IsMerged: Boolean read get_IsMerged;
    ///<summary>
    ///  Gets the comment of this cell.
    ///</summary>
    ///<remarks>
    ///  If there is no comment applies to the cell, returns null.
    ///</remarks>
    property Comment: DNComment read get_Comment;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this cell.
    ///</summary>
    property HtmlString: string read get_HtmlString write set_HtmlString;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsClass = interface(DNObjectClass)
  ['{138E5E0F-4D8E-50C3-9889-57E4A0C361B4}']
  end;

  ///<summary>
  ///  Encapsulates a collection of cell relevant objects, such as <see cref="T:Aspose.Cells.Cell" />
  ///  , <see cref="T:Aspose.Cells.Row" />
  ///  , ...etc.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook excel = new Workbook();
  ///  Cells cells = excel.Worksheets[0].Cells;
  ///  //Set default row height
  ///  cells.StandardHeight = 20;
  ///  //Set row height
  ///  cells.SetRowHeight(2, 20.5);
  ///  //Set default colum width
  ///  cells.StandardWidth = 15;
  ///  //Set column width
  ///  cells.SetColumnWidth(3, 12.57);
  ///  //Merge cells
  ///  cells.Merge(5, 4, 2, 2);
  ///  //Import data
  ///  DataTable dt = new DataTable("Products");
  ///  dt.Columns.Add("Product_ID",typeof(Int32));
  ///  dt.Columns.Add("Product_Name",typeof(string));
  ///  dt.Columns.Add("Units_In_Stock",typeof(Int32));
  ///  DataRow dr = dt.NewRow();
  ///  dr[0] = 1;
  ///  dr[1] = "Aniseed Syrup";
  ///  dr[2] = 15;
  ///  dt.Rows.Add(dr);
  ///  dr = dt.NewRow();
  ///  dr[0] = 2;
  ///  dr[1] = "Boston Crab Meat";
  ///  dr[2] = 123;
  ///  dt.Rows.Add(dr);
  ///  cells.ImportDataTable(dt, true, 12, 12, 10, 10);
  ///  //Export data
  ///  DataTable outDataTable = cells.ExportDataTable(12, 12, 10, 10);
  ///  [Visual Basic]
  ///  Dim excel as Workbook = new Workbook()
  ///  Dim cells as Cells = excel.Worksheets(0).Cells
  ///  'Set default row height
  ///  cells.StandardHeight = 20
  ///  'Set row height
  ///  cells.SetRowHeight(2, 20.5)
  ///  'Set default colum width
  ///  cells.StandardWidth = 15
  ///  'Set column width
  ///  cells.SetColumnWidth(3, 12.57)
  ///  'Merge cells
  ///  cells.Merge(5, 4, 2, 2)
  ///  'Import data
  ///  Dim dt as DataTable = new DataTable("Employee")
  ///  dt.Columns.Add("Employee_ID",typeof(Int32))
  ///  dt.Columns.Add("Employee_Name",typeof(string))
  ///  dt.Columns.Add("Gender",typeof(string))
  ///  Dim dr as DataRow = dt.NewRow()
  ///  dr(0) = 1
  ///  dr(1) = "John Smith"
  ///  dr(2) = "Male"
  ///  dt.Rows.Add(dr)
  ///  dr = dt.NewRow()
  ///  dr(0) = 2
  ///  dr(1) = "Mary Miller"
  ///  dr(2) = "Female"
  ///  dt.Rows.Add(dr)
  ///  cells.ImportDataTable(dt, true, 12, 12, 10, 10)
  ///  'Export data
  ///  Dim outDataTable as DataTable = cells.ExportDataTable(12, 12, 10, 10)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Cells')]
  DNCells = interface(DDN.mscorlib.DNIDisposable)
  ['{A0A589A5-EBCD-3D6B-A80E-5472CE8E8BDB}']
  { getters & setters } 

    function get_OdsCellFields: DNOdsCellFieldCollection;
    function get_Count: Int32;
    function get_CountLarge: Int64;
    function get_Item(index: Int32): DNCell; overload;
    function get_Rows: DNRowCollection;
    function get_MergedCells: DDN.mscorlib.DNArrayList;
    function get_Item(row: Int32; column: Int32): DNCell; overload;
    function get_Item(cellName: string): DNCell; overload;
    function get_MultiThreadReading: Boolean;
    procedure set_MultiThreadReading(value: Boolean);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StandardWidthInch: Double;
    procedure set_StandardWidthInch(value: Double);
    function get_StandardWidthPixels: Int32;
    procedure set_StandardWidthPixels(value: Int32);
    function get_StandardWidth: Double;
    procedure set_StandardWidth(value: Double);
    function get_StandardHeight: Double;
    procedure set_StandardHeight(value: Double);
    function get_StandardHeightPixels: Int32;
    procedure set_StandardHeightPixels(value: Int32);
    function get_PreserveString: Boolean;
    procedure set_PreserveString(value: Boolean);
    function get_MinRow: Int32;
    function get_MaxRow: Int32;
    function get_MinColumn: Int32;
    function get_MaxColumn: Int32;
    function get_MinDataRow: Int32;
    function get_MaxDataRow: Int32;
    function get_MinDataColumn: Int32;
    function get_MaxDataColumn: Int32;
    function get_IsDefaultRowHeightMatched: Boolean;
    procedure set_IsDefaultRowHeightMatched(value: Boolean);
    function get_IsDefaultRowHidden: Boolean;
    procedure set_IsDefaultRowHidden(value: Boolean);
    function get_Columns: DNColumnCollection;
    function get_Ranges: DNRangeCollection;
    function get_LastCell: DNCell;
    function get_MaxDisplayRange: DNRange;
    function get_FirstCell: DNCell;

  { methods } 

    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataView,int,int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataView,int,int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataView,int,int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data view will be imported to the first row.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataView,int,int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data view will be imported to the first row.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="rowNumber">Number of rows to be imported.</param>
    ///  <param name="columnNumber">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="numberFormatString">Number format string for cells.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataView,int,int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean; numberFormatString: string): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data view will be imported to the first row.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataView,int,int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  into a worksheet. This method doesn't try to convert text into numeric values.
    ///</summary>
    ///  <param name="dataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    function ImportDataGridAsString(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32;
    ///<summary>
    ///  Imports a grid view to this cells.
    ///</summary>
    ///  <param name="gridView">The grid view object.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="options">import options.</param>
    ///<returns>The row number.</returns>
    function ImportGridView(gridView: DDN.System.Web.DNGridView; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32;
    ///<summary>
    ///  Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    function ImportDataGrid(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    function ImportDataGrid(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="importStyle">Indicates whether importing the cell style.</param>
    ///<returns>Total number of rows imported</returns>
    function ImportDataGrid(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean; importStyle: Boolean): Int32; overload;
    ///<summary>
    ///  Finds the cell with the input string.
    ///</summary>
    ///  <param name="formula">The formula to search for.</param>
    ///  <param name="previousCell">Previous cell with the same formula. This parameter can be set to null if searching from the start.</param>
    ///<returns>Cell object.</returns>
    ///<remarks>Returns null (Nothing) if no cell is found.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.Find(object,Cell,FindOptions) method with LookInType as LookInType.OnlyFormulas
    ///  and LookAtType as LookAtType.EntireContent.
    ///  This member will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function FindFormula(formula: string; previousCell: DNCell): DNCell;
    ///<summary>
    ///  Finds the cell with formula which contains the input string.
    ///</summary>
    ///  <param name="formula">The formula to search for.</param>
    ///  <param name="previousCell">Previous cell with the same formula. This parameter can be set to null if searching from the start.</param>
    ///<returns>Cell object.</returns>
    ///<remarks>Returns null (Nothing) if no cell is found.
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Cells.Find(object,Cell,FindOptions) method with LookInType as LookInType.OnlyFormulas
    ///  and LookAtType as LookAtType.Contains.
    ///  This member will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function FindFormulaContains(formula: string; previousCell: DNCell): DNCell;
    ///<summary>
    ///  Finds the cell containing with the input object.
    ///</summary>
    ///  <param name="what">The object to search for.
    ///  The type should be int,double,DateTime,string,bool.
    ///</param>
    ///  <param name="previousCell">Previous cell with the same object.
    ///  This parameter can be set to null if searching from the start.</param>
    ///<returns>Cell object.</returns>
    ///<remarks>Returns null (Nothing) if no cell is found.</remarks>
    function Find(what: DDN.mscorlib.DNObject; previousCell: DNCell): DNCell; overload;
    ///<summary>
    ///  Finds the cell containing with the input object.
    ///</summary>
    ///  <param name="what">The object to search for.
    ///  The type should be int,double,DateTime,string,bool.
    ///</param>
    ///  <param name="previousCell">Previous cell with the same object.
    ///  This parameter can be set to null if searching from the start.</param>
    ///  <param name="findOptions">Find options</param>
    ///<returns>Cell object.</returns>
    ///<remarks>Returns null (Nothing) if no cell is found.</remarks>
    function Find(what: DDN.mscorlib.DNObject; previousCell: DNCell; findOptions: DNFindOptions): DNCell; overload;
    ///<summary>
    ///  Gets the last cell in this row.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///<returns>Cell object.</returns>
    function EndCellInRow(rowIndex: Int32): DNCell; overload;
    ///<summary>
    ///  Gets the last cell in this column.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///<returns>Cell object.</returns>
    function EndCellInColumn(columnIndex: Int16): DNCell; overload;
    ///<summary>
    ///  Gets the last cell with maximum column index in this range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endColumn">End column index.</param>
    ///<returns>Cell object.</returns>
    function EndCellInColumn(startRow: Int32; endRow: Int32; startColumn: Int16; endColumn: Int16): DNCell; overload;
    ///<summary>
    ///  Gets the last cell with maximum row index in this range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endColumn">End column index.</param>
    ///<returns>Cell object.</returns>
    function EndCellInRow(startRow: Int32; endRow: Int32; startColumn: Int32; endColumn: Int32): DNCell; overload;
    ///<summary>
    ///  Moves the range.
    ///</summary>
    ///  <param name="sourceArea">The range which should be moved.</param>
    ///  <param name="destRow">The dest row.</param>
    ///  <param name="destColumn">The dest column.</param>
    procedure MoveRange(sourceArea: DNCellArea; destRow: Int32; destColumn: Int32);
    ///<summary>
    ///  Insert cut range.
    ///</summary>
    ///  <param name="cutRange">The cut range.</param>
    ///  <param name="row">The row.</param>
    ///  <param name="column">The column.</param>
    ///  <param name="shiftType">The shift type .</param>
    procedure InsertCutCells(cutRange: DNRange; row: Int32; column: Int32; shiftType: DNShiftType);
    ///<summary>
    ///  Inserts a range of cells and shift cells according to the shift option.
    ///</summary>
    ///  <param name="area">Shift area.</param>
    ///  <param name="shiftNumber">Number of rows or columns to be inserted.</param>
    ///  <param name="shiftType">Shift cells option.</param>
    ///  <param name="updateReference">Indicates if update references in other worksheets.</param>
    procedure InsertRange(area: DNCellArea; shiftNumber: Int32; shiftType: DNShiftType; updateReference: Boolean); overload;
    ///<summary>
    ///  Inserts a range of cells and shift cells according to the shift option.
    ///</summary>
    ///  <param name="area">Shift area.</param>
    ///  <param name="shiftType">Shift cells option.</param>
    procedure InsertRange(area: DNCellArea; shiftType: DNShiftType); overload;
    ///<summary>
    ///  Inserts a range of cells and shift cells according to the shift option.
    ///</summary>
    ///  <param name="area">Shift area.</param>
    ///  <param name="shiftNumber">Number of rows or columns to be inserted.</param>
    ///  <param name="shiftType">Shift cells option.</param>
    procedure InsertRange(area: DNCellArea; shiftNumber: Int32; shiftType: DNShiftType); overload;
    ///<summary>
    ///  Deletes a range of cells and shift cells according to the shift option.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="endColumn">End column index.</param>
    ///  <param name="shiftType">Shift cells option.</param>
    procedure DeleteRange(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; shiftType: DNShiftType);
    ///<summary>
    ///  Exports data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a two-dimension array object.
    ///</summary>
    ///  <param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be exported</param>
    ///  <param name="totalColumns">Number of columns to be exported</param>
    ///<returns>Exported cell value array object.</returns>
    function ExportArray(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): TArray<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  Exports cell value type in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a two-dimension array object.
    ///</summary>
    ///  <param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be exported.</param>
    ///  <param name="totalColumns">Number of columns to be exported.</param>
    ///<returns>Exported <see cref="T:Aspose.Cells.CellValueType" />
    ///  array object.</returns>
    function ExportTypeArray(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): TArray<DNCellValueType>;
    ///<summary>
    ///  Imports custom objects.
    ///</summary>
    ///  <param name="list">The custom object</param>
    ///  <param name="propertyNames">The property names.If it is null,we will import all properties of the object.</param>
    ///  <param name="isPropertyNameShown">
    ///  Indicates whether the property name will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="rowNumber">Number of rows to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>The custom objects should be the same type.</remarks>
    function ImportCustomObjects(list: DDN.mscorlib.DNICollection; propertyNames: TArray<string>; isPropertyNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports custom objects.
    ///</summary>
    ///  <param name="list">The custom object</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="options"> The import options.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>The custom objects should be the same type.</remarks>
    function ImportCustomObjects(list: DDN.mscorlib.DNICollection; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    ///<summary>
    ///  Retrieves subtotals setting of the range.
    ///</summary>
    ///  <param name="ca">The range</param>
    ///<returns></returns>
    function RetrieveSubtotalSetting(ca: DNCellArea): DNSubtotalSetting;
    ///<summary>
    ///  Creates subtotals for the range.
    ///</summary>
    ///  <param name="ca">The range</param>
    ///  <param name="groupBy">The field to group by, as a zero-based integer offset</param>
    ///  <param name="function">The subtotal function.</param>
    ///  <param name="totalList">An array of zero-based field offsets, indicating the fields to which the subtotals are added.</param>
    procedure Subtotal(ca: DNCellArea; groupBy: Int32; &function: DNConsolidationFunction; totalList: TArray<Int32>); overload;
    ///<summary>
    ///  Creates subtotals for the range.
    ///</summary>
    ///  <param name="ca">The range</param>
    ///  <param name="groupBy">The field to group by, as a zero-based integer offset</param>
    ///  <param name="function">The subtotal function.</param>
    ///  <param name="totalList">An array of zero-based field offsets, indicating the fields to which the subtotals are added.</param>
    ///  <param name="replace">Indicates whether replace the current subtotals</param>
    ///  <param name="pageBreaks">Indicates whether add page break between groups</param>
    ///  <param name="summaryBelowData">Indicates whether add summary below data.</param>
    procedure Subtotal(ca: DNCellArea; groupBy: Int32; &function: DNConsolidationFunction; totalList: TArray<Int32>; replace: Boolean; pageBreaks: Boolean; summaryBelowData: Boolean); overload;
    ///<summary>
    ///  Removes all formula and replaces with the value of the formula.
    ///</summary>
    procedure RemoveFormulas;
    ///<summary>
    ///  Removes duplicate rows in the sheet.
    ///</summary>
    procedure RemoveDuplicates; overload;
    ///<summary>
    ///  Removes duplicate values in the range.
    ///</summary>
    ///  <param name="startRow">The start row.</param>
    ///  <param name="startColumn">The start column</param>
    ///  <param name="endRow">The end row index.</param>
    ///  <param name="endColumn">The end column index.</param>
    procedure RemoveDuplicates(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    ///<summary>
    ///  Removes duplicate data of the range.
    ///</summary>
    ///  <param name="startRow">The start row.</param>
    ///  <param name="startColumn">The start column</param>
    ///  <param name="endRow">The end row index.</param>
    ///  <param name="endColumn">The end column index.</param>
    ///  <param name="hasHeaders">Indicates whether the range contains headers.</param>
    ///  <param name="columnOffsets">The column offsets.</param>
    procedure RemoveDuplicates(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; hasHeaders: Boolean; columnOffsets: TArray<Int32>); overload;
    ///<summary>
    ///  Converts string data in cells to numeric value if possible.
    ///</summary>
    procedure ConvertStringToNumericValue;
    ///<summary>
    ///  Get all cells which refer to the specific cell.
    ///</summary>
    ///  <param name="isAll">Indicates whether check other worksheets</param>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns></returns>
    function GetDependents(isAll: Boolean; row: Int32; column: Int32): TArray<DNCell>;
    ///<summary>
    ///  Get the style of given cell.
    ///</summary>
    ///  <param name="row">row index</param>
    ///  <param name="column">column</param>
    ///<returns>the style of given cell.</returns>
    function GetCellStyle(row: Int32; column: Int32): DNStyle;
    ///<summary>
    ///  Merges a specified range of cells into a single cell.
    ///</summary>
    ///  <param name="firstRow">First row of this range(zero based)</param>
    ///  <param name="firstColumn">First column of this range(zero based)</param>
    ///  <param name="totalRows">Number of rows(one based)</param>
    ///  <param name="totalColumns">Number of columns(one based)</param>
    ///  <param name="checkConflict">Indicates whether check the merged cells intersects other merged cells</param>
    ///  <param name="mergeConflict">Merge conflict merged ranges.</param>
    ///<remarks>
    ///  Reference the merged cell via the address of the upper-left cell in the range.
    ///  If mergeConflict is true and the merged range conflicts with other merged cells,
    ///  other merged cells will be  automatically removed.
    ///</remarks>
    procedure Merge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; checkConflict: Boolean; mergeConflict: Boolean); overload;
    ///<summary>
    ///  Unmerges a specified range of merged cells.
    ///</summary>
    ///  <param name="firstRow">First row of this range(zero based)</param>
    ///  <param name="firstColumn">First column of this range(zero based)</param>
    ///  <param name="totalRows">Number of rows(one based)</param>
    ///  <param name="totalColumns">Number of columns(one based)</param>
    procedure UnMerge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32);
    ///<summary>
    ///  Clears all merged ranges.
    ///</summary>
    procedure ClearMergedCells;
    ///<summary>
    ///  Hides a row.
    ///</summary>
    ///  <param name="row">Row index.</param>
    procedure HideRow(row: Int32);
    ///<summary>
    ///  Unhides a row.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="height">Row height. The row's height will be changed only when the row is hidden and given height value is positive.</param>
    procedure UnhideRow(row: Int32; height: Double);
    ///<summary>
    ///  Hides multiple rows.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="totalRows">The row number.</param>
    procedure HideRows(row: Int32; totalRows: Int32);
    ///<summary>
    ///  Unhides the hidden rows.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="totalRows">The row number.</param>
    ///  <param name="height">Row height. The row's height will be changed only when the row is hidden and given height value is positive.</param>
    procedure UnhideRows(row: Int32; totalRows: Int32; height: Double);
    ///<summary>
    ///  Sets row height in unit of pixels.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="pixels">Number of pixels.</param>
    procedure SetRowHeightPixel(row: Int32; pixels: Int32);
    ///<summary>
    ///  Sets row height in unit of inches.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="inches">Number of inches. It should be between 0 and 409.5/72.</param>
    procedure SetRowHeightInch(row: Int32; inches: Double);
    ///<summary>
    ///  Sets the height of the specified row.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="height">Height of row.In unit of point It should be between 0 and 409.5.</param>
    procedure SetRowHeight(row: Int32; height: Double);
    ///<summary>
    ///  Hides a column.
    ///</summary>
    ///  <param name="column">Column index.</param>
    procedure HideColumn(column: Int32);
    ///<summary>
    ///  Unhides a column
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///  <param name="width">Column width.</param>
    procedure UnhideColumn(column: Int32; width: Double);
    ///<summary>
    ///  Hide multiple columns.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///  <param name="totalColumns">Column number.</param>
    procedure HideColumns(column: Int32; totalColumns: Int32);
    ///<summary>
    ///  Unhide multiple columns.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///  <param name="totalColumns">Column number</param>
    ///  <param name="width">Column width.</param>
    ///<remarks>
    ///  Only applies the column width to the hidden columns.
    ///</remarks>
    procedure UnhideColumns(column: Int32; totalColumns: Int32; width: Double);
    ///<summary>
    ///  Gets the height of a specified row.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>Height of row</returns>
    function GetRowHeight(row: Int32): Double;
    ///<summary>
    ///  Gets the height of a specified row.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>Height of row</returns>
    function GetViewRowHeight(row: Int32): Double;
    ///<summary>
    ///  Gets the height of a specified row in unit of pixel.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>Height of row</returns>
    function GetRowHeightPixel(row: Int32): Int32;
    ///<summary>
    ///  Gets the height of a specified row in unit of inches.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>Height of row</returns>
    function GetRowHeightInch(row: Int32): Double;
    ///<summary>
    ///  Gets the height of a specified row in unit of inches.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>Height of row</returns>
    function GetViewRowHeightInch(row: Int32): Double;
    ///<summary>
    ///  Sets column width in unit of pixels in normal view.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///  <param name="pixels">Number of pixels.</param>
    procedure SetColumnWidthPixel(column: Int32; pixels: Int32);
    ///<summary>
    ///  Sets column width in unit of inches  in normal view.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///  <param name="inches">Number of inches.</param>
    procedure SetColumnWidthInch(column: Int32; inches: Double);
    ///<summary>
    ///  Sets the width of the specified column in normal view.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///  <param name="width">Width of column.Column width must be between 0 and 255.</param>
    ///<remarks>To hide a column, sets column width to zero.</remarks>
    procedure SetColumnWidth(column: Int32; width: Double);
    ///<summary>
    ///  Gets the width of the specified column in normal view, in units of pixel.
    ///</summary>
    ///  <param name="column">Column index</param>
    ///<returns>Width of column in normal view.</returns>
    function GetColumnWidthPixel(column: Int32): Int32;
    ///<summary>
    ///  Gets the width of the specified column in normal view, in units of inches.
    ///</summary>
    ///  <param name="column">Column index</param>
    ///<returns>Width of column</returns>
    function GetColumnWidthInch(column: Int32): Double;
    ///<summary>
    ///  Gets the width of the specified column in normal view
    ///</summary>
    ///  <param name="column">Column index</param>
    ///<returns>Width of column</returns>
    function GetColumnWidth(column: Int32): Double;
    ///<summary>
    ///  Get the width in different view type.
    ///</summary>
    ///  <param name="column">The column index.</param>
    ///<returns>the column width in unit of pixels</returns>
    function GetViewColumnWidthPixel(column: Int32): Int32;
    ///<summary>
    ///  Sets the width of the column in different view.
    ///</summary>
    ///  <param name="column">The column index.</param>
    ///  <param name="pixels">The width in unit of pixels.</param>
    ///<remarks>
    ///  If the current view type is <see cref="F:Aspose.Cells.ViewType.PageLayoutView" />
    ///  , the column's width is same as printed width.
    ///</remarks>
    procedure SetViewColumnWidthPixel(column: Int32; pixels: Int32);
    ///<summary>
    ///  Gets the last row index of cell which contains data in the specified column.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///<returns>last row index.</returns>
    function GetLastDataRow(column: Int32): Int32;
    ///<summary>
    ///  Applies formats for a whole column.
    ///</summary>
    ///  <param name="column">The column index.</param>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    procedure ApplyColumnStyle(column: Int32; style: DNStyle; flag: DNStyleFlag);
    ///<summary>
    ///  Applies formats for a whole row.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    procedure ApplyRowStyle(row: Int32; style: DNStyle; flag: DNStyleFlag);
    ///<summary>
    ///  Applies formats for a whole worksheet.
    ///</summary>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    ///<summary>
    ///  Copies data and formats of a whole column.
    ///</summary>
    ///  <param name="sourceCells0">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceColumnIndex">Source column index.</param>
    ///  <param name="destinationColumnIndex">Destination column index.</param>
    ///  <param name="columnNumber">The copied column number.</param>
    ///  <param name="pasteOptions">the options of pasting.</param>
    procedure CopyColumns(sourceCells0: DNCells; sourceColumnIndex: Int32; destinationColumnIndex: Int32; columnNumber: Int32; pasteOptions: DNPasteOptions); overload;
    ///<summary>
    ///  Copies data and formats of a whole column.
    ///</summary>
    ///  <param name="sourceCells">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceColumnIndex">Source column index.</param>
    ///  <param name="destinationColumnIndex">Destination column index.</param>
    procedure CopyColumn(sourceCells: DNCells; sourceColumnIndex: Int32; destinationColumnIndex: Int32);
    ///<summary>
    ///  Copies data and formats of a whole column.
    ///</summary>
    ///  <param name="sourceCells0">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceColumnIndex">Source column index.</param>
    ///  <param name="destinationColumnIndex">Destination column index.</param>
    ///  <param name="columnNumber">The copied column number.</param>
    procedure CopyColumns(sourceCells0: DNCells; sourceColumnIndex: Int32; destinationColumnIndex: Int32; columnNumber: Int32); overload;
    ///<summary>
    ///  Copies data and formats of the whole columns.
    ///</summary>
    ///  <param name="sourceCells">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceColumnIndex">Source column index.</param>
    ///  <param name="sourceTotalColumns">The number of the source columns.</param>
    ///  <param name="destinationColumnIndex">Destination column index.</param>
    ///  <param name="destinationTotalColumns">The number of the destination columns.</param>
    procedure CopyColumns(sourceCells: DNCells; sourceColumnIndex: Int32; sourceTotalColumns: Int32; destinationColumnIndex: Int32; destinationTotalColumns: Int32); overload;
    ///<summary>
    ///  Copies data and formats of a whole row.
    ///</summary>
    ///  <param name="sourceCells">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceRowIndex">Source row index.</param>
    ///  <param name="destinationRowIndex">Destination row index.</param>
    procedure CopyRow(sourceCells: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32);
    ///<summary>
    ///  Copies data and formats of some whole rows.
    ///</summary>
    ///  <param name="sourceCells">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceRowIndex">Source row index.</param>
    ///  <param name="destinationRowIndex">Destination row index.</param>
    ///  <param name="rowNumber">The copied row number.</param>
    procedure CopyRows(sourceCells: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32; rowNumber: Int32); overload;
    ///<summary>
    ///  Copies data and formats of some whole rows.
    ///</summary>
    ///  <param name="sourceCells0">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceRowIndex">Source row index.</param>
    ///  <param name="destinationRowIndex">Destination row index.</param>
    ///  <param name="rowNumber">The copied row number.</param>
    ///  <param name="copyOptions">The copy options.</param>
    procedure CopyRows(sourceCells0: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32; rowNumber: Int32; copyOptions: DNCopyOptions); overload;
    ///<summary>
    ///  Copies data and formats of some whole rows.
    ///</summary>
    ///  <param name="sourceCells0">Source Cells object contains data and formats to copy.</param>
    ///  <param name="sourceRowIndex">Source row index.</param>
    ///  <param name="destinationRowIndex">Destination row index.</param>
    ///  <param name="rowNumber">The copied row number.</param>
    ///  <param name="copyOptions">The copy options.</param>
    ///  <param name="pasteOptions">the options of pasting.</param>
    procedure CopyRows(sourceCells0: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32; rowNumber: Int32; copyOptions: DNCopyOptions; pasteOptions: DNPasteOptions); overload;
    ///<summary>
    ///  Gets the outline level (zero-based) of the row.
    ///</summary>
    ///  <param name="rowIndex">The row index.</param>
    ///<returns>The outline level (zero-based) of the row.</returns>
    ///<remarks>If the row is not grouped, returns zero.</remarks>
    function GetGroupedRowOutlineLevel(rowIndex: Int32): Int32;
    ///<summary>
    ///  Gets the outline level (zero-based) of the column.
    ///</summary>
    ///  <param name="columnIndex">The column index</param>
    ///<returns>The outline level of the column</returns>
    ///<remarks>If the column is not grouped, returns zero.</remarks>
    function GetGroupedColumnOutlineLevel(columnIndex: Int32): Int32;
    ///<summary>
    ///  Gets the max grouped column outline level (zero-based).
    ///</summary>
    ///<returns> The max grouped column outline level (zero-based)</returns>
    function GetMaxGroupedColumnOutlineLevel: Int32;
    ///<summary>
    ///  Gets the max grouped row outline level (zero-based).
    ///</summary>
    ///<returns> The max grouped row outline level (zero-based)</returns>
    function GetMaxGroupedRowOutlineLevel: Int32;
    ///<summary>
    ///  Uncollapses the grouped rows/columns.
    ///</summary>
    ///  <param name="isVertical">True, uncollapses the grouped rows.</param>
    ///  <param name="index">The row/column index</param>
    procedure ShowGroupDetail(isVertical: Boolean; index: Int32);
    ///<summary>
    ///  Collapses the grouped rows/columns.
    ///</summary>
    ///  <param name="isVertical">True, collapse the grouped rows.</param>
    ///  <param name="index">The row/column index</param>
    procedure HideGroupDetail(isVertical: Boolean; index: Int32);
    ///<summary>
    ///  Ungroups columns.
    ///</summary>
    ///  <param name="firstIndex">The first column index to be ungrouped.</param>
    ///  <param name="lastIndex">The last column index to be ungrouped.</param>
    procedure UngroupColumns(firstIndex: Int32; lastIndex: Int32);
    ///<summary>
    ///  Groups columns.
    ///</summary>
    ///  <param name="firstIndex">The first column index to be grouped.</param>
    ///  <param name="lastIndex">The last column index to be grouped.</param>
    procedure GroupColumns(firstIndex: Int32; lastIndex: Int32); overload;
    ///<summary>
    ///  Groups columns.
    ///</summary>
    ///  <param name="firstIndex">The first column index to be grouped.</param>
    ///  <param name="lastIndex">The last column index to be grouped.</param>
    ///  <param name="isHidden">Specifies if the grouped columns are hidden.</param>
    procedure GroupColumns(firstIndex: Int32; lastIndex: Int32; isHidden: Boolean); overload;
    ///<summary>
    ///  Ungroups rows.
    ///</summary>
    ///  <param name="firstIndex">The first row index to be ungrouped.</param>
    ///  <param name="lastIndex">The last row index to be ungrouped.</param>
    ///  <param name="isAll">True, removes all grouped info.Otherwise, remove the outer group info.</param>
    procedure UngroupRows(firstIndex: Int32; lastIndex: Int32; isAll: Boolean); overload;
    ///<summary>
    ///  Ungroups rows.
    ///</summary>
    ///  <param name="firstIndex">The first row index to be ungrouped.</param>
    ///  <param name="lastIndex">The last row index to be ungrouped.</param>
    ///<remarks>
    ///  Only removes outer group info.
    ///</remarks>
    procedure UngroupRows(firstIndex: Int32; lastIndex: Int32); overload;
    ///<summary>
    ///  Groups rows.
    ///</summary>
    ///  <param name="firstIndex">The first row index to be grouped.</param>
    ///  <param name="lastIndex">The last row index to be grouped.</param>
    ///  <param name="isHidden">Specifies if the grouped columns are hidden.</param>
    procedure GroupRows(firstIndex: Int32; lastIndex: Int32; isHidden: Boolean); overload;
    ///<summary>
    ///  Groups rows.
    ///</summary>
    ///  <param name="firstIndex">The first row index to be grouped.</param>
    ///  <param name="lastIndex">The last row index to be grouped.</param>
    procedure GroupRows(firstIndex: Int32; lastIndex: Int32); overload;
    ///<summary>
    ///  Deletes a column.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///  <param name="updateReference">Indicates if update references in other worksheets.</param>
    procedure DeleteColumn(columnIndex: Int32; updateReference: Boolean); overload;
    ///<summary>
    ///  Deletes a column.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    procedure DeleteColumn(columnIndex: Int32); overload;
    ///<summary>
    ///  Deletes several columns.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///  <param name="totalColumns">Number of columns to be deleted.</param>
    ///  <param name="updateReference">Indicates if update references in other worksheets.</param>
    procedure DeleteColumns(columnIndex: Int32; totalColumns: Int32; updateReference: Boolean);
    ///<summary>
    ///  Check whether the range could be deleted.
    ///</summary>
    ///  <param name="startRow">The start row index of the range.</param>
    ///  <param name="startColumn">The start column index of the range.</param>
    ///  <param name="totalRows">The number of the rows in the range.</param>
    ///  <param name="totalColumns">The number of the columns in the range.</param>
    ///<returns></returns>
    function IsDeletingRangeEnabled(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32): Boolean;
    ///<summary>
    ///  Deletes several rows.
    ///</summary>
    ///  <param name="rowIndex">The first row index to be deleted.</param>
    ///  <param name="totalRows">Number of rows to be deleted.</param>
    ///<remarks>
    ///  If the deleted range contains the top part(not whole) of the table(ListObject),
    ///  the ranged could not be deleted and nothing will be done.It works as MS Excel.
    ///</remarks>
    function DeleteRows(rowIndex: Int32; totalRows: Int32): Boolean; overload;
    ///<summary>
    ///  Deletes a row.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    procedure DeleteRow(rowIndex: Int32);
    ///<summary>
    ///  Deletes multiple rows in the worksheet.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///  <param name="totalRows">Number of rows to be deleted.</param>
    ///  <param name="updateReference">Indicates if update references in other worksheets.</param>
    ///<returns></returns>
    function DeleteRows(rowIndex: Int32; totalRows: Int32; updateReference: Boolean): Boolean; overload;
    ///<summary>
    ///  Delete all blank columns which do not contain any data.
    ///</summary>
    procedure DeleteBlankColumns; overload;
    ///<summary>
    ///  Delete all blank columns which do not contain any data.
    ///</summary>
    ///  <param name="options">The options of deleting range.</param>
    procedure DeleteBlankColumns(options: DNDeleteOptions); overload;
    ///<summary>
    ///  Checks whether given column is blank(does not contain any data).
    ///</summary>
    ///  <param name="columnIndex">the column index</param>
    ///<returns>true if given column does not contain any data</returns>
    function IsBlankColumn(columnIndex: Int32): Boolean;
    ///<summary>
    ///  Delete all blank rows which do not contain any data.
    ///</summary>
    procedure DeleteBlankRows; overload;
    ///<summary>
    ///  Delete all blank rows which do not contain any data.
    ///</summary>
    ///  <param name="options">The options of deleting range.</param>
    procedure DeleteBlankRows(options: DNDeleteOptions); overload;
    ///<summary>
    ///  Inserts some columns into the worksheet.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///  <param name="totalColumns">The number of columns.</param>
    procedure InsertColumns(columnIndex: Int32; totalColumns: Int32); overload;
    ///<summary>
    ///  Inserts some columns into the worksheet.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///  <param name="totalColumns">The number of columns.</param>
    ///  <param name="updateReference">Indicates if references in other worksheets will be updated.</param>
    procedure InsertColumns(columnIndex: Int32; totalColumns: Int32; updateReference: Boolean); overload;
    ///<summary>
    ///  Inserts a new column into the worksheet.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///  <param name="updateReference">Indicates if references in other worksheets will be updated.</param>
    procedure InsertColumn(columnIndex: Int32; updateReference: Boolean); overload;
    ///<summary>
    ///  Inserts a new column into the worksheet.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    procedure InsertColumn(columnIndex: Int32); overload;
    ///<summary>
    ///  Inserts multiple rows into the worksheet.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///  <param name="totalRows">Number of rows to be inserted.</param>
    ///  <param name="updateReference">Indicates if references in other worksheets will be updated.</param>
    procedure InsertRows(rowIndex: Int32; totalRows: Int32; updateReference: Boolean); overload;
    ///<summary>
    ///  Inserts multiple rows into the worksheet.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///  <param name="totalRows">Number of rows to be inserted.</param>
    ///  <param name="options">Indicates if references in other worksheets will be updated.</param>
    procedure InsertRows(rowIndex: Int32; totalRows: Int32; options: DNInsertOptions); overload;
    ///<summary>
    ///  Inserts multiple rows into the worksheet.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///  <param name="totalRows">Number of rows to be inserted.</param>
    procedure InsertRows(rowIndex: Int32; totalRows: Int32); overload;
    ///<summary>
    ///  Inserts a new row into the worksheet.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    procedure InsertRow(rowIndex: Int32);
    ///<summary>
    ///  Clears contents and formatting of a range.
    ///</summary>
    ///  <param name="range">Range to be cleared.</param>
    procedure ClearRange(range: DNCellArea); overload;
    ///<summary>
    ///  Clears contents and formatting of a range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="endColumn">End column index.</param>
    procedure ClearRange(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    ///<summary>
    ///  Clears contents of a range.
    ///</summary>
    ///  <param name="range">Range to be cleared.</param>
    procedure ClearContents(range: DNCellArea); overload;
    ///<summary>
    ///  Clears contents of a range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="endColumn">End column index.</param>
    procedure ClearContents(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    ///<summary>
    ///  Clears formatting of a range.
    ///</summary>
    ///  <param name="range">Range to be cleared.</param>
    procedure ClearFormats(range: DNCellArea); overload;
    ///<summary>
    ///  Clears formatting of a range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="endColumn">End column index.</param>
    procedure ClearFormats(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    ///<summary>
    ///  Link to a xml map.
    ///</summary>
    ///  <param name="mapName">name of xml map</param>
    ///  <param name="row">row of the destination cell</param>
    ///  <param name="column">column of the destination cell</param>
    ///  <param name="path">path of xml element in xml map</param>
    ///  e.g. A xml map element structure:
    ///  -RootElement
    ///  |-Attribute1
    ///  |-SubElement
    ///  |-Attribute2
    ///  |-Attribute3
    ///  To link "Attribute1", path is "/RootElement/Attribute1"
    ///  To link "Attribute2", path is "/RootElement/SubElement/Attribute2"
    ///  To link whole "SubElement", path is "/RootElement/SubElement"
    procedure LinkToXmlMap(mapName: string; row: Int32; column: Int32; path: string);
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///<returns>Total number of rows imported</returns>
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32): Int32; overload;
    ///<summary>
    ///  Performs application-defined tasks associated with freeing, releasing, or
    ///  resetting unmanaged resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets the cells enumerator.
    ///</summary>
    ///<returns>The cells enumerator</returns>
    ///<remarks>When traversing elements by the returned Enumerator, the cells collection
    ///  should not be modified(such as operations that will cause new Cell/Row be instantiated or existing Cell/Row be deleted).
    ///  Otherwise the enumerator may not be able to traverse all cells correctly(some elements may be traversed repeatedly or skipped).</remarks>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Gets the rows enumerator.
    ///</summary>
    ///<returns>The rows enumerator.</returns>
    function GetRowEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Cell" />
    ///  element or null at the specified cell row index and column index.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///  <param name="column">Column index</param>
    ///<returns>Return Cell object if a Cell object exists.
    ///  Return null if the cell does not exist.
    ///</returns>
    function GetCell(row: Int32; column: Int32): DNCell;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Row" />
    ///  element at the specified cell row index.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>
    ///  If the row object does exist return Row object, otherwise return null.
    ///</returns>
    function GetRow(row: Int32): DNRow;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Cell" />
    ///  element or null at the specified cell row index and column index.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///  <param name="column">Column index</param>
    ///<returns>Return Cell object if a Cell object exists.
    ///  Return null if the cell does not exist.
    ///</returns>
    function CheckCell(row: Int32; column: Int32): DNCell;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Row" />
    ///  element or at the specified cell row index.
    ///</summary>
    ///  <param name="row">Row index</param>
    ///<returns>
    ///  If the row object does exist return Row object, otherwise return null.
    ///</returns>
    function CheckRow(row: Int32): DNRow;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Column" />
    ///  element or null at the specified column index.
    ///</summary>
    ///  <param name="columnIndex">The column index.</param>
    ///<returns>The Column object.</returns>
    function CheckColumn(columnIndex: Int32): DNColumn;
    ///<summary>
    ///  Checks whether a row at given index is hidden.
    ///</summary>
    ///  <param name="rowIndex">row index</param>
    ///<returns>true if the row is hidden</returns>
    function IsRowHidden(rowIndex: Int32): Boolean;
    ///<summary>
    ///  Checks whether a column at given index is hidden.
    ///</summary>
    ///  <param name="columnIndex">column index</param>
    ///<returns>true if the column is hidden.</returns>
    function IsColumnHidden(columnIndex: Int32): Boolean;
    ///<summary>
    ///  Adds a range object reference to cells
    ///</summary>
    ///  <param name="rangeObject">The range object will be contained in the cells</param>
    procedure AddRange(rangeObject: DNRange);
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.Range" />
    ///  object from a range of cells.
    ///</summary>
    ///  <param name="upperLeftCell">Upper left cell name.</param>
    ///  <param name="lowerRightCell">Lower right cell name.</param>
    ///<returns>A <see cref="T:Aspose.Cells.Range" />
    ///  object</returns>
    function CreateRange(upperLeftCell: string; lowerRightCell: string): DNRange; overload;
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.Range" />
    ///  object from a range of cells.
    ///</summary>
    ///  <param name="firstRow">First row of this range</param>
    ///  <param name="firstColumn">First column of this range</param>
    ///  <param name="totalRows">Number of rows</param>
    ///  <param name="totalColumns">Number of columns</param>
    ///<returns>A <see cref="T:Aspose.Cells.Range" />
    ///  object</returns>
    function CreateRange(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): DNRange; overload;
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.Range" />
    ///  object from an address of the range.
    ///</summary>
    ///  <param name="address">The address of the range.</param>
    ///<returns>A <see cref="T:Aspose.Cells.Range" />
    ///  object</returns>
    function CreateRange(address: string): DNRange; overload;
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.Range" />
    ///  object from rows of cells or columns of cells.
    ///</summary>
    ///  <param name="firstIndex">First row index or first column index, zero based.</param>
    ///  <param name="number">Total number of rows or columns, one based.</param>
    ///  <param name="isVertical">True - Range created from columns of cells. False - Range created from rows of cells. </param>
    ///<returns>A <see cref="T:Aspose.Cells.Range" />
    ///  object.</returns>
    function CreateRange(firstIndex: Int32; number: Int32; isVertical: Boolean): DNRange; overload;
    ///<summary>
    ///  Clears all cell and row objects.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Exports data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  string designerFile = MapPath("Designer") + "\\List.xls";
    ///  Workbook excel = new Workbook(designerFile);
    ///  Worksheet sheet = excel.Worksheets[0];
    ///  DataTable dt = sheet.Cells.ExportDataTable(6, 1, 69, 4);
    ///  this.DataGrid1.DataSource = dt;
    ///  this.DataGrid1.DataBind();
    ///  [Visual Basic]
    ///  Dim designerFile As String = MapPath("Designer") + "\List.xls"
    ///  Dim excel As excel = New excel(designerFile)
    ///  Dim sheet As Worksheet = excel.Worksheets(0)
    ///  Dim dt As DataTable = sheet.Cells.ExportDataTable(6, 1, 69, 4)
    ///  Me.DataGrid1.DataSource = dt
    ///  Me.DataGrid1.DataBind()
    ///</code></example><param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    ///<remarks>
    ///  If you use this method to export a block of data, please be sure that the data in a column
    ///  should be the same data type. Otherwise, use the <see cref="M:Aspose.Cells.Cells.ExportDataTableAsString(System.Int32,System.Int32,System.Int32,System.Int32)" />
    ///  method instead.
    ///</remarks>
    function ExportDataTable(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Exports data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///  <param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="exportColumnName">Indicates whether the data in the first row are exported to the column name of the DataTable.</param>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    function ExportDataTable(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; exportColumnName: Boolean): DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Exports data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///  <param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    ///<remarks>All data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection are converted to strings.</remarks>
    function ExportDataTableAsString(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Exports data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///  <param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="exportColumnName">Indicates whether the data in the first row are exported to the column name of the DataTable.</param>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    ///<remarks>All data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection are converted to strings.</remarks>
    function ExportDataTableAsString(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; exportColumnName: Boolean): DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Exports data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///  <param name="firstRow">The row number of the first cell to export out.</param>
    ///  <param name="firstColumn">The column number of the first cell to export out.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///  <param name="options">All export table options</param>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    function ExportDataTable(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; options: DNExportTableOptions): DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Import data from custom data table.
    ///</summary>
    ///  <param name="table">The custom data table.</param>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="options">The import options</param>
    ///<returns></returns>
    function ImportData(table: DNICellsDataTable; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    ///<summary>
    ///  Import data from custom data table.
    ///</summary>
    ///  <param name="table">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="options">The import options</param>
    ///<returns>Total number of rows imported.</returns>
    function ImportData(table: DDN.System.Data.DNDataTable; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    ///<summary>
    ///  Import data from data view.
    ///</summary>
    ///  <param name="dataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="options">The import options</param>
    ///<returns>Total number of rows imported.</returns>
    function ImportData(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    ///<summary>
    ///  Import data from data view.
    ///</summary>
    ///  <param name="dataReader">The <see cref="T:System.Data.IDataReader" />
    ///  object to be imported.</param>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="options">The import options</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function Import(dataReader: DDN.System.Data.DNIDataReader; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  object into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.</param>
    ///  <param name="startCell">The name of start cell to insert the DataTable, such as "A2".</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; startCell: string): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  object into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.</param>
    ///  <param name="firstRow">The row number of the first cell to import.</param>
    ///  <param name="firstColumn">The column number of the first cell to import.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  object into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.</param>
    ///  <param name="firstRow">The row number of the first cell to import.</param>
    ///  <param name="firstColumn">The column number of the first cell to import.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  object into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.</param>
    ///  <param name="firstRow">The row number of the first cell to import.</param>
    ///  <param name="firstColumn">The column number of the first cell to import.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  into a worksheet.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  DataTable dt = new DataTable("Employee");
    ///  dt.Columns.Add("Employee_ID",typeof(Int32));
    ///  dt.Columns.Add("Employee_Name",typeof(string));
    ///  dt.Columns.Add("Gender",typeof(string));
    ///  DataRow dr = dt.NewRow();
    ///  dr[0] = 1;
    ///  dr[1] = "John Smith";
    ///  dr[2] = "Male";
    ///  dt.Rows.Add(dr);
    ///  dr = dt.NewRow();
    ///  dr[0] = 2;
    ///  dr[1] = "Mary Miller";
    ///  dr[2] = "Female";
    ///  dt.Rows.Add(dr);
    ///  cells.ImportDataTable(dt, true, 12, 12, 10, 10);
    ///  [Visual Basic]
    ///  Dim dt As DataTable =  New DataTable("Employee")
    ///  dt.Columns.Add("Employee_ID",Type.GetType(Int32))
    ///  dt.Columns.Add("Employee_Name",Type.GetType(String))
    ///  dt.Columns.Add("Gender",Type.GetType(String))
    ///  Dim dr As DataRow =  dt.NewRow()
    ///  dr(0) = 1
    ///  dr(1) = "John Smith"
    ///  dr(2) = "Male"
    ///  dt.Rows.Add(dr)
    ///  dr = dt.NewRow()
    ///  dr(0) = 2
    ///  dr(1) = "Mary Miller"
    ///  dr(2) = "Female"
    ///  dt.Rows.Add(dr)
    ///  cells.ImportDataTable(dt, True, 12, 12, 10, 10)
    ///</code></example><param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="totalRows">Number of rows to be imported.</param>
    ///  <param name="totalColumns">Number of columns to be imported.</param>
    ///<returns>Total number of rows imported</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object which contains data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportFromDataReader(reader: DDN.System.Data.DNSqlDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object which contains data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNSqlDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportFromDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportFromDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.SqlClient.SqlDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportFromDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportFromDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object which contains data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportFromDataReader(reader: DDN.System.Data.DNOleDbDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.OleDb.OleDbDataReader" />
    ///  object which contains data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNOleDbDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.IDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.IDataReader" />
    ///  object which contains data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///<returns>Total number of rows imported.</returns>
    function ImportData(reader: DDN.System.Data.DNIDataReader; firstRow: Int32; firstColumn: Int32): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.IDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.IDataReader" />
    ///  object which contains data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="options">The options of importing table.</param>
    ///<returns>Total number of rows imported.</returns>
    function ImportData(reader: DDN.System.Data.DNIDataReader; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    ///<summary>
    ///  Imports data from a <see cref="T:System.Data.IDataReader" />
    ///  object.
    ///</summary>
    ///  <param name="reader">The <see cref="T:System.Data.IDataReader" />
    ///  object which contains data.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the data reader will be imported to the first row.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(IDataReader, int, int,ImportTableOptions) method.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataReader(reader: DDN.System.Data.DNIDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="rowNumber">Number of rows to be imported.</param>
    ///  <param name="columnNumber">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>This method automatically format date time values.
    ///  However, if the DateTable is very huge, this method may slow down the program.
    ///  In this case, you'd better format the cell manually.</remarks>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean; dateFormatString: string): Int32; overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="rowNumber">Number of rows to be imported.</param>
    ///  <param name="columnNumber">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///  <param name="dateFormatString">Date format string for cells.</param>
    ///  <param name="convertStringToNumber">Indicates if this method will try to convert string to number.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>This method automatically format date time values.
    ///  However, if the DateTable is very huge, this method may slow down the program.
    ///  In this case, you'd better format the cell manually.</remarks>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    ///<summary>
    ///  Imports a DataRow into the Excel file.
    ///</summary>
    ///  <param name="dataRow">DataRow object.</param>
    ///  <param name="row">Row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    procedure ImportDataRow(dataRow: DDN.System.Data.DNDataRow; row: Int32; firstColumn: Int32);
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  into a worksheet.
    ///</summary>
    ///  <param name="dataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isFieldNameShown">
    ///  Indicates whether the field name of the datatable will be imported to the first row.
    ///  Default is true.
    ///</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="rowNumber">Number of rows to be imported.</param>
    ///  <param name="columnNumber">Number of columns to be imported.</param>
    ///  <param name="insertRows">Indicates whether extra rows are added to fit data.</param>
    ///<returns>Total number of rows imported.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Cells.ImportData(DataTable,int,int,ImportTableOptions) method, instead.
    ///  This property will be removed 12 months later since December 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean): Int32; overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; convertStringToNumber: Boolean); overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; styles: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; convertStringToNumber: Boolean); overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; styles: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; opts: DNTxtLoadOptions); overload;
    ///<summary>
    ///  Imports an array of data into a worksheet.
    ///</summary>
    ///  <param name="objArray">Data array.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    procedure ImportObjectArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    ///<summary>
    ///  Imports an arraylist of data into a worksheet.
    ///</summary>
    ///  <param name="arrayList">Data arraylist.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    procedure ImportArrayList(arrayList: DDN.mscorlib.DNArrayList; firstRow: Int32; firstColumn: Int32; isVertical: Boolean);
    ///<summary>
    ///  Imports an array of data into a worksheet.
    ///</summary>
    ///  <param name="objArray">Data array.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    ///  <param name="skip">Skipped number of rows or columns.</param>
    procedure ImportObjectArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean; skip: Int32); overload;
    procedure ImportArray(stringArray: TArray<string>; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Imports an array of formula into a worksheet.
    ///</summary>
    ///  <param name="stringArray">Formula array.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    procedure ImportFormulaArray(stringArray: TArray<string>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean);
    ///<summary>
    ///  Imports an array of string into a worksheet.
    ///</summary>
    ///  <param name="stringArray">String array.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    procedure ImportArray(stringArray: TArray<string>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    procedure ImportArray(intArray: TArray<Int32>; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Imports an array of integer into a worksheet.
    ///</summary>
    ///  <param name="intArray">Integer array.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    procedure ImportArray(intArray: TArray<Int32>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    procedure ImportArray(doubleArray: TArray<Double>; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Imports an array of double into a worksheet.
    ///</summary>
    ///  <param name="doubleArray">Double array.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    ///  <param name="isVertical">Specifies to import data vertically or horizontally.</param>
    procedure ImportArray(doubleArray: TArray<Double>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    ///<summary>
    ///  Splits the text in the column to columns.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///  <param name="totalRows">The number of rows.</param>
    ///  <param name="options">The split options.</param>
    procedure TextToColumns(row: Int32; column: Int32; totalRows: Int32; options: DNTxtLoadOptions);
    ///<summary>
    ///  Import a CSV file to the cells.
    ///</summary>
    ///  <param name="fileName">The CSV file name.</param>
    ///  <param name="splitter">The splitter</param>
    ///  <param name="convertNumericData"> Whether the string in text file is converted to numeric data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    procedure ImportCSV(fileName: string; splitter: string; convertNumericData: Boolean; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Import a CSV file to the cells.
    ///</summary>
    ///  <param name="stream">The CSV file stream.</param>
    ///  <param name="splitter">The splitter</param>
    ///  <param name="convertNumericData"> Whether the string in text file is converted to numeric data.</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    procedure ImportCSV(stream: DDN.mscorlib.DNStream; splitter: string; convertNumericData: Boolean; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Import a CSV file to the cells.
    ///</summary>
    ///  <param name="fileName">The CSV file name.</param>
    ///  <param name="options">The load options for reading text file</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    procedure ImportCSV(fileName: string; options: DNTxtLoadOptions; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Import a CSV file to the cells.
    ///</summary>
    ///  <param name="stream">The CSV file stream.</param>
    ///  <param name="options">The load options for reading text file</param>
    ///  <param name="firstRow">The row number of the first cell to import in.</param>
    ///  <param name="firstColumn">The column number of the first cell to import in.</param>
    procedure ImportCSV(stream: DDN.mscorlib.DNStream; options: DNTxtLoadOptions; firstRow: Int32; firstColumn: Int32); overload;
    ///<summary>
    ///  Merges a specified range of cells into a single cell.
    ///</summary>
    ///  <param name="firstRow">First row of this range(zero based)</param>
    ///  <param name="firstColumn">First column of this range(zero based)</param>
    ///  <param name="totalRows">Number of rows(one based)</param>
    ///  <param name="totalColumns">Number of columns(one based)</param>
    ///<remarks>
    ///  Reference the merged cell via the address of the upper-left cell in the range.
    ///</remarks>
    procedure Merge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32); overload;
    ///<summary>
    ///  Merges a specified range of cells into a single cell.
    ///</summary>
    ///  <param name="firstRow">First row of this range(zero based)</param>
    ///  <param name="firstColumn">First column of this range(zero based)</param>
    ///  <param name="totalRows">Number of rows(one based)</param>
    ///  <param name="totalColumns">Number of columns(one based)</param>
    ///  <param name="mergeConflict">Merge conflict merged ranges.</param>
    ///<remarks>
    ///  Reference the merged cell via the address of the upper-left cell in the range.
    ///  If mergeConflict is true and the merged range conflicts with other merged cells,
    ///  other merged cells will be  automatically removed.
    ///</remarks>
    procedure Merge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; mergeConflict: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the list of fields of ods.
    ///</summary>
    property OdsCellFields: DNOdsCellFieldCollection read get_OdsCellFields;
    ///<summary>
    ///  Gets the total count of instantiated Cell objects.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets the total count of instantiated Cell objects.
    ///</summary>
    property CountLarge: Int64 read get_CountLarge;
    property Item[index: Int32]: DNCell read get_Item; default;
    ///<summary>
    ///  Gets the collection of <see cref="T:Aspose.Cells.Row" />
    ///  objects that represents the individual rows in this worksheet.
    ///</summary>
    property Rows: DNRowCollection read get_Rows;
    ///<summary>
    ///  Gets the collection of merged cells.
    ///</summary>
    ///<remarks>In this collection, each item is a <see cref="T:Aspose.Cells.CellArea" />
    ///  structure which represents an area of merged cells.</remarks>
    property MergedCells: DDN.mscorlib.DNArrayList read get_MergedCells;
    property Item[row: Int32; column: Int32]: DNCell read get_Item; default;
    property Item[cellName: string]: DNCell read get_Item; default;
    ///<summary>
    ///  Gets or sets whether the cells data model should support Multi-Thread reading.
    ///  Default value of this property is false.
    ///  If there are multiple threads to read Row/Cell objects in this collection concurrently,
    ///  this property should be set as true, otherwise unexpected result may be produced.
    ///  Supporting Multi-Thread reading may degrade the performance for accessing Row/Cell objects from this collection.
    ///</summary>
    property MultiThreadReading: Boolean read get_MultiThreadReading write set_MultiThreadReading;
    ///<summary>
    ///  Gets or sets the memory usage option for this cells.
    ///</summary>
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    ///<summary>
    ///  Gets and sets the default style.
    ///</summary>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the default column width in the worksheet, in unit of inches.
    ///</summary>
    property StandardWidthInch: Double read get_StandardWidthInch write set_StandardWidthInch;
    ///<summary>
    ///  Gets or sets the default column width in the worksheet, in unit of pixels.
    ///</summary>
    property StandardWidthPixels: Int32 read get_StandardWidthPixels write set_StandardWidthPixels;
    ///<summary>
    ///  Gets or sets the default column width in the worksheet, in unit of characters.
    ///</summary>
    property StandardWidth: Double read get_StandardWidth write set_StandardWidth;
    ///<summary>
    ///  Gets or sets the default row height in this worksheet, in unit of points.
    ///</summary>
    property StandardHeight: Double read get_StandardHeight write set_StandardHeight;
    ///<summary>
    ///  Gets or sets the default row height in this worksheet, in unit of pixels.
    ///</summary>
    property StandardHeightPixels: Int32 read get_StandardHeightPixels write set_StandardHeightPixels;
    ///<summary>
    ///  Gets or sets a value indicating whether all worksheet values are preserved as strings.
    ///  Default is false.
    ///</summary>
    property PreserveString: Boolean read get_PreserveString write set_PreserveString;
    ///<summary>
    ///  Minimum row index of cell which contains data or style.
    ///</summary>
    property MinRow: Int32 read get_MinRow;
    ///<summary>
    ///  Maximum row index of cell which contains data or style.
    ///</summary>
    ///<remarks>
    ///  Return -1 if there is no cell which contains data or style in the worksheet.
    ///</remarks>
    property MaxRow: Int32 read get_MaxRow;
    ///<summary>
    ///  Minimum column index of cell which contains data or style.
    ///</summary>
    property MinColumn: Int32 read get_MinColumn;
    ///<summary>
    ///  Maximum column index of cell which contains data or style.
    ///</summary>
    ///<remarks>
    ///  Return -1 if there is no cell.
    ///</remarks>
    property MaxColumn: Int32 read get_MaxColumn;
    ///<summary>
    ///  Minimum row index of cell which contains data.
    ///</summary>
    property MinDataRow: Int32 read get_MinDataRow;
    ///<summary>
    ///  Maximum row index of cell which contains data.
    ///</summary>
    ///<remarks>
    ///  Return -1 if there is no cell which contains data.
    ///</remarks>
    property MaxDataRow: Int32 read get_MaxDataRow;
    ///<summary>
    ///  Minimum column index of cell which contains data.
    ///</summary>
    property MinDataColumn: Int32 read get_MinDataColumn;
    ///<summary>
    ///  Maximum column index of cell which contains data.
    ///</summary>
    ///<remarks>
    ///  Return -1 if there is not cell which contains data.
    ///  Don't call this property repeatedly. This property will iterate all cells in a worksheet.</remarks>
    property MaxDataColumn: Int32 read get_MaxDataColumn;
    ///<summary>
    ///  Indicates that row height and default font height matches
    ///</summary>
    property IsDefaultRowHeightMatched: Boolean read get_IsDefaultRowHeightMatched write set_IsDefaultRowHeightMatched;
    ///<summary>
    ///  Indicates whether the row is default hidden.
    ///</summary>
    property IsDefaultRowHidden: Boolean read get_IsDefaultRowHidden write set_IsDefaultRowHidden;
    ///<summary>
    ///  Gets the collection of <see cref="T:Aspose.Cells.Column" />
    ///  objects that represents the individual columns in this worksheet.
    ///</summary>
    property Columns: DNColumnCollection read get_Columns;
    ///<summary>
    ///  Gets the collection of <see cref="T:Aspose.Cells.Range" />
    ///  objects created at run time.
    ///</summary>
    property Ranges: DNRangeCollection read get_Ranges;
    ///<summary>
    ///  Gets the last cell in this worksheet.
    ///</summary>
    property LastCell: DNCell read get_LastCell;
    ///<summary>
    ///  Gets the max range which includes data, merged cells and shapes.
    ///</summary>
    property MaxDisplayRange: DNRange read get_MaxDisplayRange;
    ///<summary>
    ///  Gets the first cell in this worksheet.
    ///</summary>
    property FirstCell: DNCell read get_FirstCell;
  end;

  TDNCells = class(TDNGenericImport<DNCellsClass, DNCells>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1746607-3083-5076-8D64-A0830C674CEB}']
  end;

  ///<summary>
  ///  Represents all types of color.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellsColor')]
  DNCellsColor = interface(DDN.mscorlib.DNObject)
  ['{209DDDB6-D7E1-37C1-95B9-AD9361EC79CC}']
  { getters & setters } 

    function get_IsShapeColor: Boolean;
    procedure set_IsShapeColor(value: Boolean);
    function get_Type: DNColorType;
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_ColorIndex: Int32;
    procedure set_ColorIndex(value: Int32);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Argb: Int32;
    procedure set_Argb(value: Int32);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    ///<summary>
    ///  Set the tint of the shape color
    ///</summary>
    ///  <param name="tint"></param>
    procedure SetTintOfShapeColor(tint: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and set the color which should apply to cell or shape.
    ///</summary>
    ///<remarks>
    ///  The expression of the color of the cell and the shape is different.
    ///  For example: the theme color with same tint value will be not same in the cell and the shape.
    ///</remarks>
    property IsShapeColor: Boolean read get_IsShapeColor write set_IsShapeColor;
    ///<summary>
    ///  The color type.
    ///</summary>
    property &Type: DNColorType read get_Type;
    ///<summary>
    ///  Gets the theme color. Only applies for theme color type.
    ///</summary>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Gets and sets the color index in the color palette. Only applies of indexed color.
    ///</summary>
    property ColorIndex: Int32 read get_ColorIndex write set_ColorIndex;
    ///<summary>
    ///  Gets and sets the RGB color.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the color from a 32-bit ARGB value.
    ///</summary>
    property Argb: Int32 read get_Argb write set_Argb;
    ///<summary>
    ///  Gets and sets transparency as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNCellsColor = class(TDNGenericImport<DNCellsColorClass, DNCellsColor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5278C3F0-4C6C-50A6-923F-1F947A66569C}']
  { constructors } 

    {class} function init: DNCellsFactory;

  end;

  ///<summary>
  ///  Utility for instantiating classes of Cells model.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellsFactory')]
  DNCellsFactory = interface(DDN.mscorlib.DNObject)
  ['{09C1BFF7-174B-30B7-9FDA-82EDB490D631}']
  { methods } 

    ///<summary>
    ///  Creates a new style.
    ///</summary>
    ///<returns>Returns a style object.</returns>
    function CreateStyle: DNStyle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCellsFactory = class(TDNGenericImport<DNCellsFactoryClass, DNCellsFactory>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6182F2F7-6F29-5E1E-8241-8B7960A79CA2}']
  { static getter & setter } 

    {class} function get_SignificantDigits: Int32;
    {class} procedure set_SignificantDigits(value: Int32);
    {class} function get_DPI: Double;
    {class} procedure set_DPI(value: Double);
    {class} function get_StartupPath: string;
    {class} procedure set_StartupPath(value: string);
    {class} function get_AltStartPath: string;
    {class} procedure set_AltStartPath(value: string);
    {class} function get_LibraryPath: string;
    {class} procedure set_LibraryPath(value: string);
    {class} function get_CustomImplementationFactory: DNCustomImplementationFactory;
    {class} procedure set_CustomImplementationFactory(value: DNCustomImplementationFactory);
    {class} function get_IsCloudPlatform: Boolean;
    {class} procedure set_IsCloudPlatform(value: Boolean);

  { static methods } 

    ///<summary>
    ///  Get width of text in unit of points.
    ///</summary>
    ///  <param name="text">The text.</param>
    ///  <param name="font">The font of the text.</param>
    ///  <param name="scaling">The scaling of text.</param>
    ///<returns></returns>
    {class} function GetTextWidth(text: string; font: DNFont; scaling: Double): Double;
    ///<summary>
    ///  Get the release version.
    ///</summary>
    ///<returns>The release version.</returns>
    {class} function GetVersion: string;
    {class} procedure CellNameToIndex(cellName: string; out row: Int32; out column: Int32);
    ///<summary>
    ///  Gets cell name according to its row and column indexes.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="column">Column index.</param>
    ///<returns>Name of cell.</returns>
    {class} function CellIndexToName(row: Int32; column: Int32): string;
    ///<summary>
    ///  Gets column name according to column index.
    ///</summary>
    ///  <param name="column">Column index.</param>
    ///<returns>Name of column.</returns>
    {class} function ColumnIndexToName(column: Int32): string;
    ///<summary>
    ///  Gets column index according to column name.
    ///</summary>
    ///  <param name="columnName">Column name.</param>
    ///<returns>Column index.</returns>
    {class} function ColumnNameToIndex(columnName: string): Int32;
    ///<summary>
    ///  Gets row name according to row index.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///<returns>Name of row.</returns>
    {class} function RowIndexToName(row: Int32): string;
    ///<summary>
    ///  Gets row index according to row name.
    ///</summary>
    ///  <param name="rowName">Row name.</param>
    ///<returns>Row index.</returns>
    {class} function RowNameToIndex(rowName: string): Int32;
    ///<summary>
    ///  Converts the r1c1 formula of the cell to A1 formula.
    ///</summary>
    ///  <param name="r1c1Formula">The r1c1 formula.</param>
    ///  <param name="row">The row index of the cell.</param>
    ///  <param name="column">The column index of the cell.</param>
    ///<returns>The A1 formula.</returns>
    {class} function ConvertR1C1FormulaToA1(r1c1Formula: string; row: Int32; column: Int32): string;
    ///<summary>
    ///  Converts A1 formula of the cell to the r1c1 formula.
    ///</summary>
    ///  <param name="formula">The A1 formula.</param>
    ///  <param name="row">The row index of the cell.</param>
    ///  <param name="column">The column index of the cell.</param>
    ///<returns>The R1C1 formula.</returns>
    {class} function ConvertA1FormulaToR1C1(formula: string; row: Int32; column: Int32): string;
    ///<summary>
    ///  Convert the double value to the date time value.
    ///</summary>
    ///  <param name="doubleValue">The double value.</param>
    ///  <param name="date1904">Date 1904 system.</param>
    ///<returns></returns>
    {class} function GetDateTimeFromDouble(doubleValue: Double; date1904: Boolean): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  Convert the date time to double value.
    ///</summary>
    ///  <param name="dateTime">The date time.</param>
    ///  <param name="date1904">Date 1904 system.</param>
    ///<returns></returns>
    {class} function GetDoubleFromDateTime(dateTime: DDN.mscorlib.DNDateTime; date1904: Boolean): Double;
    ///<summary>
    ///  Gets all used colors in the workbook.
    ///</summary>
    ///  <param name="workbook">The workbook object.</param>
    ///<returns>The used colors.</returns>
    {class} function GetUsedColors(workbook: DNWorkbook): TArray<DDN.System.Drawing.DNColor>;
    ///<summary>
    ///  Add addin function.
    ///</summary>
    ///  <param name="function">The function name.</param>
    ///  <param name="minCountOfParameters">Minimum number of parameters this function requires</param>
    ///  <param name="maxCountOfParameters">Maximum number of parameters this function allows.</param>
    ///  <param name="paramersType">The excepted parameters type of the function</param>
    ///  <param name="functionValueType">The function value type.</param>
    {class} procedure AddAddInFunction(&function: string; minCountOfParameters: Int32; maxCountOfParameters: Int32; paramersType: TArray<DNParameterType>; functionValueType: DNParameterType);
    ///<summary>
    ///  Merges some large xls files to a xls file.
    ///</summary>
    ///  <param name="files">The files.</param>
    ///  <param name="cachedFile">The cached file.</param>
    ///  <param name="destFile">The dest file.</param>
    ///<remarks>
    ///  This method only supports merging data, style and formulas to the new file.
    ///  The cached file is used to store some temporary data.
    ///</remarks>
    {class} procedure MergeFiles(files: TArray<string>; cachedFile: string; destFile: string);
    ///<summary>
    ///  Checks given sheet name and create a valid one when needed.
    ///  If given sheet name conforms to the rules of excel sheet name, then return it.
    ///  Otherwise string will be truncated if length exceeds the limit
    ///  and invalid characters will be replaced with ' ', then return the rebuilt string value.
    ///</summary>
    ///  <param name="nameProposal">sheet name to be used</param>
    ///<returns></returns>
    {class} function CreateSafeSheetName(nameProposal: string): string; overload;
    ///<summary>
    ///  Checks given sheet name and create a valid one when needed.
    ///  If given sheet name conforms to the rules of excel sheet name, then return it.
    ///  Otherwise string will be truncated if length exceeds the limit
    ///  and invalid characters will be replaced with given character, then return the rebuilt string value.
    ///</summary>
    ///  <param name="nameProposal">sheet name to be used</param>
    ///  <param name="replaceChar">character which will be used to replace invalid characters in given sheet name</param>
    ///<returns></returns>
    {class} function CreateSafeSheetName(nameProposal: string; replaceChar: Char): string; overload;

  { static propertys } 

    ///<summary>
    ///  Gets and sets the number of significant digits.
    ///  The default value is 17.
    ///</summary>
    ///<remarks>
    ///  Only could be 15 or 17 now.
    ///</remarks>
    {class} property SignificantDigits: Int32 read get_SignificantDigits write set_SignificantDigits;
    ///<summary>
    ///  Gets the DPI of the machine.
    ///</summary>
    ///<remarks></remarks>
    {class} property DPI: Double read get_DPI write set_DPI;
    ///<summary>
    ///  Gets or sets the startup path, which is referred to by some external formula references.
    ///</summary>
    {class} property StartupPath: string read get_StartupPath write set_StartupPath;
    ///<summary>
    ///  Gets or sets the alternate startup path, which is referred to by some external formula references.
    ///</summary>
    {class} property AltStartPath: string read get_AltStartPath write set_AltStartPath;
    ///<summary>
    ///  Gets or sets the library path which is referred to by some external formula references.
    ///</summary>
    {class} property LibraryPath: string read get_LibraryPath write set_LibraryPath;
    ///<summary>
    ///  Gets or sets the factory for creating instances with special implementation.
    ///</summary>
    {class} property CustomImplementationFactory: DNCustomImplementationFactory read get_CustomImplementationFactory write set_CustomImplementationFactory;
    ///<summary>
    ///  Please set this property True when running on a cloud platform, such as: Azure, AWSLambda, etc,
    ///</summary>
    {class} property IsCloudPlatform: Boolean read get_IsCloudPlatform write set_IsCloudPlatform;
  end;

  ///<summary>
  ///  Provides helper functions.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellsHelper')]
  DNCellsHelper = interface(DDN.mscorlib.DNObject)
  ['{D87959FB-F02D-3E17-AF88-D56C786203E9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCellsHelper = class(TDNGenericImport<DNCellsHelperClass, DNCellsHelper>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellWatchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{04FA91F6-B506-5F4A-8252-FB5B7A8438EA}']
  { constructors } 

    {class} function init: DNCellWatch;

  end;

  ///<summary>
  ///  Represents Cell Watch Item in the 'watch window'.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellWatch')]
  DNCellWatch = interface(DDN.mscorlib.DNObject)
  ['{9A340EE4-44C5-3F3C-8E04-A22108616862}']
  { getters & setters } 

    function get_Row: Int32;
    procedure set_Row(value: Int32);
    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_CellName: string;
    procedure set_CellName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the row of the cell.
    ///</summary>
    property Row: Int32 read get_Row write set_Row;
    ///<summary>
    ///  Gets and sets the column of the cell.
    ///</summary>
    property Column: Int32 read get_Column write set_Column;
    ///<summary>
    ///  Gets and sets the name of the cell.
    ///</summary>
    property CellName: string read get_CellName write set_CellName;
  end;

  TDNCellWatch = class(TDNGenericImport<DNCellWatchClass, DNCellWatch>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNAxisClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1E05970-E7D7-5E30-8545-6EBEEA0E4495}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a chart's axis.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(4);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(20);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 25, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  //Set the max value of value axis
  ///  chart.ValueAxis.MaxValue = 200;
  ///  //Set the min value of value axis
  ///  chart.ValueAxis.MinValue = 0;
  ///  //Set the major unit
  ///  chart.ValueAxis.MajorUnit = 25;
  ///  //Category(X) axis crosses at the maxinum value.
  ///  chart.ValueAxis.Crosses = CrossType.Maximum;
  ///  //Set he number of categories or series between tick-mark labels.
  ///  chart.CategoryAxis.TickLabelSpacing = 2;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Excel object
  ///  Dim sheetIndex As Int32 = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(4)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(20)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Int32 = worksheet.Charts.Add(ChartType.Column, 5, 0, 25, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  'Set the max value of value axis
  ///  chart.ValueAxis.MaxValue = 200
  ///  'Set the min value of value axis
  ///  chart.ValueAxis.MinValue = 0
  ///  'Set the major unit
  ///  chart.ValueAxis.MajorUnit = 25
  ///  'Category(X) axis crosses at the maxinum value.
  ///  chart.ValueAxis.Crosses = CrossType.Maximum
  ///  'Set he number of categories or series between tick-mark labels.
  ///  chart.CategoryAxis.TickLabelSpacing = 2
  ///  'Saving the Excel file
  ///  workbook.Save("C:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Axis')]
  DNAxis = interface(DDN.mscorlib.DNObject)
  ['{2D523194-8F60-376E-99CF-685770DBE7D7}']
  { getters & setters } 

    function get_Area: DNArea;
    function get_IsAutomaticMinValue: Boolean;
    procedure set_IsAutomaticMinValue(value: Boolean);
    function get_MinValue: DDN.mscorlib.DNObject;
    procedure set_MinValue(value: DDN.mscorlib.DNObject);
    function get_IsAutomaticMaxValue: Boolean;
    procedure set_IsAutomaticMaxValue(value: Boolean);
    function get_MaxValue: DDN.mscorlib.DNObject;
    procedure set_MaxValue(value: DDN.mscorlib.DNObject);
    function get_IsAutomaticMajorUnit: Boolean;
    procedure set_IsAutomaticMajorUnit(value: Boolean);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_IsAutomaticMinorUnit: Boolean;
    procedure set_IsAutomaticMinorUnit(value: Boolean);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_AxisLine: DNLine;
    function get_MajorTickMark: DNTickMarkType;
    procedure set_MajorTickMark(value: DNTickMarkType);
    function get_MinorTickMark: DNTickMarkType;
    procedure set_MinorTickMark(value: DNTickMarkType);
    function get_TickLabelPosition: DNTickLabelPositionType;
    procedure set_TickLabelPosition(value: DNTickLabelPositionType);
    function get_CrossAt: Double;
    procedure set_CrossAt(value: Double);
    function get_CrossType: DNCrossType;
    procedure set_CrossType(value: DNCrossType);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_IsLogarithmic: Boolean;
    procedure set_IsLogarithmic(value: Boolean);
    function get_IsPlotOrderReversed: Boolean;
    procedure set_IsPlotOrderReversed(value: Boolean);
    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_TickLabels: DNTickLabels;
    function get_TickLabelSpacing: Int32;
    procedure set_TickLabelSpacing(value: Int32);
    function get_IsAutoTickLabelSpacing: Boolean;
    procedure set_IsAutoTickLabelSpacing(value: Boolean);
    function get_TickMarkSpacing: Int32;
    procedure set_TickMarkSpacing(value: Int32);
    function get_DisplayUnit: DNDisplayUnitType;
    procedure set_DisplayUnit(value: DNDisplayUnitType);
    function get_CustUnit: Int32;
    procedure set_CustUnit(value: Int32);
    function get_DisplayUnitLabel: DNDisplayUnitLabel;
    function get_IsDisplayUnitLabelShown: Boolean;
    procedure set_IsDisplayUnitLabelShown(value: Boolean);
    function get_Title: DNTitle;
    function get_CategoryType: DNCategoryType;
    procedure set_CategoryType(value: DNCategoryType);
    function get_BaseUnitScale: DNTimeUnit;
    procedure set_BaseUnitScale(value: DNTimeUnit);
    function get_MajorUnitScale: DNTimeUnit;
    procedure set_MajorUnitScale(value: DNTimeUnit);
    function get_MinorUnitScale: DNTimeUnit;
    procedure set_MinorUnitScale(value: DNTimeUnit);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_MajorGridLines: DNLine;
    function get_MinorGridLines: DNLine;
    function get_HasMultiLevelLabels: Boolean;
    procedure set_HasMultiLevelLabels(value: Boolean);
    function get_AxisLabels: DDN.mscorlib.DNArrayList;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.Axis.Area" />
    ///  .
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Indicates whether the min value is automatically assigned.
    ///</summary>
    property IsAutomaticMinValue: Boolean read get_IsAutomaticMinValue write set_IsAutomaticMinValue;
    ///<summary>
    ///  Represents the minimum value on the value axis.
    ///</summary>
    ///<remarks>
    ///  The minValue type only can be double or DateTime
    ///</remarks>
    property MinValue: DDN.mscorlib.DNObject read get_MinValue write set_MinValue;
    ///<summary>
    ///  Indicates whether the max value is automatically assigned.
    ///</summary>
    property IsAutomaticMaxValue: Boolean read get_IsAutomaticMaxValue write set_IsAutomaticMaxValue;
    ///<summary>
    ///  Represents the maximum value on the value axis.
    ///</summary>
    ///<remarks>
    ///  The maxValue type only can be double or DateTime
    ///</remarks>
    property MaxValue: DDN.mscorlib.DNObject read get_MaxValue write set_MaxValue;
    ///<summary>
    ///  Indicates whether the major unit of the axis is automatically assigned.
    ///</summary>
    property IsAutomaticMajorUnit: Boolean read get_IsAutomaticMajorUnit write set_IsAutomaticMajorUnit;
    ///<summary>
    ///  Represents the major units for the axis.
    ///</summary>
    ///<remarks> The major units must be greater than zero.</remarks>
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    ///<summary>
    ///  Indicates whether the minor unit of the axis is automatically assigned.
    ///</summary>
    property IsAutomaticMinorUnit: Boolean read get_IsAutomaticMinorUnit write set_IsAutomaticMinorUnit;
    ///<summary>
    ///  Represents the minor units for the axis.
    ///</summary>
    ///<remarks> The minor units must be greater than zero.</remarks>
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    ///<summary>
    ///  Gets the appearance of an Axis.
    ///</summary>
    property AxisLine: DNLine read get_AxisLine;
    ///<summary>
    ///  Represents the type of major tick mark for the specified axis.
    ///</summary>
    property MajorTickMark: DNTickMarkType read get_MajorTickMark write set_MajorTickMark;
    ///<summary>
    ///  Represents the type of minor tick mark for the specified axis.
    ///</summary>
    property MinorTickMark: DNTickMarkType read get_MinorTickMark write set_MinorTickMark;
    ///<summary>
    ///  Represents the position of tick-mark labels on the specified axis.
    ///</summary>
    property TickLabelPosition: DNTickLabelPositionType read get_TickLabelPosition write set_TickLabelPosition;
    ///<summary>
    ///  Represents the point on the value axis where the category axis crosses it.
    ///</summary>
    ///<remarks>The number should be a integer when it applies to category axis.
    ///  And the value must be between 1 and 31999.</remarks>
    property CrossAt: Double read get_CrossAt write set_CrossAt;
    ///<summary>
    ///  Represents the <see cref="P:Aspose.Cells.Charts.Axis.CrossType" />
    ///  on the specified axis where the other axis crosses.
    ///</summary>
    property CrossType: DNCrossType read get_CrossType write set_CrossType;
    ///<summary>
    ///  Represents the logarithmic base. Default value is 10.Only applies for Excel2007.
    ///</summary>
    property LogBase: Double read get_LogBase write set_LogBase;
    ///<summary>
    ///  Represents if the value axis scale type is logarithmic or not.
    ///</summary>
    property IsLogarithmic: Boolean read get_IsLogarithmic write set_IsLogarithmic;
    ///<summary>
    ///  Represents if Microsoft Excel plots data points from last to first.
    ///</summary>
    property IsPlotOrderReversed: Boolean read get_IsPlotOrderReversed write set_IsPlotOrderReversed;
    ///<summary>
    ///  Represents if the value axis crosses the category axis between categories.
    ///</summary>
    ///<remarks>This property applies only to category axes, and it doesn't apply to 3-D charts.
    ///</remarks>
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Charts.Axis.TickLabels" />
    ///  object that represents the tick-mark labels for the specified axis.
    ///</summary>
    property TickLabels: DNTickLabels read get_TickLabels;
    ///<summary>
    ///  Represents the number of categories or series between tick-mark labels. Applies only to category and series axes.
    ///</summary>
    ///<remarks>The number must be between 1 and 31999.</remarks>
    property TickLabelSpacing: Int32 read get_TickLabelSpacing write set_TickLabelSpacing;
    ///<summary>
    ///  Indicates whether ticklabel spacing is automatic
    ///</summary>
    property IsAutoTickLabelSpacing: Boolean read get_IsAutoTickLabelSpacing write set_IsAutoTickLabelSpacing;
    ///<summary>
    ///  Returns or sets the number of categories or series between tick marks. Applies only to category and series axes.
    ///</summary>
    ///<remarks>The number must be between 1 and 31999.</remarks>
    property TickMarkSpacing: Int32 read get_TickMarkSpacing write set_TickMarkSpacing;
    ///<summary>
    ///  Represents the unit label for the specified axis.
    ///</summary>
    property DisplayUnit: DNDisplayUnitType read get_DisplayUnit write set_DisplayUnit;
    ///<summary>
    ///  Specifies a custom value for the display unit.
    ///</summary>
    property CustUnit: Int32 read get_CustUnit write set_CustUnit;
    ///<summary>
    ///  Represents a unit label on an axis in the specified chart.
    ///  Unit labels are useful for charting large values¡ª for example, in the millions or billions.
    ///</summary>
    property DisplayUnitLabel: DNDisplayUnitLabel read get_DisplayUnitLabel;
    ///<summary>
    ///  Represents if the display unit label is shown on the specified axis.
    ///</summary>
    ///<remarks>The default value is True.</remarks>
    property IsDisplayUnitLabelShown: Boolean read get_IsDisplayUnitLabelShown write set_IsDisplayUnitLabelShown;
    ///<summary>
    ///  Gets the axis' title.
    ///</summary>
    property Title: DNTitle read get_Title;
    ///<summary>
    ///  Represents the category axis type.
    ///</summary>
    property CategoryType: DNCategoryType read get_CategoryType write set_CategoryType;
    ///<summary>
    ///  Represents the base unit scale for the category axis.
    ///</summary>
    ///<remarks>Setting this property only takes effect when the CategoryType property is set to TimeScale.</remarks>
    property BaseUnitScale: DNTimeUnit read get_BaseUnitScale write set_BaseUnitScale;
    ///<summary>
    ///  Represents the major unit scale for the category axis.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  chart.CategoryAxis.CategoryType = CategoryType.TimeScale;
    ///  chart.CategoryAxis.MajorUnitScale = TimeUnit.Months;
    ///  chart.CategoryAxis.MajorUnit = 2;
    ///  [Visual Basic]
    ///  chart.CategoryAxis.CategoryType = CategoryType.TimeScale
    ///  chart.CategoryAxis.MajorUnitScale = TimeUnit.Months
    ///  chart.CategoryAxis.MajorUnit = 2
    ///</code></example>
    property MajorUnitScale: DNTimeUnit read get_MajorUnitScale write set_MajorUnitScale;
    ///<summary>
    ///  Represents the major unit scale for the category axis.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  chart.CategoryAxis.CategoryType = CategoryType.TimeScale;
    ///  chart.CategoryAxis.MinorUnitScale = TimeUnit.Months;
    ///  chart.CategoryAxis.MinorUnit = 2;
    ///  [Visual Basic]
    ///  chart.CategoryAxis.CategoryType = CategoryType.TimeScale
    ///  chart.CategoryAxis.MinorUnitScale = TimeUnit.Months
    ///  chart.CategoryAxis.MinorUnit = 2
    ///</code></example>
    property MinorUnitScale: DNTimeUnit read get_MinorUnitScale write set_MinorUnitScale;
    ///<summary>
    ///  Represents if the axis is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Represents major gridlines on a chart axis.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  chart.ValueAxis.MajorGridLines.IsVisible = false;
    ///  chart.CategoryAxis.MajorGridLines.IsVisible = true;
    ///  [Visual Basic]
    ///  chart.ValueAxis.MajorGridLines.IsVisible = false
    ///  chart.CategoryAxis.MajorGridLines.IsVisible = true
    ///</code></example>
    property MajorGridLines: DNLine read get_MajorGridLines;
    ///<summary>
    ///  Represents minor gridlines on a chart axis.
    ///</summary>
    property MinorGridLines: DNLine read get_MinorGridLines;
    ///<summary>
    ///  Indicates whether the labels shall be shown as multi level.
    ///</summary>
    ///<remarks>
    ///  Only valid for category axis.
    ///</remarks>
    property HasMultiLevelLabels: Boolean read get_HasMultiLevelLabels write set_HasMultiLevelLabels;
    ///<summary>
    ///  Gets the labels of the axis after call Chart.Calculate() method.
    ///</summary>
    property AxisLabels: DDN.mscorlib.DNArrayList read get_AxisLabels;
  end;

  TDNAxis = class(TDNGenericImport<DNAxisClass, DNAxis>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C84BC57F-C1DB-5B69-BB5F-470EC6B2D8EC}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a single Excel chart.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  Cells cells = sheet.Cells;
  ///  cells[0,1].PutValue("Income");
  ///  cells[1,0].PutValue("Company A");
  ///  cells[2,0].PutValue("Company B");
  ///  cells[3,0].PutValue("Company C");
  ///  cells[1,1].PutValue(10000);
  ///  cells[2,1].PutValue(20000);
  ///  cells[3,1].PutValue(30000);
  ///  int chartIndex = sheet.Charts.Add(ChartType.Column, 9, 9, 21, 15);
  ///  Chart chart = sheet.Charts[chartIndex];
  ///  chart.NSeries.Add("B2:B4", true);
  ///  chart.NSeries.CategoryData = "A2:A4";
  ///  ASeries aSeries = chart.NSeries[0];
  ///  aSeries.Name = "=B1";
  ///  chart.IsLegendShown = true;
  ///  chart.Title.Text = "Income Analysis";
  ///  [Visual Basic]
  ///  Dim workbook as Workbook = new Workbook()
  ///  Dim sheet as Worksheet = workbook.Worksheets(0)
  ///  Dim cells as Cells = sheet.Cells
  ///  cells(0,1).PutValue("Income")
  ///  cells(1,0).PutValue("Company A")
  ///  cells(2,0).PutValue("Company B")
  ///  cells(3,0).PutValue("Company C")
  ///  cells(1,1).PutValue(10000)
  ///  cells(2,1).PutValue(20000)
  ///  cells(3,1).PutValue(30000)
  ///  Dim chartIndex as Integer = sheet.Charts.Add(ChartType.Column, 9, 9, 21, 15)
  ///  Dim chart as Chart = sheet.Charts(chartIndex)
  ///  chart.NSeries.Add("B2:B4", true)
  ///  chart.NSeries.CategoryData = "A2:A4"
  ///  Dim aSeries as ASeries = chart.NSeries(0)
  ///  aSeries.Name = "=B1"
  ///  chart.IsLegendShown = true
  ///  chart.Title.Text = "Income Analysis"
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Chart')]
  DNChart = interface(DDN.mscorlib.DNObject)
  ['{9314917D-B876-3249-8DE8-F46F54244A31}']
  { getters & setters } 

    function get_Style: Int32;
    procedure set_Style(value: Int32);
    function get_ChartObject: DNChartShape;
    function get_HidePivotFieldButtons: Boolean;
    procedure set_HidePivotFieldButtons(value: Boolean);
    function get_PivotOptions: DNPivotOptions;
    function get_PivotSource: string;
    procedure set_PivotSource(value: string);
    function get_PlotBy: DNPlotDataByType;
    function get_PlotEmptyCellsType: DNPlotEmptyCellsType;
    procedure set_PlotEmptyCellsType(value: DNPlotEmptyCellsType);
    function get_PlotVisibleCells: Boolean;
    procedure set_PlotVisibleCells(value: Boolean);
    function get_DisplayNaAsBlank: Boolean;
    procedure set_DisplayNaAsBlank(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SizeWithWindow: Boolean;
    procedure set_SizeWithWindow(value: Boolean);
    function get_Worksheet: DNWorksheet;
    function get_Shapes: DNShapeCollection;
    function get_PrintSize: DNPrintSizeType;
    procedure set_PrintSize(value: DNPrintSizeType);
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_NSeries: DNSeriesCollection;
    function get_Title: DNTitle;
    function get_SubTitle: DNTitle;
    function get_PlotArea: DNPlotArea;
    function get_ChartArea: DNChartArea;
    function get_CategoryAxis: DNAxis;
    function get_ValueAxis: DNAxis;
    function get_SecondValueAxis: DNAxis;
    function get_SecondCategoryAxis: DNAxis;
    function get_SeriesAxis: DNAxis;
    function get_Legend: DNLegend;
    function get_ChartDataTable: DNChartDataTable;
    function get_ShowLegend: Boolean;
    procedure set_ShowLegend(value: Boolean);
    function get_IsRectangularCornered: Boolean;
    procedure set_IsRectangularCornered(value: Boolean);
    function get_ShowDataTable: Boolean;
    procedure set_ShowDataTable(value: Boolean);
    function get_FirstSliceAngle: Int32;
    procedure set_FirstSliceAngle(value: Int32);
    function get_GapWidth: Int32;
    procedure set_GapWidth(value: Int32);
    function get_GapDepth: Int32;
    procedure set_GapDepth(value: Int32);
    function get_Floor: DNFloor;
    function get_Walls: DNWalls;
    function get_BackWall: DNWalls;
    function get_SideWall: DNWalls;
    function get_WallsAndGridlines2D: Boolean;
    procedure set_WallsAndGridlines2D(value: Boolean);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_Elevation: Int32;
    procedure set_Elevation(value: Int32);
    function get_RightAngleAxes: Boolean;
    procedure set_RightAngleAxes(value: Boolean);
    function get_AutoScaling: Boolean;
    procedure set_AutoScaling(value: Boolean);
    function get_HeightPercent: Int32;
    procedure set_HeightPercent(value: Int32);
    function get_Perspective: Int16;
    procedure set_Perspective(value: Int16);
    function get_Is3D: Boolean;
    function get_DepthPercent: Int32;
    procedure set_DepthPercent(value: Int32);
    function get_ActualChartSize: DDN.System.Drawing.DNSize;
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_PageSetup: DNPageSetup;
    function get_Line: DNLine;

  { methods } 

    ///<summary>
    ///  Gets a 32-bit <c>Bitmap</c> object of the chart.
    ///</summary>
    ///<returns>the picture of the chart.</returns>
    ///<remarks>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, it will return null.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    function ToImage: DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets a 32-bit <c>Bitmap</c> object of the chart.
    ///<c>ImageOrPrintOptions.ImageFormat</c>, ImageOrPrintOptions.TiffCompression and ImageOrPrintOptions.Quality attributes are ignored.
    ///</summary>
    ///  <param name="options">Additional image creation options</param>
    ///<returns>the picture of the chart.</returns>
    ///<remarks>
    ///  Returns a 32-bit bitmap object, so ImageOrPrintOptions.ImageFormat, ImageOrPrintOptions.TiffCompression and ImageOrPrintOptions.Quality
    ///  attributes do not affect the method.
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, it will return null.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    ///<example>
    ///  Gets a bitmap object with 200 x dpi and 300 y dpi.
    ///<code>
    ///  [C#]
    ///  ImageOrPrintOptions options = new ImageOrPrintOptions();
    ///  options.HorizontalResolution = 200;
    ///  options.VerticalResolution = 300;
    ///  Workbook book = new Workbook(@"c:\test.xls");
    ///  Bitmap chartObject = book.Worksheets[0].Charts[0].ToImage(options);
    ///  [VB]
    ///  Dim options As ImageOrPrintOptions =  New ImageOrPrintOptions()
    ///  options.HorizontalResolution = 200
    ///  options.VerticalResolution = 300
    ///  Dim book As Workbook =  New Workbook("c:\test.xls")
    ///  Dim chartObject As Bitmap = book.Worksheets(0).Charts(0).ToImage(options)
    ///</code></example>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Creates the chart image and saves it to a file.
    ///  The extension of the file name determines the format of the image.
    ///</summary>
    ///  <param name="imageFile">The image file name with full path.</param>
    ///<remarks><p>The format of the image is specified by using the extension of the file name.
    ///  For example, if you specify "myfile.png", then the image will be saved
    ///  in the PNG format. The following file extensions are recognized:
    ///  .bmp, .gif, .png, .jpg, .jpeg, .tiff, .tif, .emf.</p>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    procedure ToImage(imageFile: string); overload;
    ///<summary>
    ///  Creates the chart image and saves it to a file in the specified format.
    ///</summary>
    ///  <param name="imageFile">The image file name with full path.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The format of the image is specified by using <c>imageFormat</c>.
    ///  The following formats are supported:
    ///  ImageFormat.Bmp, ImageFormat.Gif, ImageFormat.Png, ImageFormat.Jpeg, ImageFormat.Tiff, ImageFormat.Emf.</p>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    procedure ToImage(imageFile: string; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Creates the chart image and saves it to a file in the Jpeg format.
    ///</summary>
    ///  <param name="imageFile">The image file name with full path.</param>
    ///  <param name="jpegQuality">Jpeg quality.</param>
    ///<remarks>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    procedure ToImage(imageFile: string; jpegQuality: Int64); overload;
    ///<summary>
    ///  Creates the chart image and saves it to a stream in the Jpeg format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="jpegQuality">Jpeg quality.</param>
    ///<remarks>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; jpegQuality: Int64); overload;
    ///<summary>
    ///  Creates the chart image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The format of the image is specified by using <c>imageFormat</c>.
    ///  The following formats are supported:
    ///  ImageFormat.Bmp, ImageFormat.Gif, ImageFormat.Png, ImageFormat.Jpeg, ImageFormat.Tiff, ImageFormat.Emf.</p>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the chart to a pdf file.
    ///</summary>
    ///  <param name="fileName">the pdf file name with full path</param>
    procedure ToPdf(fileName: string); overload;
    ///<summary>
    ///  Saves the chart to a pdf file.
    ///</summary>
    ///  <param name="fileName">the pdf file name with full path</param>
    ///  <param name="desiredPageWidth">The desired page width in inches.</param>
    ///  <param name="desiredPageHeight">The desired page height in inches.</param>
    ///  <param name="hAlignmentType">The chart horizontal alignment type in the output page.</param>
    ///  <param name="vAlignmentType">The chart vertical alignment type in the output page.</param>
    procedure ToPdf(fileName: string; desiredPageWidth: Single; desiredPageHeight: Single; hAlignmentType: DNPageLayoutAlignmentType; vAlignmentType: DNPageLayoutAlignmentType); overload;
    ///<summary>
    ///  Creates the chart pdf and saves it to a stream.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    procedure ToPdf(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Creates the chart pdf and saves it to a stream.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="desiredPageWidth">The desired page width in inches.</param>
    ///  <param name="desiredPageHeight">The desired page height in inches.</param>
    ///  <param name="hAlignmentType">The chart horizontal alignment type in the output page.</param>
    ///  <param name="vAlignmentType">The chart vertical alignment type in the output page.</param>
    procedure ToPdf(stream: DDN.mscorlib.DNStream; desiredPageWidth: Single; desiredPageHeight: Single; hAlignmentType: DNPageLayoutAlignmentType; vAlignmentType: DNPageLayoutAlignmentType); overload;
    ///<summary>
    ///  Creates the chart image and saves it to a file.
    ///  The extension of the file name determines the format of the image.
    ///</summary>
    ///  <param name="imageFile">The image file name with full path.</param>
    ///  <param name="options">Additional image creation options</param>
    ///<remarks><p>The format of the image is specified by using the extension of the file name.
    ///  For example, if you specify "myfile.png", then the image will be saved
    ///  in the PNG format. The following file extensions are recognized:
    ///  .bmp, .gif, .png, .jpg, .jpeg, .tiff, .tif, .emf.</p>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    ///<example>
    ///  Saves to Tiff with 300 dpi and CCITT4 compression.
    ///<code>
    ///  [C#]
    ///  ImageOrPrintOptions options = new ImageOrPrintOptions();
    ///  options.HorizontalResolution = 300;
    ///  options.VerticalResolution = 300;
    ///  options.TiffCompression = TiffCompression.CompressionCCITT4;
    ///  Workbook book = new Workbook(@"c:\test.xls");
    ///  book.Worksheets[0].Charts[0].ToImage(@"c:\chart.Tiff", options);
    ///  [VB]
    ///  Dim options As ImageOrPrintOptions =  New ImageOrPrintOptions()
    ///  options.HorizontalResolution = 300
    ///  options.VerticalResolution = 300
    ///  options.TiffCompression = TiffCompression.CompressionCCITT4
    ///  Dim book As Workbook =  New Workbook("c:\test.xls")
    ///  book.Worksheets(0).Charts(0).ToImage("c:\chart.Tiff", options)
    ///</code>
    ///  Saves to Jpeg with 300 dpi and 80 image quality.
    ///<code>
    ///  [C#]
    ///  ImageOrPrintOptions options = new ImageOrPrintOptions();
    ///  options.HorizontalResolution = 300;
    ///  options.VerticalResolution = 300;
    ///  options.Quality = 80;
    ///  Workbook book = new Workbook(@"c:\test.xls");
    ///  book.Worksheets[0].Charts[0].ToImage(@"c:\chart.Jpeg", options);
    ///  [VB]
    ///  Dim options As ImageOrPrintOptions =  New ImageOrPrintOptions()
    ///  options.HorizontalResolution = 300
    ///  options.VerticalResolution = 300
    ///  options.Quality = 80
    ///  Dim book As Workbook =  New Workbook("c:\test.xls")
    ///  book.Worksheets(0).Charts(0).ToImage("c:\chart.Jpeg", options)
    ///</code></example>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Creates the chart image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="options">Additional image creation options</param>
    ///<remarks><p>The format of the image is specified by using <c>options.ImageFormat</c>.
    ///  The following formats are supported:
    ///  ImageFormat.Bmp, ImageFormat.Gif, ImageFormat.Png, ImageFormat.Jpeg, ImageFormat.Tiff, ImageFormat.Emf.</p>
    ///  If the width or height is zero or the chart is not supported according to Supported Charts List, this method will do nothing.
    ///  Please refer to <a href="http://www.aspose.com/documentation/.net-components/aspose.cells-for-.net/converting-chart-to-image.html">Supported Charts List</a> for more details.
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns which axes exist on the chart.
    ///</summary>
    ///<remarks>
    ///  Normally, Pie, PieExploded, PiePie,PieBar, Pie3D, Pie3DExploded,Doughnut, DoughnutExploded is no axis.
    ///</remarks>
    function HasAxis(aixsType: DNAxisType; isPrimary: Boolean): Boolean;
    ///<summary>
    ///  Switches row/column.
    ///</summary>
    ///<returns>
    ///  False means switching row/column fails.
    ///</returns>
    function SwitchRowColumn: Boolean;
    ///<summary>
    ///  Gets the data source range of the chart .
    ///</summary>
    ///<returns>The data source.</returns>
    ///<remarks>
    ///  Only supports range.
    ///</remarks>
    function GetChartDataRange: string;
    ///<summary>
    ///  Specifies data range for a chart.
    ///</summary>
    ///  <param name="area">Specifies values from which to plot the data series</param>
    ///  <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.</param>
    procedure SetChartDataRange(area: string; isVertical: Boolean);
    ///<summary>
    ///  Detects if a chart's data source has changed.
    ///</summary>
    ///<remarks>
    ///  The method detects the changes in the chart's data source before rendering the chart to image format.
    ///  At first Chart.toImage call, the chart source data (e.g. XValuesParseData, ValuesParseData) will be recorded.
    ///  Before calling the Chart.toImage method again, call IsChartDataChanged method to check if Chart needs re-rendering.
    ///</remarks>
    ///<returns>Returns true if the chart has changed otherwise returns false</returns>
    function IsChartDataChanged: Boolean;
    ///<summary>
    ///  Refreshes pivot chart's data  from it's pivot data source.
    ///</summary>
    ///<remarks>
    ///  We will gather data from pivot data source to the pivot chart cache.
    ///  This method is only used to gather all data to a pivot chart.
    ///</remarks>
    procedure RefreshPivotData;
    ///<summary>
    ///  Moves the chart to a specified location.
    ///</summary>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    procedure Move(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Calculates the custom position of plot area, axes if the position of them are auto assigned.
    ///</summary>
    procedure Calculate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the builtin style.
    ///</summary>
    ///<remarks>
    ///  It should be between 1 and 48.
    ///  Return -1 if it's not be set.
    ///</remarks>
    property Style: Int32 read get_Style write set_Style;
    ///<summary>
    ///  Represents the chartShape;
    ///</summary>
    property ChartObject: DNChartShape read get_ChartObject;
    ///<summary>
    ///  Indicates whether hide the pivot chart field buttons only when the chart is PivotChart
    ///</summary>
    property HidePivotFieldButtons: Boolean read get_HidePivotFieldButtons write set_HidePivotFieldButtons;
    ///<summary>
    ///  Specifies the pivot controls that appear on the chart
    ///</summary>
    property PivotOptions: DNPivotOptions read get_PivotOptions;
    ///<summary>
    ///  The source is the data of the pivotTable.
    ///  If PivotSource is not empty ,the chart is PivotChart.
    ///</summary>
    ///<remarks>If the pivot table  "PivotTable1" in the Worksheet "Sheet1" in the file "Book1.xls".
    ///  The pivotSource could be "[Book1.xls]Sheet1!PivotTable1" if the chart and the PivotTable is not in the same workbook.
    ///  If you set this property ,the previous data source setting will be lost.
    ///</remarks>
    property PivotSource: string read get_PivotSource write set_PivotSource;
    ///<summary>
    ///  Gets and sets whether plot by row or column.
    ///</summary>
    property PlotBy: DNPlotDataByType read get_PlotBy;
    ///<summary>
    ///  Gets and sets  how to plot the empty cells.
    ///</summary>
    property PlotEmptyCellsType: DNPlotEmptyCellsType read get_PlotEmptyCellsType write set_PlotEmptyCellsType;
    ///<summary>
    ///  Indicates whether only plot visible cells.
    ///</summary>
    property PlotVisibleCells: Boolean read get_PlotVisibleCells write set_PlotVisibleCells;
    ///<summary>
    ///  Indicates whether displaying #N/A as blank value.
    ///</summary>
    property DisplayNaAsBlank: Boolean read get_DisplayNaAsBlank write set_DisplayNaAsBlank;
    ///<summary>
    ///  Gets and sets the name of the chart.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
    ///</summary>
    property SizeWithWindow: Boolean read get_SizeWithWindow write set_SizeWithWindow;
    ///<summary>
    ///  Gets the worksheet which contains this chart.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Returns all drawing shapes in this chart.
    ///</summary>
    property Shapes: DNShapeCollection read get_Shapes;
    ///<summary>
    ///  Gets and sets the printed chart size.
    ///</summary>
    property PrintSize: DNPrintSizeType read get_PrintSize write set_PrintSize;
    ///<summary>
    ///  Gets or sets a chart's type.
    ///</summary>
    property &Type: DNChartType read get_Type write set_Type;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Cells.Charts.SeriesCollection" />
    ///  collection representing the data series in the chart.
    ///</summary>
    property NSeries: DNSeriesCollection read get_NSeries;
    ///<summary>
    ///  Gets the chart's title.
    ///</summary>
    property Title: DNTitle read get_Title;
    ///<summary>
    ///  Gets the chart's sub-title.
    ///  Only for ODS format file.
    ///</summary>
    property SubTitle: DNTitle read get_SubTitle;
    ///<summary>
    ///  Gets the chart's plot area which includes axis tick labels.
    ///</summary>
    ///<remarks></remarks>
    property PlotArea: DNPlotArea read get_PlotArea;
    ///<summary>
    ///  Gets the chart area in the worksheet
    ///</summary>
    property ChartArea: DNChartArea read get_ChartArea;
    ///<summary>
    ///  Gets the chart's X axis.
    ///</summary>
    property CategoryAxis: DNAxis read get_CategoryAxis;
    ///<summary>
    ///  Gets the chart's Y axis.
    ///</summary>
    property ValueAxis: DNAxis read get_ValueAxis;
    ///<summary>
    ///  Gets the chart's second Y axis.
    ///</summary>
    property SecondValueAxis: DNAxis read get_SecondValueAxis;
    ///<summary>
    ///  Gets the chart's second X axis.
    ///</summary>
    property SecondCategoryAxis: DNAxis read get_SecondCategoryAxis;
    ///<summary>
    ///  Gets the chart's series axis.
    ///</summary>
    property SeriesAxis: DNAxis read get_SeriesAxis;
    ///<summary>
    ///  Gets the chart legend.
    ///</summary>
    property Legend: DNLegend read get_Legend;
    ///<summary>
    ///  Represents the chart data table.
    ///</summary>
    property ChartDataTable: DNChartDataTable read get_ChartDataTable;
    ///<summary>
    ///  Gets or sets a value indicating whether the chart legend will be displayed. Default is true.
    ///</summary>
    property ShowLegend: Boolean read get_ShowLegend write set_ShowLegend;
    ///<summary>
    ///  Gets or sets a value indicating whether the chart area is rectangular cornered.
    ///  Default is true.
    ///</summary>
    property IsRectangularCornered: Boolean read get_IsRectangularCornered write set_IsRectangularCornered;
    ///<summary>
    ///  Gets or sets a value indicating whether the chart displays a data table.
    ///</summary>
    property ShowDataTable: Boolean read get_ShowDataTable write set_ShowDataTable;
    ///<summary>
    ///  Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts, 0 to 360.
    ///</summary>
    property FirstSliceAngle: Int32 read get_FirstSliceAngle write set_FirstSliceAngle;
    ///<summary>
    ///  Returns or sets the space between bar or column clusters, as a percentage of the bar or column width.
    ///  The value of this property must be between 0 and 500.
    ///</summary>
    property GapWidth: Int32 read get_GapWidth write set_GapWidth;
    ///<summary>
    ///  Gets or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.
    ///  The value of this property must be between 0 and 500.
    ///</summary>
    property GapDepth: Int32 read get_GapDepth write set_GapDepth;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Charts.Chart.Floor" />
    ///  object that represents the walls of a 3-D chart.
    ///</summary>
    ///<remarks>This property doesn't apply to 3-D pie charts.</remarks>
    property Floor: DNFloor read get_Floor;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Charts.Chart.Walls" />
    ///  object that represents the walls of a 3-D chart.
    ///</summary>
    ///<remarks>This property doesn't apply to 3-D pie charts.</remarks>
    property Walls: DNWalls read get_Walls;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Charts.Chart.Walls" />
    ///  object that represents the back wall of a 3-D chart.
    ///</summary>
    property BackWall: DNWalls read get_BackWall;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Charts.Chart.Walls" />
    ///  object that represents the side wall of a 3-D chart.
    ///</summary>
    property SideWall: DNWalls read get_SideWall;
    ///<summary>
    ///  True if gridlines are drawn two-dimensionally on a 3-D chart.
    ///</summary>
    property WallsAndGridlines2D: Boolean read get_WallsAndGridlines2D write set_WallsAndGridlines2D;
    ///<summary>
    ///  Represents the rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees).
    ///</summary>
    ///<remarks>
    ///  The value of this property must be from 0 to 360, except for 3-D bar charts, where the value must be from 0 to 44.
    ///  The default value is 20. Applies only to 3-D charts.
    ///</remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Represents the elevation of the 3-D chart view, in degrees.
    ///</summary>
    ///<remarks>
    ///  The chart elevation is the height at which you view the chart, in degrees.
    ///  The default is 15 for most chart types.
    ///  The value of this property must be between -90 and 90, except for 3-D bar charts, where it must be between 0 and 44.
    ///</remarks>
    property Elevation: Int32 read get_Elevation write set_Elevation;
    ///<summary>
    ///  True if the chart axes are at right angles.Applies only for 3-D charts(except Column3D and 3-D Pie Charts).
    ///</summary>
    ///<remarks>
    ///  If this property is True, the Perspective property is ignored.
    ///</remarks>
    property RightAngleAxes: Boolean read get_RightAngleAxes write set_RightAngleAxes;
    ///<summary>
    ///  True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
    ///  The RightAngleAxes property must be True.
    ///</summary>
    property AutoScaling: Boolean read get_AutoScaling write set_AutoScaling;
    ///<summary>
    ///  Returns or sets the height of a 3-D chart as a percentage of the chart width (between 5 and 500 percent).
    ///</summary>
    property HeightPercent: Int32 read get_HeightPercent write set_HeightPercent;
    ///<summary>
    ///  Returns or sets the perspective for the 3-D chart view. Must be between 0 and 100.
    ///  This property is ignored if the RightAngleAxes property is True.
    ///</summary>
    property Perspective: Int16 read get_Perspective write set_Perspective;
    ///<summary>
    ///  Indicates whether the chart is a 3d chart.
    ///</summary>
    property Is3D: Boolean read get_Is3D;
    ///<summary>
    ///  Represents the depth of a 3-D chart as a percentage of the chart width (between 20 and 2000 percent).
    ///</summary>
    property DepthPercent: Int32 read get_DepthPercent write set_DepthPercent;
    ///<summary>
    ///  Gets actual size of chart
    ///</summary>
    property ActualChartSize: DDN.System.Drawing.DNSize read get_ActualChartSize;
    ///<summary>
    ///  Represents the way the chart is attached to the cells below it.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents the page setup description in this chart.
    ///</summary>
    property PageSetup: DNPageSetup read get_PageSetup;
    ///<summary>
    ///  Gets the line.
    ///</summary>
    property Line: DNLine read get_Line;
  end;

  TDNChart = class(TDNGenericImport<DNChartClass, DNChart>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartDataTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA2F420F-A4BA-5226-98C1-804325C2900E}']
  end;

  ///<summary>
  ///  Represents a chart data table.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 25, 10);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  chart.IsDataTableShown = true;
  ///  //Getting Chart Table
  ///  ChartDataTable chartTable = chart.ChartDataTable;
  ///  //Setting Chart Table Font Color
  ///  chartTable.Font.Color = System.Drawing.Color.Red;
  ///  //Setting Legend Key VisibilityOptions
  ///  chartTable.ShowLegendKey = false;
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.Column, 5, 0, 25, 10)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  chart.IsDataTableShown = True
  ///  'Getting Chart Table
  ///  Dim chartTable As ChartDataTable = chart.ChartDataTable
  ///  'Setting Chart Table Font Color
  ///  chartTable.Font.Color = System.Drawing.Color.Red
  ///  'Setting Legend Key VisibilityOptions
  ///  chartTable.ShowLegendKey = False
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.ChartDataTable')]
  DNChartDataTable = interface(DDN.mscorlib.DNObject)
  ['{C48F443C-9480-37EB-B0BC-E9953284975F}']
  { getters & setters } 

    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_HasBorderHorizontal: Boolean;
    procedure set_HasBorderHorizontal(value: Boolean);
    function get_HasBorderVertical: Boolean;
    procedure set_HasBorderVertical(value: Boolean);
    function get_HasBorderOutline: Boolean;
    procedure set_HasBorderOutline(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_Border: DNLine;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartDataTable.Font" />
    ///  object which represents the font setting of the specified chart data table.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes.
    ///  The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartDataTable.BackgroundMode property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Background: DNBackgroundMode read get_Background write set_Background;
    ///<summary>
    ///  True if the chart data table has horizontal cell borders
    ///</summary>
    property HasBorderHorizontal: Boolean read get_HasBorderHorizontal write set_HasBorderHorizontal;
    ///<summary>
    ///  True if the chart data table has vertical cell borders
    ///</summary>
    property HasBorderVertical: Boolean read get_HasBorderVertical write set_HasBorderVertical;
    ///<summary>
    ///  True if the chart data table has outline borders
    ///</summary>
    property HasBorderOutline: Boolean read get_HasBorderOutline write set_HasBorderOutline;
    ///<summary>
    ///  True if the data label legend key is visible.
    ///</summary>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Returns a Border object that represents the border of the object
    ///</summary>
    property Border: DNLine read get_Border;
  end;

  TDNChartDataTable = class(TDNGenericImport<DNChartDataTableClass, DNChartDataTable>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{770A28E9-4076-5CCF-9DD2-713B297F2CC1}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the frame object in a chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartFrame')]
  DNChartFrame = interface(DDN.mscorlib.DNObject)
  ['{766EA04A-5575-34A5-A401-F9F4F122D790}']
  { getters & setters } 

    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Set position of the frame to automatic
    ///</summary>
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the size of the plot area size includes the tick marks, and the axis labels.
    ///  False specifies that the size shall determine the size of the plot area, the tick marks, and the axis labels.
    ///</summary>
    ///<remarks>
    ///  Only for Xlsx file.
    ///</remarks>
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.Font property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFont: DNFont read get_TextFont;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes. The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.BackgroundMode property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Background: DNBackgroundMode read get_Background write set_Background;
    ///<summary>
    ///  Indicates whether the chart frame is automatic sized.
    ///</summary>
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    ///<summary>
    ///  Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  X In Pixels = X * Chart.ChartObject.Width / 4000;
    ///</remarks>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  Y In Pixels = Y * Chart.ChartObject.Height / 4000;
    ///</remarks>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets or sets the height of frame in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  Height In Pixels = Y * Chart.ChartObject.Height / 4000;
    ///</remarks>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets the width of frame in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  Width In Pixels = Width * Chart.ChartObject.Height / 4000;
    ///</remarks>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  True if the frame has a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.ShapeProperties" />
    ///  object.
    ///</summary>
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    ///<summary>
    ///  Indicates whether default position(DefaultX, DefaultY, DefaultWidth and DefaultHeight) are set.
    ///</summary>
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    ///<summary>
    ///  Represents x of default position
    ///</summary>
    property DefaultX: Int32 read get_DefaultX;
    ///<summary>
    ///  Represents y of default position
    ///</summary>
    property DefaultY: Int32 read get_DefaultY;
    ///<summary>
    ///  Represents width of default position
    ///</summary>
    property DefaultWidth: Int32 read get_DefaultWidth;
    ///<summary>
    ///  Represents height of default position
    ///</summary>
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNChartFrame = class(TDNGenericImport<DNChartFrameClass, DNChartFrame>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartAreaClass = interface(DNChartFrameClass)
  ['{D5FCECA9-F6B4-5604-A9B5-0AC6B0C3355F}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the chart area in the worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  //Getting Chart Area
  ///  ChartArea chartArea = chart.ChartArea;
  ///  //Setting the foreground color of the chart area
  ///  chartArea.Area.ForegroundColor = Color.Yellow;
  ///  //Setting Chart Area Shadow
  ///  chartArea.Shadow = true;
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  'Getting Chart Area
  ///  Dim chartArea As ChartArea = chart.ChartArea
  ///  'Setting the foreground color of the chart area
  ///  chartArea.Area.ForegroundColor = Color.Yellow
  ///  'Setting Chart Area Shadow
  ///  chartArea.Shadow = True
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.ChartArea')]
  DNChartArea = interface(DNChartFrame)
  ['{9015F893-EC7A-364A-8AA8-F3FF14FB676E}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Font: DNFont;
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Set position of the frame to automatic
    ///</summary>
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or gets the horizontal offset from its upper left corner column.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets or gets the vertical offset from its upper left corner row.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets or sets the vertical offset from its lower right corner row.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets the horizontal offset from its lower right corner column.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartArea.Font" />
    ///  object of the specified chartarea object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Indicates whether the size of the plot area size includes the tick marks, and the axis labels.
    ///  False specifies that the size shall determine the size of the plot area, the tick marks, and the axis labels.
    ///</summary>
    ///<remarks>
    ///  Only for Xlsx file.
    ///</remarks>
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.Font property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFont: DNFont read get_TextFont;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes. The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.BackgroundMode property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Background: DNBackgroundMode read get_Background write set_Background;
    ///<summary>
    ///  Indicates whether the chart frame is automatic sized.
    ///</summary>
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    ///<summary>
    ///  True if the frame has a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.ShapeProperties" />
    ///  object.
    ///</summary>
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    ///<summary>
    ///  Indicates whether default position(DefaultX, DefaultY, DefaultWidth and DefaultHeight) are set.
    ///</summary>
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    ///<summary>
    ///  Represents x of default position
    ///</summary>
    property DefaultX: Int32 read get_DefaultX;
    ///<summary>
    ///  Represents y of default position
    ///</summary>
    property DefaultY: Int32 read get_DefaultY;
    ///<summary>
    ///  Represents width of default position
    ///</summary>
    property DefaultWidth: Int32 read get_DefaultWidth;
    ///<summary>
    ///  Represents height of default position
    ///</summary>
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNChartArea = class(TDNGenericImport<DNChartAreaClass, DNChartArea>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartTextFrameClass = interface(DNChartFrameClass)
  ['{E16A3156-507E-59E0-AFF8-8C653567F172}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the frame object which contains text.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.ChartTextFrame')]
  DNChartTextFrame = interface(DNChartFrame)
  ['{E4A9C2AF-DE51-3607-B576-E8CC687D1831}']
  { getters & setters } 

    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Set position of the frame to automatic
    ///</summary>
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates the text is auto generated.
    ///</summary>
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    ///<summary>
    ///  Indicates whether this data labels is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Gets and sets the text horizontal alignment.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets or sets the text vertical alignment of text.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Represents text rotation angle.
    ///</summary>
    ///<remarks><br>0: Not rotated.</br><br>255: Top to Bottom.</br><br>-90: Downward.</br><br>90: Upward.</br></remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets or sets the text of a frame's title.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets and sets a reference to the worksheet.
    ///</summary>
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartTextFrame.ReadingOrder property.
    ///  This property will be removed 12 months later since March 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    ///<summary>
    ///  Gets and sets the direction of text.
    ///</summary>
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    ///<summary>
    ///  Gets or sets a value indicating whether the text is wrapped.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
    ///  when text within a shape is scaled in order to contain all the text inside.
    ///</summary>
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    ///<summary>
    ///  Indicates whether the size of the plot area size includes the tick marks, and the axis labels.
    ///  False specifies that the size shall determine the size of the plot area, the tick marks, and the axis labels.
    ///</summary>
    ///<remarks>
    ///  Only for Xlsx file.
    ///</remarks>
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.Font property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFont: DNFont read get_TextFont;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes. The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.BackgroundMode property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Background: DNBackgroundMode read get_Background write set_Background;
    ///<summary>
    ///  Indicates whether the chart frame is automatic sized.
    ///</summary>
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    ///<summary>
    ///  Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  X In Pixels = X * Chart.ChartObject.Width / 4000;
    ///</remarks>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  Y In Pixels = Y * Chart.ChartObject.Height / 4000;
    ///</remarks>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets or sets the height of frame in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  Height In Pixels = Y * Chart.ChartObject.Height / 4000;
    ///</remarks>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets the width of frame in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks>
    ///  How to convert units of 1/4000 to pixels?
    ///  Width In Pixels = Width * Chart.ChartObject.Height / 4000;
    ///</remarks>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  True if the frame has a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.ShapeProperties" />
    ///  object.
    ///</summary>
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    ///<summary>
    ///  Indicates whether default position(DefaultX, DefaultY, DefaultWidth and DefaultHeight) are set.
    ///</summary>
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    ///<summary>
    ///  Represents x of default position
    ///</summary>
    property DefaultX: Int32 read get_DefaultX;
    ///<summary>
    ///  Represents y of default position
    ///</summary>
    property DefaultY: Int32 read get_DefaultY;
    ///<summary>
    ///  Represents width of default position
    ///</summary>
    property DefaultWidth: Int32 read get_DefaultWidth;
    ///<summary>
    ///  Represents height of default position
    ///</summary>
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNChartTextFrame = class(TDNGenericImport<DNChartTextFrameClass, DNChartTextFrame>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNDataLabelsClass = interface(DNChartTextFrameClass)
  ['{92033AD8-3CDD-5B1A-A7F1-4432F1A01978}']
  end;

  ///<summary>
  ///  Encapsulates a collection of all the DataLabel objects for the specified Series.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Set the DataLabels in the chart
  ///  DataLabels datalabels;
  ///  for (int i = 0; i  &lt;chart.NSeries.Count; i++)
  ///  {
  ///  datalabels = chart.NSeries[i].DataLabels;
  ///  //Set the position of DataLabels
  ///  datalabels.Position = LabelPositionType.InsideBase;
  ///  //Show the category name in the DataLabels
  ///  datalabels.ShowCategoryName = true;
  ///  //Show the value in the DataLabels
  ///  datalabels.ShowValue = true;
  ///  //Not show the percentage in the DataLabels
  ///  datalabels.ShowPercentage = false;
  ///  //Not show the legend key.
  ///  datalabels.ShowLegendKey = false;
  ///  }
  ///  [Visual Basic]
  ///  'Set the DataLabels in the chart
  ///  Dim datalabels As DataLabels
  ///  Dim i As Integer
  ///  For i = 0 To chart.NSeries.Count - 1 Step 1
  ///  datalabels = chart.NSeries(i).DataLabels
  ///  'Set the position of DataLabels
  ///  datalabels.Position = LabelPositionType.InsideBase
  ///  'Show the category name in the DataLabels
  ///  datalabels.ShowCategoryName= True
  ///  'Show the value in the DataLabels
  ///  datalabels.ShowValue = True
  ///  'Not show the percentage in the DataLabels
  ///  datalabels.ShowPercentage = False
  ///  'Not show the legend key.
  ///  datalabels.ShowLegendKey = False
  ///  Next
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.DataLabels')]
  DNDataLabels = interface(DNChartTextFrame)
  ['{E2736172-2CC8-33A9-BED1-76A88806A320}']
  { getters & setters } 

    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowCellRange: Boolean;
    procedure set_ShowCellRange(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_NumberFormatLinked: Boolean;
    procedure set_NumberFormatLinked(value: Boolean);
    function get_Font: DNFont;
    function get_Separator: DNDataLablesSeparatorType;
    procedure set_Separator(value: DNDataLablesSeparatorType);
    function get_SeparatorType: DNDataLabelsSeparatorType;
    procedure set_SeparatorType(value: DNDataLabelsSeparatorType);
    function get_SeparatorValue: string;
    procedure set_SeparatorValue(value: string);
    function get_Position: DNLabelPositionType;
    procedure set_Position(value: DNLabelPositionType);
    function get_ShapeType: DNDataLabelShapeType;
    procedure set_ShapeType(value: DNDataLabelShapeType);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_TextFont: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.DataLabels.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Indicates the text is auto generated.
    ///</summary>
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    ///<summary>
    ///  Gets and sets the direction of text.
    ///</summary>
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    ///<summary>
    ///  Gets or sets the text of data label.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets a value indicating whether the text is wrapped.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the linked source.
    ///</summary>
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Represents a specified chart's data label values display behavior. True displays the values. False to hide.
    ///</summary>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    ///<summary>
    ///  Indicates whether showing cell range as the data labels.
    ///</summary>
    property ShowCellRange: Boolean read get_ShowCellRange write set_ShowCellRange;
    ///<summary>
    ///  Represents a specified chart's data label percentage value display behavior. True displays the percentage value. False to hide.
    ///</summary>
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    ///<summary>
    ///  Represents a specified chart's data label percentage value display behavior. True displays the percentage value. False to hide.
    ///</summary>
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    ///<summary>
    ///  Represents a specified chart's data label category name display behavior.True to display the category name for the data labels on a chart. False to hide.
    ///</summary>
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    ///<summary>
    ///  Returns or sets a Boolean to indicate the series name display behavior for the data labels on a chart.
    ///  True to show the series name. False to hide.
    ///</summary>
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    ///<summary>
    ///  Represents a specified chart's data label legend key display behavior.
    ///  True if the data label legend key is visible.
    ///</summary>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Represents the format string for the DataLabels object.
    ///</summary>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Gets and sets the built-in number format.
    ///</summary>
    property Number: Int32 read get_Number write set_Number;
    ///<summary>
    ///  True if the number format is linked to the cells
    ///  (so that the number format changes in the labels when it changes in the cells).
    ///</summary>
    property NumberFormatLinked: Boolean read get_NumberFormatLinked write set_NumberFormatLinked;
    ///<summary>
    ///  Gets the font of the DataLabels;
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets or sets the separator type used for the data labels on a chart.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use DataLabels.SeparatorType property.
    ///  This property will be removed 12 months later since September 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Separator: DNDataLablesSeparatorType read get_Separator write set_Separator;
    ///<summary>
    ///  Gets or sets the separator type used for the data labels on a chart.
    ///</summary>
    ///<remarks>
    ///  To set custom separator, please set  the property <see cref="P:Aspose.Cells.Charts.DataLabels.SeparatorType" />
    ///  as <see cref="F:Aspose.Cells.Charts.DataLabelsSeparatorType.Custom" />
    ///  and then specify the expected value for <see cref="P:Aspose.Cells.Charts.DataLabels.SeparatorValue" />
    ///  .
    ///</remarks>
    property SeparatorType: DNDataLabelsSeparatorType read get_SeparatorType write set_SeparatorType;
    ///<summary>
    ///  Gets or sets the separator value used for the data labels on a chart.
    ///</summary>
    property SeparatorValue: string read get_SeparatorValue write set_SeparatorValue;
    ///<summary>
    ///  Represents the position of the data label.
    ///</summary>
    property Position: DNLabelPositionType read get_Position write set_Position;
    ///<summary>
    ///  Gets or sets  shape type of data label.
    ///</summary>
    property ShapeType: DNDataLabelShapeType read get_ShapeType write set_ShapeType;
    ///<summary>
    ///  Indicates whether this data labels is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Gets and sets the text horizontal alignment.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets or sets the text vertical alignment of text.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Represents text rotation angle.
    ///</summary>
    ///<remarks><br>0: Not rotated.</br><br>255: Top to Bottom.</br><br>-90: Downward.</br><br>90: Upward.</br></remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartTextFrame.ReadingOrder property.
    ///  This property will be removed 12 months later since March 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    ///<summary>
    ///  Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
    ///  when text within a shape is scaled in order to contain all the text inside.
    ///</summary>
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property TextFont: DNFont read get_TextFont;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNDataLabels = class(TDNGenericImport<DNDataLabelsClass, DNDataLabels>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNDisplayUnitLabelClass = interface(DNChartTextFrameClass)
  ['{6C445F4F-0F9E-5550-B81F-E6D448051353}']
  end;

  ///<summary>
  ///  Represents the display unit label.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "A4" cell
  ///  worksheet.Cells["A4"].PutValue(200);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a sample value to "B4" cell
  ///  worksheet.Cells["B4"].PutValue(40);
  ///  //Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells["C1"].PutValue("Q1");
  ///  //Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells["C2"].PutValue("Q2");
  ///  //Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells["C3"].PutValue("Y1");
  ///  //Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells["C4"].PutValue("Y2");
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", true);
  ///  //Setting the data source for the category data of NSeries
  ///  chart.NSeries.CategoryData = "C1:C4";
  ///  //Setting the display unit of value(Y) axis.
  ///  chart.ValueAxis.DisplayUnit = DisplayUnitType.Hundreds;
  ///  DisplayUnitLabel displayUnitLabel = chart.ValueAxis.DisplayUnitLabel;
  ///  //Setting the custom display unit label
  ///  displayUnitLabel.Text = "100";
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Excel object
  ///  Dim sheetIndex As Int32 = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "A4" cell
  ///  worksheet.Cells("A4").PutValue(200)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a sample value to "B4" cell
  ///  worksheet.Cells("B4").PutValue(40)
  ///  'Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells("C1").PutValue("Q1")
  ///  'Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells("C2").PutValue("Q2")
  ///  'Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells("C3").PutValue("Y1")
  ///  'Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells("C4").PutValue("Y2")
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Int32 = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", True)
  ///  'Setting the data source for the category data of NSeries
  ///  Chart.NSeries.CategoryData = "C1:C4"
  ///  'Setting the display unit of value(Y) axis.
  ///  chart.ValueAxis.DisplayUnit = DisplayUnitType.Hundreds
  ///  Dim displayUnitLabel As DisplayUnitLabel = chart.ValueAxis.DisplayUnitLabel
  ///  'Setting the custom display unit label
  ///  displayUnitLabel.Text = "100"
  ///  'Saving the Excel file
  ///  workbook.Save("C:\\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.DisplayUnitLabel')]
  DNDisplayUnitLabel = interface(DNChartTextFrame)
  ['{200EE937-F507-36FB-98CA-B838B3CA1AB2}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of display unit label.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.DisplayUnitLabel.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes. The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Indicates the text is auto generated.
    ///</summary>
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    ///<summary>
    ///  Indicates whether this data labels is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Gets and sets the text horizontal alignment.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets or sets the text vertical alignment of text.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Represents text rotation angle.
    ///</summary>
    ///<remarks><br>0: Not rotated.</br><br>255: Top to Bottom.</br><br>-90: Downward.</br><br>90: Upward.</br></remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets and sets a reference to the worksheet.
    ///</summary>
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartTextFrame.ReadingOrder property.
    ///  This property will be removed 12 months later since March 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    ///<summary>
    ///  Gets and sets the direction of text.
    ///</summary>
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    ///<summary>
    ///  Gets or sets a value indicating whether the text is wrapped.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
    ///  when text within a shape is scaled in order to contain all the text inside.
    ///</summary>
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNDisplayUnitLabel = class(TDNGenericImport<DNDisplayUnitLabelClass, DNDisplayUnitLabel>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNLegendClass = interface(DNChartTextFrameClass)
  ['{A11700CE-1F90-5E78-8104-8A4F2044D173}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the chart legend.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Set Legend's width and height
  ///  Legend legend = chart.Legend;
  ///  //Legend is at right side of chart by default.
  ///  //If the legend is at left or right side of the chart, setting Legend.X property will not take effect.
  ///  //If the legend is at top or bottom side of the chart, setting Legend.Y property will not take effect.
  ///  legend.Y = 1500;
  ///  legend.Width = 50;
  ///  legend.Height = 50;
  ///  //Set legend's position
  ///  legend.Position = LegendPositionType.Left;
  ///  [Visual Basic]
  ///  'Set Legend's width and height
  ///  Dim legend as Legend = chart.Legend
  ///  'Legend is at right side of chart by default.
  ///  'If the legend is at left or right side of the chart, setting Legend.X property will not take effect.
  ///  'If the legend is at top or bottom side of the chart, setting Legend.Y property will not take effect.
  ///  legend.Y = 1500
  ///  legend.Width = 50
  ///  legend.Height = 50
  ///  'Set legend's position
  ///  legend.Position = LegendPositionType.Left
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Legend')]
  DNLegend = interface(DNChartTextFrame)
  ['{25EB655F-3C68-382C-9C27-30243E30C2ED}']
  { getters & setters } 

    function get_Position: DNLegendPositionType;
    procedure set_Position(value: DNLegendPositionType);
    function get_LegendEntries: DNLegendEntryCollection;
    function get_LegendEntriesLabels: DDN.mscorlib.DNArrayList;
    function get_IsOverLay: Boolean;
    procedure set_IsOverLay(value: Boolean);
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the legend position type.
    ///</summary>
    ///<remarks><br>Default position is right.</br><br>If the legend is at left or right side of the chart, setting Legend.X property will not take effect.</br><br>If the legend is at top or bottom side of the chart, setting Legend.Y property will not take effect.</br></remarks>
    property Position: DNLegendPositionType read get_Position write set_Position;
    ///<summary>
    ///  Gets a collection of all the LegendEntry objects in the specified chart legend.
    ///  Setting the legend entries of the surface chart is not supported.
    ///  So it will return null if the chart type is surface chart type.
    ///</summary>
    property LegendEntries: DNLegendEntryCollection read get_LegendEntries;
    ///<summary>
    ///  Gets the labels of the legend entries after call Chart.Calculate() method.
    ///</summary>
    property LegendEntriesLabels: DDN.mscorlib.DNArrayList read get_LegendEntriesLabels;
    ///<summary>
    ///  Gets or sets whether other chart elements shall be allowed to overlap this chart element.
    ///</summary>
    property IsOverLay: Boolean read get_IsOverLay write set_IsOverLay;
    ///<summary>
    ///  Indicates the text is auto generated.
    ///</summary>
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    ///<summary>
    ///  Indicates whether this data labels is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Gets and sets the text horizontal alignment.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets or sets the text vertical alignment of text.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Represents text rotation angle.
    ///</summary>
    ///<remarks><br>0: Not rotated.</br><br>255: Top to Bottom.</br><br>-90: Downward.</br><br>90: Upward.</br></remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets or sets the text of a frame's title.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets and sets a reference to the worksheet.
    ///</summary>
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartTextFrame.ReadingOrder property.
    ///  This property will be removed 12 months later since March 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    ///<summary>
    ///  Gets and sets the direction of text.
    ///</summary>
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    ///<summary>
    ///  Gets or sets a value indicating whether the text is wrapped.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
    ///  when text within a shape is scaled in order to contain all the text inside.
    ///</summary>
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNLegend = class(TDNGenericImport<DNLegendClass, DNLegend>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTitleClass = interface(DNChartTextFrameClass)
  ['{7DC9C812-6B11-5C6A-A67F-077C3F676E52}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the title of chart or axis.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Setting the title of a chart
  ///  chart.Title.Text = "Title";
  ///  //Setting the font color of the chart title to blue
  ///  chart.Title.Font.Color = Color.Blue;
  ///  //Setting the title of category axis of the chart
  ///  chart.CategoryAxis.Title.Text = "Category";
  ///  //Setting the title of value axis of the chart
  ///  chart.ValueAxis.Title.Text = "Value";
  ///  [Visual Basic]
  ///  'Setting the title of a chart
  ///  chart.Title.Text = "Title"
  ///  'Setting the font color of the chart title to blue
  ///  chart.Title.Font.Color = Color.Blue
  ///  'Setting the title of category axis of the chart
  ///  chart.CategoryAxis.Title.Text = "Category"
  ///  'Setting the title of value axis of the chart
  ///  chart.ValueAxis.Title.Text = "Value"
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Title')]
  DNTitle = interface(DNChartTextFrame)
  ['{5C911F59-81B3-3362-984D-9E967A46E06C}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_OverLay: Boolean;
    procedure set_OverLay(value: Boolean);
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Gets rich text formatting of this Title.
    ///</summary>
    ///<returns>returns FontSetting array</returns>
    function Characters: TArray<DNFontSetting>; overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting; overload;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of display unit label.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Represents whether the title is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Gets or sets the x coordinate of the upper left corner in units of 1/4000 of the chart area.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets or sets the y coordinate of the upper left corner in units of 1/4000 of the chart area.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Represents overlay centered title on chart without resizing chart.
    ///</summary>
    property OverLay: Boolean read get_OverLay write set_OverLay;
    ///<summary>
    ///  Indicates the text is auto generated.
    ///</summary>
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    ///<summary>
    ///  Indicates whether this data labels is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Gets and sets the text horizontal alignment.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets or sets the text vertical alignment of text.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Represents text rotation angle.
    ///</summary>
    ///<remarks><br>0: Not rotated.</br><br>255: Top to Bottom.</br><br>-90: Downward.</br><br>90: Upward.</br></remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets and sets a reference to the worksheet.
    ///</summary>
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartTextFrame.ReadingOrder property.
    ///  This property will be removed 12 months later since March 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    ///<summary>
    ///  Gets and sets the direction of text.
    ///</summary>
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    ///<summary>
    ///  Gets or sets a value indicating whether the text is wrapped.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets or sets whether a shape should be auto-fit to fully contain the text described within it. Auto-fitting is
    ///  when text within a shape is scaled in order to contain all the text inside.
    ///</summary>
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNTitle = class(TDNGenericImport<DNTitleClass, DNTitle>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNPlotAreaClass = interface(DNChartFrameClass)
  ['{532BE37C-09AC-5838-BC0A-CE4A135F371C}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the plot area in a chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.PlotArea')]
  DNPlotArea = interface(DNChartFrame)
  ['{C7D276A4-5D70-3297-8EA1-3F904DBF9B2C}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_InnerX: Int32;
    procedure set_InnerX(value: Int32);
    function get_InnerY: Int32;
    procedure set_InnerY(value: Int32);
    function get_InnerHeight: Int32;
    procedure set_InnerHeight(value: Int32);
    function get_InnerWidth: Int32;
    procedure set_InnerWidth(value: Int32);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    ///<summary>
    ///  Set position of the plot area to automatic
    ///</summary>
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or gets the x coordinate of the upper left corner of plot-area bounding box in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets or gets the y coordinate of the upper top corner  of plot-area bounding box in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets or sets the height of plot-area bounding box in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets the width of plot-area bounding box in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Gets or gets the x coordinate of the upper top corner of plot area in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property InnerX: Int32 read get_InnerX write set_InnerX;
    ///<summary>
    ///  Gets or gets the x coordinate of the upper top corner of plot area in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property InnerY: Int32 read get_InnerY write set_InnerY;
    ///<summary>
    ///  Gets or sets the height of plot area in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property InnerHeight: Int32 read get_InnerHeight write set_InnerHeight;
    ///<summary>
    ///  Gets or sets the width  of plot area in units of 1/4000 of the chart area.
    ///</summary>
    ///<remarks><p>The plot-area bounding box includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If the value is not created by MS Excel, please call Chart.Calculate() method before calling this method. </p>
    ///  <p>The <b>X</b>
    ///  , <b>Y</b>
    ///  , <b>Width</b>
    ///  and <b>Height</b>
    ///  of <b>PlotArea</b>
    ///  represents the plot-area
    ///  bounding box that includes the plot area, tick marks(tick labels), and a small border around the tick marks.
    ///  If you want to get actual size of plot area, you should call <b>InnerX</b>
    ///  , <b>InnerY</b>
    ///  , <b>InnerWidth</b>
    ///  and
    ///<b>InnerHeight</b>
    ///  properties.</p>
    ///  <p>For excel 2007 or latter, the default value is zero. you should call get the value after calling Chart.Calculate().</p>
    ///</remarks>
    property InnerWidth: Int32 read get_InnerWidth write set_InnerWidth;
    ///<summary>
    ///  Indicates whether the plot area is automatic sized.
    ///</summary>
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    ///<summary>
    ///  Indicates whether the size of the plot area size includes the tick marks, and the axis labels.
    ///  False specifies that the size shall determine the size of the plot area, the tick marks, and the axis labels.
    ///</summary>
    ///<remarks>
    ///  Only for Xlsx file.
    ///</remarks>
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.Font property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFont: DNFont read get_TextFont;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.ChartFrame.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes. The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ChartFrame.BackgroundMode property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Background: DNBackgroundMode read get_Background write set_Background;
    ///<summary>
    ///  True if the frame has a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartFrame.ShapeProperties" />
    ///  object.
    ///</summary>
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    ///<summary>
    ///  Indicates whether default position(DefaultX, DefaultY, DefaultWidth and DefaultHeight) are set.
    ///</summary>
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    ///<summary>
    ///  Represents x of default position
    ///</summary>
    property DefaultX: Int32 read get_DefaultX;
    ///<summary>
    ///  Represents y of default position
    ///</summary>
    property DefaultY: Int32 read get_DefaultY;
    ///<summary>
    ///  Represents width of default position
    ///</summary>
    property DefaultWidth: Int32 read get_DefaultWidth;
    ///<summary>
    ///  Represents height of default position
    ///</summary>
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNPlotArea = class(TDNGenericImport<DNPlotAreaClass, DNPlotArea>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{29DFA16C-312F-5053-8D60-D83200E82A18}']
  end;

  ///<summary>
  ///  Represents a single point in a series in a chart.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.PieExploded, 5, 0, 25, 10);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  //Show Data Labels
  ///  chart.NSeries[0].DataLabels.IsValueShown = true;
  ///  for (int i = 0; i  &lt; chart.NSeries[0].Points.Count; i++)
  ///  {
  ///  //Get Data Point
  ///  ChartPoint point = chart.NSeries[0].Points[i];
  ///  //Set Pir Explosion
  ///  point.Explosion = 15;
  ///  //Set Border Color
  ///  point.Border.Color = System.Drawing.Color.Red;
  ///  }
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.PieExploded, 5, 0, 25, 10)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  'Show Data Labels
  ///  chart.NSeries(0).DataLabels.IsValueShown = True
  ///  For i As Integer = 0 To chart.NSeries(0).Points.Count - 1
  ///  'Get Data Point
  ///  Dim point As ChartPoint = chart.NSeries(0).Points(i)
  ///  'Set Pir Explosion
  ///  point.Explosion = 15
  ///  'Set Border Color
  ///  point.Border.Color = System.Drawing.Color.Red
  ///  Next i
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.ChartPoint')]
  DNChartPoint = interface(DDN.mscorlib.DNObject)
  ['{E30C9BE8-0B1D-351C-8AB1-4451DE67A870}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_Marker: DNMarker;
    function get_DataLabels: DNDataLabels;
    function get_YValue: DDN.mscorlib.DNObject;
    procedure set_YValue(value: DDN.mscorlib.DNObject);
    function get_YValueType: DNCellValueType;
    function get_XValue: DDN.mscorlib.DNObject;
    procedure set_XValue(value: DDN.mscorlib.DNObject);
    function get_XValueType: DNCellValueType;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsInSecondaryPlot: Boolean;
    procedure set_IsInSecondaryPlot(value: Boolean);
    function get_ShapeX: Int32;
    function get_ShapeY: Int32;
    function get_ShapeWidth: Int32;
    function get_ShapeHeight: Int32;
    function get_ShapeXPx: Int32;
    function get_ShapeYPx: Int32;
    function get_ShapeWidthPx: Int32;
    function get_ShapeHeightPx: Int32;
    function get_BorderWidthPx: Int32;
    function get_RadiusPx: Int32;
    function get_InnerRadiusPx: Int32;
    function get_StartAngle: Single;
    function get_EndAngle: Single;
    function get_ArcStartPointXPx: Single;
    function get_ArcStartPointYPx: Single;
    function get_ArcEndPointXPx: Single;
    function get_ArcEndPointYPx: Single;
    function get_InnerArcStartPointXPx: Single;
    function get_InnerArcStartPointYPx: Single;
    function get_InnerArcEndPointXPx: Single;
    function get_InnerArcEndPointYPx: Single;

  { methods } 

    ///<summary>
    ///  Gets the number of top points after calls Chart.Calculate() method.
    ///</summary>
    function GetTopPointCount: Int32;
    ///<summary>
    ///  Gets x-coordinate of the top point of shape after calls Chart.Calculate() method.
    ///  Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid and Area3D
    ///</summary>
    function GetTopPointXPx(index: Int32): Single;
    ///<summary>
    ///  Gets y-coordinate of the top point of shape after calls Chart.Calculate() method.
    ///  Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid and Area3D
    ///</summary>
    function GetTopPointYPx(index: Int32): Single;
    ///<summary>
    ///  Gets the number of bottom points  after calls Chart.Calculate() method.
    ///</summary>
    function GetBottomPointCount: Int32;
    ///<summary>
    ///  Gets x-coordinate of the bottom point of shape after calls Chart.Calculate() method.
    ///  Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid
    ///</summary>
    function GetBottomPointXPx(index: Int32): Single;
    ///<summary>
    ///  Gets y-coordinate of the bottom point of shape  after calls Chart.Calculate() method.
    ///  Applies 3D charts: Column3D, Bar3D, Cone, Cylinder, Pyramid
    ///</summary>
    function GetBottomPointYPx(index: Int32): Single;
    ///<summary>
    ///  Gets the number of the points on category axis after calls Chart.Calculate() method. Only applies to area chart.
    ///</summary>
    ///<remarks>
    ///  Area 2D chart return 1
    ///  Area 3D chart return 2.
    ///</remarks>
    function GetOnCategoryAxisPointCount: Int32;
    ///<summary>
    ///  Gets x-coordinate of the point on category axis after calls Chart.Calculate() method. Only applies to Area chart.
    ///</summary>
    ///<remarks>
    ///  Area 2D chart: index is 0.
    ///  Area 3D chart: index is 0 or 1.
    ///</remarks>
    function GetOnCategoryAxisPointXPx(index: Int32): Single;
    ///<summary>
    ///  Gets y-coordinate of the point on category axis after calls Chart.Calculate() method. Only applies to Area chart.
    ///</summary>
    ///<remarks>
    ///  Area 2D chart: index is 0.
    ///  Area 3D chart: index is 0 or 1.
    ///</remarks>
    function GetOnCategoryAxisPointYPx(index: Int32): Single;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  True if the chartpoint has a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartPoint.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.ChartPoint.Marker">marker</see>.
    ///</summary>
    property Marker: DNMarker read get_Marker;
    ///<summary>
    ///  Returns a DataLabels object that represents the data label associated with the point.
    ///</summary>
    property DataLabels: DNDataLabels read get_DataLabels;
    ///<summary>
    ///  Gets or sets the Y value of the chart point.
    ///</summary>
    property YValue: DDN.mscorlib.DNObject read get_YValue write set_YValue;
    ///<summary>
    ///  Gets Y value type of the chart point.
    ///</summary>
    property YValueType: DNCellValueType read get_YValueType;
    ///<summary>
    ///  Gets or sets the X value of the chart point.
    ///</summary>
    property XValue: DDN.mscorlib.DNObject read get_XValue write set_XValue;
    ///<summary>
    ///  Gets X value type of the chart point.
    ///</summary>
    property XValueType: DNCellValueType read get_XValueType;
    ///<summary>
    ///  Gets the <seealso cref="T:Aspose.Cells.Drawing.ShapePropertyCollection" />
    ///  object that holds the visual shape properties of the ChartPoint.
    ///</summary>
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    ///<summary>
    ///  Gets or sets a value indicates whether this data points is in the second pie or bar
    ///  on a pie of pie or bar of pie chart
    ///</summary>
    property IsInSecondaryPlot: Boolean read get_IsInSecondaryPlot write set_IsInSecondaryPlot;
    ///<summary>
    ///  Gets the x coordinate of the upper left corner in units of 1/4000 of chart's width after calls Chart.Calculate() method.
    ///</summary>
    property ShapeX: Int32 read get_ShapeX;
    ///<summary>
    ///  Gets the y coordinate of the upper left corner in units of 1/4000 of chart's height after calls Chart.Calculate() method.
    ///</summary>
    property ShapeY: Int32 read get_ShapeY;
    ///<summary>
    ///  Gets the width in units of 1/4000 of chart's width after calls Chart.Calculate() method.
    ///</summary>
    property ShapeWidth: Int32 read get_ShapeWidth;
    ///<summary>
    ///  Gets the height in units of 1/4000 of chart's height after calls Chart.Calculate() method.
    ///</summary>
    property ShapeHeight: Int32 read get_ShapeHeight;
    ///<summary>
    ///  Gets the x coordinate of the upper left corner in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property ShapeXPx: Int32 read get_ShapeXPx;
    ///<summary>
    ///  Gets the y coordinate of the upper left corner in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property ShapeYPx: Int32 read get_ShapeYPx;
    ///<summary>
    ///  Gets the width in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property ShapeWidthPx: Int32 read get_ShapeWidthPx;
    ///<summary>
    ///  Gets the height in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property ShapeHeightPx: Int32 read get_ShapeHeightPx;
    ///<summary>
    ///  Gets the width of border in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property BorderWidthPx: Int32 read get_BorderWidthPx;
    ///<summary>
    ///  Gets the radius of bubble, pie or doughnut in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property RadiusPx: Int32 read get_RadiusPx;
    ///<summary>
    ///  Gets the inner radius of doughnut slice in units of pixels after calls Chart.Calculate() method.
    ///  Applies to Doughnut chart.
    ///</summary>
    property InnerRadiusPx: Int32 read get_InnerRadiusPx;
    ///<summary>
    ///  Gets the starting angle for the pie section, measured in degrees clockwise from the x-axis after calls Chart.Calculate() method.
    ///  Applies to Pie chart.
    ///</summary>
    property StartAngle: Single read get_StartAngle;
    ///<summary>
    ///  Gets the ending angle for the pie section, measured in degrees clockwise from the x-axis after calls Chart.Calculate() method.
    ///  Applies to Pie chart.
    ///</summary>
    property EndAngle: Single read get_EndAngle;
    ///<summary>
    ///  Gets the x coordinate of starting point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Pie and Doughnut  chart.
    ///</summary>
    property ArcStartPointXPx: Single read get_ArcStartPointXPx;
    ///<summary>
    ///  Gets the y coordinate of starting point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Pie and Doughnut  chart.
    ///</summary>
    property ArcStartPointYPx: Single read get_ArcStartPointYPx;
    ///<summary>
    ///  Gets the x coordinate of ending point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Pie and Doughnut  chart.
    ///</summary>
    property ArcEndPointXPx: Single read get_ArcEndPointXPx;
    ///<summary>
    ///  Gets the y coordinate of ending point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Pie and Doughnut chart.
    ///</summary>
    property ArcEndPointYPx: Single read get_ArcEndPointYPx;
    ///<summary>
    ///  Gets the x coordinate of starting point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Doughnut chart.
    ///</summary>
    property InnerArcStartPointXPx: Single read get_InnerArcStartPointXPx;
    ///<summary>
    ///  Gets the y coordinate of starting point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Doughnut chart.
    ///</summary>
    property InnerArcStartPointYPx: Single read get_InnerArcStartPointYPx;
    ///<summary>
    ///  Gets the x coordinate of ending point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Doughnut chart.
    ///</summary>
    property InnerArcEndPointXPx: Single read get_InnerArcEndPointXPx;
    ///<summary>
    ///  Gets the y coordinate of ending point for the pie section after calls Chart.Calculate() method.
    ///  Applies to Doughnut chart.
    ///</summary>
    property InnerArcEndPointYPx: Single read get_InnerArcEndPointYPx;
  end;

  TDNChartPoint = class(TDNGenericImport<DNChartPointClass, DNChartPoint>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59D1ECDD-FD23-5A7B-BFC6-F4800D210473}']
  end;

  ///<summary>
  ///  Represents a collection that contains all the points in one series.
  ///</summary>
  ///<example><code>
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.PieExploded, 5, 0, 25, 10);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  //Show Data Labels
  ///  chart.NSeries[0].DataLabels.IsValueShown = true;
  ///  ChartPointCollection points = chart.NSeries[0].Points;
  ///  for (int i = 0; i &lt; points.Count; i++)
  ///  {
  ///  //Get Data Point
  ///  ChartPoint point = points[i];
  ///  //Set Pir Explosion
  ///  point.Explosion = 15;
  ///  //Set Border Color
  ///  point.Border.Color = System.Drawing.Color.Red;
  ///  }
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.PieExploded, 5, 0, 25, 10)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  'Show Data Labels
  ///  chart.NSeries(0).DataLabels.IsValueShown = True
  ///  Dim points As ChartPointCollection = chart.NSeries(0).Points
  ///  For i As Integer = 0 To points.Count - 1
  ///  'Get Data Point
  ///  Dim point As ChartPoint = points(i)
  ///  'Set Pir Explosion
  ///  point.Explosion = 15
  ///  'Set Border Color
  ///  point.Border.Color = System.Drawing.Color.Red
  ///  Next i
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.ChartPointCollection')]
  DNChartPointCollection = interface(DDN.mscorlib.DNObject)
  ['{FF74254D-4F12-3C00-AFB2-818645B5670D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNChartPoint;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire <see cref="T:Aspose.Cells.Charts.ChartPointCollection" />
    ///  .
    ///</summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Remove all setting of the chart points.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes point at the index of the series..
    ///</summary>
    ///  <param name="index">The index of the point.</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of the chart point.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNChartPoint read get_Item; default;
  end;

  TDNChartPointCollection = class(TDNGenericImport<DNChartPointCollectionClass, DNChartPointCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNDropBarsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{312D0733-4791-5A78-A984-6ECFB800C098}']
  end;

  ///<summary>
  ///  Represents the up/down bars in a chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.DropBars')]
  DNDropBars = interface(DDN.mscorlib.DNObject)
  ['{74A97EEA-BCB1-3A32-B29F-54CEACFB2569}']
  { getters & setters } 

    function get_Border: DNLine;
    function get_Area: DNArea;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the border <see cref="T:Aspose.Cells.Drawing.Line" />
    ///  .
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.DropBars.Area" />
    ///  .
    ///</summary>
    property Area: DNArea read get_Area;
  end;

  TDNDropBars = class(TDNGenericImport<DNDropBarsClass, DNDropBars>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNLegendEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A50F5E0-E0CC-5F66-9B94-528585E70C7B}']
  end;

  ///<summary>
  ///  Represents a legend entry in a chart legend.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.LegendEntry')]
  DNLegendEntry = interface(DDN.mscorlib.DNObject)
  ['{93278A99-70AA-3491-AF2C-3352E39A21DE}']
  { getters & setters } 

    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_Font: DNFont;
    function get_TextFont: DNFont;
    function get_IsTextNoFill: Boolean;
    procedure set_IsTextNoFill(value: Boolean);
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets whether the legend entry is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.LegendEntry.Font" />
    ///  object of the specified ChartFrame object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Charts.LegendEntry.Font" />
    ///  object of the specified LegendEntry object.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use LegendEntry.Font property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFont: DNFont read get_TextFont;
    ///<summary>
    ///  Gets or sets no fill of the text.
    ///</summary>
    property IsTextNoFill: Boolean read get_IsTextNoFill write set_IsTextNoFill;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes.
    ///  The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use LegendEntry.BackgroundMode property.
    ///  This property will be removed 12 months later since JANUARY 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Background: DNBackgroundMode read get_Background write set_Background;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
  end;

  TDNLegendEntry = class(TDNGenericImport<DNLegendEntryClass, DNLegendEntry>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNMarkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F5C1A4D5-D409-5D9A-93FC-D974ED00C66B}']
  end;

  ///<summary>
  ///  Represents the marker in a line chart, scatter chart, or radar chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.Marker')]
  DNMarker = interface(DDN.mscorlib.DNObject)
  ['{30CF5F99-601B-3C15-B3EB-E8AD99A89AD1}']
  { getters & setters } 

    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_MarkerStyle: DNChartMarkerType;
    procedure set_MarkerStyle(value: DNChartMarkerType);
    function get_MarkerSize: Int32;
    procedure set_MarkerSize(value: Int32);
    function get_MarkerSizePx: Int32;
    procedure set_MarkerSizePx(value: Int32);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColorSetType: DNFormattingType;
    procedure set_ForegroundColorSetType(value: DNFormattingType);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroundColorSetType: DNFormattingType;
    procedure set_BackgroundColorSetType(value: DNFormattingType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Line">border</see>.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.Marker.Area">area</see>.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Represents the marker style. Applies to line chart, scatter chart, or radar chart.
    ///</summary>
    property MarkerStyle: DNChartMarkerType read get_MarkerStyle write set_MarkerStyle;
    ///<summary>
    ///  Represents the marker size in unit of points. Applies to line chart, scatter chart, or radar chart.
    ///</summary>
    property MarkerSize: Int32 read get_MarkerSize write set_MarkerSize;
    ///<summary>
    ///  Represents the marker size in unit of pixels. Applies to line chart, scatter chart, or radar chart.
    ///</summary>
    property MarkerSizePx: Int32 read get_MarkerSizePx write set_MarkerSizePx;
    ///<summary>
    ///  Represents the marker foreground color in a line chart, scatter chart, or radar chart.
    ///</summary>
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets or sets the marker foreground color set type.
    ///</summary>
    property ForegroundColorSetType: DNFormattingType read get_ForegroundColorSetType write set_ForegroundColorSetType;
    ///<summary>
    ///  Represents the marker background color in a line chart, scatter chart, or radar chart.
    ///</summary>
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the marker background color set type.
    ///</summary>
    property BackgroundColorSetType: DNFormattingType read get_BackgroundColorSetType write set_BackgroundColorSetType;
  end;

  TDNMarker = class(TDNGenericImport<DNMarkerClass, DNMarker>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNPivotOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E194FD1D-30ED-5A36-93EC-28F9427EDE3D}']
  end;

  ///<summary>
  ///  Represents a complex type that specifies the pivot controls that appear on the chart
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.PivotOptions')]
  DNPivotOptions = interface(DDN.mscorlib.DNObject)
  ['{85D02D1B-9FBD-37E0-8DA1-F1D75A9ED19B}']
  { getters & setters } 

    function get_DropZoneFilter: Boolean;
    procedure set_DropZoneFilter(value: Boolean);
    function get_DropZoneCategories: Boolean;
    procedure set_DropZoneCategories(value: Boolean);
    function get_DropZoneData: Boolean;
    procedure set_DropZoneData(value: Boolean);
    function get_DropZoneSeries: Boolean;
    procedure set_DropZoneSeries(value: Boolean);
    function get_DropZonesVisible: Boolean;
    procedure set_DropZonesVisible(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether a control for each PivotTable field on the PivotTable page axis
    ///  of the source PivotTable appears on the chart when dropZonesVisible is set to true.
    ///</summary>
    property DropZoneFilter: Boolean read get_DropZoneFilter write set_DropZoneFilter;
    ///<summary>
    ///  Specifies whether a control for each PivotTable field on the PivotTable row axis
    ///  of the source PivotTable appears on the chart when dropZonesVisible is set to true.
    ///</summary>
    property DropZoneCategories: Boolean read get_DropZoneCategories write set_DropZoneCategories;
    ///<summary>
    ///  Specifies whether a control for each PivotTable field on the PivotTable data axis
    ///  of the source PivotTable appears on the chart when dropZonesVisible is set to true.
    ///</summary>
    property DropZoneData: Boolean read get_DropZoneData write set_DropZoneData;
    ///<summary>
    ///  Specifies whether a control for each PivotTable field on the PivotTable column axis
    ///  of the source PivotTable appears on the chart when dropZonesVisible is set to true.
    ///</summary>
    property DropZoneSeries: Boolean read get_DropZoneSeries write set_DropZoneSeries;
    ///<summary>
    ///  Specifies whether any pivot controls can appear on the pivot chart.
    ///</summary>
    property DropZonesVisible: Boolean read get_DropZonesVisible write set_DropZonesVisible;
  end;

  TDNPivotOptions = class(TDNGenericImport<DNPivotOptionsClass, DNPivotOptions>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSeriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{12FB4714-DEFD-5ECB-A9AB-204A3BBB61D4}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a single data series in a chart.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "A4" cell
  ///  worksheet.Cells["A4"].PutValue(200);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a sample value to "B4" cell
  ///  worksheet.Cells["B4"].PutValue(40);
  ///  //Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells["C1"].PutValue("Q1");
  ///  //Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells["C2"].PutValue("Q2");
  ///  //Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells["C3"].PutValue("Y1");
  ///  //Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells["C4"].PutValue("Y2");
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", true);
  ///  //Setting the data source for the category data of NSeries
  ///  chart.NSeries.CategoryData = "C1:C4";
  ///  Series series = chart.NSeries[1];
  ///  //Setting the values of the series.
  ///  series.Values = "=B1:B4";
  ///  //Changing the chart type of the series.
  ///  series.Type = ChartType.Line;
  ///  //Setting marker properties.
  ///  series.MarkerStyle = ChartMarkerType.Circle;
  ///  series.MarkerForegroundColorSetType = FormattingType.Automatic;
  ///  series.MarkerForegroundColor = System.Drawing.Color.Black;
  ///  series.MarkerBackgroundColorSetType = FormattingType.Automatic;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Excel object
  ///  Dim sheetIndex As Int32 = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "A4" cell
  ///  worksheet.Cells("A4").PutValue(200)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a sample value to "B4" cell
  ///  worksheet.Cells("B4").PutValue(40)
  ///  'Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells("C1").PutValue("Q1")
  ///  'Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells("C2").PutValue("Q2")
  ///  'Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells("C3").PutValue("Y1")
  ///  'Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells("C4").PutValue("Y2")
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Int32 = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", True)
  ///  'Setting the data source for the category data of NSeries
  ///  chart.NSeries.CategoryData = "C1:C4"
  ///  Dim series As Series = chart.NSeries(1)
  ///  'Setting the values of the series.
  ///  series.Values = "=B1:B4"
  ///  'Changing the chart type of the series.
  ///  series.Type = ChartType.Line
  ///  'Setting marker properties.
  ///  series.MarkerStyle = ChartMarkerType.Circle
  ///  series.MarkerForegroundColorSetType = FormattingType.Automatic
  ///  series.MarkerForegroundColor = System.Drawing.Color.Black
  ///  series.MarkerBackgroundColorSetType = FormattingType.Automatic
  ///  'Saving the Excel file
  ///  workbook.Save("C:\\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Series')]
  DNSeries = interface(DDN.mscorlib.DNObject)
  ['{4EC1D8B0-F78B-3C00-9C29-E2469456F303}']
  { getters & setters } 

    function get_LayoutProperties: DNSeriesLayoutProperties;
    function get_Points: DNChartPointCollection;
    function get_Area: DNArea;
    function get_Border: DNLine;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_DisplayName: string;
    function get_CountOfDataValues: Int32;
    function get_IsVerticalValues: Boolean;
    function get_Values: string;
    procedure set_Values(value: string);
    function get_ValuesFormatCode: string;
    procedure set_ValuesFormatCode(value: string);
    function get_XValues: string;
    procedure set_XValues(value: string);
    function get_BubbleSizes: string;
    procedure set_BubbleSizes(value: string);
    function get_TrendLines: DNTrendlineCollection;
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Has3DEffect: Boolean;
    procedure set_Has3DEffect(value: Boolean);
    function get_Bar3DShapeType: DNBar3DShapeType;
    procedure set_Bar3DShapeType(value: DNBar3DShapeType);
    function get_BarShape: DNBar3DShapeType;
    procedure set_BarShape(value: DNBar3DShapeType);
    function get_DataLabels: DNDataLabels;
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_Marker: DNMarker;
    function get_PlotOnSecondAxis: Boolean;
    procedure set_PlotOnSecondAxis(value: Boolean);
    function get_XErrorBar: DNErrorBar;
    function get_YErrorBar: DNErrorBar;
    function get_HasHiLoLines: Boolean;
    procedure set_HasHiLoLines(value: Boolean);
    function get_HiLoLines: DNLine;
    function get_HasSeriesLines: Boolean;
    procedure set_HasSeriesLines(value: Boolean);
    function get_SeriesLines: DNLine;
    function get_HasDropLines: Boolean;
    procedure set_HasDropLines(value: Boolean);
    function get_DropLines: DNLine;
    function get_HasUpDownBars: Boolean;
    procedure set_HasUpDownBars(value: Boolean);
    function get_UpBars: DNDropBars;
    function get_DownBars: DNDropBars;
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_GapWidth: Int16;
    procedure set_GapWidth(value: Int16);
    function get_FirstSliceAngle: Int16;
    procedure set_FirstSliceAngle(value: Int16);
    function get_Overlap: Int16;
    procedure set_Overlap(value: Int16);
    function get_SecondPlotSize: Int16;
    procedure set_SecondPlotSize(value: Int16);
    function get_SplitType: DNChartSplitType;
    procedure set_SplitType(value: DNChartSplitType);
    function get_SplitValue: Double;
    procedure set_SplitValue(value: Double);
    function get_IsAutoSplit: Boolean;
    function get_BubbleScale: Int32;
    procedure set_BubbleScale(value: Int32);
    function get_SizeRepresents: DNBubbleSizeRepresents;
    procedure set_SizeRepresents(value: DNBubbleSizeRepresents);
    function get_ShowNegativeBubbles: Boolean;
    procedure set_ShowNegativeBubbles(value: Boolean);
    function get_DoughnutHoleSize: Int32;
    procedure set_DoughnutHoleSize(value: Int32);
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_HasRadarAxisLabels: Boolean;
    procedure set_HasRadarAxisLabels(value: Boolean);
    function get_HasLeaderLines: Boolean;
    procedure set_HasLeaderLines(value: Boolean);
    function get_LeaderLines: DNLine;
    function get_LegendEntry: DNLegendEntry;
    function get_ShapeProperties: DNShapePropertyCollection;

  { methods } 

    ///<summary>
    ///  Moves the series up or down.
    ///</summary>
    ///  <param name="count">The number of moving up or down.
    ///  Move the series up if this is less than zero;
    ///  Move the series down if this is greater than zero.
    ///</param>
    procedure Move(count: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the properties of layout.
    ///</summary>
    property LayoutProperties: DNSeriesLayoutProperties read get_LayoutProperties;
    ///<summary>
    ///  Gets the collection of points in a series in a chart.
    ///</summary>
    ///<remarks>
    ///  When the chart is Pie of Pie or Bar of Pie, the last point is other point in first pie plot.
    ///</remarks>
    property Points: DNChartPointCollection read get_Points;
    ///<summary>
    ///  Represents the background area of Series object.
    ///</summary>
    property Area: DNArea read get_Area;
    ///<summary>
    ///  Represents border of Series object.
    ///</summary>
    property Border: DNLine read get_Border;
    ///<summary>
    ///  Gets or sets the name of the data series.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Reference name to a cell
    ///  chart.NSeries[0].Name = "=A1";
    ///  //Set a string to name
    ///  chart.NSeries[0].Name = "First Series";
    ///  [Visual Basic]
    ///  'Reference name to a cell
    ///  chart.NSeries[0].Name = "=A1"
    ///  'Set a string to name
    ///  chart.NSeries[0].Name = "First Series"
    ///</code></example>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the series's name that displays on the chart graph.
    ///</summary>
    property DisplayName: string read get_DisplayName;
    ///<summary>
    ///  Gets the number of the data values.
    ///</summary>
    property CountOfDataValues: Int32 read get_CountOfDataValues;
    ///<summary>
    ///  Indicates whether the data source is vertical.
    ///</summary>
    property IsVerticalValues: Boolean read get_IsVerticalValues;
    ///<summary>
    ///  Represents the data of the chart series.
    ///</summary>
    property Values: string read get_Values write set_Values;
    ///<summary>
    ///  Represents format code of Values¡®s NumberList.
    ///</summary>
    property ValuesFormatCode: string read get_ValuesFormatCode write set_ValuesFormatCode;
    ///<summary>
    ///  Represents the x values of the chart series.
    ///</summary>
    property XValues: string read get_XValues write set_XValues;
    ///<summary>
    ///  Gets or sets the bubble sizes values of the chart series.
    ///</summary>
    property BubbleSizes: string read get_BubbleSizes write set_BubbleSizes;
    ///<summary>
    ///  Returns an object that represents a collection of all the trendlines for the series.
    ///</summary>
    property TrendLines: DNTrendlineCollection read get_TrendLines;
    ///<summary>
    ///  Represents curve smoothing.
    ///  True if curve smoothing is turned on for the line chart or scatter chart.
    ///  Applies only to line and scatter connected by lines charts.
    ///</summary>
    property Smooth: Boolean read get_Smooth write set_Smooth;
    ///<summary>
    ///  True if the series has a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  True if the series has a three-dimensional appearance.
    ///  Applies only to bubble charts.
    ///</summary>
    property Has3DEffect: Boolean read get_Has3DEffect write set_Has3DEffect;
    ///<summary>
    ///  Gets or sets the 3D shape type used with the 3-D bar or column chart.
    ///</summary>
    property Bar3DShapeType: DNBar3DShapeType read get_Bar3DShapeType write set_Bar3DShapeType;
    ///<summary>
    ///  Gets or sets the 3D shape type used with the 3-D bar or column chart.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ASeries.Bar3DShapeType property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BarShape: DNBar3DShapeType read get_BarShape write set_BarShape;
    ///<summary>
    ///  Represents the DataLabels object for the specified ASeries.
    ///</summary>
    property DataLabels: DNDataLabels read get_DataLabels;
    ///<summary>
    ///  Gets or sets a data series' type.
    ///</summary>
    property &Type: DNChartType read get_Type write set_Type;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.Series.Marker">marker</see>.
    ///</summary>
    property Marker: DNMarker read get_Marker;
    ///<summary>
    ///  Indicates if this series is plotted on second value axis.
    ///</summary>
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis write set_PlotOnSecondAxis;
    ///<summary>
    ///  Represents X direction error bar of the series.
    ///</summary>
    property XErrorBar: DNErrorBar read get_XErrorBar;
    ///<summary>
    ///  Represents Y direction error bar of the series.
    ///</summary>
    property YErrorBar: DNErrorBar read get_YErrorBar;
    ///<summary>
    ///  True if the line chart has high-low lines.
    ///  Applies only to line charts.
    ///</summary>
    property HasHiLoLines: Boolean read get_HasHiLoLines write set_HasHiLoLines;
    ///<summary>
    ///  Returns a HiLoLines object that represents the high-low lines for a series on a line chart.
    ///  Applies only to line charts.
    ///</summary>
    property HiLoLines: DNLine read get_HiLoLines;
    ///<summary>
    ///  True if a stacked column chart or bar chart has series lines or
    ///  if a Pie of Pie chart or Bar of Pie chart has connector lines between the two sections.
    ///  Applies only to stacked column charts, bar charts, Pie of Pie charts, or Bar of Pie charts.
    ///</summary>
    property HasSeriesLines: Boolean read get_HasSeriesLines write set_HasSeriesLines;
    ///<summary>
    ///  Returns a SeriesLines object that represents the series lines for a stacked bar chart or a stacked column chart.
    ///  Applies only to stacked bar and stacked column charts.
    ///</summary>
    property SeriesLines: DNLine read get_SeriesLines;
    ///<summary>
    ///  True if the chart has drop lines.
    ///  Applies only to line chart or area charts.
    ///</summary>
    property HasDropLines: Boolean read get_HasDropLines write set_HasDropLines;
    ///<summary>
    ///  Returns a <see cref="T:Aspose.Cells.Drawing.Line" />
    ///  object that represents the drop lines for a series on the line chart or area chart.
    ///  Applies only to line chart or area charts.
    ///</summary>
    property DropLines: DNLine read get_DropLines;
    ///<summary>
    ///  True if a line chart has up and down bars.
    ///  Applies only to line charts.
    ///</summary>
    property HasUpDownBars: Boolean read get_HasUpDownBars write set_HasUpDownBars;
    ///<summary>
    ///  Returns an DropBars object that represents the up bars on a line chart.
    ///  Applies only to line charts.
    ///</summary>
    property UpBars: DNDropBars read get_UpBars;
    ///<summary>
    ///  Returns a <see cref="T:Aspose.Cells.Charts.DropBars" />
    ///  object that represents the down bars on a line chart.
    ///  Applies only to line charts.
    ///</summary>
    property DownBars: DNDropBars read get_DownBars;
    ///<summary>
    ///  Represents if the color of points is varied.
    ///  The chart must contain only one series.
    ///</summary>
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    ///<summary>
    ///  Returns or sets the space between bar or column clusters, as a percentage of the bar or column width.
    ///  The value of this property must be between 0 and 500.
    ///</summary>
    property GapWidth: Int16 read get_GapWidth write set_GapWidth;
    ///<summary>
    ///  Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical).
    ///  Applies only to pie, 3-D pie, and doughnut charts, 0 to 360.
    ///</summary>
    property FirstSliceAngle: Int16 read get_FirstSliceAngle write set_FirstSliceAngle;
    ///<summary>
    ///  Specifies how bars and columns are positioned.
    ///  Can be a value between ¨C 100 and 100.
    ///  Applies only to 2-D bar and 2-D column charts.
    ///</summary>
    property Overlap: Int16 read get_Overlap write set_Overlap;
    ///<summary>
    ///  Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart,
    ///  as a percentage of the size of the primary pie.
    ///  Can be a value from 5 to 200.
    ///</summary>
    property SecondPlotSize: Int16 read get_SecondPlotSize write set_SecondPlotSize;
    ///<summary>
    ///  Returns or sets a value that how to determine which data points are in the second pie or bar on a pie of pie or bar of
    ///  pie chart.
    ///</summary>
    property SplitType: DNChartSplitType read get_SplitType write set_SplitType;
    ///<summary>
    ///  Returns or sets a value that shall be used to determine which data points are in the second pie or bar on
    ///  a pie of pie or bar of pie chart.
    ///</summary>
    property SplitValue: Double read get_SplitValue write set_SplitValue;
    ///<summary>
    ///  Indicates whether the threshold value is automatic.
    ///</summary>
    property IsAutoSplit: Boolean read get_IsAutoSplit;
    ///<summary>
    ///  Gets or sets the scale factor for bubbles in the specified chart group.
    ///  It can be an integer value from 0 (zero) to 300,
    ///  corresponding to a percentage of the default size.
    ///  Applies only to bubble charts.
    ///</summary>
    property BubbleScale: Int32 read get_BubbleScale write set_BubbleScale;
    ///<summary>
    ///  Gets or sets what the bubble size represents on a bubble chart.
    ///</summary>
    ///<remarks>
    ///  BubbleSizeRepresents.SizeIsArea means the value <see cref="P:Aspose.Cells.Charts.Series.BubbleSizes" />
    ///  is the area of the bubble.
    ///  BubbleSizeRepresents.SizeIsWidth means the value <see cref="P:Aspose.Cells.Charts.Series.BubbleSizes" />
    ///  is the width of the bubble.
    ///</remarks>
    property SizeRepresents: DNBubbleSizeRepresents read get_SizeRepresents write set_SizeRepresents;
    ///<summary>
    ///  True if negative bubbles are shown for the chart group. Valid only for bubble charts.
    ///</summary>
    property ShowNegativeBubbles: Boolean read get_ShowNegativeBubbles write set_ShowNegativeBubbles;
    ///<summary>
    ///  Returns or sets the size of the hole in a doughnut chart group.
    ///  The hole size is expressed as a percentage of the chart size, between 10 and 90 percent.
    ///</summary>
    property DoughnutHoleSize: Int32 read get_DoughnutHoleSize write set_DoughnutHoleSize;
    ///<summary>
    ///  The distance of an open pie slice from the center of the pie chart is expressed as a percentage of the pie diameter.
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  True if a radar chart has category axis labels. Applies only to radar charts.
    ///</summary>
    property HasRadarAxisLabels: Boolean read get_HasRadarAxisLabels write set_HasRadarAxisLabels;
    ///<summary>
    ///  True if the series has leader lines.
    ///</summary>
    property HasLeaderLines: Boolean read get_HasLeaderLines write set_HasLeaderLines;
    ///<summary>
    ///  Represents leader lines on a chart. Leader lines connect data labels to data points.
    ///  This object isn¡¯t a collection; there¡¯s no object that represents a single leader line.
    ///</summary>
    property LeaderLines: DNLine read get_LeaderLines;
    ///<summary>
    ///  Gets the legend entry according to this series.
    ///</summary>
    property LegendEntry: DNLegendEntry read get_LegendEntry;
    ///<summary>
    ///  Gets the <seealso cref="T:Aspose.Cells.Drawing.ShapePropertyCollection" />
    ///  object that holds the visual shape properties of the Series.
    ///</summary>
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
  end;

  TDNSeries = class(TDNGenericImport<DNSeriesClass, DNSeries>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSeriesLayoutPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E1949A15-32B9-5BF8-8979-1EE63F4A7B8F}']
  { constructors } 

    {class} function init: DNSeriesLayoutProperties;

  end;

  ///<summary></summary>
  [DNTypeName('Aspose.Cells.Charts.SeriesLayoutProperties')]
  DNSeriesLayoutProperties = interface(DDN.mscorlib.DNObject)
  ['{4951B904-79D7-3215-AC07-0FA1797E6717}']
  { getters & setters } 

    function get_ShowConnectorLines: Boolean;
    procedure set_ShowConnectorLines(value: Boolean);
    function get_ShowMeanLine: Boolean;
    procedure set_ShowMeanLine(value: Boolean);
    function get_ShowOutlierPoints: Boolean;
    procedure set_ShowOutlierPoints(value: Boolean);
    function get_ShowMeanMarker: Boolean;
    procedure set_ShowMeanMarker(value: Boolean);
    function get_ShowInnerPoints: Boolean;
    procedure set_ShowInnerPoints(value: Boolean);
    function get_Subtotals: TArray<Int32>;
    procedure set_Subtotals(value: TArray<Int32>);
    function get_QuartileCalculation: DNQuartileCalculationType;
    procedure set_QuartileCalculation(value: DNQuartileCalculationType);
    function get_MapLabelLayout: DNMapChartLabelLayout;
    procedure set_MapLabelLayout(value: DNMapChartLabelLayout);
    function get_MapChartRegionType: DNMapChartRegionType;
    procedure set_MapChartRegionType(value: DNMapChartRegionType);
    function get_MapChartProjectionType: DNMapChartProjectionType;
    procedure set_MapChartProjectionType(value: DNMapChartProjectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether showing connector lines between data points.
    ///</summary>
    property ShowConnectorLines: Boolean read get_ShowConnectorLines write set_ShowConnectorLines;
    ///<summary>
    ///  Indicates whether showing the line connecting all mean points.
    ///</summary>
    property ShowMeanLine: Boolean read get_ShowMeanLine write set_ShowMeanLine;
    ///<summary>
    ///  Indicates whether showing outlier data points.
    ///</summary>
    property ShowOutlierPoints: Boolean read get_ShowOutlierPoints write set_ShowOutlierPoints;
    ///<summary>
    ///  Indicates whether showing markers denoting the mean.
    ///</summary>
    property ShowMeanMarker: Boolean read get_ShowMeanMarker write set_ShowMeanMarker;
    ///<summary>
    ///  Indicates whether showing non-outlier data points.
    ///</summary>
    property ShowInnerPoints: Boolean read get_ShowInnerPoints write set_ShowInnerPoints;
    ///<summary>
    ///  Represents the index of a subtotal data point.
    ///</summary>
    property Subtotals: TArray<Int32> read get_Subtotals write set_Subtotals;
    ///<summary>
    ///  Represents the statistical properties for the series.
    ///</summary>
    property QuartileCalculation: DNQuartileCalculationType read get_QuartileCalculation write set_QuartileCalculation;
    ///<summary>
    ///  Gets and sets the layout of map labels.
    ///</summary>
    property MapLabelLayout: DNMapChartLabelLayout read get_MapLabelLayout write set_MapLabelLayout;
    ///<summary>
    ///  Gets and sets the region type of the map.
    ///</summary>
    property MapChartRegionType: DNMapChartRegionType read get_MapChartRegionType write set_MapChartRegionType;
    ///<summary>
    ///  Gets and sets the projection type of the map.
    ///</summary>
    property MapChartProjectionType: DNMapChartProjectionType read get_MapChartProjectionType write set_MapChartProjectionType;
  end;

  TDNSeriesLayoutProperties = class(TDNGenericImport<DNSeriesLayoutPropertiesClass, DNSeriesLayoutProperties>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{572878A1-67C9-5BE4-B000-7985DCDFC76D}']
  end;

  ///<summary>
  ///  A sparkline represents a tiny chart or graphic in a worksheet cell that provides a visual representation of data.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.Sparkline')]
  DNSparkline = interface(DDN.mscorlib.DNObject)
  ['{46B7A2CC-38AD-3682-88F2-4F1A7DF7FCBA}']
  { getters & setters } 

    function get_DataRange: string;
    procedure set_DataRange(value: string);
    function get_Row: Int32;
    function get_Column: Int32;

  { methods } 

    ///<summary>
    ///  Converts a sparkline to an image.
    ///</summary>
    ///  <param name="options">The image options</param>
    ///<returns>Returns a <see cref="T:System.Drawing.Bitmap" />
    ///  object.</returns>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Converts a sparkline to an image.
    ///</summary>
    ///  <param name="fileName">The image file name.</param>
    ///  <param name="options">The image options</param>
    procedure ToImage(fileName: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Converts a sparkline to an image.
    ///</summary>
    ///  <param name="stream">The image stream.</param>
    ///  <param name="options">The image options.</param>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the data range of the sparkline.
    ///</summary>
    property DataRange: string read get_DataRange write set_DataRange;
    ///<summary>
    ///  Gets the row index of the sparkline.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets the column index of the sparkline.
    ///</summary>
    property Column: Int32 read get_Column;
  end;

  TDNSparkline = class(TDNGenericImport<DNSparklineClass, DNSparkline>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A319D14D-1702-5F09-89D1-0CFBC3684CCA}']
  end;

  ///<summary><see cref="T:Aspose.Cells.Charts.Sparkline" />
  ///  is organized into sparkline group. A SparklineGroup contains a variable number of sparkline items.
  ///  A sparkline group specifies the type, display settings and axis settings for the sparklines.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.SparklineGroup')]
  DNSparklineGroup = interface(DDN.mscorlib.DNObject)
  ['{FC886C33-6B36-3589-AA9D-65F715A75911}']
  { getters & setters } 

    function get_PresetStyle: DNSparklinePresetStyleType;
    procedure set_PresetStyle(value: DNSparklinePresetStyleType);
    function get_SparklineCollection: DNSparklineCollection;
    function get_Type: DNSparklineType;
    procedure set_Type(value: DNSparklineType);
    function get_PlotEmptyCellsType: DNPlotEmptyCellsType;
    procedure set_PlotEmptyCellsType(value: DNPlotEmptyCellsType);
    function get_DisplayHidden: Boolean;
    procedure set_DisplayHidden(value: Boolean);
    function get_ShowHighPoint: Boolean;
    procedure set_ShowHighPoint(value: Boolean);
    function get_HighPointColor: DNCellsColor;
    procedure set_HighPointColor(value: DNCellsColor);
    function get_ShowLowPoint: Boolean;
    procedure set_ShowLowPoint(value: Boolean);
    function get_LowPointColor: DNCellsColor;
    procedure set_LowPointColor(value: DNCellsColor);
    function get_ShowNegativePoints: Boolean;
    procedure set_ShowNegativePoints(value: Boolean);
    function get_NegativePointsColor: DNCellsColor;
    procedure set_NegativePointsColor(value: DNCellsColor);
    function get_ShowFirstPoint: Boolean;
    procedure set_ShowFirstPoint(value: Boolean);
    function get_FirstPointColor: DNCellsColor;
    procedure set_FirstPointColor(value: DNCellsColor);
    function get_ShowLastPoint: Boolean;
    procedure set_ShowLastPoint(value: Boolean);
    function get_LastPointColor: DNCellsColor;
    procedure set_LastPointColor(value: DNCellsColor);
    function get_ShowMarkers: Boolean;
    procedure set_ShowMarkers(value: Boolean);
    function get_MarkersColor: DNCellsColor;
    procedure set_MarkersColor(value: DNCellsColor);
    function get_SeriesColor: DNCellsColor;
    procedure set_SeriesColor(value: DNCellsColor);
    function get_PlotRightToLeft: Boolean;
    procedure set_PlotRightToLeft(value: Boolean);
    function get_LineWeight: Double;
    procedure set_LineWeight(value: Double);
    function get_HorizontalAxisColor: DNCellsColor;
    procedure set_HorizontalAxisColor(value: DNCellsColor);
    function get_ShowHorizontalAxis: Boolean;
    procedure set_ShowHorizontalAxis(value: Boolean);
    function get_HorizontalAxisDateRange: string;
    procedure set_HorizontalAxisDateRange(value: string);
    function get_VerticalAxisMaxValueType: DNSparklineAxisMinMaxType;
    procedure set_VerticalAxisMaxValueType(value: DNSparklineAxisMinMaxType);
    function get_VerticalAxisMaxValue: Double;
    procedure set_VerticalAxisMaxValue(value: Double);
    function get_VerticalAxisMinValueType: DNSparklineAxisMinMaxType;
    procedure set_VerticalAxisMinValueType(value: DNSparklineAxisMinMaxType);
    function get_VerticalAxisMinValue: Double;
    procedure set_VerticalAxisMinValue(value: Double);

  { methods } 

    ///<summary>
    ///  Resets the data range and location range of the sparkline group.
    ///  This method will clear original sparkline items in the group and creates new sparkline items for the new ranges.
    ///</summary>
    ///  <param name="dataRange">Specifies the new data range of the sparkline group.</param>
    ///  <param name="isVertical">Specifies whether to plot the sparklines from the new data range by row or by column.</param>
    ///  <param name="locationRange">Specifies where the sparklines to be placed.</param>
    procedure ResetRanges(dataRange: string; isVertical: Boolean; locationRange: DNCellArea);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the preset style type of the sparkline group.
    ///</summary>
    property PresetStyle: DNSparklinePresetStyleType read get_PresetStyle write set_PresetStyle;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Charts.SparklineGroup.SparklineCollection" />
    ///  object of the sparkline group.
    ///</summary>
    property SparklineCollection: DNSparklineCollection read get_SparklineCollection;
    ///<summary>
    ///  Indicates the sparkline type of the sparkline group.
    ///</summary>
    property &Type: DNSparklineType read get_Type write set_Type;
    ///<summary>
    ///  Indicates how to plot empty cells.
    ///</summary>
    property PlotEmptyCellsType: DNPlotEmptyCellsType read get_PlotEmptyCellsType write set_PlotEmptyCellsType;
    ///<summary>
    ///  Indicates whether to show data in hidden rows and columns.
    ///</summary>
    property DisplayHidden: Boolean read get_DisplayHidden write set_DisplayHidden;
    ///<summary>
    ///  Indicates whether to highlight the highest points of data in the sparkline group.
    ///</summary>
    property ShowHighPoint: Boolean read get_ShowHighPoint write set_ShowHighPoint;
    ///<summary>
    ///  Gets and sets the color of the highest points of data in the sparkline group.
    ///</summary>
    property HighPointColor: DNCellsColor read get_HighPointColor write set_HighPointColor;
    ///<summary>
    ///  Indicates whether to highlight the lowest points of data in the sparkline group.
    ///</summary>
    property ShowLowPoint: Boolean read get_ShowLowPoint write set_ShowLowPoint;
    ///<summary>
    ///  Gets and sets the color of the lowest points of data in the sparkline group.
    ///</summary>
    property LowPointColor: DNCellsColor read get_LowPointColor write set_LowPointColor;
    ///<summary>
    ///  Indicates whether to highlight the negative values on the sparkline group with a different color or marker.
    ///</summary>
    property ShowNegativePoints: Boolean read get_ShowNegativePoints write set_ShowNegativePoints;
    ///<summary>
    ///  Gets and sets the color of the negative values on the sparkline group.
    ///</summary>
    property NegativePointsColor: DNCellsColor read get_NegativePointsColor write set_NegativePointsColor;
    ///<summary>
    ///  Indicates whether to highlight the first point of data in the sparkline group.
    ///</summary>
    property ShowFirstPoint: Boolean read get_ShowFirstPoint write set_ShowFirstPoint;
    ///<summary>
    ///  Gets and sets the color of the first point of data in the sparkline group.
    ///</summary>
    property FirstPointColor: DNCellsColor read get_FirstPointColor write set_FirstPointColor;
    ///<summary>
    ///  Indicates whether to highlight the last point of data in the sparkline group.
    ///</summary>
    property ShowLastPoint: Boolean read get_ShowLastPoint write set_ShowLastPoint;
    ///<summary>
    ///  Gets and sets the color of the last point of data in the sparkline group.
    ///</summary>
    property LastPointColor: DNCellsColor read get_LastPointColor write set_LastPointColor;
    ///<summary>
    ///  Indicates whether to highlight each point in each line sparkline in the sparkline group.
    ///</summary>
    property ShowMarkers: Boolean read get_ShowMarkers write set_ShowMarkers;
    ///<summary>
    ///  Gets and sets the color of points in each line sparkline in the sparkline group.
    ///</summary>
    property MarkersColor: DNCellsColor read get_MarkersColor write set_MarkersColor;
    ///<summary>
    ///  Gets and sets the color of the sparklines in the sparkline group.
    ///</summary>
    property SeriesColor: DNCellsColor read get_SeriesColor write set_SeriesColor;
    ///<summary>
    ///  Indicates whether the plot data is right to left.
    ///</summary>
    property PlotRightToLeft: Boolean read get_PlotRightToLeft write set_PlotRightToLeft;
    ///<summary>
    ///  Gets and sets the line weight in each line sparkline in the sparkline group, in the unit of points.
    ///</summary>
    property LineWeight: Double read get_LineWeight write set_LineWeight;
    ///<summary>
    ///  Gets and sets the color of the horizontal axis in the sparkline group.
    ///</summary>
    property HorizontalAxisColor: DNCellsColor read get_HorizontalAxisColor write set_HorizontalAxisColor;
    ///<summary>
    ///  Indicates whether to show the sparkline horizontal axis.
    ///  The horizontal axis appears if the sparkline has data that crosses the zero axis.
    ///</summary>
    property ShowHorizontalAxis: Boolean read get_ShowHorizontalAxis write set_ShowHorizontalAxis;
    ///<summary>
    ///  Represents the range that contains the date values for the sparkline data.
    ///</summary>
    property HorizontalAxisDateRange: string read get_HorizontalAxisDateRange write set_HorizontalAxisDateRange;
    ///<summary>
    ///  Represents the vertical axis maximum value type.
    ///</summary>
    property VerticalAxisMaxValueType: DNSparklineAxisMinMaxType read get_VerticalAxisMaxValueType write set_VerticalAxisMaxValueType;
    ///<summary>
    ///  Gets and sets the custom maximum value for the vertical axis.
    ///</summary>
    property VerticalAxisMaxValue: Double read get_VerticalAxisMaxValue write set_VerticalAxisMaxValue;
    ///<summary>
    ///  Represents the vertical axis minimum value type.
    ///</summary>
    property VerticalAxisMinValueType: DNSparklineAxisMinMaxType read get_VerticalAxisMinValueType write set_VerticalAxisMinValueType;
    ///<summary>
    ///  Gets and sets the custom minimum value for the vertical axis.
    ///</summary>
    property VerticalAxisMinValue: Double read get_VerticalAxisMinValue write set_VerticalAxisMinValue;
  end;

  TDNSparklineGroup = class(TDNGenericImport<DNSparklineGroupClass, DNSparklineGroup>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTickLabelsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{177F5E5C-DB79-5084-8459-A7EE5A9B940C}']
  end;

  ///<summary>
  ///  Represents the tick-mark labels associated with tick marks on a chart axis.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.TickLabels')]
  DNTickLabels = interface(DDN.mscorlib.DNObject)
  ['{B33BBC4F-4E92-3476-AEC2-9A96928738BE}']
  { getters & setters } 

    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_IsAutomaticRotation: Boolean;
    procedure set_IsAutomaticRotation(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_NumberFormatLinked: Boolean;
    procedure set_NumberFormatLinked(value: Boolean);
    function get_DisplayNumberFormat: string;
    function get_Offset: Int32;
    procedure set_Offset(value: Int32);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Charts.TickLabels.Font" />
    ///  object that represents the font of the specified TickLabels object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the text in the object changes font size when the object size changes. The default value is True.
    ///</summary>
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    ///<summary>
    ///  Gets and sets the display mode of the background
    ///</summary>
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    ///<summary>
    ///  Represents text rotation angle in clockwise.
    ///</summary>
    ///<remarks><br>0: Not rotated.</br><br>255: Top to Bottom.</br><br>-90: Downward.</br><br>90: Upward.</br></remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Indicates whether the rotation angle is automatic
    ///</summary>
    property IsAutomaticRotation: Boolean read get_IsAutomaticRotation write set_IsAutomaticRotation;
    ///<summary>
    ///  Represents the format string for the TickLabels object.
    ///</summary>
    ///<remarks>The formatting string is same as a custom format string setting to a cell. For example, "$0".</remarks>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Represents the format number for the TickLabels object.
    ///</summary>
    property Number: Int32 read get_Number write set_Number;
    ///<summary>
    ///  True if the number format is linked to the cells
    ///  (so that the number format changes in the labels when it changes in the cells).
    ///</summary>
    property NumberFormatLinked: Boolean read get_NumberFormatLinked write set_NumberFormatLinked;
    ///<summary>
    ///  Gets and sets the display number format of tick labels.
    ///</summary>
    property DisplayNumberFormat: string read get_DisplayNumberFormat;
    ///<summary>
    ///  Represents the distance between the levels of labels, and the distance between the first level and the axis line.
    ///</summary>
    ///<remarks>
    ///  The default distance is 100 percent, which represents the default spacing between the axis labels and the axis line.
    ///  The value can be an integer percentage from 0 through 1000, relative to the axis label¡¯s font size.
    ///</remarks>
    property Offset: Int32 read get_Offset write set_Offset;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use TickLabels.ReadingOrder property.
    ///  This property will be removed 12 months later since March 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    ///<summary>
    ///  Gets and sets the direction of text.
    ///</summary>
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
  end;

  TDNTickLabels = class(TDNGenericImport<DNTickLabelsClass, DNTickLabels>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellWatchCollectionClass = interface(DNObjectClass)
  ['{43EB6020-D80E-5332-8BD5-9EE48F990C9A}']
  { constructors } 

    {class} function init: DNCellWatchCollection;

  end;

  ///<summary>
  ///  Represents the collection of cells on this worksheet being watched in the 'watch window'.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellWatchCollection')]
  DNCellWatchCollection = interface(DNObject)
  ['{A15658A0-CD53-36ED-BBBF-146BE7089FF5}']
  { getters & setters } 

    function get_Item(index: Int32): DNCellWatch; overload;
    function get_Item(cellName: string): DNCellWatch; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds <see cref="T:Aspose.Cells.CellWatch" />
    ///  with row and column.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>Returns the position of this item in the collection. </returns>
    function Add(row: Int32; column: Int32): Int32; overload;
    ///<summary>
    ///  Adds
    ///</summary>
    ///  <param name="cellName"></param>
    ///<returns></returns>
    function Add(cellName: string): Int32; overload;
    function BinarySearch(item: DNCellWatch): Int32; overload;
    function BinarySearch(item: DNCellWatch; comparer: DDN.mscorlib.DNIComparer<DNCellWatch>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCellWatch; comparer: DDN.mscorlib.DNIComparer<DNCellWatch>): Int32; overload;
    function &Contains(item: DNCellWatch): Boolean;
    procedure CopyTo(&array: TArray<DNCellWatch>); overload;
    procedure CopyTo(&array: TArray<DNCellWatch>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCellWatch>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCellWatch>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCellWatch>): DNCellWatch;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCellWatch>): DDN.mscorlib.DNList<DNCellWatch>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCellWatch>): DNCellWatch;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function IndexOf(item: DNCellWatch): Int32; overload;
    function IndexOf(item: DNCellWatch; index: Int32): Int32; overload;
    function IndexOf(item: DNCellWatch; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCellWatch): Int32; overload;
    function LastIndexOf(item: DNCellWatch; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCellWatch; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCellWatch>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCellWatch read get_Item; default;
    property Item[cellName: string]: DNCellWatch read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCellWatchCollection = class(TDNGenericImport<DNCellWatchCollectionClass, DNCellWatchCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartCollectionClass = interface(DNObjectClass)
  ['{C47B6A23-00E6-5F24-A156-5EAF59A6FF8C}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Charts.Chart" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  ChartCollection charts = workbook.Worksheets[0].Charts;
  ///  [Visual Basic]
  ///  Dim workbook as Workbook = new Workbook()
  ///  Dim ChartCollection as Charts = workbook.Worksheets(0).Charts
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.ChartCollection')]
  DNChartCollection = interface(DNObject)
  ['{7BD5C430-11D3-3EBC-9DB1-5B2BCE9FACF9}']
  { getters & setters } 

    function get_Item(index: Int32): DNChart; overload;
    function get_Item(name: string): DNChart; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a chart to the collection.
    ///</summary>
    ///  <param name="type">Chart type</param>
    ///  <param name="left">The x offset to corner</param>
    ///  <param name="top">The y offset to corner</param>
    ///  <param name="width">The chart width</param>
    ///  <param name="height">The chart height</param>
    ///<returns><see cref="T:Aspose.Cells.Charts.Chart" />
    ///  object index.</returns>
    function AddFloatingChart(&type: DNChartType; left: Int32; top: Int32; width: Int32; height: Int32): Int32;
    ///<summary>
    ///  Adds a chart to the collection.
    ///</summary>
    ///  <param name="type">Chart type</param>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    ///<returns><see cref="T:Aspose.Cells.Charts.Chart" />
    ///  object index.</returns>
    function Add(&type: DNChartType; upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32): Int32;
    ///<summary>
    ///  Remove a chart at the specific index.
    ///</summary>
    ///  <param name="index">The chart index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Clear all charts.
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNChart): Int32; overload;
    function BinarySearch(item: DNChart; comparer: DDN.mscorlib.DNIComparer<DNChart>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNChart; comparer: DDN.mscorlib.DNIComparer<DNChart>): Int32; overload;
    function &Contains(item: DNChart): Boolean;
    procedure CopyTo(&array: TArray<DNChart>); overload;
    procedure CopyTo(&array: TArray<DNChart>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNChart>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNChart>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNChart>): DNChart;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNChart>): DDN.mscorlib.DNList<DNChart>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNChart>): DNChart;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function IndexOf(item: DNChart): Int32; overload;
    function IndexOf(item: DNChart; index: Int32): Int32; overload;
    function IndexOf(item: DNChart; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNChart): Int32; overload;
    function LastIndexOf(item: DNChart; index: Int32): Int32; overload;
    function LastIndexOf(item: DNChart; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChart>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChart read get_Item; default;
    property Item[name: string]: DNChart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNChartCollection = class(TDNGenericImport<DNChartCollectionClass, DNChartCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNLegendEntryCollectionClass = interface(DNObjectClass)
  ['{106C9CE3-611A-5EF3-A969-6075FCB82ACD}']
  end;

  ///<summary>
  ///  Represents a collection of all the <see cref="T:Aspose.Cells.Charts.LegendEntry" />
  ///  objects in the specified chart legend.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.LegendEntryCollection')]
  DNLegendEntryCollection = interface(DNObject)
  ['{614B3C82-73BB-3199-BF5A-04B2BC3C8E3D}']
  { getters & setters } 

    function get_Item(index: Int32): DNLegendEntry;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNLegendEntry): Int32; overload;
    function BinarySearch(item: DNLegendEntry; comparer: DDN.mscorlib.DNIComparer<DNLegendEntry>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNLegendEntry; comparer: DDN.mscorlib.DNIComparer<DNLegendEntry>): Int32; overload;
    function &Contains(item: DNLegendEntry): Boolean;
    procedure CopyTo(&array: TArray<DNLegendEntry>); overload;
    procedure CopyTo(&array: TArray<DNLegendEntry>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNLegendEntry>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): DNLegendEntry;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): DDN.mscorlib.DNList<DNLegendEntry>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): DNLegendEntry;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function IndexOf(item: DNLegendEntry): Int32; overload;
    function IndexOf(item: DNLegendEntry; index: Int32): Int32; overload;
    function IndexOf(item: DNLegendEntry; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNLegendEntry): Int32; overload;
    function LastIndexOf(item: DNLegendEntry; index: Int32): Int32; overload;
    function LastIndexOf(item: DNLegendEntry; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNLegendEntry>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNLegendEntry read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNLegendEntryCollection = class(TDNGenericImport<DNLegendEntryCollectionClass, DNLegendEntryCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSeriesCollectionClass = interface(DNObjectClass)
  ['{86F97DC2-2B1E-5FB5-A761-BDC40935BFC7}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Charts.Series" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "A4" cell
  ///  worksheet.Cells["A4"].PutValue(200);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a sample value to "B4" cell
  ///  worksheet.Cells["B4"].PutValue(40);
  ///  //Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells["C1"].PutValue("Q1");
  ///  //Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells["C2"].PutValue("Q2");
  ///  //Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells["C3"].PutValue("Y1");
  ///  //Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells["C4"].PutValue("Y2");
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", true);
  ///  //Setting the data source for the category data of NSeries
  ///  chart.NSeries.CategoryData = "C1:C4";
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Excel object
  ///  Dim sheetIndex As Integer = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "A4" cell
  ///  worksheet.Cells("A4").PutValue(200)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a sample value to "B4" cell
  ///  worksheet.Cells("B4").PutValue(40)
  ///  'Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells("C1").PutValue("Q1")
  ///  'Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells("C2").PutValue("Q2")
  ///  'Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells("C3").PutValue("Y1")
  ///  'Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells("C4").PutValue("Y2")
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", True)
  ///  'Setting the data source for the category data of NSeries
  ///  chart.NSeries.CategoryData = "C1:C4"
  ///  'Saving the Excel file
  ///  workbook.Save("C:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.SeriesCollection')]
  DNSeriesCollection = interface(DNObject)
  ['{57941404-7B71-333A-AA82-14DCF7895445}']
  { getters & setters } 

    function get_Item(index: Int32): DNSeries;
    function get_CategoryData: string;
    procedure set_CategoryData(value: string);
    function get_SecondCategoryData: string;
    procedure set_SecondCategoryData(value: string);
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Charts.Series" />
    ///  element by order.
    ///</summary>
    ///  <param name="order">The order of series</param>
    ///<returns>The element series</returns>
    function GetSeriesByOrder(order: Int32): DNSeries;
    ///<summary>
    ///  Remove at a series at the specific index.
    ///</summary>
    ///  <param name="index">The index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Directly changes the orders of the two series.
    ///</summary>
    ///  <param name="sourceIndex">The current index</param>
    ///  <param name="destIndex">The dest index</param>
    procedure ChangeSeriesOrder(sourceIndex: Int32; destIndex: Int32);
    ///<summary>
    ///  Adds the <see cref="T:Aspose.Cells.Charts.SeriesCollection" />
    ///  collection to a chart.
    ///</summary>
    ///  <param name="area">Specifies values from which to plot the data series</param>
    ///  <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.</param>
    ///<returns>Return the first index of the added ASeries in the NSeries.</returns>
    ///<remarks><br>If set data on contiguous cells, use colon to seperate them.For example, R[1]C[1]:R[3]C[2].</br><br>If set data on contiguous cells, use comma to seperate them.For example,(R[1]C[1],R[3]C[2]).</br></remarks>
    function AddR1C1(area: string; isVertical: Boolean): Int32;
    ///<summary>
    ///  Adds the <see cref="T:Aspose.Cells.Charts.SeriesCollection" />
    ///  collection to a chart.
    ///</summary>
    ///  <param name="area">Specifies values from which to plot the data series</param>
    ///  <param name="isVertical">Specifies whether to plot the series from a range of cell values by row or by column.</param>
    ///<returns>Return the first index of the added ASeries in the NSeries.</returns>
    ///<remarks><br>If set data on contiguous cells, use colon to seperate them.For example, $C$2:$C$5.</br><br>If set data on non contiguous cells, use comma to seperate them.For example: ($C$2,$D$5).</br></remarks>
    function Add(area: string; isVertical: Boolean): Int32;
    ///<summary>
    ///  Clears the collection
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNSeries): Int32; overload;
    function BinarySearch(item: DNSeries; comparer: DDN.mscorlib.DNIComparer<DNSeries>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSeries; comparer: DDN.mscorlib.DNIComparer<DNSeries>): Int32; overload;
    function &Contains(item: DNSeries): Boolean;
    procedure CopyTo(&array: TArray<DNSeries>); overload;
    procedure CopyTo(&array: TArray<DNSeries>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSeries>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSeries>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSeries>): DNSeries;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSeries>): DDN.mscorlib.DNList<DNSeries>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSeries>): DNSeries;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function IndexOf(item: DNSeries): Int32; overload;
    function IndexOf(item: DNSeries; index: Int32): Int32; overload;
    function IndexOf(item: DNSeries; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSeries): Int32; overload;
    function LastIndexOf(item: DNSeries; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSeries; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSeries>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSeries read get_Item; default;
    ///<summary>
    ///  Gets or sets the range of category Axis values.
    ///  It can be a range of cells (such as, "d1:e10"),
    ///  or a sequence of values (such as,"{2,6,8,10}").
    ///</summary>
    property CategoryData: string read get_CategoryData write set_CategoryData;
    ///<summary>
    ///  Gets or sets the range of second category Axis values.
    ///  It can be a range of cells (such as, "d1:e10"),
    ///  or a sequence of values (such as,"{2,6,8,10}").
    ///  Only effects when some ASerieses plot on the second axis.
    ///</summary>
    property SecondCategoryData: string read get_SecondCategoryData write set_SecondCategoryData;
    ///<summary>
    ///  Represents if the color of points is varied.
    ///</summary>
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSeriesCollection = class(TDNGenericImport<DNSeriesCollectionClass, DNSeriesCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineCollectionClass = interface(DNObjectClass)
  ['{165EFF1A-43A5-56CD-AB5C-E2DE8D237BA6}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Charts.Sparkline" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.SparklineCollection')]
  DNSparklineCollection = interface(DNObject)
  ['{3A1EAD61-FDD6-3EB5-9500-E7C41430E186}']
  { getters & setters } 

    function get_Item(index: Int32): DNSparkline;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Add a sparkline.
    ///</summary>
    ///  <param name="dataRange">Specifies the new data range of the sparkline.</param>
    ///  <param name="row">The row index of the location.</param>
    ///  <param name="column">The column index of the location.</param>
    function Add(dataRange: string; row: Int32; column: Int32): Int32;
    ///<summary>
    ///  Removes the sparkline
    ///</summary>
    ///  <param name="o"></param>
    procedure Remove(o: DDN.mscorlib.DNObject);
    function BinarySearch(item: DNSparkline): Int32; overload;
    function BinarySearch(item: DNSparkline; comparer: DDN.mscorlib.DNIComparer<DNSparkline>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSparkline; comparer: DDN.mscorlib.DNIComparer<DNSparkline>): Int32; overload;
    function &Contains(item: DNSparkline): Boolean;
    procedure CopyTo(&array: TArray<DNSparkline>); overload;
    procedure CopyTo(&array: TArray<DNSparkline>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSparkline>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSparkline>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSparkline>): DNSparkline;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSparkline>): DDN.mscorlib.DNList<DNSparkline>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSparkline>): DNSparkline;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function IndexOf(item: DNSparkline): Int32; overload;
    function IndexOf(item: DNSparkline; index: Int32): Int32; overload;
    function IndexOf(item: DNSparkline; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSparkline): Int32; overload;
    function LastIndexOf(item: DNSparkline; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSparkline; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSparkline>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSparkline read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSparklineCollection = class(TDNGenericImport<DNSparklineCollectionClass, DNSparklineCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineGroupCollectionClass = interface(DNObjectClass)
  ['{C21B7E5F-7C5D-5168-8A65-D30EC3B790FE}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Charts.SparklineGroup" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.SparklineGroupCollection')]
  DNSparklineGroupCollection = interface(DNObject)
  ['{89EC08CB-AE12-3574-893B-0B0E6C3571FB}']
  { getters & setters } 

    function get_Item(index: Int32): DNSparklineGroup;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an <see cref="T:Aspose.Cells.Charts.SparklineGroup" />
    ///  item to the collection.
    ///</summary>
    ///  <param name="type">Specifies the type of the Sparkline group.</param>
    ///  <param name="dataRange">Specifies the data range of the sparkline group.</param>
    ///  <param name="isVertical">Specifies whether to plot the sparklines from the data range by row or by column.</param>
    ///  <param name="locationRange">Specifies where the sparklines to be placed.</param>
    ///<returns><see cref="T:Aspose.Cells.Charts.SparklineGroup" />
    ///  object index.</returns>
    function Add(&type: DNSparklineType; dataRange: string; isVertical: Boolean; locationRange: DNCellArea): Int32;
    ///<summary>
    ///  Clears the sparklines that is inside an area of cells.
    ///</summary>
    ///  <param name="cellArea">Specifies the area of cells</param>
    procedure ClearSparklines(cellArea: DNCellArea);
    ///<summary>
    ///  Clears the sparkline groups that overlaps an area of cells.
    ///</summary>
    ///  <param name="cellArea">Specifies the area of cells</param>
    procedure ClearSparklineGroups(cellArea: DNCellArea);
    function BinarySearch(item: DNSparklineGroup): Int32; overload;
    function BinarySearch(item: DNSparklineGroup; comparer: DDN.mscorlib.DNIComparer<DNSparklineGroup>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSparklineGroup; comparer: DDN.mscorlib.DNIComparer<DNSparklineGroup>): Int32; overload;
    function &Contains(item: DNSparklineGroup): Boolean;
    procedure CopyTo(&array: TArray<DNSparklineGroup>); overload;
    procedure CopyTo(&array: TArray<DNSparklineGroup>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSparklineGroup>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): DNSparklineGroup;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): DDN.mscorlib.DNList<DNSparklineGroup>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): DNSparklineGroup;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function IndexOf(item: DNSparklineGroup): Int32; overload;
    function IndexOf(item: DNSparklineGroup; index: Int32): Int32; overload;
    function IndexOf(item: DNSparklineGroup; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSparklineGroup): Int32; overload;
    function LastIndexOf(item: DNSparklineGroup; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSparklineGroup; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSparklineGroup>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSparklineGroup read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSparklineGroupCollection = class(TDNGenericImport<DNSparklineGroupCollectionClass, DNSparklineGroupCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTrendlineCollectionClass = interface(DNObjectClass)
  ['{A53C785C-E6BD-50CD-80C0-BBF743367026}']
  end;

  ///<summary>
  ///  Represents a collection of all the <see cref="T:Aspose.Cells.Charts.Trendline" />
  ///  objects for the specified data series.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  int chartIndex = excel.Worksheets[0].Charts.Add(ChartType.Column, 3, 3, 15, 10);
  ///  Chart chart = excel.Worksheets[0].Charts[chartIndex];
  ///  chart.NSeries.Add("A1:a3", true);
  ///  chart.NSeries[0].TrendLines.Add(TrendlineType.Linear, "MyTrendLine");
  ///  Trendline line = chart.NSeries[0].TrendLines[0];
  ///  line.DisplayEquation = true;
  ///  line.DisplayRSquared = true;
  ///  line.Color = Color.Red;
  ///  [Visual Basic]
  ///  Dim chartIndex As Integer =  excel.Worksheets(0).Charts.Add(ChartType.Column,3,3,15,10)
  ///  Dim chart As Chart =  excel.Worksheets(0).Charts(chartIndex)
  ///  chart.NSeries.Add("A1:a3", True)
  ///  chart.NSeries(0).TrendLines.Add(TrendlineType.Linear, "MyTrendLine")
  ///  Dim line As Trendline =  chart.NSeries(0).TrendLines(0)
  ///  line.DisplayEquation = True
  ///  line.DisplayRSquared = True
  ///  line.Color = Color.Red
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.TrendlineCollection')]
  DNTrendlineCollection = interface(DNObject)
  ['{F9924C0A-3A3B-3296-978A-C00B3B4D6E6B}']
  { getters & setters } 

    function get_Item(index: Int32): DNTrendline;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a <seealso cref="T:Aspose.Cells.Charts.Trendline" />
    ///  object to this collection with specified type.
    ///</summary>
    ///  <param name="type">Trendline type.</param>
    ///<returns><see cref="T:Aspose.Cells.Charts.Trendline" />
    ///  object index.</returns>
    function Add(&type: DNTrendlineType): Int32; overload;
    ///<summary>
    ///  Adds a <seealso cref="T:Aspose.Cells.Charts.Trendline" />
    ///  object to this collection with specified type and name.
    ///</summary>
    ///  <param name="type">Trendline type.</param>
    ///  <param name="name">Trendline name.</param>
    ///<returns><see cref="T:Aspose.Cells.Charts.Trendline" />
    ///  object index.</returns>
    function Add(&type: DNTrendlineType; name: string): Int32; overload;
    function BinarySearch(item: DNTrendline): Int32; overload;
    function BinarySearch(item: DNTrendline; comparer: DDN.mscorlib.DNIComparer<DNTrendline>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTrendline; comparer: DDN.mscorlib.DNIComparer<DNTrendline>): Int32; overload;
    function &Contains(item: DNTrendline): Boolean;
    procedure CopyTo(&array: TArray<DNTrendline>); overload;
    procedure CopyTo(&array: TArray<DNTrendline>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTrendline>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTrendline>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTrendline>): DNTrendline;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTrendline>): DDN.mscorlib.DNList<DNTrendline>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTrendline>): DNTrendline;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function IndexOf(item: DNTrendline): Int32; overload;
    function IndexOf(item: DNTrendline; index: Int32): Int32; overload;
    function IndexOf(item: DNTrendline; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTrendline): Int32; overload;
    function LastIndexOf(item: DNTrendline; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTrendline; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTrendline>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTrendline read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTrendlineCollection = class(TDNGenericImport<DNTrendlineCollectionClass, DNTrendlineCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColumnCollectionClass = interface(DNObjectClass)
  ['{E67AA4B9-0A87-5EF1-A460-EFAC1382ED35}']
  end;

  ///<summary>
  ///  Collects the <seealso cref="T:Aspose.Cells.Column" />
  ///  objects that represent the individual columns in a worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Add new Style to Workbook
  ///  Style style = workbook.CreateStyle();
  ///  //Setting the background color to Blue
  ///  style.ForegroundColor = Color.Blue;
  ///  //setting Background Pattern
  ///  style.Pattern = BackgroundType.Solid;
  ///  //New Style Flag
  ///  StyleFlag styleFlag = new StyleFlag();
  ///  //Set All Styles
  ///  styleFlag.All = true;
  ///  //Change the default width of first ten columns
  ///  for (int i = 0; i &lt; 10; i++)
  ///  {
  ///  worksheet.Cells.Columns[i].Width = 20;
  ///  }
  ///  //Get the Column with non default formatting
  ///  ColumnCollection columns = worksheet.Cells.Columns;
  ///  foreach (Column column in columns)
  ///  {
  ///  //Apply Style to first ten Columns
  ///  column.ApplyStyle(style, styleFlag);
  ///  }
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Add new Style to Workbook
  ///  Dim style As Style = workbook.CreateStyles()
  ///  'Setting the background color to Blue
  ///  style.ForegroundColor = Color.Blue
  ///  'setting Background Pattern
  ///  style.Pattern = BackgroundType.Solid
  ///  'New Style Flag
  ///  Dim styleFlag As New StyleFlag()
  ///  'Set All Styles
  ///  styleFlag.All = True
  ///  'Change the default width of first ten columns
  ///  For i As Integer = 0 To 9
  ///  worksheet.Cells.Columns(i).Width = 20
  ///  Next i
  ///  'Get the Column with non default formatting
  ///  Dim columns As ColumnCollection = worksheet.Cells.Columns
  ///  For Each column As Column In columns
  ///  'Apply Style to first ten Columns
  ///  column.ApplyStyle(style, styleFlag)
  ///  Next column
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.ColumnCollection')]
  DNColumnCollection = interface(DNObject)
  ['{97F9993E-BFF4-3B90-8960-E47DC1BB0382}']
  { getters & setters } 

    function get_Item(columnIndex: Int32): DNColumn;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Gets the column object by the index.
    ///</summary>
    ///  <param name="index"></param>
    ///<returns>Returns the column object.</returns>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Columns.GetColumnByIndex() method.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function GetByIndex(index: Int32): DNColumn;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Column" />
    ///  object by the position in the list.
    ///</summary>
    ///  <param name="index">The position in the list.</param>
    ///<returns>Returns the column object.</returns>
    function GetColumnByIndex(index: Int32): DNColumn;
    function BinarySearch(item: DNColumn): Int32; overload;
    function BinarySearch(item: DNColumn; comparer: DDN.mscorlib.DNIComparer<DNColumn>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNColumn; comparer: DDN.mscorlib.DNIComparer<DNColumn>): Int32; overload;
    function &Contains(item: DNColumn): Boolean;
    procedure CopyTo(&array: TArray<DNColumn>); overload;
    procedure CopyTo(&array: TArray<DNColumn>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNColumn>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNColumn>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNColumn>): DNColumn;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNColumn>): DDN.mscorlib.DNList<DNColumn>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNColumn>): DNColumn;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function IndexOf(item: DNColumn): Int32; overload;
    function IndexOf(item: DNColumn; index: Int32): Int32; overload;
    function IndexOf(item: DNColumn; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNColumn): Int32; overload;
    function LastIndexOf(item: DNColumn; index: Int32): Int32; overload;
    function LastIndexOf(item: DNColumn; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNColumn>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[columnIndex: Int32]: DNColumn read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNColumnCollection = class(TDNGenericImport<DNColumnCollectionClass, DNColumnCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCommentCollectionClass = interface(DNObjectClass)
  ['{BED0AD9E-5193-57A4-9685-5D97E3E9C9BC}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Comment" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  CommentCollection comments = workbook.Worksheets[0].Comments;
  ///  [Visual Basic]
  ///  Dim workbook as Workbook = new Workbook()
  ///  Dim comments as CommentCollection = workbook.Worksheets(0).Comments
  ///</code></example>
  [DNTypeName('Aspose.Cells.CommentCollection')]
  DNCommentCollection = interface(DNObject)
  ['{8C33E2E3-868B-39DA-970D-08F58FC5733A}']
  { getters & setters } 

    function get_Item(index: Int32): DNComment; overload;
    function get_Item(cellName: string): DNComment; overload;
    function get_Item(row: Int32; column: Int32): DNComment; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a threaded comment.
    ///</summary>
    ///  <param name="row">Cell row index.</param>
    ///  <param name="column">Cell column index.</param>
    ///  <param name="text">The text of the comment</param>
    ///  <param name="author">The user of this threaded comment.</param>
    ///<returns><see cref="T:Aspose.Cells.ThreadedComment" />
    ///  object index.</returns>
    function AddThreadedComment(row: Int32; column: Int32; text: string; author: DNThreadedCommentAuthor): Int32; overload;
    ///<summary>
    ///  Adds a threaded comment.
    ///</summary>
    ///  <param name="cellName">The name of the cell.</param>
    ///  <param name="text">The text of the comment</param>
    ///  <param name="author">The user of this threaded comment.</param>
    ///<returns><see cref="T:Aspose.Cells.ThreadedComment" />
    ///  object index.</returns>
    function AddThreadedComment(cellName: string; text: string; author: DNThreadedCommentAuthor): Int32; overload;
    ///<summary>
    ///  Gets the threaded comments by row and column index.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns></returns>
    function GetThreadedComments(row: Int32; column: Int32): DNThreadedCommentCollection; overload;
    ///<summary>
    ///  Gets the threaded comments by cell name.
    ///</summary>
    ///  <param name="cellName">The name of the cell.</param>
    ///<returns></returns>
    function GetThreadedComments(cellName: string): DNThreadedCommentCollection; overload;
    ///<summary>
    ///  Adds a comment to the collection.
    ///</summary>
    ///  <param name="row">Cell row index.</param>
    ///  <param name="column">Cell column index.</param>
    ///<returns><see cref="T:Aspose.Cells.Comment" />
    ///  object index.</returns>
    function Add(row: Int32; column: Int32): Int32; overload;
    ///<summary>
    ///  Adds a comment to the collection.
    ///</summary>
    ///  <param name="cellName">Cell name.</param>
    ///<returns><see cref="T:Aspose.Cells.Comment" />
    ///  object index.</returns>
    function Add(cellName: string): Int32; overload;
    ///<summary>
    ///  Removes the comment of the specific cell.
    ///</summary>
    ///  <param name="cellName">The name of cell which contains a comment.</param>
    procedure RemoveAt(cellName: string); overload;
    ///<summary>
    ///  Removes the comment of the specific cell.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">the column index.</param>
    procedure RemoveAt(row: Int32; column: Int32); overload;
    ///<summary>
    ///  Removes all comments;
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNComment): Int32; overload;
    function BinarySearch(item: DNComment; comparer: DDN.mscorlib.DNIComparer<DNComment>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNComment; comparer: DDN.mscorlib.DNIComparer<DNComment>): Int32; overload;
    function &Contains(item: DNComment): Boolean;
    procedure CopyTo(&array: TArray<DNComment>); overload;
    procedure CopyTo(&array: TArray<DNComment>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNComment>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNComment>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNComment>): DNComment;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNComment>): DDN.mscorlib.DNList<DNComment>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNComment>): DNComment;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function IndexOf(item: DNComment): Int32; overload;
    function IndexOf(item: DNComment; index: Int32): Int32; overload;
    function IndexOf(item: DNComment; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNComment): Int32; overload;
    function LastIndexOf(item: DNComment; index: Int32): Int32; overload;
    function LastIndexOf(item: DNComment; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNComment>;
    procedure RemoveAt(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNComment read get_Item; default;
    property Item[cellName: string]: DNComment read get_Item; default;
    property Item[row: Int32; column: Int32]: DNComment read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCommentCollection = class(TDNGenericImport<DNCommentCollectionClass, DNCommentCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingIconCollectionClass = interface(DNObjectClass)
  ['{43D302DB-1CC3-5C4E-B992-C8AC91018D67}']
  end;

  ///<summary>
  ///  Represents  a collection of <see cref="T:Aspose.Cells.ConditionalFormattingIcon" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Get Conditional Formatting
  ///  ConditionalFormattingCollection cformattings = sheet.ConditionalFormattings;
  ///  //Adds an empty conditional formatting
  ///  int index = cformattings.Add();
  ///  //Get newly added Conditional formatting
  ///  FormatConditionCollection fcs = cformattings[index];
  ///  //Sets the conditional format range.
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 0;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  fcs.AddArea(ca);
  ///  ca = new CellArea();
  ///  ca.StartRow = 1;
  ///  ca.EndRow = 1;
  ///  ca.StartColumn = 1;
  ///  ca.EndColumn = 1;
  ///  fcs.AddArea(ca);
  ///  //Sets condition
  ///  int idx = fcs.AddCondition(FormatConditionType.IconSet);
  ///  FormatCondition cond = fcs[idx];
  ///  //Sets condition's type
  ///  cond.IconSet.Type = IconSetType.ArrowsGray3;
  ///  //Add custom iconset condition.
  ///  ConditionalFormattingIcon cfIcon = cond.IconSet.CfIcons[0];
  ///  cfIcon.Type = IconSetType.Arrows3;
  ///  cfIcon.Index = 0;
  ///  ConditionalFormattingIcon cfIcon1 = cond.IconSet.CfIcons[1];
  ///  cfIcon1.Type = IconSetType.ArrowsGray3;
  ///  cfIcon1.Index = 1;
  ///  ConditionalFormattingIcon cfIcon2 = cond.IconSet.CfIcons[2];
  ///  cfIcon2.Type = IconSetType.Boxes5;
  ///  cfIcon2.Index = 2;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\output.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Get Conditional Formatting
  ///  Dim cformattings As ConditionalFormattingCollection = sheet.ConditionalFormattings
  ///  'Adds an empty conditional formatting
  ///  Dim index As Integer = cformattings.Add()
  ///  'Get newly added Conditional formatting
  ///  Dim fcs As FormatConditionCollection = cformattings(index)
  ///  'Sets the conditional format range.
  ///  Dim ca As New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 0
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///  fcs.AddArea(ca)
  ///  ca = New CellArea()
  ///  ca.StartRow = 1
  ///  ca.EndRow = 1
  ///  ca.StartColumn = 1
  ///  ca.EndColumn = 1
  ///  fcs.AddArea(ca)
  ///  //Sets condition
  ///  Dim idx As Integer =fcs.AddCondition(FormatConditionType.IconSet)
  ///  Dim cond As FormatCondition=fcs[idx]
  ///  //Sets condition's type
  ///  cfIcon.Type = IconSetType.ArrowsGray3
  ///  'Add custom iconset  condition.
  ///  Dim cfIcon As ConditionalFormattingIcon = cond.IconSet.CfIcons[0]
  ///  cfIcon.Type = IconSetType.Arrows3
  ///  cfIcon.Index=0
  ///  Dim cfIcon1 As ConditionalFormattingIcon = cond.IconSet.CfIcons[1]
  ///  cfIcon1.Type = IconSetType.ArrowsGray3
  ///  cfIcon1.Index=1
  ///  Dim cfIcon2 As ConditionalFormattingIcon = cond.IconSet.CfIcons[2]
  ///  cfIcon2.Type = IconSetType.Boxes5
  ///  cfIcon2.Index=2
  ///  'Saving the Excel file
  ///  workbook.Save("C:\output.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.ConditionalFormattingIconCollection')]
  DNConditionalFormattingIconCollection = interface(DNObject)
  ['{1B87EAF2-5263-3F3E-AB09-0765D063591E}']
  { getters & setters } 

    function get_Item(index: Int32): DNConditionalFormattingIcon;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds <see cref="T:Aspose.Cells.ConditionalFormattingIcon" />
    ///  object.
    ///</summary>
    ///  <param name="type">The value type.</param>
    ///  <param name="index">The Index.</param>
    ///<returns>Returns the index of new object in the list.</returns>
    function Add(&type: DNIconSetType; index: Int32): Int32; overload;
    ///<summary>
    ///  Adds <see cref="T:Aspose.Cells.ConditionalFormattingIcon" />
    ///  object.
    ///</summary>
    ///  <param name="cficon">Returns the index of new object in the list.</param>
    function Add(cficon: DNConditionalFormattingIcon): Int32; overload;
    function BinarySearch(item: DNConditionalFormattingIcon): Int32; overload;
    function BinarySearch(item: DNConditionalFormattingIcon; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingIcon>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNConditionalFormattingIcon; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingIcon>): Int32; overload;
    function &Contains(item: DNConditionalFormattingIcon): Boolean;
    procedure CopyTo(&array: TArray<DNConditionalFormattingIcon>); overload;
    procedure CopyTo(&array: TArray<DNConditionalFormattingIcon>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNConditionalFormattingIcon>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): DNConditionalFormattingIcon;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): DDN.mscorlib.DNList<DNConditionalFormattingIcon>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): DNConditionalFormattingIcon;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function IndexOf(item: DNConditionalFormattingIcon): Int32; overload;
    function IndexOf(item: DNConditionalFormattingIcon; index: Int32): Int32; overload;
    function IndexOf(item: DNConditionalFormattingIcon; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingIcon): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingIcon; index: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingIcon; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConditionalFormattingIcon>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConditionalFormattingIcon read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConditionalFormattingIconCollection = class(TDNGenericImport<DNConditionalFormattingIconCollectionClass, DNConditionalFormattingIconCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingValueCollectionClass = interface(DNObjectClass)
  ['{6CB096D1-7A30-5D0D-943A-5F91E2541726}']
  end;

  ///<summary>
  ///  Describes a collection of CFValueObject.
  ///  Use only for icon sets.
  ///</summary>
  [DNTypeName('Aspose.Cells.ConditionalFormattingValueCollection')]
  DNConditionalFormattingValueCollection = interface(DNObject)
  ['{88D06D82-4622-3D6A-9EFF-8D687A6782DC}']
  { getters & setters } 

    function get_Item(index: Int32): DNConditionalFormattingValue;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds <see cref="T:Aspose.Cells.ConditionalFormattingValue" />
    ///  object.
    ///</summary>
    ///  <param name="type">The value type.</param>
    ///  <param name="value">The value.</param>
    ///<returns>Returns the index of new object in the list.</returns>
    function Add(&type: DNFormatConditionValueType; value: string): Int32;
    function BinarySearch(item: DNConditionalFormattingValue): Int32; overload;
    function BinarySearch(item: DNConditionalFormattingValue; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingValue>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNConditionalFormattingValue; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingValue>): Int32; overload;
    function &Contains(item: DNConditionalFormattingValue): Boolean;
    procedure CopyTo(&array: TArray<DNConditionalFormattingValue>); overload;
    procedure CopyTo(&array: TArray<DNConditionalFormattingValue>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNConditionalFormattingValue>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): DNConditionalFormattingValue;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): DDN.mscorlib.DNList<DNConditionalFormattingValue>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): DNConditionalFormattingValue;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function IndexOf(item: DNConditionalFormattingValue): Int32; overload;
    function IndexOf(item: DNConditionalFormattingValue; index: Int32): Int32; overload;
    function IndexOf(item: DNConditionalFormattingValue; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingValue): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingValue; index: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingValue; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConditionalFormattingValue>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConditionalFormattingValue read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConditionalFormattingValueCollection = class(TDNGenericImport<DNConditionalFormattingValueCollectionClass, DNConditionalFormattingValueCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCustomFilterCollectionClass = interface(DNObjectClass)
  ['{DBA3B473-01F0-5B75-B98E-1670E3D7FBB7}']
  { constructors } 

    {class} function init: DNCustomFilterCollection;

  end;

  ///<summary>
  ///  Represents the custom filters.
  ///</summary>
  [DNTypeName('Aspose.Cells.CustomFilterCollection')]
  DNCustomFilterCollection = interface(DNObject)
  ['{FAEE49EC-D85F-365B-BCCA-45739034FC11}']
  { getters & setters } 

    function get_And: Boolean;
    procedure set_And(value: Boolean);
    function get_Item(index: Int32): DNCustomFilter;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNCustomFilter): Int32; overload;
    function BinarySearch(item: DNCustomFilter; comparer: DDN.mscorlib.DNIComparer<DNCustomFilter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCustomFilter; comparer: DDN.mscorlib.DNIComparer<DNCustomFilter>): Int32; overload;
    function &Contains(item: DNCustomFilter): Boolean;
    procedure CopyTo(&array: TArray<DNCustomFilter>); overload;
    procedure CopyTo(&array: TArray<DNCustomFilter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCustomFilter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): DNCustomFilter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): DDN.mscorlib.DNList<DNCustomFilter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): DNCustomFilter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function IndexOf(item: DNCustomFilter): Int32; overload;
    function IndexOf(item: DNCustomFilter; index: Int32): Int32; overload;
    function IndexOf(item: DNCustomFilter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomFilter): Int32; overload;
    function LastIndexOf(item: DNCustomFilter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomFilter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomFilter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the two criteria have an "and" relationship.
    ///</summary>
    property &And: Boolean read get_And write set_And;
    property Item[index: Int32]: DNCustomFilter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCustomFilterCollection = class(TDNGenericImport<DNCustomFilterCollectionClass, DNCustomFilterCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataSorterKeyCollectionClass = interface(DNObjectClass)
  ['{C4A87B48-2DBA-5E70-BCC5-110A7CA6731E}']
  { constructors } 

    {class} function init: DNDataSorterKeyCollection;

  end;

  ///<summary>
  ///  Represents the key list of data sorter.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataSorterKeyCollection')]
  DNDataSorterKeyCollection = interface(DNObject)
  ['{7A14F0DD-3025-3185-B43A-83C9EBB0BCCC}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataSorterKey;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNDataSorterKey): Int32; overload;
    function BinarySearch(item: DNDataSorterKey; comparer: DDN.mscorlib.DNIComparer<DNDataSorterKey>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNDataSorterKey; comparer: DDN.mscorlib.DNIComparer<DNDataSorterKey>): Int32; overload;
    function &Contains(item: DNDataSorterKey): Boolean;
    procedure CopyTo(&array: TArray<DNDataSorterKey>); overload;
    procedure CopyTo(&array: TArray<DNDataSorterKey>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNDataSorterKey>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): DNDataSorterKey;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): DDN.mscorlib.DNList<DNDataSorterKey>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): DNDataSorterKey;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function IndexOf(item: DNDataSorterKey): Int32; overload;
    function IndexOf(item: DNDataSorterKey; index: Int32): Int32; overload;
    function IndexOf(item: DNDataSorterKey; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNDataSorterKey): Int32; overload;
    function LastIndexOf(item: DNDataSorterKey; index: Int32): Int32; overload;
    function LastIndexOf(item: DNDataSorterKey; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDataSorterKey>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataSorterKey read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDataSorterKeyCollection = class(TDNGenericImport<DNDataSorterKeyCollectionClass, DNDataSorterKeyCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCheckBoxCollectionClass = interface(DNObjectClass)
  ['{843B6CEB-22A1-5239-AAC9-4057978CE5EE}']
  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Cells.Drawing.CheckBox" />
  ///  objects in a worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  int index = excel.Worksheets[0].CheckBoxes.Add(15, 15, 20, 100);
  ///  CheckBox checkBox = excel.Worksheets[0].CheckBoxes[index];
  ///  checkBox.Text = "Check Box 1";
  ///  [Visual Basic]
  ///  Dim index as integer = excel.Worksheets(0).CheckBoxes.Add(15, 15, 20, 100)
  ///  Dim checkBox as CheckBox = excel.Worksheets(0).CheckBoxes[index];
  ///  checkBox.Text = "Check Box 1"
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.CheckBoxCollection')]
  DNCheckBoxCollection = interface(DNObject)
  ['{D2E840D1-8335-3A81-AFEC-92A65F8A93BF}']
  { getters & setters } 

    function get_Item(index: Int32): DNCheckBox;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a checkBox to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="height">Height of checkBox, in unit of pixel.</param>
    ///  <param name="width">Width of checkBox, in unit of pixel.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.CheckBox" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32): Int32;
    function BinarySearch(item: DNCheckBox): Int32; overload;
    function BinarySearch(item: DNCheckBox; comparer: DDN.mscorlib.DNIComparer<DNCheckBox>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCheckBox; comparer: DDN.mscorlib.DNIComparer<DNCheckBox>): Int32; overload;
    function &Contains(item: DNCheckBox): Boolean;
    procedure CopyTo(&array: TArray<DNCheckBox>); overload;
    procedure CopyTo(&array: TArray<DNCheckBox>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCheckBox>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCheckBox>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCheckBox>): DNCheckBox;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCheckBox>): DDN.mscorlib.DNList<DNCheckBox>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCheckBox>): DNCheckBox;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function IndexOf(item: DNCheckBox): Int32; overload;
    function IndexOf(item: DNCheckBox; index: Int32): Int32; overload;
    function IndexOf(item: DNCheckBox; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCheckBox): Int32; overload;
    function LastIndexOf(item: DNCheckBox; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCheckBox; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCheckBox>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCheckBox read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCheckBoxCollection = class(TDNGenericImport<DNCheckBoxCollectionClass, DNCheckBoxCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGradientStopCollectionClass = interface(DNObjectClass)
  ['{2A48E7D8-05C7-5E5F-8830-BCEBA4AD8DC6}']
  end;

  ///<summary>
  ///  Represents the gradient stop collection.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientStopCollection')]
  DNGradientStopCollection = interface(DNObject)
  ['{60364C74-7E8E-3598-BB9B-81119452BFD6}']
  { getters & setters } 

    function get_Item(index: Int32): DNGradientStop;
    procedure set_Item(index: Int32; value: DNGradientStop);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Add a gradient stop.
    ///</summary>
    ///  <param name="position">The position of the stop,in unit of percentage.</param>
    ///  <param name="color">The color of the stop.</param>
    ///  <param name="alpha">The alpha of the color.</param>
    procedure Add(position: Double; color: DNCellsColor; alpha: Int32); overload;
    ///<summary>
    ///  Add a gradient stop.
    ///</summary>
    ///  <param name="position">The position of the stop,in unit of percentage.</param>
    ///  <param name="color">The color of the stop.</param>
    ///  <param name="alpha">The alpha of the color.</param>
    procedure Add(position: Double; color: DDN.System.Drawing.DNColor; alpha: Int32); overload;
    function BinarySearch(item: DNGradientStop): Int32; overload;
    function BinarySearch(item: DNGradientStop; comparer: DDN.mscorlib.DNIComparer<DNGradientStop>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNGradientStop; comparer: DDN.mscorlib.DNIComparer<DNGradientStop>): Int32; overload;
    function &Contains(item: DNGradientStop): Boolean;
    procedure CopyTo(&array: TArray<DNGradientStop>); overload;
    procedure CopyTo(&array: TArray<DNGradientStop>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNGradientStop>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNGradientStop>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNGradientStop>): DNGradientStop;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNGradientStop>): DDN.mscorlib.DNList<DNGradientStop>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNGradientStop>): DNGradientStop;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function IndexOf(item: DNGradientStop): Int32; overload;
    function IndexOf(item: DNGradientStop; index: Int32): Int32; overload;
    function IndexOf(item: DNGradientStop; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNGradientStop): Int32; overload;
    function LastIndexOf(item: DNGradientStop; index: Int32): Int32; overload;
    function LastIndexOf(item: DNGradientStop; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNGradientStop>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNGradientStop read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNGradientStopCollection = class(TDNGenericImport<DNGradientStopCollectionClass, DNGradientStopCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNOleObjectCollectionClass = interface(DNObjectClass)
  ['{7A0C0A79-71D4-516D-AB76-226F8EE26743}']
  end;

  ///<summary>
  ///  Represents embedded OLE objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.OleObjectCollection')]
  DNOleObjectCollection = interface(DNObject)
  ['{9555C2C5-FEA8-3673-AB0D-16B56CCC884D}']
  { getters & setters } 

    function get_Item(index: Int32): DNOleObject;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an OleObject to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="height">Height of oleObject, in unit of pixel.</param>
    ///  <param name="width">Width of oleObject, in unit of pixel.</param>
    ///  <param name="imageData"> Image of ole object as byte array.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.OleObject" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; imageData: TArray<Byte>): Int32; overload;
    ///<summary>
    ///  Adds an linked OleObject to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="height">Height of oleObject, in unit of pixel.</param>
    ///  <param name="width">Width of oleObject, in unit of pixel.</param>
    ///  <param name="imageData"> Image of ole object as byte array.</param>
    ///  <param name="linkedFile"></param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.OleObject" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; imageData: TArray<Byte>; linkedFile: string): Int32; overload;
    ///<summary>
    ///  Remove all embedded OLE objects.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the element at the specified index.
    ///</summary>
    ///  <param name="index">The specified index.</param>
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNOleObject): Int32; overload;
    function BinarySearch(item: DNOleObject; comparer: DDN.mscorlib.DNIComparer<DNOleObject>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNOleObject; comparer: DDN.mscorlib.DNIComparer<DNOleObject>): Int32; overload;
    function &Contains(item: DNOleObject): Boolean;
    procedure CopyTo(&array: TArray<DNOleObject>); overload;
    procedure CopyTo(&array: TArray<DNOleObject>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNOleObject>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNOleObject>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNOleObject>): DNOleObject;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNOleObject>): DDN.mscorlib.DNList<DNOleObject>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNOleObject>): DNOleObject;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function IndexOf(item: DNOleObject): Int32; overload;
    function IndexOf(item: DNOleObject; index: Int32): Int32; overload;
    function IndexOf(item: DNOleObject; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNOleObject): Int32; overload;
    function LastIndexOf(item: DNOleObject; index: Int32): Int32; overload;
    function LastIndexOf(item: DNOleObject; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOleObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOleObject read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOleObjectCollection = class(TDNGenericImport<DNOleObjectCollectionClass, DNOleObjectCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPictureCollectionClass = interface(DNObjectClass)
  ['{87A756EF-C343-588D-90A9-9CBB8EA5C627}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Drawing.Picture" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PictureCollection')]
  DNPictureCollection = interface(DNObject)
  ['{1166BD18-DB39-3B1A-894B-DCE82A0838FC}']
  { getters & setters } 

    function get_Item(index: Int32): DNPicture;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    ///  <param name="stream">Stream object which contains the image data.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32; stream: DDN.mscorlib.DNStream): Int32; overload;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    ///  <param name="fileName">Image filename.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32; fileName: string): Int32; overload;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="stream">Stream object which contains the image data.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; stream: DDN.mscorlib.DNStream): Int32; overload;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="fileName">Image filename.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; fileName: string): Int32; overload;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="stream">Stream object which contains the image data.</param>
    ///  <param name="widthScale">Scale of image width, a percentage.</param>
    ///  <param name="heightScale">Scale of image height, a percentage.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; stream: DDN.mscorlib.DNStream; widthScale: Int32; heightScale: Int32): Int32; overload;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="fileName">Image filename.</param>
    ///  <param name="widthScale">Scale of image width, a percentage.</param>
    ///  <param name="heightScale">Scale of image height, a percentage.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; fileName: string; widthScale: Int32; heightScale: Int32): Int32; overload;
    ///<summary>
    ///  Clear all pictures.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Remove shapes at the specific index
    ///</summary>
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNPicture): Int32; overload;
    function BinarySearch(item: DNPicture; comparer: DDN.mscorlib.DNIComparer<DNPicture>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPicture; comparer: DDN.mscorlib.DNIComparer<DNPicture>): Int32; overload;
    function &Contains(item: DNPicture): Boolean;
    procedure CopyTo(&array: TArray<DNPicture>); overload;
    procedure CopyTo(&array: TArray<DNPicture>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPicture>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPicture>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPicture>): DNPicture;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPicture>): DDN.mscorlib.DNList<DNPicture>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPicture>): DNPicture;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function IndexOf(item: DNPicture): Int32; overload;
    function IndexOf(item: DNPicture; index: Int32): Int32; overload;
    function IndexOf(item: DNPicture; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPicture): Int32; overload;
    function LastIndexOf(item: DNPicture; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPicture; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPicture>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPicture read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPictureCollection = class(TDNGenericImport<DNPictureCollectionClass, DNPictureCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeCollectionClass = interface(DNObjectClass)
  ['{4DFF8958-599A-511C-8D6E-4E6BD90064A7}']
  end;

  ///<summary>
  ///  Represents all the shape in a worksheet/chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeCollection')]
  DNShapeCollection = interface(DNObject)
  ['{EBE27A46-6B0A-3F39-AA95-4914A9D2F4C1}']
  { getters & setters } 

    function get_Item(index: Int32): DNShape; overload;
    function get_Item(name: string): DNShape; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds and copy a shape to the worksheet..
    ///</summary>
    ///  <param name="sourceShape"> Source shape.</param>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of checkbox from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of textbox from its left column, in unit of pixel. </param>
    ///<returns>The new shape object index.</returns>
    function AddCopy(sourceShape: DNShape; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32): DNShape;
    ///<summary>
    ///  Adds a checkbox to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of checkbox from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of textbox from its left column, in unit of pixel. </param>
    ///  <param name="height">Height of textbox, in unit of pixel.</param>
    ///  <param name="width">Width of textbox, in unit of pixel.</param>
    ///<returns>The new CheckBox object index.</returns>
    function AddCheckBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNCheckBox;
    ///<summary>
    ///  Adds a text box to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of textbox from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of textbox from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of textbox, in unit of pixel. </param>
    ///  <param name="width">Represents the width of textbox, in unit of pixel. </param>
    ///<returns>A <see cref="T:Aspose.Cells.Drawing.TextBox" />
    ///  object.</returns>
    function AddTextBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNTextBox;
    ///<summary>
    ///  Adds a Spinner to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Spinner from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Spinner from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Spinner, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Spinner, in unit of pixel. </param>
    ///<returns>A Spinner object.</returns>
    function AddSpinner(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNSpinner;
    ///<summary>
    ///  Adds a ScrollBar to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of ScrollBar from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of ScrollBar from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of ScrollBar, in unit of pixel. </param>
    ///  <param name="width">Represents the width of ScrollBar, in unit of pixel. </param>
    ///<returns>A ScrollBar object.</returns>
    function AddScrollBar(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNScrollBar;
    ///<summary>
    ///  Adds a RadioButton to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of RadioButton from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of RadioButton from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of RadioButton, in unit of pixel. </param>
    ///  <param name="width">Represents the width of RadioButton, in unit of pixel. </param>
    ///<returns>A RadioButton object.</returns>
    function AddRadioButton(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNRadioButton;
    ///<summary>
    ///  Adds a ListBox to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of ListBox from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of ListBox from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of ListBox, in unit of pixel. </param>
    ///  <param name="width">Represents the width of ListBox, in unit of pixel. </param>
    ///<returns>A ListBox object.</returns>
    function AddListBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNListBox;
    ///<summary>
    ///  Adds a ComboBox to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of ComboBox from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of ComboBox from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of ComboBox, in unit of pixel. </param>
    ///  <param name="width">Represents the width of ComboBox, in unit of pixel. </param>
    ///<returns>A ComboBox object.</returns>
    function AddComboBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNComboBox;
    ///<summary>
    ///  Adds a GroupBox to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of GroupBox from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of GroupBox from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of GroupBox, in unit of pixel. </param>
    ///  <param name="width">Represents the width of GroupBox, in unit of pixel. </param>
    ///<returns>A GroupBox object.</returns>
    function AddGroupBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNGroupBox;
    ///<summary>
    ///  Adds a Button to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Button from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Button from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Button, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Button, in unit of pixel. </param>
    ///<returns>A Button object.</returns>
    function AddButton(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNButton;
    ///<summary>
    ///  Adds a Label to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Label from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Label from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Label, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Label, in unit of pixel. </param>
    ///<returns>A Label object.</returns>
    function AddLabel(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNLabel;
    ///<summary>
    ///  Adds a label to the chart.
    ///</summary>
    ///  <param name="top">Represents the vertical offset of label from the upper left corner in units of 1/4000 of the chart area. </param>
    ///  <param name="left">Represents the vertical offset of label from the upper left corner in units of 1/4000 of the chart area.</param>
    ///  <param name="height">Represents the height of label, in units of 1/4000 of the chart area.</param>
    ///  <param name="width">Represents the width of label, in units of 1/4000 of the chart area.</param>
    ///<returns>A new Label object.</returns>
    function AddLabelInChart(top: Int32; left: Int32; height: Int32; width: Int32): DNLabel;
    ///<summary>
    ///  Adds a textbox to the chart.
    ///</summary>
    ///  <param name="top">Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area. </param>
    ///  <param name="left">Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area.</param>
    ///  <param name="height">Represents the height of textbox, in units of 1/4000 of the chart area.</param>
    ///  <param name="width">Represents the width of textbox, in units of 1/4000 of the chart area.</param>
    ///<returns>A TextBox object.</returns>
    function AddTextBoxInChart(top: Int32; left: Int32; height: Int32; width: Int32): DNTextBox;
    ///<summary>
    ///  Inserts a WordArt object to the chart
    ///</summary>
    ///  <param name="effect">The mso preset text effect type.</param>
    ///  <param name="text">The WordArt text.</param>
    ///  <param name="fontName">The font name.</param>
    ///  <param name="size">The font size</param>
    ///  <param name="fontBold">Indicates whether font is bold.</param>
    ///  <param name="fontItalic">Indicates whether font is italic.</param>
    ///  <param name="top">Represents the vertical offset of shape from the upper left corner in units of 1/4000 of the chart area. </param>
    ///  <param name="left">Represents the vertical offset of shape from the upper left corner in units of 1/4000 of the chart area.</param>
    ///  <param name="height">Represents the height of shape, in units of 1/4000 of the chart area.</param>
    ///  <param name="width">Represents the width of shape, in units of 1/4000 of the chart area.</param>
    ///<returns>Returns a Shape object that represents the new WordArt object.</returns>
    function AddTextEffectInChart(effect: DNMsoPresetTextEffect; text: string; fontName: string; size: Int32; fontBold: Boolean; fontItalic: Boolean; top: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    ///<summary>
    ///  Inserts a WordArt object.
    ///</summary>
    ///  <param name="effect">The mso preset text effect type.</param>
    ///  <param name="text">The WordArt text.</param>
    ///  <param name="fontName">The font name.</param>
    ///  <param name="size">The font size</param>
    ///  <param name="fontBold">Indicates whether font is bold.</param>
    ///  <param name="fontItalic">Indicates whether font is italic.</param>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of shape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of shape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of shape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of shape, in unit of pixel. </param>
    ///<returns>Returns a Shape object that represents the new WordArt object.</returns>
    function AddTextEffect(effect: DNMsoPresetTextEffect; text: string; fontName: string; size: Int32; fontBold: Boolean; fontItalic: Boolean; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    ///<summary>
    ///  Adds preset WordArt since Excel 2007.s
    ///</summary>
    ///  <param name="style">The preset WordArt Style.</param>
    ///  <param name="text">The text.</param>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of shape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of shape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of shape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of shape, in unit of pixel. </param>
    ///<returns></returns>
    function AddWordArt(style: DNPresetWordArtStyle; text: string; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    ///<summary>
    ///  Adds a RectangleShape to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of RectangleShape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of RectangleShape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of RectangleShape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of RectangleShape, in unit of pixel. </param>
    ///<returns>A RectangleShape object.</returns>
    function AddRectangle(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNRectangleShape;
    ///<summary>
    ///  Adds a Oval to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Oval from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Oval from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Oval, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Oval, in unit of pixel. </param>
    ///<returns>A Oval object.</returns>
    function AddOval(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNOval;
    ///<summary>
    ///  Adds a LineShape to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of LineShape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of LineShape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of LineShape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of LineShape, in unit of pixel. </param>
    ///<returns>A LineShape object.</returns>
    function AddLine(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNLineShape;
    ///<summary>
    ///  Adds a free floating shape to the worksheet.Only applies for line/image shape.
    ///</summary>
    ///  <param name="type">The shape type.</param>
    ///  <param name="top">Represents the vertical  offset of shape from the worksheet's top row, in unit of pixel.</param>
    ///  <param name="left">Represents the horizontal offset of shape from the worksheet's left column, in unit of pixel.</param>
    ///  <param name="height">Represents the height of LineShape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of LineShape, in unit of pixel. </param>
    ///  <param name="imageData">The image data,only applies for the picture.</param>
    ///  <param name="isOriginalSize">Whether the shape use original size if the shape is image.</param>
    ///<returns></returns>
    function AddFreeFloatingShape(&type: DNMsoDrawingType; top: Int32; left: Int32; height: Int32; width: Int32; imageData: TArray<Byte>; isOriginalSize: Boolean): DNShape;
    ///<summary>
    ///  Add a shape to chart .All unit is 1/4000 of chart area.
    ///</summary>
    ///  <param name="type">The drawing type.</param>
    ///  <param name="placement">the placement type.</param>
    ///  <param name="left">In unit of 1/4000 chart area width.</param>
    ///  <param name="top">In unit of 1/4000 chart area height.</param>
    ///  <param name="right">In unit of 1/4000 chart area width.</param>
    ///  <param name="bottom">In unit of 1/4000 chart area height.</param>
    ///  <param name="imageData">If the shape is not a picture or ole object,imageData should be null.</param>
    function AddShapeInChart(&type: DNMsoDrawingType; placement: DNPlacementType; left: Int32; top: Int32; right: Int32; bottom: Int32; imageData: TArray<Byte>): DNShape; overload;
    ///<summary>
    ///  Add a shape to chart .All unit is 1/4000 of chart area.
    ///</summary>
    ///  <param name="type">The drawing type.</param>
    ///  <param name="placement">the placement type.</param>
    ///  <param name="left">In unit of 1/4000 chart area width.</param>
    ///  <param name="top">In unit of 1/4000 chart area height.</param>
    ///  <param name="right">In unit of 1/4000 chart area width.</param>
    ///  <param name="bottom">In unit of 1/4000 chart area height.</param>
    function AddShapeInChart(&type: DNMsoDrawingType; placement: DNPlacementType; left: Int32; top: Int32; right: Int32; bottom: Int32): DNShape; overload;
    ///<summary>
    ///  Adds a ArcShape to the worksheet.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of ArcShape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of ArcShape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of ArcShape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of ArcShape, in unit of pixel. </param>
    ///<returns>A ArcShape object.</returns>
    function AddArc(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNArcShape;
    ///<summary>
    ///  Adds a Shape to the worksheet.
    ///</summary>
    ///  <param name="type">Mso drawing type.</param>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Shape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Shape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Shape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Shape, in unit of pixel. </param>
    ///<returns>A Shape object.</returns>
    ///<remarks>The type could not be Chart/Comment/Picture/OleObject/Polygon/DialogBox</remarks>
    function AddShape(&type: DNMsoDrawingType; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    ///<summary>
    ///  Adds a AutoShape to the worksheet.
    ///</summary>
    ///  <param name="type">Auto shape type.</param>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Shape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Shape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Shape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Shape, in unit of pixel. </param>
    ///<returns>A Shape object.</returns>
    ///<remarks>The type could not be Chart/Comment/Picture/OleObject/Polygon/DialogBox</remarks>
    function AddAutoShape(&type: DNAutoShapeType; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    ///<summary>
    ///  Adds a AutoShape to the chart.
    ///</summary>
    ///  <param name="type">Auto shape type.</param>
    ///  <param name="top">Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area. </param>
    ///  <param name="left">Represents the vertical offset of textbox from the upper left corner in units of 1/4000 of the chart area.</param>
    ///  <param name="height">Represents the height of textbox, in units of 1/4000 of the chart area.</param>
    ///  <param name="width">Represents the width of textbox, in units of 1/4000 of the chart area.</param>
    ///<returns>Returns a shape object.</returns>
    ///<remarks>The type could not be Chart/Comment/Picture/OleObject/Polygon/DialogBox</remarks>
    function AddAutoShapeInChart(&type: DNAutoShapeType; top: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    ///<summary>
    ///  Creates an Activex Control.
    ///</summary>
    ///  <param name="type">The type of the control.</param>
    ///  <param name="topRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of Shape from its left row, in unit of pixel. </param>
    ///  <param name="leftColumn">Upper left column index.</param>
    ///  <param name="left">Represents the horizontal offset of Shape from its left column, in unit of pixel. </param>
    ///  <param name="height">Represents the height of Shape, in unit of pixel. </param>
    ///  <param name="width">Represents the width of Shape, in unit of pixel. </param>
    ///<returns></returns>
    function AddActiveXControl(&type: DNControlType; topRow: Int32; top: Int32; leftColumn: Int32; left: Int32; width: Int32; height: Int32): DNShape;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    ///  <param name="stream">Stream object which contains the image data.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  Picture object.</returns>
    function AddPicture(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32; stream: DDN.mscorlib.DNStream): DNPicture; overload;
    ///<summary>
    ///  Adds a picture to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="stream">Stream object which contains the image data.</param>
    ///  <param name="widthScale">Scale of image width, a percentage.</param>
    ///  <param name="heightScale">Scale of image height, a percentage.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  Picture object.</returns>
    function AddPicture(upperLeftRow: Int32; upperLeftColumn: Int32; stream: DDN.mscorlib.DNStream; widthScale: Int32; heightScale: Int32): DNPicture; overload;
    ///<summary>
    ///  Adds svg image.
    ///</summary>
    ///  <param name="upperLeftRow"> Upper left row index.</param>
    ///  <param name="top">Represents the vertical  offset of shape from its left row, in unit of pixel. </param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="left">The horizontal offset of shape from its left column, in unit of pixel. </param>
    ///  <param name="height">The height of shape, in unit of pixel. </param>
    ///  <param name="width">The width of shape, in unit of pixel. </param>
    ///  <param name="svgData">The svg image data.</param>
    ///  <param name="compatibleImageData">Converted image data from svg in order to be compatible with Excel 2016 or lower versions.</param>
    ///<returns></returns>
    function AddSvg(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32; svgData: TArray<Byte>; compatibleImageData: TArray<Byte>): DNPicture;
    ///<summary>
    ///  Add a linked picture.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="height">The height of the shape. In unit of pixels</param>
    ///  <param name="width">The width of the shape. In unit of pixels</param>
    ///  <param name="sourceFullName">
    ///  The path and name of the source file for the linked image</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  Picture object.</returns>
    function AddLinkedPicture(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; sourceFullName: string): DNPicture;
    ///<summary>
    ///  Add a linked picture.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="height">The height of the shape. In unit of pixels</param>
    ///  <param name="width">The width of the shape. In unit of pixels</param>
    ///  <param name="sourceFullName">
    ///  The path and name of the source file for the linked image</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  Picture object.</returns>
    function AddOleObjectWithLinkedImage(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; sourceFullName: string): DNOleObject;
    ///<summary>
    ///  Adds a picture to the chart.
    ///</summary>
    ///  <param name="top">Represents the vertical offset of shape from the upper left corner in units of 1/4000 of the chart area. </param>
    ///  <param name="left">Represents the horizontal offset of shape from the upper left corner in units of 1/4000 of the chart area.</param>
    ///  <param name="stream">Stream object which contains the image data.</param>
    ///  <param name="widthScale">Scale of image width, a percentage.</param>
    ///  <param name="heightScale">Scale of image height, a percentage.</param>
    ///<returns>Returns a Picture object.</returns>
    function AddPictureInChart(top: Int32; left: Int32; stream: DDN.mscorlib.DNStream; widthScale: Int32; heightScale: Int32): DNPicture;
    ///<summary></summary>
    ///  <param name="upperLeftRow"></param>
    ///  <param name="top"></param>
    ///  <param name="upperLeftColumn"></param>
    ///  <param name="left"></param>
    ///  <param name="height"></param>
    ///  <param name="width"></param>
    ///  <param name="imageData"></param>
    ///<returns></returns>
    function AddOleObject(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32; imageData: TArray<Byte>): DNOleObject;
    ///<summary>
    ///  Copy all comments in the range.
    ///</summary>
    ///  <param name="shapes">The source shapes.</param>
    ///  <param name="ca">The source range.</param>
    ///  <param name="destRow">The dest range start row.</param>
    ///  <param name="destColumn">The dest range start column.</param>
    procedure CopyCommentsInRange(shapes: DNShapeCollection; ca: DNCellArea; destRow: Int32; destColumn: Int32);
    ///<summary>
    ///  Copy shapes in the range to destination range.
    ///</summary>
    ///  <param name="sourceShapes">Source shapes.</param>
    ///  <param name="ca">The source range.</param>
    ///  <param name="destRow">The dest row index of the dest range.</param>
    ///  <param name="destColumn">The dest column of the dest range.</param>
    ///  <param name="isContained">Whether only copy the shapes which are contained in the range.
    ///  If true,only copies the shapes in the range.
    ///  Otherwise,it works as MS Office.</param>
    procedure CopyInRange(sourceShapes: DNShapeCollection; ca: DNCellArea; destRow: Int32; destColumn: Int32; isContained: Boolean);
    ///<summary>
    ///  Delete shapes in the range.Comment shapes will not be deleted.
    ///</summary>
    ///  <param name="ca">The range.If the shapes are contained in the range, they will be removed.</param>
    procedure DeleteInRange(ca: DNCellArea);
    ///<summary>
    ///  Delete a shape. If the shape is in the group or is a comment shape, it will not be deleted.
    ///</summary>
    ///  <param name="shape"></param>
    procedure DeleteShape(shape: DNShape);
    ///<summary>
    ///  Group the shapes.
    ///</summary>
    ///  <param name="groupItems">the group items.</param>
    ///<returns>Return the group shape.</returns>
    ///<remarks>
    ///  The shape in the groupItems should not be grouped.
    ///  The shape must be in this Shapes collection.</remarks>
    function Group(groupItems: TArray<DNShape>): DNGroupShape;
    ///<summary>
    ///  Ungroups the shape items.
    ///</summary>
    ///  <param name="group">The group shape.</param>
    ///<remarks>If the group shape is grouped by another group shape,nothing will be done.</remarks>
    procedure Ungroup(group: DNGroupShape);
    ///<summary>
    ///  Remove the shape.
    ///</summary>
    ///  <param name="index">The index of the shape.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Remove the shape.
    ///</summary>
    ///  <param name="shape"></param>
    procedure Remove(shape: DNShape);
    ///<summary>
    ///  Clear all shapes.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Update the selected value by the value of the linked cell of the shapes.
    ///</summary>
    procedure UpdateSelectedValue;
    function BinarySearch(item: DNShape): Int32; overload;
    function BinarySearch(item: DNShape; comparer: DDN.mscorlib.DNIComparer<DNShape>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShape; comparer: DDN.mscorlib.DNIComparer<DNShape>): Int32; overload;
    function &Contains(item: DNShape): Boolean;
    procedure CopyTo(&array: TArray<DNShape>); overload;
    procedure CopyTo(&array: TArray<DNShape>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShape>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShape>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShape>): DNShape;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShape>): DDN.mscorlib.DNList<DNShape>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShape>): DNShape;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function IndexOf(item: DNShape): Int32; overload;
    function IndexOf(item: DNShape; index: Int32): Int32; overload;
    function IndexOf(item: DNShape; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShape): Int32; overload;
    function LastIndexOf(item: DNShape; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShape; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShape>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShape read get_Item; default;
    property Item[name: string]: DNShape read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapeCollection = class(TDNGenericImport<DNShapeCollectionClass, DNShapeCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeGuideCollectionClass = interface(DNObjectClass)
  ['{5B716042-8EB6-53C1-9ACB-DAACE60B40E3}']
  { constructors } 

    {class} function init: DNShapeGuideCollection;

  end;

  ///<summary>
  ///  Encapsulates a collection of shape guide
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeGuideCollection')]
  DNShapeGuideCollection = interface(DNObject)
  ['{DA39FE8E-AE5C-332B-A4F1-582470B06837}']
  { getters & setters } 

    function get_Item(index: Int32): DNShapeGuide;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNShapeGuide): Int32; overload;
    function BinarySearch(item: DNShapeGuide; comparer: DDN.mscorlib.DNIComparer<DNShapeGuide>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapeGuide; comparer: DDN.mscorlib.DNIComparer<DNShapeGuide>): Int32; overload;
    function &Contains(item: DNShapeGuide): Boolean;
    procedure CopyTo(&array: TArray<DNShapeGuide>); overload;
    procedure CopyTo(&array: TArray<DNShapeGuide>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapeGuide>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): DNShapeGuide;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): DDN.mscorlib.DNList<DNShapeGuide>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): DNShapeGuide;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function IndexOf(item: DNShapeGuide): Int32; overload;
    function IndexOf(item: DNShapeGuide; index: Int32): Int32; overload;
    function IndexOf(item: DNShapeGuide; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeGuide): Int32; overload;
    function LastIndexOf(item: DNShapeGuide; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeGuide; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapeGuide>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShapeGuide read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapeGuideCollection = class(TDNGenericImport<DNShapeGuideCollectionClass, DNShapeGuideCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathCollectionClass = interface(DNObjectClass)
  ['{87B6DA48-8E5B-549F-AADE-2CB3893950F0}']
  end;

  ///<summary>
  ///  Represents path collection information in NotPrimitive autoshape
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapePathCollection')]
  DNShapePathCollection = interface(DNObject)
  ['{895E78F1-941B-3D5E-A8E8-6EF8CCF43373}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNShapePath;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);

  { methods } 

    ///<summary>
    ///  Add a creation path.
    ///</summary>
    ///<returns>Returns <see cref="T:Aspose.Cells.Drawing.ShapePath" />
    ///  object.</returns>
    function Add: Int32;
    function BinarySearch(item: DNShapePath): Int32; overload;
    function BinarySearch(item: DNShapePath; comparer: DDN.mscorlib.DNIComparer<DNShapePath>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapePath; comparer: DDN.mscorlib.DNIComparer<DNShapePath>): Int32; overload;
    function &Contains(item: DNShapePath): Boolean;
    procedure CopyTo(&array: TArray<DNShapePath>); overload;
    procedure CopyTo(&array: TArray<DNShapePath>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapePath>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapePath>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapePath>): DNShapePath;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapePath>): DDN.mscorlib.DNList<DNShapePath>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapePath>): DNShapePath;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function IndexOf(item: DNShapePath): Int32; overload;
    function IndexOf(item: DNShapePath; index: Int32): Int32; overload;
    function IndexOf(item: DNShapePath; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePath): Int32; overload;
    function LastIndexOf(item: DNShapePath; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePath; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapePath>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of paths
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNShapePath read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
  end;

  TDNShapePathCollection = class(TDNGenericImport<DNShapePathCollectionClass, DNShapePathCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathPointCollectionClass = interface(DNObjectClass)
  ['{569540DE-615D-5BB2-8357-0D4A92BBD3EF}']
  { constructors } 

    {class} function init: DNShapePathPointCollection;

  end;

  ///<summary>
  ///  Represents all shape path points.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapePathPointCollection')]
  DNShapePathPointCollection = interface(DNObject)
  ['{08F5C4FA-DEC5-31B6-A829-A8098AE0A4A4}']
  { getters & setters } 

    function get_Item(index: Int32): DNShapePathPoint;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a path point.
    ///</summary>
    ///  <param name="x">The x coordinate.</param>
    ///  <param name="y">The y coordinate.</param>
    function Add(x: Int32; y: Int32): Int32;
    function BinarySearch(item: DNShapePathPoint): Int32; overload;
    function BinarySearch(item: DNShapePathPoint; comparer: DDN.mscorlib.DNIComparer<DNShapePathPoint>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapePathPoint; comparer: DDN.mscorlib.DNIComparer<DNShapePathPoint>): Int32; overload;
    function &Contains(item: DNShapePathPoint): Boolean;
    procedure CopyTo(&array: TArray<DNShapePathPoint>); overload;
    procedure CopyTo(&array: TArray<DNShapePathPoint>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapePathPoint>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): DNShapePathPoint;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): DDN.mscorlib.DNList<DNShapePathPoint>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): DNShapePathPoint;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function IndexOf(item: DNShapePathPoint): Int32; overload;
    function IndexOf(item: DNShapePathPoint; index: Int32): Int32; overload;
    function IndexOf(item: DNShapePathPoint; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePathPoint): Int32; overload;
    function LastIndexOf(item: DNShapePathPoint; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePathPoint; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapePathPoint>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShapePathPoint read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapePathPointCollection = class(TDNGenericImport<DNShapePathPointCollectionClass, DNShapePathPointCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeSegmentPathCollectionClass = interface(DNObjectClass)
  ['{C4710596-7346-5EDC-A18D-E39C183618D1}']
  { constructors } 

    {class} function init: DNShapeSegmentPathCollection;

  end;

  ///<summary>
  ///  Represents a creation path consisting of a series of moves, lines and curves that when combined will form a geometric shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeSegmentPathCollection')]
  DNShapeSegmentPathCollection = interface(DNObject)
  ['{97CD3E94-8120-3B24-8CF4-581EA3CCBF6A}']
  { getters & setters } 

    function get_Item(index: Int32): DNShapeSegmentPath;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Add a segment path in creation path.
    ///</summary>
    ///  <param name="type">The path type.</param>
    ///<returns>Returns the position of <see cref="T:Aspose.Cells.Drawing.ShapeSegmentPath" />
    ///  object in the list. </returns>
    function Add(&type: DNShapePathType): Int32;
    function BinarySearch(item: DNShapeSegmentPath): Int32; overload;
    function BinarySearch(item: DNShapeSegmentPath; comparer: DDN.mscorlib.DNIComparer<DNShapeSegmentPath>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapeSegmentPath; comparer: DDN.mscorlib.DNIComparer<DNShapeSegmentPath>): Int32; overload;
    function &Contains(item: DNShapeSegmentPath): Boolean;
    procedure CopyTo(&array: TArray<DNShapeSegmentPath>); overload;
    procedure CopyTo(&array: TArray<DNShapeSegmentPath>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapeSegmentPath>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): DNShapeSegmentPath;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): DDN.mscorlib.DNList<DNShapeSegmentPath>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): DNShapeSegmentPath;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function IndexOf(item: DNShapeSegmentPath): Int32; overload;
    function IndexOf(item: DNShapeSegmentPath; index: Int32): Int32; overload;
    function IndexOf(item: DNShapeSegmentPath; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeSegmentPath): Int32; overload;
    function LastIndexOf(item: DNShapeSegmentPath; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeSegmentPath; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapeSegmentPath>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShapeSegmentPath read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapeSegmentPathCollection = class(TDNGenericImport<DNShapeSegmentPathCollectionClass, DNShapeSegmentPathCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextBoxCollectionClass = interface(DNObjectClass)
  ['{F8DE997F-0A90-5FD5-AE6B-4CFF632525C0}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Drawing.TextBox" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.TextBoxCollection')]
  DNTextBoxCollection = interface(DNObject)
  ['{A9C71681-AE8E-32E3-90CC-868B1F2F15B6}']
  { getters & setters } 

    function get_Item(index: Int32): DNTextBox; overload;
    function get_Item(name: string): DNTextBox; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a textbox to the collection.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="height">Height of textbox, in unit of pixel.</param>
    ///  <param name="width">Width of textbox, in unit of pixel.</param>
    ///<returns><see cref="T:Aspose.Cells.Drawing.TextBox" />
    ///  object index.</returns>
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32): Int32;
    ///<summary>
    ///  Remove a text box from the file.
    ///</summary>
    ///  <param name="index">The text box index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Clear all text boxes.
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNTextBox): Int32; overload;
    function BinarySearch(item: DNTextBox; comparer: DDN.mscorlib.DNIComparer<DNTextBox>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTextBox; comparer: DDN.mscorlib.DNIComparer<DNTextBox>): Int32; overload;
    function &Contains(item: DNTextBox): Boolean;
    procedure CopyTo(&array: TArray<DNTextBox>); overload;
    procedure CopyTo(&array: TArray<DNTextBox>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTextBox>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTextBox>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTextBox>): DNTextBox;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTextBox>): DDN.mscorlib.DNList<DNTextBox>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTextBox>): DNTextBox;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function IndexOf(item: DNTextBox): Int32; overload;
    function IndexOf(item: DNTextBox; index: Int32): Int32; overload;
    function IndexOf(item: DNTextBox; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTextBox): Int32; overload;
    function LastIndexOf(item: DNTextBox; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTextBox; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextBox>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTextBox read get_Item; default;
    property Item[name: string]: DNTextBox read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTextBoxCollection = class(TDNGenericImport<DNTextBoxCollectionClass, DNTextBoxCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextTabStopCollectionClass = interface(DNObjectClass)
  ['{BC0B1EEE-D7C3-5219-88A8-B5A239CE86DF}']
  { constructors } 

    {class} function init: DNTextTabStopCollection;

  end;

  ///<summary>
  ///  Represents the list of all tab stops.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextTabStopCollection')]
  DNTextTabStopCollection = interface(DNObject)
  ['{5603C5BA-2C0E-3D47-925D-E81A3A6BE216}']
  { getters & setters } 

    function get_Item(index: Int32): DNTextTabStop;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a tab stop.
    ///</summary>
    ///  <param name="tabAlignment"></param>
    ///  <param name="tabPosition"></param>
    ///<returns></returns>
    function Add(tabAlignment: DNTextTabAlignmentType; tabPosition: Double): Int32;
    function BinarySearch(item: DNTextTabStop): Int32; overload;
    function BinarySearch(item: DNTextTabStop; comparer: DDN.mscorlib.DNIComparer<DNTextTabStop>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTextTabStop; comparer: DDN.mscorlib.DNIComparer<DNTextTabStop>): Int32; overload;
    function &Contains(item: DNTextTabStop): Boolean;
    procedure CopyTo(&array: TArray<DNTextTabStop>); overload;
    procedure CopyTo(&array: TArray<DNTextTabStop>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTextTabStop>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): DNTextTabStop;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): DDN.mscorlib.DNList<DNTextTabStop>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): DNTextTabStop;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function IndexOf(item: DNTextTabStop): Int32; overload;
    function IndexOf(item: DNTextTabStop; index: Int32): Int32; overload;
    function IndexOf(item: DNTextTabStop; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTextTabStop): Int32; overload;
    function LastIndexOf(item: DNTextTabStop; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTextTabStop; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextTabStop>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTextTabStop read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTextTabStopCollection = class(TDNGenericImport<DNTextTabStopCollectionClass, DNTextTabStopCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNErrorCheckOptionCollectionClass = interface(DNObjectClass)
  ['{AED4BD6D-3369-5921-BA8D-636A7C0001F4}']
  end;

  ///<summary>
  ///  Represents all error check option.
  ///</summary>
  [DNTypeName('Aspose.Cells.ErrorCheckOptionCollection')]
  DNErrorCheckOptionCollection = interface(DNObject)
  ['{C19EF225-F537-365A-AA6E-C378636C586A}']
  { getters & setters } 

    function get_Item(index: Int32): DNErrorCheckOption;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Add an error check option.
    ///</summary>
    ///<returns></returns>
    function Add: Int32;
    function BinarySearch(item: DNErrorCheckOption): Int32; overload;
    function BinarySearch(item: DNErrorCheckOption; comparer: DDN.mscorlib.DNIComparer<DNErrorCheckOption>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNErrorCheckOption; comparer: DDN.mscorlib.DNIComparer<DNErrorCheckOption>): Int32; overload;
    function &Contains(item: DNErrorCheckOption): Boolean;
    procedure CopyTo(&array: TArray<DNErrorCheckOption>); overload;
    procedure CopyTo(&array: TArray<DNErrorCheckOption>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNErrorCheckOption>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): DNErrorCheckOption;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): DDN.mscorlib.DNList<DNErrorCheckOption>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): DNErrorCheckOption;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function IndexOf(item: DNErrorCheckOption): Int32; overload;
    function IndexOf(item: DNErrorCheckOption; index: Int32): Int32; overload;
    function IndexOf(item: DNErrorCheckOption; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNErrorCheckOption): Int32; overload;
    function LastIndexOf(item: DNErrorCheckOption; index: Int32): Int32; overload;
    function LastIndexOf(item: DNErrorCheckOption; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNErrorCheckOption>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNErrorCheckOption read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNErrorCheckOptionCollection = class(TDNGenericImport<DNErrorCheckOptionCollectionClass, DNErrorCheckOptionCollection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNConnectionParameterCollectionClass = interface(DNObjectClass)
  ['{74727973-264E-5E2B-A935-2C20078A0991}']
  end;

  ///<summary>
  ///  Specifies the <see cref="T:Aspose.Cells.ExternalConnections.ConnectionParameter" />
  ///  collection
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionParameterCollection')]
  DNConnectionParameterCollection = interface(DNObject)
  ['{818D9DC0-EEDB-385C-9144-77AB6386ED36}']
  { getters & setters } 

    function get_Item(index: Int32): DNConnectionParameter; overload;
    procedure set_Item(index: Int32; value: DNConnectionParameter);
    function get_Item(connParamName: string): DNConnectionParameter; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNConnectionParameter): Int32; overload;
    function BinarySearch(item: DNConnectionParameter; comparer: DDN.mscorlib.DNIComparer<DNConnectionParameter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNConnectionParameter; comparer: DDN.mscorlib.DNIComparer<DNConnectionParameter>): Int32; overload;
    function &Contains(item: DNConnectionParameter): Boolean;
    procedure CopyTo(&array: TArray<DNConnectionParameter>); overload;
    procedure CopyTo(&array: TArray<DNConnectionParameter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNConnectionParameter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): DNConnectionParameter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): DDN.mscorlib.DNList<DNConnectionParameter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): DNConnectionParameter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function IndexOf(item: DNConnectionParameter): Int32; overload;
    function IndexOf(item: DNConnectionParameter; index: Int32): Int32; overload;
    function IndexOf(item: DNConnectionParameter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNConnectionParameter): Int32; overload;
    function LastIndexOf(item: DNConnectionParameter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNConnectionParameter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConnectionParameter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConnectionParameter read get_Item write set_Item; default;
    property Item[connParamName: string]: DNConnectionParameter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConnectionParameterCollection = class(TDNGenericImport<DNConnectionParameterCollectionClass, DNConnectionParameterCollection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNExternalConnectionCollectionClass = interface(DNObjectClass)
  ['{C26D1B4E-0593-5918-87CF-8BEFA8A577B0}']
  end;

  ///<summary>
  ///  Specifies the <see cref="T:Aspose.Cells.ExternalConnections.ExternalConnection" />
  ///  collection
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook wb = new Workbook("connection.xlsx");
  ///  ExternalConnectionCollection dataConns = wb.DataConnections;
  ///  ExternalConnection dataConn = null;
  ///  for (int i = 0; i &lt; dataConns.Count; i++)
  ///  {
  ///  dataConn = dataConns[i];
  ///  //get external connection id
  ///  Console.WriteLine(dataConn.ConnectionId);
  ///  }
  ///  [Visual Basic]
  ///  Dim wb As Workbook = New Workbook("connection.xlsx")
  ///  Dim dataConns As ExternalConnectionCollection = wb.DataConnections
  ///  Dim dataConn As ExternalConnection
  ///  Dim count As Integer = dataConns.Count - 1
  ///  Dim i As Integer
  ///  For i = 0 To count Step 1
  ///  dataConn = dataConns(i)
  ///  'get external connection id
  ///  Console.WriteLine(dataConn.ConnectionId)
  ///  Next
  ///</code></example>
  [DNTypeName('Aspose.Cells.ExternalConnections.ExternalConnectionCollection')]
  DNExternalConnectionCollection = interface(DNObject)
  ['{883BDC1F-941F-30D5-A29E-82921A2F7836}']
  { getters & setters } 

    function get_Item(index: Int32): DNExternalConnection; overload;
    procedure set_Item(index: Int32; value: DNExternalConnection);
    function get_Item(connectionName: string): DNExternalConnection; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.ExternalConnections.ExternalConnection" />
    ///  element with the specified id.
    ///</summary>
    ///  <param name="connId">external connection id</param>
    ///<returns>The element with the specified id.</returns>
    function GetExternalConnectionById(connId: Int32): DNExternalConnection;
    function BinarySearch(item: DNExternalConnection): Int32; overload;
    function BinarySearch(item: DNExternalConnection; comparer: DDN.mscorlib.DNIComparer<DNExternalConnection>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNExternalConnection; comparer: DDN.mscorlib.DNIComparer<DNExternalConnection>): Int32; overload;
    function &Contains(item: DNExternalConnection): Boolean;
    procedure CopyTo(&array: TArray<DNExternalConnection>); overload;
    procedure CopyTo(&array: TArray<DNExternalConnection>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNExternalConnection>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): DNExternalConnection;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): DDN.mscorlib.DNList<DNExternalConnection>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): DNExternalConnection;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function IndexOf(item: DNExternalConnection): Int32; overload;
    function IndexOf(item: DNExternalConnection; index: Int32): Int32; overload;
    function IndexOf(item: DNExternalConnection; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNExternalConnection): Int32; overload;
    function LastIndexOf(item: DNExternalConnection; index: Int32): Int32; overload;
    function LastIndexOf(item: DNExternalConnection; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNExternalConnection>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNExternalConnection read get_Item write set_Item; default;
    property Item[connectionName: string]: DNExternalConnection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNExternalConnectionCollection = class(TDNGenericImport<DNExternalConnectionCollectionClass, DNExternalConnectionCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFilterColumnCollectionClass = interface(DNObjectClass)
  ['{17440A73-7AE5-57BB-A07B-4C52F7545DB7}']
  end;

  ///<summary>
  ///  A collection of Filter objects that represents all the filters in an autofiltered range.
  ///</summary>
  [DNTypeName('Aspose.Cells.FilterColumnCollection')]
  DNFilterColumnCollection = interface(DNObject)
  ['{5948F07E-6649-320C-A1AE-CB75A22DC179}']
  { getters & setters } 

    function get_Item(fieldIndex: Int32): DNFilterColumn;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary></summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns a single Filter object from a collection.
    ///</summary>
    function GetByIndex(index: Int32): DNFilterColumn;
    function BinarySearch(item: DNFilterColumn): Int32; overload;
    function BinarySearch(item: DNFilterColumn; comparer: DDN.mscorlib.DNIComparer<DNFilterColumn>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNFilterColumn; comparer: DDN.mscorlib.DNIComparer<DNFilterColumn>): Int32; overload;
    function &Contains(item: DNFilterColumn): Boolean;
    procedure CopyTo(&array: TArray<DNFilterColumn>); overload;
    procedure CopyTo(&array: TArray<DNFilterColumn>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNFilterColumn>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): DNFilterColumn;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): DDN.mscorlib.DNList<DNFilterColumn>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): DNFilterColumn;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function IndexOf(item: DNFilterColumn): Int32; overload;
    function IndexOf(item: DNFilterColumn; index: Int32): Int32; overload;
    function IndexOf(item: DNFilterColumn; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNFilterColumn): Int32; overload;
    function LastIndexOf(item: DNFilterColumn; index: Int32): Int32; overload;
    function LastIndexOf(item: DNFilterColumn; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFilterColumn>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[fieldIndex: Int32]: DNFilterColumn read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFilterColumnCollection = class(TDNGenericImport<DNFilterColumnCollectionClass, DNFilterColumnCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNFontSettingCollectionClass = interface(DNObjectClass)
  ['{51D870EA-5CF1-5924-B1D7-1281E3E42D6A}']
  end;

  ///<summary>
  ///  Represents the list of <see cref="T:Aspose.Cells.FontSetting" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.FontSettingCollection')]
  DNFontSettingCollection = interface(DNObject)
  ['{C90D91CD-9E8A-3471-B474-43D7DD65E690}']
  { getters & setters } 

    function get_TextAlignment: DNShapeTextAlignment;
    function get_TextParagraphs: DNTextParagraphCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_HtmlString: string;
    procedure set_HtmlString(value: string);
    function get_Item(index: Int32): DNFontSetting;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Sets the preset WordArt style.
    ///</summary>
    ///  <param name="style">The preset WordArt style.</param>
    procedure SetWordArtStyle(style: DNPresetWordArtStyle);
    ///<summary>
    ///  Gets the enumerator of the paragraphs.
    ///</summary>
    ///<returns></returns>
    function GetParagraphEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Appends the text.
    ///</summary>
    ///  <param name="text">The text.</param>
    procedure AppendText(text: string);
    ///<summary>
    ///  Insert index at the position.
    ///</summary>
    ///  <param name="index">The start index.</param>
    ///  <param name="text">The text.</param>
    procedure InsertText(index: Int32; text: string);
    ///<summary>
    ///  Replace the text.
    ///</summary>
    ///  <param name="index">The start index.</param>
    ///  <param name="count">The count of characters.</param>
    ///  <param name="text">The text.</param>
    procedure Replace(index: Int32; count: Int32; text: string);
    ///<summary>
    ///  Delete some characters.
    ///</summary>
    ///  <param name="index">The start index.</param>
    ///  <param name="count">The count of characters.</param>
    procedure DeleteText(index: Int32; count: Int32);
    ///<summary>
    ///  Format the text with font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font.</param>
    ///  <param name="flag">The flags of the font.</param>
    procedure Format(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag);
    ///<summary>
    ///  Clear all setting.
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNFontSetting): Int32; overload;
    function BinarySearch(item: DNFontSetting; comparer: DDN.mscorlib.DNIComparer<DNFontSetting>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNFontSetting; comparer: DDN.mscorlib.DNIComparer<DNFontSetting>): Int32; overload;
    function &Contains(item: DNFontSetting): Boolean;
    procedure CopyTo(&array: TArray<DNFontSetting>); overload;
    procedure CopyTo(&array: TArray<DNFontSetting>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNFontSetting>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNFontSetting>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNFontSetting>): DNFontSetting;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNFontSetting>): DDN.mscorlib.DNList<DNFontSetting>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNFontSetting>): DNFontSetting;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function IndexOf(item: DNFontSetting): Int32; overload;
    function IndexOf(item: DNFontSetting; index: Int32): Int32; overload;
    function IndexOf(item: DNFontSetting; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNFontSetting): Int32; overload;
    function LastIndexOf(item: DNFontSetting; index: Int32): Int32; overload;
    function LastIndexOf(item: DNFontSetting; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontSetting>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the alignment setting of the text body.
    ///</summary>
    property TextAlignment: DNShapeTextAlignment read get_TextAlignment;
    ///<summary>
    ///  Gets all paragraphs.
    ///</summary>
    property TextParagraphs: DNTextParagraphCollection read get_TextParagraphs;
    ///<summary>
    ///  Gets and sets the text of the shape.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this shape.
    ///</summary>
    property HtmlString: string read get_HtmlString write set_HtmlString;
    property Item[index: Int32]: DNFontSetting read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFontSettingCollection = class(TDNGenericImport<DNFontSettingCollectionClass, DNFontSettingCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingCollectionClass = interface(DNObjectClass)
  ['{E888D741-8BC9-585E-86C3-1562FD0789E8}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.FormatCondition" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Get Conditional Formatting
  ///  ConditionalFormattingCollection cformattings = sheet.ConditionalFormattings;
  ///  //Adds an empty conditional formatting
  ///  int index = cformattings.Add();
  ///  //Get newly added Conditional formatting
  ///  FormatConditionCollection fcs = cformattings[index];
  ///  //Sets the conditional format range.
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 0;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  fcs.AddArea(ca);
  ///  ca = new CellArea();
  ///  ca.StartRow = 1;
  ///  ca.EndRow = 1;
  ///  ca.StartColumn = 1;
  ///  ca.EndColumn = 1;
  ///  fcs.AddArea(ca);
  ///  //Add condition.
  ///  int conditionIndex = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "=A2", "100");
  ///  //Add condition.
  ///  int conditionIndex2 = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "50", "100");
  ///  //Sets the background color.
  ///  FormatCondition fc = fcs[conditionIndex];
  ///  fc.Style.BackgroundColor = Color.Red;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\output.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Get Conditional Formatting
  ///  Dim cformattings As ConditionalFormattingCollection = sheet.ConditionalFormattings
  ///  'Adds an empty conditional formatting
  ///  Dim index As Integer = cformattings.Add()
  ///  'Get newly added Conditional formatting
  ///  Dim fcs As FormatConditionCollection = cformattings(index)
  ///  'Sets the conditional format range.
  ///  Dim ca As New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 0
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///  fcs.AddArea(ca)
  ///  ca = New CellArea()
  ///  ca.StartRow = 1
  ///  ca.EndRow = 1
  ///  ca.StartColumn = 1
  ///  ca.EndColumn = 1
  ///  fcs.AddArea(ca)
  ///  'Add condition.
  ///  Dim conditionIndex As Integer = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "=A2", "100")
  ///  'Add condition.
  ///  Dim conditionIndex2 As Integer = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "50", "100")
  ///  'Sets the background color.
  ///  Dim fc As FormatCondition = fcs(conditionIndex)
  ///  fc.Style.BackgroundColor = Color.Red
  ///  'Saving the Excel file
  ///  workbook.Save("C:\output.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.ConditionalFormattingCollection')]
  DNConditionalFormattingCollection = interface(DNObject)
  ['{5A294ADB-351A-3079-9282-461BC61744C3}']
  { getters & setters } 

    function get_Item(index: Int32): DNFormatConditionCollection;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Remove all conditional formatting in the range.
    ///</summary>
    ///  <param name="startRow">The start row of the range.</param>
    ///  <param name="startColumn">The start column of the range.</param>
    ///  <param name="totalRows">The number of rows of the range.</param>
    ///  <param name="totalColumns">The number of columns of the range.</param>
    procedure RemoveArea(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32);
    ///<summary>
    ///  Copies conditional formatting.
    ///</summary>
    ///  <param name="cfs">The conditional formatting</param>
    procedure Copy(cfs: DNConditionalFormattingCollection);
    ///<summary>
    ///  Adds a FormatConditions to the collection.
    ///</summary>
    ///<returns>FormatConditions object index.</returns>
    function Add: Int32;
    function BinarySearch(item: DNFormatConditionCollection): Int32; overload;
    function BinarySearch(item: DNFormatConditionCollection; comparer: DDN.mscorlib.DNIComparer<DNFormatConditionCollection>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNFormatConditionCollection; comparer: DDN.mscorlib.DNIComparer<DNFormatConditionCollection>): Int32; overload;
    function &Contains(item: DNFormatConditionCollection): Boolean;
    procedure CopyTo(&array: TArray<DNFormatConditionCollection>); overload;
    procedure CopyTo(&array: TArray<DNFormatConditionCollection>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNFormatConditionCollection>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): DNFormatConditionCollection;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): DDN.mscorlib.DNList<DNFormatConditionCollection>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): DNFormatConditionCollection;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function IndexOf(item: DNFormatConditionCollection): Int32; overload;
    function IndexOf(item: DNFormatConditionCollection; index: Int32): Int32; overload;
    function IndexOf(item: DNFormatConditionCollection; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNFormatConditionCollection): Int32; overload;
    function LastIndexOf(item: DNFormatConditionCollection; index: Int32): Int32; overload;
    function LastIndexOf(item: DNFormatConditionCollection; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFormatConditionCollection>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNFormatConditionCollection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConditionalFormattingCollection = class(TDNGenericImport<DNConditionalFormattingCollectionClass, DNConditionalFormattingCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHorizontalPageBreakCollectionClass = interface(DNObjectClass)
  ['{1DD66642-42E4-5B11-B15F-824F8E90C6C2}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.HorizontalPageBreak" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Add a pagebreak at G5
  ///  excel.Worksheets[0].HorizontalPageBreaks.Add("G5");
  ///  excel.Worksheets[0].VerticalPageBreaks.Add("G5");
  ///  [VB]
  ///  'Add a pagebreak at G5
  ///  excel.Worksheets(0).HorizontalPageBreaks.Add("G5")
  ///  excel.Worksheets(0).VerticalPageBreaks.Add("G5")
  ///</code></example>
  [DNTypeName('Aspose.Cells.HorizontalPageBreakCollection')]
  DNHorizontalPageBreakCollection = interface(DNObject)
  ['{62D8CDFB-E20F-3570-94CD-E36A4BDC93FC}']
  { getters & setters } 

    function get_Item(index: Int32): DNHorizontalPageBreak; overload;
    function get_Item(cellName: string): DNHorizontalPageBreak; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a horizontal page break to the collection.
    ///</summary>
    ///  <param name="row">Row index, zero based.</param>
    ///  <param name="startColumn">Start column index, zero based.</param>
    ///  <param name="endColumn">End column index, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.HorizontalPageBreak" />
    ///  object index.</returns>
    ///<remarks>This method is used to add a horizontal pagebreak within a print area.</remarks>
    function Add(row: Int32; startColumn: Int32; endColumn: Int32): Int32; overload;
    ///<summary>
    ///  Adds a horizontal page break to the collection.
    ///</summary>
    ///  <param name="row">Cell row index, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.HorizontalPageBreak" />
    ///  object index.</returns>
    ///<remarks>Page break is added in the top left of the cell.
    ///  Please set a horizontal page break and a vertical page break concurrently.</remarks>
    function Add(row: Int32): Int32; overload;
    ///<summary>
    ///  Adds a horizontal page break to the collection.
    ///</summary>
    ///  <param name="row">Cell row index, zero based.</param>
    ///  <param name="column">Cell column index, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.HorizontalPageBreak" />
    ///  object index.</returns>
    ///<remarks>Page break is added in the top left of the cell.
    ///  Please set a horizontal page break and a vertical page break concurrently.</remarks>
    function Add(row: Int32; column: Int32): Int32; overload;
    ///<summary>
    ///  Adds a horizontal page break to the collection.
    ///</summary>
    ///  <param name="cellName">Cell name.</param>
    ///<returns><see cref="T:Aspose.Cells.HorizontalPageBreak" />
    ///  object index.</returns>
    ///<remarks>Page break is added in the top left of the cell.
    ///  Please set a horizontal page break and a vertical page break concurrently.</remarks>
    function Add(cellName: string): Int32; overload;
    ///<summary>
    ///  Removes the HPageBreak element at a specified name.
    ///</summary>
    ///  <param name="index">Element index, zero based.</param>
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNHorizontalPageBreak): Int32; overload;
    function BinarySearch(item: DNHorizontalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNHorizontalPageBreak>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNHorizontalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNHorizontalPageBreak>): Int32; overload;
    function &Contains(item: DNHorizontalPageBreak): Boolean;
    procedure CopyTo(&array: TArray<DNHorizontalPageBreak>); overload;
    procedure CopyTo(&array: TArray<DNHorizontalPageBreak>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNHorizontalPageBreak>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): DNHorizontalPageBreak;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): DDN.mscorlib.DNList<DNHorizontalPageBreak>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): DNHorizontalPageBreak;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function IndexOf(item: DNHorizontalPageBreak): Int32; overload;
    function IndexOf(item: DNHorizontalPageBreak; index: Int32): Int32; overload;
    function IndexOf(item: DNHorizontalPageBreak; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNHorizontalPageBreak): Int32; overload;
    function LastIndexOf(item: DNHorizontalPageBreak; index: Int32): Int32; overload;
    function LastIndexOf(item: DNHorizontalPageBreak; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNHorizontalPageBreak>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHorizontalPageBreak read get_Item; default;
    property Item[cellName: string]: DNHorizontalPageBreak read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNHorizontalPageBreakCollection = class(TDNGenericImport<DNHorizontalPageBreakCollectionClass, DNHorizontalPageBreakCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHyperlinkCollectionClass = interface(DNObjectClass)
  ['{A478A603-19E0-5D2A-855F-4EDDC4F2EB14}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Hyperlink" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Get Hyperlinks Collection
  ///  HyperlinkCollection hyperlinks = worksheet.Hyperlinks;
  ///  //Adding a hyperlink to a URL at "A1" cell
  ///  hyperlinks.Add("A1", 1, 1, "http://www.aspose.com");
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Get Hyperlinks Collection
  ///  Dim hyperlinks As HyperlinkCollection = worksheet.Hyperlinks
  ///  'Adding a hyperlink to a URL at "A1" cell
  ///  hyperlinks.Add("A1", 1, 1, "http://www.aspose.com")
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.HyperlinkCollection')]
  DNHyperlinkCollection = interface(DNObject)
  ['{E3FC9F92-0498-3CEB-89EC-947A8850AE00}']
  { getters & setters } 

    function get_Item(index: Int32): DNHyperlink;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a hyperlink to a specified cell or a range of cells.
    ///</summary>
    ///  <param name="firstRow">First row of the hyperlink range.</param>
    ///  <param name="firstColumn">First column of the hyperlink range.</param>
    ///  <param name="totalRows">Number of rows in this hyperlink range.</param>
    ///  <param name="totalColumns">Number of columns of this hyperlink range.</param>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns><see cref="T:Aspose.Cells.Hyperlink" />
    ///  object index.</returns>
    ///<example><code>
    ///  [C#]
    ///  Worksheet worksheet = excel.Worksheets[0];
    ///  worksheet.Hyperlinks.Add("A4", 1, 1, "http://www.aspose.com");
    ///  worksheet.Hyperlinks.Add("A5", 1, 1, "c:\\book1.xls");
    ///  [Visual Basic]
    ///  Dim worksheet as Worksheet = excel.Worksheets(0)
    ///  worksheet.Hyperlinks.Add("A4", 1, 1, "http://www.aspose.com")
    ///  worksheet.Hyperlinks.Add("A5", 1, 1, "c:\\book1.xls")
    ///</code></example>
    function Add(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; address: string): Int32; overload;
    ///<summary>
    ///  Adds a hyperlink to a specified cell or a range of cells.
    ///</summary>
    ///  <param name="cellName">Cell name.</param>
    ///  <param name="totalRows">Number of rows in this hyperlink range.</param>
    ///  <param name="totalColumns">Number of columns of this hyperlink range.</param>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns><see cref="T:Aspose.Cells.Hyperlink" />
    ///  object index.</returns>
    function Add(cellName: string; totalRows: Int32; totalColumns: Int32; address: string): Int32; overload;
    ///<summary>
    ///  Adds a hyperlink to a specified cell or a range of cells.
    ///</summary>
    ///  <param name="startCellName">The top-left cell of the range.</param>
    ///  <param name="endCellName">The bottom-right cell of the range.</param>
    ///  <param name="address">Address of the hyperlink.</param>
    ///  <param name="textToDisplay">The text to be displayed for the specified hyperlink.</param>
    ///  <param name="screenTip">The screenTip text for the specified hyperlink.</param>
    ///<returns><see cref="T:Aspose.Cells.Hyperlink" />
    ///  object index.</returns>
    function Add(startCellName: string; endCellName: string; address: string; textToDisplay: string; screenTip: string): Int32; overload;
    ///<summary>
    ///  Remove the hyperlink  at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index of the element.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Clears all hyperlinks.
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNHyperlink): Int32; overload;
    function BinarySearch(item: DNHyperlink; comparer: DDN.mscorlib.DNIComparer<DNHyperlink>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNHyperlink; comparer: DDN.mscorlib.DNIComparer<DNHyperlink>): Int32; overload;
    function &Contains(item: DNHyperlink): Boolean;
    procedure CopyTo(&array: TArray<DNHyperlink>); overload;
    procedure CopyTo(&array: TArray<DNHyperlink>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNHyperlink>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNHyperlink>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNHyperlink>): DNHyperlink;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNHyperlink>): DDN.mscorlib.DNList<DNHyperlink>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNHyperlink>): DNHyperlink;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function IndexOf(item: DNHyperlink): Int32; overload;
    function IndexOf(item: DNHyperlink; index: Int32): Int32; overload;
    function IndexOf(item: DNHyperlink; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNHyperlink): Int32; overload;
    function LastIndexOf(item: DNHyperlink; index: Int32): Int32; overload;
    function LastIndexOf(item: DNHyperlink; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNHyperlink>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHyperlink read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNHyperlinkCollection = class(TDNGenericImport<DNHyperlinkCollectionClass, DNHyperlinkCollection>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNCustomXmlPartCollectionClass = interface(DNObjectClass)
  ['{C28221F8-E524-5970-9FB6-EEE8C9DF0A4F}']
  end;

  ///<summary>
  ///  Represents a Custom XML Data Storage Part (custom XML data within a package).
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.CustomXmlPartCollection')]
  DNCustomXmlPartCollection = interface(DNObject)
  ['{5731EF58-7B76-347B-B36C-2E3480D11712}']
  { getters & setters } 

    function get_Item(index: Int32): DNCustomXmlPart;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an item to the collection.
    ///</summary>
    ///  <param name="data">The XML content of this Custom XML Data Storage Part. </param>
    ///  <param name="shemaData">The set of XML schemas that are associated with this custom XML part. </param>
    ///<returns></returns>
    function Add(data: TArray<Byte>; shemaData: TArray<Byte>): Int32;
    ///<summary>
    ///  Gets an item by id.
    ///</summary>
    ///  <param name="id">Contains the GUID for the custom XML part.</param>
    ///<returns></returns>
    function SelectByID(id: string): DNCustomXmlPart;
    function BinarySearch(item: DNCustomXmlPart): Int32; overload;
    function BinarySearch(item: DNCustomXmlPart; comparer: DDN.mscorlib.DNIComparer<DNCustomXmlPart>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCustomXmlPart; comparer: DDN.mscorlib.DNIComparer<DNCustomXmlPart>): Int32; overload;
    function &Contains(item: DNCustomXmlPart): Boolean;
    procedure CopyTo(&array: TArray<DNCustomXmlPart>); overload;
    procedure CopyTo(&array: TArray<DNCustomXmlPart>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCustomXmlPart>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): DNCustomXmlPart;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): DDN.mscorlib.DNList<DNCustomXmlPart>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): DNCustomXmlPart;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function IndexOf(item: DNCustomXmlPart): Int32; overload;
    function IndexOf(item: DNCustomXmlPart; index: Int32): Int32; overload;
    function IndexOf(item: DNCustomXmlPart; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomXmlPart): Int32; overload;
    function LastIndexOf(item: DNCustomXmlPart; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomXmlPart; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomXmlPart>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCustomXmlPart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCustomXmlPartCollection = class(TDNGenericImport<DNCustomXmlPartCollectionClass, DNCustomXmlPartCollection>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagCollectionClass = interface(DNObjectClass)
  ['{E0A0BD9E-C8F3-5A36-BB9F-F0B4EA64E04D}']
  end;

  ///<summary>
  ///  Represents all smart tags in the cell.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTagCollection')]
  DNSmartTagCollection = interface(DNObject)
  ['{CC55097B-4892-32FA-9502-6ADFC8470776}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Item(index: Int32): DNSmartTag;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a smart tag.
    ///</summary>
    ///  <param name="uri">Specifies the namespace URI of the smart tag</param>
    ///  <param name="name">Specifies the name of the smart tag. </param>
    ///<returns>The index of smart tag in the list.</returns>
    function Add(uri: string; name: string): Int32;
    function BinarySearch(item: DNSmartTag): Int32; overload;
    function BinarySearch(item: DNSmartTag; comparer: DDN.mscorlib.DNIComparer<DNSmartTag>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSmartTag; comparer: DDN.mscorlib.DNIComparer<DNSmartTag>): Int32; overload;
    function &Contains(item: DNSmartTag): Boolean;
    procedure CopyTo(&array: TArray<DNSmartTag>); overload;
    procedure CopyTo(&array: TArray<DNSmartTag>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSmartTag>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSmartTag>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSmartTag>): DNSmartTag;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSmartTag>): DDN.mscorlib.DNList<DNSmartTag>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSmartTag>): DNSmartTag;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function IndexOf(item: DNSmartTag): Int32; overload;
    function IndexOf(item: DNSmartTag; index: Int32): Int32; overload;
    function IndexOf(item: DNSmartTag; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTag): Int32; overload;
    function LastIndexOf(item: DNSmartTag; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTag; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSmartTag>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the row of the cell smart tags.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets the column of the cell smart tags.
    ///</summary>
    property Column: Int32 read get_Column;
    property Item[index: Int32]: DNSmartTag read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSmartTagCollection = class(TDNGenericImport<DNSmartTagCollectionClass, DNSmartTagCollection>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagPropertyCollectionClass = interface(DNObjectClass)
  ['{7802A69A-AB09-5EC1-B917-C6073F744CBE}']
  { constructors } 

    {class} function init: DNSmartTagPropertyCollection;

  end;

  ///<summary>
  ///  Represents all properties of cell smart tag.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTagPropertyCollection')]
  DNSmartTagPropertyCollection = interface(DNObject)
  ['{E39FFD45-2075-30B0-A2F4-AB1972FF0746}']
  { getters & setters } 

    function get_Item(index: Int32): DNSmartTagProperty; overload;
    function get_Item(name: string): DNSmartTagProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a property of cell's smart tag.
    ///</summary>
    ///  <param name="name">The name of the property</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>return <see cref="T:Aspose.Cells.Markup.SmartTagProperty" />
    ///</returns>
    function Add(name: string; value: string): Int32;
    function BinarySearch(item: DNSmartTagProperty): Int32; overload;
    function BinarySearch(item: DNSmartTagProperty; comparer: DDN.mscorlib.DNIComparer<DNSmartTagProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSmartTagProperty; comparer: DDN.mscorlib.DNIComparer<DNSmartTagProperty>): Int32; overload;
    function &Contains(item: DNSmartTagProperty): Boolean;
    procedure CopyTo(&array: TArray<DNSmartTagProperty>); overload;
    procedure CopyTo(&array: TArray<DNSmartTagProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSmartTagProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): DNSmartTagProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): DDN.mscorlib.DNList<DNSmartTagProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): DNSmartTagProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function IndexOf(item: DNSmartTagProperty): Int32; overload;
    function IndexOf(item: DNSmartTagProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNSmartTagProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTagProperty): Int32; overload;
    function LastIndexOf(item: DNSmartTagProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTagProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSmartTagProperty>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSmartTagProperty read get_Item; default;
    property Item[name: string]: DNSmartTagProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSmartTagPropertyCollection = class(TDNGenericImport<DNSmartTagPropertyCollectionClass, DNSmartTagPropertyCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNNameCollectionClass = interface(DNObjectClass)
  ['{F5884B62-11C5-54C0-9AC2-EE45A43F3A11}']
  end;

  ///<summary>
  ///  Represents a collection of all the <see cref="T:Aspose.Cells.Name" />
  ///  objects in the spreadsheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.NameCollection')]
  DNNameCollection = interface(DNObject)
  ['{A44CEBF2-ADC2-31C4-8F99-DACF50F64684}']
  { getters & setters } 

    function get_Item(index: Int32): DNName; overload;
    function get_Item(text: string): DNName; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Defines a new name.
    ///</summary>
    ///  <param name="text">The text to use as the name.</param>
    ///<returns><see cref="T:Aspose.Cells.Name" />
    ///  object index.</returns>
    ///<remarks>Name cannot include spaces and cannot look like cell references.</remarks>
    function Add(text: string): Int32;
    ///<summary>
    ///  Remove an array of name
    ///</summary>
    ///  <param name="names">The names' text.</param>
    procedure Remove(names: TArray<string>); overload;
    ///<summary>
    ///  Remove the name.
    ///</summary>
    ///  <param name="text">The name text.</param>
    procedure Remove(text: string); overload;
    ///<summary>
    ///  Remove the name at the specific index.
    ///</summary>
    ///  <param name="index">index of the Name to be removed.</param>
    ///<remarks>
    ///  Please make sure that the name is not referred by the other formulas before calling the method.
    ///  And if the name is referred, setting Name.RefersTo as null is better.
    ///</remarks>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Remove all defined names which are not referenced by the formulas and data source.
    ///  If the defined name is referred, we only set Name.ReferTo as null and hide them.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Remove the duplicate defined names
    ///</summary>
    procedure RemoveDuplicateNames;
    ///<summary>
    ///  Sorts defined names.
    ///</summary>
    ///<remarks>If you create a large amount of named ranges in the Excel file, please call this method after all named ranges are created and before saving </remarks>
    procedure Sort;
    function BinarySearch(item: DNName): Int32; overload;
    function BinarySearch(item: DNName; comparer: DDN.mscorlib.DNIComparer<DNName>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNName; comparer: DDN.mscorlib.DNIComparer<DNName>): Int32; overload;
    function &Contains(item: DNName): Boolean;
    procedure CopyTo(&array: TArray<DNName>); overload;
    procedure CopyTo(&array: TArray<DNName>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNName>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNName>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNName>): DNName;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNName>): DDN.mscorlib.DNList<DNName>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNName>): DNName;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function IndexOf(item: DNName): Int32; overload;
    function IndexOf(item: DNName; index: Int32): Int32; overload;
    function IndexOf(item: DNName; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNName): Int32; overload;
    function LastIndexOf(item: DNName; index: Int32): Int32; overload;
    function LastIndexOf(item: DNName; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNName>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNName read get_Item; default;
    property Item[text: string]: DNName read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNNameCollection = class(TDNGenericImport<DNNameCollectionClass, DNNameCollection>) end;

  //-------------namespace: Aspose.Cells.Ods----------------
  DNOdsCellFieldCollectionClass = interface(DNObjectClass)
  ['{29659E8E-D100-5F0D-9745-7FA940707992}']
  end;

  ///<summary>
  ///  Represents the fields of ODS.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsCellFieldCollection')]
  DNOdsCellFieldCollection = interface(DNObject)
  ['{C0D2D9D5-833D-3BF6-BE6B-661C3BA736E3}']
  { getters & setters } 

    function get_Item(index: Int32): DNOdsCellField; overload;
    function get_Item(row: Int32; column: Int32): DNOdsCellField; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a field.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///  <param name="fieldType">The type of the field.</param>
    ///  <param name="format">The number format of the field.</param>
    ///<returns></returns>
    function Add(row: Int32; column: Int32; fieldType: DNOdsCellFieldType; format: string): Int32;
    ///<summary>
    ///  Update fields value to the cells.
    ///</summary>
    procedure UpdateFieldsValue;
    function BinarySearch(item: DNOdsCellField): Int32; overload;
    function BinarySearch(item: DNOdsCellField; comparer: DDN.mscorlib.DNIComparer<DNOdsCellField>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNOdsCellField; comparer: DDN.mscorlib.DNIComparer<DNOdsCellField>): Int32; overload;
    function &Contains(item: DNOdsCellField): Boolean;
    procedure CopyTo(&array: TArray<DNOdsCellField>); overload;
    procedure CopyTo(&array: TArray<DNOdsCellField>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNOdsCellField>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): DNOdsCellField;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): DDN.mscorlib.DNList<DNOdsCellField>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): DNOdsCellField;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function IndexOf(item: DNOdsCellField): Int32; overload;
    function IndexOf(item: DNOdsCellField; index: Int32): Int32; overload;
    function IndexOf(item: DNOdsCellField; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNOdsCellField): Int32; overload;
    function LastIndexOf(item: DNOdsCellField; index: Int32): Int32; overload;
    function LastIndexOf(item: DNOdsCellField; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOdsCellField>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOdsCellField read get_Item; default;
    property Item[row: Int32; column: Int32]: DNOdsCellField read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOdsCellFieldCollection = class(TDNGenericImport<DNOdsCellFieldCollectionClass, DNOdsCellFieldCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFilterCollectionClass = interface(DNObjectClass)
  ['{D45C0301-E251-5C0B-8FE7-54A02D65A911}']
  end;

  ///<summary>
  ///  Represents a collection of all the PivotFilter objects
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFilterCollection')]
  DNPivotFilterCollection = interface(DNObject)
  ['{B69CA4DA-C7EB-3F7E-89C0-D7B57CD3848F}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotFilter;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a PivotFilter Object to the specific type
    ///</summary>
    ///  <param name="fieldIndex">the PivotField index </param>
    ///  <param name="type">the PivotFilter type </param>
    ///<returns>the index of  the PivotFilter Object in this PivotFilterCollection.</returns>
    function Add(fieldIndex: Int32; &type: DNPivotFilterType): Int32;
    ///<summary>
    ///  Clear PivotFilter from the specific PivotField
    ///</summary>
    ///  <param name="fieldIndex">the PivotField index </param>
    procedure ClearFilter(fieldIndex: Int32);
    function BinarySearch(item: DNPivotFilter): Int32; overload;
    function BinarySearch(item: DNPivotFilter; comparer: DDN.mscorlib.DNIComparer<DNPivotFilter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPivotFilter; comparer: DDN.mscorlib.DNIComparer<DNPivotFilter>): Int32; overload;
    function &Contains(item: DNPivotFilter): Boolean;
    procedure CopyTo(&array: TArray<DNPivotFilter>); overload;
    procedure CopyTo(&array: TArray<DNPivotFilter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPivotFilter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): DNPivotFilter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): DDN.mscorlib.DNList<DNPivotFilter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): DNPivotFilter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function IndexOf(item: DNPivotFilter): Int32; overload;
    function IndexOf(item: DNPivotFilter; index: Int32): Int32; overload;
    function IndexOf(item: DNPivotFilter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFilter): Int32; overload;
    function LastIndexOf(item: DNPivotFilter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFilter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPivotFilter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotFilter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPivotFilterCollection = class(TDNGenericImport<DNPivotFilterCollectionClass, DNPivotFilterCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFormatConditionCollectionClass = interface(DNObjectClass)
  ['{4A5C3AFD-4A8D-51D6-85DB-A9F70217A550}']
  end;

  ///<summary>
  ///  Represents PivotTable Format Conditions.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFormatConditionCollection')]
  DNPivotFormatConditionCollection = interface(DNObject)
  ['{B33CA31E-BBA8-3216-A6E4-9AD476EF591B}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotFormatCondition;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a pivot FormatCondition to the collection.
    ///</summary>
    ///<returns>pivot FormatCondition object index.</returns>
    ///<remarks>not supported</remarks>
    function Add: Int32;
    function BinarySearch(item: DNPivotFormatCondition): Int32; overload;
    function BinarySearch(item: DNPivotFormatCondition; comparer: DDN.mscorlib.DNIComparer<DNPivotFormatCondition>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPivotFormatCondition; comparer: DDN.mscorlib.DNIComparer<DNPivotFormatCondition>): Int32; overload;
    function &Contains(item: DNPivotFormatCondition): Boolean;
    procedure CopyTo(&array: TArray<DNPivotFormatCondition>); overload;
    procedure CopyTo(&array: TArray<DNPivotFormatCondition>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPivotFormatCondition>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): DNPivotFormatCondition;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): DDN.mscorlib.DNList<DNPivotFormatCondition>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): DNPivotFormatCondition;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function IndexOf(item: DNPivotFormatCondition): Int32; overload;
    function IndexOf(item: DNPivotFormatCondition; index: Int32): Int32; overload;
    function IndexOf(item: DNPivotFormatCondition; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFormatCondition): Int32; overload;
    function LastIndexOf(item: DNPivotFormatCondition; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFormatCondition; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPivotFormatCondition>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotFormatCondition read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPivotFormatConditionCollection = class(TDNGenericImport<DNPivotFormatConditionCollectionClass, DNPivotFormatConditionCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotTableCollectionClass = interface(DNObjectClass)
  ['{E3F3A015-7F3A-534A-94E6-7B64650854DF}']
  end;

  ///<summary>
  ///  Represents the collection of all the PivotTable objects on the specified worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotTableCollection')]
  DNPivotTableCollection = interface(DNObject)
  ['{B35EF239-7979-3C72-A808-ADDA4F78B532}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotTable; overload;
    function get_Item(name: string): DNPivotTable; overload;
    function get_Item(row: Int32; column: Int32): DNPivotTable; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Performs application-defined tasks associated with freeing, releasing, or
    ///  resetting unmanaged resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Adds a new PivotTable cache to a PivotCaches collection.
    ///</summary>
    ///  <param name="sourceData">The data for the new PivotTable cache.</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///<returns>The new added cache index.</returns>
    function Add(sourceData: string; destCellName: string; tableName: string): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable cache to a PivotCaches collection.
    ///</summary>
    ///  <param name="sourceData">The data for the new PivotTable cache.</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///  <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source.
    ///  If the property is true, it will save memory.</param>
    ///<returns>The new added cache index.</returns>
    function Add(sourceData: string; destCellName: string; tableName: string; useSameSource: Boolean): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable cache to a PivotCaches collection.
    ///</summary>
    ///  <param name="sourceData">The data cell range for the new PivotTable.Example : Sheet1!A1:C8</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///<returns>The new added cache index.</returns>
    function Add(sourceData: string; row: Int32; column: Int32; tableName: string): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable cache to a PivotCaches collection.
    ///</summary>
    ///  <param name="sourceData">The data cell range for the new PivotTable.Example : Sheet1!A1:C8</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///  <param name="useSameSource">Indicates whether using same data source when another existing pivot table has used this data source.
    ///  If the property is true, it will save memory.</param>
    ///<returns>The new added cache index.</returns>
    function Add(sourceData: string; row: Int32; column: Int32; tableName: string; useSameSource: Boolean): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable Object to the collection from another PivotTable.
    ///</summary>
    ///  <param name="pivotTable">The source pivotTable.</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///<returns>The new added PivotTable index.</returns>
    function Add(pivotTable: DNPivotTable; destCellName: string; tableName: string): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable Object to the collection from another PivotTable.
    ///</summary>
    ///  <param name="pivotTable">The source pivotTable.</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///<returns>The new added PivotTable index.</returns>
    function Add(pivotTable: DNPivotTable; row: Int32; column: Int32; tableName: string): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable Object to the collection with multiple consolidation ranges as data source.
    ///</summary>
    ///  <param name="sourceData">The multiple consolidation ranges,such as {"Sheet1!A1:C8","Sheet2!A1:B8"}</param>
    ///  <param name="isAutoPage">Whether auto create a single page field.
    ///  If true,the following param pageFields will be ignored.
    ///</param>
    ///  <param name="pageFields">The pivot page field items.
    ///</param>
    ///  <param name="destCellName">destCellName The name of the new PivotTable report.</param>
    ///  <param name="tableName">the name of the new PivotTable report.</param>
    ///<returns>The new added PivotTable index.</returns>
    function Add(sourceData: TArray<string>; isAutoPage: Boolean; pageFields: DNPivotPageFields; destCellName: string; tableName: string): Int32; overload;
    ///<summary>
    ///  Adds a new PivotTable Object to the collection with multiple consolidation ranges as data source.
    ///</summary>
    ///  <param name="sourceData">The multiple consolidation ranges,such as {"Sheet1!A1:C8","Sheet2!A1:B8"}</param>
    ///  <param name="isAutoPage">Whether auto create a single page field.
    ///  If true,the following param pageFields will be ignored</param>
    ///  <param name="pageFields">The pivot page field items.
    ///</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the PivotTable report's destination range.</param>
    ///  <param name="tableName">The name of the new PivotTable report.</param>
    ///<returns>The new added PivotTable index.</returns>
    function Add(sourceData: TArray<string>; isAutoPage: Boolean; pageFields: DNPivotPageFields; row: Int32; column: Int32; tableName: string): Int32; overload;
    ///<summary>
    ///  Clear all pivot tables.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Deletes the specified PivotTable
    ///</summary>
    ///  <param name="pivotTable">PivotTable object</param>
    procedure Remove(pivotTable: DNPivotTable);
    ///<summary>
    ///  Deletes the PivotTable at the specified index
    ///</summary>
    ///  <param name="index">the position index in PivotTable collection</param>
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNPivotTable): Int32; overload;
    function BinarySearch(item: DNPivotTable; comparer: DDN.mscorlib.DNIComparer<DNPivotTable>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPivotTable; comparer: DDN.mscorlib.DNIComparer<DNPivotTable>): Int32; overload;
    function &Contains(item: DNPivotTable): Boolean;
    procedure CopyTo(&array: TArray<DNPivotTable>); overload;
    procedure CopyTo(&array: TArray<DNPivotTable>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPivotTable>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPivotTable>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPivotTable>): DNPivotTable;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPivotTable>): DDN.mscorlib.DNList<DNPivotTable>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPivotTable>): DNPivotTable;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function IndexOf(item: DNPivotTable): Int32; overload;
    function IndexOf(item: DNPivotTable; index: Int32): Int32; overload;
    function IndexOf(item: DNPivotTable; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotTable): Int32; overload;
    function LastIndexOf(item: DNPivotTable; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotTable; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPivotTable>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotTable read get_Item; default;
    property Item[name: string]: DNPivotTable read get_Item; default;
    property Item[row: Int32; column: Int32]: DNPivotTable read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPivotTableCollection = class(TDNGenericImport<DNPivotTableCollectionClass, DNPivotTableCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNContentTypePropertyCollectionClass = interface(DNObjectClass)
  ['{CB7402AB-E9E8-5E0B-BEA1-A627EA6FF24D}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Cells.Properties.ContentTypeProperty" />
  ///  objects that represent additional information.
  ///</summary>
  [DNTypeName('Aspose.Cells.Properties.ContentTypePropertyCollection')]
  DNContentTypePropertyCollection = interface(DNObject)
  ['{FA3B83B3-9390-3E3C-94BC-54DF34D5C9B3}']
  { getters & setters } 

    function get_Item(index: Int32): DNContentTypeProperty; overload;
    function get_Item(name: string): DNContentTypeProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds content type property information.
    ///</summary>
    ///  <param name="name">The name of the content type property.</param>
    ///  <param name="value">The value of the content type property.</param>
    function Add(name: string; value: string): Int32; overload;
    ///<summary>
    ///  Adds content type property information.
    ///</summary>
    ///  <param name="name">The name of the content type property.</param>
    ///  <param name="value">The value of the content type property.</param>
    ///  <param name="type">The type of the content type property.</param>
    function Add(name: string; value: string; &type: string): Int32; overload;
    function BinarySearch(item: DNContentTypeProperty): Int32; overload;
    function BinarySearch(item: DNContentTypeProperty; comparer: DDN.mscorlib.DNIComparer<DNContentTypeProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNContentTypeProperty; comparer: DDN.mscorlib.DNIComparer<DNContentTypeProperty>): Int32; overload;
    function &Contains(item: DNContentTypeProperty): Boolean;
    procedure CopyTo(&array: TArray<DNContentTypeProperty>); overload;
    procedure CopyTo(&array: TArray<DNContentTypeProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNContentTypeProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): DNContentTypeProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): DDN.mscorlib.DNList<DNContentTypeProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): DNContentTypeProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function IndexOf(item: DNContentTypeProperty): Int32; overload;
    function IndexOf(item: DNContentTypeProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNContentTypeProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNContentTypeProperty): Int32; overload;
    function LastIndexOf(item: DNContentTypeProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNContentTypeProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNContentTypeProperty>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNContentTypeProperty read get_Item; default;
    property Item[name: string]: DNContentTypeProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNContentTypePropertyCollection = class(TDNGenericImport<DNContentTypePropertyCollectionClass, DNContentTypePropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNCustomPropertyCollectionClass = interface(DNObjectClass)
  ['{A794922E-8B70-5F63-B3D8-DEBF47FBBA42}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Cells.Properties.CustomProperty" />
  ///  objects that represent additional information.
  ///</summary>
  [DNTypeName('Aspose.Cells.Properties.CustomPropertyCollection')]
  DNCustomPropertyCollection = interface(DNObject)
  ['{653BDEDE-9CDB-3B3C-A047-C9B0772591AB}']
  { getters & setters } 

    function get_Item(index: Int32): DNCustomProperty; overload;
    function get_Item(name: string): DNCustomProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds custom property information.
    ///</summary>
    ///  <param name="name">The name of the custom property.</param>
    ///  <param name="value">The value of the custom property.</param>
    function Add(name: string; value: string): Int32;
    function BinarySearch(item: DNCustomProperty): Int32; overload;
    function BinarySearch(item: DNCustomProperty; comparer: DDN.mscorlib.DNIComparer<DNCustomProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCustomProperty; comparer: DDN.mscorlib.DNIComparer<DNCustomProperty>): Int32; overload;
    function &Contains(item: DNCustomProperty): Boolean;
    procedure CopyTo(&array: TArray<DNCustomProperty>); overload;
    procedure CopyTo(&array: TArray<DNCustomProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCustomProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): DNCustomProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): DDN.mscorlib.DNList<DNCustomProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): DNCustomProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function IndexOf(item: DNCustomProperty): Int32; overload;
    function IndexOf(item: DNCustomProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNCustomProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomProperty): Int32; overload;
    function LastIndexOf(item: DNCustomProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomProperty>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCustomProperty read get_Item; default;
    property Item[name: string]: DNCustomProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCustomPropertyCollection = class(TDNGenericImport<DNCustomPropertyCollectionClass, DNCustomPropertyCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNProtectedRangeCollectionClass = interface(DNObjectClass)
  ['{9AB4698B-24D8-50F9-B170-3B8CBC70DB7C}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.ProtectedRange" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.ProtectedRangeCollection')]
  DNProtectedRangeCollection = interface(DNObject)
  ['{B036A2CE-25DB-3C7A-AB79-A0FFE11EE1BA}']
  { getters & setters } 

    function get_Item(index: Int32): DNProtectedRange;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a <see cref="T:Aspose.Cells.ProtectedRange" />
    ///  item to the collection.
    ///</summary>
    ///  <param name="name">Range title. This is used as a descriptor, not as a named range definition.</param>
    ///  <param name="startRow">Start row index of the range.</param>
    ///  <param name="startColumn">Start column index of the range.</param>
    ///  <param name="endRow">End row index of the range.</param>
    ///  <param name="endColumn">End column index of the range.</param>
    ///<returns>object index.</returns>
    function Add(name: string; startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32): Int32;
    function BinarySearch(item: DNProtectedRange): Int32; overload;
    function BinarySearch(item: DNProtectedRange; comparer: DDN.mscorlib.DNIComparer<DNProtectedRange>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNProtectedRange; comparer: DDN.mscorlib.DNIComparer<DNProtectedRange>): Int32; overload;
    function &Contains(item: DNProtectedRange): Boolean;
    procedure CopyTo(&array: TArray<DNProtectedRange>); overload;
    procedure CopyTo(&array: TArray<DNProtectedRange>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNProtectedRange>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): DNProtectedRange;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): DDN.mscorlib.DNList<DNProtectedRange>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): DNProtectedRange;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function IndexOf(item: DNProtectedRange): Int32; overload;
    function IndexOf(item: DNProtectedRange; index: Int32): Int32; overload;
    function IndexOf(item: DNProtectedRange; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNProtectedRange): Int32; overload;
    function LastIndexOf(item: DNProtectedRange; index: Int32): Int32; overload;
    function LastIndexOf(item: DNProtectedRange; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNProtectedRange>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNProtectedRange read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNProtectedRangeCollection = class(TDNGenericImport<DNProtectedRangeCollectionClass, DNProtectedRangeCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNQueryTableCollectionClass = interface(DNObjectClass)
  ['{0E32E268-CC52-5F0D-9136-852B58253606}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Cells.QueryTableCollection" />
  ///  objects that represent QueryTable collection information.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTableCollection')]
  DNQueryTableCollection = interface(DNObject)
  ['{A6D93445-BD46-3DBF-AA4A-562A1AF27034}']
  { getters & setters } 

    function get_Item(index: Int32): DNQueryTable;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNQueryTable): Int32; overload;
    function BinarySearch(item: DNQueryTable; comparer: DDN.mscorlib.DNIComparer<DNQueryTable>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNQueryTable; comparer: DDN.mscorlib.DNIComparer<DNQueryTable>): Int32; overload;
    function &Contains(item: DNQueryTable): Boolean;
    procedure CopyTo(&array: TArray<DNQueryTable>); overload;
    procedure CopyTo(&array: TArray<DNQueryTable>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNQueryTable>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNQueryTable>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNQueryTable>): DNQueryTable;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNQueryTable>): DDN.mscorlib.DNList<DNQueryTable>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNQueryTable>): DNQueryTable;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function IndexOf(item: DNQueryTable): Int32; overload;
    function IndexOf(item: DNQueryTable; index: Int32): Int32; overload;
    function IndexOf(item: DNQueryTable; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNQueryTable): Int32; overload;
    function LastIndexOf(item: DNQueryTable; index: Int32): Int32; overload;
    function LastIndexOf(item: DNQueryTable; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNQueryTable>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNQueryTable read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNQueryTableCollection = class(TDNGenericImport<DNQueryTableCollectionClass, DNQueryTableCollection>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaCollctionClass = interface(DNObjectClass)
  ['{4E5BCF16-2B76-5086-BF8B-CBAE04AF25A7}']
  end;

  ///<summary>
  ///  Represents all power query formulas in the mashup data.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaCollction')]
  DNPowerQueryFormulaCollction = interface(DNObject)
  ['{A0214F59-B7BE-34AB-AFF5-AD2DFA758257}']
  { getters & setters } 

    function get_Item(index: Int32): DNPowerQueryFormula; overload;
    function get_Item(name: string): DNPowerQueryFormula; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNPowerQueryFormula): Int32; overload;
    function BinarySearch(item: DNPowerQueryFormula; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormula>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPowerQueryFormula; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormula>): Int32; overload;
    function &Contains(item: DNPowerQueryFormula): Boolean;
    procedure CopyTo(&array: TArray<DNPowerQueryFormula>); overload;
    procedure CopyTo(&array: TArray<DNPowerQueryFormula>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPowerQueryFormula>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): DNPowerQueryFormula;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): DDN.mscorlib.DNList<DNPowerQueryFormula>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): DNPowerQueryFormula;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function IndexOf(item: DNPowerQueryFormula): Int32; overload;
    function IndexOf(item: DNPowerQueryFormula; index: Int32): Int32; overload;
    function IndexOf(item: DNPowerQueryFormula; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormula): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormula; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormula; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPowerQueryFormula>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPowerQueryFormula read get_Item; default;
    property Item[name: string]: DNPowerQueryFormula read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPowerQueryFormulaCollction = class(TDNGenericImport<DNPowerQueryFormulaCollctionClass, DNPowerQueryFormulaCollction>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaItemCollectionClass = interface(DNObjectClass)
  ['{D679A8DC-D23C-5391-BFF7-2FCCB6F02A23}']
  end;

  ///<summary>
  ///  Represents all item of the power query formula.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaItemCollection')]
  DNPowerQueryFormulaItemCollection = interface(DNObject)
  ['{EFF65510-8454-3D18-8623-EA98AB4769E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNPowerQueryFormulaItem; overload;
    function get_Item(name: string): DNPowerQueryFormulaItem; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNPowerQueryFormulaItem): Int32; overload;
    function BinarySearch(item: DNPowerQueryFormulaItem; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaItem>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPowerQueryFormulaItem; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaItem>): Int32; overload;
    function &Contains(item: DNPowerQueryFormulaItem): Boolean;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaItem>); overload;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaItem>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPowerQueryFormulaItem>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): DNPowerQueryFormulaItem;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): DDN.mscorlib.DNList<DNPowerQueryFormulaItem>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): DNPowerQueryFormulaItem;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaItem): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaItem; index: Int32): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaItem; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaItem): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaItem; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaItem; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPowerQueryFormulaItem>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPowerQueryFormulaItem read get_Item; default;
    property Item[name: string]: DNPowerQueryFormulaItem read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPowerQueryFormulaItemCollection = class(TDNGenericImport<DNPowerQueryFormulaItemCollectionClass, DNPowerQueryFormulaItemCollection>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaParameterCollectionClass = interface(DNObjectClass)
  ['{EF43A89F-36F6-5A32-BCE4-E1C226F4132E}']
  { constructors } 

    {class} function init: DNPowerQueryFormulaParameterCollection;

  end;

  ///<summary>
  ///  Represents the
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaParameterCollection')]
  DNPowerQueryFormulaParameterCollection = interface(DNObject)
  ['{6976D06A-8EF6-34B1-A65C-2A493C87CD15}']
  { getters & setters } 

    function get_Item(index: Int32): DNPowerQueryFormulaParameter; overload;
    function get_Item(name: string): DNPowerQueryFormulaParameter; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNPowerQueryFormulaParameter): Int32; overload;
    function BinarySearch(item: DNPowerQueryFormulaParameter; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaParameter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPowerQueryFormulaParameter; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaParameter>): Int32; overload;
    function &Contains(item: DNPowerQueryFormulaParameter): Boolean;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaParameter>); overload;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaParameter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPowerQueryFormulaParameter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): DNPowerQueryFormulaParameter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): DDN.mscorlib.DNList<DNPowerQueryFormulaParameter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): DNPowerQueryFormulaParameter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaParameter): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaParameter; index: Int32): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaParameter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaParameter): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaParameter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaParameter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPowerQueryFormulaParameter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPowerQueryFormulaParameter read get_Item; default;
    property Item[name: string]: DNPowerQueryFormulaParameter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPowerQueryFormulaParameterCollection = class(TDNGenericImport<DNPowerQueryFormulaParameterCollectionClass, DNPowerQueryFormulaParameterCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRangeCollectionClass = interface(DNObjectClass)
  ['{9D0CE5A1-A084-594A-833F-A5498A58C0AD}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Range" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.RangeCollection')]
  DNRangeCollection = interface(DNObject)
  ['{3207AC2F-8E83-370B-870D-AD21303C7F46}']
  { getters & setters } 

    function get_Item(index: Int32): DNRange;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a <see cref="T:Aspose.Cells.Range" />
    ///  item to the collection.
    ///</summary>
    ///  <param name="range">Range object</param>
    ///<returns></returns>
    function Add(range: DNRange): Int32;
    function BinarySearch(item: DNRange): Int32; overload;
    function BinarySearch(item: DNRange; comparer: DDN.mscorlib.DNIComparer<DNRange>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNRange; comparer: DDN.mscorlib.DNIComparer<DNRange>): Int32; overload;
    function &Contains(item: DNRange): Boolean;
    procedure CopyTo(&array: TArray<DNRange>); overload;
    procedure CopyTo(&array: TArray<DNRange>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNRange>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNRange>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNRange>): DNRange;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNRange>): DDN.mscorlib.DNList<DNRange>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNRange>): DNRange;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function IndexOf(item: DNRange): Int32; overload;
    function IndexOf(item: DNRange; index: Int32): Int32; overload;
    function IndexOf(item: DNRange; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNRange): Int32; overload;
    function LastIndexOf(item: DNRange; index: Int32): Int32; overload;
    function LastIndexOf(item: DNRange; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRange>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRange read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRangeCollection = class(TDNGenericImport<DNRangeCollectionClass, DNRangeCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNReferredAreaCollectionClass = interface(DNObjectClass)
  ['{418426B5-CE14-5956-8A39-E58B0EF239D5}']
  end;

  ///<summary>
  ///  Represents all referred cells and areas.
  ///</summary>
  [DNTypeName('Aspose.Cells.ReferredAreaCollection')]
  DNReferredAreaCollection = interface(DNObject)
  ['{0DABF001-056B-3831-BE72-FF2BFDA1E850}']
  { getters & setters } 

    function get_Item(index: Int32): DNReferredArea;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNReferredArea): Int32; overload;
    function BinarySearch(item: DNReferredArea; comparer: DDN.mscorlib.DNIComparer<DNReferredArea>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNReferredArea; comparer: DDN.mscorlib.DNIComparer<DNReferredArea>): Int32; overload;
    function &Contains(item: DNReferredArea): Boolean;
    procedure CopyTo(&array: TArray<DNReferredArea>); overload;
    procedure CopyTo(&array: TArray<DNReferredArea>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNReferredArea>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNReferredArea>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNReferredArea>): DNReferredArea;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNReferredArea>): DDN.mscorlib.DNList<DNReferredArea>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNReferredArea>): DNReferredArea;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function IndexOf(item: DNReferredArea): Int32; overload;
    function IndexOf(item: DNReferredArea; index: Int32): Int32; overload;
    function IndexOf(item: DNReferredArea; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNReferredArea): Int32; overload;
    function LastIndexOf(item: DNReferredArea; index: Int32): Int32; overload;
    function LastIndexOf(item: DNReferredArea; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNReferredArea>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNReferredArea read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNReferredAreaCollection = class(TDNGenericImport<DNReferredAreaCollectionClass, DNReferredAreaCollection>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCollectionClass = interface(DNObjectClass)
  ['{CBD053CA-C7F2-5AFC-BD3F-FA1C79F427C9}']
  end;

  ///<summary>
  ///  Represents all revision logs.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionCollection')]
  DNRevisionCollection = interface(DNObject)
  ['{BFFBA6C3-F251-3483-AFEE-1B9EB4A31187}']
  { getters & setters } 

    function get_Item(index: Int32): DNRevision;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNRevision): Int32; overload;
    function BinarySearch(item: DNRevision; comparer: DDN.mscorlib.DNIComparer<DNRevision>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNRevision; comparer: DDN.mscorlib.DNIComparer<DNRevision>): Int32; overload;
    function &Contains(item: DNRevision): Boolean;
    procedure CopyTo(&array: TArray<DNRevision>); overload;
    procedure CopyTo(&array: TArray<DNRevision>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNRevision>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNRevision>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNRevision>): DNRevision;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNRevision>): DDN.mscorlib.DNList<DNRevision>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNRevision>): DNRevision;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function IndexOf(item: DNRevision): Int32; overload;
    function IndexOf(item: DNRevision; index: Int32): Int32; overload;
    function IndexOf(item: DNRevision; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNRevision): Int32; overload;
    function LastIndexOf(item: DNRevision; index: Int32): Int32; overload;
    function LastIndexOf(item: DNRevision; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevision>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRevision read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRevisionCollection = class(TDNGenericImport<DNRevisionCollectionClass, DNRevisionCollection>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionLogCollectionClass = interface(DNObjectClass)
  ['{60B5CE3C-97D9-5944-BD20-501E71680883}']
  end;

  ///<summary>
  ///  Represents all revision logs.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionLogCollection')]
  DNRevisionLogCollection = interface(DNObject)
  ['{EF56C981-B556-329B-806A-58200533AE7C}']
  { getters & setters } 

    function get_DaysPreservingHistory: Int32;
    procedure set_DaysPreservingHistory(value: Int32);
    function get_Item(index: Int32): DNRevisionLog;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNRevisionLog): Int32; overload;
    function BinarySearch(item: DNRevisionLog; comparer: DDN.mscorlib.DNIComparer<DNRevisionLog>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNRevisionLog; comparer: DDN.mscorlib.DNIComparer<DNRevisionLog>): Int32; overload;
    function &Contains(item: DNRevisionLog): Boolean;
    procedure CopyTo(&array: TArray<DNRevisionLog>); overload;
    procedure CopyTo(&array: TArray<DNRevisionLog>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNRevisionLog>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): DNRevisionLog;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): DDN.mscorlib.DNList<DNRevisionLog>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): DNRevisionLog;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function IndexOf(item: DNRevisionLog): Int32; overload;
    function IndexOf(item: DNRevisionLog; index: Int32): Int32; overload;
    function IndexOf(item: DNRevisionLog; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNRevisionLog): Int32; overload;
    function LastIndexOf(item: DNRevisionLog; index: Int32): Int32; overload;
    function LastIndexOf(item: DNRevisionLog; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevisionLog>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the number of days the spreadsheet application will keep the change history for this workbook.
    ///</summary>
    property DaysPreservingHistory: Int32 read get_DaysPreservingHistory write set_DaysPreservingHistory;
    property Item[index: Int32]: DNRevisionLog read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRevisionLogCollection = class(TDNGenericImport<DNRevisionLogCollectionClass, DNRevisionLogCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioCollectionClass = interface(DNObjectClass)
  ['{DEA6A84D-ABCA-59E8-B972-D0ACBFD78E2F}']
  end;

  ///<summary>
  ///  Represents the list of scenarios.
  ///</summary>
  [DNTypeName('Aspose.Cells.ScenarioCollection')]
  DNScenarioCollection = interface(DNObject)
  ['{0B395981-2432-3D1A-810B-5F6983E71CD4}']
  { getters & setters } 

    function get_ActiveIndex: Int32;
    procedure set_ActiveIndex(value: Int32);
    function get_LastSelected: Int32;
    procedure set_LastSelected(value: Int32);
    function get_Item(index: Int32): DNScenario;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a scenario.
    ///</summary>
    ///  <param name="name">The name of scenario.</param>
    ///<returns>The index in the list of scenarios.</returns>
    function Add(name: string): Int32;
    function BinarySearch(item: DNScenario): Int32; overload;
    function BinarySearch(item: DNScenario; comparer: DDN.mscorlib.DNIComparer<DNScenario>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNScenario; comparer: DDN.mscorlib.DNIComparer<DNScenario>): Int32; overload;
    function &Contains(item: DNScenario): Boolean;
    procedure CopyTo(&array: TArray<DNScenario>); overload;
    procedure CopyTo(&array: TArray<DNScenario>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNScenario>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNScenario>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNScenario>): DNScenario;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNScenario>): DDN.mscorlib.DNList<DNScenario>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNScenario>): DNScenario;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function IndexOf(item: DNScenario): Int32; overload;
    function IndexOf(item: DNScenario; index: Int32): Int32; overload;
    function IndexOf(item: DNScenario; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNScenario): Int32; overload;
    function LastIndexOf(item: DNScenario; index: Int32): Int32; overload;
    function LastIndexOf(item: DNScenario; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNScenario>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets which scenario is selected.
    ///</summary>
    property ActiveIndex: Int32 read get_ActiveIndex write set_ActiveIndex;
    ///<summary>
    ///  Indicates which scenario was last selected by the user to be run/shown.
    ///</summary>
    property LastSelected: Int32 read get_LastSelected write set_LastSelected;
    property Item[index: Int32]: DNScenario read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNScenarioCollection = class(TDNGenericImport<DNScenarioCollectionClass, DNScenarioCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioInputCellCollectionClass = interface(DNObjectClass)
  ['{06078FFC-1BE6-5C28-AFE5-F36089015558}']
  end;

  ///<summary>
  ///  Represents the list of the scenario's input cells.
  ///</summary>
  [DNTypeName('Aspose.Cells.ScenarioInputCellCollection')]
  DNScenarioInputCellCollection = interface(DNObject)
  ['{9F6F9239-E317-319C-9C7C-78927A149F33}']
  { getters & setters } 

    function get_Item(index: Int32): DNScenarioInputCell;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an input cell.
    ///</summary>
    ///  <param name="row">The row index of input cell.</param>
    ///  <param name="column">The column index of input cell.</param>
    ///  <param name="value">The value of input cell.</param>
    ///<returns></returns>
    function Add(row: Int32; column: Int32; value: string): Int32;
    function BinarySearch(item: DNScenarioInputCell): Int32; overload;
    function BinarySearch(item: DNScenarioInputCell; comparer: DDN.mscorlib.DNIComparer<DNScenarioInputCell>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNScenarioInputCell; comparer: DDN.mscorlib.DNIComparer<DNScenarioInputCell>): Int32; overload;
    function &Contains(item: DNScenarioInputCell): Boolean;
    procedure CopyTo(&array: TArray<DNScenarioInputCell>); overload;
    procedure CopyTo(&array: TArray<DNScenarioInputCell>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNScenarioInputCell>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): DNScenarioInputCell;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): DDN.mscorlib.DNList<DNScenarioInputCell>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): DNScenarioInputCell;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function IndexOf(item: DNScenarioInputCell): Int32; overload;
    function IndexOf(item: DNScenarioInputCell; index: Int32): Int32; overload;
    function IndexOf(item: DNScenarioInputCell; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNScenarioInputCell): Int32; overload;
    function LastIndexOf(item: DNScenarioInputCell; index: Int32): Int32; overload;
    function LastIndexOf(item: DNScenarioInputCell; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNScenarioInputCell>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNScenarioInputCell read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNScenarioInputCellCollection = class(TDNGenericImport<DNScenarioInputCellCollectionClass, DNScenarioInputCellCollection>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCollectionClass = interface(DNObjectClass)
  ['{36A6F78B-575B-536B-BEB4-49B54468DA78}']
  end;

  ///<summary>
  ///  Specifies the collection of all the Slicer objects on the specified worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerCollection')]
  DNSlicerCollection = interface(DNObject)
  ['{5F4581E2-D648-3F87-8FBD-5BE8D96C438D}']
  { getters & setters } 

    function get_Item(index: Int32): DNSlicer; overload;
    function get_Item(name: string): DNSlicer; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Remove the specified Slicer
    ///</summary>
    ///  <param name="slicer">The Slicer object</param>
    procedure Remove(slicer: DNSlicer);
    ///<summary>
    ///  Deletes the Slicer at the specified index
    ///</summary>
    ///  <param name="index">The position index in Slicer collection</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Add a new Slicer using PivotTable as data source
    ///</summary>
    ///  <param name="pivot">PivotTable object</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="baseFieldName">The name of PivotField in PivotTable.BaseFields</param>
    ///<returns>The new add Slicer index</returns>
    function Add(pivot: DNPivotTable; destCellName: string; baseFieldName: string): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using PivotTable as data source
    ///</summary>
    ///  <param name="pivot">PivotTable object</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="baseFieldName">The name of PivotField in PivotTable.BaseFields</param>
    ///<returns>The new add Slicer index</returns>
    function Add(pivot: DNPivotTable; row: Int32; column: Int32; baseFieldName: string): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using PivotTable as data source
    ///</summary>
    ///  <param name="pivot">PivotTable object</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="baseFieldIndex">The index of PivotField in PivotTable.BaseFields</param>
    ///<returns>The new add Slicer index</returns>
    function Add(pivot: DNPivotTable; row: Int32; column: Int32; baseFieldIndex: Int32): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using PivotTable as data source
    ///</summary>
    ///  <param name="pivot">PivotTable object</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="baseFieldIndex">The index of PivotField in PivotTable.BaseFields</param>
    ///<returns>The new add Slicer index</returns>
    function Add(pivot: DNPivotTable; destCellName: string; baseFieldIndex: Int32): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using PivotTable as data source
    ///</summary>
    ///  <param name="pivot">PivotTable object</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="baseField">The PivotField in PivotTable.BaseFields</param>
    ///<returns>The new add Slicer index</returns>
    function Add(pivot: DNPivotTable; row: Int32; column: Int32; baseField: DNPivotField): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using PivotTable as data source
    ///</summary>
    ///  <param name="pivot">PivotTable object</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="baseField">The PivotField in PivotTable.BaseFields</param>
    ///<returns>The new add Slicer index</returns>
    function Add(pivot: DNPivotTable; destCellName: string; baseField: DNPivotField): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using ListObjet as data source
    ///</summary>
    ///  <param name="table">ListObject object</param>
    ///  <param name="index">The index of ListColumn in ListObject.ListColumns</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the Slicer range.</param>
    ///<returns>The new add Slicer index</returns>
    function Add(table: DNListObject; index: Int32; destCellName: string): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using ListObjet as data source
    ///</summary>
    ///  <param name="table">ListObject object</param>
    ///  <param name="listColumn">The ListColumn in ListObject.ListColumns</param>
    ///  <param name="destCellName">The cell in the upper-left corner of the Slicer range.</param>
    ///<returns>The new add Slicer index</returns>
    function Add(table: DNListObject; listColumn: DNListColumn; destCellName: string): Int32; overload;
    ///<summary>
    ///  Add a new Slicer using ListObjet as data source
    ///</summary>
    ///  <param name="table">ListObject object</param>
    ///  <param name="listColumn">The ListColumn in ListObject.ListColumns</param>
    ///  <param name="row">Row index of the cell in the upper-left corner of the Slicer range.</param>
    ///  <param name="column">Column index of the cell in the upper-left corner of the Slicer range.</param>
    ///<returns>The new add Slicer index</returns>
    function Add(table: DNListObject; listColumn: DNListColumn; row: Int32; column: Int32): Int32; overload;
    function BinarySearch(item: DNSlicer): Int32; overload;
    function BinarySearch(item: DNSlicer; comparer: DDN.mscorlib.DNIComparer<DNSlicer>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSlicer; comparer: DDN.mscorlib.DNIComparer<DNSlicer>): Int32; overload;
    function &Contains(item: DNSlicer): Boolean;
    procedure CopyTo(&array: TArray<DNSlicer>); overload;
    procedure CopyTo(&array: TArray<DNSlicer>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSlicer>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSlicer>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSlicer>): DNSlicer;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSlicer>): DDN.mscorlib.DNList<DNSlicer>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSlicer>): DNSlicer;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function IndexOf(item: DNSlicer): Int32; overload;
    function IndexOf(item: DNSlicer; index: Int32): Int32; overload;
    function IndexOf(item: DNSlicer; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicer): Int32; overload;
    function LastIndexOf(item: DNSlicer; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicer; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSlicer>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSlicer read get_Item; default;
    property Item[name: string]: DNSlicer read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSlicerCollection = class(TDNGenericImport<DNSlicerCollectionClass, DNSlicerCollection>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCacheItemCollectionClass = interface(DNObjectClass)
  ['{D61D2E33-B55D-5EFF-B0B5-2E2D76D3F251}']
  end;

  ///<summary>
  ///  Represent the collection of SlicerCacheItem
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheItemCollection')]
  DNSlicerCacheItemCollection = interface(DNObject)
  ['{00D23D45-65EF-3844-AA5E-A2697E100C83}']
  { getters & setters } 

    function get_Item(index: Int32): DNSlicerCacheItem;
    function get_Count: Int32;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);

  { methods } 

    function BinarySearch(item: DNSlicerCacheItem): Int32; overload;
    function BinarySearch(item: DNSlicerCacheItem; comparer: DDN.mscorlib.DNIComparer<DNSlicerCacheItem>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSlicerCacheItem; comparer: DDN.mscorlib.DNIComparer<DNSlicerCacheItem>): Int32; overload;
    function &Contains(item: DNSlicerCacheItem): Boolean;
    procedure CopyTo(&array: TArray<DNSlicerCacheItem>); overload;
    procedure CopyTo(&array: TArray<DNSlicerCacheItem>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSlicerCacheItem>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): DNSlicerCacheItem;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): DDN.mscorlib.DNList<DNSlicerCacheItem>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): DNSlicerCacheItem;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function IndexOf(item: DNSlicerCacheItem): Int32; overload;
    function IndexOf(item: DNSlicerCacheItem; index: Int32): Int32; overload;
    function IndexOf(item: DNSlicerCacheItem; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicerCacheItem): Int32; overload;
    function LastIndexOf(item: DNSlicerCacheItem; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicerCacheItem; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSlicerCacheItem>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSlicerCacheItem read get_Item; default;
    ///<summary>
    ///  Gets the count of the SlicerCacheItem.
    ///</summary>
    property Count: Int32 read get_Count;
    property Capacity: Int32 read get_Capacity write set_Capacity;
  end;

  TDNSlicerCacheItemCollection = class(TDNGenericImport<DNSlicerCacheItemCollectionClass, DNSlicerCacheItemCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDxfCollectionClass = interface(DNObjectClass)
  ['{E65F483B-473C-5BAC-8FC2-189489179400}']
  end;

  ///<summary>
  ///  Represents the master differential formatting records.
  ///</summary>
  [DNTypeName('Aspose.Cells.DxfCollection')]
  DNDxfCollection = interface(DNObject)
  ['{D4C12B2A-E0F5-3BB7-B77B-F7036610D610}']
  { getters & setters } 

    function get_Item(index: Int32): DNStyle;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNStyle): Int32; overload;
    function BinarySearch(item: DNStyle; comparer: DDN.mscorlib.DNIComparer<DNStyle>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNStyle; comparer: DDN.mscorlib.DNIComparer<DNStyle>): Int32; overload;
    function &Contains(item: DNStyle): Boolean;
    procedure CopyTo(&array: TArray<DNStyle>); overload;
    procedure CopyTo(&array: TArray<DNStyle>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNStyle>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNStyle>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNStyle>): DNStyle;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNStyle>): DDN.mscorlib.DNList<DNStyle>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNStyle>): DNStyle;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function IndexOf(item: DNStyle): Int32; overload;
    function IndexOf(item: DNStyle; index: Int32): Int32; overload;
    function IndexOf(item: DNStyle; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNStyle): Int32; overload;
    function LastIndexOf(item: DNStyle; index: Int32): Int32; overload;
    function LastIndexOf(item: DNStyle; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNStyle>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNStyle read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDxfCollection = class(TDNGenericImport<DNDxfCollectionClass, DNDxfCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListColumnCollectionClass = interface(DNObjectClass)
  ['{A9822DE0-6BAC-532D-9F33-8FAEA2CB9B84}']
  end;

  ///<summary>
  ///  Represents A collection of all the <see cref="T:Aspose.Cells.Tables.ListColumn" />
  ///  objects in the specified ListObject object.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.ListColumnCollection')]
  DNListColumnCollection = interface(DNObject)
  ['{9DF75E1C-821F-35A1-8F03-95B259F8F402}']
  { getters & setters } 

    function get_Item(index: Int32): DNListColumn; overload;
    function get_Item(name: string): DNListColumn; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNListColumn): Int32; overload;
    function BinarySearch(item: DNListColumn; comparer: DDN.mscorlib.DNIComparer<DNListColumn>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNListColumn; comparer: DDN.mscorlib.DNIComparer<DNListColumn>): Int32; overload;
    function &Contains(item: DNListColumn): Boolean;
    procedure CopyTo(&array: TArray<DNListColumn>); overload;
    procedure CopyTo(&array: TArray<DNListColumn>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNListColumn>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNListColumn>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNListColumn>): DNListColumn;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNListColumn>): DDN.mscorlib.DNList<DNListColumn>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNListColumn>): DNListColumn;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function IndexOf(item: DNListColumn): Int32; overload;
    function IndexOf(item: DNListColumn; index: Int32): Int32; overload;
    function IndexOf(item: DNListColumn; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNListColumn): Int32; overload;
    function LastIndexOf(item: DNListColumn; index: Int32): Int32; overload;
    function LastIndexOf(item: DNListColumn; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNListColumn>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListColumn read get_Item; default;
    property Item[name: string]: DNListColumn read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNListColumnCollection = class(TDNGenericImport<DNListColumnCollectionClass, DNListColumnCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListObjectCollectionClass = interface(DNObjectClass)
  ['{4CEF8690-7F70-5BFD-AFC6-3B347DCDED84}']
  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Cells.Tables.ListObject" />
  ///  objects in the worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.ListObjectCollection')]
  DNListObjectCollection = interface(DNObject)
  ['{6258B5B1-8B78-373B-8803-353CD3AA3FA7}']
  { getters & setters } 

    function get_Item(index: Int32): DNListObject; overload;
    function get_Item(tableName: string): DNListObject; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a ListObject to the worksheet.
    ///</summary>
    ///  <param name="startRow">The start row of the list range.</param>
    ///  <param name="startColumn">The start row of the list range.</param>
    ///  <param name="endRow">The start row of the list range.</param>
    ///  <param name="endColumn">The start row of the list range.</param>
    ///  <param name="hasHeaders">Whether the range has headers.</param>
    ///<returns>The index of the new ListObject</returns>
    function Add(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; hasHeaders: Boolean): Int32; overload;
    ///<summary>
    ///  Adds a ListObject to the worksheet.
    ///</summary>
    ///  <param name="startCell">The start cell of the list range.</param>
    ///  <param name="endCell">The end cell of the list range.</param>
    ///  <param name="hasHeaders">Whether the range has headers.</param>
    ///<returns>The index of the new ListObject</returns>
    function Add(startCell: string; endCell: string; hasHeaders: Boolean): Int32; overload;
    ///<summary>
    ///  Update all column name of the tables.
    ///</summary>
    procedure UpdateColumnName;
    function BinarySearch(item: DNListObject): Int32; overload;
    function BinarySearch(item: DNListObject; comparer: DDN.mscorlib.DNIComparer<DNListObject>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNListObject; comparer: DDN.mscorlib.DNIComparer<DNListObject>): Int32; overload;
    function &Contains(item: DNListObject): Boolean;
    procedure CopyTo(&array: TArray<DNListObject>); overload;
    procedure CopyTo(&array: TArray<DNListObject>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNListObject>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNListObject>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNListObject>): DNListObject;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNListObject>): DDN.mscorlib.DNList<DNListObject>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNListObject>): DNListObject;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function IndexOf(item: DNListObject): Int32; overload;
    function IndexOf(item: DNListObject; index: Int32): Int32; overload;
    function IndexOf(item: DNListObject; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNListObject): Int32; overload;
    function LastIndexOf(item: DNListObject; index: Int32): Int32; overload;
    function LastIndexOf(item: DNListObject; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNListObject>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListObject read get_Item; default;
    property Item[tableName: string]: DNListObject read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNListObjectCollection = class(TDNGenericImport<DNListObjectCollectionClass, DNListObjectCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleCollectionClass = interface(DNObjectClass)
  ['{A0945A6E-9DC7-5D65-84F8-1B3E527D4397}']
  end;

  ///<summary>
  ///  Represents all custom table styles.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableStyleCollection')]
  DNTableStyleCollection = interface(DNObject)
  ['{F0DD2C17-5BC4-38BD-BE8D-EB585474C327}']
  { getters & setters } 

    function get_Item(index: Int32): DNTableStyle; overload;
    function get_Item(name: string): DNTableStyle; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a custom table style.
    ///</summary>
    ///  <param name="name">The table style name.</param>
    ///<returns>The index of the table style.</returns>
    function AddTableStyle(name: string): Int32;
    ///<summary>
    ///  Adds a custom pivot table style.
    ///</summary>
    ///  <param name="name">The pivot table style name.</param>
    ///<returns>The index of the pivot table style.</returns>
    function AddPivotTableStyle(name: string): Int32;
    ///<summary>
    ///  Gets the builtin table style
    ///</summary>
    ///  <param name="type">The builtin table style type.</param>
    ///<returns></returns>
    function GetBuiltinTableStyle(&type: DNTableStyleType): DNTableStyle;
    function BinarySearch(item: DNTableStyle): Int32; overload;
    function BinarySearch(item: DNTableStyle; comparer: DDN.mscorlib.DNIComparer<DNTableStyle>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTableStyle; comparer: DDN.mscorlib.DNIComparer<DNTableStyle>): Int32; overload;
    function &Contains(item: DNTableStyle): Boolean;
    procedure CopyTo(&array: TArray<DNTableStyle>); overload;
    procedure CopyTo(&array: TArray<DNTableStyle>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTableStyle>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTableStyle>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTableStyle>): DNTableStyle;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTableStyle>): DDN.mscorlib.DNList<DNTableStyle>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTableStyle>): DNTableStyle;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function IndexOf(item: DNTableStyle): Int32; overload;
    function IndexOf(item: DNTableStyle; index: Int32): Int32; overload;
    function IndexOf(item: DNTableStyle; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyle): Int32; overload;
    function LastIndexOf(item: DNTableStyle; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyle; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTableStyle>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTableStyle read get_Item; default;
    property Item[name: string]: DNTableStyle read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTableStyleCollection = class(TDNGenericImport<DNTableStyleCollectionClass, DNTableStyleCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleElementCollectionClass = interface(DNObjectClass)
  ['{31433D79-1EF7-5E65-8A9E-22AAF0775918}']
  end;

  ///<summary>
  ///  Represents all elements of the table style.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableStyleElementCollection')]
  DNTableStyleElementCollection = interface(DNObject)
  ['{415DBDC0-801B-3E7C-9E67-9FE6E7381CB3}']
  { getters & setters } 

    function get_Item(index: Int32): DNTableStyleElement; overload;
    function get_Item(&type: DNTableStyleElementType): DNTableStyleElement; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an element.
    ///</summary>
    ///  <param name="type">The type of the element</param>
    ///<returns>Returns the index of the element in the list.</returns>
    function Add(&type: DNTableStyleElementType): Int32;
    function BinarySearch(item: DNTableStyleElement): Int32; overload;
    function BinarySearch(item: DNTableStyleElement; comparer: DDN.mscorlib.DNIComparer<DNTableStyleElement>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTableStyleElement; comparer: DDN.mscorlib.DNIComparer<DNTableStyleElement>): Int32; overload;
    function &Contains(item: DNTableStyleElement): Boolean;
    procedure CopyTo(&array: TArray<DNTableStyleElement>); overload;
    procedure CopyTo(&array: TArray<DNTableStyleElement>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTableStyleElement>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): DNTableStyleElement;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): DDN.mscorlib.DNList<DNTableStyleElement>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): DNTableStyleElement;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function IndexOf(item: DNTableStyleElement): Int32; overload;
    function IndexOf(item: DNTableStyleElement; index: Int32): Int32; overload;
    function IndexOf(item: DNTableStyleElement; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyleElement): Int32; overload;
    function LastIndexOf(item: DNTableStyleElement; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyleElement; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTableStyleElement>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTableStyleElement read get_Item; default;
    property Item[&type: DNTableStyleElementType]: DNTableStyleElement read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTableStyleElementCollection = class(TDNGenericImport<DNTableStyleElementCollectionClass, DNTableStyleElementCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentCollectionClass = interface(DNObjectClass)
  ['{DD6F8152-DCB7-5528-9244-ED2A54A9DC44}']
  end;

  ///<summary>
  ///  Represents the list of threaded comments.
  ///</summary>
  [DNTypeName('Aspose.Cells.ThreadedCommentCollection')]
  DNThreadedCommentCollection = interface(DNObject)
  ['{43E8658F-A26A-37F6-98BE-1E7A761A5B4D}']
  { getters & setters } 

    function get_Item(index: Int32): DNThreadedComment;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a threaded comment;
    ///</summary>
    ///  <param name="text">The text of the threaded comment.</param>
    ///  <param name="author">The author of the threaded comment</param>
    ///<returns></returns>
    function Add(text: string; author: DNThreadedCommentAuthor): Int32;
    function BinarySearch(item: DNThreadedComment): Int32; overload;
    function BinarySearch(item: DNThreadedComment; comparer: DDN.mscorlib.DNIComparer<DNThreadedComment>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNThreadedComment; comparer: DDN.mscorlib.DNIComparer<DNThreadedComment>): Int32; overload;
    function &Contains(item: DNThreadedComment): Boolean;
    procedure CopyTo(&array: TArray<DNThreadedComment>); overload;
    procedure CopyTo(&array: TArray<DNThreadedComment>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNThreadedComment>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): DNThreadedComment;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): DDN.mscorlib.DNList<DNThreadedComment>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): DNThreadedComment;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function IndexOf(item: DNThreadedComment): Int32; overload;
    function IndexOf(item: DNThreadedComment; index: Int32): Int32; overload;
    function IndexOf(item: DNThreadedComment; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedComment): Int32; overload;
    function LastIndexOf(item: DNThreadedComment; index: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedComment; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNThreadedComment>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNThreadedComment read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNThreadedCommentCollection = class(TDNGenericImport<DNThreadedCommentCollectionClass, DNThreadedCommentCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentAuthorCollectionClass = interface(DNObjectClass)
  ['{58D6FA9E-6A90-5284-9AEF-CE49CE226E7D}']
  { constructors } 

    {class} function init: DNThreadedCommentAuthorCollection;

  end;

  ///<summary>
  ///  Represents all persons who .
  ///</summary>
  [DNTypeName('Aspose.Cells.ThreadedCommentAuthorCollection')]
  DNThreadedCommentAuthorCollection = interface(DNObject)
  ['{93C80F8F-AA0B-37CA-B263-ECD413F3AE2A}']
  { getters & setters } 

    function get_CurrentPerson: DNThreadedCommentAuthor;
    procedure set_CurrentPerson(value: DNThreadedCommentAuthor);
    function get_Item(index: Int32): DNThreadedCommentAuthor; overload;
    function get_Item(name: string): DNThreadedCommentAuthor; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds one thread comment person.
    ///</summary>
    ///  <param name="name">The name of the person.</param>
    ///  <param name="userId"></param>
    ///  <param name="providerId">The id of the provider</param>
    ///<returns></returns>
    function Add(name: string; userId: string; providerId: string): Int32;
    function BinarySearch(item: DNThreadedCommentAuthor): Int32; overload;
    function BinarySearch(item: DNThreadedCommentAuthor; comparer: DDN.mscorlib.DNIComparer<DNThreadedCommentAuthor>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNThreadedCommentAuthor; comparer: DDN.mscorlib.DNIComparer<DNThreadedCommentAuthor>): Int32; overload;
    function &Contains(item: DNThreadedCommentAuthor): Boolean;
    procedure CopyTo(&array: TArray<DNThreadedCommentAuthor>); overload;
    procedure CopyTo(&array: TArray<DNThreadedCommentAuthor>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNThreadedCommentAuthor>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): DNThreadedCommentAuthor;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): DDN.mscorlib.DNList<DNThreadedCommentAuthor>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): DNThreadedCommentAuthor;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function IndexOf(item: DNThreadedCommentAuthor): Int32; overload;
    function IndexOf(item: DNThreadedCommentAuthor; index: Int32): Int32; overload;
    function IndexOf(item: DNThreadedCommentAuthor; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedCommentAuthor): Int32; overload;
    function LastIndexOf(item: DNThreadedCommentAuthor; index: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedCommentAuthor; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNThreadedCommentAuthor>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the current user.
    ///</summary>
    property CurrentPerson: DNThreadedCommentAuthor read get_CurrentPerson write set_CurrentPerson;
    property Item[index: Int32]: DNThreadedCommentAuthor read get_Item; default;
    property Item[name: string]: DNThreadedCommentAuthor read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNThreadedCommentAuthorCollection = class(TDNGenericImport<DNThreadedCommentAuthorCollectionClass, DNThreadedCommentAuthorCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNValidationCollectionClass = interface(DNObjectClass)
  ['{95BD876E-4423-58DC-97D5-1ABB7B2F97AE}']
  end;

  ///<summary>
  ///  Represents data validation collection.
  ///</summary>
  [DNTypeName('Aspose.Cells.ValidationCollection')]
  DNValidationCollection = interface(DNObject)
  ['{74E6D367-BEF3-374E-96BC-0CE4A02E3B32}']
  { getters & setters } 

    function get_Item(index: Int32): DNValidation;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a data validation to the collection.
    ///</summary>
    ///<returns><see cref="T:Aspose.Cells.Validation" />
    ///  object index.</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use ValidationCollection.Add(CellArea) method.
    ///  This property will be removed 12 months later since JANUARY 2015.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function Add: Int32; overload;
    ///<summary>
    ///  Adds a data validation to the collection.
    ///</summary>
    ///  <param name="ca">The area contains this validation.</param>
    ///<returns><see cref="T:Aspose.Cells.Validation" />
    ///  object index.</returns>
    function Add(ca: DNCellArea): Int32; overload;
    ///<summary>
    ///  Removes all validation setting on the cell.
    ///</summary>
    ///  <param name="row">The row index of the cell.</param>
    ///  <param name="column">The column index of the cell.</param>
    procedure RemoveACell(row: Int32; column: Int32);
    ///<summary>
    ///  Removes all validation setting on the range..
    ///</summary>
    ///  <param name="ca">The range which contains the validations setting.</param>
    procedure RemoveArea(ca: DNCellArea);
    ///<summary>
    ///  Gets the validation applied to given cell.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>Returns a <see cref="T:Aspose.Cells.Validation" />
    ///  object or null if there is no validation for given cell</returns>
    function GetValidationInCell(row: Int32; column: Int32): DNValidation;
    function BinarySearch(item: DNValidation): Int32; overload;
    function BinarySearch(item: DNValidation; comparer: DDN.mscorlib.DNIComparer<DNValidation>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNValidation; comparer: DDN.mscorlib.DNIComparer<DNValidation>): Int32; overload;
    function &Contains(item: DNValidation): Boolean;
    procedure CopyTo(&array: TArray<DNValidation>); overload;
    procedure CopyTo(&array: TArray<DNValidation>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNValidation>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNValidation>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNValidation>): DNValidation;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNValidation>): DDN.mscorlib.DNList<DNValidation>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNValidation>): DNValidation;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function IndexOf(item: DNValidation): Int32; overload;
    function IndexOf(item: DNValidation; index: Int32): Int32; overload;
    function IndexOf(item: DNValidation; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNValidation): Int32; overload;
    function LastIndexOf(item: DNValidation; index: Int32): Int32; overload;
    function LastIndexOf(item: DNValidation; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNValidation>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNValidation read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNValidationCollection = class(TDNGenericImport<DNValidationCollectionClass, DNValidationCollection>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaModuleCollectionClass = interface(DNObjectClass)
  ['{6527AC90-1EA6-5963-BD3D-CDF8F91A5A95}']
  end;

  ///<summary>
  ///  Represents the list of <see cref="T:Aspose.Cells.Vba.VbaModule" />
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaModuleCollection')]
  DNVbaModuleCollection = interface(DNObject)
  ['{B78BB495-27DB-3A41-A942-429FA11F33EF}']
  { getters & setters } 

    function get_Item(index: Int32): DNVbaModule; overload;
    function get_Item(name: string): DNVbaModule; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary></summary>
    ///  <param name="name"></param>
    ///  <param name="data"></param>
    procedure AddDesignerStorage(name: string; data: TArray<Byte>);
    ///<summary>
    ///  Represents the data of Designer.
    ///</summary>
    ///<remarks>
    ///  We do not support to parse them. Just only for copying.
    ///</remarks>
    function GetDesignerStorage(name: string): TArray<Byte>;
    ///<summary>
    ///  Adds module for a worksheet.
    ///</summary>
    ///  <param name="sheet">The worksheet</param>
    ///<returns></returns>
    function Add(sheet: DNWorksheet): Int32; overload;
    ///<summary>
    ///  Adds module.
    ///</summary>
    ///  <param name="type">The type of module.</param>
    ///  <param name="name">The name of module.</param>
    ///<returns></returns>
    function Add(&type: DNVbaModuleType; name: string): Int32; overload;
    ///<summary>
    ///  Removes module for a worksheet.
    ///</summary>
    ///  <param name="sheet">The worksheet</param>
    ///<returns></returns>
    procedure Remove(sheet: DNWorksheet); overload;
    ///<summary>
    ///  Remove the module by the name
    ///</summary>
    ///  <param name="name"></param>
    procedure Remove(name: string); overload;
    function BinarySearch(item: DNVbaModule): Int32; overload;
    function BinarySearch(item: DNVbaModule; comparer: DDN.mscorlib.DNIComparer<DNVbaModule>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNVbaModule; comparer: DDN.mscorlib.DNIComparer<DNVbaModule>): Int32; overload;
    function &Contains(item: DNVbaModule): Boolean;
    procedure CopyTo(&array: TArray<DNVbaModule>); overload;
    procedure CopyTo(&array: TArray<DNVbaModule>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNVbaModule>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNVbaModule>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNVbaModule>): DNVbaModule;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNVbaModule>): DDN.mscorlib.DNList<DNVbaModule>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNVbaModule>): DNVbaModule;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function IndexOf(item: DNVbaModule): Int32; overload;
    function IndexOf(item: DNVbaModule; index: Int32): Int32; overload;
    function IndexOf(item: DNVbaModule; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaModule): Int32; overload;
    function LastIndexOf(item: DNVbaModule; index: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaModule; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNVbaModule>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNVbaModule read get_Item; default;
    property Item[name: string]: DNVbaModule read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNVbaModuleCollection = class(TDNGenericImport<DNVbaModuleCollectionClass, DNVbaModuleCollection>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaProjectReferenceCollectionClass = interface(DNObjectClass)
  ['{A144CA5C-5FF8-5153-9AF5-E46C5713A274}']
  end;

  ///<summary>
  ///  Represents all references of VBA project.
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaProjectReferenceCollection')]
  DNVbaProjectReferenceCollection = interface(DNObject)
  ['{439C575D-1DA3-36A2-B406-ADD6B3BEFF1D}']
  { getters & setters } 

    function get_Item(i: Int32): DNVbaProjectReference;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Add a reference to an Automation type library.
    ///</summary>
    ///  <param name="name">The name of reference.</param>
    ///  <param name="libid">The identifier of an Automation type library.</param>
    ///<returns></returns>
    function AddRegisteredReference(name: string; libid: string): Int32;
    ///<summary>
    ///  Add a reference to a twiddled type library and its extended type library.
    ///</summary>
    ///  <param name="name">The name of reference.</param>
    ///  <param name="libid">The identifier of an Automation type library.</param>
    ///  <param name="twiddledlibid">The identifier of a twiddled type library</param>
    ///  <param name="extendedLibid">The identifier of an extended type library</param>
    ///<returns></returns>
    function AddControlRefrernce(name: string; libid: string; twiddledlibid: string; extendedLibid: string): Int32;
    ///<summary>
    ///  Adds a reference to an external VBA project.
    ///</summary>
    ///  <param name="name">The name of reference.</param>
    ///  <param name="absoluteLibid">The referenced VBA project's identifier with an absolute path.</param>
    ///  <param name="relativeLibid">The referenced VBA project's identifier with an relative path.</param>
    ///<returns></returns>
    function AddProjectRefrernce(name: string; absoluteLibid: string; relativeLibid: string): Int32;
    ///<summary>
    ///  Copies references from other VBA project.
    ///</summary>
    ///  <param name="source">The source references.</param>
    procedure Copy(source: DNVbaProjectReferenceCollection);
    function BinarySearch(item: DNVbaProjectReference): Int32; overload;
    function BinarySearch(item: DNVbaProjectReference; comparer: DDN.mscorlib.DNIComparer<DNVbaProjectReference>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNVbaProjectReference; comparer: DDN.mscorlib.DNIComparer<DNVbaProjectReference>): Int32; overload;
    function &Contains(item: DNVbaProjectReference): Boolean;
    procedure CopyTo(&array: TArray<DNVbaProjectReference>); overload;
    procedure CopyTo(&array: TArray<DNVbaProjectReference>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNVbaProjectReference>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): DNVbaProjectReference;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): DDN.mscorlib.DNList<DNVbaProjectReference>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): DNVbaProjectReference;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function IndexOf(item: DNVbaProjectReference): Int32; overload;
    function IndexOf(item: DNVbaProjectReference; index: Int32): Int32; overload;
    function IndexOf(item: DNVbaProjectReference; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaProjectReference): Int32; overload;
    function LastIndexOf(item: DNVbaProjectReference; index: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaProjectReference; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNVbaProjectReference>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNVbaProjectReference read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNVbaProjectReferenceCollection = class(TDNGenericImport<DNVbaProjectReferenceCollectionClass, DNVbaProjectReferenceCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNVerticalPageBreakCollectionClass = interface(DNObjectClass)
  ['{56905132-A853-50C4-993B-139CE646C202}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.VerticalPageBreak" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Cells.VerticalPageBreakCollection')]
  DNVerticalPageBreakCollection = interface(DNObject)
  ['{8361CC26-21A3-33D8-AFF2-44E43ECEA4F8}']
  { getters & setters } 

    function get_Item(index: Int32): DNVerticalPageBreak; overload;
    function get_Item(cellName: string): DNVerticalPageBreak; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a vertical page break to the collection.
    ///</summary>
    ///  <param name="startRow">Start row index, zero based.</param>
    ///  <param name="endRow">End row index, zero based.</param>
    ///  <param name="column">Column index, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.VerticalPageBreak" />
    ///  object index.</returns>
    ///<remarks>This method is used to add a vertical pagebreak within a print area.</remarks>
    function Add(startRow: Int32; endRow: Int32; column: Int32): Int32; overload;
    ///<summary>
    ///  Adds a vertical page break to the collection.
    ///</summary>
    ///  <param name="column">Cell column index, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.VerticalPageBreak" />
    ///  object index.</returns>
    ///<remarks>Page break is added in the top left of the cell.
    ///  Please set a horizontal page break and a vertical page break concurrently.</remarks>
    function Add(column: Int32): Int32; overload;
    ///<summary>
    ///  Adds a vertical page break to the collection.
    ///</summary>
    ///  <param name="row">Cell row index, zero based.</param>
    ///  <param name="column">Cell column index, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.VerticalPageBreak" />
    ///  object index.</returns>
    ///<remarks>Page break is added in the top left of the cell.
    ///  Please set a horizontal page break and a vertical page break concurrently.</remarks>
    function Add(row: Int32; column: Int32): Int32; overload;
    ///<summary>
    ///  Adds a vertical page break to the collection.
    ///</summary>
    ///  <param name="cellName">Cell name.</param>
    ///<returns><see cref="T:Aspose.Cells.VerticalPageBreak" />
    ///  object index.</returns>
    ///<remarks>Page break is added in the top left of the cell.
    ///  Please set a horizontal page break and a vertical page break concurrently.</remarks>
    function Add(cellName: string): Int32; overload;
    ///<summary>
    ///  Removes the VPageBreak element at a specified name.
    ///</summary>
    ///  <param name="index">Element index, zero based.</param>
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNVerticalPageBreak): Int32; overload;
    function BinarySearch(item: DNVerticalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNVerticalPageBreak>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNVerticalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNVerticalPageBreak>): Int32; overload;
    function &Contains(item: DNVerticalPageBreak): Boolean;
    procedure CopyTo(&array: TArray<DNVerticalPageBreak>); overload;
    procedure CopyTo(&array: TArray<DNVerticalPageBreak>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNVerticalPageBreak>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): DNVerticalPageBreak;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): DDN.mscorlib.DNList<DNVerticalPageBreak>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): DNVerticalPageBreak;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function IndexOf(item: DNVerticalPageBreak): Int32; overload;
    function IndexOf(item: DNVerticalPageBreak; index: Int32): Int32; overload;
    function IndexOf(item: DNVerticalPageBreak; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNVerticalPageBreak): Int32; overload;
    function LastIndexOf(item: DNVerticalPageBreak; index: Int32): Int32; overload;
    function LastIndexOf(item: DNVerticalPageBreak; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNVerticalPageBreak>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNVerticalPageBreak read get_Item; default;
    property Item[cellName: string]: DNVerticalPageBreak read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNVerticalPageBreakCollection = class(TDNGenericImport<DNVerticalPageBreakCollectionClass, DNVerticalPageBreakCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionCollectionClass = interface(DNObjectClass)
  ['{A5584237-44F1-57E9-B487-6CFF67354446}']
  end;

  ///<summary>
  ///  Represents the list of web extension.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionCollection')]
  DNWebExtensionCollection = interface(DNObject)
  ['{00C2CCEC-3EE2-38E6-A5B5-52ACF23D7316}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtension;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a web extension.
    ///</summary>
    ///<returns>The index.</returns>
    function Add: Int32;
    ///<summary>
    ///  Remove web extension by the index.
    ///</summary>
    ///  <param name="index">The index.</param>
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNWebExtension): Int32; overload;
    function BinarySearch(item: DNWebExtension; comparer: DDN.mscorlib.DNIComparer<DNWebExtension>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtension; comparer: DDN.mscorlib.DNIComparer<DNWebExtension>): Int32; overload;
    function &Contains(item: DNWebExtension): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtension>); overload;
    procedure CopyTo(&array: TArray<DNWebExtension>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtension>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtension>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtension>): DNWebExtension;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtension>): DDN.mscorlib.DNList<DNWebExtension>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtension>): DNWebExtension;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function IndexOf(item: DNWebExtension): Int32; overload;
    function IndexOf(item: DNWebExtension; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtension; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtension): Int32; overload;
    function LastIndexOf(item: DNWebExtension; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtension; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtension>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtension read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionCollection = class(TDNGenericImport<DNWebExtensionCollectionClass, DNWebExtensionCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionBindingCollectionClass = interface(DNObjectClass)
  ['{C014E9CF-173E-560F-BF62-9F3864DDFD07}']
  { constructors } 

    {class} function init: DNWebExtensionBindingCollection;

  end;

  ///<summary>
  ///  Represents the list of binding relationships between an Office Add-in and the data in the document.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionBindingCollection')]
  DNWebExtensionBindingCollection = interface(DNObject)
  ['{72BE3206-C775-3133-BD8C-1E4D4CBF5B25}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionBinding;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an a binding relationship between an Office Add-in and the data in the document.
    ///</summary>
    ///<returns></returns>
    function Add: Int32;
    function BinarySearch(item: DNWebExtensionBinding): Int32; overload;
    function BinarySearch(item: DNWebExtensionBinding; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionBinding>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionBinding; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionBinding>): Int32; overload;
    function &Contains(item: DNWebExtensionBinding): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionBinding>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionBinding>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionBinding>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): DNWebExtensionBinding;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): DDN.mscorlib.DNList<DNWebExtensionBinding>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): DNWebExtensionBinding;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function IndexOf(item: DNWebExtensionBinding): Int32; overload;
    function IndexOf(item: DNWebExtensionBinding; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionBinding; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionBinding): Int32; overload;
    function LastIndexOf(item: DNWebExtensionBinding; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionBinding; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionBinding>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionBindingCollection = class(TDNGenericImport<DNWebExtensionBindingCollectionClass, DNWebExtensionBindingCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionPropertyCollectionClass = interface(DNObjectClass)
  ['{D24D5B85-F837-5CC5-921D-B77E1D9BA019}']
  { constructors } 

    {class} function init: DNWebExtensionPropertyCollection;

  end;

  ///<summary>
  ///  Represents the list of web extension properties.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionPropertyCollection')]
  DNWebExtensionPropertyCollection = interface(DNObject)
  ['{E2092158-A069-3FC8-9341-7FDECC303070}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionProperty; overload;
    function get_Item(name: string): DNWebExtensionProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds web extension property.
    ///</summary>
    ///  <param name="name">The name of property.</param>
    ///  <param name="value">The value of property.</param>
    ///<returns>The index of added property.</returns>
    function Add(name: string; value: string): Int32;
    ///<summary>
    ///  Remove the property by the name.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    procedure RemoveAt(name: string); overload;
    function BinarySearch(item: DNWebExtensionProperty): Int32; overload;
    function BinarySearch(item: DNWebExtensionProperty; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionProperty; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionProperty>): Int32; overload;
    function &Contains(item: DNWebExtensionProperty): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionProperty>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): DNWebExtensionProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): DDN.mscorlib.DNList<DNWebExtensionProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): DNWebExtensionProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function IndexOf(item: DNWebExtensionProperty): Int32; overload;
    function IndexOf(item: DNWebExtensionProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionProperty): Int32; overload;
    function LastIndexOf(item: DNWebExtensionProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionProperty>;
    procedure RemoveAt(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionProperty read get_Item; default;
    property Item[name: string]: DNWebExtensionProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionPropertyCollection = class(TDNGenericImport<DNWebExtensionPropertyCollectionClass, DNWebExtensionPropertyCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionReferenceCollectionClass = interface(DNObjectClass)
  ['{B362B568-27A1-507E-9C47-2328E98A24BB}']
  { constructors } 

    {class} function init: DNWebExtensionReferenceCollection;

  end;

  ///<summary>
  ///  Represents the list of web extension reference.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionReferenceCollection')]
  DNWebExtensionReferenceCollection = interface(DNObject)
  ['{9305189B-D910-308E-9572-76AA61E29EBC}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionReference;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an empty reference of web extension.
    ///</summary>
    ///<returns></returns>
    function Add: Int32;
    function BinarySearch(item: DNWebExtensionReference): Int32; overload;
    function BinarySearch(item: DNWebExtensionReference; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionReference>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionReference; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionReference>): Int32; overload;
    function &Contains(item: DNWebExtensionReference): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionReference>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionReference>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionReference>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): DNWebExtensionReference;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): DDN.mscorlib.DNList<DNWebExtensionReference>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): DNWebExtensionReference;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function IndexOf(item: DNWebExtensionReference): Int32; overload;
    function IndexOf(item: DNWebExtensionReference; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionReference; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionReference): Int32; overload;
    function LastIndexOf(item: DNWebExtensionReference; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionReference; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionReference>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionReference read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionReferenceCollection = class(TDNGenericImport<DNWebExtensionReferenceCollectionClass, DNWebExtensionReferenceCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionTaskPaneCollectionClass = interface(DNObjectClass)
  ['{FE0A9D59-2D65-58DD-88AC-EA749D4C02EB}']
  end;

  ///<summary>
  ///  Represents the list of task pane.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionTaskPaneCollection')]
  DNWebExtensionTaskPaneCollection = interface(DNObject)
  ['{FA11FEFE-5E60-3EC9-8A98-2B8B26D64B2B}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionTaskPane;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds task pane.
    ///</summary>
    ///<returns>The index.</returns>
    function Add: Int32;
    function BinarySearch(item: DNWebExtensionTaskPane): Int32; overload;
    function BinarySearch(item: DNWebExtensionTaskPane; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionTaskPane>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionTaskPane; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionTaskPane>): Int32; overload;
    function &Contains(item: DNWebExtensionTaskPane): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionTaskPane>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionTaskPane>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionTaskPane>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): DNWebExtensionTaskPane;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): DDN.mscorlib.DNList<DNWebExtensionTaskPane>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): DNWebExtensionTaskPane;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function IndexOf(item: DNWebExtensionTaskPane): Int32; overload;
    function IndexOf(item: DNWebExtensionTaskPane; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionTaskPane; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionTaskPane): Int32; overload;
    function LastIndexOf(item: DNWebExtensionTaskPane; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionTaskPane; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionTaskPane>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionTaskPane read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionTaskPaneCollection = class(TDNGenericImport<DNWebExtensionTaskPaneCollectionClass, DNWebExtensionTaskPaneCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorksheetCollectionClass = interface(DNObjectClass)
  ['{C4FDBFF1-AEA9-51AA-8926-C6B6651DB448}']
  end;

  ///<summary>
  ///  Encapsulates a collection of <see cref="T:Aspose.Cells.Worksheet" />
  ///  objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  WorksheetCollection sheets = workbook.Worksheets;
  ///  //Add a worksheet
  ///  sheets.Add();
  ///  //Change the name of a worksheet
  ///  sheets[0].Name = "First Sheet";
  ///  //Set the active sheet to the second worksheet
  ///  sheets.SetActiveSheet(1);
  ///  [Visual Basic]
  ///  Dim excel as Workbook = new Workbook()
  ///  Dim sheets as WorksheetCollection = excel.Worksheets
  ///  'Add a worksheet
  ///  sheets.Add()
  ///  'Change the name of a worksheet
  ///  sheets(0).Name = "First Sheet"
  ///  'Set the active sheet to the second worksheet
  ///  sheets.SetActiveSheet(1)
  ///</code></example>
  [DNTypeName('Aspose.Cells.WorksheetCollection')]
  DNWorksheetCollection = interface(DNObject)
  ['{D94541A9-CBC1-3103-9B3A-AEBD96D8E607}']
  { getters & setters } 

    function get_WebExtensionTaskPanes: DNWebExtensionTaskPaneCollection;
    function get_WebExtensions: DNWebExtensionCollection;
    function get_ThreadedCommentAuthors: DNThreadedCommentAuthorCollection;
    function get_IsRefreshAllConnections: Boolean;
    procedure set_IsRefreshAllConnections(value: Boolean);
    function get_Names: DNNameCollection;
    function get_Item(index: Int32): DNWorksheet; overload;
    function get_Item(sheetName: string): DNWorksheet; overload;
    function get_ActiveSheetIndex: Int32;
    procedure set_ActiveSheetIndex(value: Int32);
    function get_Dxfs: DNDxfCollection;
    function get_XmlMaps: DNXmlMapCollection;
    procedure set_XmlMaps(value: DNXmlMapCollection);
    function get_BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection;
    function get_CustomDocumentProperties: DNCustomDocumentPropertyCollection;
    function get_OleSize: DDN.mscorlib.DNObject;
    procedure set_OleSize(value: DDN.mscorlib.DNObject);
    function get_ExternalLinks: DNExternalLinkCollection;
    function get_TableStyles: DNTableStyleCollection;
    function get_RevisionLogs: DNRevisionLogCollection;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Sets displayed size when Workbook file is used as an Ole object.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endColumn">End column index.</param>
    ///<remarks>This method is generally used to adjust display size in ppt file or doc file.</remarks>
    procedure SetOleSize(startRow: Int32; endRow: Int32; startColumn: Int32; endColumn: Int32);
    ///<summary>
    ///  Clears pivot tables from the spreadsheet.
    ///</summary>
    procedure ClearPivottables;
    ///<summary>
    ///  Refreshes all the PivotTables in the WorksheetCollection.
    ///</summary>
    procedure RefreshPivotTables;
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.Range" />
    ///  object from an address of the range.
    ///</summary>
    ///  <param name="address">The address of the range.</param>
    ///  <param name="sheetIndex">The sheet index.</param>
    ///<returns>A <see cref="T:Aspose.Cells.Range" />
    ///  object</returns>
    function CreateRange(address: string; sheetIndex: Int32): DNRange;
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.Range" />
    ///  object from an address of the range.
    ///</summary>
    ///  <param name="address">The address of the range.</param>
    ///  <param name="sheetIndex">The sheet index.</param>
    ///<returns>A <see cref="T:Aspose.Cells.Range" />
    ///  object</returns>
    function CreateUnionRange(address: string; sheetIndex: Int32): DNUnionRange;
    ///<summary>
    ///  Gets the worksheet by the code name.
    ///</summary>
    ///  <param name="codeName">Worksheet code name.</param>
    ///<returns>The element with the specified code name.</returns>
    function GetSheetByCodeName(codeName: string): DNWorksheet;
    ///<summary>
    ///  Sorts the defined names.
    ///</summary>
    ///<remarks>If you create a large amount of named ranges in the Excel file,
    ///  please call this method after all named ranges are created and before saving </remarks>
    procedure SortNames;
    ///<summary>
    ///  Insert a worksheet.
    ///</summary>
    ///  <param name="index">The sheet index</param>
    ///  <param name="sheetType">The sheet type.</param>
    ///<returns>Returns an inserted worksheet.</returns>
    function Insert(index: Int32; sheetType: DNSheetType): DNWorksheet; overload;
    ///<summary>
    ///  Insert a worksheet.
    ///</summary>
    ///  <param name="index">The sheet index</param>
    ///  <param name="sheetType">The sheet type.</param>
    ///  <param name="sheetName">The sheet name.</param>
    ///<returns>Returns an inserted worksheet.</returns>
    function Insert(index: Int32; sheetType: DNSheetType; sheetName: string): DNWorksheet; overload;
    ///<summary>
    ///  Adds a worksheet to the collection.
    ///</summary>
    ///  <param name="type">Worksheet type.</param>
    ///<returns><see cref="T:Aspose.Cells.Worksheet" />
    ///  object index.</returns>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  workbook.Worksheets.Add(SheetType.Chart);
    ///  Cells cells = workbook.Worksheets[0].Cells;
    ///  cells["c2"].PutValue(5000);
    ///  cells["c3"].PutValue(3000);
    ///  cells["c4"].PutValue(4000);
    ///  cells["c5"].PutValue(5000);
    ///  cells["c6"].PutValue(6000);
    ///  Charts charts = workbook.Worksheets[1].Charts;
    ///  int chartIndex = charts.Add(ChartType.Column, 10,10,20,20);
    ///  Chart chart = charts[chartIndex];
    ///  chart.NSeries.Add("Sheet1!C2:C6", true);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  workbook.Worksheets.Add(SheetType.Chart)
    ///  Dim cells As Cells = workbook.Worksheets(0).Cells
    ///  cells("c2").PutValue(5000)
    ///  cells("c3").PutValue(3000)
    ///  cells("c4").PutValue(4000)
    ///  cells("c5").PutValue(5000)
    ///  cells("c6").PutValue(6000)
    ///  Dim charts As Charts = workbook.Worksheets(1).Charts
    ///  Dim chartIndex As Integer = charts.Add(ChartType.Column,10,10,20,20)
    ///  Dim chart As Chart = charts(chartIndex)
    ///  chart.NSeries.Add("Sheet1!C2:C6", True)
    ///</code></example>
    function Add(&type: DNSheetType): Int32; overload;
    ///<summary>
    ///  Swaps the two sheets.
    ///</summary>
    ///  <param name="sheetIndex1">The first worksheet.</param>
    ///  <param name="sheetIndex2">The second worksheet.</param>
    procedure SwapSheet(sheetIndex1: Int32; sheetIndex2: Int32);
    ///<summary>
    ///  Adds a worksheet to the collection.
    ///</summary>
    ///<returns><see cref="T:Aspose.Cells.Worksheet" />
    ///  object index.</returns>
    function Add: Int32; overload;
    ///<summary>
    ///  Adds a worksheet to the collection.
    ///</summary>
    ///  <param name="sheetName">Worksheet name</param>
    ///<returns><see cref="T:Aspose.Cells.Worksheet" />
    ///  object.</returns>
    function Add(sheetName: string): DNWorksheet; overload;
    ///<summary>
    ///  Adds addin function into the workbook
    ///</summary>
    ///  <param name="addInFile">the file contains the addin functions</param>
    ///  <param name="functionName">the addin function name</param>
    ///  <param name="lib">whether the given addin file is in the directory or sub-directory of Workbook Add-In library.
    ///  This flag takes effect and makes difference when given addInFile is of relative path:
    ///  true denotes the path is relative to Add-In library and false denotes the path is relative to this Workbook.</param>
    ///<returns>ID of the data which contains given addin function</returns>
    function RegisterAddInFunction(addInFile: string; functionName: string; lib: Boolean): Int32; overload;
    ///<summary>
    ///  Adds addin function into the workbook
    ///</summary>
    ///  <param name="id">ID of the data which contains addin functions,
    ///  can be got by the first call of <see cref="M:Aspose.Cells.WorksheetCollection.RegisterAddInFunction(System.String,System.String,System.Boolean)" />
    ///  for the same addin file.</param>
    ///  <param name="functionName">the addin function name</param>
    ///<returns>URL of the addin file which contains addin functions</returns>
    function RegisterAddInFunction(id: Int32; functionName: string): string; overload;
    ///<summary>
    ///  Removes the element at a specified name.
    ///</summary>
    ///  <param name="name">The name of the element to remove.</param>
    procedure RemoveAt(name: string); overload;
    ///<summary>
    ///  Removes the element at a specified index.
    ///</summary>
    ///  <param name="index">The index value of the element to remove.</param>
    procedure RemoveAt(index: Int32); overload;
    ///<summary>
    ///  Clear all worksheets.
    ///</summary>
    ///<remarks>
    ///  A workbook must contains a worksheet.
    ///</remarks>
    procedure Clear;
    ///<summary>
    ///  Adds a worksheet to the collection and copies data from an existed worksheet.
    ///</summary>
    ///  <param name="sheetName">Name of source worksheet.</param>
    ///<returns><see cref="T:Aspose.Cells.Worksheet" />
    ///  object index.</returns>
    ///<exception cref="T:Aspose.Cells.CellsException">Specifies an invalid worksheet name.</exception>
    function AddCopy(sheetName: string): Int32; overload;
    ///<summary>
    ///  Adds a worksheet to the collection and copies data from an existed worksheet.
    ///</summary>
    ///  <param name="sheetIndex">Index of source worksheet.</param>
    ///<returns><see cref="T:Aspose.Cells.Worksheet" />
    ///  object index.</returns>
    function AddCopy(sheetIndex: Int32): Int32; overload;
    ///<summary>
    ///  Gets Range object by pre-defined name.
    ///</summary>
    ///  <param name="rangeName">Name of range.</param>
    ///<returns>Range object.<p></p>
    ///  Returns null if the named range does not exist.</returns>
    function GetRangeByName(rangeName: string): DNRange;
    ///<summary>
    ///  Gets all pre-defined named ranges in the spreadsheet.
    ///</summary>
    ///<returns>An array of Range objects.
    ///  If the defined Name's reference is external or has multiple ranges, no Range object will be returned for this Name.
    ///  <p></p>
    ///  Returns null if the named range does not exist.</returns>
    function GetNamedRanges: TArray<DNRange>;
    ///<summary>
    ///  Gets all pre-defined named ranges in the spreadsheet.
    ///</summary>
    ///<returns>An array of Range objects.<p></p>
    ///  Returns null if the named range does not exist.</returns>
    function GetNamedRangesAndTables: TArray<DNRange>;
    function BinarySearch(item: DNWorksheet): Int32; overload;
    function BinarySearch(item: DNWorksheet; comparer: DDN.mscorlib.DNIComparer<DNWorksheet>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWorksheet; comparer: DDN.mscorlib.DNIComparer<DNWorksheet>): Int32; overload;
    function &Contains(item: DNWorksheet): Boolean;
    procedure CopyTo(&array: TArray<DNWorksheet>); overload;
    procedure CopyTo(&array: TArray<DNWorksheet>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWorksheet>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWorksheet>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWorksheet>): DNWorksheet;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWorksheet>): DDN.mscorlib.DNList<DNWorksheet>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWorksheet>): DNWorksheet;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function IndexOf(item: DNWorksheet): Int32; overload;
    function IndexOf(item: DNWorksheet; index: Int32): Int32; overload;
    function IndexOf(item: DNWorksheet; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWorksheet): Int32; overload;
    function LastIndexOf(item: DNWorksheet; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWorksheet; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWorksheet>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the list of task panes.
    ///</summary>
    property WebExtensionTaskPanes: DNWebExtensionTaskPaneCollection read get_WebExtensionTaskPanes;
    ///<summary>
    ///  Gets the list of task panes.
    ///</summary>
    property WebExtensions: DNWebExtensionCollection read get_WebExtensions;
    ///<summary>
    ///  Gets the list of threaded comment authors.
    ///</summary>
    property ThreadedCommentAuthors: DNThreadedCommentAuthorCollection read get_ThreadedCommentAuthors;
    ///<summary>
    ///  Indicates whether refresh all connections on opening file in MS Excel.
    ///</summary>
    property IsRefreshAllConnections: Boolean read get_IsRefreshAllConnections write set_IsRefreshAllConnections;
    ///<summary>
    ///  Gets the collection of all the Name objects in the spreadsheet.
    ///</summary>
    property Names: DNNameCollection read get_Names;
    property Item[index: Int32]: DNWorksheet read get_Item; default;
    property Item[sheetName: string]: DNWorksheet read get_Item; default;
    ///<summary>
    ///  Represents the index of active worksheet when the spreadsheet is opened.
    ///</summary>
    ///<remarks>Sheet index is zero based.</remarks>
    property ActiveSheetIndex: Int32 read get_ActiveSheetIndex write set_ActiveSheetIndex;
    ///<summary>
    ///  Gets the master differential formatting records.
    ///</summary>
    property Dxfs: DNDxfCollection read get_Dxfs;
    ///<summary>
    ///  Gets and sets the XML maps in the workbook.
    ///</summary>
    property XmlMaps: DNXmlMapCollection read get_XmlMaps write set_XmlMaps;
    ///<summary>
    ///  Returns a DocumentProperties collection that represents all the built-in document properties of the spreadsheet.
    ///</summary>
    ///<remarks>A new property cannot be added to built-in document properties list. You can only get a built-in property and change its value.
    ///  The following is the built-in properties name list:
    ///  <p>Title</p>
    ///  <p>Subject</p>
    ///  <p>Author</p>
    ///  <p>Keywords</p>
    ///  <p>Comments</p>
    ///  <p>Template</p>
    ///  <p>Last Author</p>
    ///  <p>Revision Number</p>
    ///  <p>Application Name</p>
    ///  <p>Last Print Date</p>
    ///  <p>Creation Date</p>
    ///  <p>Last Save Time</p>
    ///  <p>Total Editing Time</p>
    ///  <p>Number of Pages</p>
    ///  <p>Number of Words</p>
    ///  <p>Number of Characters</p>
    ///  <p>Security</p>
    ///  <p>Category</p>
    ///  <p>Format</p>
    ///  <p>Manager</p>
    ///  <p>Company</p>
    ///  <p>Number of Bytes</p>
    ///  <p>Number of Lines</p>
    ///  <p>Number of Paragraphs</p>
    ///  <p>Number of Slides</p>
    ///  <p>Number of Notes</p>
    ///  <p>Number of Hidden Slides</p>
    ///  <p>Number of Multimedia Clips</p>
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  DocumentProperty doc = workbook.Worksheets.BuiltInDocumentProperties["Author"];
    ///  doc.Value = "John Smith";
    ///  [Visual Basic]
    ///  Dim doc as DocumentProperty = workbook.Worksheets.BuiltInDocumentProperties("Author")
    ///  doc.Value = "John Smith"
    ///</code></example>
    property BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection read get_BuiltInDocumentProperties;
    ///<summary>
    ///  Returns a DocumentProperties collection that represents all the custom document properties of the spreadsheet.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  excel.Worksheets.CustomDocumentProperties.Add("Checked by", "Jane");
    ///  [Visual Basic]
    ///  excel.Worksheets.CustomDocumentProperties.Add("Checked by", "Jane")
    ///</code></example>
    property CustomDocumentProperties: DNCustomDocumentPropertyCollection read get_CustomDocumentProperties;
    ///<summary>
    ///  Gets and Sets displayed size when Workbook file is used as an Ole object.
    ///</summary>
    ///<remarks>
    ///  Null means no ole size setting.
    ///</remarks>
    property OleSize: DDN.mscorlib.DNObject read get_OleSize write set_OleSize;
    ///<summary>
    ///  Represents external links in a workbook.
    ///</summary>
    property ExternalLinks: DNExternalLinkCollection read get_ExternalLinks;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.WorksheetCollection.TableStyles" />
    ///  object.
    ///</summary>
    property TableStyles: DNTableStyleCollection read get_TableStyles;
    ///<summary>
    ///  Represents revision logs.
    ///</summary>
    property RevisionLogs: DNRevisionLogCollection read get_RevisionLogs;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWorksheetCollection = class(TDNGenericImport<DNWorksheetCollectionClass, DNWorksheetCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlMapCollectionClass = interface(DNObjectClass)
  ['{DF8AD2C2-92AC-5624-93A3-0EC66320C0EF}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Cells.XmlMap" />
  ///  objects that represent XmlMap information.
  ///</summary>
  [DNTypeName('Aspose.Cells.XmlMapCollection')]
  DNXmlMapCollection = interface(DNObject)
  ['{2681C691-F2F5-3F17-A068-B9E4C77E7A3E}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlMap;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Add a <see cref="T:Aspose.Cells.XmlMap" />
    ///  by the url/path of a xml/xsd file.
    ///</summary>
    ///  <param name="url">url/path of a xml/xsd file.</param>
    ///<returns><see cref="T:Aspose.Cells.XmlMap" />
    ///  object index.</returns>
    function Add(url: string): Int32;
    ///<summary>
    ///  Removes all XmlMaps.
    ///</summary>
    procedure Clear;
    function BinarySearch(item: DNXmlMap): Int32; overload;
    function BinarySearch(item: DNXmlMap; comparer: DDN.mscorlib.DNIComparer<DNXmlMap>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNXmlMap; comparer: DDN.mscorlib.DNIComparer<DNXmlMap>): Int32; overload;
    function &Contains(item: DNXmlMap): Boolean;
    procedure CopyTo(&array: TArray<DNXmlMap>); overload;
    procedure CopyTo(&array: TArray<DNXmlMap>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNXmlMap>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNXmlMap>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNXmlMap>): DNXmlMap;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNXmlMap>): DDN.mscorlib.DNList<DNXmlMap>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNXmlMap>): DNXmlMap;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function IndexOf(item: DNXmlMap): Int32; overload;
    function IndexOf(item: DNXmlMap; index: Int32): Int32; overload;
    function IndexOf(item: DNXmlMap; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNXmlMap): Int32; overload;
    function LastIndexOf(item: DNXmlMap; index: Int32): Int32; overload;
    function LastIndexOf(item: DNXmlMap; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNXmlMap>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlMap read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlMapCollection = class(TDNGenericImport<DNXmlMapCollectionClass, DNXmlMapCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCollectionBaseClass<T> = interface(DNObjectClass)
  ['{FFAB760B-9B78-54F5-8DD0-632BAEB0634E}']
  end;

  ///<summary>
  ///  Provides the abstract base class for a strongly typed collection.
  ///</summary>
  [DNTypeName('Aspose.Cells.CollectionBase`1')]
  DNCollectionBase<T> = interface(DDN.mscorlib.DNIList<T>)
  ['{ECF5F922-C21D-38BB-93B9-9ECFE3D6B44C}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDN.mscorlib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDN.mscorlib.DNIComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<T>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<T>): T;
    function FindAll(match: DDN.mscorlib.DNPredicate<T>): DDN.mscorlib.DNList<T>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<T>): T;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; index: Int32): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    ///<summary></summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    ///<summary>
    ///  Removes the element at the specified index.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the number of elements that the list can contain.
    ///</summary>
    property Capacity: Int32 read get_Capacity write set_Capacity;
    ///<summary>
    ///  Gets the number of elements.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNCollectionBase<T> = class(TDNGenericImport<DNCollectionBaseClass<T>, DNCollectionBase<T>>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColorFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E088387-A0B9-5D21-8554-815D13B9A85A}']
  end;

  ///<summary>
  ///  Represents the color filter.
  ///</summary>
  [DNTypeName('Aspose.Cells.ColorFilter')]
  DNColorFilter = interface(DDN.mscorlib.DNObject)
  ['{05213502-2DB5-3219-8F1E-EF5971EBB70A}']
  { getters & setters } 

    function get_FilterByFillColor: Boolean;
    procedure set_FilterByFillColor(value: Boolean);

  { methods } 

    ///<summary></summary>
    ///  <param name="sheets"></param>
    ///<returns></returns>
    function GetColor(sheets: DNWorksheetCollection): DDN.System.Drawing.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Flag indicating whether or not to filter by the cell's fill color.
    ///</summary>
    property FilterByFillColor: Boolean read get_FilterByFillColor write set_FilterByFillColor;
  end;

  TDNColorFilter = class(TDNGenericImport<DNColorFilterClass, DNColorFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColorScaleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A09DFC48-6EE8-568E-BECC-CD435CCD1B40}']
  end;

  ///<summary>
  ///  Describe the ColorScale conditional formatting rule.
  ///  This conditional formatting rule creates a gradated color scale on the cells.
  ///</summary>
  [DNTypeName('Aspose.Cells.ColorScale')]
  DNColorScale = interface(DDN.mscorlib.DNObject)
  ['{48FB4922-97E1-3A80-906E-9060C72B34BA}']
  { getters & setters } 

    function get_Is3ColorScale: Boolean;
    procedure set_Is3ColorScale(value: Boolean);
    function get_MinCfvo: DNConditionalFormattingValue;
    function get_MidCfvo: DNConditionalFormattingValue;
    function get_MaxCfvo: DNConditionalFormattingValue;
    function get_MinColor: DDN.System.Drawing.DNColor;
    procedure set_MinColor(value: DDN.System.Drawing.DNColor);
    function get_MidColor: DDN.System.Drawing.DNColor;
    procedure set_MidColor(value: DDN.System.Drawing.DNColor);
    function get_MaxColor: DDN.System.Drawing.DNColor;
    procedure set_MaxColor(value: DDN.System.Drawing.DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether conditional formatting is 3 color scale.
    ///</summary>
    property Is3ColorScale: Boolean read get_Is3ColorScale write set_Is3ColorScale;
    ///<summary>
    ///  Get or set this ColorScale's min value object.
    ///  Cannot set null or CFValueObject with type FormatConditionValueType.Max to it.
    ///</summary>
    property MinCfvo: DNConditionalFormattingValue read get_MinCfvo;
    ///<summary>
    ///  Get or set this ColorScale's mid value object.
    ///  Cannot set CFValueObject with type FormatConditionValueType.Max or FormatConditionValueType.Min to it.
    ///</summary>
    property MidCfvo: DNConditionalFormattingValue read get_MidCfvo;
    ///<summary>
    ///  Get or set this ColorScale's max value object.
    ///  Cannot set null or CFValueObject with type FormatConditionValueType.Min to it.
    ///</summary>
    property MaxCfvo: DNConditionalFormattingValue read get_MaxCfvo;
    ///<summary>
    ///  Get or set the min value object's corresponding color.
    ///</summary>
    property MinColor: DDN.System.Drawing.DNColor read get_MinColor write set_MinColor;
    ///<summary>
    ///  Get or set the mid value object's corresponding color.
    ///</summary>
    property MidColor: DDN.System.Drawing.DNColor read get_MidColor write set_MidColor;
    ///<summary>
    ///  Get or set the max value object's corresponding color.
    ///</summary>
    property MaxColor: DDN.System.Drawing.DNColor read get_MaxColor write set_MaxColor;
  end;

  TDNColorScale = class(TDNGenericImport<DNColorScaleClass, DNColorScale>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A743F3B6-34AF-5CA0-926A-4137C225B56E}']
  end;

  ///<summary>
  ///  Represents a single column in a worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  Style style = workbook.CreateStyle();
  ///  //Setting the background color to Blue
  ///  style.BackgroundColor = Color.Blue;
  ///  //Setting the foreground color to Red
  ///  style.ForegroundColor= Color.Red;
  ///  //setting Background Pattern
  ///  style.Pattern = BackgroundType.DiagonalStripe;
  ///  //New Style Flag
  ///  StyleFlag styleFlag = new StyleFlag();
  ///  //Set All Styles
  ///  styleFlag.All = true;
  ///  //Get first Column
  ///  Column column = worksheet.Cells.Columns[0];
  ///  //Apply Style to first Column
  ///  column.ApplyStyle(style, styleFlag);
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  Dim style As Style = workbook.CreateStyle()
  ///  'Setting the background color to Blue
  ///  style.BackgroundColor = Color.Blue
  ///  'Setting the foreground color to Red
  ///  style.ForegroundColor = Color.Red
  ///  'setting Background Pattern
  ///  style.Pattern = BackgroundType.DiagonalStripe
  ///  'New Style Flag
  ///  Dim styleFlag As New StyleFlag()
  ///  'Set All Styles
  ///  styleFlag.All = True
  ///  'Get first Column
  ///  Dim column As Column = worksheet.Cells.Columns(0)
  ///  'Apply Style to first Column
  ///  column.ApplyStyle(style, styleFlag)
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Column')]
  DNColumn = interface(DDN.mscorlib.DNObject)
  ['{1361795C-2D86-3573-A10E-2720A130CADD}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_GroupLevel: Byte;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_Style: DNStyle;

  { methods } 

    ///<summary>
    ///  Applies formats for a whole column.
    ///</summary>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the index of this column.
    ///</summary>
    property Index: Int32 read get_Index;
    ///<summary>
    ///  Gets and sets the column width in unit of characters.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets the group level of the column.
    ///</summary>
    property GroupLevel: Byte read get_GroupLevel;
    ///<summary>
    ///  Indicates whether the column is hidden.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  Gets the style of this column.
    ///</summary>
    ///<remarks>
    ///  You have to call Column.ApplyStyle() method to save your changing with the row style,
    ///  otherwise it will not effect.
    ///</remarks>
    property Style: DNStyle read get_Style;
  end;

  TDNColumn = class(TDNGenericImport<DNColumnClass, DNColumn>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCommentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D675DF6-DC7A-5E0A-A43F-664F69D27861}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a cell comment.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  CommentCollection comments = workbook.Worksheets[0].Comments;
  ///  //Add comment to cell A1
  ///  int commentIndex = comments.Add(0, 0);
  ///  Comment comment = comments[commentIndex];
  ///  comment.Note = "First note.";
  ///  comment.Font.Name = "Times New Roman";
  ///  //Add comment to cell B2
  ///  comments.Add("B2");
  ///  comment = comments["B2"];
  ///  comment.Note = "Second note.";
  ///  [Visual Basic]
  ///  Dim workbook as Workbook = new Workbook()
  ///  Dim comments as CommentCollection = workbook.Worksheets(0).Comments
  ///  'Add comment to cell A1
  ///  Dim commentIndex as Integer = comments.Add(0, 0)
  ///  Dim comment as Comment = comments(commentIndex)
  ///  comment.Note = "First note."
  ///  comment.Font.Name = "Times New Roman"
  ///  'Add comment to cell B2
  ///  comments.Add("B2")
  ///  comment = comments("B2")
  ///  comment.Note = "Second note."
  ///</code></example>
  [DNTypeName('Aspose.Cells.Comment')]
  DNComment = interface(DDN.mscorlib.DNObject)
  ['{80D67FA3-C600-3F85-B758-AD40008F6CAF}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_CommentShape: DNCommentShape;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_ThreadedComments: DNThreadedCommentCollection;
    function get_Note: string;
    procedure set_Note(value: string);
    function get_HtmlNote: string;
    procedure set_HtmlNote(value: string);
    function get_Font: DNFont;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_AutoSize: Boolean;
    procedure set_AutoSize(value: Boolean);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);

  { methods } 

    ///<summary>
    ///  Format some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag);
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the comment text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the comment text.
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets Name of the original comment author
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Get a Shape object that represents the shape attached to the specified comment.
    ///</summary>
    property CommentShape: DNCommentShape read get_CommentShape;
    ///<summary>
    ///  Gets the row index of the comment.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets the column index of the comment.
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Gets the list of threaded comments;
    ///</summary>
    property ThreadedComments: DNThreadedCommentCollection read get_ThreadedComments;
    ///<summary>
    ///  Represents the content of comment.
    ///</summary>
    property Note: string read get_Note write set_Note;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this comment.
    ///</summary>
    property HtmlNote: string read get_HtmlNote write set_HtmlNote;
    ///<summary>
    ///  Gets the font of comment.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents if the comment is visible or not.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Gets and sets the text orientation type of the comment.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the comment.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the comment.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Indicates if size of comment is adjusted automatically according to its content.
    ///</summary>
    property AutoSize: Boolean read get_AutoSize write set_AutoSize;
    ///<summary>
    ///  Represents the height of the comment, in unit of centimeters.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the width of the comment, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the width of the comment, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the Height of the comment, in unit of pixels.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the width of the comment, in unit of inches.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the height of the comment, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
  end;

  TDNComment = class(TDNGenericImport<DNCommentClass, DNComment>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingIconClass = interface(DDN.mscorlib.DNObjectClass)
  ['{360273C5-EB0A-55D3-8FB5-B3D5C8D1A4C9}']
  { static methods } 

    ///<summary>
    ///  Get the icon set data
    ///</summary>
    ///  <param name="type">icon's type</param>
    ///  <param name="index"> icon's index</param>
    ///<returns></returns>
    {class} function GetIconImageData(&type: DNIconSetType; index: Int32): TArray<Byte>;

  end;

  ///<summary>
  ///  Represents  the custom  icon of conditional formatting rule.
  ///</summary>
  [DNTypeName('Aspose.Cells.ConditionalFormattingIcon')]
  DNConditionalFormattingIcon = interface(DDN.mscorlib.DNObject)
  ['{5E302DAD-9848-3C63-9727-98D28A1406D8}']
  { getters & setters } 

    function get_ImageData: TArray<Byte>;
    function get_Type: DNIconSetType;
    procedure set_Type(value: DNIconSetType);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the icon set data.
    ///</summary>
    property ImageData: TArray<Byte> read get_ImageData;
    ///<summary>
    ///  Gets and sets the icon set type.
    ///</summary>
    property &Type: DNIconSetType read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets the icon's index in the icon set.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNConditionalFormattingIcon = class(TDNGenericImport<DNConditionalFormattingIconClass, DNConditionalFormattingIcon>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47441B7E-5E81-5080-8F2A-08937DFC91FB}']
  end;

  ///<summary>
  ///  Represents the result of conditional formatting which applies to a cell.
  ///</summary>
  [DNTypeName('Aspose.Cells.ConditionalFormattingResult')]
  DNConditionalFormattingResult = interface(DDN.mscorlib.DNObject)
  ['{07DC9EF0-A15B-37C6-9CAE-1C6CC3E4ACCE}']
  { getters & setters } 

    function get_ConditionalStyle: DNStyle;
    function get_ConditionalFormattingIcon: DNConditionalFormattingIcon;
    function get_ConditionalFormattingDataBar: DNDataBar;
    function get_ConditionalFormattingColorScale: DNColorScale;
    function get_ColorScaleResult: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the conditional result style.
    ///</summary>
    property ConditionalStyle: DNStyle read get_ConditionalStyle;
    ///<summary>
    ///  Gets the image of icon set.
    ///</summary>
    property ConditionalFormattingIcon: DNConditionalFormattingIcon read get_ConditionalFormattingIcon;
    ///<summary>
    ///  Gets the DataBar object.
    ///</summary>
    property ConditionalFormattingDataBar: DNDataBar read get_ConditionalFormattingDataBar;
    ///<summary>
    ///  Gets the ColorScale object.
    ///</summary>
    property ConditionalFormattingColorScale: DNColorScale read get_ConditionalFormattingColorScale;
    ///<summary>
    ///  Gets the display color of color scale.
    ///</summary>
    property ColorScaleResult: DDN.System.Drawing.DNColor read get_ColorScaleResult;
  end;

  TDNConditionalFormattingResult = class(TDNGenericImport<DNConditionalFormattingResultClass, DNConditionalFormattingResult>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D795619F-2BF7-5E23-AD61-B6140B20B366}']
  end;

  ///<summary>
  ///  Describes the values of the interpolation points in a gradient scale, dataBar or iconSet.
  ///</summary>
  [DNTypeName('Aspose.Cells.ConditionalFormattingValue')]
  DNConditionalFormattingValue = interface(DDN.mscorlib.DNObject)
  ['{0156C8EB-0973-3491-B10D-C40E77376FE1}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Type: DNFormatConditionValueType;
    procedure set_Type(value: DNFormatConditionValueType);
    function get_IsGTE: Boolean;
    procedure set_IsGTE(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get or set the value of this conditional formatting value object.
    ///  It should be used in conjunction with Type.
    ///</summary>
    ///<remarks>
    ///  If the value is string and start with "=", it will be processed as a formula,
    ///  otherwise we will process it as a simple value.
    ///</remarks>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Get or set the type of this conditional formatting value object.
    ///  Setting the type to FormatConditionValueType.Min or FormatConditionValueType.Max
    ///  will auto set "Value" to null.
    ///</summary>
    property &Type: DNFormatConditionValueType read get_Type write set_Type;
    ///<summary>
    ///  Get or set the Greater Than Or Equal flag.
    ///  Use only for icon sets, determines whether this threshold value uses
    ///  the greater than or equal to operator.
    ///  'false' indicates 'greater than' is used instead of 'greater than or equal to'.
    ///  Default value is true.
    ///</summary>
    property IsGTE: Boolean read get_IsGTE write set_IsGTE;
  end;

  TDNConditionalFormattingValue = class(TDNGenericImport<DNConditionalFormattingValueClass, DNConditionalFormattingValue>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCopyOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA21183F-AD15-5FDF-B9D7-0560D0672EF3}']
  { constructors } 

    ///<summary>
    ///  CopyOptions constructor.
    ///</summary>
    {class} function init: DNCopyOptions;

  end;

  ///<summary>
  ///  Represents the copy options.
  ///</summary>
  [DNTypeName('Aspose.Cells.CopyOptions')]
  DNCopyOptions = interface(DDN.mscorlib.DNObject)
  ['{AC2C90DB-4354-3871-8BD9-7A8376B93522}']
  { getters & setters } 

    function get_KeepMacros: Boolean;
    procedure set_KeepMacros(value: Boolean);
    function get_ExtendToAdjacentRange: Boolean;
    procedure set_ExtendToAdjacentRange(value: Boolean);
    function get_CopyNames: Boolean;
    procedure set_CopyNames(value: Boolean);
    function get_CopyInvalidFormulasAsValues: Boolean;
    procedure set_CopyInvalidFormulasAsValues(value: Boolean);
    function get_ColumnCharacterWidth: Boolean;
    procedure set_ColumnCharacterWidth(value: Boolean);
    function get_ReferToSheetWithSameName: Boolean;
    procedure set_ReferToSheetWithSameName(value: Boolean);
    function get_ReferToDestinationSheet: Boolean;
    procedure set_ReferToDestinationSheet(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether keeping macros;
    ///</summary>
    ///<remarks>
    ///  Only for copying workbook.
    ///</remarks>
    property KeepMacros: Boolean read get_KeepMacros write set_KeepMacros;
    ///<summary>
    ///  Indicates whether extend ranges when copying the range to adjacent range.
    ///</summary>
    ///<remarks>
    ///  If it's true, only extends the range of the hyperlink,not adding a new hyperlink when copying hyperlinks to adjacent rows.
    ///</remarks>
    property ExtendToAdjacentRange: Boolean read get_ExtendToAdjacentRange write set_ExtendToAdjacentRange;
    ///<summary>
    ///  Indicates whether copying the names.
    ///</summary>
    property CopyNames: Boolean read get_CopyNames write set_CopyNames;
    ///<summary>
    ///  If the formula is not valid for the dest destination, only copy values.
    ///</summary>
    property CopyInvalidFormulasAsValues: Boolean read get_CopyInvalidFormulasAsValues write set_CopyInvalidFormulasAsValues;
    ///<summary>
    ///  Indicates whether copying column width in unit of characters.
    ///</summary>
    property ColumnCharacterWidth: Boolean read get_ColumnCharacterWidth write set_ColumnCharacterWidth;
    ///<summary>
    ///  When copying a worksheet to another workbook and the worksheet contains the formulas which refer to other worksheets in MS Excel,
    ///  the copied formulas should refer to source workbook.
    ///  But sometimes we have copied other worksheets and we hope the copied formulas refer to other worksheets with the name in the same workbook,
    ///  please set this property as true.
    ///</summary>
    ///<remarks>
    ///  The default value is true.
    ///</remarks>
    property ReferToSheetWithSameName: Boolean read get_ReferToSheetWithSameName write set_ReferToSheetWithSameName;
    ///<summary>
    ///  When copying the range in the same file and the chart refers to the source sheet,
    ///  False means the copied chart's data source will not be changed.
    ///  True means the copied chart's data source refers to the destination sheet.
    ///</summary>
    ///<remarks>
    ///  The default value is false, it works as MS Excel.
    ///</remarks>
    property ReferToDestinationSheet: Boolean read get_ReferToDestinationSheet write set_ReferToDestinationSheet;
  end;

  TDNCopyOptions = class(TDNGenericImport<DNCopyOptionsClass, DNCopyOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCustomFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DF1BB80F-F08D-5E05-9BB8-70AA9F025714}']
  end;

  ///<summary>
  ///  Represents the custom filter.
  ///</summary>
  [DNTypeName('Aspose.Cells.CustomFilter')]
  DNCustomFilter = interface(DDN.mscorlib.DNObject)
  ['{E4937B3B-AD43-3D8D-9C1E-8E91C9F29E30}']
  { getters & setters } 

    function get_FilterOperatorType: DNFilterOperatorType;
    procedure set_FilterOperatorType(value: DNFilterOperatorType);
    function get_Criteria: DDN.mscorlib.DNObject;
    procedure set_Criteria(value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  Sets the filter criteria.
    ///</summary>
    ///  <param name="filterOperator">filter operator type</param>
    ///  <param name="criteria">filter criteria value</param>
    procedure SetCriteria(filterOperator: DNFilterOperatorType; criteria: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the filter operator type.
    ///</summary>
    property FilterOperatorType: DNFilterOperatorType read get_FilterOperatorType write set_FilterOperatorType;
    ///<summary>
    ///  Gets and sets the criteria.
    ///</summary>
    property Criteria: DDN.mscorlib.DNObject read get_Criteria write set_Criteria;
  end;

  TDNCustomFilter = class(TDNGenericImport<DNCustomFilterClass, DNCustomFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCustomImplementationFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8ED0726C-58D2-5E08-A28D-5CCA95BEA723}']
  { constructors } 

    {class} function init: DNCustomImplementationFactory;

  end;

  ///<summary>
  ///  Factory to create some instances which may be re-implemented by user for special purpose.
  ///</summary>
  [DNTypeName('Aspose.Cells.CustomImplementationFactory')]
  DNCustomImplementationFactory = interface(DDN.mscorlib.DNObject)
  ['{EFA5C7D7-4B75-357F-B2F3-6842865E10A2}']
  { methods } 

    ///<summary>
    ///  Create one instance of MemoryStream or custom implementation of MemoryStream.
    ///</summary>
    ///<returns>The MemoryStream instance.</returns>
    function CreateMemoryStream: DDN.mscorlib.DNMemoryStream; overload;
    ///<summary>
    ///  Create one instance of MemoryStream or custom implementation of MemoryStream.
    ///</summary>
    ///  <param name="capacity">Initial capacity for the MemoryStream</param>
    ///<returns>The MemoryStream instance.</returns>
    function CreateMemoryStream(capacity: Int32): DDN.mscorlib.DNMemoryStream; overload;
    ///<summary>
    ///  Create one CultureInfo by given id.
    ///</summary>
    ///  <param name="lcid"></param>
    ///<returns>The CultureInfo instance.</returns>
    ///<remarks>This implementation is useful for situations:
    ///  1. Some cultures may not be supported by user's environment and creating the required CultureInfo with given identifier may cause Exception.
    ///  To avoid the exception, user may override this method to provide a valid CultureInfo instance for the unsupported one.
    ///  2. User may want to specify some custom properties for some cultures to get expected result for formatting.
    ///  For this purpose user may override this method to provide the CultureInfo instance with user specified properties.
    ///  Please note UseUserOverride property of the returned CultureInfo instance may influence the formatted result.
    ///  If it is false, some properties of the returned CultureInfo instance may be overridden by our built-in
    ///  formatting engine according to the formatting requirements of different scenarios.
    ///  If it is true, we will not change any properties of it and use it to format values directly.
    ///  So, if user has specified custom properties for the returned CultureInfo instance, please make sure its UseUserOverride is true.
    ///</remarks>
    function CreateCultureInfo(lcid: Int32): DDN.mscorlib.DNCultureInfo;
    ///<summary>
    ///  Create one instance of random number generator.
    ///</summary>
    ///<returns>instance of random number generator</returns>
    function CreateRandomInstance: DDN.mscorlib.DNRandom;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCustomImplementationFactory = class(TDNGenericImport<DNCustomImplementationFactoryClass, DNCustomImplementationFactory>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataBarClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AD72698-93FF-5268-A78A-C6BA8DAF8CA1}']
  end;

  ///<summary>
  ///  Describe the DataBar conditional formatting rule.
  ///  This conditional formatting rule displays a gradated
  ///  data bar in the range of cells.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Adds an empty conditional formatting
  ///  int index = sheet.ConditionalFormattings.Add();
  ///  FormatConditions fcs = sheet.ConditionalFormattings[index];
  ///  //Sets the conditional format range.
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 2;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  fcs.AddArea(ca);
  ///  //Adds condition.
  ///  int idx = fcs.AddCondtion(FormatConditionType.DataBar);
  ///  fcs.AddArea(ca);
  ///  FormatCondition cond = fcs[idx];
  ///  //Get Databar
  ///  DataBar dataBar = cond.DataBar;
  ///  dataBar.Color = Color.Orange;
  ///  //Set Databar properties
  ///  dataBar.MinCfvo.Type = FormatConditionValueType.Percentile;
  ///  dataBar.MinCfvo.Value = 30;
  ///  dataBar.ShowValue = false;
  ///  dataBar.BarBorder.Type = DataBarBorderType.DataBarBorderSolid;
  ///  dataBar.BarBorder.Color = Color.Plum;
  ///  dataBar.BarFillType = DataBarFillType.DataBarFillSolid;
  ///  dataBar.AxisColor = Color.Red;
  ///  dataBar.AxisPosition = DataBarAxisPosition.DataBarAxisMidpoint;
  ///  dataBar.NegativeBarFormat.ColorType = DataBarNegativeColorType.DataBarColor;
  ///  dataBar.NegativeBarFormat.Color = Color.White;
  ///  dataBar.NegativeBarFormat.BorderColorType = DataBarNegativeColorType.DataBarColor;
  ///  dataBar.NegativeBarFormat.BorderColor = Color.Yellow;
  ///  //Put Cell Values
  ///  Aspose.Cells.Cell cell1 = sheet.Cells["A1"];
  ///  cell1.PutValue(10);
  ///  Aspose.Cells.Cell cell2 = sheet.Cells["A2"];
  ///  cell2.PutValue(120);
  ///  Aspose.Cells.Cell cell3 = sheet.Cells["A3"];
  ///  cell3.PutValue(260);
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xlsx");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Adds an empty conditional formatting
  ///  Dim index As Integer = sheet.ConditionalFormattings.Add()
  ///  Dim fcs As FormatConditions = sheet.ConditionalFormattings(index)
  ///  'Sets the conditional format range.
  ///  Dim ca As New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 2
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///  fcs.AddArea(ca)
  ///  'Adds condition.
  ///  Dim idx As Integer = fcs.AddCondtion(FormatConditionType.DataBar)
  ///  fcs.AddArea(ca)
  ///  Dim cond As FormatCondition = fcs(idx)
  ///  'Get Databar
  ///  Dim dataBar As DataBar = cond.DataBar
  ///  dataBar.Color = Color.Orange
  ///  'Set Databar properties
  ///  dataBar.MinCfvo.Type = FormatConditionValueType.Percentile
  ///  dataBar.MinCfvo.Value = 30
  ///  dataBar.ShowValue = False
  ///  dataBar.BarBorder.Type = DataBarBorderType.DataBarBorderSolid
  ///  dataBar.BarBorder.Color = Color.Plum
  ///  dataBar.BarFillType = DataBarFillType.DataBarFillSolid
  ///  dataBar.AxisColor = Color.Red
  ///  dataBar.AxisPosition = DataBarAxisPosition.DataBarAxisMidpoint
  ///  dataBar.NegativeBarFormat.ColorType = DataBarNegativeColorType.DataBarColor
  ///  dataBar.NegativeBarFormat.Color = Color.White
  ///  dataBar.NegativeBarFormat.BorderColorType = DataBarNegativeColorType.DataBarColor
  ///  dataBar.NegativeBarFormat.BorderColor = Color.Yellow
  ///  'Put Cell Values
  ///  Dim cell1 As Aspose.Cells.Cell = sheet.Cells("A1")
  ///  cell1.PutValue(10)
  ///  Dim cell2 As Aspose.Cells.Cell = sheet.Cells("A2")
  ///  cell2.PutValue(120)
  ///  Dim cell3 As Aspose.Cells.Cell = sheet.Cells("A3")
  ///  cell3.PutValue(260)
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xlsx")
  ///</code></example>
  [DNTypeName('Aspose.Cells.DataBar')]
  DNDataBar = interface(DDN.mscorlib.DNObject)
  ['{4FF91B7F-51C6-369A-BBBD-940DE12BD4C4}']
  { getters & setters } 

    function get_AxisColor: DDN.System.Drawing.DNColor;
    procedure set_AxisColor(value: DDN.System.Drawing.DNColor);
    function get_AxisPosition: DNDataBarAxisPosition;
    procedure set_AxisPosition(value: DNDataBarAxisPosition);
    function get_BarFillType: DNDataBarFillType;
    procedure set_BarFillType(value: DNDataBarFillType);
    function get_Direction: DNTextDirectionType;
    procedure set_Direction(value: DNTextDirectionType);
    function get_BarBorder: DNDataBarBorder;
    function get_NegativeBarFormat: DNNegativeBarFormat;
    function get_MinCfvo: DNConditionalFormattingValue;
    function get_MaxCfvo: DNConditionalFormattingValue;
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_MinLength: Int32;
    procedure set_MinLength(value: Int32);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);

  { methods } 

    ///<summary>
    ///  Render data bar in cell to image byte array.
    ///</summary>
    ///  <param name="cell">Indicate the data bar in which cell to be rendered</param>
    ///  <param name="imgOpts">ImageOrPrintOptions contains some property of output image</param>
    ///<returns></returns>
    function ToImage(cell: DNCell; imgOpts: DNImageOrPrintOptions): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the color of the axis for cells with conditional formatting as data bars.
    ///</summary>
    property AxisColor: DDN.System.Drawing.DNColor read get_AxisColor write set_AxisColor;
    ///<summary>
    ///  Gets or sets the position of the axis of the data bars specified by a conditional formatting rule.
    ///</summary>
    property AxisPosition: DNDataBarAxisPosition read get_AxisPosition write set_AxisPosition;
    ///<summary>
    ///  Gets or sets how a data bar is filled with color.
    ///</summary>
    property BarFillType: DNDataBarFillType read get_BarFillType write set_BarFillType;
    ///<summary>
    ///  Gets or sets the direction the databar is displayed.
    ///</summary>
    property Direction: DNTextDirectionType read get_Direction write set_Direction;
    ///<summary>
    ///  Gets an object that specifies the border of a data bar.
    ///</summary>
    property BarBorder: DNDataBarBorder read get_BarBorder;
    ///<summary>
    ///  Gets the NegativeBarFormat object associated with a data bar conditional formatting rule.
    ///</summary>
    property NegativeBarFormat: DNNegativeBarFormat read get_NegativeBarFormat;
    ///<summary>
    ///  Get or set this DataBar's min value object.
    ///  Cannot set null or CFValueObject with type FormatConditionValueType.Max to it.
    ///</summary>
    property MinCfvo: DNConditionalFormattingValue read get_MinCfvo;
    ///<summary>
    ///  Get or set this DataBar's max value object.
    ///  Cannot set null or CFValueObject with type FormatConditionValueType.Min to it.
    ///</summary>
    property MaxCfvo: DNConditionalFormattingValue read get_MaxCfvo;
    ///<summary>
    ///  Get or set this DataBar's Color.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Represents the min length of data bar .
    ///</summary>
    property MinLength: Int32 read get_MinLength write set_MinLength;
    ///<summary>
    ///  Represents the max length of data bar .
    ///</summary>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>
    ///  Get or set the flag indicating whether to show the values of the cells on which this data bar is applied.
    ///  Default value is true.
    ///</summary>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
  end;

  TDNDataBar = class(TDNGenericImport<DNDataBarClass, DNDataBar>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataBarBorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3911E9E-7FB5-5C26-A2C7-E9EFDC03C447}']
  end;

  ///<summary>
  ///  Represents the border of the data bars specified by a conditional formatting rule.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataBarBorder')]
  DNDataBarBorder = interface(DDN.mscorlib.DNObject)
  ['{FC73842E-2BE4-355E-A843-E56C3F4D242B}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Type: DNDataBarBorderType;
    procedure set_Type(value: DNDataBarBorderType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the border's color of data bars specified by a conditional formatting rule.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets the border's type of data bars specified by a conditional formatting rule.
    ///</summary>
    property &Type: DNDataBarBorderType read get_Type write set_Type;
  end;

  TDNDataBarBorder = class(TDNGenericImport<DNDataBarBorderClass, DNDataBarBorder>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataSorterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E1DA466-D7BE-5EE9-A66B-B0EDBE2CB4CC}']
  end;

  ///<summary>
  ///  Summary description for DataSorter.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook object.
  ///  Workbook workbook = new Workbook("C:\\Book1.xls");
  ///  //Get the workbook datasorter object.
  ///  DataSorter sorter = workbook.DataSorter;
  ///  //Set the first order for datasorter object.
  ///  sorter.Order1 = Aspose.Cells.SortOrder.Descending;
  ///  //Define the first key.
  ///  sorter.Key1 = 0;
  ///  //Set the second order for datasorter object.
  ///  sorter.Order2 = Aspose.Cells.SortOrder.Ascending;
  ///  //Define the second key.
  ///  sorter.Key2 = 1;
  ///  //Create a cells area (range).
  ///  CellArea ca = new CellArea();
  ///  //Specify the start row index.
  ///  ca.StartRow = 0;
  ///  //Specify the start column index.
  ///  ca.StartColumn = 0;
  ///  //Specify the last row index.
  ///  ca.EndRow = 13;
  ///  //Specify the last column index.
  ///  ca.EndColumn = 1;
  ///  //Sort data in the specified data range (A1:B14)
  ///  sorter.Sort(workbook.Worksheets[0].Cells, ca);
  ///  //Save the excel file.
  ///  workbook.Save("C:\\outBook.xls");
  ///  [Visual Basic]
  ///  'Instantiate a new Workbook object.
  ///  Dim workbook As Workbook = New Workbook("C:\Book1.xls")
  ///  'Get the workbook datasorter object.
  ///  Dim sorter As DataSorter = workbook.DataSorter
  ///  'Set the first order for datasorter object
  ///  sorter.Order1 = Aspose.Cells.SortOrder.Descending
  ///  'Define the first key.
  ///  sorter.Key1 = 0
  ///  'Set the second order for datasorter object.
  ///  sorter.Order2 = Aspose.Cells.SortOrder.Ascending
  ///  'Define the second key.
  ///  sorter.Key2 = 1
  ///  'Create a cells area (range).
  ///  Dim ca As CellArea = New CellArea
  ///  'Specify the start row index.
  ///  ca.StartRow = 0
  ///  'Specify the start column index.
  ///  ca.StartColumn = 0
  ///  'Specify the last row index.
  ///  ca.EndRow = 13
  ///  'Specify the last column index.
  ///  ca.EndColumn = 1
  ///  'Sort the data in the specified data range (A1:B14)
  ///  sorter.Sort(workbook.Worksheets(0).Cells, ca)
  ///  'Save the excel file.
  ///  workbook.Save("C:\outBook.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.DataSorter')]
  DNDataSorter = interface(DDN.mscorlib.DNObject)
  ['{8510FFA9-B77A-3CC0-A338-F17677EF4295}']
  { getters & setters } 

    function get_Keys: DNDataSorterKeyCollection;
    function get_HasHeaders: Boolean;
    procedure set_HasHeaders(value: Boolean);
    function get_Key1: Int32;
    procedure set_Key1(value: Int32);
    function get_Order1: DNSortOrder;
    procedure set_Order1(value: DNSortOrder);
    function get_Key2: Int32;
    procedure set_Key2(value: Int32);
    function get_Order2: DNSortOrder;
    procedure set_Order2(value: DNSortOrder);
    function get_Key3: Int32;
    procedure set_Key3(value: Int32);
    function get_Order3: DNSortOrder;
    procedure set_Order3(value: DNSortOrder);
    function get_SortLeftToRight: Boolean;
    procedure set_SortLeftToRight(value: Boolean);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_SortAsNumber: Boolean;
    procedure set_SortAsNumber(value: Boolean);

  { methods } 

    ///<summary>
    ///  Clear all settings.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Adds sorted column index and sort order.
    ///</summary>
    ///  <param name="key">The sorted column index(absolute position, column A is 0, B is 1, ...)</param>
    ///  <param name="order">The sort order</param>
    procedure AddKey(key: Int32; order: DNSortOrder); overload;
    ///<summary>
    ///  Adds sorted column index and sort order with custom sort list.
    ///</summary>
    ///  <param name="key">The sorted column index(absolute position, column A is 0, B is 1, ...)</param>
    ///  <param name="order">The sort order.</param>
    ///  <param name="customList">The custom sort list.</param>
    procedure AddKey(key: Int32; order: DNSortOrder; customList: string); overload;
    ///<summary>
    ///  Adds sorted column index and sort order with custom sort list.
    ///</summary>
    ///  <param name="key">The sorted column index(absolute position, column A is 0, B is 1, ...)</param>
    ///  <param name="type">The sorted value type.</param>
    ///  <param name="order">The sort order.</param>
    ///  <param name="customList">The custom sort list.</param>
    ///<remarks>
    ///  If type is SortOnType.CellColor or SortOnType.FontColor, the customList is Color.
    ///</remarks>
    procedure AddKey(key: Int32; &type: DNSortOnType; order: DNSortOrder; customList: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Adds sorted column index and sort order with custom sort list.
    ///</summary>
    ///  <param name="key">The sorted column index(absolute position, column A is 0, B is 1, ...)</param>
    ///  <param name="order">The sort order.</param>
    ///  <param name="customList">The custom sort list.</param>
    procedure AddKey(key: Int32; order: DNSortOrder; customList: TArray<string>); overload;
    ///<summary>
    ///  Sorts the data of the area.
    ///</summary>
    ///  <param name="cells">The cells contains the data area.</param>
    ///  <param name="startRow">The start row of the area.</param>
    ///  <param name="startColumn">The start column of the area.</param>
    ///  <param name="endRow">The end row of the area.</param>
    ///  <param name="endColumn">The end column of the area.</param>
    procedure Sort(cells: DNCells; startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    ///<summary>
    ///  Sort the data of the area.
    ///</summary>
    ///  <param name="cells">The cells contains the data area.</param>
    ///  <param name="area">The area needed to sort</param>
    procedure Sort(cells: DNCells; area: DNCellArea); overload;
    ///<summary>
    ///  Sort the data in the range.
    ///</summary>
    procedure Sort; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the key list of data sorter.
    ///</summary>
    property Keys: DNDataSorterKeyCollection read get_Keys;
    ///<summary>
    ///  Represents whether the range has headers.
    ///</summary>
    property HasHeaders: Boolean read get_HasHeaders write set_HasHeaders;
    ///<summary>
    ///  Represents first sorted column index(absolute position, column A is 0, B is 1, ...).
    ///</summary>
    property Key1: Int32 read get_Key1 write set_Key1;
    ///<summary>
    ///  Represents sort order of the first key.
    ///</summary>
    property Order1: DNSortOrder read get_Order1 write set_Order1;
    ///<summary>
    ///  Represents second sorted column index(absolute position, column A is 0, B is 1, ...).
    ///</summary>
    property Key2: Int32 read get_Key2 write set_Key2;
    ///<summary>
    ///  Represents sort order of the second key.
    ///</summary>
    property Order2: DNSortOrder read get_Order2 write set_Order2;
    ///<summary>
    ///  Represents third sorted column index(absolute position, column A is 0, B is 1, ...).
    ///</summary>
    property Key3: Int32 read get_Key3 write set_Key3;
    ///<summary>
    ///  Represents sort order of the third key.
    ///</summary>
    property Order3: DNSortOrder read get_Order3 write set_Order3;
    ///<summary>
    ///  True means that sorting orientation is from left to right.
    ///  False means that sorting orientation is from top to bottom.
    ///  The default value is false.
    ///</summary>
    property SortLeftToRight: Boolean read get_SortLeftToRight write set_SortLeftToRight;
    ///<summary>
    ///  Gets and sets whether case sensitive when comparing string.
    ///</summary>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  Indicates whether sorting anything that looks like a number.
    ///</summary>
    property SortAsNumber: Boolean read get_SortAsNumber write set_SortAsNumber;
  end;

  TDNDataSorter = class(TDNGenericImport<DNDataSorterClass, DNDataSorter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataSorterKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{42DE09DB-698D-5F1C-B9C8-C7C3EF0FA712}']
  end;

  ///<summary>
  ///  Represents the key of the data sorter.
  ///</summary>
  [DNTypeName('Aspose.Cells.DataSorterKey')]
  DNDataSorterKey = interface(DDN.mscorlib.DNObject)
  ['{78565B59-1121-3C30-9A46-760511A65C16}']
  { getters & setters } 

    function get_Order: DNSortOrder;
    function get_Index: Int32;
    function get_Type: DNSortOnType;
    function get_IconSetType: DNIconSetType;
    function get_IconId: Int32;
    function get_Color: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates the order of sorting.
    ///</summary>
    property Order: DNSortOrder read get_Order;
    ///<summary>
    ///  Gets the sorted column index(absolute position, column A is 0, B is 1, ...).
    ///</summary>
    property Index: Int32 read get_Index;
    ///<summary>
    ///  Represents the type of sorting.
    ///</summary>
    property &Type: DNSortOnType read get_Type;
    ///<summary>
    ///  Represents the icon set type.
    ///</summary>
    ///<remarks>
    ///  Only effects when <see cref="T:Aspose.Cells.SortOnType" />
    ///  is SortOnType.Icon.
    ///</remarks>
    property IconSetType: DNIconSetType read get_IconSetType;
    ///<summary>
    ///  Represents the id of the icon set type.
    ///</summary>
    ///<remarks>
    ///  Only effects when <see cref="T:Aspose.Cells.SortOnType" />
    ///  is SortOnType.Icon.
    ///</remarks>
    property IconId: Int32 read get_IconId;
    ///<summary>
    ///  Gets the sorted color.
    ///</summary>
    ///<remarks>
    ///  Only effects when <see cref="T:Aspose.Cells.SortOnType" />
    ///  is SortOnType.CellColor or SortOnType.FontColor.
    ///</remarks>
    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  TDNDataSorterKey = class(TDNGenericImport<DNDataSorterKeyClass, DNDataSorterKey>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDateTimeGroupItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{135F6C95-3F7D-581F-9D8A-DDC86AFE7017}']
  { constructors } 

    ///<summary></summary>
    ///  <param name="type"></param>
    ///  <param name="year"></param>
    ///  <param name="month"></param>
    ///  <param name="day"></param>
    ///  <param name="hour"></param>
    ///  <param name="minute"></param>
    ///  <param name="second"></param>
    {class} function init(&type: DNDateTimeGroupingType; year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNDateTimeGroupItem;

  end;

  ///<summary>
  ///  Represents the datetime's group setting.
  ///</summary>
  [DNTypeName('Aspose.Cells.DateTimeGroupItem')]
  DNDateTimeGroupItem = interface(DDN.mscorlib.DNObject)
  ['{94A8A218-318F-3CAF-917F-FD5DE6841C90}']
  { getters & setters } 

    function get_MinValue: DDN.mscorlib.DNDateTime;
    function get_DateTimeGroupingType: DNDateTimeGroupingType;
    procedure set_DateTimeGroupingType(value: DNDateTimeGroupingType);
    function get_Year: Int32;
    procedure set_Year(value: Int32);
    function get_Month: Int32;
    procedure set_Month(value: Int32);
    function get_Day: Int32;
    procedure set_Day(value: Int32);
    function get_Hour: Int32;
    procedure set_Hour(value: Int32);
    function get_Minute: Int32;
    procedure set_Minute(value: Int32);
    function get_Second: Int32;
    procedure set_Second(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the min value.
    ///</summary>
    property MinValue: DDN.mscorlib.DNDateTime read get_MinValue;
    ///<summary>
    ///  Gets and sets the group type.
    ///</summary>
    property DateTimeGroupingType: DNDateTimeGroupingType read get_DateTimeGroupingType write set_DateTimeGroupingType;
    ///<summary>
    ///  Gets and sets the year of the grouped date time.
    ///</summary>
    property Year: Int32 read get_Year write set_Year;
    ///<summary>
    ///  Gets and sets the month of the grouped date time.
    ///</summary>
    property Month: Int32 read get_Month write set_Month;
    ///<summary>
    ///  Gets and sets the day of the grouped date time.
    ///</summary>
    property Day: Int32 read get_Day write set_Day;
    ///<summary>
    ///  Gets and sets the hour of the grouped date time.
    ///</summary>
    property Hour: Int32 read get_Hour write set_Hour;
    ///<summary>
    ///  Gets and sets the minute of the grouped date time.
    ///</summary>
    property Minute: Int32 read get_Minute write set_Minute;
    ///<summary>
    ///  Gets and sets the second of the grouped date time.
    ///</summary>
    property Second: Int32 read get_Second write set_Second;
  end;

  TDNDateTimeGroupItem = class(TDNGenericImport<DNDateTimeGroupItemClass, DNDateTimeGroupItem>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDeleteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFBC72D3-5FE6-5FAA-9658-CFDB1124293B}']
  { constructors } 

    {class} function init: DNDeleteOptions;

  end;

  ///<summary>
  ///  Represents the setting of deleting rows/columns.
  ///</summary>
  [DNTypeName('Aspose.Cells.DeleteOptions')]
  DNDeleteOptions = interface(DDN.mscorlib.DNObject)
  ['{8E7B88EC-82E3-3CB2-B60E-126C3F3563A6}']
  { getters & setters } 

    function get_UpdateReference: Boolean;
    procedure set_UpdateReference(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if update references in other worksheets.
    ///</summary>
    property UpdateReference: Boolean read get_UpdateReference write set_UpdateReference;
  end;

  TDNDeleteOptions = class(TDNGenericImport<DNDeleteOptionsClass, DNDeleteOptions>) end;

  //-------------namespace: Aspose.Cells.DigitalSignatures----------------
  DNDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10C2B1C1-F6D5-5E42-A3B3-BEF2F2355AB6}']
  { constructors } 

    ///<summary>
    ///  Constructor of digitalSignature. Uses .Net implementation.
    ///</summary>
    ///  <param name="certificate">Certificate object that was used to sign the document.</param>
    ///  <param name="comments">The purpose to signature.</param>
    ///  <param name="signTime">The utc time when the document was signed.</param>
    {class} function init(certificate: DDN.System.DNX509Certificate2; comments: string; signTime: DDN.mscorlib.DNDateTime): DNDigitalSignature; overload;
    ///<summary>
    ///  Constructor of digitalSignature. Uses Bouncy Castle implementation.
    ///</summary>
    ///  <param name="rawData">A byte array containing data from an X.509 certificate.</param>
    ///  <param name="password">The password required to access the X.509 certificate data.</param>
    ///  <param name="comments">The purpose to signature.</param>
    ///  <param name="signTime">The utc time when the document was signed.</param>
    {class} function init(rawData: TArray<Byte>; password: string; comments: string; signTime: DDN.mscorlib.DNDateTime): DNDigitalSignature; overload;

  end;

  ///<summary>
  ///  Signature in file.
  ///</summary>
  [DNTypeName('Aspose.Cells.DigitalSignatures.DigitalSignature')]
  DNDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{9B69910D-A8BA-3A23-8D19-226E83E5FE7E}']
  { getters & setters } 

    function get_Certificate: DDN.System.DNX509Certificate2;
    procedure set_Certificate(value: DDN.System.DNX509Certificate2);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_SignTime: DDN.mscorlib.DNDateTime;
    procedure set_SignTime(value: DDN.mscorlib.DNDateTime);
    function get_Id: DDN.mscorlib.DNGuid;
    procedure set_Id(value: DDN.mscorlib.DNGuid);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: TArray<Byte>;
    procedure set_Image(value: TArray<Byte>);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);
    function get_IsValid: Boolean;
    function get_XAdESType: DNXAdESType;
    procedure set_XAdESType(value: DNXAdESType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Certificate object that was used to sign the document.
    ///</summary>
    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate write set_Certificate;
    ///<summary>
    ///  The purpose to signature.
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
    ///<summary>
    ///  The time when the document was signed.
    ///</summary>
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime write set_SignTime;
    ///<summary>
    ///  Specifies a GUID which can be cross-referenced with the GUID of the signature line stored in the document content.
    ///  Default value is Empty (all zeroes) Guid.
    ///</summary>
    ///<remarks>
    ///  When set, it associates <see cref="T:Aspose.Cells.Drawing.SignatureLine" />
    ///  with corresponding <see cref="T:Aspose.Cells.DigitalSignatures.DigitalSignature" />
    ///  .
    ///</remarks>
    property Id: DDN.mscorlib.DNGuid read get_Id write set_Id;
    ///<summary>
    ///  Specifies the text of actual signature in the digital signature.
    ///  Default value ise Empty.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Specifies an image for the digital signature.
    ///  Default value is null.
    ///</summary>
    property Image: TArray<Byte> read get_Image write set_Image;
    ///<summary>
    ///  Specifies the class ID of the signature provider.
    ///  Default value is Empty (all zeroes) Guid.
    ///</summary>
    ///<remarks>
    ///  The cryptographic service provider (CSP) is an independent software module that actually performs cryptography algorithms for authentication, encoding, and encryption.
    ///  Microsoft Office reserves the value of {00000000-0000-0000-0000-000000000000} for its default signature provider,
    ///  and {000CD6A4-0000-0000-C000-000000000046} for its East Asian signature provider.
    ///  The GUID of the additionally installed provider should be obtained from the documentation shipped with the provider.
    ///</remarks>
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
    ///<summary>
    ///  If this digital signature is valid and the document has not been tampered with,
    ///  this value will be true.
    ///</summary>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  XAdES type.
    ///  Default value is None(XAdES is off).
    ///</summary>
    property XAdESType: DNXAdESType read get_XAdESType write set_XAdESType;
  end;

  TDNDigitalSignature = class(TDNGenericImport<DNDigitalSignatureClass, DNDigitalSignature>) end;

  //-------------namespace: Aspose.Cells.DigitalSignatures----------------
  DNDigitalSignatureCollectionClass = interface(DNObjectClass)
  ['{27A2A69F-21E9-51D7-9CF5-6CB8BB6D15D8}']
  { constructors } 

    ///<summary>
    ///  The constructor of DigitalSignatureCollection.
    ///</summary>
    {class} function init: DNDigitalSignatureCollection;

  end;

  ///<summary>
  ///  Provides a collection of digital signatures attached to a document.
  ///</summary>
  ///<example>
  ///  The following example shows how to create digital signature
  ///<code>
  ///  [C#]
  ///  internal void ValidateSignature()
  ///  {
  ///  Workbook wb = new Workbook(@"c:\newfile.xlsx");
  ///  //wb.IsDigitallySigned is true when the workbook is signed already.
  ///  System.Console.WriteLine(wb.IsDigitallySigned);
  ///  //get digitalSignature collection from workbook
  ///  DigitalSignatureCollection dsc = wb.GetDigitalSignature();
  ///  foreach (DigitalSignature ds in dsc)
  ///  {
  ///  System.Console.WriteLine(ds.Comments);
  ///  System.Console.WriteLine(ds.SignTime);
  ///  System.Console.WriteLine(ds.IsValid);
  ///  }
  ///  }
  ///  internal void SignSignature()
  ///  {
  ///  //dsc is signature collection contains one or more signature needed to sign
  ///  DigitalSignatureCollection dsc = new DigitalSignatureCollection();
  ///  //cert must contain private key, it can be contructed from cert file or windows certificate collection.
  ///  //123456 is password of cert
  ///  X509Certificate2 cert = new X509Certificate2("c:\\mykey2.pfx", "123456");
  ///  DigitalSignature ds = new DigitalSignature(cert, "test for sign", DateTime.Now);
  ///  dsc.Add(ds);
  ///  Workbook wb = new Workbook();
  ///  //wb.SetDigitalSignature sign all signatures in dsc
  ///  wb.SetDigitalSignature(dsc);
  ///  wb.Save(@"c:\newfile.xlsx");
  ///  }
  ///  [Visual Basic]
  ///  Sub ValidateSignature()
  ///  Dim workbook As Workbook = New Workbook("c:\newfile.xlsx")
  ///  'Workbook.IsDigitallySigned is true when the workbook is signed already.
  ///  System.Console.WriteLine(workbook.IsDigitallySigned)
  ///  'get digitalSignature collection from workbook
  ///  Dim dsc As DigitalSignatureCollection = workbook.GetDigitalSignature()
  ///  Dim ds As DigitalSignature
  ///  For Each ds In dsc
  ///  System.Console.WriteLine(ds.Comments)
  ///  System.Console.WriteLine(ds.SignTime)
  ///  System.Console.WriteLine(ds.IsValid)
  ///  Next
  ///  End Sub
  ///  Sub SignSignature()
  ///  'dsc is signature collection contains one or more signature needed to sign
  ///  Dim dsc As DigitalSignatureCollection = New DigitalSignatureCollection()
  ///  'cert must contain private key, it can be contructed from cert file or windows certificate collection.
  ///  Dim cert As X509Certificate2 = New X509Certificate2("c:\mykey2.pfx", "123456")
  ///  'create a signature with certificate, sign purpose and sign time
  ///  Dim ds As DigitalSignature = New DigitalSignature(cert, "test for sign", DateTime.Now)
  ///  dsc.Add(ds)
  ///  Dim workbook As Workbook = New Workbook()
  ///  'workbook.SetDigitalSignature sign all signatures in dsc
  ///  workbook.SetDigitalSignature(dsc)
  ///  workbook.Save("c:\newfile.xlsx")
  ///  End Sub
  ///</code></example>
  [DNTypeName('Aspose.Cells.DigitalSignatures.DigitalSignatureCollection')]
  DNDigitalSignatureCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BAE53C1C-D9A3-3EA4-B6B5-1D19B40A1FB6}']
  { methods } 

    ///<summary>
    ///  Add one signature to DigitalSignatureCollection.
    ///</summary>
    ///  <param name="digitalSignature">Digital signature in collection.</param>
    procedure Add(digitalSignature: DNDigitalSignature);
    ///<summary>
    ///  Get the enumerator for DigitalSignatureCollection,
    ///  this enumerator allows iteration over the collection
    ///</summary>
    ///<returns>The enumerator to iteration.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDigitalSignatureCollection = class(TDNGenericImport<DNDigitalSignatureCollectionClass, DNDigitalSignatureCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNActiveXControlBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{849A308C-B406-5E65-BC2C-F044FB05E0BE}']
  end;

  ///<summary>
  ///  Represents the ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase')]
  DNActiveXControlBase = interface(DDN.mscorlib.DNObject)
  ['{CA4B1BFA-9A33-3F9C-AA9B-9B3ACFE09749}']
  { getters & setters } 

    function get_Workbook: DNWorkbook;
    function get_Type: DNControlType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);
    function get_Data: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase.Workbook" />
    ///  object.
    ///</summary>
    property Workbook: DNWorkbook read get_Workbook;
    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the width of the control in unit of points.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets and sets the height of the control in unit of points.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets and sets a custom icon to display as the mouse pointer for the control.
    ///</summary>
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    ///<summary>
    ///  Gets and sets the type of icon displayed as the mouse pointer for the control.
    ///</summary>
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    ///<summary>
    ///  Gets and sets the ole color of the foreground.
    ///</summary>
    ///<remarks>
    ///  Not applies to Image control.
    ///</remarks>
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    ///<summary>
    ///  Indicates whether this control is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates whether to show a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets and sets the linked cell.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets and sets the list fill range.
    ///</summary>
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
  end;

  TDNActiveXControlBase = class(TDNGenericImport<DNActiveXControlBaseClass, DNActiveXControlBase>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNActiveXControlClass = interface(DNActiveXControlBaseClass)
  ['{62053E90-E8EA-5502-9CC5-7271688DD620}']
  end;

  ///<summary>
  ///  Represents the ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ActiveXControl')]
  DNActiveXControl = interface(DNActiveXControlBase)
  ['{E82C68FE-378B-34C1-8583-0D5DDD188257}']
  { getters & setters } 

    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Type: DNControlType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase.Workbook" />
    ///  object.
    ///</summary>
    property Workbook: DNWorkbook read get_Workbook;
    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the width of the control in unit of points.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets and sets the height of the control in unit of points.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets and sets a custom icon to display as the mouse pointer for the control.
    ///</summary>
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    ///<summary>
    ///  Gets and sets the type of icon displayed as the mouse pointer for the control.
    ///</summary>
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    ///<summary>
    ///  Gets and sets the ole color of the foreground.
    ///</summary>
    ///<remarks>
    ///  Not applies to Image control.
    ///</remarks>
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    ///<summary>
    ///  Indicates whether this control is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates whether to show a shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets and sets the linked cell.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets and sets the list fill range.
    ///</summary>
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNActiveXControl = class(TDNGenericImport<DNActiveXControlClass, DNActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNCheckBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{A0AFABCE-AF15-59D2-8102-7235B17CF09D}']
  end;

  ///<summary>
  ///  Represents a CheckBox ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.CheckBoxActiveXControl')]
  DNCheckBoxActiveXControl = interface(DNActiveXControl)
  ['{FCA4E78C-05B9-373A-9C62-9A678487534C}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_Alignment: DNControlCaptionAlignmentType;
    procedure set_Alignment(value: DNControlCaptionAlignmentType);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_Value: DNCheckValueType;
    procedure set_Value(value: DNCheckValueType);
    function get_IsTripleState: Boolean;
    procedure set_IsTripleState(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the group's name.
    ///</summary>
    property GroupName: string read get_GroupName write set_GroupName;
    ///<summary>
    ///  Gets and set the position of the Caption relative to the control.
    ///</summary>
    property Alignment: DNControlCaptionAlignmentType read get_Alignment write set_Alignment;
    ///<summary>
    ///  Indicates whether the contents of the control automatically wrap at the end of a line.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets and set the descriptive text that appears on a control.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  Gets and set the location of the control's picture relative to its caption.
    ///</summary>
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Gets and sets the data of the picture.
    ///</summary>
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    ///<summary>
    ///  Gets and sets the accelerator key for the control.
    ///</summary>
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    ///<summary>
    ///  Indicates if the control is checked or not.
    ///</summary>
    property Value: DNCheckValueType read get_Value write set_Value;
    ///<summary>
    ///  Indicates how the specified control will display Null values.
    ///</summary>
    ///<remarks>
    ///  ///<table class="dtTABLE" cellspacing="0"><tr><td><font color="gray"><b>Setting</b>
    ///</font>
    ///</td>
    ///      <td><font color="gray"><b>Description</b>
    ///</font>
    ///</td>
    ///</tr>
    ///    <tr><td>True</td>
    ///      <td>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</td>
    ///</tr>
    ///    <tr><td>False</td>
    ///      <td>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</td>
    ///</tr>
    ///</table>
    ///</remarks>
    property IsTripleState: Boolean read get_IsTripleState write set_IsTripleState;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNCheckBoxActiveXControl = class(TDNGenericImport<DNCheckBoxActiveXControlClass, DNCheckBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNComboBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{5E682035-2A96-58C6-A986-51B6D798814E}']
  end;

  ///<summary>
  ///  Represents a ComboBox ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ComboBoxActiveXControl')]
  DNComboBoxActiveXControl = interface(DNActiveXControl)
  ['{E7D6FB56-BE46-3489-BDB1-088E74FC014B}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_ListWidth: Double;
    procedure set_ListWidth(value: Double);
    function get_BoundColumn: Int32;
    procedure set_BoundColumn(value: Int32);
    function get_TextColumn: Int32;
    procedure set_TextColumn(value: Int32);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_ListRows: Int32;
    procedure set_ListRows(value: Int32);
    function get_MatchEntry: DNControlMatchEntryType;
    procedure set_MatchEntry(value: DNControlMatchEntryType);
    function get_DropButtonStyle: DNDropButtonStyle;
    procedure set_DropButtonStyle(value: DNDropButtonStyle);
    function get_ShowDropButtonTypeWhen: DNShowDropButtonType;
    procedure set_ShowDropButtonTypeWhen(value: DNShowDropButtonType);
    function get_ListStyle: DNControlListStyle;
    procedure set_ListStyle(value: DNControlListStyle);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_IsEditable: Boolean;
    procedure set_IsEditable(value: Boolean);
    function get_ShowColumnHeads: Boolean;
    procedure set_ShowColumnHeads(value: Boolean);
    function get_IsDragBehaviorEnabled: Boolean;
    procedure set_IsDragBehaviorEnabled(value: Boolean);
    function get_EnterFieldBehavior: Boolean;
    procedure set_EnterFieldBehavior(value: Boolean);
    function get_IsAutoWordSelected: Boolean;
    procedure set_IsAutoWordSelected(value: Boolean);
    function get_SelectionMargin: Boolean;
    procedure set_SelectionMargin(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_HideSelection: Boolean;
    procedure set_HideSelection(value: Boolean);
    function get_ColumnWidths: Double;
    procedure set_ColumnWidths(value: Double);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the maximum number of characters
    ///</summary>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>
    ///  Gets and set the width in unit of points.
    ///</summary>
    property ListWidth: Double read get_ListWidth write set_ListWidth;
    ///<summary>
    ///  Represents how the Value property is determined for a ComboBox or ListBox
    ///  when the MultiSelect properties value (fmMultiSelectSingle).
    ///</summary>
    property BoundColumn: Int32 read get_BoundColumn write set_BoundColumn;
    ///<summary>
    ///  Represents the column in a ComboBox or ListBox to display to the user.
    ///</summary>
    property TextColumn: Int32 read get_TextColumn write set_TextColumn;
    ///<summary>
    ///  Represents the number of columns to display in a ComboBox or ListBox.
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    ///<summary>
    ///  Represents the maximum number of rows to display in the list.
    ///</summary>
    property ListRows: Int32 read get_ListRows write set_ListRows;
    ///<summary>
    ///  Indicates how a ListBox or ComboBox searches its list as the user types.
    ///</summary>
    property MatchEntry: DNControlMatchEntryType read get_MatchEntry write set_MatchEntry;
    ///<summary>
    ///  Specifies the symbol displayed on the drop button
    ///</summary>
    property DropButtonStyle: DNDropButtonStyle read get_DropButtonStyle write set_DropButtonStyle;
    ///<summary>
    ///  Specifies the symbol displayed on the drop button
    ///</summary>
    property ShowDropButtonTypeWhen: DNShowDropButtonType read get_ShowDropButtonTypeWhen write set_ShowDropButtonTypeWhen;
    ///<summary>
    ///  Gets and sets the visual appearance.
    ///</summary>
    property ListStyle: DNControlListStyle read get_ListStyle write set_ListStyle;
    ///<summary>
    ///  Gets and set the type of border used by the control.
    ///</summary>
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Indicates whether the user can type into the control.
    ///</summary>
    property IsEditable: Boolean read get_IsEditable write set_IsEditable;
    ///<summary>
    ///  Indicates whether column headings are displayed.
    ///</summary>
    property ShowColumnHeads: Boolean read get_ShowColumnHeads write set_ShowColumnHeads;
    ///<summary>
    ///  Indicates whether dragging and dropping is enabled for the control.
    ///</summary>
    property IsDragBehaviorEnabled: Boolean read get_IsDragBehaviorEnabled write set_IsDragBehaviorEnabled;
    ///<summary>
    ///  Specifies selection behavior when entering the control.
    ///  True specifies that the selection remains unchanged from last time the control was active.
    ///  False specifies that all the text in the control will be selected when entering the control.
    ///</summary>
    property EnterFieldBehavior: Boolean read get_EnterFieldBehavior write set_EnterFieldBehavior;
    ///<summary>
    ///  Specifies the basic unit used to extend a selection.
    ///  True specifies that the basic unit is a single character.
    ///  false specifies that the basic unit is a whole word.
    ///</summary>
    property IsAutoWordSelected: Boolean read get_IsAutoWordSelected write set_IsAutoWordSelected;
    ///<summary>
    ///  Indicates whether the user can select a line of text by clicking in the region to the left of the text.
    ///</summary>
    property SelectionMargin: Boolean read get_SelectionMargin write set_SelectionMargin;
    ///<summary>
    ///  Gets and sets the value of the control.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Indicates whether selected text in the control appears highlighted when the control does not have focus.
    ///</summary>
    property HideSelection: Boolean read get_HideSelection write set_HideSelection;
    ///<summary>
    ///  Gets and sets the width of the column.
    ///</summary>
    property ColumnWidths: Double read get_ColumnWidths write set_ColumnWidths;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNComboBoxActiveXControl = class(TDNGenericImport<DNComboBoxActiveXControlClass, DNComboBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNCommandButtonActiveXControlClass = interface(DNActiveXControlClass)
  ['{4F19F9F9-714B-5A91-9880-19CF2C285E93}']
  end;

  ///<summary>
  ///  Represents a command button.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.CommandButtonActiveXControl')]
  DNCommandButtonActiveXControl = interface(DNActiveXControl)
  ['{C0701881-74BF-31E8-8C37-822B7E5479D8}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_TakeFocusOnClick: Boolean;
    procedure set_TakeFocusOnClick(value: Boolean);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and set the descriptive text that appears on a control.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  Gets and set the location of the control's picture relative to its caption.
    ///</summary>
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    ///<summary>
    ///  Gets and sets the data of the picture.
    ///</summary>
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    ///<summary>
    ///  Gets and sets the accelerator key for the control.
    ///</summary>
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    ///<summary>
    ///  Indicates whether the control takes the focus when clicked.
    ///</summary>
    property TakeFocusOnClick: Boolean read get_TakeFocusOnClick write set_TakeFocusOnClick;
    ///<summary>
    ///  Indicates whether the contents of the control automatically wrap at the end of a line.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNCommandButtonActiveXControl = class(TDNGenericImport<DNCommandButtonActiveXControlClass, DNCommandButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNImageActiveXControlClass = interface(DNActiveXControlClass)
  ['{C7F8F86B-1817-5AEC-9F6E-06A9EC2787AF}']
  end;

  ///<summary>
  ///  Represents the image control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ImageActiveXControl')]
  DNImageActiveXControl = interface(DNActiveXControl)
  ['{26B60CE5-C435-3971-BD19-D80A654E8063}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_PictureSizeMode: DNControlPictureSizeMode;
    procedure set_PictureSizeMode(value: DNControlPictureSizeMode);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_PictureAlignment: DNControlPictureAlignmentType;
    procedure set_PictureAlignment(value: DNControlPictureAlignmentType);
    function get_IsTiled: Boolean;
    procedure set_IsTiled(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    ///<summary>
    ///  Gets and set the type of border used by the control.
    ///</summary>
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  Gets and sets how to display the picture.
    ///</summary>
    property PictureSizeMode: DNControlPictureSizeMode read get_PictureSizeMode write set_PictureSizeMode;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Gets and sets the data of the picture.
    ///</summary>
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    ///<summary>
    ///  Gets and sets the alignment of the picture inside the Form or Image.
    ///</summary>
    property PictureAlignment: DNControlPictureAlignmentType read get_PictureAlignment write set_PictureAlignment;
    ///<summary>
    ///  Indicates whether the picture is tiled across the background.
    ///</summary>
    property IsTiled: Boolean read get_IsTiled write set_IsTiled;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNImageActiveXControl = class(TDNGenericImport<DNImageActiveXControlClass, DNImageActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNLabelActiveXControlClass = interface(DNActiveXControlClass)
  ['{EBEDFE14-2552-56FB-9215-60082DF8CD82}']
  end;

  ///<summary>
  ///  Represents the label ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.LabelActiveXControl')]
  DNLabelActiveXControl = interface(DNActiveXControl)
  ['{2873AF0A-1A6A-3EA3-9A72-0BA54C02C21A}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and set the descriptive text that appears on a control.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  Gets and set the location of the control's picture relative to its caption.
    ///</summary>
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    ///<summary>
    ///  Gets and set the type of border used by the control.
    ///</summary>
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Gets and sets the data of the picture.
    ///</summary>
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    ///<summary>
    ///  Gets and sets the accelerator key for the control.
    ///</summary>
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    ///<summary>
    ///  Indicates whether the contents of the control automatically wrap at the end of a line.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNLabelActiveXControl = class(TDNGenericImport<DNLabelActiveXControlClass, DNLabelActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNListBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{D528DC3A-7B78-5F80-8383-96E9540ED5A9}']
  end;

  ///<summary>
  ///  Represents a ListBox ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ListBoxActiveXControl')]
  DNListBoxActiveXControl = interface(DNActiveXControl)
  ['{93076C3A-316A-39B9-8181-652E5382969F}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_ScrollBars: DNControlScrollBarType;
    procedure set_ScrollBars(value: DNControlScrollBarType);
    function get_ListWidth: Double;
    procedure set_ListWidth(value: Double);
    function get_BoundColumn: Int32;
    procedure set_BoundColumn(value: Int32);
    function get_TextColumn: Int32;
    procedure set_TextColumn(value: Int32);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_MatchEntry: DNControlMatchEntryType;
    procedure set_MatchEntry(value: DNControlMatchEntryType);
    function get_ListStyle: DNControlListStyle;
    procedure set_ListStyle(value: DNControlListStyle);
    function get_SelectionType: DNSelectionType;
    procedure set_SelectionType(value: DNSelectionType);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_ShowColumnHeads: Boolean;
    procedure set_ShowColumnHeads(value: Boolean);
    function get_IntegralHeight: Boolean;
    procedure set_IntegralHeight(value: Boolean);
    function get_ColumnWidths: Double;
    procedure set_ColumnWidths(value: Double);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Indicates specifies whether the control has vertical scroll bars, horizontal scroll bars, both, or neither.
    ///</summary>
    property ScrollBars: DNControlScrollBarType read get_ScrollBars write set_ScrollBars;
    ///<summary>
    ///  Gets and set the width in unit of points.
    ///</summary>
    property ListWidth: Double read get_ListWidth write set_ListWidth;
    ///<summary>
    ///  Represents how the Value property is determined for a ComboBox or ListBox
    ///  when the MultiSelect properties value (fmMultiSelectSingle).
    ///</summary>
    property BoundColumn: Int32 read get_BoundColumn write set_BoundColumn;
    ///<summary>
    ///  Represents the column in a ComboBox or ListBox to display to the user.
    ///</summary>
    property TextColumn: Int32 read get_TextColumn write set_TextColumn;
    ///<summary>
    ///  Represents the number of columns to display in a ComboBox or ListBox.
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    ///<summary>
    ///  Indicates how a ListBox or ComboBox searches its list as the user types.
    ///</summary>
    property MatchEntry: DNControlMatchEntryType read get_MatchEntry write set_MatchEntry;
    ///<summary>
    ///  Gets and sets the visual appearance.
    ///</summary>
    property ListStyle: DNControlListStyle read get_ListStyle write set_ListStyle;
    ///<summary>
    ///  Indicates whether the control permits multiple selections.
    ///</summary>
    property SelectionType: DNSelectionType read get_SelectionType write set_SelectionType;
    ///<summary>
    ///  Gets and sets the value of the control.
    ///</summary>
    ///<remarks>
    ///  Only effects when <see cref="P:Aspose.Cells.Drawing.ActiveXControls.ListBoxActiveXControl.SelectionType" />
    ///  is SelectionType.Single;
    ///</remarks>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets and set the type of border used by the control.
    ///</summary>
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Indicates whether column headings are displayed.
    ///</summary>
    property ShowColumnHeads: Boolean read get_ShowColumnHeads write set_ShowColumnHeads;
    ///<summary>
    ///  Indicates whether the control will only show complete lines of text without showing any partial lines.
    ///</summary>
    property IntegralHeight: Boolean read get_IntegralHeight write set_IntegralHeight;
    ///<summary>
    ///  Gets and sets the width of the column.
    ///</summary>
    property ColumnWidths: Double read get_ColumnWidths write set_ColumnWidths;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNListBoxActiveXControl = class(TDNGenericImport<DNListBoxActiveXControlClass, DNListBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNSpinButtonActiveXControlClass = interface(DNActiveXControlClass)
  ['{C8D1F897-8120-50A4-8BA8-23306ECEA204}']
  end;

  ///<summary>
  ///  Represents the SpinButton control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.SpinButtonActiveXControl')]
  DNSpinButtonActiveXControl = interface(DNActiveXControl)
  ['{2275BC7F-4396-31A1-B385-CB3063AD2AE5}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_SmallChange: Int32;
    procedure set_SmallChange(value: Int32);
    function get_Orientation: DNControlScrollOrientation;
    procedure set_Orientation(value: DNControlScrollOrientation);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the minimum acceptable value.
    ///</summary>
    property Min: Int32 read get_Min write set_Min;
    ///<summary>
    ///  Gets and sets the maximum acceptable value.
    ///</summary>
    property Max: Int32 read get_Max write set_Max;
    ///<summary>
    ///  Gets and sets the value.
    ///</summary>
    property Position: Int32 read get_Position write set_Position;
    ///<summary>
    ///  Gets and sets the amount by which the Position property changes
    ///</summary>
    property SmallChange: Int32 read get_SmallChange write set_SmallChange;
    ///<summary>
    ///  Gets and sets whether the SpinButton or ScrollBar is oriented vertically or horizontally.
    ///</summary>
    property Orientation: DNControlScrollOrientation read get_Orientation write set_Orientation;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNSpinButtonActiveXControl = class(TDNGenericImport<DNSpinButtonActiveXControlClass, DNSpinButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNScrollBarActiveXControlClass = interface(DNSpinButtonActiveXControlClass)
  ['{1F4B59A2-E35B-5682-941D-5DC751791E28}']
  end;

  ///<summary>
  ///  Represents the ScrollBar control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ScrollBarActiveXControl')]
  DNScrollBarActiveXControl = interface(DNSpinButtonActiveXControl)
  ['{F712C246-B5E4-377F-A9F0-B28D74869C84}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_LargeChange: Int32;
    procedure set_LargeChange(value: Int32);
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_SmallChange: Int32;
    procedure set_SmallChange(value: Int32);
    function get_Orientation: DNControlScrollOrientation;
    procedure set_Orientation(value: DNControlScrollOrientation);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the amount by which the Position property changes
    ///</summary>
    property LargeChange: Int32 read get_LargeChange write set_LargeChange;
    ///<summary>
    ///  Gets and sets the minimum acceptable value.
    ///</summary>
    property Min: Int32 read get_Min write set_Min;
    ///<summary>
    ///  Gets and sets the maximum acceptable value.
    ///</summary>
    property Max: Int32 read get_Max write set_Max;
    ///<summary>
    ///  Gets and sets the value.
    ///</summary>
    property Position: Int32 read get_Position write set_Position;
    ///<summary>
    ///  Gets and sets the amount by which the Position property changes
    ///</summary>
    property SmallChange: Int32 read get_SmallChange write set_SmallChange;
    ///<summary>
    ///  Gets and sets whether the SpinButton or ScrollBar is oriented vertically or horizontally.
    ///</summary>
    property Orientation: DNControlScrollOrientation read get_Orientation write set_Orientation;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNScrollBarActiveXControl = class(TDNGenericImport<DNScrollBarActiveXControlClass, DNScrollBarActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNTextBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{9CFCD949-D0ED-5FE4-806C-39624D950B19}']
  end;

  ///<summary>
  ///  Represents a text box ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.TextBoxActiveXControl')]
  DNTextBoxActiveXControl = interface(DNActiveXControl)
  ['{9E60DDC5-E846-3A01-B39C-61A49AE7AFF1}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_ScrollBars: DNControlScrollBarType;
    procedure set_ScrollBars(value: DNControlScrollBarType);
    function get_PasswordChar: Char;
    procedure set_PasswordChar(value: Char);
    function get_IsEditable: Boolean;
    procedure set_IsEditable(value: Boolean);
    function get_IntegralHeight: Boolean;
    procedure set_IntegralHeight(value: Boolean);
    function get_IsDragBehaviorEnabled: Boolean;
    procedure set_IsDragBehaviorEnabled(value: Boolean);
    function get_EnterKeyBehavior: Boolean;
    procedure set_EnterKeyBehavior(value: Boolean);
    function get_EnterFieldBehavior: Boolean;
    procedure set_EnterFieldBehavior(value: Boolean);
    function get_TabKeyBehavior: Boolean;
    procedure set_TabKeyBehavior(value: Boolean);
    function get_HideSelection: Boolean;
    procedure set_HideSelection(value: Boolean);
    function get_IsAutoTab: Boolean;
    procedure set_IsAutoTab(value: Boolean);
    function get_IsMultiLine: Boolean;
    procedure set_IsMultiLine(value: Boolean);
    function get_IsAutoWordSelected: Boolean;
    procedure set_IsAutoWordSelected(value: Boolean);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_DropButtonStyle: DNDropButtonStyle;
    procedure set_DropButtonStyle(value: DNDropButtonStyle);
    function get_ShowDropButtonTypeWhen: DNShowDropButtonType;
    procedure set_ShowDropButtonTypeWhen(value: DNShowDropButtonType);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and set the type of border used by the control.
    ///</summary>
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  Gets and sets the ole color of the background.
    ///</summary>
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Gets and sets the maximum number of characters
    ///</summary>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>
    ///  Indicates specifies whether the control has vertical scroll bars, horizontal scroll bars, both, or neither.
    ///</summary>
    property ScrollBars: DNControlScrollBarType read get_ScrollBars write set_ScrollBars;
    ///<summary>
    ///  Gets and sets a character to be displayed in place of the characters entered.
    ///</summary>
    property PasswordChar: Char read get_PasswordChar write set_PasswordChar;
    ///<summary>
    ///  Indicates whether the user can type into the control.
    ///</summary>
    property IsEditable: Boolean read get_IsEditable write set_IsEditable;
    ///<summary>
    ///  Indicates whether the control will only show complete lines of text without showing any partial lines.
    ///</summary>
    property IntegralHeight: Boolean read get_IntegralHeight write set_IntegralHeight;
    ///<summary>
    ///  Indicates whether dragging and dropping is enabled for the control.
    ///</summary>
    property IsDragBehaviorEnabled: Boolean read get_IsDragBehaviorEnabled write set_IsDragBehaviorEnabled;
    ///<summary>
    ///  Specifies the behavior of the ENTER key.
    ///  True specifies that pressing ENTER will create a new line.
    ///  False specifies that pressing ENTER will move the focus to the next object in the tab order.
    ///</summary>
    property EnterKeyBehavior: Boolean read get_EnterKeyBehavior write set_EnterKeyBehavior;
    ///<summary>
    ///  Specifies selection behavior when entering the control.
    ///  True specifies that the selection remains unchanged from last time the control was active.
    ///  False specifies that all the text in the control will be selected when entering the control.
    ///</summary>
    property EnterFieldBehavior: Boolean read get_EnterFieldBehavior write set_EnterFieldBehavior;
    ///<summary>
    ///  Indicates whether tab characters are allowed in the text of the control.
    ///</summary>
    property TabKeyBehavior: Boolean read get_TabKeyBehavior write set_TabKeyBehavior;
    ///<summary>
    ///  Indicates whether selected text in the control appears highlighted when the control does not have focus.
    ///</summary>
    property HideSelection: Boolean read get_HideSelection write set_HideSelection;
    ///<summary>
    ///  Indicates whether the focus will automatically move to the next control when the user enters the maximum number of characters.
    ///</summary>
    property IsAutoTab: Boolean read get_IsAutoTab write set_IsAutoTab;
    ///<summary>
    ///  Indicates whether the control can display more than one line of text.
    ///</summary>
    property IsMultiLine: Boolean read get_IsMultiLine write set_IsMultiLine;
    ///<summary>
    ///  Specifies the basic unit used to extend a selection.
    ///  True specifies that the basic unit is a single character.
    ///  false specifies that the basic unit is a whole word.
    ///</summary>
    property IsAutoWordSelected: Boolean read get_IsAutoWordSelected write set_IsAutoWordSelected;
    ///<summary>
    ///  Indicates whether the contents of the control automatically wrap at the end of a line.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets and set text of the control.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Specifies the symbol displayed on the drop button
    ///</summary>
    property DropButtonStyle: DNDropButtonStyle read get_DropButtonStyle write set_DropButtonStyle;
    ///<summary>
    ///  Specifies the symbol displayed on the drop button
    ///</summary>
    property ShowDropButtonTypeWhen: DNShowDropButtonType read get_ShowDropButtonTypeWhen write set_ShowDropButtonTypeWhen;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNTextBoxActiveXControl = class(TDNGenericImport<DNTextBoxActiveXControlClass, DNTextBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNToggleButtonActiveXControlClass = interface(DNActiveXControlClass)
  ['{FD910989-58AA-5252-B5DC-CEBDFBA47B62}']
  end;

  ///<summary>
  ///  Represents a ToggleButton ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ToggleButtonActiveXControl')]
  DNToggleButtonActiveXControl = interface(DNActiveXControl)
  ['{530D0950-5BF8-392E-A75B-9F66CD08E759}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_Value: DNCheckValueType;
    procedure set_Value(value: DNCheckValueType);
    function get_IsTripleState: Boolean;
    procedure set_IsTripleState(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and set the descriptive text that appears on a control.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  Gets and set the location of the control's picture relative to its caption.
    ///</summary>
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Gets and sets the data of the picture.
    ///</summary>
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    ///<summary>
    ///  Gets and sets the accelerator key for the control.
    ///</summary>
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    ///<summary>
    ///  Indicates if the control is checked or not.
    ///</summary>
    property Value: DNCheckValueType read get_Value write set_Value;
    ///<summary>
    ///  Indicates how the specified control will display Null values.
    ///</summary>
    ///<remarks>
    ///  ///<table class="dtTABLE" cellspacing="0"><tr><td><font color="gray"><b>Setting</b>
    ///</font>
    ///</td>
    ///      <td><font color="gray"><b>Description</b>
    ///</font>
    ///</td>
    ///</tr>
    ///    <tr><td>True</td>
    ///      <td>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</td>
    ///</tr>
    ///    <tr><td>False</td>
    ///      <td>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</td>
    ///</tr>
    ///</table>
    ///</remarks>
    property IsTripleState: Boolean read get_IsTripleState write set_IsTripleState;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNToggleButtonActiveXControl = class(TDNGenericImport<DNToggleButtonActiveXControlClass, DNToggleButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNRadioButtonActiveXControlClass = interface(DNToggleButtonActiveXControlClass)
  ['{9D56DE8B-CEFE-5258-A2DA-13F64149405D}']
  end;

  ///<summary>
  ///  Represents a RadioButton ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.RadioButtonActiveXControl')]
  DNRadioButtonActiveXControl = interface(DNToggleButtonActiveXControl)
  ['{39BF113E-6C84-328B-8DEE-8F6C3A43A7EB}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_Alignment: DNControlCaptionAlignmentType;
    procedure set_Alignment(value: DNControlCaptionAlignmentType);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_Value: DNCheckValueType;
    procedure set_Value(value: DNCheckValueType);
    function get_IsTripleState: Boolean;
    procedure set_IsTripleState(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Gets and sets the group's name.
    ///</summary>
    property GroupName: string read get_GroupName write set_GroupName;
    ///<summary>
    ///  Gets and set the position of the Caption relative to the control.
    ///</summary>
    property Alignment: DNControlCaptionAlignmentType read get_Alignment write set_Alignment;
    ///<summary>
    ///  Indicates whether the contents of the control automatically wrap at the end of a line.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets and set the descriptive text that appears on a control.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  Gets and set the location of the control's picture relative to its caption.
    ///</summary>
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    ///<summary>
    ///  Gets and sets the special effect of the control.
    ///</summary>
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    ///<summary>
    ///  Gets and sets the data of the picture.
    ///</summary>
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    ///<summary>
    ///  Gets and sets the accelerator key for the control.
    ///</summary>
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    ///<summary>
    ///  Indicates if the control is checked or not.
    ///</summary>
    property Value: DNCheckValueType read get_Value write set_Value;
    ///<summary>
    ///  Indicates how the specified control will display Null values.
    ///</summary>
    ///<remarks>
    ///  ///<table class="dtTABLE" cellspacing="0"><tr><td><font color="gray"><b>Setting</b>
    ///</font>
    ///</td>
    ///      <td><font color="gray"><b>Description</b>
    ///</font>
    ///</td>
    ///</tr>
    ///    <tr><td>True</td>
    ///      <td>The control will cycle through states for Yes, No, and Null values. The control appears dimmed (grayed) when its Value property is set to Null.</td>
    ///</tr>
    ///    <tr><td>False</td>
    ///      <td>(Default) The control will cycle through states for Yes and No values. Null values display as if they were No values.</td>
    ///</tr>
    ///</table>
    ///</remarks>
    property IsTripleState: Boolean read get_IsTripleState write set_IsTripleState;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNRadioButtonActiveXControl = class(TDNGenericImport<DNRadioButtonActiveXControlClass, DNRadioButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNUnknownControlClass = interface(DNActiveXControlClass)
  ['{D37A95DC-CA97-5827-9C6B-F2726181BDF6}']
  end;

  ///<summary>
  ///  Unknow control.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.UnknownControl')]
  DNUnknownControl = interface(DNActiveXControl)
  ['{B6747D6A-D272-3A5F-9A09-C943C1D05A4D}']
  { getters & setters } 

    function get_PersistenceType: DNActiveXPersistenceType;
    function get_Data: TArray<Byte>;
    function get_Type: DNControlType;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    ///<summary>
    ///  Gets the related data.
    ///</summary>
    ///  <param name="relId">The relationship id.</param>
    ///<returns>Returns the related data.</returns>
    function GetRelationshipData(relId: string): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the persistence method to persist an ActiveX control.
    ///</summary>
    property PersistenceType: DNActiveXPersistenceType read get_PersistenceType;
    ///<summary>
    ///  Gets and sets the binary data of the control.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    ///<summary>
    ///  Gets the type of the ActiveX control.
    ///</summary>
    property &Type: DNControlType read get_Type;
    ///<summary>
    ///  Indicates whether the control can receive the focus and respond to user-generated events.
    ///</summary>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  Indicates whether data in the control is locked for editing.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Indicates whether the control is transparent.
    ///</summary>
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    ///<summary>
    ///  Indicates whether the control will automatically resize to display its entire contents.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Gets and sets the default run-time mode of the Input Method Editor for the control as it receives focus.
    ///</summary>
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    ///<summary>
    ///  Represents the font of the control.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents how to align the text used by the control.
    ///</summary>
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNUnknownControl = class(TDNGenericImport<DNUnknownControlClass, DNUnknownControl>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82B08785-C8F9-5887-93C8-F0F3ECA800DE}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents an area format.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Workbook object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  //Setting the foreground color of the plot area
  ///  chart.PlotArea.Area.ForegroundColor = Color.Blue;
  ///  //Setting the foreground color of the chart area
  ///  chart.ChartArea.Area.ForegroundColor = Color.Yellow;
  ///  //Setting the foreground color of the 1st NSeries area
  ///  chart.NSeries[0].Area.ForegroundColor = Color.Red;
  ///  //Setting the foreground color of the area of the 1st NSeries point
  ///  chart.NSeries[0].Points[0].Area.ForegroundColor = Color.Cyan;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Workbook object
  ///  Dim sheetIndex As Integer = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  'Setting the foreground color of the plot area
  ///  chart.PlotArea.Area.ForegroundColor = Color.Blue
  ///  'Setting the foreground color of the chart area
  ///  chart.ChartArea.Area.ForegroundColor = Color.Yellow
  ///  'Setting the foreground color of the 1st NSeries area
  ///  chart.NSeries(0).Area.ForegroundColor = Color.Red
  ///  'Setting the foreground color of the area of the 1st NSeries point
  ///  chart.NSeries(0).Points(0).Area.ForegroundColor = Color.Cyan
  ///  'Saving the Excel file
  ///  workbook.Save("C:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.Area')]
  DNArea = interface(DDN.mscorlib.DNObject)
  ['{99EA9EA3-5E3C-3111-A036-F283E40DF291}']
  { getters & setters } 

    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_Formatting: DNFormattingType;
    procedure set_Formatting(value: DNFormattingType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_FillFormat: DNFillFormat;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the background <see cref="T:System.Drawing.Color" />
    ///  of the <see cref="T:Aspose.Cells.Drawing.Area" />
    ///  .
    ///</summary>
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the foreground <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Represents the formatting of the area.
    ///</summary>
    property Formatting: DNFormattingType read get_Formatting write set_Formatting;
    ///<summary>
    ///  If the property is true and the value of chart point is a negative number,
    ///  the foreground color and background color will be exchanged.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Instantiating a Workbook object
    ///  Workbook workbook = new Workbook();
    ///  //Adding a new worksheet to the Workbook object
    ///  int sheetIndex = workbook.Worksheets.Add();
    ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
    ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
    ///  //Adding a sample value to "A1" cell
    ///  worksheet.Cells["A1"].PutValue(50);
    ///  //Adding a sample value to "A2" cell
    ///  worksheet.Cells["A2"].PutValue(-100);
    ///  //Adding a sample value to "A3" cell
    ///  worksheet.Cells["A3"].PutValue(150);
    ///  //Adding a chart to the worksheet
    ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
    ///  //Accessing the instance of the newly added chart
    ///  Chart chart = worksheet.Charts[chartIndex];
    ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "A3"
    ///  chart.NSeries.Add("A1:A3", true);
    ///  chart.NSeries[0].Area.InvertIfNegative = true;
    ///  //Setting the foreground color of the 1st NSeries area
    ///  chart.NSeries[0].Area.ForegroundColor = Color.Red;
    ///  //Setting the background color of the 1st NSeries area.
    ///  //The displayed area color of second chart point will be the background color.
    ///  chart.NSeries[0].Area.BackgroundColor = Color.Yellow;
    ///  //Saving the Excel file
    ///  workbook.Save("C:\\book1.xls");
    ///  [Visual Basic]
    ///  'Instantiating a Workbook object
    ///  Dim workbook As Workbook = New Workbook()
    ///  'Adding a new worksheet to the Workbook object
    ///  Dim sheetIndex As Integer = workbook.Worksheets.Add()
    ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
    ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
    ///  'Adding a sample value to "A1" cell
    ///  worksheet.Cells("A1").PutValue(50)
    ///  'Adding a sample value to "A2" cell
    ///  worksheet.Cells("A2").PutValue(-100)
    ///  'Adding a sample value to "A3" cell
    ///  worksheet.Cells("A3").PutValue(150)
    ///  'Adding a chart to the worksheet
    ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
    ///  'Accessing the instance of the newly added chart
    ///  Dim chart As Chart = worksheet.Charts(chartIndex)
    ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "A3"
    ///  chart.NSeries.Add("A1:A3", True)
    ///  chart.NSeries(0).Area.InvertIfNegative = True
    ///  'Setting the foreground color of the 1st NSeries area
    ///  chart.NSeries(0).Area.ForegroundColor = Color.Red
    ///  'Setting the background color of the 1st NSeries area.
    ///  'The displayed area color of second chart point will be the background color.
    ///  chart.NSeries(0).Area.BackgroundColor = Color.Yellow
    ///  'Saving the Excel file
    ///  workbook.Save("C:\book1.xls")
    ///</code></example>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Area.FillFormat" />
    ///  object that contains fill formatting properties for the specified chart or shape.
    ///</summary>
    property FillFormat: DNFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNArea = class(TDNGenericImport<DNAreaClass, DNArea>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNFloorClass = interface(DNAreaClass)
  ['{D0465578-497E-5027-A970-A8182A5DC8FE}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the floor of a 3-D chart.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate the License class
  ///  Aspose.Cells.License license = new Aspose.Cells.License();
  ///  //Pass only the name of the license file embedded in the assembly
  ///  license.SetLicense("Aspose.Cells.lic");
  ///  //Instantiate the workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Get cells collection
  ///  Cells cells = workbook.Worksheets[0].Cells;
  ///  //Put values in cells
  ///  cells["A1"].PutValue(1);
  ///  cells["A2"].PutValue(2);
  ///  cells["A3"].PutValue(3);
  ///  //get charts colletion
  ///  Charts charts = workbook.Worksheets[0].Charts;
  ///  //add a new chart
  ///  int index = charts.Add(ChartType.Column3DStacked, 5, 0, 15, 5);
  ///  //get the newly added chart
  ///  Chart chart = charts[index];
  ///  //set charts nseries
  ///  chart.NSeries.Add("A1:A3", true);
  ///  //Show data labels
  ///  chart.NSeries[0].DataLabels.IsValueShown = true;
  ///  //Get chart's floor
  ///  Floor floor = chart.Floor;
  ///  //set floor's border as red
  ///  floor.Border.Color = System.Drawing.Color.Red;
  ///  //set fill format
  ///  floor.FillFormat.SetPresetColorGradient(GradientPresetType.CalmWater, GradientStyleType.DiagonalDown, 2);
  ///  //save the file
  ///  workbook.Save(@"d:\dest.xls");
  ///  [VB.NET]
  ///  'Instantiate the License class
  ///  Dim license As New Aspose.Cells.License()
  ///  'Pass only the name of the license file embedded in the assembly
  ///  license.SetLicense("Aspose.Cells.lic")
  ///  'Instantiate the workbook object
  ///  Dim workbook As New Workbook()
  ///  'Get cells collection
  ///  Dim cells As Cells = workbook.Worksheets(0).Cells
  ///  'Put values in cells
  ///  cells("A1").PutValue(1)
  ///  cells("A2").PutValue(2)
  ///  cells("A3").PutValue(3)
  ///  'get charts colletion
  ///  Dim charts As Charts = workbook.Worksheets(0).Charts
  ///  'add a new chart
  ///  Dim index As Integer = charts.Add(ChartType.Column3DStacked, 5, 0, 15, 5)
  ///  'get the newly added chart
  ///  Dim chart As Chart = charts(index)
  ///  'set charts nseries
  ///  chart.NSeries.Add("A1:A3", True)
  ///  'Show data labels
  ///  chart.NSeries(0).DataLabels.IsValueShown = True
  ///  'Get chart's floor
  ///  Dim floor As Floor = chart.Floor
  ///  'set floor's border as red
  ///  floor.Border.Color = System.Drawing.Color.Red
  ///  'set fill format
  ///  floor.FillFormat.SetPresetColorGradient(GradientPresetType.CalmWater, GradientStyleType.DiagonalDown, 2)
  ///  'save the file
  ///  workbook.Save("d:\dest.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Floor')]
  DNFloor = interface(DNArea)
  ['{9153906A-FAD1-36EC-9526-2090DEDBD24D}']
  { getters & setters } 

    function get_Border: DNLine;
    procedure set_Border(value: DNLine);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_Formatting: DNFormattingType;
    procedure set_Formatting(value: DNFormattingType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_FillFormat: DNFillFormat;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the border <see cref="T:Aspose.Cells.Drawing.Line" />
    ///  .
    ///</summary>
    property Border: DNLine read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the background <see cref="T:System.Drawing.Color" />
    ///  of the <see cref="T:Aspose.Cells.Drawing.Area" />
    ///  .
    ///</summary>
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the foreground <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Represents the formatting of the area.
    ///</summary>
    property Formatting: DNFormattingType read get_Formatting write set_Formatting;
    ///<summary>
    ///  If the property is true and the value of chart point is a negative number,
    ///  the foreground color and background color will be exchanged.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Instantiating a Workbook object
    ///  Workbook workbook = new Workbook();
    ///  //Adding a new worksheet to the Workbook object
    ///  int sheetIndex = workbook.Worksheets.Add();
    ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
    ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
    ///  //Adding a sample value to "A1" cell
    ///  worksheet.Cells["A1"].PutValue(50);
    ///  //Adding a sample value to "A2" cell
    ///  worksheet.Cells["A2"].PutValue(-100);
    ///  //Adding a sample value to "A3" cell
    ///  worksheet.Cells["A3"].PutValue(150);
    ///  //Adding a chart to the worksheet
    ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
    ///  //Accessing the instance of the newly added chart
    ///  Chart chart = worksheet.Charts[chartIndex];
    ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "A3"
    ///  chart.NSeries.Add("A1:A3", true);
    ///  chart.NSeries[0].Area.InvertIfNegative = true;
    ///  //Setting the foreground color of the 1st NSeries area
    ///  chart.NSeries[0].Area.ForegroundColor = Color.Red;
    ///  //Setting the background color of the 1st NSeries area.
    ///  //The displayed area color of second chart point will be the background color.
    ///  chart.NSeries[0].Area.BackgroundColor = Color.Yellow;
    ///  //Saving the Excel file
    ///  workbook.Save("C:\\book1.xls");
    ///  [Visual Basic]
    ///  'Instantiating a Workbook object
    ///  Dim workbook As Workbook = New Workbook()
    ///  'Adding a new worksheet to the Workbook object
    ///  Dim sheetIndex As Integer = workbook.Worksheets.Add()
    ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
    ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
    ///  'Adding a sample value to "A1" cell
    ///  worksheet.Cells("A1").PutValue(50)
    ///  'Adding a sample value to "A2" cell
    ///  worksheet.Cells("A2").PutValue(-100)
    ///  'Adding a sample value to "A3" cell
    ///  worksheet.Cells("A3").PutValue(150)
    ///  'Adding a chart to the worksheet
    ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
    ///  'Accessing the instance of the newly added chart
    ///  Dim chart As Chart = worksheet.Charts(chartIndex)
    ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "A3"
    ///  chart.NSeries.Add("A1:A3", True)
    ///  chart.NSeries(0).Area.InvertIfNegative = True
    ///  'Setting the foreground color of the 1st NSeries area
    ///  chart.NSeries(0).Area.ForegroundColor = Color.Red
    ///  'Setting the background color of the 1st NSeries area.
    ///  'The displayed area color of second chart point will be the background color.
    ///  chart.NSeries(0).Area.BackgroundColor = Color.Yellow
    ///  'Saving the Excel file
    ///  workbook.Save("C:\book1.xls")
    ///</code></example>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Area.FillFormat" />
    ///  object that contains fill formatting properties for the specified chart or shape.
    ///</summary>
    property FillFormat: DNFillFormat read get_FillFormat;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNFloor = class(TDNGenericImport<DNFloorClass, DNFloor>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNWallsClass = interface(DNFloorClass)
  ['{6754671C-FD6A-5C68-90C9-BC0A9B26338F}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the walls of a 3-D chart.
  ///</summary>
  [DNTypeName('Aspose.Cells.Charts.Walls')]
  DNWalls = interface(DNFloor)
  ['{42900F52-F279-3FBB-A186-4148E8C63C94}']
  { getters & setters } 

    function get_CenterX: Int32;
    function get_CenterY: Int32;
    function get_Width: Int32;
    function get_Depth: Int32;
    function get_Height: Int32;
    function get_CenterXPx: Int32;
    function get_CenterYPx: Int32;
    function get_WidthPx: Int32;
    function get_DepthPx: Int32;
    function get_HeightPx: Int32;
    function get_Border: DNLine;
    procedure set_Border(value: DNLine);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_Formatting: DNFormattingType;
    procedure set_Formatting(value: DNFormattingType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_FillFormat: DNFillFormat;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    ///<summary>
    ///  Gets the number of cube points after calls Chart.Calculate() method.
    ///</summary>
    function GetCubePointCount: Int32;
    ///<summary>
    ///  Gets x-coordinate of the apex point of walls cube after calls Chart.Calculate() method.
    ///  The number of apex points of walls cube is eight
    ///</summary>
    function GetCubePointXPx(index: Int32): Single;
    ///<summary>
    ///  Gets y-coordinate of the apex point of walls cube after calls Chart.Calculate() method.
    ///  The number of apex points of walls cube is eight.
    ///</summary>
    function GetCubePointYPx(index: Int32): Single;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the x coordinate of the left-bottom corner of Wall center in units of 1/4000 of chart's width after calls Chart.Calculate() method.
    ///</summary>
    property CenterX: Int32 read get_CenterX;
    ///<summary>
    ///  Gets the y coordinate of the left-bottom corner of Wall center in units of 1/4000 of chart's height after calls Chart.Calculate() method.
    ///</summary>
    property CenterY: Int32 read get_CenterY;
    ///<summary>
    ///  Gets the width of left to right in units of 1/4000 of chart's width after calls Chart.Calculate() method.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets the depth front to back in units of 1/4000 of chart's width after calls Chart.Calculate() method.
    ///</summary>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  Gets the height of top to bottom in units of 1/4000 of chart's height after calls Chart.Calculate() method.
    ///</summary>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  Gets the x coordinate of the left-bottom corner of Wall center in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property CenterXPx: Int32 read get_CenterXPx;
    ///<summary>
    ///  Gets the y coordinate of the left-bottom corner of Wall center in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property CenterYPx: Int32 read get_CenterYPx;
    ///<summary>
    ///  Gets the width of left to right in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property WidthPx: Int32 read get_WidthPx;
    ///<summary>
    ///  Gets the depth front to back in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property DepthPx: Int32 read get_DepthPx;
    ///<summary>
    ///  Gets the height of top to bottom in units of pixels after calls Chart.Calculate() method.
    ///</summary>
    property HeightPx: Int32 read get_HeightPx;
    ///<summary>
    ///  Gets or sets the border <see cref="T:Aspose.Cells.Drawing.Line" />
    ///  .
    ///</summary>
    property Border: DNLine read get_Border write set_Border;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property Formatting: DNFormattingType read get_Formatting write set_Formatting;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property FillFormat: DNFillFormat read get_FillFormat;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNWalls = class(TDNGenericImport<DNWallsClass, DNWalls>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNBevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18F877A9-FD22-5295-9559-D074F5937D42}']
  end;

  ///<summary>
  ///  Represents a bevel of a shape
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Bevel')]
  DNBevel = interface(DDN.mscorlib.DNObject)
  ['{9CF5C25B-3C00-3552-82C4-1E56BCDFF64A}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Type: DNBevelPresetType;
    procedure set_Type(value: DNBevelPresetType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the width of the bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets and sets the height of the bevel, or how far above the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets and sets the preset bevel type.
    ///</summary>
    property &Type: DNBevelPresetType read get_Type write set_Type;
  end;

  TDNBevel = class(TDNGenericImport<DNBevelClass, DNBevel>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNColorHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B0D04B2C-F040-59A2-83F0-3EDF3C76A635}']
  { static methods } 

    ///<summary>
    ///  Convert OLE_COLOR.
    ///</summary>
    ///  <param name="oleColor">The value of OLE_COLOR.</param>
    ///<returns>The <see cref="T:System.Drawing.Color" />
    ///  object.</returns>
    {class} function FromOleColor(oleColor: Int32): DDN.System.Drawing.DNColor;
    ///<summary>
    ///  Convert color to OLE_COLOR
    ///</summary>
    ///  <param name="color">The <see cref="T:System.Drawing.Color" />
    ///  object.</param>
    ///  <param name="workbook"></param>
    ///<returns>The value of OLE_COLOR</returns>
    {class} function ToOleColor(color: DDN.System.Drawing.DNColor; workbook: DNWorkbook): Int32;

  end;

  ///<summary>
  ///  Provides helper functions about color.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ColorHelper')]
  DNColorHelper = interface(DDN.mscorlib.DNObject)
  ['{8EE28BA5-C6CB-37FC-A2C6-27BFBBAFEDEC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorHelper = class(TDNGenericImport<DNColorHelperClass, DNColorHelper>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNFillClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CA9D41D-9693-58A6-ACA7-7CEF08F80FE7}']
  end;

  ///<summary>
  ///  Represents the fill format of the shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Fill')]
  DNFill = interface(DDN.mscorlib.DNObject)
  ['{0A72DA4D-479A-37DA-8572-73BDC52C2792}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFill = class(TDNGenericImport<DNFillClass, DNFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNAutomaticFillClass = interface(DNFillClass)
  ['{995188CC-A473-596C-AEA2-DCCC0B9C8E79}']
  end;

  ///<summary>
  ///  represents automatic fill.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.AutomaticFill')]
  DNAutomaticFill = interface(DNFill)
  ['{6482C679-F94B-3F6A-B816-D8E25F853E8C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAutomaticFill = class(TDNGenericImport<DNAutomaticFillClass, DNAutomaticFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGradientFillClass = interface(DNFillClass)
  ['{455F1D00-A622-5311-9B36-71DFEDA699D9}']
  end;

  ///<summary>
  ///  Represents the gradient fill.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientFill')]
  DNGradientFill = interface(DNFill)
  ['{48498416-4D21-3D14-A31E-16A756B3A7E2}']
  { getters & setters } 

    function get_GradientStops: DNGradientStopCollection;
    function get_FillType: DNGradientFillType;
    function get_DirectionType: DNGradientDirectionType;
    function get_Angle: Single;
    procedure set_Angle(value: Single);

  { methods } 

    ///<summary>
    ///  Set the gradient fill type and direction.
    ///</summary>
    ///  <param name="type">Gradient fill type.</param>
    ///  <param name="angle">The angle. Only applies for GradientFillType.Linear. </param>
    ///  <param name="direction">The direction type. Only applies for GradientFillType.Radial and GradientFillType.Rectangle.</param>
    procedure SetGradient(&type: DNGradientFillType; angle: Double; direction: DNGradientDirectionType);
    ///<summary>
    ///  Sets the specified fill to a one-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color">One gradient color.</param>
    ///  <param name="degree">The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; style: DNGradientStyleType; variant: Int32); overload;
    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="transparency1">The degree of transparency of the color1 as a value from 0.0 (opaque) through 1.0 (clear).</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="transparency2">The degree of transparency of the color2 as a value from 0.0 (opaque) through 1.0 (clear).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; transparency1: Double; color2: DDN.System.Drawing.DNColor; transparency2: Double; style: DNGradientStyleType; variant: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the gradient stop collection.
    ///</summary>
    property GradientStops: DNGradientStopCollection read get_GradientStops;
    ///<summary>
    ///  Gets the gradient fill type.
    ///</summary>
    property FillType: DNGradientFillType read get_FillType;
    ///<summary>
    ///  Gets the gradient direction type.
    ///</summary>
    property DirectionType: DNGradientDirectionType read get_DirectionType;
    ///<summary>
    ///  The angle of linear fill.
    ///</summary>
    property Angle: Single read get_Angle write set_Angle;
  end;

  TDNGradientFill = class(TDNGenericImport<DNGradientFillClass, DNGradientFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGroupFillClass = interface(DNFillClass)
  ['{0E538EEF-DFB3-57A1-AC6E-170BFF128AD2}']
  end;

  ///<summary>
  ///  Represents this fill format should inherit the fill properties of the group.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GroupFill')]
  DNGroupFill = interface(DNFill)
  ['{036CC05D-8CE2-3AA2-8DBE-B7F601476F8C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGroupFill = class(TDNGenericImport<DNGroupFillClass, DNGroupFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNNoneFillClass = interface(DNFillClass)
  ['{B5E37114-1D56-5306-BD95-65688324AD02}']
  end;

  ///<summary>
  ///  Represents no fill.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.NoneFill')]
  DNNoneFill = interface(DNFill)
  ['{98D1EC5C-CC2E-3F9C-9956-420739703E60}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNoneFill = class(TDNGenericImport<DNNoneFillClass, DNNoneFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPatternFillClass = interface(DNFillClass)
  ['{8675D2EF-B431-5E25-A351-6900A8113296}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents pattern fill format
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PatternFill')]
  DNPatternFill = interface(DNFill)
  ['{B3C8E427-EDDE-363B-BB54-CA4099CF65CC}']
  { getters & setters } 

    function get_Pattern: DNFillPattern;
    procedure set_Pattern(value: DNFillPattern);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroundCellsColor: DNCellsColor;
    procedure set_BackgroundCellsColor(value: DNCellsColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundCellsColor: DNCellsColor;
    procedure set_ForegroundCellsColor(value: DNCellsColor);
    function get_ForeTransparency: Double;
    procedure set_ForeTransparency(value: Double);
    function get_BackTransparency: Double;
    procedure set_BackTransparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the fill pattern type
    ///</summary>
    property Pattern: DNFillPattern read get_Pattern write set_Pattern;
    ///<summary>
    ///  Gets or sets the background <see cref="T:System.Drawing.Color" />
    ///  of the <see cref="T:Aspose.Cells.Drawing.Area" />
    ///  .
    ///</summary>
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets and sets the foreground <see cref="T:Aspose.Cells.CellsColor" />
    ///  object.
    ///</summary>
    property BackgroundCellsColor: DNCellsColor read get_BackgroundCellsColor write set_BackgroundCellsColor;
    ///<summary>
    ///  Gets or sets the foreground <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets and sets the foreground <see cref="T:Aspose.Cells.CellsColor" />
    ///  object.
    ///</summary>
    property ForegroundCellsColor: DNCellsColor read get_ForegroundCellsColor write set_ForegroundCellsColor;
    ///<summary>
    ///  Gets or sets the transparency of foreground color.
    ///</summary>
    property ForeTransparency: Double read get_ForeTransparency write set_ForeTransparency;
    ///<summary>
    ///  Gets or sets the transparency of background color.
    ///</summary>
    property BackTransparency: Double read get_BackTransparency write set_BackTransparency;
  end;

  TDNPatternFill = class(TDNGenericImport<DNPatternFillClass, DNPatternFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSolidFillClass = interface(DNFillClass)
  ['{DBF118A0-4B79-5020-8689-108D1B5919F9}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents solid fill format
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.SolidFill')]
  DNSolidFill = interface(DNFill)
  ['{F88884CE-F006-3EC4-91D6-2262EA561DDA}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_CellsColor: DNCellsColor;
    procedure set_CellsColor(value: DNCellsColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the <see cref="T:System.Drawing.Color" />
    ///  .
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the <see cref="P:Aspose.Cells.Drawing.SolidFill.CellsColor" />
    ///  object.
    ///</summary>
    property CellsColor: DNCellsColor read get_CellsColor write set_CellsColor;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNSolidFill = class(TDNGenericImport<DNSolidFillClass, DNSolidFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextureFillClass = interface(DNFillClass)
  ['{910BF699-EEAE-5F21-BE34-72D29AA4367F}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents texture fill format
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.TextureFill')]
  DNTextureFill = interface(DNFill)
  ['{0BA3057C-C4F3-3E71-9982-6760D1E1EB22}']
  { getters & setters } 

    function get_Type: DNTextureType;
    procedure set_Type(value: DNTextureType);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_IsTiling: Boolean;
    procedure set_IsTiling(value: Boolean);
    function get_PicFormatOption: DNPicFormatOption;
    procedure set_PicFormatOption(value: DNPicFormatOption);
    function get_TilePicOption: DNTilePicOption;
    procedure set_TilePicOption(value: DNTilePicOption);
    function get_PictureFormatType: DNFillPictureType;
    procedure set_PictureFormatType(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the texture type
    ///</summary>
    property &Type: DNTextureType read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets the image data of the fill.
    ///</summary>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    ///<summary>
    ///  Indicates whether tile picture as texture.
    ///</summary>
    property IsTiling: Boolean read get_IsTiling write set_IsTiling;
    ///<summary>
    ///  Gets or sets picture format option.
    ///</summary>
    property PicFormatOption: DNPicFormatOption read get_PicFormatOption write set_PicFormatOption;
    ///<summary>
    ///  Gets or sets tile picture option.
    ///</summary>
    property TilePicOption: DNTilePicOption read get_TilePicOption write set_TilePicOption;
    ///<summary>
    ///  Gets and sets the picture format type.
    ///</summary>
    property PictureFormatType: DNFillPictureType read get_PictureFormatType write set_PictureFormatType;
    ///<summary>
    ///  Gets and sets the picture format scale.
    ///</summary>
    property Scale: Double read get_Scale write set_Scale;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNTextureFill = class(TDNGenericImport<DNTextureFillClass, DNTextureFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNFillFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1F8A2007-5FAC-5C2A-90E0-EC760932F432}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents fill formatting for a shape.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Filling the area of the 2nd NSeries with a gradient
  ///  chart.NSeries[1].Area.FillFormat.SetOneColorGradient(Color.Lime, 1, GradientStyleType.Horizontal, 1);
  ///  [Visual Basic]
  ///  'Filling the area of the 2nd NSeries with a gradient
  ///  chart.NSeries(1).Area.FillFormat.SetOneColorGradient(Color.Lime, 1, GradientStyleType.Horizontal, 1)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.FillFormat')]
  DNFillFormat = interface(DDN.mscorlib.DNObject)
  ['{D1BF70F9-0ECD-31D1-90B9-6549FF456B1D}']
  { getters & setters } 

    function get_Type: DNFillType;
    procedure set_Type(value: DNFillType);
    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_SetType: DNFormatSetType;
    procedure set_SetType(value: DNFormatSetType);
    function get_GradientFill: DNGradientFill;
    function get_TextureFill: DNTextureFill;
    function get_SolidFill: DNSolidFill;
    function get_PatternFill: DNPatternFill;
    function get_GradientColorType: DNGradientColorType;
    function get_GradientStyle: DNGradientStyleType;
    function get_GradientColor1: DDN.System.Drawing.DNColor;
    function get_GradientColor2: DDN.System.Drawing.DNColor;
    function get_GradientDegree: Double;
    function get_GradientVariant: Int32;
    function get_PresetColor: DNGradientPresetType;
    function get_Texture: DNTextureType;
    procedure set_Texture(value: DNTextureType);
    function get_Pattern: DNFillPattern;
    procedure set_Pattern(value: DNFillPattern);
    function get_PictureFormatType: DNFillPictureType;
    procedure set_PictureFormatType(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);

  { methods } 

    ///<summary>
    ///  Sets the specified fill to a one-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color">One gradient color.</param>
    ///  <param name="degree">The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; style: DNGradientStyleType; variant: Int32); overload;
    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="transparency1">The degree of transparency of the color1 as a value from 0.0 (opaque) through 1.0 (clear).</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="transparency2">The degree of transparency of the color2 as a value from 0.0 (opaque) through 1.0 (clear).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; transparency1: Double; color2: DDN.System.Drawing.DNColor; transparency2: Double; style: DNGradientStyleType; variant: Int32); overload;
    ///<summary>
    ///  Sets the specified fill to a preset-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="presetColor">Preset color type</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetPresetColorGradient(presetColor: DNGradientPresetType; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the fill type.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use FillFormat.FillType property instead.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property &Type: DNFillType read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets fill type
    ///</summary>
    property FillType: DNFillType read get_FillType write set_FillType;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Gets the fill format set type.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use FillFormat.FillType property instead.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property SetType: DNFormatSetType read get_SetType write set_SetType;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.GradientFill" />
    ///  object.
    ///</summary>
    property GradientFill: DNGradientFill read get_GradientFill;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.TextureFill" />
    ///  object.
    ///</summary>
    property TextureFill: DNTextureFill read get_TextureFill;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.SolidFill" />
    ///  object.
    ///</summary>
    property SolidFill: DNSolidFill read get_SolidFill;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.PatternFill" />
    ///  object.
    ///</summary>
    property PatternFill: DNPatternFill read get_PatternFill;
    ///<summary>
    ///  Returns the gradient color type for the specified fill.
    ///</summary>
    property GradientColorType: DNGradientColorType read get_GradientColorType;
    ///<summary>
    ///  Returns the gradient style for the specified fill.
    ///</summary>
    property GradientStyle: DNGradientStyleType read get_GradientStyle;
    ///<summary>
    ///  Returns the gradient color 1 for the specified fill.
    ///</summary>
    property GradientColor1: DDN.System.Drawing.DNColor read get_GradientColor1;
    ///<summary>
    ///  Returns the gradient color 2 for the specified fill.
    ///</summary>
    ///<remarks>Only when the gradient color type is GradientColorType.TwoColors, this property is meaningful.</remarks>
    property GradientColor2: DDN.System.Drawing.DNColor read get_GradientColor2;
    ///<summary>
    ///  Returns the gradient degree for the specified fill.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///<remarks>Can only be a value from 0.0 (dark) through 1.0 (light).</remarks>
    property GradientDegree: Double read get_GradientDegree;
    ///<summary>
    ///  Returns the gradient variant for the specified fill.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///<remarks>Can only be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</remarks>
    property GradientVariant: Int32 read get_GradientVariant;
    ///<summary>
    ///  Returns the gradient preset color for the specified fill.
    ///</summary>
    property PresetColor: DNGradientPresetType read get_PresetColor;
    ///<summary>
    ///  Represents the texture type for the specified fill.
    ///</summary>
    property Texture: DNTextureType read get_Texture write set_Texture;
    ///<summary>
    ///  Represents an area's display pattern.
    ///</summary>
    property Pattern: DNFillPattern read get_Pattern write set_Pattern;
    ///<summary>
    ///  Gets and sets the picture format type.
    ///</summary>
    property PictureFormatType: DNFillPictureType read get_PictureFormatType write set_PictureFormatType;
    ///<summary>
    ///  Gets and sets the picture format scale.
    ///</summary>
    property Scale: Double read get_Scale write set_Scale;
    ///<summary>
    ///  Gets and sets the picture image data.
    ///</summary>
    ///<remarks>If the fill format is not custom texture format, returns null.</remarks>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
  end;

  TDNFillFormat = class(TDNGenericImport<DNFillFormatClass, DNFillFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLineFormatClass = interface(DNFillFormatClass)
  ['{4D148680-6698-5C05-A899-4596FC4EC9D4}']
  end;

  ///<summary>
  ///  Represents all setting of the line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.LineFormat')]
  DNLineFormat = interface(DNFillFormat)
  ['{2458C823-6A41-33C7-A796-7A7E3CE50B64}']
  { getters & setters } 

    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashStyle: DNMsoLineDashStyle;
    procedure set_DashStyle(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_BeginArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_BeginArrowheadLength: DNMsoArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNMsoArrowheadLength);
    function get_EndArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_EndArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowheadLength: DNMsoArrowheadLength;
    procedure set_EndArrowheadLength(value: DNMsoArrowheadLength);
    function get_Weight: Double;
    procedure set_Weight(value: Double);
    function get_Type: DNFillType;
    procedure set_Type(value: DNFillType);
    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_SetType: DNFormatSetType;
    procedure set_SetType(value: DNFormatSetType);
    function get_GradientFill: DNGradientFill;
    function get_TextureFill: DNTextureFill;
    function get_SolidFill: DNSolidFill;
    function get_PatternFill: DNPatternFill;
    function get_GradientColorType: DNGradientColorType;
    function get_GradientStyle: DNGradientStyleType;
    function get_GradientColor1: DDN.System.Drawing.DNColor;
    function get_GradientColor2: DDN.System.Drawing.DNColor;
    function get_GradientDegree: Double;
    function get_GradientVariant: Int32;
    function get_PresetColor: DNGradientPresetType;
    function get_Texture: DNTextureType;
    procedure set_Texture(value: DNTextureType);
    function get_Pattern: DNFillPattern;
    procedure set_Pattern(value: DNFillPattern);
    function get_PictureFormatType: DNFillPictureType;
    procedure set_PictureFormatType(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);

  { methods } 

    ///<summary>
    ///  Sets the specified fill to a one-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color">One gradient color.</param>
    ///  <param name="degree">The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; style: DNGradientStyleType; variant: Int32); overload;
    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="transparency1">The degree of transparency of the color1 as a value from 0.0 (opaque) through 1.0 (clear).</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="transparency2">The degree of transparency of the color2 as a value from 0.0 (opaque) through 1.0 (clear).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; transparency1: Double; color2: DDN.System.Drawing.DNColor; transparency2: Double; style: DNGradientStyleType; variant: Int32); overload;
    ///<summary>
    ///  Sets the specified fill to a preset-color gradient.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///  <param name="presetColor">Preset color type</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetPresetColorGradient(presetColor: DNGradientPresetType; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the line compound type.
    ///</summary>
    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    ///<summary>
    ///  Specifies the line dash type.
    ///</summary>
    property DashStyle: DNMsoLineDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  Specifies the ending caps.
    ///</summary>
    property CapType: DNLineCapType read get_CapType write set_CapType;
    ///<summary>
    ///  Specifies the line join type.
    ///</summary>
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    ///<summary>
    ///  Gets and sets the begin arrow type of the line.
    ///</summary>
    property BeginArrowheadStyle: DNMsoArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    ///<summary>
    ///  Gets and sets the begin arrow width type of the line.
    ///</summary>
    property BeginArrowheadWidth: DNMsoArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    ///<summary>
    ///  Gets and sets the begin arrow length type of the line.
    ///</summary>
    property BeginArrowheadLength: DNMsoArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    ///<summary>
    ///  Gets and sets the end arrow type of the line.
    ///</summary>
    property EndArrowheadStyle: DNMsoArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    ///<summary>
    ///  Gets and sets the end arrow width type of the line.
    ///</summary>
    property EndArrowheadWidth: DNMsoArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    ///<summary>
    ///  Gets and sets the end arrow length type of the line.
    ///</summary>
    property EndArrowheadLength: DNMsoArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of points.
    ///</summary>
    property Weight: Double read get_Weight write set_Weight;
    ///<summary>
    ///  Gets and sets the fill type.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use FillFormat.FillType property instead.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property &Type: DNFillType read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets fill type
    ///</summary>
    property FillType: DNFillType read get_FillType write set_FillType;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Gets the fill format set type.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use FillFormat.FillType property instead.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property SetType: DNFormatSetType read get_SetType write set_SetType;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.GradientFill" />
    ///  object.
    ///</summary>
    property GradientFill: DNGradientFill read get_GradientFill;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.TextureFill" />
    ///  object.
    ///</summary>
    property TextureFill: DNTextureFill read get_TextureFill;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.SolidFill" />
    ///  object.
    ///</summary>
    property SolidFill: DNSolidFill read get_SolidFill;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Cells.Drawing.FillFormat.PatternFill" />
    ///  object.
    ///</summary>
    property PatternFill: DNPatternFill read get_PatternFill;
    ///<summary>
    ///  Returns the gradient color type for the specified fill.
    ///</summary>
    property GradientColorType: DNGradientColorType read get_GradientColorType;
    ///<summary>
    ///  Returns the gradient style for the specified fill.
    ///</summary>
    property GradientStyle: DNGradientStyleType read get_GradientStyle;
    ///<summary>
    ///  Returns the gradient color 1 for the specified fill.
    ///</summary>
    property GradientColor1: DDN.System.Drawing.DNColor read get_GradientColor1;
    ///<summary>
    ///  Returns the gradient color 2 for the specified fill.
    ///</summary>
    ///<remarks>Only when the gradient color type is GradientColorType.TwoColors, this property is meaningful.</remarks>
    property GradientColor2: DDN.System.Drawing.DNColor read get_GradientColor2;
    ///<summary>
    ///  Returns the gradient degree for the specified fill.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///<remarks>Can only be a value from 0.0 (dark) through 1.0 (light).</remarks>
    property GradientDegree: Double read get_GradientDegree;
    ///<summary>
    ///  Returns the gradient variant for the specified fill.
    ///  Only applies for Excel 2007.
    ///</summary>
    ///<remarks>Can only be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</remarks>
    property GradientVariant: Int32 read get_GradientVariant;
    ///<summary>
    ///  Returns the gradient preset color for the specified fill.
    ///</summary>
    property PresetColor: DNGradientPresetType read get_PresetColor;
    ///<summary>
    ///  Represents the texture type for the specified fill.
    ///</summary>
    property Texture: DNTextureType read get_Texture write set_Texture;
    ///<summary>
    ///  Represents an area's display pattern.
    ///</summary>
    property Pattern: DNFillPattern read get_Pattern write set_Pattern;
    ///<summary>
    ///  Gets and sets the picture format type.
    ///</summary>
    property PictureFormatType: DNFillPictureType read get_PictureFormatType write set_PictureFormatType;
    ///<summary>
    ///  Gets and sets the picture format scale.
    ///</summary>
    property Scale: Double read get_Scale write set_Scale;
    ///<summary>
    ///  Gets and sets the picture image data.
    ///</summary>
    ///<remarks>If the fill format is not custom texture format, returns null.</remarks>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
  end;

  TDNLineFormat = class(TDNGenericImport<DNLineFormatClass, DNLineFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNFormat3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D460D01-C9E4-5B60-8B3A-8DA7924B2714}']
  end;

  ///<summary>
  ///  This class specifies the 3D shape properties for a chart element or shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Format3D')]
  DNFormat3D = interface(DDN.mscorlib.DNObject)
  ['{E7451057-C240-3454-85A6-AFA1FE1A1B43}']
  { getters & setters } 

    function get_TopBevel: DNBevel;
    function get_SurfaceMaterialType: DNPresetMaterialType;
    procedure set_SurfaceMaterialType(value: DNPresetMaterialType);
    function get_SurfaceLightingType: DNLightRigType;
    procedure set_SurfaceLightingType(value: DNLightRigType);
    function get_LightingAngle: Double;
    procedure set_LightingAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Indicates if the shape has top bevel data.
    ///</summary>
    ///<returns></returns>
    function HasTopBevelData: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the <seealso cref="T:Aspose.Cells.Drawing.Bevel" />
    ///  object that holds the properties associated with defining a bevel on the top or front face of a shape.
    ///</summary>
    property TopBevel: DNBevel read get_TopBevel;
    ///<summary>
    ///  Gets and sets the material type which is combined with the lighting properties to give the final look and feel of a shape.
    ///  Default value is PresetMaterialType.WarmMatte.
    ///</summary>
    property SurfaceMaterialType: DNPresetMaterialType read get_SurfaceMaterialType write set_SurfaceMaterialType;
    ///<summary>
    ///  Gets and sets the lighting type which is to be applied to the scene of the shape.
    ///  Default value is LightRigType.ThreePoint.
    ///</summary>
    property SurfaceLightingType: DNLightRigType read get_SurfaceLightingType write set_SurfaceLightingType;
    ///<summary>
    ///  Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
    ///</summary>
    property LightingAngle: Double read get_LightingAngle write set_LightingAngle;
  end;

  TDNFormat3D = class(TDNGenericImport<DNFormat3DClass, DNFormat3D>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGeometryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A9E7AF8F-115F-5870-9A26-C00725A88C29}']
  end;

  ///<summary>
  ///  Represents a geometric shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Geometry')]
  DNGeometry = interface(DDN.mscorlib.DNObject)
  ['{AE245FB3-29AB-37E4-A1F0-8F8FDA46DA7F}']
  { getters & setters } 

    function get_ShapeAdjustValues: DNShapeGuideCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets a collection of shape adjust value
    ///</summary>
    property ShapeAdjustValues: DNShapeGuideCollection read get_ShapeAdjustValues;
  end;

  TDNGeometry = class(TDNGenericImport<DNGeometryClass, DNGeometry>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCustomGeometryClass = interface(DNGeometryClass)
  ['{E491DDB9-94C3-5501-A505-AEE5B65D44D9}']
  end;

  ///<summary>
  ///  Represents a custom geometric shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.CustomGeometry')]
  DNCustomGeometry = interface(DNGeometry)
  ['{188E46BE-6F1F-3ECF-A7F8-288133979C34}']
  { getters & setters } 

    function get_Paths: DNShapePathCollection;
    function get_ShapeAdjustValues: DNShapeGuideCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets path collection information when shape is a NotPrimitive autoshape
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets a collection of shape adjust value
    ///</summary>
    property ShapeAdjustValues: DNShapeGuideCollection read get_ShapeAdjustValues;
  end;

  TDNCustomGeometry = class(TDNGenericImport<DNCustomGeometryClass, DNCustomGeometry>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGlowEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0DB17035-A9B9-59F5-B9C3-04392071C135}']
  end;

  ///<summary>
  ///  This class specifies a glow effect, in which a color blurred outline
  ///  is added outside the edges of the object.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GlowEffect')]
  DNGlowEffect = interface(DDN.mscorlib.DNObject)
  ['{10C5F938-FCE5-36B6-A0F9-ADC8AB575559}']
  { getters & setters } 

    function get_Color: DNCellsColor;
    procedure set_Color(value: DNCellsColor);
    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the color of the glow effect.
    ///</summary>
    property Color: DNCellsColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the radius of the glow, in unit of points.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use GlowEffect.Size property.
    ///  This property will be removed 6 months later since September 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Gets and sets the radius of the glow, in unit of points.
    ///</summary>
    property Size: Double read get_Size write set_Size;
    ///<summary>
    ///  Gets and sets the degree of transparency of the glow effect. Range from 0.0 (opaque) to 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNGlowEffect = class(TDNGenericImport<DNGlowEffectClass, DNGlowEffect>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGradientStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A5B4D64-EE43-5E0B-92C0-D71CA2626FE7}']
  end;

  ///<summary>
  ///  Represents the gradient stop.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.GradientStop')]
  DNGradientStop = interface(DDN.mscorlib.DNObject)
  ['{C91CB130-27F1-3870-8A64-E4A4E3C32693}']
  { getters & setters } 

    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_CellsColor: DNCellsColor;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The position of the stop.
    ///</summary>
    property Position: Double read get_Position write set_Position;
    ///<summary>
    ///  Gets the color of this gradient stop.
    ///</summary>
    property CellsColor: DNCellsColor read get_CellsColor;
    ///<summary>
    ///  Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNGradientStop = class(TDNGenericImport<DNGradientStopClass, DNGradientStop>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E6E4CC86-6ECC-5511-965F-FCA233EC135C}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the line format.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Applying a dotted line style on the lines of an NSeries
  ///  chart.NSeries[0].Border.Style = LineType.Dot;
  ///  chart.NSeries[0].Border.Color = Color.Red;
  ///  //Applying a triangular marker style on the data markers of an NSeries
  ///  chart.NSeries[0].MarkerStyle = ChartMarkerType.Triangle;
  ///  //Setting the weight of all lines in an NSeries to medium
  ///  chart.NSeries[1].Border.Weight = WeightType.MediumLine;
  ///  chart.NSeries[1].Border.Color = Color.Green;
  ///  [Visual Basic]
  ///  'Applying a dotted line style on the lines of an NSeries
  ///  chart.NSeries(0).Border.Style = LineType.Dot
  ///  chart.NSeries(0).Border.Color = Color.Red
  ///  'Applying a triangular marker style on the data markers of an NSeries
  ///  chart.NSeries(0).MarkerStyle = ChartMarkerType.Triangle
  ///  'Setting the weight of all lines in an NSeries to medium
  ///  chart.NSeries(1).Border.Weight = WeightType.MediumLine
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.Line')]
  DNLine = interface(DDN.mscorlib.DNObject)
  ['{024360BA-999F-3BB7-9A36-3CFBE3F879CC}']
  { getters & setters } 

    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashType: DNMsoLineDashStyle;
    procedure set_DashType(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginType: DNMsoArrowheadStyle;
    procedure set_BeginType(value: DNMsoArrowheadStyle);
    function get_EndType: DNMsoArrowheadStyle;
    procedure set_EndType(value: DNMsoArrowheadStyle);
    function get_BeginArrowLength: DNMsoArrowheadLength;
    procedure set_BeginArrowLength(value: DNMsoArrowheadLength);
    function get_EndArrowLength: DNMsoArrowheadLength;
    procedure set_EndArrowLength(value: DNMsoArrowheadLength);
    function get_BeginArrowWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowWidth(value: DNMsoArrowheadWidth);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Style: DNLineType;
    procedure set_Style(value: DNLineType);
    function get_Weight: DNWeightType;
    procedure set_Weight(value: DNWeightType);
    function get_WeightPt: Double;
    procedure set_WeightPt(value: Double);
    function get_WeightPx: Double;
    procedure set_WeightPx(value: Double);
    function get_FormattingType: DNChartLineFormattingType;
    procedure set_FormattingType(value: DNChartLineFormattingType);
    function get_IsAutomaticColor: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_GradientFill: DNGradientFill;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the compound line type
    ///</summary>
    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    ///<summary>
    ///  Specifies the dash line type
    ///</summary>
    property DashType: DNMsoLineDashStyle read get_DashType write set_DashType;
    ///<summary>
    ///  Specifies the ending caps.
    ///</summary>
    property CapType: DNLineCapType read get_CapType write set_CapType;
    ///<summary>
    ///  Specifies the joining caps.
    ///</summary>
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    ///<summary>
    ///  Specifies an arrowhead for the begin of a line.
    ///</summary>
    property BeginType: DNMsoArrowheadStyle read get_BeginType write set_BeginType;
    ///<summary>
    ///  Specifies an arrowhead for the end of a line.
    ///</summary>
    property EndType: DNMsoArrowheadStyle read get_EndType write set_EndType;
    ///<summary>
    ///  Specifies the length of the arrowhead for the begin of a line.
    ///</summary>
    property BeginArrowLength: DNMsoArrowheadLength read get_BeginArrowLength write set_BeginArrowLength;
    ///<summary>
    ///  Specifies the length of the arrowhead for the end of a line.
    ///</summary>
    property EndArrowLength: DNMsoArrowheadLength read get_EndArrowLength write set_EndArrowLength;
    ///<summary>
    ///  Specifies the width of the arrowhead for the begin of a line.
    ///</summary>
    property BeginArrowWidth: DNMsoArrowheadWidth read get_BeginArrowWidth write set_BeginArrowWidth;
    ///<summary>
    ///  Specifies the width of the arrowhead for the end of a line.
    ///</summary>
    property EndArrowWidth: DNMsoArrowheadWidth read get_EndArrowWidth write set_EndArrowWidth;
    ///<summary>
    ///  Gets and sets the theme color.
    ///</summary>
    ///<remarks>
    ///  If the foreground color is not a theme color, NULL will be returned.
    ///</remarks>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Represents the <see cref="T:System.Drawing.Color" />
    ///  of the line.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Represents the style of the line.
    ///</summary>
    property Style: DNLineType read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the <see cref="T:Aspose.Cells.Drawing.WeightType" />
    ///  of the line.
    ///</summary>
    property Weight: DNWeightType read get_Weight write set_Weight;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of points.
    ///</summary>
    property WeightPt: Double read get_WeightPt write set_WeightPt;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of pixels.
    ///</summary>
    property WeightPx: Double read get_WeightPx write set_WeightPx;
    ///<summary>
    ///  Gets or sets format type.
    ///</summary>
    property FormattingType: DNChartLineFormattingType read get_FormattingType write set_FormattingType;
    ///<summary>
    ///  Indicates whether the color of line is auotmatic assigned.
    ///</summary>
    property IsAutomaticColor: Boolean read get_IsAutomaticColor;
    ///<summary>
    ///  Represents whether the line is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates whether this line style is auto assigned.
    ///</summary>
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    ///<summary>
    ///  Represents gradient fill.
    ///</summary>
    property GradientFill: DNGradientFill read get_GradientFill;
  end;

  TDNLine = class(TDNGenericImport<DNLineClass, DNLine>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNErrorBarClass = interface(DNLineClass)
  ['{584F45F6-119C-5F32-A454-D4F9AAD0AFF9}']
  end;

  ///<summary>
  ///  Represents error bar of data series.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  Cells cells = workbook.Worksheets[0].Cells;
  ///  cells["a1"].PutValue(2);
  ///  cells["a2"].PutValue(5);
  ///  cells["a3"].PutValue(3);
  ///  cells["a4"].PutValue(6);
  ///  cells["b1"].PutValue(4);
  ///  cells["b2"].PutValue(3);
  ///  cells["b3"].PutValue(6);
  ///  cells["b4"].PutValue(7);
  ///  cells["C1"].PutValue("Q1");
  ///  cells["C2"].PutValue("Q2");
  ///  cells["C3"].PutValue("Y1");
  ///  cells["C4"].PutValue("Y2");
  ///  int chartIndex = excel.Worksheets[0].Charts.Add(ChartType.Column, 11, 0, 27, 10);
  ///  Chart chart = excel.Worksheets[0].Charts[chartIndex];
  ///  chart.NSeries.Add("A1:B4", true);
  ///  chart.NSeries.CategoryData = "C1:C4";
  ///  for(int i = 0; i &lt; chart.NSeries.Count; i ++)
  ///  {
  ///  ASeries aseries = chart.NSeries[i];
  ///  aseries.YErrorBar.DisplayType = ErrorBarDisplayType.Minus;
  ///  aseries.YErrorBar.Type = ErrorBarType.FixedValue;
  ///  aseries.YErrorBar.Amount = 5;
  ///  }
  ///  [Visual Basic]
  ///  Dim workbook As Workbook =  New Workbook()
  ///  Dim cells As Cells =  workbook.Worksheets(0).Cells
  ///  cells("a1").PutValue(2)
  ///  cells("a2").PutValue(5)
  ///  cells("a3").PutValue(3)
  ///  cells("a4").PutValue(6)
  ///  cells("b1").PutValue(4)
  ///  cells("b2").PutValue(3)
  ///  cells("b3").PutValue(6)
  ///  cells("b4").PutValue(7)
  ///  cells("C1").PutValue("Q1")
  ///  cells("C2").PutValue("Q2")
  ///  cells("C3").PutValue("Y1")
  ///  cells("C4").PutValue("Y2")
  ///  Dim chartIndex As Integer =  excel.Worksheets(0).Charts.Add(ChartType.Column,11,0,27,10)
  ///  Dim chart As Chart =  excel.Worksheets(0).Charts(chartIndex)
  ///  chart.NSeries.Add("A1:B4", True)
  ///  chart.NSeries.CategoryData = "C1:C4"
  ///  Dim i As Integer
  ///  For  i = 0 To chart.NSeries.Count - 1
  ///  Dim aseries As ASeries =  chart.NSeries(i)
  ///  aseries.YErrorBar.DisplayType = ErrorBarDisplayType.Minus
  ///  aseries.YErrorBar.Type = ErrorBarType.FixedValue
  ///  aseries.YErrorBar.Amount = 5
  ///  Next
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.ErrorBar')]
  DNErrorBar = interface(DNLine)
  ['{90D6AE2C-F481-3300-A324-39B62A4298E6}']
  { getters & setters } 

    function get_Type: DNErrorBarType;
    procedure set_Type(value: DNErrorBarType);
    function get_DisplayType: DNErrorBarDisplayType;
    procedure set_DisplayType(value: DNErrorBarDisplayType);
    function get_Amount: Double;
    procedure set_Amount(value: Double);
    function get_ShowMarkerTTop: Boolean;
    procedure set_ShowMarkerTTop(value: Boolean);
    function get_PlusValue: string;
    procedure set_PlusValue(value: string);
    function get_MinusValue: string;
    procedure set_MinusValue(value: string);
    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashType: DNMsoLineDashStyle;
    procedure set_DashType(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginType: DNMsoArrowheadStyle;
    procedure set_BeginType(value: DNMsoArrowheadStyle);
    function get_EndType: DNMsoArrowheadStyle;
    procedure set_EndType(value: DNMsoArrowheadStyle);
    function get_BeginArrowLength: DNMsoArrowheadLength;
    procedure set_BeginArrowLength(value: DNMsoArrowheadLength);
    function get_EndArrowLength: DNMsoArrowheadLength;
    procedure set_EndArrowLength(value: DNMsoArrowheadLength);
    function get_BeginArrowWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowWidth(value: DNMsoArrowheadWidth);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Style: DNLineType;
    procedure set_Style(value: DNLineType);
    function get_Weight: DNWeightType;
    procedure set_Weight(value: DNWeightType);
    function get_WeightPt: Double;
    procedure set_WeightPt(value: Double);
    function get_WeightPx: Double;
    procedure set_WeightPx(value: Double);
    function get_FormattingType: DNChartLineFormattingType;
    procedure set_FormattingType(value: DNChartLineFormattingType);
    function get_IsAutomaticColor: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_GradientFill: DNGradientFill;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents error bar amount type.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  //Sets custom error bar type
    ///  aseries.YErrorBar.Type = ErrorBarType.InnerCustom;
    ///  aseries.YErrorBar.PlusValue = "=Sheet1!A1";
    ///  aseries.YErrorBar.MinusValue = "=Sheet1!A2";
    ///  [Visual Basic]
    ///  'Sets custom error bar type
    ///  aseries.YErrorBar.Type = ErrorBarType.InnerCustom
    ///  aseries.YErrorBar.PlusValue = "=Sheet1!A1"
    ///  aseries.YErrorBar.MinusValue = "=Sheet1!A2"
    ///</code></example>
    property &Type: DNErrorBarType read get_Type write set_Type;
    ///<summary>
    ///  Represents error bar display type.
    ///</summary>
    property DisplayType: DNErrorBarDisplayType read get_DisplayType write set_DisplayType;
    ///<summary>
    ///  Represents amount of error bar.
    ///<remarks> The amount must be greater than and equal to zero.</remarks>
    ///</summary>
    property Amount: Double read get_Amount write set_Amount;
    ///<summary>
    ///  Indicates if formatting error bars with a T-top.
    ///</summary>
    property ShowMarkerTTop: Boolean read get_ShowMarkerTTop write set_ShowMarkerTTop;
    ///<summary>
    ///  Represents positive error amount when error bar type is Custom.
    ///</summary>
    property PlusValue: string read get_PlusValue write set_PlusValue;
    ///<summary>
    ///  Represents negative error amount when error bar type is Custom.
    ///</summary>
    property MinusValue: string read get_MinusValue write set_MinusValue;
    ///<summary>
    ///  Specifies the compound line type
    ///</summary>
    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    ///<summary>
    ///  Specifies the dash line type
    ///</summary>
    property DashType: DNMsoLineDashStyle read get_DashType write set_DashType;
    ///<summary>
    ///  Specifies the ending caps.
    ///</summary>
    property CapType: DNLineCapType read get_CapType write set_CapType;
    ///<summary>
    ///  Specifies the joining caps.
    ///</summary>
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    ///<summary>
    ///  Specifies an arrowhead for the begin of a line.
    ///</summary>
    property BeginType: DNMsoArrowheadStyle read get_BeginType write set_BeginType;
    ///<summary>
    ///  Specifies an arrowhead for the end of a line.
    ///</summary>
    property EndType: DNMsoArrowheadStyle read get_EndType write set_EndType;
    ///<summary>
    ///  Specifies the length of the arrowhead for the begin of a line.
    ///</summary>
    property BeginArrowLength: DNMsoArrowheadLength read get_BeginArrowLength write set_BeginArrowLength;
    ///<summary>
    ///  Specifies the length of the arrowhead for the end of a line.
    ///</summary>
    property EndArrowLength: DNMsoArrowheadLength read get_EndArrowLength write set_EndArrowLength;
    ///<summary>
    ///  Specifies the width of the arrowhead for the begin of a line.
    ///</summary>
    property BeginArrowWidth: DNMsoArrowheadWidth read get_BeginArrowWidth write set_BeginArrowWidth;
    ///<summary>
    ///  Specifies the width of the arrowhead for the end of a line.
    ///</summary>
    property EndArrowWidth: DNMsoArrowheadWidth read get_EndArrowWidth write set_EndArrowWidth;
    ///<summary>
    ///  Gets and sets the theme color.
    ///</summary>
    ///<remarks>
    ///  If the foreground color is not a theme color, NULL will be returned.
    ///</remarks>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Represents the <see cref="T:System.Drawing.Color" />
    ///  of the line.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Represents the style of the line.
    ///</summary>
    property Style: DNLineType read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the <see cref="T:Aspose.Cells.Drawing.WeightType" />
    ///  of the line.
    ///</summary>
    property Weight: DNWeightType read get_Weight write set_Weight;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of points.
    ///</summary>
    property WeightPt: Double read get_WeightPt write set_WeightPt;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of pixels.
    ///</summary>
    property WeightPx: Double read get_WeightPx write set_WeightPx;
    ///<summary>
    ///  Gets or sets format type.
    ///</summary>
    property FormattingType: DNChartLineFormattingType read get_FormattingType write set_FormattingType;
    ///<summary>
    ///  Indicates whether the color of line is auotmatic assigned.
    ///</summary>
    property IsAutomaticColor: Boolean read get_IsAutomaticColor;
    ///<summary>
    ///  Represents whether the line is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates whether this line style is auto assigned.
    ///</summary>
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    ///<summary>
    ///  Represents gradient fill.
    ///</summary>
    property GradientFill: DNGradientFill read get_GradientFill;
  end;

  TDNErrorBar = class(TDNGenericImport<DNErrorBarClass, DNErrorBar>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTrendlineClass = interface(DNLineClass)
  ['{2DB99B77-71AC-5C7C-8D2F-04006F56C054}']
  end;

  ///<summary>
  ///  Represents a trendline in a chart.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "A4" cell
  ///  worksheet.Cells["A4"].PutValue(200);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a sample value to "B4" cell
  ///  worksheet.Cells["B4"].PutValue(40);
  ///  //Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells["C1"].PutValue("Q1");
  ///  //Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells["C2"].PutValue("Q2");
  ///  //Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells["C3"].PutValue("Y1");
  ///  //Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells["C4"].PutValue("Y2");
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", true);
  ///  //Setting the data source for the category data of NSeries
  ///  chart.NSeries.CategoryData = "C1:C4";
  ///  //adding a linear trendline
  ///  int index = chart.NSeries[0].TrendLines.Add(TrendlineType.Linear);
  ///  Trendline trendline = chart.NSeries[0].TrendLines[index];
  ///  //Setting the custom name of the trendline.
  ///  trendline.Name = "Linear";
  ///  //Displaying the equation on chart
  ///  trendline.DisplayEquation = true;
  ///  //Displaying the R-Squared value on chart
  ///  trendline.DisplayRSquared = true;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Excel object
  ///  Dim sheetIndex As Int32 = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "A4" cell
  ///  worksheet.Cells("A4").PutValue(200)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a sample value to "B4" cell
  ///  worksheet.Cells("B4").PutValue(40)
  ///  'Adding a sample value to "C1" cell as category data
  ///  worksheet.Cells("C1").PutValue("Q1")
  ///  'Adding a sample value to "C2" cell as category data
  ///  worksheet.Cells("C2").PutValue("Q2")
  ///  'Adding a sample value to "C3" cell as category data
  ///  worksheet.Cells("C3").PutValue("Y1")
  ///  'Adding a sample value to "C4" cell as category data
  ///  worksheet.Cells("C4").PutValue("Y2")
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Int32 = worksheet.Charts.Add(ChartType.Column, 5, 0, 15, 5)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B4"
  ///  chart.NSeries.Add("A1:B4", True)
  ///  'Setting the data source for the category data of NSeries
  ///  Chart.NSeries.CategoryData = "C1:C4"
  ///  'adding a linear trendline
  ///  Dim index As Int32 = chart.NSeries(0).TrendLines.Add(TrendlineType.Linear)
  ///  Dim trendline As Trendline = chart.NSeries(0).TrendLines(index)
  ///  'Setting the custom name of the trendline.
  ///  trendline.Name = "Linear"
  ///  'Displaying the equation on chart
  ///  trendline.DisplayEquation = True
  ///  'Displaying the R-Squared value on chart
  ///  trendline.DisplayRSquared = True
  ///  'Saving the Excel file
  ///  workbook.Save("C:\\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Charts.Trendline')]
  DNTrendline = interface(DNLine)
  ['{BAE1B3BA-51BD-3B02-8F23-3477B94253EF}']
  { getters & setters } 

    function get_IsNameAuto: Boolean;
    procedure set_IsNameAuto(value: Boolean);
    function get_Type: DNTrendlineType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Period: Int32;
    procedure set_Period(value: Int32);
    function get_Forward: Double;
    procedure set_Forward(value: Double);
    function get_Backward: Double;
    procedure set_Backward(value: Double);
    function get_DisplayEquation: Boolean;
    procedure set_DisplayEquation(value: Boolean);
    function get_DisplayRSquared: Boolean;
    procedure set_DisplayRSquared(value: Boolean);
    function get_Intercept: Double;
    procedure set_Intercept(value: Double);
    function get_DataLabels: DNDataLabels;
    function get_LegendEntry: DNLegendEntry;
    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashType: DNMsoLineDashStyle;
    procedure set_DashType(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginType: DNMsoArrowheadStyle;
    procedure set_BeginType(value: DNMsoArrowheadStyle);
    function get_EndType: DNMsoArrowheadStyle;
    procedure set_EndType(value: DNMsoArrowheadStyle);
    function get_BeginArrowLength: DNMsoArrowheadLength;
    procedure set_BeginArrowLength(value: DNMsoArrowheadLength);
    function get_EndArrowLength: DNMsoArrowheadLength;
    procedure set_EndArrowLength(value: DNMsoArrowheadLength);
    function get_BeginArrowWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowWidth(value: DNMsoArrowheadWidth);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Style: DNLineType;
    procedure set_Style(value: DNLineType);
    function get_Weight: DNWeightType;
    procedure set_Weight(value: DNWeightType);
    function get_WeightPt: Double;
    procedure set_WeightPt(value: Double);
    function get_WeightPx: Double;
    procedure set_WeightPx(value: Double);
    function get_FormattingType: DNChartLineFormattingType;
    procedure set_FormattingType(value: DNChartLineFormattingType);
    function get_IsAutomaticColor: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_GradientFill: DNGradientFill;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns if Microsoft Excel automatically determines the name of the trendline.
    ///</summary>
    property IsNameAuto: Boolean read get_IsNameAuto write set_IsNameAuto;
    ///<summary>
    ///  Returns the trendline type.
    ///</summary>
    property &Type: DNTrendlineType read get_Type;
    ///<summary>
    ///  Returns the name of the trendline.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the trendline order (an integer greater than 1) when the trendline type is Polynomial.
    ///  The order must be between 2 and 6.
    ///</summary>
    property Order: Int32 read get_Order write set_Order;
    ///<summary>
    ///  Returns or sets the period for the moving-average trendline.
    ///</summary>
    ///<remarks>This value should be between 2 and 255.
    ///  And it must be less than the number of the chart points in the series</remarks>
    property Period: Int32 read get_Period write set_Period;
    ///<summary>
    ///  Returns or sets the number of periods (or units on a scatter chart) that the trendline extends forward.
    ///  The number of periods must be greater than and equal to zero.
    ///</summary>
    property &Forward: Double read get_Forward write set_Forward;
    ///<summary>
    ///  Returns or sets the number of periods (or units on a scatter chart) that the trendline extends backward.
    ///  The number of periods must be greater than and equal to zero.
    ///  If the chart type is column ,the number of periods must be between 0 and 0.5
    ///</summary>
    property Backward: Double read get_Backward write set_Backward;
    ///<summary>
    ///  Represents if the equation for the trendline is displayed on the chart (in the same data label as the R-squared value). Setting this property to True automatically turns on data labels.
    ///</summary>
    property DisplayEquation: Boolean read get_DisplayEquation write set_DisplayEquation;
    ///<summary>
    ///  Represents if the R-squared value of the trendline is displayed on the chart (in the same data label as the equation). Setting this property to True automatically turns on data labels.
    ///</summary>
    property DisplayRSquared: Boolean read get_DisplayRSquared write set_DisplayRSquared;
    ///<summary>
    ///  Returns or sets the point where the trendline crosses the value axis.
    ///</summary>
    property Intercept: Double read get_Intercept write set_Intercept;
    ///<summary>
    ///  Represents the DataLabels object for the specified ASeries.
    ///</summary>
    property DataLabels: DNDataLabels read get_DataLabels;
    ///<summary>
    ///  Gets the legend entry according to this trendline
    ///</summary>
    property LegendEntry: DNLegendEntry read get_LegendEntry;
    ///<summary>
    ///  Specifies the compound line type
    ///</summary>
    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    ///<summary>
    ///  Specifies the dash line type
    ///</summary>
    property DashType: DNMsoLineDashStyle read get_DashType write set_DashType;
    ///<summary>
    ///  Specifies the ending caps.
    ///</summary>
    property CapType: DNLineCapType read get_CapType write set_CapType;
    ///<summary>
    ///  Specifies the joining caps.
    ///</summary>
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    ///<summary>
    ///  Specifies an arrowhead for the begin of a line.
    ///</summary>
    property BeginType: DNMsoArrowheadStyle read get_BeginType write set_BeginType;
    ///<summary>
    ///  Specifies an arrowhead for the end of a line.
    ///</summary>
    property EndType: DNMsoArrowheadStyle read get_EndType write set_EndType;
    ///<summary>
    ///  Specifies the length of the arrowhead for the begin of a line.
    ///</summary>
    property BeginArrowLength: DNMsoArrowheadLength read get_BeginArrowLength write set_BeginArrowLength;
    ///<summary>
    ///  Specifies the length of the arrowhead for the end of a line.
    ///</summary>
    property EndArrowLength: DNMsoArrowheadLength read get_EndArrowLength write set_EndArrowLength;
    ///<summary>
    ///  Specifies the width of the arrowhead for the begin of a line.
    ///</summary>
    property BeginArrowWidth: DNMsoArrowheadWidth read get_BeginArrowWidth write set_BeginArrowWidth;
    ///<summary>
    ///  Specifies the width of the arrowhead for the end of a line.
    ///</summary>
    property EndArrowWidth: DNMsoArrowheadWidth read get_EndArrowWidth write set_EndArrowWidth;
    ///<summary>
    ///  Gets and sets the theme color.
    ///</summary>
    ///<remarks>
    ///  If the foreground color is not a theme color, NULL will be returned.
    ///</remarks>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Represents the <see cref="T:System.Drawing.Color" />
    ///  of the line.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Represents the style of the line.
    ///</summary>
    property Style: DNLineType read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the <see cref="T:Aspose.Cells.Drawing.WeightType" />
    ///  of the line.
    ///</summary>
    property Weight: DNWeightType read get_Weight write set_Weight;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of points.
    ///</summary>
    property WeightPt: Double read get_WeightPt write set_WeightPt;
    ///<summary>
    ///  Gets or sets the weight of the line in unit of pixels.
    ///</summary>
    property WeightPx: Double read get_WeightPx write set_WeightPx;
    ///<summary>
    ///  Gets or sets format type.
    ///</summary>
    property FormattingType: DNChartLineFormattingType read get_FormattingType write set_FormattingType;
    ///<summary>
    ///  Indicates whether the color of line is auotmatic assigned.
    ///</summary>
    property IsAutomaticColor: Boolean read get_IsAutomaticColor;
    ///<summary>
    ///  Represents whether the line is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates whether this line style is auto assigned.
    ///</summary>
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    ///<summary>
    ///  Represents gradient fill.
    ///</summary>
    property GradientFill: DNGradientFill read get_GradientFill;
  end;

  TDNTrendline = class(TDNGenericImport<DNTrendlineClass, DNTrendline>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoFillFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34C0F086-FEBA-502F-9767-A3C5ECDCF321}']
  end;

  ///<summary>
  ///  Represents fill formatting for a shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoFillFormat')]
  DNMsoFillFormat = interface(DDN.mscorlib.DNObject)
  ['{227762E2-69FF-3FCA-86B9-1EFEF0E04A3F}']
  { getters & setters } 

    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_Texture: DNTextureType;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets the specified fill to a one-color gradient.
    ///</summary>
    ///  <param name="color">One gradient color.</param>
    ///  <param name="degree">The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the fill fore color.
    ///</summary>
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Gets and sets the file back color.
    ///</summary>
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  Gets and sets the Texture and Picture fill data.
    ///</summary>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    ///<summary>
    ///  Gets the texture fill type.
    ///</summary>
    property Texture: DNTextureType read get_Texture;
    ///<summary>
    ///  Indicates whether there is fill.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
  end;

  TDNMsoFillFormat = class(TDNGenericImport<DNMsoFillFormatClass, DNMsoFillFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoFillFormatHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC803D10-6B18-5F8F-B605-5CA574BFE5D1}']
  end;

  ///<summary>
  ///  Represents fill formatting for a shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoFillFormatHelper')]
  DNMsoFillFormatHelper = interface(DDN.mscorlib.DNObject)
  ['{973991F4-3F84-3271-9812-1528F67ADD4D}']
  { getters & setters } 

    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ForeColorTransparency: Double;
    procedure set_ForeColorTransparency(value: Double);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_Texture: DNTextureType;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets the specified fill to a one-color gradient.
    ///</summary>
    ///  <param name="color">One gradient color.</param>
    ///  <param name="degree">The gradient degree. Can be a value from 0.0 (dark) through 1.0 (light).</param>
    ///  <param name="style">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the fill fore color.
    ///</summary>
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  Returns or sets the degree of fore color of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property ForeColorTransparency: Double read get_ForeColorTransparency write set_ForeColorTransparency;
    ///<summary>
    ///  Gets and sets the file back color.
    ///</summary>
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  Gets and sets the Texture and Picture fill data.
    ///</summary>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    ///<summary>
    ///  Gets the texture fill type.
    ///</summary>
    property Texture: DNTextureType read get_Texture;
    ///<summary>
    ///  Indicates whether there is fill.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
  end;

  TDNMsoFillFormatHelper = class(TDNGenericImport<DNMsoFillFormatHelperClass, DNMsoFillFormatHelper>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoFormatPictureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F360762C-3FC7-5C7C-85DB-164736F060F1}']
  end;

  ///<summary>
  ///  Represents the picture format.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoFormatPicture')]
  DNMsoFormatPicture = interface(DDN.mscorlib.DNObject)
  ['{4DE0950F-EB59-3A35-85D1-2259BB80CE59}']
  { getters & setters } 

    function get_TopCrop: Double;
    procedure set_TopCrop(value: Double);
    function get_BottomCrop: Double;
    procedure set_BottomCrop(value: Double);
    function get_LeftCrop: Double;
    procedure set_LeftCrop(value: Double);
    function get_RightCrop: Double;
    procedure set_RightCrop(value: Double);
    function get_TransparentColor: DNCellsColor;
    procedure set_TransparentColor(value: DNCellsColor);
    function get_Contrast: Double;
    procedure set_Contrast(value: Double);
    function get_Brightness: Double;
    procedure set_Brightness(value: Double);
    function get_Gamma: Double;
    procedure set_Gamma(value: Double);
    function get_IsBiLevel: Boolean;
    procedure set_IsBiLevel(value: Boolean);
    function get_IsGray: Boolean;
    procedure set_IsGray(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the location of the top of the crop rectangle expressed, expressed as a ratio of the image's height.
    ///</summary>
    property TopCrop: Double read get_TopCrop write set_TopCrop;
    ///<summary>
    ///  Represents the location of the bottom of the crop rectangle expressed, expressed as a ratio of the image's height.
    ///</summary>
    property BottomCrop: Double read get_BottomCrop write set_BottomCrop;
    ///<summary>
    ///  Represents the location of the left of the crop rectangle expressed, expressed as a ratio of the image's width.
    ///</summary>
    property LeftCrop: Double read get_LeftCrop write set_LeftCrop;
    ///<summary>
    ///  Represents the location of the right of the crop rectangle expressed, expressed as a ratio of the image's width.
    ///</summary>
    property RightCrop: Double read get_RightCrop write set_RightCrop;
    ///<summary>
    ///  Gets and sets the transparent color of the picture.
    ///</summary>
    property TransparentColor: DNCellsColor read get_TransparentColor write set_TransparentColor;
    ///<summary>
    ///  Represents the contrast modification for the picture.in unit of percentage.
    ///</summary>
    ///<remarks>
    ///  It is between -100% and 100%. It works same as Excel 2007 or above version.
    ///</remarks>
    property Contrast: Double read get_Contrast write set_Contrast;
    ///<summary>
    ///  Represents the brightness modification for the picture in unit of percentage.
    ///</summary>
    ///<remarks>
    ///  It is between -100% and 100%. It works same as Excel 2007 or above version.
    ///</remarks>
    property Brightness: Double read get_Brightness write set_Brightness;
    ///<summary>
    ///  Represents gamma of the picture.
    ///</summary>
    property Gamma: Double read get_Gamma write set_Gamma;
    ///<summary>
    ///  Indicates whether this picture should be displayed in two-color black and white.
    ///</summary>
    property IsBiLevel: Boolean read get_IsBiLevel write set_IsBiLevel;
    ///<summary>
    ///  Indicates whether this picture SHOULD be displayed in grayscale.
    ///</summary>
    property IsGray: Boolean read get_IsGray write set_IsGray;
  end;

  TDNMsoFormatPicture = class(TDNGenericImport<DNMsoFormatPictureClass, DNMsoFormatPicture>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoLineFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0C2CC688-29E0-58F6-BD3D-29EEECE50C72}']
  end;

  ///<summary>
  ///  Represents line and arrowhead formatting.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoLineFormat')]
  DNMsoLineFormat = interface(DDN.mscorlib.DNObject)
  ['{68400AB0-8261-3DC1-A5AA-F8738A02D961}']
  { getters & setters } 

    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Style: DNMsoLineStyle;
    procedure set_Style(value: DNMsoLineStyle);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_DashStyle: DNMsoLineDashStyle;
    procedure set_DashStyle(value: DNMsoLineDashStyle);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Weight: Double;
    procedure set_Weight(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Returns a Style object that represents the style of the specified range.
    ///</summary>
    property Style: DNMsoLineStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets and sets the border line fore color.
    ///</summary>
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  Gets and sets the border line back color.
    ///</summary>
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  Gets or sets the dash style for the specified line.
    ///</summary>
    property DashStyle: DNMsoLineDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Returns or sets the weight of the line ,in units of pt.
    ///</summary>
    property Weight: Double read get_Weight write set_Weight;
  end;

  TDNMsoLineFormat = class(TDNGenericImport<DNMsoLineFormatClass, DNMsoLineFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoLineFormatHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{280D6FDA-3F58-5EE1-90B6-64B21A95A189}']
  end;

  ///<summary>
  ///  Represents line and arrowhead formatting.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoLineFormatHelper')]
  DNMsoLineFormatHelper = interface(DDN.mscorlib.DNObject)
  ['{213F8F76-0096-3388-8100-B123FDE75632}']
  { getters & setters } 

    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Style: DNMsoLineStyle;
    procedure set_Style(value: DNMsoLineStyle);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_DashStyle: DNMsoLineDashStyle;
    procedure set_DashStyle(value: DNMsoLineDashStyle);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Weight: Double;
    procedure set_Weight(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Returns a Style object that represents the style of the specified range.
    ///</summary>
    property Style: DNMsoLineStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets and sets the border line fore color.
    ///</summary>
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  Gets and sets the border line back color.
    ///</summary>
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  Gets or sets the dash style for the specified line.
    ///</summary>
    property DashStyle: DNMsoLineDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Returns or sets the weight of the line ,in units of pt.
    ///</summary>
    property Weight: Double read get_Weight write set_Weight;
  end;

  TDNMsoLineFormatHelper = class(TDNGenericImport<DNMsoLineFormatHelperClass, DNMsoLineFormatHelper>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoTextFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8149E910-427F-5166-93FE-2A10900593B5}']
  end;

  ///<summary>
  ///  Represents the text frame in a Shape object.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.MsoTextFrame')]
  DNMsoTextFrame = interface(DDN.mscorlib.DNObject)
  ['{A6050AF8-95F2-39BB-8162-735D3562F4D5}']
  { getters & setters } 

    function get_AutoSize: Boolean;
    procedure set_AutoSize(value: Boolean);
    function get_IsAutoMargin: Boolean;
    procedure set_IsAutoMargin(value: Boolean);
    function get_RotateTextWithShape: Boolean;
    procedure set_RotateTextWithShape(value: Boolean);
    function get_LeftMarginPt: Double;
    procedure set_LeftMarginPt(value: Double);
    function get_RightMarginPt: Double;
    procedure set_RightMarginPt(value: Double);
    function get_TopMarginPt: Double;
    procedure set_TopMarginPt(value: Double);
    function get_BottomMarginPt: Double;
    procedure set_BottomMarginPt(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if size of shape is adjusted automatically according to its content.
    ///</summary>
    property AutoSize: Boolean read get_AutoSize write set_AutoSize;
    ///<summary>
    ///  Indicates whether the margin is auto calculated.
    ///</summary>
    property IsAutoMargin: Boolean read get_IsAutoMargin write set_IsAutoMargin;
    ///<summary>
    ///  Indicates whether rotating text with shape.
    ///</summary>
    property RotateTextWithShape: Boolean read get_RotateTextWithShape write set_RotateTextWithShape;
    ///<summary>
    ///  Returns the left margin in unit of Points
    ///</summary>
    property LeftMarginPt: Double read get_LeftMarginPt write set_LeftMarginPt;
    ///<summary>
    ///  Returns the right margin in unit of Points
    ///</summary>
    property RightMarginPt: Double read get_RightMarginPt write set_RightMarginPt;
    ///<summary>
    ///  Returns the top margin in unit of Points
    ///</summary>
    property TopMarginPt: Double read get_TopMarginPt write set_TopMarginPt;
    ///<summary>
    ///  Returns the bottom margin in unit of Points
    ///</summary>
    property BottomMarginPt: Double read get_BottomMarginPt write set_BottomMarginPt;
  end;

  TDNMsoTextFrame = class(TDNGenericImport<DNMsoTextFrameClass, DNMsoTextFrame>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPicFormatOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AAAE90AE-CF95-5C59-8F4D-6391122741E8}']
  { constructors } 

    {class} function init: DNPicFormatOption;

  end;

  ///<summary>
  ///  Represents picture format option
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.PicFormatOption')]
  DNPicFormatOption = interface(DDN.mscorlib.DNObject)
  ['{EF57FCB7-4525-3B5A-BA53-E8E57577EE34}']
  { getters & setters } 

    function get_Type: DNFillPictureType;
    procedure set_Type(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);
    function get_Right: Double;
    procedure set_Right(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the picture fill type.
    ///</summary>
    property &Type: DNFillPictureType read get_Type write set_Type;
    ///<summary>
    ///  Gets or sets how many the picture stack and scale with.
    ///</summary>
    property Scale: Double read get_Scale write set_Scale;
    ///<summary>
    ///  Gets or sets the left offset for stretching picture.
    ///</summary>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the top offset for stretching picture.
    ///</summary>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets the bottom offset for stretching picture.
    ///</summary>
    property Bottom: Double read get_Bottom write set_Bottom;
    ///<summary>
    ///  Gets or sets the right offset for stretching picture.
    ///</summary>
    property Right: Double read get_Right write set_Right;
  end;

  TDNPicFormatOption = class(TDNGenericImport<DNPicFormatOptionClass, DNPicFormatOption>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNReflectionEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F033965E-AC3E-5FF7-81D8-792F57B34FB3}']
  end;

  ///<summary>
  ///  This class specifies a reflection effect.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ReflectionEffect')]
  DNReflectionEffect = interface(DDN.mscorlib.DNObject)
  ['{344BC1BD-E453-370D-94EF-8309C19150A7}']
  { getters & setters } 

    function get_Type: DNReflectionEffectType;
    procedure set_Type(value: DNReflectionEffectType);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Blur: Double;
    procedure set_Blur(value: Double);
    function get_Direction: Double;
    procedure set_Direction(value: Double);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_FadeDirection: Double;
    procedure set_FadeDirection(value: Double);
    function get_RotWithShape: Boolean;
    procedure set_RotWithShape(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the preset reflection effect.
    ///</summary>
    property &Type: DNReflectionEffectType read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets the degree of the starting reflection transparency as a value from 0.0 (opaque) through 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Gets and sets the end position (along the alpha gradient ramp) of the end alpha value,in unit of percentage
    ///</summary>
    property Size: Double read get_Size write set_Size;
    ///<summary>
    ///  Gets and sets the blur radius,in unit of points.
    ///</summary>
    property Blur: Double read get_Blur write set_Blur;
    ///<summary>
    ///  Gets and sets the direction of the alpha gradient ramp relative to the shape itself.
    ///</summary>
    property Direction: Double read get_Direction write set_Direction;
    ///<summary>
    ///  Gets and sets how far to distance the shadow,in unit of points.
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
    ///<summary>
    ///  Gets and sets the direction to offset the reflection.
    ///</summary>
    property FadeDirection: Double read get_FadeDirection write set_FadeDirection;
    ///<summary>
    ///  Gets and sets if the reflection should rotate with the shape.
    ///</summary>
    property RotWithShape: Boolean read get_RotWithShape write set_RotWithShape;
  end;

  TDNReflectionEffect = class(TDNGenericImport<DNReflectionEffectClass, DNReflectionEffect>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShadowEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ED7C1250-8254-54A7-9C03-6C099CF3A01B}']
  end;

  ///<summary>
  ///  This class specifies the shadow effect of the chart element or shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShadowEffect')]
  DNShadowEffect = interface(DDN.mscorlib.DNObject)
  ['{2DAA33E5-4F54-315A-9A2B-A9FB3D42B44E}']
  { getters & setters } 

    function get_PresetType: DNPresetShadowType;
    procedure set_PresetType(value: DNPresetShadowType);
    function get_Color: DNCellsColor;
    procedure set_Color(value: DNCellsColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Blur: Double;
    procedure set_Blur(value: Double);
    function get_Angle: Double;
    procedure set_Angle(value: Double);
    function get_Distance: Double;
    procedure set_Distance(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the preset shadow type of the shadow.
    ///</summary>
    property PresetType: DNPresetShadowType read get_PresetType write set_PresetType;
    ///<summary>
    ///  Gets and sets the color of the shadow.
    ///</summary>
    property Color: DNCellsColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the degree of transparency of the shadow. Range from 0.0 (opaque) to 1.0 (clear).
    ///</summary>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Gets and sets the size of the shadow. Range from 0 to 2.0.
    ///  Meaningless in inner shadow.
    ///</summary>
    property Size: Double read get_Size write set_Size;
    ///<summary>
    ///  Gets and sets the blur of the shadow. Range from 0 to 100 points.
    ///</summary>
    property Blur: Double read get_Blur write set_Blur;
    ///<summary>
    ///  Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
    ///</summary>
    property Angle: Double read get_Angle write set_Angle;
    ///<summary>
    ///  Gets and sets the distance of the shadow. Range from 0 to 200 points.
    ///</summary>
    property Distance: Double read get_Distance write set_Distance;
  end;

  TDNShadowEffect = class(TDNGenericImport<DNShadowEffectClass, DNShadowEffect>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4334E44B-CEC2-5260-9E4F-8757A9D5AC95}']
  end;

  ///<summary>
  ///  Represents the msodrawing object.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Shape')]
  DNShape = interface(DDN.mscorlib.DNObject)
  ['{D3E35918-E9AF-3E47-ADC7-3967C1F76C96}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNArcShapeClass = interface(DNShapeClass)
  ['{DE13EF9B-E6DD-5021-9283-C5BFE61F161E}']
  end;

  ///<summary>
  ///  Represents the arc shape.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook.
  ///  Workbook excelbook = new Workbook();
  ///  //Add an arc shape.
  ///  Aspose.Cells.ArcShape arc1 = excelbook.Worksheets[0].Shapes.AddArc(2, 0, 2, 0, 130, 130);
  ///  //Set the placement of the arc.
  ///  arc1.Placement = PlacementType.FreeFloating;
  ///  //Set the fill format.
  ///  arc1.FillFormat.ForeColor = Color.Blue;
  ///  //Set the line style.
  ///  arc1.LineFormat.Style = MsoLineStyle.Single;
  ///  //Set the line weight.
  ///  arc1.LineFormat.Weight = 1;
  ///  //Set the color of the arc line.
  ///  arc1.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the arc.
  ///  arc1.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Add another arc shape.
  ///  Aspose.Cells.ArcShape arc2 = excelbook.Worksheets[0].Shapes.AddArc(9, 0, 2, 0, 130, 130);
  ///  //Set the placement of the arc.
  ///  arc2.Placement = PlacementType.FreeFloating;
  ///  //Set the line style.
  ///  arc2.LineFormat.Style = MsoLineStyle.Single;
  ///  //Set the line weight.
  ///  arc2.LineFormat.Weight = 1;
  ///  //Set the color of the arc line.
  ///  arc2.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the arc.
  ///  arc2.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Save the excel file.
  ///  excelbook.Save("d:\\test\\tstarcs.xls");
  ///  [VB..NET]
  ///  'Instantiate a new Workbook.
  ///  Dim excelbook As Workbook = New Workbook()
  ///  'Add an arc shape.
  ///  Dim arc1 As Aspose.Cells.ArcShape = excelbook.Worksheets(0).Shapes.AddArc(2, 0, 2, 0, 130, 130)
  ///  'Set the placement of the arc.
  ///  arc1.Placement = PlacementType.FreeFloating
  ///  'Set the fill format.
  ///  arc1.FillFormat.ForeColor = Color.Blue
  ///  'Set the line style.
  ///  arc1.LineFormat.Style = MsoLineStyle.Single
  ///  'Set the line weight.
  ///  arc1.LineFormat.Weight = 1
  ///  'Set the color of the arc line.
  ///  arc1.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the arc.
  ///  arc1.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Add another arc shape.
  ///  Dim arc2 As Aspose.Cells.ArcShape = excelbook.Worksheets(0).Shapes.AddArc(9, 0, 2, 0, 130, 130)
  ///  'Set the placement of the arc.
  ///  arc2.Placement = PlacementType.FreeFloating
  ///  'Set the line style.
  ///  arc2.LineFormat.Style = MsoLineStyle.Single
  ///  'Set the line weight.
  ///  arc2.LineFormat.Weight = 1
  ///  'Set the color of the arc line.
  ///  arc2.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the arc.
  ///  arc2.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Save the excel file.
  ///  excelbook.Save("d:\test\tstarcs.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.ArcShape')]
  DNArcShape = interface(DNShape)
  ['{F6C3DF28-8442-3CB8-A026-C06A679647D1}']
  { getters & setters } 

    function get_BeginArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_BeginArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_BeginArrowheadLength: DNMsoArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNMsoArrowheadLength);
    function get_EndArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_EndArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowheadLength: DNMsoArrowheadLength;
    procedure set_EndArrowheadLength(value: DNMsoArrowheadLength);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the begin arrow head style of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.BeginArrowheadStyle property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BeginArrowheadStyle: DNMsoArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    ///<summary>
    ///  Gets and sets the begin arrow head width of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.BeginArrowheadWidth property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BeginArrowheadWidth: DNMsoArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    ///<summary>
    ///  Gets and sets the begin arrow head length of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.BeginArrowheadLength property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BeginArrowheadLength: DNMsoArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    ///<summary>
    ///  Gets and sets the end arrow head style of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.EndArrowheadStyle property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EndArrowheadStyle: DNMsoArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    ///<summary>
    ///  Gets and sets the end arrow head width of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.EndArrowheadWidth property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EndArrowheadWidth: DNMsoArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    ///<summary>
    ///  Gets and sets the end arrow head length of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.EndArrowheadLength property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EndArrowheadLength: DNMsoArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNArcShape = class(TDNGenericImport<DNArcShapeClass, DNArcShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNButtonClass = interface(DNShapeClass)
  ['{3C6FF438-E5A3-5375-BE3C-31393DE462B7}']
  end;

  ///<summary>
  ///  Represents the Forms control: Button
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Create a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet in the workbook.
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Add a new button to the worksheet.
  ///  Aspose.Cells.Button button = sheet.Shapes.AddButton(2, 0, 2, 0, 28, 80);
  ///  //Set the caption of the button.
  ///  button.Text = "Aspose";
  ///  //Set the Placement Type, the way the
  ///  //button is attached to the cells.
  ///  button.Placement = PlacementType.FreeFloating;
  ///  //Set the font name.
  ///  button.Font.Name = "Tahoma";
  ///  //Set the caption string bold.
  ///  button.Font.IsBold = true;
  ///  //Set the color to blue.
  ///  button.Font.Color = Color.Blue;
  ///  //Set the hyperlink for the button.
  ///  button.AddHyperlink("http://www.aspose.com/");
  ///  //Saves the file.
  ///  workbook.Save(@"d:\test\tstbutton.xls");
  ///  [VB.NET]
  ///  'Create a new Workbook.
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Get the first worksheet in the workbook.
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Add a new button to the worksheet.
  ///  Dim button As Aspose.Cells.Button = sheet.Shapes.AddButton(2, 0, 2, 0, 28, 80)
  ///  'Set the caption of the button.
  ///  button.Text = "Aspose"
  ///  'Set the Placement Type, the way the
  ///  'button is attached to the cells.
  ///  button.Placement = PlacementType.FreeFloating
  ///  'Set the font name.
  ///  button.Font.Name = "Tahoma"
  ///  'Set the caption string bold.
  ///  button.Font.IsBold = True
  ///  'Set the color to blue.
  ///  button.Font.Color = Color.Blue
  ///  'Set the hyperlink for the button.
  ///  button.AddHyperlink("http://www.aspose.com/")
  ///  'Saves the file.
  ///  workbook.Save("d:\test\tstbutton.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.Button')]
  DNButton = interface(DNShape)
  ['{745DCDC5-35C2-3BF8-A027-9045E11EB7F4}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNButton = class(TDNGenericImport<DNButtonClass, DNButton>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCellsDrawingClass = interface(DNShapeClass)
  ['{4288923A-B985-54CE-8974-8DDC365C0DED}']
  end;

  ///<summary>
  ///  Represents the auto shape and drawing object.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.CellsDrawing')]
  DNCellsDrawing = interface(DNShape)
  ['{6718200D-5637-36C7-A73E-33276B868CEC}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCellsDrawing = class(TDNGenericImport<DNCellsDrawingClass, DNCellsDrawing>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNChartShapeClass = interface(DNShapeClass)
  ['{78E12CBF-E442-5BA1-86A6-88C7CCDC0AE1}']
  end;

  ///<summary>
  ///  Represents the shape of the chart.
  ///  Properties and methods for the ChartObject object control the appearance and size of the embedded chart on the worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the first worksheet
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Adding a sample value to "A1" cell
  ///  worksheet.Cells["A1"].PutValue(50);
  ///  //Adding a sample value to "A2" cell
  ///  worksheet.Cells["A2"].PutValue(100);
  ///  //Adding a sample value to "A3" cell
  ///  worksheet.Cells["A3"].PutValue(150);
  ///  //Adding a sample value to "B1" cell
  ///  worksheet.Cells["B1"].PutValue(60);
  ///  //Adding a sample value to "B2" cell
  ///  worksheet.Cells["B2"].PutValue(32);
  ///  //Adding a sample value to "B3" cell
  ///  worksheet.Cells["B3"].PutValue(50);
  ///  //Adding a chart to the worksheet
  ///  int chartIndex = worksheet.Charts.Add(ChartType.PieExploded, 5, 0, 25, 10);
  ///  //Accessing the instance of the newly added chart
  ///  Chart chart = worksheet.Charts[chartIndex];
  ///  //Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", true);
  ///  //Show Data Labels
  ///  chart.NSeries[0].DataLabels.IsValueShown = true;
  ///  //Getting Chart Shape
  ///  ChartShape chartShape = chart.ChartObject;
  ///  //Set Lower Right Column
  ///  chartShape.LowerRightColumn = 10;
  ///  //Set LowerDeltaX
  ///  chartShape.LowerDeltaX = 1024;
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the first worksheet
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Adding a sample value to "A1" cell
  ///  worksheet.Cells("A1").PutValue(50)
  ///  'Adding a sample value to "A2" cell
  ///  worksheet.Cells("A2").PutValue(100)
  ///  'Adding a sample value to "A3" cell
  ///  worksheet.Cells("A3").PutValue(150)
  ///  'Adding a sample value to "B1" cell
  ///  worksheet.Cells("B1").PutValue(60)
  ///  'Adding a sample value to "B2" cell
  ///  worksheet.Cells("B2").PutValue(32)
  ///  'Adding a sample value to "B3" cell
  ///  worksheet.Cells("B3").PutValue(50)
  ///  'Adding a chart to the worksheet
  ///  Dim chartIndex As Integer = worksheet.Charts.Add(ChartType.PieExploded, 5, 0, 25, 10)
  ///  'Accessing the instance of the newly added chart
  ///  Dim chart As Chart = worksheet.Charts(chartIndex)
  ///  'Adding NSeries (chart data source) to the chart ranging from "A1" cell to "B3"
  ///  chart.NSeries.Add("A1:B3", True)
  ///  'Show Data Labels
  ///  chart.NSeries(0).DataLabels.IsValueShown = True
  ///  'Getting Chart Shape
  ///  Dim chartShape As ChartShape = chart.ChartObject
  ///  'Set Lower Right Column
  ///  chartShape.LowerRightColumn = 10
  ///  'Set LowerDeltaX
  ///  chartShape.LowerDeltaX = 1024
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.ChartShape')]
  DNChartShape = interface(DNShape)
  ['{7A5EED02-A7F5-34BF-99C5-D1AF003D52CE}']
  { getters & setters } 

    function get_Chart: DNChart;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a Chart object that represents the chart contained in the object.
    ///</summary>
    property Chart: DNChart read get_Chart;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNChartShape = class(TDNGenericImport<DNChartShapeClass, DNChartShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCheckBoxClass = interface(DNShapeClass)
  ['{8F53115F-B264-543E-BCDD-6E0A50C2FC15}']
  end;

  ///<summary>
  ///  Represents a check box object in a worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  int index = excel.Worksheets[0].CheckBoxes.Add(15, 15, 20, 100);
  ///  CheckBox checkBox = excel.Worksheets[0].CheckBoxes[index];
  ///  checkBox.Text = "Check Box 1";
  ///  [Visual Basic]
  ///  Dim index as integer = excel.Worksheets(0).CheckBoxes.Add(15, 15, 20, 100)
  ///  Dim checkBox as CheckBox = excel.Worksheets(0).CheckBoxes[index];
  ///  checkBox.Text = "Check Box 1"
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.CheckBox')]
  DNCheckBox = interface(DNShape)
  ['{B15BD1EB-1D97-3E8B-BDD2-72806A667F3D}']
  { getters & setters } 

    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_CheckValue: DNCheckValueType;
    procedure set_CheckValue(value: DNCheckValueType);
    function get_CheckedValue: DNCheckValueType;
    procedure set_CheckedValue(value: DNCheckValueType);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if the checkbox is checked or not.
    ///</summary>
    property Value: Boolean read get_Value write set_Value;
    ///<summary>
    ///  Gets or set checkbox' value.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use CheckBox.CheckValueType property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property CheckValue: DNCheckValueType read get_CheckValue write set_CheckValue;
    ///<summary>
    ///  Gets or set checkbox' value.
    ///</summary>
    property CheckedValue: DNCheckValueType read get_CheckedValue write set_CheckedValue;
    ///<summary>
    ///  Indicates whether the combobox has 3-D shading.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCheckBox = class(TDNGenericImport<DNCheckBoxClass, DNCheckBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNComboBoxClass = interface(DNShapeClass)
  ['{A69EB8E8-C05F-58C4-B10F-FE556B1DF904}']
  end;

  ///<summary>
  ///  Represents the control form ComboBox.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Create a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet.
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Get the worksheet cells collection.
  ///  Cells cells = sheet.Cells;
  ///  //Input a value.
  ///  cells["B3"].PutValue("Employee:");
  ///  //Set it bold.
  ///  cells["B3"].Style.Font.IsBold = true;
  ///  //Input some values that denote the input range
  ///  //for the combo box.
  ///  cells["A2"].PutValue("Emp001");
  ///  cells["A3"].PutValue("Emp002");
  ///  cells["A4"].PutValue("Emp003");
  ///  cells["A5"].PutValue("Emp004");
  ///  cells["A6"].PutValue("Emp005");
  ///  cells["A7"].PutValue("Emp006");
  ///  //Add a new combo box.
  ///  Aspose.Cells.ComboBox comboBox = sheet.Shapes.AddComboBox(2, 0, 2, 0, 22, 100);
  ///  //Set the linked cell;
  ///  comboBox.LinkedCell = "A1";
  ///  //Set the input range.
  ///  comboBox.InputRange = "A2:A7";
  ///  //Set no. of list lines displayed in the combo
  ///  //box's list portion.
  ///  comboBox.DropDownLines = 5;
  ///  //Set the combo box with 3-D shading.
  ///  comboBox.Shadow = true;
  ///  //AutoFit Columns
  ///  sheet.AutoFitColumns();
  ///  //Saves the file.
  ///  workbook.Save(@"d:\test\tstcombobox.xls");
  ///  [VB.NET]
  ///  'Create a new Workbook.
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Get the first worksheet.
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Get the worksheet cells collection.
  ///  Dim cells As Cells = sheet.Cells
  ///  'Input a value.
  ///  cells("B3").PutValue("Employee:")
  ///  'Set it bold.
  ///  cells("B3").Style.Font.IsBold = True
  ///  'Input some values that denote the input range
  ///  'for the combo box.
  ///  cells("A2").PutValue("Emp001")
  ///  cells("A3").PutValue("Emp002")
  ///  cells("A4").PutValue("Emp003")
  ///  cells("A5").PutValue("Emp004")
  ///  cells("A6").PutValue("Emp005")
  ///  cells("A7").PutValue("Emp006")
  ///  'Add a new combo box.
  ///  Dim comboBox As Aspose.Cells.ComboBox = sheet.Shapes.AddComboBox(2, 0, 2, 0, 22, 100)
  ///  'Set the linked cell;
  ///  comboBox.LinkedCell = "A1"
  ///  'Set the input range.
  ///  comboBox.InputRange = "A2:A7"
  ///  'Set no. of list lines displayed in the combo
  ///  'box's list portion.
  ///  comboBox.DropDownLines = 5
  ///  'Set the combo box with 3-D shading.
  ///  comboBox.Shadow = True
  ///  'AutoFit Columns
  ///  sheet.AutoFitColumns()
  ///  'Saves the file.
  ///  workbook.Save("d:\test\tstcombobox.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.ComboBox')]
  DNComboBox = interface(DNShape)
  ['{180BB5C7-BBEF-3459-BE7A-8543B46D3FBF}']
  { getters & setters } 

    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedValue: string;
    function get_SelectedCell: DNCell;
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_DropDownLines: Int32;
    procedure set_DropDownLines(value: Int32);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the index number of the currently selected item in a list box or combo box.
    ///  Zero-based.
    ///</summary>
    ///<remarks>-1 presents no item is selected.</remarks>
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    ///<summary>
    ///  Gets the selected value of the combox box.
    ///</summary>
    property SelectedValue: string read get_SelectedValue;
    ///<summary>
    ///  Gets the selected cell in the input range of the combo box.
    ///</summary>
    property SelectedCell: DNCell read get_SelectedCell;
    ///<summary>
    ///  Indicates whether the combobox has 3-D shading.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
    ///</summary>
    property DropDownLines: Int32 read get_DropDownLines write set_DropDownLines;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNComboBox = class(TDNGenericImport<DNComboBoxClass, DNComboBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCommentShapeClass = interface(DNShapeClass)
  ['{DC6B4946-5CAB-5A96-B250-E966D2CF5518}']
  end;

  ///<summary>
  ///  Represents the shape of the comment.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.CommentShape')]
  DNCommentShape = interface(DNShape)
  ['{80507E65-76B3-35C5-A346-976DF9BBF8B5}']
  { getters & setters } 

    function get_Comment: DNComment;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the comment object.
    ///</summary>
    property Comment: DNComment read get_Comment;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCommentShape = class(TDNGenericImport<DNCommentShapeClass, DNCommentShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCustomXmlShapeClass = interface(DNShapeClass)
  ['{EC1DC7F0-DD96-567F-967C-469FCFAA9793}']
  end;

  ///<summary>
  ///  Represents Custom xml shape ,such as Ink.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.CustomXmlShape')]
  DNCustomXmlShape = interface(DNShape)
  ['{D6FE6B7E-6DB9-31C5-BA5B-918B6AD95EFA}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCustomXmlShape = class(TDNGenericImport<DNCustomXmlShapeClass, DNCustomXmlShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNDialogBoxClass = interface(DNShapeClass)
  ['{64E4CE2A-86CD-5FF4-B501-57DCD9E033FC}']
  end;

  ///<summary>
  ///  Represents the dialog box.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.DialogBox')]
  DNDialogBox = interface(DNShape)
  ['{1D8CD234-10BD-3024-8C77-B3807EDEC736}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNDialogBox = class(TDNGenericImport<DNDialogBoxClass, DNDialogBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGroupBoxClass = interface(DNShapeClass)
  ['{38C168B1-42F8-56CF-925A-B4AC621CB26C}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a groupbox in a spreadsheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook.
  ///  Workbook excelbook = new Workbook();
  ///  //Add a group box to the first worksheet.
  ///  Aspose.Cells.GroupBox box = excelbook.Worksheets[0].Shapes.AddGroupBox(1, 0, 1, 0, 300, 250);
  ///  //Set the caption of the group box.
  ///  box.Text = "Age Groups";
  ///  box.Placement = PlacementType.FreeFloating;
  ///  //Make it 2-D box.
  ///  box.Shadow = false;
  ///  //Add a radio button.
  ///  Aspose.Cells.RadioButton radio1 = excelbook.Worksheets[0].Shapes.AddRadioButton(3, 0, 2, 0, 30, 110);
  ///  //Set its text string.
  ///  radio1.Text = "20-29";
  ///  //Set A1 cell as a linked cell for the radio button.
  ///  radio1.LinkedCell = "A1";
  ///  //Make the radio button 3-D.
  ///  radio1.Shadow = true;
  ///  //Set the foreground color of the radio button.
  ///  radio1.FillFormat.ForeColor = Color.LightGreen;
  ///  //Set the line style of the radio button.
  ///  radio1.LineFormat.Style = MsoLineStyle.ThickThin;
  ///  //Set the weight of the radio button.
  ///  radio1.LineFormat.Weight = 4;
  ///  //Set the line color of the radio button.
  ///  radio1.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the radio button.
  ///  radio1.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Make the line format visible.
  ///  radio1.LineFormat.IsVisible = true;
  ///  //Make the fill format visible.
  ///  radio1.FillFormat.IsVisible = true;
  ///  //Add another radio button.
  ///  Aspose.Cells.RadioButton radio2 = excelbook.Worksheets[0].Shapes.AddRadioButton(6, 0, 2, 0, 30, 110);
  ///  //Set its text string.
  ///  radio2.Text = "30-39";
  ///  //Set A1 cell as a linked cell for the radio button.
  ///  radio2.LinkedCell = "A1";
  ///  //Make the radio button 3-D.
  ///  radio2.Shadow = true;
  ///  //Set the foreground color of the radio button.
  ///  radio2.FillFormat.ForeColor = Color.LightGreen;
  ///  //Set the line style of the radio button.
  ///  radio2.LineFormat.Style = MsoLineStyle.ThickThin;
  ///  //Set the weight of the radio button.
  ///  radio2.LineFormat.Weight = 4;
  ///  //Set the line color of the radio button.
  ///  radio2.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the radio button.
  ///  radio2.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Make the line format visible.
  ///  radio2.LineFormat.IsVisible = true;
  ///  //Make the fill format visible.
  ///  radio2.FillFormat.IsVisible = true;
  ///  //Add another radio button.
  ///  Aspose.Cells.RadioButton radio3 = excelbook.Worksheets[0].Shapes.AddRadioButton(9, 0, 2, 0, 30, 110);
  ///  //Set its text string.
  ///  radio3.Text = "40-49";
  ///  //Set A1 cell as a linked cell for the radio button.
  ///  radio3.LinkedCell = "A1";
  ///  //Make the radio button 3-D.
  ///  radio3.Shadow = true;
  ///  //Set the foreground color of the radio button.
  ///  radio3.FillFormat.ForeColor = Color.LightGreen;
  ///  //Set the line style of the radio button.
  ///  radio3.LineFormat.Style = MsoLineStyle.ThickThin;
  ///  //Set the weight of the radio button.
  ///  radio3.LineFormat.Weight = 4;
  ///  //Set the line color of the radio button.
  ///  radio3.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the radio button.
  ///  radio3.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Make the line format visible.
  ///  radio3.LineFormat.IsVisible = true;
  ///  //Make the fill format visible.
  ///  radio3.FillFormat.IsVisible = true;
  ///  //Get the shapes.
  ///  Aspose.Cells.Shape[] shapeobjects = new Aspose.Cells.Shape[] { box, radio1, radio2, radio3 };
  ///  //Group the shapes.
  ///  Aspose.Cells.GroupShape group = excelbook.Worksheets[0].Shapes.Group(shapeobjects);
  ///  //Save the excel file.
  ///  excelbook.Save("d:\\test\\groupshapes.xls");
  ///  [VB.NET]
  ///  'Instantiate a new Workbook.
  ///  Dim excelbook As Workbook = New Workbook()
  ///  'Add a group box to the first worksheet.
  ///  Dim box As Aspose.Cells.GroupBox = excelbook.Worksheets(0).Shapes.AddGroupBox(1, 0, 1, 0, 300, 250)
  ///  'Set the caption of the group box.
  ///  box.Text = "Age Groups"
  ///  box.Placement = PlacementType.FreeFloating
  ///  'Make it 2-D box.
  ///  box.Shadow = False
  ///  'Add a radio button.
  ///  Dim radio1 As Aspose.Cells.RadioButton = excelbook.Worksheets(0).Shapes.AddRadioButton(3, 0, 2, 0, 30, 110)
  ///  'Set its text string.
  ///  radio1.Text = "20-29"
  ///  'Set A1 cell as a linked cell for the radio button.
  ///  radio1.LinkedCell = "A1"
  ///  'Make the radio button 3-D.
  ///  radio1.Shadow = True
  ///  'Set the foreground color of the radio button.
  ///  radio1.FillFormat.ForeColor = Color.LightGreen
  ///  'Set the line style of the radio button.
  ///  radio1.LineFormat.Style = MsoLineStyle.ThickThin
  ///  'Set the weight of the radio button.
  ///  radio1.LineFormat.Weight = 4
  ///  'Set the line color of the radio button.
  ///  radio1.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the radio button.
  ///  radio1.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Make the line format visible.
  ///  radio1.LineFormat.IsVisible = True
  ///  'Make the fill format visible.
  ///  radio1.FillFormat.IsVisible = True
  ///  'Add another radio button.
  ///  Dim radio2 As Aspose.Cells.RadioButton = excelbook.Worksheets(0).Shapes.AddRadioButton(6, 0, 2, 0, 30, 110)
  ///  'Set its text string.
  ///  radio2.Text = "30-39"
  ///  'Set A1 cell as a linked cell for the radio button.
  ///  radio2.LinkedCell = "A1"
  ///  'Make the radio button 3-D.
  ///  radio2.Shadow = True
  ///  'Set the foreground color of the radio button.
  ///  radio2.FillFormat.ForeColor = Color.LightGreen
  ///  'Set the line style of the radio button.
  ///  radio2.LineFormat.Style = MsoLineStyle.ThickThin
  ///  'Set the weight of the radio button.
  ///  radio2.LineFormat.Weight = 4
  ///  'Set the line color of the radio button.
  ///  radio2.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the radio button.
  ///  radio2.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Make the line format visible.
  ///  radio2.LineFormat.IsVisible = True
  ///  'Make the fill format visible.
  ///  radio2.FillFormat.IsVisible = True
  ///  'Add another radio button.
  ///  Dim radio3 As Aspose.Cells.RadioButton = excelbook.Worksheets(0).Shapes.AddRadioButton(9, 0, 2, 0, 30, 110)
  ///  'Set its text string.
  ///  radio3.Text = "40-49"
  ///  'Set A1 cell as a linked cell for the radio button.
  ///  radio3.LinkedCell = "A1"
  ///  'Make the radio button 3-D.
  ///  radio3.Shadow = True
  ///  'Set the foreground color of the radio button.
  ///  radio3.FillFormat.ForeColor = Color.LightGreen
  ///  'Set the line style of the radio button.
  ///  radio3.LineFormat.Style = MsoLineStyle.ThickThin
  ///  'Set the weight of the radio button.
  ///  radio3.LineFormat.Weight = 4
  ///  'Set the line color of the radio button.
  ///  radio3.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the radio button.
  ///  radio3.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Make the line format visible.
  ///  radio3.LineFormat.IsVisible = True
  ///  'Make the fill format visible.
  ///  radio3.FillFormat.IsVisible = True
  ///  'Get the shapes.
  ///  Dim shapeobjects() As Aspose.Cells.Shape = New Aspose.Cells.Shape() {box, radio1, radio2, radio3}
  ///  'Group the shapes.
  ///  Dim group As Aspose.Cells.GroupShape = excelbook.Worksheets(0).Shapes.Group(shapeobjects)
  ///  'Save the excel file.
  ///  excelbook.Save("d:\test\groupshapes.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.GroupBox')]
  DNGroupBox = interface(DNShape)
  ['{9BE17448-5CC7-3EDD-AA79-AA60825CD7A0}']
  { getters & setters } 

    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the groupbox has shadow.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNGroupBox = class(TDNGenericImport<DNGroupBoxClass, DNGroupBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGroupShapeClass = interface(DNShapeClass)
  ['{86738BC4-5A57-5937-9A3E-EE1DCD58B33F}']
  end;

  ///<summary>
  ///  Represents the group shape which contains the individual shapes.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook.
  ///  Workbook excelbook = new Workbook();
  ///  //Add a group box to the first worksheet.
  ///  Aspose.Cells.GroupBox box = excelbook.Worksheets[0].Shapes.AddGroupBox(1, 0, 1, 0, 300, 250);
  ///  //Set the caption of the group box.
  ///  box.Text = "Age Groups";
  ///  box.Placement = PlacementType.FreeFloating;
  ///  //Make it 2-D box.
  ///  box.Shadow = false;
  ///  //Add a radio button.
  ///  Aspose.Cells.RadioButton radio1 = excelbook.Worksheets[0].Shapes.AddRadioButton(3, 0, 2, 0, 30, 110);
  ///  //Set its text string.
  ///  radio1.Text = "20-29";
  ///  //Set A1 cell as a linked cell for the radio button.
  ///  radio1.LinkedCell = "A1";
  ///  //Make the radio button 3-D.
  ///  radio1.Shadow = true;
  ///  //Set the foreground color of the radio button.
  ///  radio1.FillFormat.ForeColor = Color.LightGreen;
  ///  //Set the line style of the radio button.
  ///  radio1.LineFormat.Style = MsoLineStyle.ThickThin;
  ///  //Set the weight of the radio button.
  ///  radio1.LineFormat.Weight = 4;
  ///  //Set the line color of the radio button.
  ///  radio1.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the radio button.
  ///  radio1.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Make the line format visible.
  ///  radio1.LineFormat.IsVisible = true;
  ///  //Make the fill format visible.
  ///  radio1.FillFormat.IsVisible = true;
  ///  //Add another radio button.
  ///  Aspose.Cells.RadioButton radio2 = excelbook.Worksheets[0].Shapes.AddRadioButton(6, 0, 2, 0, 30, 110);
  ///  //Set its text string.
  ///  radio2.Text = "30-39";
  ///  //Set A1 cell as a linked cell for the radio button.
  ///  radio2.LinkedCell = "A1";
  ///  //Make the radio button 3-D.
  ///  radio2.Shadow = true;
  ///  //Set the foreground color of the radio button.
  ///  radio2.FillFormat.ForeColor = Color.LightGreen;
  ///  //Set the line style of the radio button.
  ///  radio2.LineFormat.Style = MsoLineStyle.ThickThin;
  ///  //Set the weight of the radio button.
  ///  radio2.LineFormat.Weight = 4;
  ///  //Set the line color of the radio button.
  ///  radio2.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the radio button.
  ///  radio2.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Make the line format visible.
  ///  radio2.LineFormat.IsVisible = true;
  ///  //Make the fill format visible.
  ///  radio2.FillFormat.IsVisible = true;
  ///  //Add another radio button.
  ///  Aspose.Cells.RadioButton radio3 = excelbook.Worksheets[0].Shapes.AddRadioButton(9, 0, 2, 0, 30, 110);
  ///  //Set its text string.
  ///  radio3.Text = "40-49";
  ///  //Set A1 cell as a linked cell for the radio button.
  ///  radio3.LinkedCell = "A1";
  ///  //Make the radio button 3-D.
  ///  radio3.Shadow = true;
  ///  //Set the foreground color of the radio button.
  ///  radio3.FillFormat.ForeColor = Color.LightGreen;
  ///  //Set the line style of the radio button.
  ///  radio3.LineFormat.Style = MsoLineStyle.ThickThin;
  ///  //Set the weight of the radio button.
  ///  radio3.LineFormat.Weight = 4;
  ///  //Set the line color of the radio button.
  ///  radio3.LineFormat.ForeColor = Color.Blue;
  ///  //Set the dash style of the radio button.
  ///  radio3.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Make the line format visible.
  ///  radio3.LineFormat.IsVisible = true;
  ///  //Make the fill format visible.
  ///  radio3.FillFormat.IsVisible = true;
  ///  //Get the shapes.
  ///  Aspose.Cells.Shape[] shapeobjects = new Aspose.Cells.Shape[] { box, radio1, radio2, radio3 };
  ///  //Group the shapes.
  ///  Aspose.Cells.GroupShape group = excelbook.Worksheets[0].Shapes.Group(shapeobjects);
  ///  //Save the excel file.
  ///  excelbook.Save("d:\\test\\groupshapes.xls");
  ///  [VB.NET]
  ///  'Instantiate a new Workbook.
  ///  Dim excelbook As Workbook = New Workbook()
  ///  'Add a group box to the first worksheet.
  ///  Dim box As Aspose.Cells.GroupBox = excelbook.Worksheets(0).Shapes.AddGroupBox(1, 0, 1, 0, 300, 250)
  ///  'Set the caption of the group box.
  ///  box.Text = "Age Groups"
  ///  box.Placement = PlacementType.FreeFloating
  ///  'Make it 2-D box.
  ///  box.Shadow = False
  ///  'Add a radio button.
  ///  Dim radio1 As Aspose.Cells.RadioButton = excelbook.Worksheets(0).Shapes.AddRadioButton(3, 0, 2, 0, 30, 110)
  ///  'Set its text string.
  ///  radio1.Text = "20-29"
  ///  'Set A1 cell as a linked cell for the radio button.
  ///  radio1.LinkedCell = "A1"
  ///  'Make the radio button 3-D.
  ///  radio1.Shadow = True
  ///  'Set the foreground color of the radio button.
  ///  radio1.FillFormat.ForeColor = Color.LightGreen
  ///  'Set the line style of the radio button.
  ///  radio1.LineFormat.Style = MsoLineStyle.ThickThin
  ///  'Set the weight of the radio button.
  ///  radio1.LineFormat.Weight = 4
  ///  'Set the line color of the radio button.
  ///  radio1.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the radio button.
  ///  radio1.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Make the line format visible.
  ///  radio1.LineFormat.IsVisible = True
  ///  'Make the fill format visible.
  ///  radio1.FillFormat.IsVisible = True
  ///  'Add another radio button.
  ///  Dim radio2 As Aspose.Cells.RadioButton = excelbook.Worksheets(0).Shapes.AddRadioButton(6, 0, 2, 0, 30, 110)
  ///  'Set its text string.
  ///  radio2.Text = "30-39"
  ///  'Set A1 cell as a linked cell for the radio button.
  ///  radio2.LinkedCell = "A1"
  ///  'Make the radio button 3-D.
  ///  radio2.Shadow = True
  ///  'Set the foreground color of the radio button.
  ///  radio2.FillFormat.ForeColor = Color.LightGreen
  ///  'Set the line style of the radio button.
  ///  radio2.LineFormat.Style = MsoLineStyle.ThickThin
  ///  'Set the weight of the radio button.
  ///  radio2.LineFormat.Weight = 4
  ///  'Set the line color of the radio button.
  ///  radio2.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the radio button.
  ///  radio2.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Make the line format visible.
  ///  radio2.LineFormat.IsVisible = True
  ///  'Make the fill format visible.
  ///  radio2.FillFormat.IsVisible = True
  ///  'Add another radio button.
  ///  Dim radio3 As Aspose.Cells.RadioButton = excelbook.Worksheets(0).Shapes.AddRadioButton(9, 0, 2, 0, 30, 110)
  ///  'Set its text string.
  ///  radio3.Text = "40-49"
  ///  'Set A1 cell as a linked cell for the radio button.
  ///  radio3.LinkedCell = "A1"
  ///  'Make the radio button 3-D.
  ///  radio3.Shadow = True
  ///  'Set the foreground color of the radio button.
  ///  radio3.FillFormat.ForeColor = Color.LightGreen
  ///  'Set the line style of the radio button.
  ///  radio3.LineFormat.Style = MsoLineStyle.ThickThin
  ///  'Set the weight of the radio button.
  ///  radio3.LineFormat.Weight = 4
  ///  'Set the line color of the radio button.
  ///  radio3.LineFormat.ForeColor = Color.Blue
  ///  'Set the dash style of the radio button.
  ///  radio3.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Make the line format visible.
  ///  radio3.LineFormat.IsVisible = True
  ///  'Make the fill format visible.
  ///  radio3.FillFormat.IsVisible = True
  ///  'Get the shapes.
  ///  Dim shapeobjects() As Aspose.Cells.Shape = New Aspose.Cells.Shape() {box, radio1, radio2, radio3}
  ///  'Group the shapes.
  ///  Dim group As Aspose.Cells.GroupShape = excelbook.Worksheets(0).Shapes.Group(shapeobjects)
  ///  'Save the excel file.
  ///  excelbook.Save("d:\test\groupshapes.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.GroupShape')]
  DNGroupShape = interface(DNShape)
  ['{80F5BCA6-50BD-3FA4-AB1F-EFD4E141FADB}']
  { getters & setters } 

    function get_Item(index: Int32): DNShape;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Ungroups the shape items.
    ///</summary>
    ///<remarks>If the group shape is grouped by another group shape,nothing will be done.</remarks>
    procedure Ungroup;
    ///<summary>
    ///  Gets the shapes grouped by this shape.
    ///</summary>
    function GetGroupedShapes: TArray<DNShape>;
    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShape read get_Item; default;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNGroupShape = class(TDNGenericImport<DNGroupShapeClass, DNGroupShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLabelClass = interface(DNShapeClass)
  ['{E9901325-2D60-5196-9FDA-A2A50899FA3A}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a label in a spreadsheet.
  ///</summary>
  ///<example><code>
  ///  //Create a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet in the workbook.
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Add a new label to the worksheet.
  ///  Aspose.Cells.Label label = sheet.Shapes.AddLabel(2, 0, 2, 0, 60, 120);
  ///  //Set the caption of the label.
  ///  label.Text = "This is a Label";
  ///  //Set the Placement Type, the way the
  ///  //label is attached to the cells.
  ///  label.Placement = PlacementType.FreeFloating;
  ///  //Set the fill color of the label.
  ///  label.FillFormat.ForeColor = Color.Yellow;
  ///  //Saves the file.
  ///  workbook.Save(@"d:\test\tstlabel.xls");
  ///  [VB.NET]
  ///  'Create a new Workbook.
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Get the first worksheet in the workbook.
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Add a new label to the worksheet.
  ///  Dim label As Aspose.Cells.Label = sheet.Shapes.AddLabel(2, 0, 2, 0, 60, 120)
  ///  'Set the caption of the label.
  ///  label.Text = "This is a Label"
  ///  'Set the Placement Type, the way the
  ///  'label is attached to the cells.
  ///  label.Placement = PlacementType.FreeFloating
  ///  'Set the fill color of the label.
  ///  label.FillFormat.ForeColor = Color.Yellow
  ///  'Saves the file.
  ///  workbook.Save("d:\test\tstlabel.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.Label')]
  DNLabel = interface(DNShape)
  ['{7DBF039A-6917-3FA8-869F-81221B89BBC3}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLineShapeClass = interface(DNShapeClass)
  ['{4A892C08-25CC-508A-8773-BC134D177CDC}']
  end;

  ///<summary>
  ///  Represents the line shape.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet in the book.
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Add a new line to the worksheet.
  ///  Aspose.Cells.LineShape line1 = worksheet.Shapes.AddLine(5, 0, 1, 0, 0, 250);
  ///  //Set the line dash style
  ///  line1.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Set the placement.
  ///  line1.Placement = PlacementType.FreeFloating;
  ///  //Add another line to the worksheet.
  ///  Aspose.Cells.LineShape line2 = worksheet.Shapes.AddLine(7, 0, 1, 0, 85, 250);
  ///  //Set the line dash style.
  ///  line2.LineFormat.DashStyle = MsoLineDashStyle.DashLongDash;
  ///  //Set the weight of the line.
  ///  line2.LineFormat.Weight = 4;
  ///  //Set the placement.
  ///  line2.Placement = PlacementType.FreeFloating;
  ///  //Add the third line to the worksheet.
  ///  Aspose.Cells.LineShape line3 = worksheet.Shapes.AddLine(13, 0, 1, 0, 0, 250);
  ///  //Set the line dash style
  ///  line3.LineFormat.DashStyle = MsoLineDashStyle.Solid;
  ///  //Set the placement.
  ///  line3.Placement = PlacementType.FreeFloating;
  ///  //Make the gridlines invisible in the first worksheet.
  ///  workbook.Worksheets[0].IsGridlinesVisible = false;
  ///  //Save the excel file.
  ///  workbook.Save("d:\\test\\tstlines.xls");
  ///  [VB.NET]
  ///  'Instantiate a new Workbook.
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Get the first worksheet in the book.
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Add a new line to the worksheet.
  ///  Dim line1 As Aspose.Cells.LineShape = worksheet.Shapes.AddLine(5, 0, 1, 0, 0, 250)
  ///  'Set the line dash style
  ///  line1.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Set the placement.
  ///  line1.Placement = PlacementType.FreeFloating
  ///  'Add another line to the worksheet.
  ///  Dim line2 As Aspose.Cells.LineShape = worksheet.Shapes.AddLine(7, 0, 1, 0, 85, 250)
  ///  'Set the line dash style.
  ///  line2.LineFormat.DashStyle = MsoLineDashStyle.DashLongDash
  ///  'Set the weight of the line.
  ///  line2.LineFormat.Weight = 4
  ///  'Set the placement.
  ///  line2.Placement = PlacementType.FreeFloating
  ///  'Add the third line to the worksheet.
  ///  Dim line3 As Aspose.Cells.LineShape = worksheet.Shapes.AddLine(13, 0, 1, 0, 0, 250)
  ///  'Set the line dash style
  ///  line3.LineFormat.DashStyle = MsoLineDashStyle.Solid
  ///  'Set the placement.
  ///  line3.Placement = PlacementType.FreeFloating
  ///  'Make the gridlines invisible in the first worksheet.
  ///  workbook.Worksheets(0).IsGridlinesVisible = False
  ///  'Save the excel file.
  ///  workbook.Save("d:\test\tstlines.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.LineShape')]
  DNLineShape = interface(DNShape)
  ['{41845FEF-0193-3D49-AC8D-FCDC1EBF855D}']
  { getters & setters } 

    function get_BeginArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_BeginArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_BeginArrowheadLength: DNMsoArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNMsoArrowheadLength);
    function get_EndArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_EndArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowheadLength: DNMsoArrowheadLength;
    procedure set_EndArrowheadLength(value: DNMsoArrowheadLength);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the begin arrow head style of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.BeginArrowheadStyle property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BeginArrowheadStyle: DNMsoArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    ///<summary>
    ///  Gets and sets the begin arrow head width of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.BeginArrowheadWidth property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BeginArrowheadWidth: DNMsoArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    ///<summary>
    ///  Gets and sets the begin arrow head length of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.BeginArrowheadLength property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property BeginArrowheadLength: DNMsoArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    ///<summary>
    ///  Gets and sets the end arrow head style of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.EndArrowheadStyle property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EndArrowheadStyle: DNMsoArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    ///<summary>
    ///  Gets and sets the end arrow head width of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.EndArrowheadWidth property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EndArrowheadWidth: DNMsoArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    ///<summary>
    ///  Gets and sets the end arrow head length of the line.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line.EndArrowheadLength property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EndArrowheadLength: DNMsoArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNLineShape = class(TDNGenericImport<DNLineShapeClass, DNLineShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNListBoxClass = interface(DNShapeClass)
  ['{D3D32382-2E62-5F6A-96AA-241B0E432678}']
  end;

  ///<summary>
  ///  Represents a list box object.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Create a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet.
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Get the worksheet cells collection.
  ///  Cells cells = sheet.Cells;
  ///  //Input a value.
  ///  cells["B3"].PutValue("Choose Dept:");
  ///  //Set it bold.
  ///  cells["B3"].Style.Font.IsBold = true;
  ///  //Input some values that denote the input range
  ///  //for the list box.
  ///  cells["A2"].PutValue("Sales");
  ///  cells["A3"].PutValue("Finance");
  ///  cells["A4"].PutValue("MIS");
  ///  cells["A5"].PutValue("R&amp;D");
  ///  cells["A6"].PutValue("Marketing");
  ///  cells["A7"].PutValue("HRA");
  ///  //Add a new list box.
  ///  ListBox listBox = sheet.Shapes.AddListBox(2, 0, 3, 0, 122, 100);
  ///  //Set the placement type.
  ///  listBox.Placement = PlacementType.FreeFloating;
  ///  //Set the linked cell.
  ///  listBox.LinkedCell = "A1";
  ///  //Set the input range.
  ///  listBox.InputRange = "A2:A7";
  ///  //Set the selection tyle.
  ///  listBox.SelectionType = SelectionType.Single;
  ///  //Set the list box with 3-D shading.
  ///  listBox.Shadow = true;
  ///  //Saves the file.
  ///  workbook.Save(@"d:\test\tstlistbox.xls");
  ///  [VB.NET]
  ///  'Create a new Workbook.
  ///  Dim workbook As Aspose.Cells.Workbook = New Aspose.Cells.Workbook()
  ///  'Get the first worksheet.
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Get the worksheet cells collection.
  ///  Dim cells As Cells = sheet.Cells
  ///  'Input a value.
  ///  cells("B3").PutValue("Choose Dept:")
  ///  'Set it bold.
  ///  cells("B3").Style.Font.IsBold = True
  ///  'Input some values that denote the input range
  ///  'for the list box.
  ///  cells("A2").PutValue("Sales")
  ///  cells("A3").PutValue("Finance")
  ///  cells("A4").PutValue("MIS")
  ///  cells("A5").PutValue("R&amp;D")
  ///  cells("A6").PutValue("Marketing")
  ///  cells("A7").PutValue("HRA")
  ///  'Add a new list box.
  ///  Dim listBox As Aspose.Cells.ListBox = sheet.Shapes.AddListBox(2, 0, 3, 0, 122, 100)
  ///  'Set the placement type.
  ///  listBox.Placement = PlacementType.FreeFloating
  ///  'Set the linked cell.
  ///  listBox.LinkedCell = "A1"
  ///  'Set the input range.
  ///  listBox.InputRange = "A2:A7"
  ///  'Set the selection tyle.
  ///  listBox.SelectionType = SelectionType.Single
  ///  'Set the list box with 3-D shading.
  ///  listBox.Shadow = True
  ///  'Saves the file.
  ///  workbook.Save("d:\test\tstlistbox.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.ListBox')]
  DNListBox = interface(DNShape)
  ['{183AA1CC-0630-392F-968F-3A42092395AB}']
  { getters & setters } 

    function get_ItemCount: Int32;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedCells: TArray<DNCell>;
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_SelectionType: DNSelectionType;
    procedure set_SelectionType(value: DNSelectionType);
    function get_PageChange: Int32;
    procedure set_PageChange(value: Int32);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Sets whether the item is selected
    ///</summary>
    ///  <param name="itemIndex">The item index</param>
    ///  <param name="isSelected">Whether the item is selected.
    ///  True means that this item should be selected.
    ///  False means that this item should be unselected.
    ///</param>
    procedure SelectedItem(itemIndex: Int32; isSelected: Boolean);
    ///<summary>
    ///  Indicates whether the item is selected.
    ///</summary>
    ///  <param name="itemIndex">The item index.</param>
    ///<returns>whether the item is selected.</returns>
    function IsSelected(itemIndex: Int32): Boolean;
    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of items in the list box.
    ///</summary>
    property ItemCount: Int32 read get_ItemCount;
    ///<summary>
    ///  Gets or sets the index number of the currently selected item in a list box or combo box.
    ///  Zero-based.
    ///</summary>
    ///<remarks>-1 presents no item is selected.</remarks>
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    ///<summary>
    ///  Gets the selected cells.
    ///  Returns null if the input range is not set or no item is selected
    ///</summary>
    property SelectedCells: TArray<DNCell> read get_SelectedCells;
    ///<summary>
    ///  Indicates whether the combobox has 3-D shading.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets or sets the selection mode of the specified list box.
    ///</summary>
    property SelectionType: DNSelectionType read get_SelectionType write set_SelectionType;
    ///<summary>
    ///  Specifies the amount by which the control's value is changed
    ///  when the user clicks on the scrollbar's page up or page down region.
    ///</summary>
    property PageChange: Int32 read get_PageChange write set_PageChange;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNListBox = class(TDNGenericImport<DNListBoxClass, DNListBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNOleObjectClass = interface(DNShapeClass)
  ['{7E46298B-6FFD-5B22-A7DC-EDABD6F6DB18}']
  end;

  ///<summary>
  ///  Represents an OleObject in a worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet.
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Define a string variable to store the image path.
  ///  string ImageUrl = @"C:\school.jpg";
  ///  //Get the picture into the streams.
  ///  FileStream fs = File.OpenRead(ImageUrl);
  ///  //Define a byte array.
  ///  byte[] imageData = new Byte[fs.Length];
  ///  //Obtain the picture into the array of bytes from streams.
  ///  fs.Read(imageData, 0, imageData.Length);
  ///  //Close the stream.
  ///  fs.Close();
  ///  //Get an excel file path in a variable.
  ///  string path = @"C:\Book1.xls";
  ///  //Get the file into the streams.
  ///  fs = File.OpenRead(path);
  ///  //Define an array of bytes.
  ///  byte[] objectData = new Byte[fs.Length];
  ///  //Store the file from streams.
  ///  fs.Read(objectData, 0, objectData.Length);
  ///  //Close the stream.
  ///  fs.Close();
  ///  //Add an Ole object into the worksheet with the image
  ///  //shown in MS Excel.
  ///  sheet.OleObjects.Add(14, 3, 200, 220, imageData);
  ///  //Set embedded ole object data.
  ///  sheet.OleObjects[0].ObjectData = objectData;
  ///  //Save the excel file
  ///  workbook.Save(@"C:\oleobjects.xls");
  ///  [Visual Basic]
  ///  'Instantiate a new Workbook.
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Get the first worksheet.
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Define a string variable to store the image path.
  ///  Dim ImageUrl As String = @"C:\school.jpg"
  ///  'Get the picture into the streams.
  ///  Dim fs As FileStream = File.OpenRead(ImageUrl)
  ///  'Define a byte array.
  ///  Dim imageData(fs.Length) As Byte
  ///  'Obtain the picture into the array of bytes from streams.
  ///  fs.Read(imageData, 0, imageData.Length)
  ///  'Close the stream.
  ///  fs.Close()
  ///  'Get an excel file path in a variable.
  ///  Dim path As String = @"C:\Book1.xls"
  ///  'Get the file into the streams.
  ///  fs = File.OpenRead(path)
  ///  'Define an array of bytes.
  ///  Dim objectData(fs.Length) As Byte
  ///  'Store the file from streams.
  ///  fs.Read(objectData, 0, objectData.Length)
  ///  'Close the stream.
  ///  fs.Close()
  ///  'Add an Ole object into the worksheet with the image
  ///  'shown in MS Excel.
  ///  sheet.OleObjects.Add(14, 3, 200, 220, imageData)
  ///  'Set embedded ole object data.
  ///  sheet.OleObjects(0).ObjectData = objectData
  ///  'Save the excel file
  ///  workbook.Save("C:\oleobjects.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.OleObject')]
  DNOleObject = interface(DNShape)
  ['{D0D4C434-AB62-3549-9A7F-ABC67551F973}']
  { getters & setters } 

    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IsLink: Boolean;
    procedure set_IsLink(value: Boolean);
    function get_DisplayAsIcon: Boolean;
    procedure set_DisplayAsIcon(value: Boolean);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_ObjectData: TArray<Byte>;
    procedure set_ObjectData(value: TArray<Byte>);
    function get_FullObjectBin: TArray<Byte>;
    function get_ImageSourceFullName: string;
    procedure set_ImageSourceFullName(value: string);
    function get_ProgID: string;
    procedure set_ProgID(value: string);
    function get_FileFormatType: DNFileFormatType;
    procedure set_FileFormatType(value: DNFileFormatType);
    function get_ObjectSourceFullName: string;
    procedure set_ObjectSourceFullName(value: string);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_AutoLoad: Boolean;
    procedure set_AutoLoad(value: Boolean);
    function get_ClassIdentifier: TArray<Byte>;
    procedure set_ClassIdentifier(value: TArray<Byte>);
    function get_ImageType: DNImageType;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Sets embedded object data.
    ///</summary>
    ///  <param name="linkToFile">Indicates whether the object links to the file. If true, the parameter objectData is ignored.</param>
    ///  <param name="objectData">The embedded object data. </param>
    ///  <param name="sourceFileName">The file name.</param>
    ///  <param name="displayAsIcon">Indicates whether diplaying object as an icon.
    ///  If true, the orginal image data will be covered by icon.
    ///</param>
    ///  <param name="label">The icon label. Only works when displayAsIcon as true.</param>
    procedure SetEmbeddedObject(linkToFile: Boolean; objectData: TArray<Byte>; sourceFileName: string; displayAsIcon: Boolean; &label: string); overload;
    ///<summary>
    ///  Sets embedded object data.
    ///</summary>
    ///  <param name="linkToFile">Indicates whether the object links to the file. If true, the parameter objectData is ignored.</param>
    ///  <param name="objectData">The embedded object data. </param>
    ///  <param name="sourceFileName">The file name.</param>
    ///  <param name="displayAsIcon">Indicates whether diplaying object as an icon.
    ///  If true, the orginal image data will be covered by icon.
    ///</param>
    ///  <param name="label">The icon label. Only works when displayAsIcon as true.</param>
    ///  <param name="updateIcon">Indicates whether automatically updating icon.</param>
    ///<remarks>
    ///  As Aspose can update embedd all file icons, so it's better that you can add correct icon with <paramref name="updateIcon" />
    ///  as false.
    ///</remarks>
    procedure SetEmbeddedObject(linkToFile: Boolean; objectData: TArray<Byte>; sourceFileName: string; displayAsIcon: Boolean; &label: string; updateIcon: Boolean); overload;
    ///<summary>
    ///  Sets the ole native source full file name with path.
    ///</summary>
    ///  <param name="sourceFullName">the ole native source full file name</param>
    procedure SetNativeSourceFullName(sourceFullName: string);
    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  True indicates that the size of the ole object will be auto changed as the size of snapshop of the embedded content
    ///  when the ole object is activated.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Returns true if the OleObject links to the file.
    ///</summary>
    property IsLink: Boolean read get_IsLink write set_IsLink;
    ///<summary>
    ///  True if the specified object is displayed as an icon
    ///  and the image will not be auto changed.
    ///</summary>
    property DisplayAsIcon: Boolean read get_DisplayAsIcon write set_DisplayAsIcon;
    ///<summary>
    ///  Represents image of ole object as byte array.
    ///</summary>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    ///<summary>
    ///  Represents embedded ole object data as byte array.
    ///</summary>
    property ObjectData: TArray<Byte> read get_ObjectData write set_ObjectData;
    ///<summary>
    ///  Gets the full embedded ole object binary data in the template file.
    ///</summary>
    property FullObjectBin: TArray<Byte> read get_FullObjectBin;
    ///<summary>
    ///  Gets or sets the path and name of the source file for the linked image.
    ///</summary>
    ///<remarks>
    ///  The default value is an empty string.
    ///  If SourceFullName is not an empty string, the image is linked.
    ///  If SourceFullName is not an empty string, but Data is null, then the image is linked and not stored in the file.
    ///</remarks>
    property ImageSourceFullName: string read get_ImageSourceFullName write set_ImageSourceFullName;
    ///<summary>
    ///  Gets or sets the ProgID of the OLE object.
    ///</summary>
    property ProgID: string read get_ProgID write set_ProgID;
    ///<summary>
    ///  Gets and sets the file type of the embedded ole object data
    ///</summary>
    property FileFormatType: DNFileFormatType read get_FileFormatType write set_FileFormatType;
    ///<summary>
    ///  Returns the source full name of the source file for the linked OLE object.
    ///</summary>
    ///<remarks>Only supports setting the source full name when the file type is OleFileType.Unknown.
    ///  Such as wav file ,avi file..etc..
    ///</remarks>
    property ObjectSourceFullName: string read get_ObjectSourceFullName write set_ObjectSourceFullName;
    ///<summary>
    ///  Gets and sets the display label of the linked ole object.
    ///</summary>
    property &Label: string read get_Label write set_Label;
    ///<summary>
    ///  Returns the source full name of the source file for the linked OLE object.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use OleObject.ObjectSourceFullName property.
    ///  This property will be removed 12 months later since November 2013.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Specifies whether the link to the OleObject is automatically updated or not.
    ///</summary>
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    ///<summary>
    ///  Specifies whether the host application for the embedded object shall be called to load
    ///  the object data automatically when the parent workbook is opened.
    ///</summary>
    property AutoLoad: Boolean read get_AutoLoad write set_AutoLoad;
    ///<summary>
    ///  Gets and sets the class identifier of the embedded object.
    ///  It means which application opens the embedded file.
    ///</summary>
    property ClassIdentifier: TArray<Byte> read get_ClassIdentifier write set_ClassIdentifier;
    ///<summary>
    ///  Gets the image format of the ole object.
    ///</summary>
    property ImageType: DNImageType read get_ImageType;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNOleObject = class(TDNGenericImport<DNOleObjectClass, DNOleObject>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNOvalClass = interface(DNShapeClass)
  ['{B2D495E6-C466-5677-B0F5-5FB3E1EC4680}']
  end;

  ///<summary>
  ///  Represents the oval shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Oval')]
  DNOval = interface(DNShape)
  ['{CA041F25-2E09-3902-B38F-1D281FDDB83D}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNOval = class(TDNGenericImport<DNOvalClass, DNOval>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPictureClass = interface(DNShapeClass)
  ['{D5CA6942-A344-5FF6-915A-FFC2041873CD}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a single picture in a spreadsheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Workbook object
  ///  int sheetIndex = workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[sheetIndex];
  ///  //Adding a picture at the location of a cell whose row and column indices
  ///  //are 5 in the worksheet. It is "F6" cell
  ///  worksheet.Pictures.Add(5, 5, "C:\\image.gif");
  ///  //Saving the Excel file
  ///  workbook.Save(saveFileDialog1.FileName, SaveFormat.Excel97To2003);
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Workbook object
  ///  Dim sheetIndex As Integer = workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(sheetIndex)
  ///  'Adding a picture at the location of a cell whose row and column indices
  ///  'are 5 in the worksheet. It is "F6" cell
  ///  worksheet.Pictures.Add(5, 5, "C:\image.gif")
  ///  'Saving the Excel file
  ///  workbook.Save("C:\book1.xls", SaveFormat.Excel97To2003)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.Picture')]
  DNPicture = interface(DNShape)
  ['{2D4B0738-52FB-3C6F-A3E3-0FD251D48852}']
  { getters & setters } 

    function get_OriginalHeight: Int32;
    function get_OriginalWidth: Int32;
    function get_BorderLineColor: DDN.System.Drawing.DNColor;
    procedure set_BorderLineColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWeight: Double;
    procedure set_BorderWeight(value: Double);
    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IsLink: Boolean;
    procedure set_IsLink(value: Boolean);
    function get_IsDynamicDataExchange: Boolean;
    procedure set_IsDynamicDataExchange(value: Boolean);
    function get_DisplayAsIcon: Boolean;
    procedure set_DisplayAsIcon(value: Boolean);
    function get_ImageType: DNImageType;
    function get_OriginalHeightCM: Double;
    function get_OriginalWidthCM: Double;
    function get_OriginalHeightInch: Double;
    function get_OriginalWidthInch: Double;
    function get_SignatureLine: DNSignatureLine;
    procedure set_SignatureLine(value: DNSignatureLine);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Copy the picture.
    ///</summary>
    ///  <param name="source">The source picture.</param>
    ///  <param name="options">The copy options.</param>
    procedure Copy(source: DNPicture; options: DNCopyOptions);
    ///<summary>
    ///  Moves the picture to a specified location.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    procedure Move(upperLeftRow: Int32; upperLeftColumn: Int32);
    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the original height of the picture.
    ///</summary>
    property OriginalHeight: Int32 read get_OriginalHeight;
    ///<summary>
    ///  Gets the original width of the picture.
    ///</summary>
    property OriginalWidth: Int32 read get_OriginalWidth;
    ///<summary>
    ///  Represents the <see cref="T:System.Drawing.Color" />
    ///  of the border line of a picture.
    ///</summary>
    property BorderLineColor: DDN.System.Drawing.DNColor read get_BorderLineColor write set_BorderLineColor;
    ///<summary>
    ///  Gets or sets the weight of the border line of a picture in units of pt.
    ///</summary>
    property BorderWeight: Double read get_BorderWeight write set_BorderWeight;
    ///<summary>
    ///  Gets the data of the picture.
    ///</summary>
    property Data: TArray<Byte> read get_Data write set_Data;
    ///<summary>
    ///  Gets or sets the path and name of the source file for the linked image.
    ///</summary>
    ///<remarks>
    ///  The default value is an empty string.
    ///  If SourceFullName is not an empty string, the image is linked.
    ///  If SourceFullName is not an empty string, but Data is null, then the image is linked and not stored in the file.
    ///</remarks>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets and sets the data of the formula.
    ///</summary>
    property Formula: string read get_Formula write set_Formula;
    ///<summary>
    ///  True indicates that the size of the ole object will be auto changed as the size of snapshop of the embedded content
    ///  when the ole object is activated.
    ///</summary>
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    ///<summary>
    ///  Returns true if the picture is linked to a file.
    ///</summary>
    property IsLink: Boolean read get_IsLink write set_IsLink;
    ///<summary>
    ///  Gets or sets whether dynamic data exchange
    ///</summary>
    property IsDynamicDataExchange: Boolean read get_IsDynamicDataExchange write set_IsDynamicDataExchange;
    ///<summary>
    ///  True if the specified object is displayed as an icon
    ///  and the image will not be auto changed.
    ///</summary>
    property DisplayAsIcon: Boolean read get_DisplayAsIcon write set_DisplayAsIcon;
    ///<summary>
    ///  Gets the image format of the picture.
    ///</summary>
    property ImageType: DNImageType read get_ImageType;
    ///<summary>
    ///  Gets the original height of picture, in unit of centimeters.
    ///</summary>
    property OriginalHeightCM: Double read get_OriginalHeightCM;
    ///<summary>
    ///  Gets the original width of picture, in unit of centimeters.
    ///</summary>
    property OriginalWidthCM: Double read get_OriginalWidthCM;
    ///<summary>
    ///  Gets the original height of picture, in unit of inches.
    ///</summary>
    property OriginalHeightInch: Double read get_OriginalHeightInch;
    ///<summary>
    ///  Gets the original width of picture, in unit of inches.
    ///</summary>
    property OriginalWidthInch: Double read get_OriginalWidthInch;
    ///<summary>
    ///  Gets and sets the signature line
    ///</summary>
    property SignatureLine: DNSignatureLine read get_SignatureLine write set_SignatureLine;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNPicture = class(TDNGenericImport<DNPictureClass, DNPicture>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNRadioButtonClass = interface(DNShapeClass)
  ['{BC9CB720-5AF5-56A8-BE51-0E8B227C362D}']
  end;

  ///<summary>
  ///  Represents a radio button.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.RadioButton')]
  DNRadioButton = interface(DNShape)
  ['{011F43ED-DC2A-3BE8-9FD5-6A7D1ED050E6}']
  { getters & setters } 

    function get_IsChecked: Boolean;
    procedure set_IsChecked(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_GroupBox: DNGroupBox;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if the radiobutton is checked or not.
    ///</summary>
    property IsChecked: Boolean read get_IsChecked write set_IsChecked;
    ///<summary>
    ///  Indicates whether the combobox has 3-D shading.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Gets the GroupBox that contains this RadioButton.
    ///</summary>
    property GroupBox: DNGroupBox read get_GroupBox;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNRadioButton = class(TDNGenericImport<DNRadioButtonClass, DNRadioButton>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNRectangleShapeClass = interface(DNShapeClass)
  ['{B16C0413-3A7F-5A89-9747-FBFC3F69CC90}']
  end;

  ///<summary>
  ///  Represents the rectangle shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.RectangleShape')]
  DNRectangleShape = interface(DNShape)
  ['{048E6BF1-62E0-3A8B-A05E-34CC0C7B9ABC}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNRectangleShape = class(TDNGenericImport<DNRectangleShapeClass, DNRectangleShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNScrollBarClass = interface(DNShapeClass)
  ['{C84CDDE9-76CD-5265-A15E-616F551A4E95}']
  end;

  ///<summary>
  ///  Represents a scroll bar object.
  ///</summary>
  ///<remarks>Scroll value must be between 0 and 30000.</remarks>
  [DNTypeName('Aspose.Cells.Drawing.ScrollBar')]
  DNScrollBar = interface(DNShape)
  ['{DDF6560B-75DA-37D8-B108-02AE5ACE1F79}']
  { getters & setters } 

    function get_CurrentValue: Int32;
    procedure set_CurrentValue(value: Int32);
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_IncrementalChange: Int32;
    procedure set_IncrementalChange(value: Int32);
    function get_PageChange: Int32;
    procedure set_PageChange(value: Int32);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_IsHorizontal: Boolean;
    procedure set_IsHorizontal(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the current value.
    ///</summary>
    property CurrentValue: Int32 read get_CurrentValue write set_CurrentValue;
    ///<summary>
    ///  Gets or sets the minimum value of a scroll bar or spinner range.
    ///</summary>
    property Min: Int32 read get_Min write set_Min;
    ///<summary>
    ///  Gets or sets the maximum value of a scroll bar or spinner range.
    ///</summary>
    property Max: Int32 read get_Max write set_Max;
    ///<summary>
    ///  Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
    ///</summary>
    property IncrementalChange: Int32 read get_IncrementalChange write set_IncrementalChange;
    ///<summary>
    ///  Gets or sets page change
    ///</summary>
    property PageChange: Int32 read get_PageChange write set_PageChange;
    ///<summary>
    ///  Indicates whether the shape has 3-D shading.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Indicates whether this is a horizontal scroll bar.
    ///</summary>
    property IsHorizontal: Boolean read get_IsHorizontal write set_IsHorizontal;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNScrollBar = class(TDNGenericImport<DNScrollBarClass, DNScrollBar>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSmartArtShapeClass = interface(DNShapeClass)
  ['{1C9DA229-8E63-5C21-9F2F-8EA50AA2EBAA}']
  end;

  ///<summary>
  ///  Represents the smart art.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.SmartArtShape')]
  DNSmartArtShape = interface(DNShape)
  ['{E852D889-B2D0-3076-BE7C-3D83EB739AD8}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNSmartArtShape = class(TDNGenericImport<DNSmartArtShapeClass, DNSmartArtShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSpinnerClass = interface(DNShapeClass)
  ['{C1E90E31-C2D0-5D91-B415-C4357AF3B1A5}']
  end;

  ///<summary>
  ///  Represents the Forms control: Spinner.
  ///</summary>
  ///<remarks>Scroll value must be between 0 and 30000.</remarks>
  [DNTypeName('Aspose.Cells.Drawing.Spinner')]
  DNSpinner = interface(DNShape)
  ['{F40946DA-3BBE-395D-85A7-53BDEBB4F486}']
  { getters & setters } 

    function get_CurrentValue: Int32;
    procedure set_CurrentValue(value: Int32);
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_IncrementalChange: Int32;
    procedure set_IncrementalChange(value: Int32);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_IsHorizontal: Boolean;
    procedure set_IsHorizontal(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the current value.
    ///</summary>
    property CurrentValue: Int32 read get_CurrentValue write set_CurrentValue;
    ///<summary>
    ///  Gets or sets the minimum value of a scroll bar or spinner range.
    ///</summary>
    property Min: Int32 read get_Min write set_Min;
    ///<summary>
    ///  Gets or sets the maximum value of a scroll bar or spinner range.
    ///</summary>
    property Max: Int32 read get_Max write set_Max;
    ///<summary>
    ///  Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
    ///</summary>
    property IncrementalChange: Int32 read get_IncrementalChange write set_IncrementalChange;
    ///<summary>
    ///  Indicates whether the shape has 3-D shading.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  Indicates whether this is a horizontal scroll bar.
    ///</summary>
    property IsHorizontal: Boolean read get_IsHorizontal write set_IsHorizontal;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNSpinner = class(TDNGenericImport<DNSpinnerClass, DNSpinner>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextBoxClass = interface(DNShapeClass)
  ['{AFDA98DE-789A-5BCC-AB03-A4FAC362D6DE}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a textbox in a spreadsheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a new Workbook.
  ///  Workbook workbook = new Workbook();
  ///  //Get the first worksheet in the book.
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Add a new textbox to the collection.
  ///  int textboxIndex = worksheet.TextBoxes.Add(2, 1, 160, 200);
  ///  //Get the textbox object.
  ///  Aspose.Cells.TextBox textbox0 = worksheet.TextBoxes[textboxIndex];
  ///  //Fill the text.
  ///  textbox0.Text = "ASPOSE______The .NET and JAVA Component Publisher!";
  ///  //Get the textbox text frame.
  ///  MsoTextFrame textframe0 = textbox0.TextFrame;
  ///  //Set the textbox to adjust it according to its contents.
  ///  textframe0.AutoSize = true;
  ///  //Set the placement.
  ///  textbox0.Placement = PlacementType.FreeFloating;
  ///  //Set the font color.
  ///  textbox0.Font.Color = Color.Blue;
  ///  //Set the font to bold.
  ///  textbox0.Font.IsBold = true;
  ///  //Set the font size.
  ///  textbox0.Font.Size = 14;
  ///  //Set font attribute to italic.
  ///  textbox0.Font.IsItalic = true;
  ///  //Add a hyperlink to the textbox.
  ///  textbox0.AddHyperlink("http://www.aspose.com/");
  ///  //Get the filformat of the textbox.
  ///  MsoFillFormat fillformat = textbox0.FillFormat;
  ///  //Set the fillcolor.
  ///  fillformat.ForeColor = Color.Silver;
  ///  //Get the lineformat type of the textbox.
  ///  MsoLineFormat lineformat = textbox0.LineFormat;
  ///  //Set the line style.
  ///  lineformat.Style = MsoLineStyle.ThinThick;
  ///  //Set the line weight.
  ///  lineformat.Weight = 6;
  ///  //Set the dash style to squaredot.
  ///  lineformat.DashStyle = MsoLineDashStyle.SquareDot;
  ///  //Add another textbox.
  ///  textboxIndex = worksheet.TextBoxes.Add(15, 4, 85, 120);
  ///  //Get the second textbox.
  ///  Aspose.Cells.TextBox textbox1 = worksheet.TextBoxes[textboxIndex];
  ///  //Input some text to it.
  ///  textbox1.Text = "This is another simple text box";
  ///  //Set the placement type as the textbox will move and
  ///  //resize with cells.
  ///  textbox1.Placement = PlacementType.MoveAndSize;
  ///  //Save the excel file.
  ///  workbook.Save("C:\\tsttextboxes.xls");
  ///  [Visual Basic]
  ///  'Instantiate a new Workbook.
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Get the first worksheet in the book.
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Add a new textbox to the collection.
  ///  Dim textboxIndex As Integer = worksheet.TextBoxes.Add(2, 1, 160, 200)
  ///  'Get the textbox object.
  ///  Dim textbox0 As Aspose.Cells.TextBox = worksheet.TextBoxes(textboxIndex)
  ///  'Fill the text.
  ///  textbox0.Text = "ASPOSE______The .NET and JAVA Component Publisher!"
  ///  'Get the textbox text frame.
  ///  Dim textframe0 As MsoTextFrame = textbox0.TextFrame
  ///  'Set the textbox to adjust it according to its contents.
  ///  textframe0.AutoSize = True
  ///  'Set the placement.
  ///  textbox0.Placement = PlacementType.FreeFloating
  ///  'Set the font color.
  ///  textbox0.Font.Color = Color.Blue
  ///  'Set the font to bold.
  ///  textbox0.Font.IsBold = True
  ///  'Set the font size.
  ///  textbox0.Font.Size = 14
  ///  'Set font attribute to italic.
  ///  textbox0.Font.IsItalic = True
  ///  'Add a hyperlink to the textbox.
  ///  textbox0.AddHyperlink("http://www.aspose.com/")
  ///  'Get the filformat of the textbox.
  ///  Dim fillformat As MsoFillFormat = textbox0.FillFormat
  ///  'Set the fillcolor.
  ///  fillformat.ForeColor = Color.Silver
  ///  'Get the lineformat type of the textbox.
  ///  Dim lineformat As MsoLineFormat = textbox0.LineFormat
  ///  'Set the line style.
  ///  lineformat.Style = MsoLineStyle.ThinThick
  ///  'Set the line weight.
  ///  lineformat.Weight = 6
  ///  'Set the dash style to squaredot.
  ///  lineformat.DashStyle = MsoLineDashStyle.SquareDot
  ///  'Add another textbox.
  ///  textboxIndex = worksheet.TextBoxes.Add(15, 4, 85, 120)
  ///  'Get the second textbox.
  ///  Dim textbox1 As Aspose.Cells.TextBox = worksheet.TextBoxes(textboxIndex)
  ///  'Input some text to it.
  ///  textbox1.Text = "This is another simple text box"
  ///  'Set the placement type as the textbox will move and
  ///  'resize with cells.
  ///  textbox1.Placement = PlacementType.MoveAndSize
  ///  'Save the excel file.
  ///  workbook.Save("C:\tsttextboxes.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.TextBox')]
  DNTextBox = interface(DNShape)
  ['{EDE5FD3A-A25B-3946-8761-56DA508190B9}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNTextBox = class(TDNGenericImport<DNTextBoxClass, DNTextBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNWebExtensionShapeClass = interface(DNShapeClass)
  ['{FE4F0A59-4A85-5235-8240-AD12956BD439}']
  end;

  ///<summary>
  ///  Represents the shape of web extension.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.WebExtensionShape')]
  DNWebExtensionShape = interface(DNShape)
  ['{DCE4BF7D-20B9-34AB-9630-162423EE2CDD}']
  { getters & setters } 

    function get_WebExtension: DNWebExtension;
    procedure set_WebExtension(value: DNWebExtension);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    ///<summary>
    ///  Recalculate the text area
    ///</summary>
    ///<returns>Text's Size in an array(width and height).</returns>
    function CalculateTextSize: TArray<Int32>;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///  <param name="flag">The flag of the font setting.</param>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    ///<summary>
    ///  Formats some characters with the font setting.
    ///</summary>
    ///  <param name="startIndex">The start index.</param>
    ///  <param name="length">The length.</param>
    ///  <param name="font">The font setting.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Shape.FormatCharacters(int startIndex, int length, Font font, StyleFlag flag) method.
    ///  This property will be removed 12 months later since March 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    ///<summary>
    ///  Returns a Characters object that represents a range of characters within the text.
    ///</summary>
    ///  <param name="startIndex">The index of the start of the character.</param>
    ///  <param name="length">The number of characters.</param>
    ///<returns>Characters object.</returns>
    ///<remarks>This method only works on shape with title.</remarks>
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    ///<summary>
    ///  Returns all Characters objects
    ///  that represents a range of characters within the text .
    ///</summary>
    ///<returns>All Characters objects </returns>
    function GetCharacters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Remove activeX control.
    ///</summary>
    procedure RemoveActiveXControl;
    ///<summary>
    ///  Creates the shape image and saves it to a stream in the specified format.
    ///</summary>
    ///  <param name="stream">The output stream.</param>
    ///  <param name="imageFormat">The format in which to save the image.</param>
    ///<remarks><p>The following formats are supported:
    ///  .bmp, .gif, .jpg, .jpeg, .tiff, .emf.</p>
    ///</remarks>
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    ///<summary>
    ///  Saves the shape to a file.
    ///</summary>
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Saves the shape to a stream.
    ///</summary>
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    ///<summary>
    ///  Returns the bitmap object of the shape .
    ///</summary>
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Gets the range linked to the control's value.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range linked to the control's value.</returns>
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range linked to the control's value.
    ///</summary>
    ///  <param name="formula">The range linked to the control's value.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the range used to fill the control.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The range used to fill the control.</returns>
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the range used to fill the control.
    ///</summary>
    ///  <param name="formula">The range used to fill the control.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Update the selected value by the value of the linked cell.
    ///</summary>
    procedure UpdateSelectedValue;
    ///<summary>
    ///  Converting smart art to grouped shapes.
    ///</summary>
    function GetResultOfSmartArt: DNGroupShape;
    ///<summary>
    ///  Brings the shape to the front or sends the shape to back.
    ///</summary>
    ///  <param name="orders">
    ///  If it's less than zero, sets the shape to back.
    ///  If it's greater than zero, brings the shape to front.
    ///</param>
    procedure ToFrontOrBack(orders: Int32);
    ///<summary>
    ///  Gets the value of locked property.
    ///</summary>
    ///  <param name="type">The type of the shape locked property.</param>
    ///<returns>Returns  the value of locked property.</returns>
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    ///<summary>
    ///  Set the locked property.
    ///</summary>
    ///  <param name="type">The locked type.</param>
    ///  <param name="value">The value of the property.</param>
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    ///<summary>
    ///  Adds a hyperlink to the shape.
    ///</summary>
    ///  <param name="address">Address of the hyperlink.</param>
    ///<returns>Return the new hyperlink object.</returns>
    function AddHyperlink(address: string): DNHyperlink;
    ///<summary>
    ///  Remove the hyperlink of the shape.
    ///</summary>
    procedure RemoveHyperlink;
    ///<summary>
    ///  Moves the shape to a specified range.
    ///</summary>
    ///  <param name="upperLeftRow">Upper left row index.</param>
    ///  <param name="upperLeftColumn">Upper left column index.</param>
    ///  <param name="lowerRightRow">Lower right row index</param>
    ///  <param name="lowerRightColumn">Lower right column index</param>
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    ///<summary>
    ///  Moves the picture to the top-right corner.
    ///</summary>
    ///  <param name="topRow">the row index.</param>
    ///  <param name="rightColumn">the column index.</param>
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and set the web extension.
    ///</summary>
    property WebExtension: DNWebExtension read get_WebExtension write set_WebExtension;
    ///<summary>
    ///  Gets and sets the name of macro.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Indicates whether the shape only contains an equation.
    ///</summary>
    property IsEquation: Boolean read get_IsEquation;
    ///<summary>
    ///  Indicates whether the shape is smart art.
    ///</summary>
    ///<remarks>
    ///  Only for ooxml file.
    ///</remarks>
    property IsSmartArt: Boolean read get_IsSmartArt;
    ///<summary>
    ///  Returns the position of a shape in the z-order.
    ///</summary>
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the <see cref="T:Aspose.Cells.Drawing.Shape" />
    ///  object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Specifies the title (caption) of the current shape object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns a MsoLineFormat object that contains line formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Line property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    ///<summary>
    ///  Returns a MsoFillFormat object that contains fill formatting properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill property.
    ///  This property will be removed 12 months later since July 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    ///<summary>
    ///  Represents the setting of the shape's formatting.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.Fill and Shape.Line properties.
    ///  This property will be removed 6 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Format: DNShapeFormat read get_Format;
    ///<summary>
    ///  Gets line style
    ///</summary>
    property Line: DNLineFormat read get_Line;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Cells.Drawing.Shape.FillFormat" />
    ///  object that contains fill formatting properties for the specified shape.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.Shape.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ReflectionEffect" />
    ///  object that specifies reflection effect for the chart element or shape.
    ///</summary>
    property Reflection: DNReflectionEffect read get_Reflection;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property Glow: DNGlowEffect read get_Glow;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    ///<summary>
    ///  Gets and sets 3d format of the shape.
    ///</summary>
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    ///<summary>
    ///  Returns a TextFrame object that contains the alignment and anchoring properties for the specified shape.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Shape.TextBody.TextAlignment property.
    ///  This property will be removed 12 months later since May 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    ///<summary>
    ///  Gets and sets the options of the picture format.
    ///</summary>
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    ///<summary>
    ///  Indicates whether the object is visible.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  True means that don't allow changes in aspect ratio.
    ///</summary>
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets the hyperlink of the shape.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink;
    ///<summary>
    ///  Gets the identifier of this shape.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Specifies an optional string that an application can use to Identify the particular shape.
    ///</summary>
    property Spid: string read get_Spid;
    ///<summary>
    ///  Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
    ///</summary>
    property Spt: Int32 read get_Spt;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Drawing.Shape.Worksheet" />
    ///  object which contains this shape.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Indicates whether the shape is a group.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Indicates whether this shape is a word art.
    ///</summary>
    ///<remarks>
    ///  Only for the Legacy Shape of xls file.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
    ///  Applies to Shape objects that represent WordArt.
    ///</summary>
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    ///<summary>
    ///  True if the object is locked, False if the object can be modified when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  True if the object is printable
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Gets and sets mso drawing type.
    ///</summary>
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    ///<summary>
    ///  Gets and set the shape anchor placeholder.
    ///</summary>
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Represents upper left corner row index.
    ///</summary>
    ///<remarks>If the shape is in the shape or in the group , UpperLeftRow will be ignored.</remarks>
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its upper left corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    ///<summary>
    ///  Represents upper left corner column index.
    ///</summary>
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal offset from its upper left corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    ///<summary>
    ///  Represents lower right corner row index.
    ///</summary>
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    ///<summary>
    ///  Gets or sets the shape's vertical offset from its lower right corner row.
    ///<remarks>The range of value is 0 to 256.</remarks>
    ///</summary>
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    ///<summary>
    ///  Represents lower right corner column index.
    ///</summary>
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    ///<summary>
    ///  Gets or sets the shape's horizontal  offset from its lower right corner column.
    ///<remarks>The range of value is 0 to 1024.</remarks>
    ///</summary>
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    ///<summary>
    ///  Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
    ///</summary>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
    ///</summary>
    property Bottom: Int32 read get_Bottom write set_Bottom;
    ///<summary>
    ///  Represents the width of shape, in unit of pixels.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Represents the width of the shape, in unit of inch.
    ///</summary>
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    ///<summary>
    ///  Represents the width of the shape, in unit of point.
    ///</summary>
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    ///<summary>
    ///  Represents the width of the shape, in unit of centimeters.
    ///</summary>
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    ///<summary>
    ///  Represents the height of shape, in unit of pixel.
    ///</summary>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    ///<summary>
    ///  Represents the height of the shape, in unit of points.
    ///</summary>
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    ///<summary>
    ///  Represents the height of the shape, in unit of inches.
    ///</summary>
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of pixels.
    ///</summary>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of inches.
    ///</summary>
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    ///<summary>
    ///  Represents the horizontal offset of shape from its left column, in unit of centimeters.
    ///</summary>
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of pixels.
    ///</summary>
    ///<remarks>If the shape is in the chart, represents the vertical offset of shape from its top border.</remarks>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of inches.
    ///</summary>
    property TopInch: Double read get_TopInch write set_TopInch;
    ///<summary>
    ///  Represents the vertical offset of shape from its top row, in unit of centimeters.
    ///</summary>
    property TopCM: Double read get_TopCM write set_TopCM;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
    ///</summary>
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    ///<summary>
    ///  Gets and sets the horizonal offset of shape from worksheet left border.
    ///</summary>
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    ///<summary>
    ///  Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  Gets and sets the width scale, in unit of percent of the original picture width.
    ///  If the shape is not picture ,the WidthScale property only returns 100;
    ///</summary>
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    ///<summary>
    ///  Gets and sets the height scale,in unit of percent of the original picture height.
    ///  If the shape is not picture ,the HeightScale property only returns 100;
    ///</summary>
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape,
    ///  in unit of 1/4000 of height of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    ///<summary>
    ///  Represents the horizontal offset of shape from the left border of the parent shape,
    ///  in unit of 1/4000 of width of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    ///<summary>
    ///  Represents the width of the shape, in unit of 1/4000 of the parent shape.
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    ///<summary>
    ///  Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
    ///</summary>
    ///<remarks>Only Applies when this shape in the group or chart.</remarks>
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    ///<summary>
    ///  Gets the group shape which contains this shape.
    ///</summary>
    property Group: DNGroupShape read get_Group;
    ///<summary>
    ///  Gets the auto shape type.
    ///</summary>
    property &Type: DNAutoShapeType read get_Type;
    ///<summary>
    ///  Gets and sets the line border of the shape is visible.
    ///</summary>
    property HasLine: Boolean read get_HasLine write set_HasLine;
    ///<summary>
    ///  Indicates whether the fill format is visible.
    ///</summary>
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    ///<summary>
    ///  Gets and sets whether shape is horizontally flipped .
    ///</summary>
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    ///<summary>
    ///  Gets and sets whether shape is vertically flipped .
    ///</summary>
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    ///<summary>
    ///  Get the actual bottom row.
    ///</summary>
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    ///<summary>
    ///  Get the connection points
    ///</summary>
    ///<returns></returns>
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    ///<summary>
    ///  Indicates whether shape is relative to original picture size.
    ///</summary>
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    ///<summary>
    ///  Gets or sets the worksheet range linked to the control's value.
    ///</summary>
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    ///<summary>
    ///  Gets or sets the worksheet range used to fill the specified combo box.
    ///</summary>
    property InputRange: string read get_InputRange write set_InputRange;
    ///<summary>
    ///  Gets and sets the preset text shape type.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Gets and sets the setting of the shape's text.
    ///</summary>
    property TextBody: DNFontSettingCollection read get_TextBody;
    ///<summary>
    ///  Represents the font of shape.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Represents the text options of the shape.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    ///<summary>
    ///  Represents the string in this TextBox object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Whether or not the text is rich text.
    ///</summary>
    property IsRichText: Boolean read get_IsRichText;
    ///<summary>
    ///  Gets and sets the html string which contains data and some formats in this textbox.
    ///</summary>
    property HtmlText: string read get_HtmlText write set_HtmlText;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the shape which contains text.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the shape which contains text.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets and sets the text orientation type of the shape.
    ///</summary>
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the shape.
    ///</summary>
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets and sets the text vertical alignment type of the shape.
    ///</summary>
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets/Sets the direction of the text flow for this object.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Gets the data of control.
    ///</summary>
    property ControlData: TArray<Byte> read get_ControlData;
    ///<summary>
    ///  Gets the ActiveX control.
    ///</summary>
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    ///<summary>
    ///  Gets the paths of a custom geometric shape.
    ///</summary>
    property Paths: DNShapePathCollection read get_Paths;
    ///<summary>
    ///  Gets the geometry
    ///</summary>
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNWebExtensionShape = class(TDNGenericImport<DNWebExtensionShapeClass, DNWebExtensionShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D2DED2B-3888-5322-BD6C-5ABFE26620D4}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeFormat')]
  DNShapeFormat = interface(DDN.mscorlib.DNObject)
  ['{5B090DCB-D942-3ABF-B440-9AD5534B7DE2}']
  { getters & setters } 

    function get_FillFormat: DNFillFormat;
    function get_Fill: DNFillFormat;
    function get_Outline: DNLineFormat;
    function get_Line: DNLineFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_GlowEffect: DNGlowEffect;
    function get_SoftEdgeRadius: Double;
    procedure set_SoftEdgeRadius(value: Double);

  { methods } 

    procedure ClearGlowEffect;
    function HasGlowEffect: Boolean;
    function HasFormat3D: Boolean;
    procedure ClearFormat3D;
    procedure ClearShadowEffect;
    function HasShadowEffect: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillFormat: DNFillFormat read get_FillFormat;
    property Fill: DNFillFormat read get_Fill;
    property Outline: DNLineFormat read get_Outline;
    property Line: DNLineFormat read get_Line;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property GlowEffect: DNGlowEffect read get_GlowEffect;
    property SoftEdgeRadius: Double read get_SoftEdgeRadius write set_SoftEdgeRadius;
  end;

  TDNShapeFormat = class(TDNGenericImport<DNShapeFormatClass, DNShapeFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeGuideClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9982CCA9-7C3B-5C3D-A37E-1ACCC04E9374}']
  end;

  ///<summary>
  ///  Encapsulates a shape guide specifies the presence of a shape guide that will be used to
  ///  govern the geometry of the specified shape
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeGuide')]
  DNShapeGuide = interface(DDN.mscorlib.DNObject)
  ['{DFB924B7-C6FD-3828-BB19-AED20E96B7B2}']
  { getters & setters } 

    function get_Value: Double;
    procedure set_Value(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets value of this guide
    ///</summary>
    property Value: Double read get_Value write set_Value;
  end;

  TDNShapeGuide = class(TDNGenericImport<DNShapeGuideClass, DNShapeGuide>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21BD3EFB-0E7F-5758-825D-6417130922DA}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Drawing.ShapePath" />
    ///  class.
    ///</summary>
    {class} function init: DNShapePath;

  end;

  ///<summary>
  ///  Represents a creation path consisting of a series of moves, lines and curves that when combined will form a geometric shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapePath')]
  DNShapePath = interface(DDN.mscorlib.DNObject)
  ['{C5B9FE90-E5C0-3094-9FE7-989383DA1F77}']
  { getters & setters } 

    function get_PathSegementList: DNShapeSegmentPathCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:Aspose.Cells.Drawing.ShapeSegmentPathCollection" />
    ///  list
    ///</summary>
    property PathSegementList: DNShapeSegmentPathCollection read get_PathSegementList;
  end;

  TDNShapePath = class(TDNGenericImport<DNShapePathClass, DNShapePath>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{220524E7-FF8B-56D7-93BE-907D420B052E}']
  end;

  ///<summary>
  ///  Represents an x-y coordinate within the path coordinate space.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapePathPoint')]
  DNShapePathPoint = interface(DDN.mscorlib.DNObject)
  ['{5D2217BC-CB83-3564-9617-684CC8591C61}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets x coordinate for this position coordinate.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets y coordinate for this position coordinate.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNShapePathPoint = class(TDNGenericImport<DNShapePathPointClass, DNShapePathPoint>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePropertyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AEF636CF-1229-5CF6-BB63-AE7F2DB500A9}']
  end;

  ///<summary>
  ///  This class specifies the visual shape properties for a chart element or shape.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapePropertyCollection')]
  DNShapePropertyCollection = interface(DDN.mscorlib.DNObject)
  ['{C3EC0DCD-6E83-36DC-9086-CC96A31A5DFF}']
  { getters & setters } 

    function get_GlowEffect: DNGlowEffect;
    function get_Format3D: DNFormat3D;
    function get_SoftEdgeRadius: Double;
    procedure set_SoftEdgeRadius(value: Double);
    function get_ShadowEffect: DNShadowEffect;

  { methods } 

    ///<summary>
    ///  Clears the glow effect of the shape.
    ///</summary>
    procedure ClearGlowEffect;
    ///<summary>
    ///  Indicates if the shape has glow effect data.
    ///</summary>
    ///<returns></returns>
    function HasGlowEffect: Boolean;
    ///<summary>
    ///  Indicates if the shape has 3d format data.
    ///</summary>
    ///<returns></returns>
    function HasFormat3D: Boolean;
    ///<summary>
    ///  Clears the 3D shape properties of the shape.
    ///</summary>
    procedure ClearFormat3D;
    ///<summary>
    ///  Clears the shadow effect of the chart element or shape.
    ///</summary>
    procedure ClearShadowEffect;
    ///<summary>
    ///  Indicates if the shape has shadow effect data.
    ///</summary>
    ///<returns></returns>
    function HasShadowEffect: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.ShapePropertyCollection.GlowEffect" />
    ///  object that specifies glow effect for the chart element or shape.
    ///</summary>
    property GlowEffect: DNGlowEffect read get_GlowEffect;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.ShapePropertyCollection.Format3D" />
    ///  object that specifies 3D shape properties for the chart element or shape.
    ///</summary>
    property Format3D: DNFormat3D read get_Format3D;
    ///<summary>
    ///  Gets and sets the radius of blur to apply to the edges, in unit of points.
    ///</summary>
    property SoftEdgeRadius: Double read get_SoftEdgeRadius write set_SoftEdgeRadius;
    ///<summary>
    ///  Represents a <seealso cref="P:Aspose.Cells.Drawing.ShapePropertyCollection.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
  end;

  TDNShapePropertyCollection = class(TDNGenericImport<DNShapePropertyCollectionClass, DNShapePropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeSegmentPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A73D504-3C6B-5D9B-8171-F81C9004837A}']
  end;

  ///<summary>
  ///  Represents a segment path in a path of the freeform.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ShapeSegmentPath')]
  DNShapeSegmentPath = interface(DDN.mscorlib.DNObject)
  ['{88E7178F-838A-3446-955C-C0DDDC9FC837}']
  { getters & setters } 

    function get_Type: DNShapePathType;
    function get_Points: DNShapePathPointCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the path segment type
    ///</summary>
    property &Type: DNShapePathType read get_Type;
    ///<summary>
    ///  Gets the points in path segment
    ///</summary>
    property Points: DNShapePathPointCollection read get_Points;
  end;

  TDNShapeSegmentPath = class(TDNGenericImport<DNShapeSegmentPathClass, DNShapeSegmentPath>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSignatureLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A0EC2D7E-EAF8-514A-BE7A-F47B22DA5FEC}']
  { constructors } 

    {class} function init: DNSignatureLine;

  end;

  ///<summary>
  ///  Represent the signature line.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.SignatureLine')]
  DNSignatureLine = interface(DDN.mscorlib.DNObject)
  ['{62960CDF-3CFF-3BEE-8430-23547B123455}']
  { getters & setters } 

    function get_Id: DDN.mscorlib.DNGuid;
    procedure set_Id(value: DDN.mscorlib.DNGuid);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);
    function get_Signer: string;
    procedure set_Signer(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_IsLine: Boolean;
    procedure set_IsLine(value: Boolean);
    function get_AllowComments: Boolean;
    procedure set_AllowComments(value: Boolean);
    function get_ShowSignedDate: Boolean;
    procedure set_ShowSignedDate(value: Boolean);
    function get_Instructions: string;
    procedure set_Instructions(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets identifier for this signature line.
    ///</summary>
    property Id: DDN.mscorlib.DNGuid read get_Id write set_Id;
    ///<summary>
    ///  Gets and sets the id of signature provider.
    ///</summary>
    ///<remarks>
    ///  It's typically the CLSID of the provider com add-in.
    ///</remarks>
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
    ///<summary>
    ///  Gets and sets the signer.
    ///</summary>
    property Signer: string read get_Signer write set_Signer;
    ///<summary>
    ///  Gets and sets the title of singer.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets and sets the email of singer.
    ///</summary>
    property Email: string read get_Email write set_Email;
    ///<summary>
    ///  Indicates whether it is a signature line.
    ///</summary>
    property IsLine: Boolean read get_IsLine write set_IsLine;
    ///<summary>
    ///  Indicates whether comments could be attached.
    ///</summary>
    property AllowComments: Boolean read get_AllowComments write set_AllowComments;
    ///<summary>
    ///  Indicates whether show signed date.
    ///</summary>
    property ShowSignedDate: Boolean read get_ShowSignedDate write set_ShowSignedDate;
    ///<summary>
    ///  Gets and sets the text shown to user at signing time.
    ///</summary>
    property Instructions: string read get_Instructions write set_Instructions;
  end;

  TDNSignatureLine = class(TDNGenericImport<DNSignatureLineClass, DNSignatureLine>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextEffectFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD9793F9-4361-5D7A-9ABD-07BD712A9B1E}']
  end;

  ///<summary>
  ///  Contains properties and methods that apply to WordArt objects.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Shapes shapes = workbook.Worksheets[0].Shapes;
  ///  shapes.AddTextEffect(MsoPresetTextEffect.TextEffect1, "Aspose", "Arial", 30, false, false, 0, 0, 0, 0, 100, 200);
  ///  TextEffectFormat textEffectFormat = shapes[0].TextEffect;
  ///  textEffectFormat.SetTextEffect(MsoPresetTextEffect.TextEffect10);
  ///  workbook.Save("C:\\Book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim shapes As Shapes = workbook.Worksheets(0).Shapes
  ///  shapes.AddTextEffect(MsoPresetTextEffect.TextEffect1, "Aspose", "Arial", 30, false, false, 0, 0, 0, 0, 100, 200)
  ///  Dim textEffectFormat As TextEffectFormat = shapes(0).TextEffect
  ///  TextEffectFormat.SetTextEffect(MsoPresetTextEffect.TextEffect10)
  ///  workbook.Save("C:\\Book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Drawing.TextEffectFormat')]
  DNTextEffectFormat = interface(DDN.mscorlib.DNObject)
  ['{04D48D64-E80B-35F4-96BC-4506DA46CD21}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_FontBold: Boolean;
    procedure set_FontBold(value: Boolean);
    function get_FontItalic: Boolean;
    procedure set_FontItalic(value: Boolean);
    function get_RotatedChars: Boolean;
    procedure set_RotatedChars(value: Boolean);
    function get_FontSize: Int32;
    procedure set_FontSize(value: Int32);
    function get_PresetShape: DNMsoPresetTextEffectShape;
    procedure set_PresetShape(value: DNMsoPresetTextEffectShape);

  { methods } 

    ///<summary>
    ///  Sets the preset text effect.
    ///</summary>
    ///  <param name="effect">The preset text effect.</param>
    procedure SetTextEffect(effect: DNMsoPresetTextEffect);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The text in the WordArt.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  The name of the font used in the WordArt.
    ///</summary>
    property FontName: string read get_FontName write set_FontName;
    ///<summary>
    ///  Indicates whether font is bold.
    ///</summary>
    property FontBold: Boolean read get_FontBold write set_FontBold;
    ///<summary>
    ///  Indicates whether font is italic.
    ///</summary>
    property FontItalic: Boolean read get_FontItalic write set_FontItalic;
    ///<summary>
    ///  If true,characters in the specified WordArt are rotated 90 degrees relative to the WordArt's bounding shape.
    ///</summary>
    property RotatedChars: Boolean read get_RotatedChars write set_RotatedChars;
    ///<summary>
    ///  The size (in points) of the font used in the WordArt.
    ///</summary>
    property FontSize: Int32 read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets and sets the preset shape type.
    ///</summary>
    property PresetShape: DNMsoPresetTextEffectShape read get_PresetShape write set_PresetShape;
  end;

  TDNTextEffectFormat = class(TDNGenericImport<DNTextEffectFormatClass, DNTextEffectFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNBulletClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DF7B401-9451-58CC-8773-973C158E1656}']
  end;

  ///<summary>
  ///  Represents the bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.Bullet')]
  DNBullet = interface(DDN.mscorlib.DNObject)
  ['{D10575C6-7C13-3C3A-99DE-A6A67F6D42B2}']
  { getters & setters } 

    function get_BulletValue: DNBulletValue;
    function get_Type: DNBulletType;
    procedure set_Type(value: DNBulletType);
    function get_FontName: string;
    procedure set_FontName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets bullet value
    ///</summary>
    property BulletValue: DNBulletValue read get_BulletValue;
    ///<summary>
    ///  Gets and sets the bullet type.
    ///</summary>
    property &Type: DNBulletType read get_Type write set_Type;
    ///<summary>
    ///  Get and sets the name of the font.
    ///</summary>
    property FontName: string read get_FontName write set_FontName;
  end;

  TDNBullet = class(TDNGenericImport<DNBulletClass, DNBullet>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNBulletValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25CE51FB-E064-5410-BD78-73F69D37122E}']
  end;

  ///<summary>
  ///  Represents the value of the bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.BulletValue')]
  DNBulletValue = interface(DDN.mscorlib.DNObject)
  ['{46B16A67-5996-3F74-A5ED-EBC8244653D2}']
  { getters & setters } 

    function get_Type: DNBulletType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the bullet's value.
    ///</summary>
    property &Type: DNBulletType read get_Type;
  end;

  TDNBulletValue = class(TDNGenericImport<DNBulletValueClass, DNBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNAutoNumberedBulletValueClass = interface(DNBulletValueClass)
  ['{7A9A31A1-092F-5CCF-BB6E-1C4629FE3942}']
  { constructors } 

    {class} function init: DNAutoNumberedBulletValue;

  end;

  ///<summary>
  ///  Represents automatic numbered bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.AutoNumberedBulletValue')]
  DNAutoNumberedBulletValue = interface(DNBulletValue)
  ['{DBE0BF6D-FBC6-347A-9A0A-8544C963D85D}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_StartAt: Int32;
    procedure set_StartAt(value: Int32);
    function get_AutonumberScheme: DNTextAutonumberScheme;
    procedure set_AutonumberScheme(value: DNTextAutonumberScheme);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the bullet.
    ///</summary>
    property &Type: DNBulletType read get_Type;
    ///<summary>
    ///  Gets and sets the starting number of the bullet.
    ///</summary>
    property StartAt: Int32 read get_StartAt write set_StartAt;
    ///<summary>
    ///  Represents the scheme of automatic number.
    ///</summary>
    property AutonumberScheme: DNTextAutonumberScheme read get_AutonumberScheme write set_AutonumberScheme;
  end;

  TDNAutoNumberedBulletValue = class(TDNGenericImport<DNAutoNumberedBulletValueClass, DNAutoNumberedBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNCharacterBulletValueClass = interface(DNBulletValueClass)
  ['{43C2C645-F24B-5829-B60F-58670EE2C021}']
  { constructors } 

    {class} function init: DNCharacterBulletValue;

  end;

  ///<summary>
  ///  Represents the character bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.CharacterBulletValue')]
  DNCharacterBulletValue = interface(DNBulletValue)
  ['{C4E17A31-ABBA-3A86-BC7D-21FB252F6BDF}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_Character: Char;
    procedure set_Character(value: Char);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the bullet.
    ///</summary>
    property &Type: DNBulletType read get_Type;
    ///<summary>
    ///  Gets and sets character of the bullet.
    ///</summary>
    property Character: Char read get_Character write set_Character;
  end;

  TDNCharacterBulletValue = class(TDNGenericImport<DNCharacterBulletValueClass, DNCharacterBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNNoneBulletValueClass = interface(DNBulletValueClass)
  ['{6B608588-BDDC-5BB1-BE58-C732E5153DB5}']
  { constructors } 

    {class} function init: DNNoneBulletValue;

  end;

  ///<summary>
  ///  Represents no bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.NoneBulletValue')]
  DNNoneBulletValue = interface(DNBulletValue)
  ['{6466CA0B-0B60-30D7-96E4-1B6D3163B81D}']
  { getters & setters } 

    function get_Type: DNBulletType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the bullet's value.
    ///</summary>
    property &Type: DNBulletType read get_Type;
  end;

  TDNNoneBulletValue = class(TDNGenericImport<DNNoneBulletValueClass, DNNoneBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNPictureBulletValueClass = interface(DNBulletValueClass)
  ['{C872B370-01F1-53F8-874D-C1664244CCD0}']
  { constructors } 

    {class} function init: DNPictureBulletValue;

  end;

  ///<summary>
  ///  Represents the value of the image bullet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.PictureBulletValue')]
  DNPictureBulletValue = interface(DNBulletValue)
  ['{D1B1AA99-4EC6-3643-9740-5AAD3DC106FB}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the bullet's value.
    ///</summary>
    property &Type: DNBulletType read get_Type;
    ///<summary>
    ///  Gets and sets image data of the bullet.
    ///</summary>
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
  end;

  TDNPictureBulletValue = class(TDNGenericImport<DNPictureBulletValueClass, DNPictureBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNShapeTextAlignmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{360EB745-CA99-557C-B4E2-7F9F1AF0B381}']
  end;

  ///<summary>
  ///  Represents the setting of shape's text alignment;
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.ShapeTextAlignment')]
  DNShapeTextAlignment = interface(DDN.mscorlib.DNObject)
  ['{C56CEE06-325B-3808-BD14-993E0C715A4F}']
  { getters & setters } 

    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_RotateTextWithShape: Boolean;
    procedure set_RotateTextWithShape(value: Boolean);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_AutoSize: Boolean;
    procedure set_AutoSize(value: Boolean);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TopMarginPt: Double;
    procedure set_TopMarginPt(value: Double);
    function get_BottomMarginPt: Double;
    procedure set_BottomMarginPt(value: Double);
    function get_LeftMarginPt: Double;
    procedure set_LeftMarginPt(value: Double);
    function get_RightMarginPt: Double;
    procedure set_RightMarginPt(value: Double);
    function get_IsAutoMargin: Boolean;
    procedure set_IsAutoMargin(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the text wrapped type of the shape which contains text.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Indicates whether rotating text with shape.
    ///</summary>
    property RotateTextWithShape: Boolean read get_RotateTextWithShape write set_RotateTextWithShape;
    ///<summary>
    ///  Gets and sets the text vertical overflow type of the text box.
    ///</summary>
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    ///<summary>
    ///  Gets and sets the text horizontal overflow type of the text box.
    ///</summary>
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    ///<summary>
    ///  Gets and sets the rotation of the shape.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets and sets the text direction.
    ///</summary>
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    ///<summary>
    ///  Indicates if size of shape is adjusted automatically according to its content.
    ///</summary>
    property AutoSize: Boolean read get_AutoSize write set_AutoSize;
    ///<summary>
    ///  Gets and set the transform type of text.
    ///</summary>
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    ///<summary>
    ///  Returns the top margin in unit of Points
    ///</summary>
    property TopMarginPt: Double read get_TopMarginPt write set_TopMarginPt;
    ///<summary>
    ///  Returns the bottom margin in unit of Points
    ///</summary>
    property BottomMarginPt: Double read get_BottomMarginPt write set_BottomMarginPt;
    ///<summary>
    ///  Returns the left margin in unit of Points
    ///</summary>
    property LeftMarginPt: Double read get_LeftMarginPt write set_LeftMarginPt;
    ///<summary>
    ///  Returns the right margin in unit of Points
    ///</summary>
    property RightMarginPt: Double read get_RightMarginPt write set_RightMarginPt;
    ///<summary>
    ///  Indicates whether the margin of the text frame is automatic.
    ///</summary>
    property IsAutoMargin: Boolean read get_IsAutoMargin write set_IsAutoMargin;
  end;

  TDNShapeTextAlignment = class(TDNGenericImport<DNShapeTextAlignmentClass, DNShapeTextAlignment>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextParagraphCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F26C2BA-76CC-5275-94EA-B3FA9F9A2D4C}']
  end;

  ///<summary>
  ///  Represents all text paragraph.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextParagraphCollection')]
  DNTextParagraphCollection = interface(DDN.mscorlib.DNObject)
  ['{217E4EAD-BD1F-3969-BC3A-D19801A8E282}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTextParagraph;

  { methods } 

    ///<summary>
    ///  Gets the enumerator of the paragraphs.
    ///</summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of text paragraphs.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTextParagraph read get_Item; default;
  end;

  TDNTextParagraphCollection = class(TDNGenericImport<DNTextParagraphCollectionClass, DNTextParagraphCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextTabStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{448D70B2-8E24-56FD-8541-EF35C2AF417A}']
  end;

  ///<summary>
  ///  Represents tab stop.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextTabStop')]
  DNTextTabStop = interface(DDN.mscorlib.DNObject)
  ['{7752B05F-FDDE-3CA9-A0D1-05E1C29F9EF3}']
  { getters & setters } 

    function get_TabAlignment: DNTextTabAlignmentType;
    procedure set_TabAlignment(value: DNTextTabAlignmentType);
    function get_TabPosition: Double;
    procedure set_TabPosition(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the alignment that is to be applied to text using this tab stop.
    ///</summary>
    property TabAlignment: DNTextTabAlignmentType read get_TabAlignment write set_TabAlignment;
    ///<summary>
    ///  Specifies the position of the tab stop relative to the left margin.
    ///</summary>
    property TabPosition: Double read get_TabPosition write set_TabPosition;
  end;

  TDNTextTabStop = class(TDNGenericImport<DNTextTabStopClass, DNTextTabStop>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNThreeDFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D238BF5-EC94-5B14-A898-A81A9605F35B}']
  end;

  ///<summary>
  ///  Represents a shape's three-dimensional formatting.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.ThreeDFormat')]
  DNThreeDFormat = interface(DDN.mscorlib.DNObject)
  ['{24D66952-33BB-3A72-B026-19771E68FE38}']
  { getters & setters } 

    function get_BottomBevelWidth: Double;
    procedure set_BottomBevelWidth(value: Double);
    function get_BottomBevelHeight: Double;
    procedure set_BottomBevelHeight(value: Double);
    function get_BottomBevelType: DNBevelType;
    procedure set_BottomBevelType(value: DNBevelType);
    function get_TopBevelWidth: Double;
    procedure set_TopBevelWidth(value: Double);
    function get_TopBevelHeight: Double;
    procedure set_TopBevelHeight(value: Double);
    function get_TopBevelType: DNBevelType;
    procedure set_TopBevelType(value: DNBevelType);
    function get_Material: DNPresetMaterialType;
    procedure set_Material(value: DNPresetMaterialType);
    function get_ContourColor: DNCellsColor;
    procedure set_ContourColor(value: DNCellsColor);
    function get_ContourWidth: Double;
    procedure set_ContourWidth(value: Double);
    function get_ExtrusionColor: DNCellsColor;
    procedure set_ExtrusionColor(value: DNCellsColor);
    function get_ExtrusionHeight: Double;
    procedure set_ExtrusionHeight(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);
    function get_LightAngle: Double;
    procedure set_LightAngle(value: Double);
    function get_Lighting: DNLightRigType;
    procedure set_Lighting(value: DNLightRigType);
    function get_LightingDirection: DNLightRigDirectionType;
    procedure set_LightingDirection(value: DNLightRigDirectionType);
    function get_Perspective: Double;
    procedure set_Perspective(value: Double);
    function get_RotationX: Double;
    procedure set_RotationX(value: Double);
    function get_RotationY: Double;
    procedure set_RotationY(value: Double);
    function get_RotationZ: Double;
    procedure set_RotationZ(value: Double);
    function get_PresetCameraType: DNPresetCameraType;
    procedure set_PresetCameraType(value: DNPresetCameraType);

  { methods } 

    ///<summary>
    ///  Gets hashcode.
    ///</summary>
    ///<returns></returns>
    function GetHashCode: Int32;
    ///<summary></summary>
    ///  <param name="obj"></param>
    ///<returns></returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the width of the bottom bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property BottomBevelWidth: Double read get_BottomBevelWidth write set_BottomBevelWidth;
    ///<summary>
    ///  Gets and sets the height of the bottom bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property BottomBevelHeight: Double read get_BottomBevelHeight write set_BottomBevelHeight;
    ///<summary>
    ///  Gets and sets the type of the bottom bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property BottomBevelType: DNBevelType read get_BottomBevelType write set_BottomBevelType;
    ///<summary>
    ///  Gets and sets the width of the top bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property TopBevelWidth: Double read get_TopBevelWidth write set_TopBevelWidth;
    ///<summary>
    ///  Gets and sets the height of the top bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property TopBevelHeight: Double read get_TopBevelHeight write set_TopBevelHeight;
    ///<summary>
    ///  Gets and sets the type of the top bevel, or how far into the shape it is applied.
    ///  In unit of Points.
    ///</summary>
    property TopBevelType: DNBevelType read get_TopBevelType write set_TopBevelType;
    ///<summary>
    ///  Represents the preset material which is combined with the lighting properties to give the
    ///  final look and feel of a shape.
    ///</summary>
    property Material: DNPresetMaterialType read get_Material write set_Material;
    ///<summary>
    ///  Gets and sets the contour color on a shape.
    ///</summary>
    property ContourColor: DNCellsColor read get_ContourColor write set_ContourColor;
    ///<summary>
    ///  Gets and sets the contour width on the shape, in unit of points.
    ///</summary>
    property ContourWidth: Double read get_ContourWidth write set_ContourWidth;
    ///<summary>
    ///  Gets the extrusion color on a shape.
    ///</summary>
    property ExtrusionColor: DNCellsColor read get_ExtrusionColor write set_ExtrusionColor;
    ///<summary>
    ///  Gets and sets the extrusion height of the applied to the shape, in unit of points.
    ///</summary>
    property ExtrusionHeight: Double read get_ExtrusionHeight write set_ExtrusionHeight;
    ///<summary>
    ///  Defines the distance from ground for the 3D shape.
    ///</summary>
    property Z: Double read get_Z write set_Z;
    ///<summary>
    ///  Gets and sets the angle of the extrusion lights.
    ///</summary>
    property LightAngle: Double read get_LightAngle write set_LightAngle;
    ///<summary>
    ///  Gets and sets type of light rig.
    ///</summary>
    property Lighting: DNLightRigType read get_Lighting write set_Lighting;
    ///<summary>
    ///  Gets and sets the direction from which the light rig is oriented in relation to the scene.
    ///</summary>
    property LightingDirection: DNLightRigDirectionType read get_LightingDirection write set_LightingDirection;
    ///<summary>
    ///  Gets and sets the angle at which a ThreeDFormat object can be viewed.
    ///</summary>
    property Perspective: Double read get_Perspective write set_Perspective;
    ///<summary>
    ///  Gets and sets the rotation of the extruded shape around the x-axis in degrees.
    ///</summary>
    property RotationX: Double read get_RotationX write set_RotationX;
    ///<summary>
    ///  Gets and sets the rotation of the extruded shape around the y-axis in degrees.
    ///</summary>
    property RotationY: Double read get_RotationY write set_RotationY;
    ///<summary>
    ///  Gets and sets the rotation of the extruded shape around the z-axis in degrees.
    ///</summary>
    property RotationZ: Double read get_RotationZ write set_RotationZ;
    ///<summary>
    ///  Gets and sets the extrusion preset camera type.
    ///</summary>
    property PresetCameraType: DNPresetCameraType read get_PresetCameraType write set_PresetCameraType;
  end;

  TDNThreeDFormat = class(TDNGenericImport<DNThreeDFormatClass, DNThreeDFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTilePicOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4C54BECD-65F2-5BF5-935B-0A4C35A9BABD}']
  { constructors } 

    {class} function init: DNTilePicOption;

  end;

  ///<summary>
  ///  Represents tile picture as texture.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.TilePicOption')]
  DNTilePicOption = interface(DDN.mscorlib.DNObject)
  ['{7EA9E482-B0BF-3648-9E2E-18481AECC5B8}']
  { getters & setters } 

    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);
    function get_ScaleX: Double;
    procedure set_ScaleX(value: Double);
    function get_ScaleY: Double;
    procedure set_ScaleY(value: Double);
    function get_MirrorType: DNMirrorType;
    procedure set_MirrorType(value: DNMirrorType);
    function get_AlignmentType: DNRectangleAlignmentType;
    procedure set_AlignmentType(value: DNRectangleAlignmentType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the X offset for tiling picture.
    ///</summary>
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    ///<summary>
    ///  Gets or sets the Y offset for tiling picture.
    ///</summary>
    property OffsetY: Double read get_OffsetY write set_OffsetY;
    ///<summary>
    ///  Gets or sets the X scale for tiling picture.
    ///</summary>
    property ScaleX: Double read get_ScaleX write set_ScaleX;
    ///<summary>
    ///  Gets or sets the Y scale for tiling picture.
    ///</summary>
    property ScaleY: Double read get_ScaleY write set_ScaleY;
    ///<summary>
    ///  Gets or sets the mirror type for tiling.
    ///</summary>
    property MirrorType: DNMirrorType read get_MirrorType write set_MirrorType;
    ///<summary>
    ///  Gets or sets the alignment for tiling.
    ///</summary>
    property AlignmentType: DNRectangleAlignmentType read get_AlignmentType write set_AlignmentType;
  end;

  TDNTilePicOption = class(TDNGenericImport<DNTilePicOptionClass, DNTilePicOption>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDynamicFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{32113029-E8EE-5D63-A95C-225D542751E5}']
  end;

  ///<summary>
  ///  Represents the dynamic filter.
  ///</summary>
  [DNTypeName('Aspose.Cells.DynamicFilter')]
  DNDynamicFilter = interface(DDN.mscorlib.DNObject)
  ['{AEE1559C-5CB3-35EC-93C8-B9AD783DA98F}']
  { getters & setters } 

    function get_DynamicFilterType: DNDynamicFilterType;
    procedure set_DynamicFilterType(value: DNDynamicFilterType);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_MaxValue: DDN.mscorlib.DNObject;
    procedure set_MaxValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the dynamic filter type.
    ///</summary>
    property DynamicFilterType: DNDynamicFilterType read get_DynamicFilterType write set_DynamicFilterType;
    ///<summary>
    ///  Gets and sets the dynamic filter value.
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Gets and sets the dynamic filter max value.
    ///</summary>
    property MaxValue: DDN.mscorlib.DNObject read get_MaxValue write set_MaxValue;
  end;

  TDNDynamicFilter = class(TDNGenericImport<DNDynamicFilterClass, DNDynamicFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNErrorCheckOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F9DA1A3C-A6B9-5172-9D2E-BCB0C01D8F38}']
  end;

  ///<summary>
  ///  Error check setting applied on certain ranges.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  ErrorCheckOptionCollection opts = workbook.Worksheets[0].ErrorCheckOptions;
  ///  int optionIdx = opts.Add();
  ///  ErrorCheckOption opt = opts[optionIdx];
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.InconsistFormula, false);
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.InconsistRange, false);
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.TextDate, false);
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.TextNumber, false);
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.Validation, false);
  ///  opt.AddRange(CellArea.CreateCellArea("A1", "B10"));
  ///  workbook.Save(@"D:\Filetemp\Book1.xlsx");
  ///  [Visual Basic]
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim opts As ErrorCheckOptionCollection = workbook.Worksheets(0).ErrorCheckOptions
  ///  Dim optionIdx As Integer = opts.Add()
  ///  Dim opt As ErrorCheckOption = opts(optionIdx)
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.InconsistFormula, False)
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.InconsistRange, False)
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.TextDate, False)
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.TextNumber, False)
  ///  opt.SetErrorCheck(Aspose.Cells.ErrorCheckType.Validation, False)
  ///  opt.AddRange(CellArea.CreateCellArea("A1", "B10"))
  ///  workbook.Save("D:\Filetemp\Book1.xlsx")
  ///</code></example>
  [DNTypeName('Aspose.Cells.ErrorCheckOption')]
  DNErrorCheckOption = interface(DDN.mscorlib.DNObject)
  ['{9B4B6556-4674-3D28-9E91-0C02DE222D17}']
  { methods } 

    ///<summary>
    ///  Checks whether given error type will be checked.
    ///</summary>
    ///  <param name="errorCheckType">error type can be checked</param>
    ///<returns>return true if given error type will be checked(green triangle will be shown for cell if the check failed).</returns>
    function IsErrorCheck(errorCheckType: DNErrorCheckType): Boolean;
    ///<summary>
    ///  Sets whether given error type will be checked.
    ///</summary>
    ///  <param name="errorCheckType">error type can be checked.</param>
    ///  <param name="isCheck">true if given error type needs to be checked(green triangle will be shown for cell if the check failed).</param>
    procedure SetErrorCheck(errorCheckType: DNErrorCheckType; isCheck: Boolean);
    ///<summary>
    ///  Gets the count of ranges that influenced by this setting.
    ///</summary>
    ///<returns>the count of ranges that influenced by this setting.</returns>
    function GetCountOfRange: Int32;
    ///<summary>
    ///  Adds one influenced range by this setting.
    ///</summary>
    ///  <param name="ca">the range to be added.</param>
    ///<returns>the index of the added range in the range list of this setting.</returns>
    function AddRange(ca: DNCellArea): Int32;
    ///<summary>
    ///  Gets the influenced range of this setting by given index.
    ///</summary>
    ///  <param name="index">the index of range</param>
    ///<returns>return influenced range at given index.</returns>
    function GetRange(index: Int32): DNCellArea;
    ///<summary>
    ///  Removes one range by given index.
    ///</summary>
    ///  <param name="index">the index of the range to be removed.</param>
    procedure RemoveRange(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNErrorCheckOption = class(TDNGenericImport<DNErrorCheckOptionClass, DNErrorCheckOption>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExportObjectEventClass = interface(DDN.mscorlib.DNObjectClass)
  ['{921C23EA-FCB3-570F-BE3A-2CD4F9EF4749}']
  end;

  ///<summary>
  ///  The event triggered when exporting an object, such as Picture.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExportObjectEvent')]
  DNExportObjectEvent = interface(DDN.mscorlib.DNObject)
  ['{2E94A7D1-7F47-3C9D-89A0-FB0113F83715}']
  { methods } 

    ///  Gets the object that contains the data to be saved.
    ///  @return the data source object.
    ///<summary>
    ///  Gets the object to be exported.
    ///</summary>
    ///<returns>the object to be exported.</returns>
    function GetSource: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExportObjectEvent = class(TDNGenericImport<DNExportObjectEventClass, DNExportObjectEvent>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExportTableOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2CC04435-59FC-59CC-91C7-ED5812B558B8}']
  { constructors } 

    {class} function init: DNExportTableOptions;

  end;

  ///<summary>
  ///  Represents all export table options.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExportTableOptions')]
  DNExportTableOptions = interface(DDN.mscorlib.DNObject)
  ['{2E35ABE2-CDC0-3A4B-9D7A-DA5D3568E375}']
  { getters & setters } 

    function get_DataTable: DDN.System.Data.DNDataTable;
    procedure set_DataTable(value: DDN.System.Data.DNDataTable);
    function get_ExportColumnName: Boolean;
    procedure set_ExportColumnName(value: Boolean);
    function get_SkipErrorValue: Boolean;
    procedure set_SkipErrorValue(value: Boolean);
    function get_PlotVisibleCells: Boolean;
    procedure set_PlotVisibleCells(value: Boolean);
    function get_PlotVisibleRows: Boolean;
    procedure set_PlotVisibleRows(value: Boolean);
    function get_PlotVisibleColumns: Boolean;
    procedure set_PlotVisibleColumns(value: Boolean);
    function get_ExportAsString: Boolean;
    procedure set_ExportAsString(value: Boolean);
    function get_ExportAsHtmlString: Boolean;
    procedure set_ExportAsHtmlString(value: Boolean);
    function get_FormatStrategy: DNCellValueFormatStrategy;
    procedure set_FormatStrategy(value: DNCellValueFormatStrategy);
    function get_CheckMixedValueType: Boolean;
    procedure set_CheckMixedValueType(value: Boolean);
    function get_IsVertical: Boolean;
    procedure set_IsVertical(value: Boolean);
    function get_Indexes: TArray<Int32>;
    procedure set_Indexes(value: TArray<Int32>);
    function get_RenameStrategy: DNRenameStrategy;
    procedure set_RenameStrategy(value: DNRenameStrategy);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the DataTable which columns' data type is assigned.
    ///</summary>
    property DataTable: DDN.System.Data.DNDataTable read get_DataTable write set_DataTable;
    ///<summary>
    ///  Indicates whether the data in the first row are exported to the column name of the DataTable.
    ///  The default value is false.
    ///</summary>
    property ExportColumnName: Boolean read get_ExportColumnName write set_ExportColumnName;
    ///<summary>
    ///  Indicates whether skip invalid value for the column.
    ///  For example,if the column type is decimal ,the value is greater than decimal.MaxValue
    ///  and this property is true,we will not throw exception again.
    ///  The default value is false.
    ///</summary>
    property SkipErrorValue: Boolean read get_SkipErrorValue write set_SkipErrorValue;
    ///<summary>
    ///  Only exports visible cells.
    ///</summary>
    property PlotVisibleCells: Boolean read get_PlotVisibleCells write set_PlotVisibleCells;
    ///<summary>
    ///  Only exports visible rows.
    ///</summary>
    property PlotVisibleRows: Boolean read get_PlotVisibleRows write set_PlotVisibleRows;
    ///<summary>
    ///  Only exports visible columns.
    ///</summary>
    property PlotVisibleColumns: Boolean read get_PlotVisibleColumns write set_PlotVisibleColumns;
    ///<summary>
    ///  Exports the string value of the cells to the DataTable.
    ///</summary>
    property ExportAsString: Boolean read get_ExportAsString write set_ExportAsString;
    ///<summary>
    ///  Exports the html string value of the cells to the DataTable.
    ///</summary>
    property ExportAsHtmlString: Boolean read get_ExportAsHtmlString write set_ExportAsHtmlString;
    ///<summary>
    ///  Gets and sets the format strategy when exporting the value as string value.
    ///</summary>
    property FormatStrategy: DNCellValueFormatStrategy read get_FormatStrategy write set_FormatStrategy;
    ///<summary>
    ///  False, Aspose.Cells will set the DataColumn's type by the value type of the first row for performance.
    ///  True, Aspose.Cells will check whether the value type in the column are mixed before set the DataColumn's type
    ///  And the value type are mixed, the DataColumn's type will be string.
    ///</summary>
    property CheckMixedValueType: Boolean read get_CheckMixedValueType write set_CheckMixedValueType;
    ///<summary>
    ///  True if a row in Workbook file represents a row in DataTable. False if a column in Workbook file represents a row in DataTable.
    ///</summary>
    property IsVertical: Boolean read get_IsVertical write set_IsVertical;
    ///<summary>
    ///  The indexes of columns/rows which should be exported out.
    ///</summary>
    property Indexes: TArray<Int32> read get_Indexes write set_Indexes;
    ///<summary>
    ///  Renames strategy when columns contains the duplicate names.
    ///</summary>
    property RenameStrategy: DNRenameStrategy read get_RenameStrategy write set_RenameStrategy;
  end;

  TDNExportTableOptions = class(TDNGenericImport<DNExportTableOptionsClass, DNExportTableOptions>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNConnectionParameterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D73CAC85-0882-5F16-8B6A-0DA82C30868D}']
  end;

  ///<summary>
  ///  Specifies properties about any parameters used with external data connections
  ///  Parameters are valid for ODBC and web queries.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionParameter')]
  DNConnectionParameter = interface(DDN.mscorlib.DNObject)
  ['{F192CDCE-A3F6-315D-8383-94C5A840CDCE}']
  { getters & setters } 

    function get_SqlType: DNSqlDataType;
    procedure set_SqlType(value: DNSqlDataType);
    function get_RefreshOnChange: Boolean;
    procedure set_RefreshOnChange(value: Boolean);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_Type: DNConnectionParameterType;
    procedure set_Type(value: DNConnectionParameterType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_CellReference: string;
    procedure set_CellReference(value: string);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  SQL data type of the parameter. Only valid for ODBC sources.
    ///</summary>
    property SqlType: DNSqlDataType read get_SqlType write set_SqlType;
    ///<summary>
    ///  Flag indicating whether the query should automatically refresh when the contents of a
    ///  cell that provides the parameter value changes. If true, then external data is refreshed
    ///  using the new parameter value every time there's a change. If false, then external data
    ///  is only refreshed when requested by the user, or some other event triggers refresh (e.g., workbook opened).
    ///</summary>
    property RefreshOnChange: Boolean read get_RefreshOnChange write set_RefreshOnChange;
    ///<summary>
    ///  Prompt string for the parameter. Presented to the spreadsheet user along with input UI
    ///  to collect the parameter value before refreshing the external data. Used only when
    ///  parameterType = prompt.
    ///</summary>
    property Prompt: string read get_Prompt write set_Prompt;
    ///<summary>
    ///  Type of parameter used.
    ///  If the parameterType=value, then the value from boolean, double, integer,
    ///  or string will be used.  In this case, it is expected that only one of
    ///  {boolean, double, integer, or string} will be specified.
    ///</summary>
    property &Type: DNConnectionParameterType read get_Type write set_Type;
    ///<summary>
    ///  The name of the parameter.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Cell reference indicating which cell's value to use for the query parameter. Used only when parameterType is cell.
    ///</summary>
    property CellReference: string read get_CellReference write set_CellReference;
    ///<summary>
    ///  Non-integer numeric value,Integer value,String value or Boolean value
    ///  to use as the query parameter. Used only when parameterType is value.
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNConnectionParameter = class(TDNGenericImport<DNConnectionParameterClass, DNConnectionParameter>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNExternalConnectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57CD5540-7333-5C94-89C7-732EC9A9C09F}']
  end;

  ///<summary>
  ///  Specifies an external data connection
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.ExternalConnection')]
  DNExternalConnection = interface(DDN.mscorlib.DNObject)
  ['{5781272A-C69C-3400-A6AB-95FB0041EC83}']
  { getters & setters } 

    function get_Id: Int32;
    function get_PowerQueryFormula: DNPowerQueryFormula;
    function get_Type: DNConnectionDataSourceType;
    procedure set_Type(value: DNConnectionDataSourceType);
    function get_SourceFile: string;
    procedure set_SourceFile(value: string);
    function get_SSOId: string;
    procedure set_SSOId(value: string);
    function get_SavePassword: Boolean;
    procedure set_SavePassword(value: Boolean);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshOnLoad: Boolean;
    procedure set_RefreshOnLoad(value: Boolean);
    function get_ReconnectionMethodType: DNReConnectionMethodType;
    procedure set_ReconnectionMethodType(value: DNReConnectionMethodType);
    function get_ReconnectionMethod: DNReConnectionMethodType;
    procedure set_ReconnectionMethod(value: DNReConnectionMethodType);
    function get_OnlyUseConnectionFile: Boolean;
    procedure set_OnlyUseConnectionFile(value: Boolean);
    function get_OdcFile: string;
    procedure set_OdcFile(value: string);
    function get_IsNew: Boolean;
    procedure set_IsNew(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_RefreshInternal: Int32;
    procedure set_RefreshInternal(value: Int32);
    function get_ConnectionId: Int32;
    function get_ConnectionDescription: string;
    procedure set_ConnectionDescription(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_CredentialsMethodType: DNCredentialsMethodType;
    procedure set_CredentialsMethodType(value: DNCredentialsMethodType);
    function get_Credentials: DNCredentialsMethodType;
    procedure set_Credentials(value: DNCredentialsMethodType);
    function get_BackgroundRefresh: Boolean;
    procedure set_BackgroundRefresh(value: Boolean);
    function get_Parameters: DNConnectionParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the id of the connection.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Gets the definition of power query formula.
    ///</summary>
    property PowerQueryFormula: DNPowerQueryFormula read get_PowerQueryFormula;
    ///<summary>
    ///  Gets or Sets the external connection DataSource type.
    ///</summary>
    property &Type: DNConnectionDataSourceType read get_Type write set_Type;
    ///<summary>
    ///  Used when the external data source is file-based. When a connection to such a data
    ///  source fails, the spreadsheet application attempts to connect directly to this file. May be
    ///  expressed in URI or system-specific file path notation.
    ///</summary>
    property SourceFile: string read get_SourceFile write set_SourceFile;
    ///<summary>
    ///  Identifier for Single Sign On (SSO) used for authentication between an intermediate
    ///  spreadsheetML server and the external data source.
    ///</summary>
    property SSOId: string read get_SSOId write set_SSOId;
    ///<summary>
    ///  True if the password is to be saved as part of the connection string; otherwise, False.
    ///</summary>
    property SavePassword: Boolean read get_SavePassword write set_SavePassword;
    ///<summary>
    ///  True if the external data fetched over the connection to populate a table is to be saved
    ///  with the workbook; otherwise, false.
    ///</summary>
    property SaveData: Boolean read get_SaveData write set_SaveData;
    ///<summary>
    ///  True if this connection should be refreshed when opening the file; otherwise, false.
    ///</summary>
    property RefreshOnLoad: Boolean read get_RefreshOnLoad write set_RefreshOnLoad;
    ///<summary>
    ///  Specifies what the spreadsheet application should do when a connection fails.
    ///  The default value is ReConnectionMethodType.Required.
    ///</summary>
    property ReconnectionMethodType: DNReConnectionMethodType read get_ReconnectionMethodType write set_ReconnectionMethodType;
    ///<summary>
    ///  Specifies what the spreadsheet application should do when a connection fails.
    ///  The default value is ReConnectionMethodType.Required.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use ExternalConnection.ReconnectionMethodType property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property ReconnectionMethod: DNReConnectionMethodType read get_ReconnectionMethod write set_ReconnectionMethod;
    ///<summary>
    ///  Indicates whether the spreadsheet application should always and only use the
    ///  connection information in the external connection file indicated by the odcFile attribute
    ///  when the connection is refreshed.  If false, then the spreadsheet application
    ///  should follow the procedure indicated by the reconnectionMethod attribute
    ///</summary>
    property OnlyUseConnectionFile: Boolean read get_OnlyUseConnectionFile write set_OnlyUseConnectionFile;
    ///<summary>
    ///  Specifies the full path to external connection file from which this connection was
    ///  created. If a connection fails during an attempt to refresh data, and reconnectionMethod=1,
    ///  then the spreadsheet application will try again using information from the external connection file
    ///  instead of the connection object embedded within the workbook.
    ///</summary>
    property OdcFile: string read get_OdcFile write set_OdcFile;
    ///<summary>
    ///  True if the connection has not been refreshed for the first time; otherwise, false.
    ///  This state can happen when the user saves the file before a query has finished returning.
    ///</summary>
    property IsNew: Boolean read get_IsNew write set_IsNew;
    ///<summary>
    ///  Specifies the name of the connection. Each connection must have a unique name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  True when the spreadsheet application should make efforts to keep the connection
    ///  open. When false, the application should close the connection after retrieving the
    ///  information.
    ///</summary>
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    ///<summary>
    ///  Specifies the number of minutes between automatic refreshes of the connection.
    ///</summary>
    property RefreshInternal: Int32 read get_RefreshInternal write set_RefreshInternal;
    ///<summary>
    ///  Specifies The unique identifier of this connection.
    ///</summary>
    property ConnectionId: Int32 read get_ConnectionId;
    ///<summary>
    ///  Specifies the user description for this connection
    ///</summary>
    property ConnectionDescription: string read get_ConnectionDescription write set_ConnectionDescription;
    ///<summary>
    ///  Indicates whether the associated workbook connection has been deleted.  true if the
    ///  connection has been deleted; otherwise, false.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Specifies the authentication method to be used when establishing (or re-establishing) the connection.
    ///</summary>
    property CredentialsMethodType: DNCredentialsMethodType read get_CredentialsMethodType write set_CredentialsMethodType;
    ///<summary>
    ///  Specifies the authentication method to be used when establishing (or re-establishing) the connection.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use ExternalConnection.CredentialsMethodType property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Credentials: DNCredentialsMethodType read get_Credentials write set_Credentials;
    ///<summary>
    ///  Indicates whether the connection can be refreshed in the background (asynchronously).
    ///  true if preferred usage of the connection is to refresh asynchronously in the background;
    ///  false if preferred usage of the connection is to refresh synchronously in the foreground.
    ///</summary>
    property BackgroundRefresh: Boolean read get_BackgroundRefresh write set_BackgroundRefresh;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Cells.ExternalConnections.ConnectionParameterCollection" />
    ///  for an ODBC or web query.
    ///</summary>
    property Parameters: DNConnectionParameterCollection read get_Parameters;
  end;

  TDNExternalConnection = class(TDNGenericImport<DNExternalConnectionClass, DNExternalConnection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNDBConnectionClass = interface(DNExternalConnectionClass)
  ['{C87D136B-A251-5822-A9A1-AEB718B7409C}']
  end;

  ///<summary>
  ///  Specifies all properties associated with an ODBC or OLE DB external data connection.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.DBConnection')]
  DNDBConnection = interface(DNExternalConnection)
  ['{E91C91C3-46D3-39FC-8422-AEEF171BD964}']
  { getters & setters } 

    function get_ConnectionInfo: string;
    procedure set_ConnectionInfo(value: string);
    function get_PowerQueryFormula: DNPowerQueryFormula;
    function get_CommandType: DNOLEDBCommandType;
    procedure set_CommandType(value: DNOLEDBCommandType);
    function get_Command: string;
    procedure set_Command(value: string);
    function get_SeverCommand: string;
    procedure set_SeverCommand(value: string);
    function get_Id: Int32;
    function get_Type: DNConnectionDataSourceType;
    procedure set_Type(value: DNConnectionDataSourceType);
    function get_SourceFile: string;
    procedure set_SourceFile(value: string);
    function get_SSOId: string;
    procedure set_SSOId(value: string);
    function get_SavePassword: Boolean;
    procedure set_SavePassword(value: Boolean);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshOnLoad: Boolean;
    procedure set_RefreshOnLoad(value: Boolean);
    function get_ReconnectionMethodType: DNReConnectionMethodType;
    procedure set_ReconnectionMethodType(value: DNReConnectionMethodType);
    function get_ReconnectionMethod: DNReConnectionMethodType;
    procedure set_ReconnectionMethod(value: DNReConnectionMethodType);
    function get_OnlyUseConnectionFile: Boolean;
    procedure set_OnlyUseConnectionFile(value: Boolean);
    function get_OdcFile: string;
    procedure set_OdcFile(value: string);
    function get_IsNew: Boolean;
    procedure set_IsNew(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_RefreshInternal: Int32;
    procedure set_RefreshInternal(value: Int32);
    function get_ConnectionId: Int32;
    function get_ConnectionDescription: string;
    procedure set_ConnectionDescription(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_CredentialsMethodType: DNCredentialsMethodType;
    procedure set_CredentialsMethodType(value: DNCredentialsMethodType);
    function get_Credentials: DNCredentialsMethodType;
    procedure set_Credentials(value: DNCredentialsMethodType);
    function get_BackgroundRefresh: Boolean;
    procedure set_BackgroundRefresh(value: Boolean);
    function get_Parameters: DNConnectionParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The connection information string is used to make contact with an OLE DB or ODBC data source.
    ///</summary>
    property ConnectionInfo: string read get_ConnectionInfo write set_ConnectionInfo;
    ///<summary>
    ///  Gets the definition of power query formula.
    ///</summary>
    property PowerQueryFormula: DNPowerQueryFormula read get_PowerQueryFormula;
    ///<summary>
    ///  Specifies the OLE DB command type.
    ///  1. Query specifies a cube name
    ///  2. Query specifies a SQL statement
    ///  3. Query specifies a table name
    ///  4. Query specifies that default information has been given, and it is up to the provider how to interpret.
    ///  5. Query is against a web based List Data Provider.
    ///</summary>
    property CommandType: DNOLEDBCommandType read get_CommandType write set_CommandType;
    ///<summary>
    ///  The string containing the database command to pass to the data provider API that will
    ///  interact with the external source in order to retrieve data
    ///</summary>
    property Command: string read get_Command write set_Command;
    ///<summary>
    ///  Specifies a second command text string that is persisted when PivotTable server-based
    ///  page fields are in use.
    ///  For ODBC connections, serverCommand is usually a broader query than command (no
    ///  WHERE clause is present in the former). Based on these 2 commands(Command and ServerCommand),
    ///  parameter UI can be populated and parameterized queries can be constructed
    ///</summary>
    property SeverCommand: string read get_SeverCommand write set_SeverCommand;
    ///<summary>
    ///  Gets the id of the connection.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Gets or Sets the external connection DataSource type.
    ///</summary>
    property &Type: DNConnectionDataSourceType read get_Type write set_Type;
    ///<summary>
    ///  Used when the external data source is file-based. When a connection to such a data
    ///  source fails, the spreadsheet application attempts to connect directly to this file. May be
    ///  expressed in URI or system-specific file path notation.
    ///</summary>
    property SourceFile: string read get_SourceFile write set_SourceFile;
    ///<summary>
    ///  Identifier for Single Sign On (SSO) used for authentication between an intermediate
    ///  spreadsheetML server and the external data source.
    ///</summary>
    property SSOId: string read get_SSOId write set_SSOId;
    ///<summary>
    ///  True if the password is to be saved as part of the connection string; otherwise, False.
    ///</summary>
    property SavePassword: Boolean read get_SavePassword write set_SavePassword;
    ///<summary>
    ///  True if the external data fetched over the connection to populate a table is to be saved
    ///  with the workbook; otherwise, false.
    ///</summary>
    property SaveData: Boolean read get_SaveData write set_SaveData;
    ///<summary>
    ///  True if this connection should be refreshed when opening the file; otherwise, false.
    ///</summary>
    property RefreshOnLoad: Boolean read get_RefreshOnLoad write set_RefreshOnLoad;
    ///<summary>
    ///  Specifies what the spreadsheet application should do when a connection fails.
    ///  The default value is ReConnectionMethodType.Required.
    ///</summary>
    property ReconnectionMethodType: DNReConnectionMethodType read get_ReconnectionMethodType write set_ReconnectionMethodType;
    ///<summary>
    ///  Specifies what the spreadsheet application should do when a connection fails.
    ///  The default value is ReConnectionMethodType.Required.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use ExternalConnection.ReconnectionMethodType property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property ReconnectionMethod: DNReConnectionMethodType read get_ReconnectionMethod write set_ReconnectionMethod;
    ///<summary>
    ///  Indicates whether the spreadsheet application should always and only use the
    ///  connection information in the external connection file indicated by the odcFile attribute
    ///  when the connection is refreshed.  If false, then the spreadsheet application
    ///  should follow the procedure indicated by the reconnectionMethod attribute
    ///</summary>
    property OnlyUseConnectionFile: Boolean read get_OnlyUseConnectionFile write set_OnlyUseConnectionFile;
    ///<summary>
    ///  Specifies the full path to external connection file from which this connection was
    ///  created. If a connection fails during an attempt to refresh data, and reconnectionMethod=1,
    ///  then the spreadsheet application will try again using information from the external connection file
    ///  instead of the connection object embedded within the workbook.
    ///</summary>
    property OdcFile: string read get_OdcFile write set_OdcFile;
    ///<summary>
    ///  True if the connection has not been refreshed for the first time; otherwise, false.
    ///  This state can happen when the user saves the file before a query has finished returning.
    ///</summary>
    property IsNew: Boolean read get_IsNew write set_IsNew;
    ///<summary>
    ///  Specifies the name of the connection. Each connection must have a unique name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  True when the spreadsheet application should make efforts to keep the connection
    ///  open. When false, the application should close the connection after retrieving the
    ///  information.
    ///</summary>
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    ///<summary>
    ///  Specifies the number of minutes between automatic refreshes of the connection.
    ///</summary>
    property RefreshInternal: Int32 read get_RefreshInternal write set_RefreshInternal;
    ///<summary>
    ///  Specifies The unique identifier of this connection.
    ///</summary>
    property ConnectionId: Int32 read get_ConnectionId;
    ///<summary>
    ///  Specifies the user description for this connection
    ///</summary>
    property ConnectionDescription: string read get_ConnectionDescription write set_ConnectionDescription;
    ///<summary>
    ///  Indicates whether the associated workbook connection has been deleted.  true if the
    ///  connection has been deleted; otherwise, false.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Specifies the authentication method to be used when establishing (or re-establishing) the connection.
    ///</summary>
    property CredentialsMethodType: DNCredentialsMethodType read get_CredentialsMethodType write set_CredentialsMethodType;
    ///<summary>
    ///  Specifies the authentication method to be used when establishing (or re-establishing) the connection.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use ExternalConnection.CredentialsMethodType property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Credentials: DNCredentialsMethodType read get_Credentials write set_Credentials;
    ///<summary>
    ///  Indicates whether the connection can be refreshed in the background (asynchronously).
    ///  true if preferred usage of the connection is to refresh asynchronously in the background;
    ///  false if preferred usage of the connection is to refresh synchronously in the foreground.
    ///</summary>
    property BackgroundRefresh: Boolean read get_BackgroundRefresh write set_BackgroundRefresh;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Cells.ExternalConnections.ConnectionParameterCollection" />
    ///  for an ODBC or web query.
    ///</summary>
    property Parameters: DNConnectionParameterCollection read get_Parameters;
  end;

  TDNDBConnection = class(TDNGenericImport<DNDBConnectionClass, DNDBConnection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNWebQueryConnectionClass = interface(DNExternalConnectionClass)
  ['{6E5695E8-E040-570C-94D3-8F312D86B530}']
  end;

  ///<summary>
  ///  Specifies the properties for a web query source. A web query will retrieve data from HTML tables,
  ///  and can also supply HTTP "Get" parameters to be processed by the web server in generating the HTML by
  ///  including the parameters and parameter elements.
  ///</summary>
  [DNTypeName('Aspose.Cells.ExternalConnections.WebQueryConnection')]
  DNWebQueryConnection = interface(DNExternalConnection)
  ['{19994CAD-EC38-37D5-9931-DF32298C65B2}']
  { getters & setters } 

    function get_IsXml: Boolean;
    procedure set_IsXml(value: Boolean);
    function get_IsXl97: Boolean;
    procedure set_IsXl97(value: Boolean);
    function get_IsXl2000: Boolean;
    procedure set_IsXl2000(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_IsTextDates: Boolean;
    procedure set_IsTextDates(value: Boolean);
    function get_IsXmlSourceData: Boolean;
    procedure set_IsXmlSourceData(value: Boolean);
    function get_Post: string;
    procedure set_Post(value: string);
    function get_IsParsePre: Boolean;
    procedure set_IsParsePre(value: Boolean);
    function get_IsHtmlTables: Boolean;
    procedure set_IsHtmlTables(value: Boolean);
    function get_HtmlFormat: DNHtmlFormatHandlingType;
    procedure set_HtmlFormat(value: DNHtmlFormatHandlingType);
    function get_IsSameSettings: Boolean;
    procedure set_IsSameSettings(value: Boolean);
    function get_EditWebPage: string;
    procedure set_EditWebPage(value: string);
    function get_EditPage: string;
    procedure set_EditPage(value: string);
    function get_IsConsecutive: Boolean;
    procedure set_IsConsecutive(value: Boolean);
    function get_Id: Int32;
    function get_PowerQueryFormula: DNPowerQueryFormula;
    function get_Type: DNConnectionDataSourceType;
    procedure set_Type(value: DNConnectionDataSourceType);
    function get_SourceFile: string;
    procedure set_SourceFile(value: string);
    function get_SSOId: string;
    procedure set_SSOId(value: string);
    function get_SavePassword: Boolean;
    procedure set_SavePassword(value: Boolean);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshOnLoad: Boolean;
    procedure set_RefreshOnLoad(value: Boolean);
    function get_ReconnectionMethodType: DNReConnectionMethodType;
    procedure set_ReconnectionMethodType(value: DNReConnectionMethodType);
    function get_ReconnectionMethod: DNReConnectionMethodType;
    procedure set_ReconnectionMethod(value: DNReConnectionMethodType);
    function get_OnlyUseConnectionFile: Boolean;
    procedure set_OnlyUseConnectionFile(value: Boolean);
    function get_OdcFile: string;
    procedure set_OdcFile(value: string);
    function get_IsNew: Boolean;
    procedure set_IsNew(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_RefreshInternal: Int32;
    procedure set_RefreshInternal(value: Int32);
    function get_ConnectionId: Int32;
    function get_ConnectionDescription: string;
    procedure set_ConnectionDescription(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_CredentialsMethodType: DNCredentialsMethodType;
    procedure set_CredentialsMethodType(value: DNCredentialsMethodType);
    function get_Credentials: DNCredentialsMethodType;
    procedure set_Credentials(value: DNCredentialsMethodType);
    function get_BackgroundRefresh: Boolean;
    procedure set_BackgroundRefresh(value: Boolean);
    function get_Parameters: DNConnectionParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  true if the web query source is XML (versus HTML), otherwise false.
    ///</summary>
    property IsXml: Boolean read get_IsXml write set_IsXml;
    ///<summary>
    ///  This flag exists for backward compatibility with older existing spreadsheet files, and is set
    ///  to true if this web query was created in Microsoft Excel 97.
    ///  This is an optional attribute that can be ignored.
    ///</summary>
    property IsXl97: Boolean read get_IsXl97 write set_IsXl97;
    ///<summary>
    ///  This flag exists for backward compatibility with older existing spreadsheet files, and is set
    ///  to true if this web query was refreshed in a spreadsheet application newer than or equal
    ///  to Microsoft Excel 2000.
    ///  This is an optional attribute that can be ignored.
    ///</summary>
    property IsXl2000: Boolean read get_IsXl2000 write set_IsXl2000;
    ///<summary>
    ///  URL to use to refresh external data.
    ///</summary>
    property Url: string read get_Url write set_Url;
    ///<summary>
    ///  Flag indicating whether dates should be imported into cells in the worksheet as text rather than dates.
    ///</summary>
    property IsTextDates: Boolean read get_IsTextDates write set_IsTextDates;
    ///<summary>
    ///  Flag indicating that XML source data should be imported instead of the HTML table itself.
    ///</summary>
    property IsXmlSourceData: Boolean read get_IsXmlSourceData write set_IsXmlSourceData;
    ///<summary>
    ///  Returns or sets the string used with the post method of inputting data into a web server
    ///  to return data from a web query.
    ///</summary>
    property Post: string read get_Post write set_Post;
    ///<summary>
    ///  Flag indicating whether data contained within HTML PRE tags in the web page is
    ///  parsed into columns when you import the page into a query table.
    ///</summary>
    property IsParsePre: Boolean read get_IsParsePre write set_IsParsePre;
    ///<summary>
    ///  Flag indicating whether web queries should only work on HTML tables.
    ///</summary>
    property IsHtmlTables: Boolean read get_IsHtmlTables write set_IsHtmlTables;
    ///<summary>
    ///  How to handle formatting from the HTML source when bringing web query data into the
    ///  worksheet. Relevant when sourceData is True.
    ///</summary>
    property HtmlFormat: DNHtmlFormatHandlingType read get_HtmlFormat write set_HtmlFormat;
    ///<summary>
    ///  Flag indicating whether to parse all tables inside a PRE block with the same width settings
    ///  as the first row.
    ///</summary>
    property IsSameSettings: Boolean read get_IsSameSettings write set_IsSameSettings;
    ///<summary>
    ///  The URL of the user-facing web page showing the web query data. This URL is persisted
    ///  in the case that sourceData="true" and url has been redirected to reference an XML file.
    ///  Then the user-facing page can be shown in the UI, and the XML data can be retrieved
    ///  behind the scenes.
    ///</summary>
    property EditWebPage: string read get_EditWebPage write set_EditWebPage;
    ///<summary>
    ///  The URL of the user-facing web page showing the web query data. This URL is persisted
    ///  in the case that sourceData="true" and url has been redirected to reference an XML file.
    ///  Then the user-facing page can be shown in the UI, and the XML data can be retrieved
    ///  behind the scenes.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use WebQueryConnection.EditWebPage property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property EditPage: string read get_EditPage write set_EditPage;
    ///<summary>
    ///  Flag indicating whether consecutive delimiters should be treated as just one delimiter.
    ///</summary>
    property IsConsecutive: Boolean read get_IsConsecutive write set_IsConsecutive;
    ///<summary>
    ///  Gets the id of the connection.
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Gets the definition of power query formula.
    ///</summary>
    property PowerQueryFormula: DNPowerQueryFormula read get_PowerQueryFormula;
    ///<summary>
    ///  Gets or Sets the external connection DataSource type.
    ///</summary>
    property &Type: DNConnectionDataSourceType read get_Type write set_Type;
    ///<summary>
    ///  Used when the external data source is file-based. When a connection to such a data
    ///  source fails, the spreadsheet application attempts to connect directly to this file. May be
    ///  expressed in URI or system-specific file path notation.
    ///</summary>
    property SourceFile: string read get_SourceFile write set_SourceFile;
    ///<summary>
    ///  Identifier for Single Sign On (SSO) used for authentication between an intermediate
    ///  spreadsheetML server and the external data source.
    ///</summary>
    property SSOId: string read get_SSOId write set_SSOId;
    ///<summary>
    ///  True if the password is to be saved as part of the connection string; otherwise, False.
    ///</summary>
    property SavePassword: Boolean read get_SavePassword write set_SavePassword;
    ///<summary>
    ///  True if the external data fetched over the connection to populate a table is to be saved
    ///  with the workbook; otherwise, false.
    ///</summary>
    property SaveData: Boolean read get_SaveData write set_SaveData;
    ///<summary>
    ///  True if this connection should be refreshed when opening the file; otherwise, false.
    ///</summary>
    property RefreshOnLoad: Boolean read get_RefreshOnLoad write set_RefreshOnLoad;
    ///<summary>
    ///  Specifies what the spreadsheet application should do when a connection fails.
    ///  The default value is ReConnectionMethodType.Required.
    ///</summary>
    property ReconnectionMethodType: DNReConnectionMethodType read get_ReconnectionMethodType write set_ReconnectionMethodType;
    ///<summary>
    ///  Specifies what the spreadsheet application should do when a connection fails.
    ///  The default value is ReConnectionMethodType.Required.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use ExternalConnection.ReconnectionMethodType property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property ReconnectionMethod: DNReConnectionMethodType read get_ReconnectionMethod write set_ReconnectionMethod;
    ///<summary>
    ///  Indicates whether the spreadsheet application should always and only use the
    ///  connection information in the external connection file indicated by the odcFile attribute
    ///  when the connection is refreshed.  If false, then the spreadsheet application
    ///  should follow the procedure indicated by the reconnectionMethod attribute
    ///</summary>
    property OnlyUseConnectionFile: Boolean read get_OnlyUseConnectionFile write set_OnlyUseConnectionFile;
    ///<summary>
    ///  Specifies the full path to external connection file from which this connection was
    ///  created. If a connection fails during an attempt to refresh data, and reconnectionMethod=1,
    ///  then the spreadsheet application will try again using information from the external connection file
    ///  instead of the connection object embedded within the workbook.
    ///</summary>
    property OdcFile: string read get_OdcFile write set_OdcFile;
    ///<summary>
    ///  True if the connection has not been refreshed for the first time; otherwise, false.
    ///  This state can happen when the user saves the file before a query has finished returning.
    ///</summary>
    property IsNew: Boolean read get_IsNew write set_IsNew;
    ///<summary>
    ///  Specifies the name of the connection. Each connection must have a unique name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  True when the spreadsheet application should make efforts to keep the connection
    ///  open. When false, the application should close the connection after retrieving the
    ///  information.
    ///</summary>
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    ///<summary>
    ///  Specifies the number of minutes between automatic refreshes of the connection.
    ///</summary>
    property RefreshInternal: Int32 read get_RefreshInternal write set_RefreshInternal;
    ///<summary>
    ///  Specifies The unique identifier of this connection.
    ///</summary>
    property ConnectionId: Int32 read get_ConnectionId;
    ///<summary>
    ///  Specifies the user description for this connection
    ///</summary>
    property ConnectionDescription: string read get_ConnectionDescription write set_ConnectionDescription;
    ///<summary>
    ///  Indicates whether the associated workbook connection has been deleted.  true if the
    ///  connection has been deleted; otherwise, false.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    ///<summary>
    ///  Specifies the authentication method to be used when establishing (or re-establishing) the connection.
    ///</summary>
    property CredentialsMethodType: DNCredentialsMethodType read get_CredentialsMethodType write set_CredentialsMethodType;
    ///<summary>
    ///  Specifies the authentication method to be used when establishing (or re-establishing) the connection.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use ExternalConnection.CredentialsMethodType property.
    ///  This property will be removed 12 months later since October 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Credentials: DNCredentialsMethodType read get_Credentials write set_Credentials;
    ///<summary>
    ///  Indicates whether the connection can be refreshed in the background (asynchronously).
    ///  true if preferred usage of the connection is to refresh asynchronously in the background;
    ///  false if preferred usage of the connection is to refresh synchronously in the foreground.
    ///</summary>
    property BackgroundRefresh: Boolean read get_BackgroundRefresh write set_BackgroundRefresh;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Cells.ExternalConnections.ConnectionParameterCollection" />
    ///  for an ODBC or web query.
    ///</summary>
    property Parameters: DNConnectionParameterCollection read get_Parameters;
  end;

  TDNWebQueryConnection = class(TDNGenericImport<DNWebQueryConnectionClass, DNWebQueryConnection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExternalLinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{023154AB-7494-5B8B-8D58-87F100DF5243}']
  end;

  ///<summary>
  ///  Represents an external link in a workbook.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Open a file with external links
  ///  Workbook workbook = new Workbook("d:\\book1.xls");
  ///  //Get External Link
  ///  ExternalLink externalLink = workbook.Worksheets.ExternalLinks[0];
  ///  //Change External Link's Data Source
  ///  externalLink.DataSource = "d:\\link.xls";
  ///  [VB.NET]
  ///  'Open a file with external links
  ///  Dim workbook As New Workbook("d:\book1.xls")
  ///  'Get External Link
  ///  Dim externalLink As ExternalLink = workbook.Worksheets.ExternalLinks(0)
  ///  'Change External Link's Data Source
  ///  externalLink.DataSource = "d:\link.xls"
  ///</code></example>
  [DNTypeName('Aspose.Cells.ExternalLink')]
  DNExternalLink = interface(DDN.mscorlib.DNObject)
  ['{8FFD4BAA-E649-3276-8D13-8DA4CD34587F}']
  { getters & setters } 

    function get_Type: DNExternalLinkType;
    function get_OriginalDataSource: string;
    procedure set_OriginalDataSource(value: string);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_IsReferred: Boolean;
    function get_IsVisible: Boolean;

  { methods } 

    ///<summary>
    ///  Adds an external name.
    ///</summary>
    ///  <param name="text">The text of the external name.
    ///  If the external name belongs to a worksheet, the text should be as Sheet1!Text.
    ///</param>
    ///  <param name="referTo">The referTo of the external name. It must be a cell or the range.</param>
    procedure AddExternalName(text: string; referTo: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of external link.
    ///</summary>
    property &Type: DNExternalLinkType read get_Type;
    ///<summary>
    ///  Represents stored data source of the external link.
    ///</summary>
    property OriginalDataSource: string read get_OriginalDataSource write set_OriginalDataSource;
    ///<summary>
    ///  Represents data source of the external link.
    ///</summary>
    property DataSource: string read get_DataSource write set_DataSource;
    ///<summary>
    ///  Indicates whether this external link is referenced by others.
    ///</summary>
    property IsReferred: Boolean read get_IsReferred;
    ///<summary>
    ///  Indicates whether this external link is visible in MS Excel.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible;
  end;

  TDNExternalLink = class(TDNGenericImport<DNExternalLinkClass, DNExternalLink>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExternalLinkCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E3CC501-BE5A-51FD-B6D0-34D312640C48}']
  end;

  ///<summary>
  ///  Represents external links collection in a workbook.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Open a file with external links
  ///  Workbook workbook = new Workbook("d:\\book1.xls");
  ///  //Change external link data source
  ///  workbook.Worksheets.ExternalLinks[0].DataSource = "d:\\link.xls";
  ///  [Visual Basic]
  ///  'Open a file with external links
  ///  Dim workbook As Workbook =  New Workbook("d:\\book1.xls")
  ///  'Change external link data source
  ///  workbook.Worksheets.ExternalLinks(0).DataSource = "d:\\link.xls"
  ///</code></example>
  [DNTypeName('Aspose.Cells.ExternalLinkCollection')]
  DNExternalLinkCollection = interface(DDN.mscorlib.DNObject)
  ['{647575C5-53FF-3AE5-9FB8-E8B5DCAB3E51}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNExternalLink;

  { methods } 

    ///<summary>
    ///  Adds an external link.
    ///</summary>
    ///  <param name="fileName">The external file name.</param>
    ///  <param name="sheetNames">All sheet names of the external file.</param>
    ///<returns>The position of the external name in this list. </returns>
    function Add(fileName: string; sheetNames: TArray<string>): Int32; overload;
    ///<summary>
    ///  Add an external link .
    ///</summary>
    ///  <param name="directoryType">The directory type of the file name.</param>
    ///  <param name="fileName">the file name.</param>
    ///  <param name="sheetNames">All sheet names of the external file.</param>
    ///<returns>The position of the external name in this list. </returns>
    function Add(directoryType: DNDirectoryType; fileName: string; sheetNames: TArray<string>): Int32; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNExternalLink read get_Item; default;
  end;

  TDNExternalLinkCollection = class(TDNGenericImport<DNExternalLinkCollectionClass, DNExternalLinkCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFileFormatInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{816105B2-FEE6-54A8-971B-CD20CE1E6A4D}']
  { constructors } 

    {class} function init: DNFileFormatInfo;

  end;

  ///<summary>
  ///  Contains data returned by <see cref="T:Aspose.Cells.FileFormatUtil" />
  ///  file format detection methods.
  ///</summary>
  [DNTypeName('Aspose.Cells.FileFormatInfo')]
  DNFileFormatInfo = interface(DDN.mscorlib.DNObject)
  ['{93401899-6084-3B9C-B1B3-E3DDD82C89ED}']
  { getters & setters } 

    function get_IsProtectedByRMS: Boolean;
    function get_IsEncrypted: Boolean;
    function get_FileFormatType: DNFileFormatType;
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets whether the file is protected by Microsoft Rights Management Server.
    ///</summary>
    property IsProtectedByRMS: Boolean read get_IsProtectedByRMS;
    ///<summary>
    ///  Returns true if the document is encrypted and requires a password to open.
    ///</summary>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Gets the detected file format.
    ///</summary>
    property FileFormatType: DNFileFormatType read get_FileFormatType;
    ///<summary>
    ///  Gets the detected load format.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNFileFormatInfo = class(TDNGenericImport<DNFileFormatInfoClass, DNFileFormatInfo>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFileFormatUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{141D03F4-5B33-54B9-A1DD-CB9BF03FEF03}']
  { static methods } 

    ///<summary>
    ///  Detects and returns the information about a format of an excel stored in a stream.
    ///</summary>
    ///  <param name="stream"></param>
    ///<returns>A <see cref="T:Aspose.Cells.FileFormatInfo" />
    ///  object that contains the detected information.</returns>
    {class} function DetectFileFormat(stream: DDN.mscorlib.DNStream): DNFileFormatInfo; overload;
    ///<summary>
    ///  Detects and returns the information about a format of an excel stored in a stream.
    ///</summary>
    ///  <param name="stream"></param>
    ///  <param name="password">The password for encrypted ooxml files.</param>
    ///<returns>A <see cref="T:Aspose.Cells.FileFormatInfo" />
    ///  object that contains the detected information.</returns>
    {class} function DetectFileFormat(stream: DDN.mscorlib.DNStream; password: string): DNFileFormatInfo; overload;
    ///<summary>
    ///  Detects and returns the information about a format of an excel stored in a stream.
    ///</summary>
    ///  <param name="stream"></param>
    ///  <param name="password">The password for encrypted ooxml files.</param>
    ///<returns>Returns whether the password is corrected.</returns>
    {class} function VerifyPassword(stream: DDN.mscorlib.DNStream; password: string): Boolean;
    ///<summary>
    ///  Detects and returns the information about a format of an excel stored in a file.
    ///</summary>
    ///  <param name="filePath">The file path.</param>
    ///<returns>A <see cref="T:Aspose.Cells.FileFormatInfo" />
    ///  object that contains the detected information.</returns>
    {class} function DetectFileFormat(filePath: string): DNFileFormatInfo; overload;
    ///<summary>
    ///  Detects and returns the information about a format of an excel stored in a file.
    ///</summary>
    ///  <param name="filePath">The file path.</param>
    ///  <param name="password">The password for encrypted ooxml files.</param>
    ///<returns>A <see cref="T:Aspose.Cells.FileFormatInfo" />
    ///  object that contains the detected information.</returns>
    {class} function DetectFileFormat(filePath: string; password: string): DNFileFormatInfo; overload;
    {class} function FileFormatToSaveFormat(format: DNFileFormatType): DNSaveFormat;
    ///<summary>
    ///  Converts a file name extension into a SaveFormat value.
    ///</summary>
    ///  <param name="extension">The file extension. Can be with or without a leading dot. Case-insensitive.</param>
    ///<returns></returns>
    ///<remarks>If the extension cannot be recognized, returns <see cref="F:Aspose.Cells.SaveFormat.Unknown" />
    ///  .</remarks>
    {class} function ExtensionToSaveFormat(extension: string): DNSaveFormat;
    ///<summary>
    ///  Returns true if the extension is .xlt, .xltX, .xltm,.ots.
    ///</summary>
    ///  <param name="extension"></param>
    ///<returns></returns>
    {class} function IsTemplateFormat(extension: string): Boolean;
    ///<summary>
    ///  Converts a load format enumerated value into a file extension.
    ///</summary>
    ///  <param name="loadFormat">The loaded file format.</param>
    ///<returns> The returned extension is a lower-case string with a leading dot.</returns>
    ///<remarks>If it can not be converted, returns null.</remarks>
    {class} function LoadFormatToExtension(loadFormat: DNLoadFormat): string;
    ///<summary>
    ///  Converts a LoadFormat value to a SaveFormat value if possible.
    ///</summary>
    ///  <param name="loadFormat">The load format.</param>
    ///<returns>The save format.</returns>
    {class} function LoadFormatToSaveFormat(loadFormat: DNLoadFormat): DNSaveFormat;
    ///<summary>
    ///  Converts a save format enumerated value into a file extension.
    ///</summary>
    ///  <param name="format">The save format.</param>
    ///<returns>The returned extension is a lower-case string with a leading dot. </returns>
    {class} function SaveFormatToExtension(format: DNSaveFormat): string;
    ///<summary>
    ///  Converts a SaveFormat value to a LoadFormat value if possible.
    ///</summary>
    ///  <param name="saveFormat">The save format.</param>
    ///<returns>The load format</returns>
    {class} function SaveFormatToLoadFormat(saveFormat: DNSaveFormat): DNLoadFormat;

  end;

  ///<summary>
  ///  Provides utility methods for converting file format enums to strings or file extensions and back.
  ///</summary>
  [DNTypeName('Aspose.Cells.FileFormatUtil')]
  DNFileFormatUtil = interface(DDN.mscorlib.DNObject)
  ['{078D6299-E454-3ECE-A21D-023C322B2121}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFileFormatUtil = class(TDNGenericImport<DNFileFormatUtilClass, DNFileFormatUtil>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFilterColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DB94B70A-7B18-53A6-8961-758FC6CEF3F4}']
  end;

  ///<summary>
  ///  Represents a filter for a single column. The Filter object is a member of the Filters collection
  ///</summary>
  [DNTypeName('Aspose.Cells.FilterColumn')]
  DNFilterColumn = interface(DDN.mscorlib.DNObject)
  ['{04318860-8625-3BF2-A364-74327E751A60}']
  { getters & setters } 

    function get_IsDropdownVisible: Boolean;
    procedure set_IsDropdownVisible(value: Boolean);
    function get_Visibledropdown: Boolean;
    procedure set_Visibledropdown(value: Boolean);
    function get_Filter: DDN.mscorlib.DNObject;
    procedure set_Filter(value: DDN.mscorlib.DNObject);
    function get_FilterType: DNFilterType;
    procedure set_FilterType(value: DNFilterType);
    function get_FieldIndex: Int32;
    procedure set_FieldIndex(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the AutoFilter button for this column is visible.
    ///</summary>
    property IsDropdownVisible: Boolean read get_IsDropdownVisible write set_IsDropdownVisible;
    ///<summary>
    ///  Indicates whether the AutoFilter button for this column is visible.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete.
    ///  Instead, please use FilterColumn.IsDropdownVisible to check whether the AutoFilter button for this column is visible.
    ///  This property will be removed 12 months later since September 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property Visibledropdown: Boolean read get_Visibledropdown write set_Visibledropdown;
    ///<summary></summary>
    property Filter: DDN.mscorlib.DNObject read get_Filter write set_Filter;
    ///<summary></summary>
    property FilterType: DNFilterType read get_FilterType write set_FilterType;
    ///<summary></summary>
    property FieldIndex: Int32 read get_FieldIndex write set_FieldIndex;
  end;

  TDNFilterColumn = class(TDNGenericImport<DNFilterColumnClass, DNFilterColumn>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFindOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6573A565-FEBC-51BC-91B8-C0D8A12CE054}']
  { constructors } 

    {class} function init: DNFindOptions;

  end;

  ///<summary>
  ///  Represents find options.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate the workbook object
  ///  Workbook workbook = new Workbook("C:\\book1.xls");
  ///  //Get Cells collection
  ///  Cells cells = workbook.Worksheets[0].Cells;
  ///  //Instantiate FindOptions Object
  ///  FindOptions findOptions = new FindOptions();
  ///  //Create a Cells Area
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 8;
  ///  ca.StartColumn = 2;
  ///  ca.EndRow = 17;
  ///  ca.EndColumn = 13;
  ///  //Set cells area for find options
  ///  findOptions.SetRange(ca);
  ///  //Set searching properties
  ///  findOptions.SearchBackward = false;
  ///  findOptions.SeachOrderByRows = true;
  ///  findOptions.LookInType = LookInType.Values;
  ///  //Find the cell with 0 value
  ///  Cell cell = cells.Find(0, null, findOptions);
  ///  [VB.NET]
  ///  'Instantiate the workbook object
  ///  Dim workbook As New Workbook("C:\book1.xls")
  ///  'Get Cells collection
  ///  Dim cells As Cells = workbook.Worksheets(0).Cells
  ///  'Instantiate FindOptions Object
  ///  Dim findOptions As New FindOptions()
  ///  'Create a Cells Area
  ///  Dim ca As New CellArea()
  ///  ca.StartRow = 8
  ///  ca.StartColumn = 2
  ///  ca.EndRow = 17
  ///  ca.EndColumn = 13
  ///  'Set cells area for find options
  ///  findOptions.SetRange(ca)
  ///  'Set searching properties
  ///  findOptions.SearchBackward = True
  ///  findOptions.SeachOrderByRows = True
  ///  findOptions.LookInType = LookInType.Values
  ///  'Find the cell with 0 value
  ///  Dim cell As Cell = cells.Find(0, Nothing, findOptions)
  ///</code></example>
  [DNTypeName('Aspose.Cells.FindOptions')]
  DNFindOptions = interface(DDN.mscorlib.DNObject)
  ['{3300B120-0B7E-36F0-962F-B2A3C32336AB}']
  { getters & setters } 

    function get_IsCaseSensitive: Boolean;
    procedure set_IsCaseSensitive(value: Boolean);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_LookAtType: DNLookAtType;
    procedure set_LookAtType(value: DNLookAtType);
    function get_IsRangeSet: Boolean;
    function get_SearchNext: Boolean;
    procedure set_SearchNext(value: Boolean);
    function get_SearchBackward: Boolean;
    procedure set_SearchBackward(value: Boolean);
    function get_SeachOrderByRows: Boolean;
    procedure set_SeachOrderByRows(value: Boolean);
    function get_LookInType: DNLookInType;
    procedure set_LookInType(value: DNLookInType);
    function get_RegexKey: Boolean;
    procedure set_RegexKey(value: Boolean);
    function get_ValueTypeSensitive: Boolean;
    procedure set_ValueTypeSensitive(value: Boolean);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);

  { methods } 

    ///<summary>
    ///  Gets and sets the searched range.
    ///</summary>
    ///<returns>
    ///  Returns the searched range.
    ///</returns>
    function GetRange: DNCellArea;
    ///<summary>
    ///  Sets the searched range.
    ///</summary>
    ///  <param name="ca">the searched range.</param>
    procedure SetRange(ca: DNCellArea);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if the searched string is case sensitive.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use FindOptions.CaseSensitive property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsCaseSensitive: Boolean read get_IsCaseSensitive write set_IsCaseSensitive;
    ///<summary>
    ///  Indicates if the searched string is case sensitive.
    ///</summary>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  Look at type.
    ///</summary>
    property LookAtType: DNLookAtType read get_LookAtType write set_LookAtType;
    ///<summary>
    ///  Indicates whether the searched range is set.
    ///</summary>
    property IsRangeSet: Boolean read get_IsRangeSet;
    ///<summary>
    ///  Search order. True: search next. False: search previous.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use FindOptions.SearchBackward property.
    ///  This property will be removed 12 months later since November 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property SearchNext: Boolean read get_SearchNext write set_SearchNext;
    ///<summary>
    ///  Whether search backward for cells.
    ///</summary>
    property SearchBackward: Boolean read get_SearchBackward write set_SearchBackward;
    ///<summary>
    ///  Indicates whether search order by rows or columns.
    ///</summary>
    property SeachOrderByRows: Boolean read get_SeachOrderByRows write set_SeachOrderByRows;
    ///<summary>
    ///  Look in type.
    ///</summary>
    property LookInType: DNLookInType read get_LookInType write set_LookInType;
    ///<summary>
    ///  Indicates whether the searched key is regex. If true then the searched key will be taken as regex.
    ///</summary>
    property RegexKey: Boolean read get_RegexKey write set_RegexKey;
    ///<summary>
    ///  Indicates whether searched cell value type should be same with the searched key.
    ///</summary>
    property ValueTypeSensitive: Boolean read get_ValueTypeSensitive write set_ValueTypeSensitive;
    ///<summary>
    ///  The format to search for.
    ///</summary>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets a value that indicates whether converting the searched string value to numeric data.
    ///</summary>
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
  end;

  TDNFindOptions = class(TDNGenericImport<DNFindOptionsClass, DNFindOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F79B1486-6C0B-5A2D-AD31-A7A03F0E155B}']
  end;

  ///<summary>
  ///  Encapsulates the font object used in a spreadsheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Accessing the "A1" cell from the worksheet
  ///  Aspose.Cells.Cell cell = worksheet.Cells["A1"];
  ///  //Adding some value to the "A1" cell
  ///  cell.PutValue("Hello Aspose!");
  ///  Aspose.Cells.Font font = cell.Style.Font;
  ///  //Setting the font name to "Times New Roman"
  ///  font.Name = "Times New Roman";
  ///  //Setting font size to 14
  ///  font.Size = 14;
  ///  //setting font color as Red
  ///  font.Color = System.Drawing.Color.Red;
  ///  //Saving the Excel file
  ///  workbook.Save(@"d:\dest.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Accessing the "A1" cell from the worksheet
  ///  Dim cell As Aspose.Cells.Cell = worksheet.Cells("A1")
  ///  'Adding some value to the "A1" cell
  ///  cell.PutValue("Hello Aspose!")
  ///  Dim font As Aspose.Cells.Font = cell.Style.Font
  ///  'Setting the font name to "Times New Roman"
  ///  font.Name = "Times New Roman"
  ///  'Setting font size to 14
  ///  font.Size = 14
  ///  'setting font color as Red
  ///  font.Color = System.Drawing.Color.Red
  ///  'Saving the Excel file
  ///  workbook.Save("d:\dest.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Font')]
  DNFont = interface(DDN.mscorlib.DNObject)
  ['{EFA3DDFC-8343-346B-86A0-38D7A1FE633A}']
  { getters & setters } 

    function get_Charset: Int32;
    procedure set_Charset(value: Int32);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_CapsType: DNTextCapsType;
    procedure set_CapsType(value: DNTextCapsType);
    function get_StrikeType: DNTextStrikeType;
    procedure set_StrikeType(value: DNTextStrikeType);
    function get_IsStrikeout: Boolean;
    procedure set_IsStrikeout(value: Boolean);
    function get_ScriptOffset: Double;
    procedure set_ScriptOffset(value: Double);
    function get_IsSuperscript: Boolean;
    procedure set_IsSuperscript(value: Boolean);
    function get_IsSubscript: Boolean;
    procedure set_IsSubscript(value: Boolean);
    function get_Underline: DNFontUnderlineType;
    procedure set_Underline(value: DNFontUnderlineType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_DoubleSize: Double;
    procedure set_DoubleSize(value: Double);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ArgbColor: Int32;
    procedure set_ArgbColor(value: Int32);
    function get_IsNormalizeHeights: Boolean;
    procedure set_IsNormalizeHeights(value: Boolean);
    function get_SchemeType: DNFontSchemeType;
    procedure set_SchemeType(value: DNFontSchemeType);

  { methods } 

    ///<summary>
    ///  Checks if two fonts are equals.
    ///</summary>
    ///  <param name="font">Compared font object.</param>
    ///<returns>True if equal to the compared font object.</returns>
    function Equals(font: DNFont): Boolean; overload;
    ///<summary>
    ///  Returns a string represents the current Cell object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Represent the character set.
    ///</summary>
    property Charset: Int32 read get_Charset write set_Charset;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is italic.
    ///</summary>
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is bold.
    ///</summary>
    property IsBold: Boolean read get_IsBold write set_IsBold;
    ///<summary>
    ///  Gets and sets the text caps type.
    ///</summary>
    property CapsType: DNTextCapsType read get_CapsType write set_CapsType;
    ///<summary>
    ///  Gets the strike type of the text.
    ///</summary>
    property StrikeType: DNTextStrikeType read get_StrikeType write set_StrikeType;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is single strikeout.
    ///</summary>
    property IsStrikeout: Boolean read get_IsStrikeout write set_IsStrikeout;
    ///<summary>
    ///  Gets and sets the script offset,in unit of percentage
    ///</summary>
    property ScriptOffset: Double read get_ScriptOffset write set_ScriptOffset;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is super script.
    ///</summary>
    property IsSuperscript: Boolean read get_IsSuperscript write set_IsSuperscript;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is subscript.
    ///</summary>
    property IsSubscript: Boolean read get_IsSubscript write set_IsSubscript;
    ///<summary>
    ///  Gets or sets the font underline type.
    ///</summary>
    property Underline: DNFontUnderlineType read get_Underline write set_Underline;
    ///<summary>
    ///  Gets  or sets the name of the <see cref="T:Aspose.Cells.Font" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Style style;
    ///  ..........
    ///  Font font = style.Font;
    ///  font.Name = "Times New Roman";
    ///  [Visual Basic]
    ///  Dim style As Style
    ///  ..........
    ///  Dim font As Font =  style.Font
    ///  font.Name = "Times New Roman"
    ///</code></example>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets the double size of the font.
    ///</summary>
    property DoubleSize: Double read get_DoubleSize write set_DoubleSize;
    ///<summary>
    ///  Gets or sets the size of the font.
    ///</summary>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  Gets and sets the theme color.
    ///</summary>
    ///<remarks>
    ///  If the font color is not a theme color, NULL will be returned.
    ///</remarks>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Gets or sets the <see cref="T:System.Drawing.Color" />
    ///  of the font.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the color with a 32-bit ARGB value.
    ///</summary>
    property ArgbColor: Int32 read get_ArgbColor write set_ArgbColor;
    ///<summary>
    ///  Indicates whether the normalization of height that is to be applied to the text run.
    ///</summary>
    property IsNormalizeHeights: Boolean read get_IsNormalizeHeights write set_IsNormalizeHeights;
    ///<summary>
    ///  Gets and sets the scheme type of the font.
    ///</summary>
    property SchemeType: DNFontSchemeType read get_SchemeType write set_SchemeType;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextOptionsClass = interface(DNFontClass)
  ['{398DBA3A-22A5-5201-A5E0-B1280621ED80}']
  end;

  ///<summary>
  ///  Represents the text options.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextOptions')]
  DNTextOptions = interface(DNFont)
  ['{C31738D0-CA74-30B6-A4BD-DD1F9B3258C7}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_LatinName: string;
    procedure set_LatinName(value: string);
    function get_FarEastName: string;
    procedure set_FarEastName(value: string);
    function get_Fill: DNFillFormat;
    function get_Outline: DNLineFormat;
    function get_Shadow: DNShadowEffect;
    function get_UnderlineColor: DNCellsColor;
    procedure set_UnderlineColor(value: DNCellsColor);
    function get_Kerning: Double;
    procedure set_Kerning(value: Double);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_Charset: Int32;
    procedure set_Charset(value: Int32);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_CapsType: DNTextCapsType;
    procedure set_CapsType(value: DNTextCapsType);
    function get_StrikeType: DNTextStrikeType;
    procedure set_StrikeType(value: DNTextStrikeType);
    function get_IsStrikeout: Boolean;
    procedure set_IsStrikeout(value: Boolean);
    function get_ScriptOffset: Double;
    procedure set_ScriptOffset(value: Double);
    function get_IsSuperscript: Boolean;
    procedure set_IsSuperscript(value: Boolean);
    function get_IsSubscript: Boolean;
    procedure set_IsSubscript(value: Boolean);
    function get_Underline: DNFontUnderlineType;
    procedure set_Underline(value: DNFontUnderlineType);
    function get_DoubleSize: Double;
    procedure set_DoubleSize(value: Double);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ArgbColor: Int32;
    procedure set_ArgbColor(value: Int32);
    function get_IsNormalizeHeights: Boolean;
    procedure set_IsNormalizeHeights(value: Boolean);
    function get_SchemeType: DNFontSchemeType;
    procedure set_SchemeType(value: DNFontSchemeType);

  { methods } 

    ///<summary>
    ///  Checks if two fonts are equals.
    ///</summary>
    ///  <param name="font">Compared font object.</param>
    ///<returns>True if equal to the compared font object.</returns>
    function Equals(font: DNFont): Boolean; overload;
    ///<summary>
    ///  Returns a string represents the current Cell object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of the shape.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets the latin name.
    ///</summary>
    property LatinName: string read get_LatinName write set_LatinName;
    ///<summary>
    ///  Gets and sets the FarEast name.
    ///</summary>
    property FarEastName: string read get_FarEastName write set_FarEastName;
    ///<summary>
    ///  Represents the fill format of the text.
    ///</summary>
    property Fill: DNFillFormat read get_Fill;
    ///<summary>
    ///  Represents the outline format of the text.
    ///</summary>
    property Outline: DNLineFormat read get_Outline;
    ///<summary>
    ///  Represents a <seealso cref="T:Aspose.Cells.Drawing.ShadowEffect" />
    ///  object that specifies shadow effect for the chart element or shape.
    ///</summary>
    property Shadow: DNShadowEffect read get_Shadow;
    ///<summary>
    ///  Gets or sets the color of underline.
    ///</summary>
    property UnderlineColor: DNCellsColor read get_UnderlineColor write set_UnderlineColor;
    ///<summary>
    ///  Specifies the minimum font size at which character kerning will occur for this text run.
    ///</summary>
    property Kerning: Double read get_Kerning write set_Kerning;
    ///<summary>
    ///  Specifies the spacing between characters within a text run.
    ///</summary>
    property Spacing: Double read get_Spacing write set_Spacing;
    ///<summary>
    ///  Represent the character set.
    ///</summary>
    property Charset: Int32 read get_Charset write set_Charset;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is italic.
    ///</summary>
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is bold.
    ///</summary>
    property IsBold: Boolean read get_IsBold write set_IsBold;
    ///<summary>
    ///  Gets and sets the text caps type.
    ///</summary>
    property CapsType: DNTextCapsType read get_CapsType write set_CapsType;
    ///<summary>
    ///  Gets the strike type of the text.
    ///</summary>
    property StrikeType: DNTextStrikeType read get_StrikeType write set_StrikeType;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is single strikeout.
    ///</summary>
    property IsStrikeout: Boolean read get_IsStrikeout write set_IsStrikeout;
    ///<summary>
    ///  Gets and sets the script offset,in unit of percentage
    ///</summary>
    property ScriptOffset: Double read get_ScriptOffset write set_ScriptOffset;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is super script.
    ///</summary>
    property IsSuperscript: Boolean read get_IsSuperscript write set_IsSuperscript;
    ///<summary>
    ///  Gets or sets a value indicating whether the font is subscript.
    ///</summary>
    property IsSubscript: Boolean read get_IsSubscript write set_IsSubscript;
    ///<summary>
    ///  Gets or sets the font underline type.
    ///</summary>
    property Underline: DNFontUnderlineType read get_Underline write set_Underline;
    ///<summary>
    ///  Gets and sets the double size of the font.
    ///</summary>
    property DoubleSize: Double read get_DoubleSize write set_DoubleSize;
    ///<summary>
    ///  Gets or sets the size of the font.
    ///</summary>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  Gets and sets the theme color.
    ///</summary>
    ///<remarks>
    ///  If the font color is not a theme color, NULL will be returned.
    ///</remarks>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Gets or sets the <see cref="T:System.Drawing.Color" />
    ///  of the font.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the color with a 32-bit ARGB value.
    ///</summary>
    property ArgbColor: Int32 read get_ArgbColor write set_ArgbColor;
    ///<summary>
    ///  Indicates whether the normalization of height that is to be applied to the text run.
    ///</summary>
    property IsNormalizeHeights: Boolean read get_IsNormalizeHeights write set_IsNormalizeHeights;
    ///<summary>
    ///  Gets and sets the scheme type of the font.
    ///</summary>
    property SchemeType: DNFontSchemeType read get_SchemeType write set_SchemeType;
  end;

  TDNTextOptions = class(TDNGenericImport<DNTextOptionsClass, DNTextOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontConfigsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{39B98523-FDF1-50F0-911E-1ADEFA21ABA3}']
  { static getter & setter } 

    {class} function get_DefaultFontName: string;
    {class} procedure set_DefaultFontName(value: string);
    {class} function get_PreferSystemFontSubstitutes: Boolean;
    {class} procedure set_PreferSystemFontSubstitutes(value: Boolean);

  { constructors } 

    {class} function init: DNFontConfigs;

  { static methods } 

    ///<summary>
    ///  Font substitute names for given original font name.
    ///</summary>
    ///  <param name="originalFontName">Original font name.</param>
    ///  <param name="substituteFontNames">List of font substitute names to be used if original font is not presented.</param>
    {class} procedure SetFontSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    ///<summary>
    ///  Returns array containing font substitute names to be used if original font is not presented.
    ///</summary>
    ///  <param name="originalFontName">originalFontName</param>
    ///<returns>An array containing font substitute names to be used if original font is not presented.</returns>
    {class} function GetFontSubstitutes(originalFontName: string): TArray<string>;
    ///<summary>
    ///  Sets the fonts folder
    ///</summary>
    ///  <param name="fontFolder">The folder that contains TrueType fonts.</param>
    ///  <param name="recursive">Determines whether or not to scan subfolders.</param>
    {class} procedure SetFontFolder(fontFolder: string; recursive: Boolean);
    ///<summary>
    ///  Sets the fonts folders
    ///</summary>
    ///  <param name="fontFolders">The folders that contains TrueType fonts.</param>
    ///  <param name="recursive">Determines whether or not to scan subfolders.</param>
    {class} procedure SetFontFolders(fontFolders: TArray<string>; recursive: Boolean);
    ///<summary>
    ///  Sets the fonts sources.
    ///</summary>
    ///  <param name="sources">An array of sources that contain TrueType fonts.</param>
    {class} procedure SetFontSources(sources: TArray<DNFontSourceBase>);
    ///<summary>
    ///  Gets a copy of the array that contains the list of sources
    ///</summary>
    ///<returns></returns>
    {class} function GetFontSources: TArray<DNFontSourceBase>;

  { static propertys } 

    ///<summary>
    ///  Gets or sets the default font name.
    ///</summary>
    {class} property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    ///<summary>
    ///  Indicate whether to use system font substitutes first or not when a font is not presented and the substitute of this font is not set.
    ///  e.g. On Ubuntu, "Arial" font is generally substituted by "Liberation Sans".
    ///  Default value is false.
    ///</summary>
    {class} property PreferSystemFontSubstitutes: Boolean read get_PreferSystemFontSubstitutes write set_PreferSystemFontSubstitutes;
  end;

  ///<summary>
  ///  Specifies font settings
  ///</summary>
  [DNTypeName('Aspose.Cells.FontConfigs')]
  DNFontConfigs = interface(DDN.mscorlib.DNObject)
  ['{4EF5D072-6CC1-33F3-9C43-65330D2FA493}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConfigs = class(TDNGenericImport<DNFontConfigsClass, DNFontConfigs>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontSettingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8CC19F79-75D1-5A6E-AB1F-2906278E259F}']
  { constructors } 

    ///<summary></summary>
    ///  <param name="startIndex"></param>
    ///  <param name="length"></param>
    ///  <param name="sheets"></param>
    {class} function init(startIndex: Int32; length: Int32; sheets: DNWorksheetCollection): DNFontSetting;

  end;

  ///<summary>
  ///  Represents a range of characters within the cell text.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Excel object
  ///  workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Accessing the "A1" cell from the worksheet
  ///  Aspose.Cells.Cell cell = worksheet.Cells["A1"];
  ///  //Adding some value to the "A1" cell
  ///  cell.PutValue("Visit Aspose!");
  ///  //getting charactor
  ///  FontSetting charactor = cell.Characters(6, 7);
  ///  //Setting the font of selected characters to bold
  ///  charactor.Font.IsBold = true;
  ///  //Setting the font color of selected characters to blue
  ///  charactor.Font.Color = Color.Blue;
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Adding a new worksheet to the Excel object
  ///  workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Accessing the "A1" cell from the worksheet
  ///  Dim cell As Aspose.Cells.Cell = worksheet.Cells("A1")
  ///  'Adding some value to the "A1" cell
  ///  cell.PutValue("Visit Aspose!")
  ///  'getting charactor
  ///  Dim charactor As FontSetting = cell.Characters(6, 7)
  ///  'Setting the font of selected characters to bold
  ///  charactor.Font.IsBold = True
  ///  'Setting the font color of selected characters to blue
  ///  charactor.Font.Color = Color.Blue
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.FontSetting')]
  DNFontSetting = interface(DDN.mscorlib.DNObject)
  ['{F3C71F38-ACF2-3008-B581-038CF666C856}']
  { getters & setters } 

    function get_Type: DNTextNodeType;
    function get_StartIndex: Int32;
    function get_Length: Int32;
    function get_Font: DNFont;
    function get_TextOptions: DNTextOptions;

  { methods } 

    ///<summary>
    ///  Sets the preset WordArt style.
    ///</summary>
    ///  <param name="style">The preset WordArt style.</param>
    ///<remarks>Only for the text of shape/chart.</remarks>
    procedure SetWordArtStyle(style: DNPresetWordArtStyle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of text node.
    ///</summary>
    property &Type: DNTextNodeType read get_Type;
    ///<summary>
    ///  Gets the start index of the characters.
    ///</summary>
    property StartIndex: Int32 read get_StartIndex;
    ///<summary>
    ///  Gets the length of the characters.
    ///</summary>
    property Length: Int32 read get_Length;
    ///<summary>
    ///  Returns the font of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns the text options.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions;
  end;

  TDNFontSetting = class(TDNGenericImport<DNFontSettingClass, DNFontSetting>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextParagraphClass = interface(DNFontSettingClass)
  ['{E98DE738-C82D-5B42-B6B5-0F0E3A63CD67}']
  end;

  ///<summary>
  ///  Represents the text paragraph setting.
  ///</summary>
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextParagraph')]
  DNTextParagraph = interface(DNFontSetting)
  ['{412EF4B3-66CB-37EF-9EA2-D1DDA4FC89B1}']
  { getters & setters } 

    function get_Bullet: DNBullet;
    function get_Type: DNTextNodeType;
    function get_LineSpaceSizeType: DNLineSpaceSizeType;
    procedure set_LineSpaceSizeType(value: DNLineSpaceSizeType);
    function get_LineSpace: Double;
    procedure set_LineSpace(value: Double);
    function get_SpaceAfterSizeType: DNLineSpaceSizeType;
    procedure set_SpaceAfterSizeType(value: DNLineSpaceSizeType);
    function get_SpaceAfter: Double;
    procedure set_SpaceAfter(value: Double);
    function get_SpaceBeforeSizeType: DNLineSpaceSizeType;
    procedure set_SpaceBeforeSizeType(value: DNLineSpaceSizeType);
    function get_SpaceBefore: Double;
    procedure set_SpaceBefore(value: Double);
    function get_Stops: DNTextTabStopCollection;
    function get_IsLatinLineBreak: Boolean;
    procedure set_IsLatinLineBreak(value: Boolean);
    function get_IsEastAsianLineBreak: Boolean;
    procedure set_IsEastAsianLineBreak(value: Boolean);
    function get_IsHangingPunctuation: Boolean;
    procedure set_IsHangingPunctuation(value: Boolean);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_FirstLineIndent: Double;
    procedure set_FirstLineIndent(value: Double);
    function get_FontAlignType: DNTextFontAlignType;
    procedure set_FontAlignType(value: DNTextFontAlignType);
    function get_AlignmentType: DNTextAlignmentType;
    procedure set_AlignmentType(value: DNTextAlignmentType);
    function get_DefaultTabSize: Double;
    procedure set_DefaultTabSize(value: Double);
    function get_Children: TArray<DNFontSetting>;
    function get_StartIndex: Int32;
    function get_Length: Int32;
    function get_Font: DNFont;
    function get_TextOptions: DNTextOptions;

  { methods } 

    ///<summary>
    ///  Sets the preset WordArt style.
    ///</summary>
    ///  <param name="style">The preset WordArt style.</param>
    ///<remarks>Only for the text of shape/chart.</remarks>
    procedure SetWordArtStyle(style: DNPresetWordArtStyle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the bullet.
    ///</summary>
    property Bullet: DNBullet read get_Bullet;
    ///<summary>
    ///  Gets the type of text node.
    ///</summary>
    property &Type: DNTextNodeType read get_Type;
    ///<summary>
    ///  Gets and sets the amount of vertical white space that will be used within a paragraph.
    ///</summary>
    property LineSpaceSizeType: DNLineSpaceSizeType read get_LineSpaceSizeType write set_LineSpaceSizeType;
    ///<summary>
    ///  Gets and sets the amount of vertical white space that will be used within a paragraph.
    ///</summary>
    property LineSpace: Double read get_LineSpace write set_LineSpace;
    ///<summary>
    ///  Gets and sets the amount of vertical white space that will be present after a paragraph.
    ///</summary>
    property SpaceAfterSizeType: DNLineSpaceSizeType read get_SpaceAfterSizeType write set_SpaceAfterSizeType;
    ///<summary>
    ///  Gets and sets the amount of vertical white space that will be present after a paragraph.
    ///</summary>
    property SpaceAfter: Double read get_SpaceAfter write set_SpaceAfter;
    ///<summary>
    ///  Gets and sets the amount of vertical white space that will be present before a paragraph.
    ///</summary>
    property SpaceBeforeSizeType: DNLineSpaceSizeType read get_SpaceBeforeSizeType write set_SpaceBeforeSizeType;
    ///<summary>
    ///  Gets and sets the amount of vertical white space that will be present before a paragraph.
    ///</summary>
    property SpaceBefore: Double read get_SpaceBefore write set_SpaceBefore;
    ///<summary>
    ///  Gets tab stop list.
    ///</summary>
    property Stops: DNTextTabStopCollection read get_Stops;
    ///<summary>
    ///  Specifies whether a Latin word can be broken in half and wrapped onto the next line without a hyphen being added.
    ///</summary>
    property IsLatinLineBreak: Boolean read get_IsLatinLineBreak write set_IsLatinLineBreak;
    ///<summary>
    ///  Specifies whether an East Asian word can be broken in half and wrapped onto the next line without a hyphen being added.
    ///</summary>
    property IsEastAsianLineBreak: Boolean read get_IsEastAsianLineBreak write set_IsEastAsianLineBreak;
    ///<summary>
    ///  Specifies whether punctuation is to be forcefully laid out on a line of text or put on a different line of text.
    ///</summary>
    property IsHangingPunctuation: Boolean read get_IsHangingPunctuation write set_IsHangingPunctuation;
    ///<summary>
    ///  Specifies the right margin of the paragraph.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Specifies the left margin of the paragraph.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Specifies the indent size that will be applied to the first line of text in the paragraph.
    ///</summary>
    property FirstLineIndent: Double read get_FirstLineIndent write set_FirstLineIndent;
    ///<summary>
    ///  Determines where vertically on a line of text the actual words are positioned. This deals
    ///  with vertical placement of the characters with respect to the baselines.
    ///</summary>
    property FontAlignType: DNTextFontAlignType read get_FontAlignType write set_FontAlignType;
    ///<summary>
    ///  Gets and sets the text horizontal alignment type of the paragraph.
    ///</summary>
    property AlignmentType: DNTextAlignmentType read get_AlignmentType write set_AlignmentType;
    ///<summary>
    ///  Gets and sets the default size for a tab character within this paragraph.
    ///</summary>
    property DefaultTabSize: Double read get_DefaultTabSize write set_DefaultTabSize;
    ///<summary>
    ///  Gets all text runs in this paragraph.
    ///  If this paragraph is empty, return paragraph itself.
    ///</summary>
    property Children: TArray<DNFontSetting> read get_Children;
    ///<summary>
    ///  Gets the start index of the characters.
    ///</summary>
    property StartIndex: Int32 read get_StartIndex;
    ///<summary>
    ///  Gets the length of the characters.
    ///</summary>
    property Length: Int32 read get_Length;
    ///<summary>
    ///  Returns the font of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns the text options.
    ///</summary>
    property TextOptions: DNTextOptions read get_TextOptions;
  end;

  TDNTextParagraph = class(TDNGenericImport<DNTextParagraphClass, DNTextParagraph>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontSourceBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF61A7D1-D3E7-5D94-9D4C-EE38DCFB4865}']
  end;

  ///<summary>
  ///  This is an abstract base class for the classes that allow the user to specify various font sources
  ///</summary>
  [DNTypeName('Aspose.Cells.FontSourceBase')]
  DNFontSourceBase = interface(DDN.mscorlib.DNObject)
  ['{273B58A3-5280-3286-9B92-9CF5FC3533C5}']
  { getters & setters } 

    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNFontSourceBase = class(TDNGenericImport<DNFontSourceBaseClass, DNFontSourceBase>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFileFontSourceClass = interface(DNFontSourceBaseClass)
  ['{CFE24F43-0077-59A6-9DCD-9B919F753F40}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="filePath">path to font file</param>
    {class} function init(filePath: string): DNFileFontSource;

  end;

  ///<summary>
  ///  Represents the single TrueType font file stored in the file system.
  ///</summary>
  [DNTypeName('Aspose.Cells.FileFontSource')]
  DNFileFontSource = interface(DNFontSourceBase)
  ['{59648655-F98B-37C8-8DD9-75F9C8AF8D5C}']
  { getters & setters } 

    function get_FilePath: string;
    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path to font file.
    ///</summary>
    property FilePath: string read get_FilePath;
    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNFileFontSource = class(TDNGenericImport<DNFileFontSourceClass, DNFileFontSource>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFolderFontSourceClass = interface(DNFontSourceBaseClass)
  ['{FC5B19DD-8DD5-5434-B5D8-ACAA7CD394A2}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="folderPath">path to fonts folder</param>
    ///  <param name="scanSubfolders">Determines whether or not to scan subfolders.</param>
    {class} function init(folderPath: string; scanSubfolders: Boolean): DNFolderFontSource;

  end;

  ///<summary>
  ///  Represents the folder that contains TrueType font files.
  ///</summary>
  [DNTypeName('Aspose.Cells.FolderFontSource')]
  DNFolderFontSource = interface(DNFontSourceBase)
  ['{62DB125F-2BB7-317C-A497-64EB8D3D779C}']
  { getters & setters } 

    function get_FolderPath: string;
    function get_ScanSubFolders: Boolean;
    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path to fonts folder.
    ///</summary>
    property FolderPath: string read get_FolderPath;
    ///<summary>
    ///  Determines whether or not to scan the subfolders.
    ///</summary>
    property ScanSubFolders: Boolean read get_ScanSubFolders;
    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNFolderFontSource = class(TDNGenericImport<DNFolderFontSourceClass, DNFolderFontSource>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMemoryFontSourceClass = interface(DNFontSourceBaseClass)
  ['{FD78D885-8C96-5FC2-BCF3-69D22258A7E2}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="fontData">Binary font data.</param>
    {class} function init(fontData: TArray<Byte>): DNMemoryFontSource;

  end;

  ///<summary>
  ///  Represents the single TrueType font file stored in memory.
  ///</summary>
  [DNTypeName('Aspose.Cells.MemoryFontSource')]
  DNMemoryFontSource = interface(DNFontSourceBase)
  ['{CB2024BC-B4B3-3914-BEE3-A9C71BC492B6}']
  { getters & setters } 

    function get_FontData: TArray<Byte>;
    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Binary font data.
    ///</summary>
    property FontData: TArray<Byte> read get_FontData;
    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNMemoryFontSource = class(TDNGenericImport<DNMemoryFontSourceClass, DNMemoryFontSource>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFormatConditionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FF9143A1-C35B-580C-A857-9509D24D49D4}']
  end;

  ///<summary>
  ///  Represents conditional formatting condition.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Adds an empty conditional formatting
  ///  int index = sheet.ConditionalFormattings.Add();
  ///  FormatConditionCollection fcs = sheet.ConditionalFormattings[index];
  ///  //Sets the conditional format range.
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 0;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  fcs.AddArea(ca);
  ///  ca = new CellArea();
  ///  ca.StartRow = 1;
  ///  ca.EndRow = 1;
  ///  ca.StartColumn = 1;
  ///  ca.EndColumn = 1;
  ///  fcs.AddArea(ca);
  ///  //Adds condition.
  ///  int conditionIndex = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "=A2", "100");
  ///  //Adds condition.
  ///  int conditionIndex2 = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "50", "100");
  ///  //Sets the background color.
  ///  FormatCondition fc = fcs[conditionIndex];
  ///  fc.Style.BackgroundColor = Color.Red;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\output.xls");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  ' Adds an empty conditional formatting
  ///  Dim index As Integer = sheet.ConditionalFormattings.Add()
  ///  Dim fcs As FormatConditionCollection = sheet.ConditionalFormattings(index)
  ///  'Sets the conditional format range.
  ///  Dim ca As CellArea = New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 0
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///  fcs.AddArea(ca)
  ///  ca = New CellArea()
  ///  ca.StartRow = 1
  ///  ca.EndRow = 1
  ///  ca.StartColumn = 1
  ///  ca.EndColumn = 1
  ///  fcs.AddArea(ca)
  ///  'Adds condition.
  ///  Dim conditionIndex As Integer = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "=A2", "100")
  ///  'Adds condition.
  ///  Dim conditionIndex2 As Integer = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "50", "100")
  ///  'Sets the background color.
  ///  Dim fc As FormatCondition = fcs(conditionIndex)
  ///  fc.Style.BackgroundColor = Color.Red
  ///  'Saving the Excel file
  ///  workbook.Save("C:\output.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.FormatCondition')]
  DNFormatCondition = interface(DDN.mscorlib.DNObject)
  ['{34EAB2F9-D711-3719-96C9-CCF2543E6035}']
  { getters & setters } 

    function get_Formula1: string;
    procedure set_Formula1(value: string);
    function get_Formula2: string;
    procedure set_Formula2(value: string);
    function get_Operator: DNOperatorType;
    procedure set_Operator(value: DNOperatorType);
    function get_StopIfTrue: Boolean;
    procedure set_StopIfTrue(value: Boolean);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_Type: DNFormatConditionType;
    procedure set_Type(value: DNFormatConditionType);
    function get_IconSet: DNIconSet;
    function get_DataBar: DNDataBar;
    function get_ColorScale: DNColorScale;
    function get_Top10: DNTop10;
    function get_AboveAverage: DNAboveAverage;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TimePeriod: DNTimePeriodType;
    procedure set_TimePeriod(value: DNTimePeriodType);

  { methods } 

    ///<summary>
    ///  Gets the value or expression associated with this format condition.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The value or expression associated with this format condition.</returns>
    function GetFormula1(isR1C1: Boolean; isLocal: Boolean): string; overload;
    ///<summary>
    ///  Gets the value or expression associated with this format condition.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The value or expression associated with this format condition.</returns>
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean): string; overload;
    ///<summary>
    ///  Gets the value or expression of the conditional formatting of the cell.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The value or expression associated with the conditional formatting of the cell.</returns>
    ///<remarks>The given cell must be contained by this conditional formatting, otherwise null will be returned.</remarks>
    function GetFormula1(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    ///<summary>
    ///  Gets the value or expression of the conditional formatting of the cell.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The value or expression associated with the conditional formatting of the cell.</returns>
    ///<remarks>The given cell must be contained by this conditional formatting, otherwise null will be returned.</remarks>
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    ///<summary>
    ///  Sets the value or expression associated with this format condition.
    ///</summary>
    ///  <param name="formula1">The value or expression associated with this format condition.
    ///  If the input value starts with '=', then it will be taken as formula. Otherwise it will be taken as plain value(text, number, bool).
    ///  For text value that starts with '=', user may input it as formula in format: "=\"=...\"".</param>
    ///  <param name="formula2">The value or expression associated with this format condition. The input format is same with formula1</param>
    ///  <param name="isR1C1">Whether the formula is R1C1 formula.</param>
    ///  <param name="isLocal">Whether the formula is locale formatted.</param>
    procedure SetFormulas(formula1: string; formula2: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Sets the value or expression associated with this format condition.
    ///</summary>
    ///  <param name="formula">The value or expression associated with this format condition.
    ///  If the input value starts with '=', then it will be taken as formula. Otherwise it will be taken as plain value(text, number, bool).
    ///  For text value that starts with '=', user may input it as formula in format: "=\"=...\"".</param>
    ///  <param name="isR1C1">Whether the formula is R1C1 formula.</param>
    ///  <param name="isLocal">Whether the formula is locale formatted.</param>
    procedure SetFormula1(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Sets the value or expression associated with this format condition.
    ///</summary>
    ///  <param name="formula">The value or expression associated with this format condition.
    ///  If the input value starts with '=', then it will be taken as formula. Otherwise it will be taken as plain value(text, number, bool).
    ///  For text value that starts with '=', user may input it as formula in format: "=\"=...\"".</param>
    ///  <param name="isR1C1">Whether the formula is R1C1 formula.</param>
    ///  <param name="isLocal">Whether the formula is locale formatted.</param>
    procedure SetFormula2(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Gets the formula of the conditional formatting of the cell.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The formula.</returns>
    function GetFormula1(row: Int32; column: Int32): string; overload;
    ///<summary>
    ///  Gets the formula of the conditional formatting of the cell.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The formula.</returns>
    function GetFormula2(row: Int32; column: Int32): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the value or expression associated with conditional formatting.
    ///</summary>
    ///<remarks>
    ///  Please add all areas before setting formula.
    ///  For setting formula for this condition, if the input value starts with '=', then it will be taken as formula.
    ///  Otherwise it will be taken as plain value(text, number, bool). For text value that starts with '=', user may input it as formula in format: "=\"=...\"".
    ///</remarks>
    property Formula1: string read get_Formula1 write set_Formula1;
    ///<summary>
    ///  Gets and sets the value or expression associated with conditional formatting.
    ///</summary>
    ///<remarks>
    ///  Please add all areas before setting formula.
    ///  For setting formula for this condition, if the input value starts with '=', then it will be taken as formula.
    ///  Otherwise it will be taken as plain value(text, number, bool). For text value that starts with '=', user may input it as formula in format: "=\"=...\"".
    ///</remarks>
    property Formula2: string read get_Formula2 write set_Formula2;
    ///<summary>
    ///  Gets and sets the conditional format operator type.
    ///</summary>
    ///<see cref="T:Aspose.Cells.OperatorType" />
    property Operator: DNOperatorType read get_Operator write set_Operator;
    ///<summary>
    ///  True, no rules with lower priority may be applied over this rule, when this rule evaluates to true.
    ///  Only applies for Excel 2007;
    ///</summary>
    property StopIfTrue: Boolean read get_StopIfTrue write set_StopIfTrue;
    ///<summary>
    ///  The priority of this conditional formatting rule. This value is used to determine which
    ///  format should be evaluated and rendered. Lower numeric values are higher priority than
    ///  higher numeric values, where '1' is the highest priority.
    ///</summary>
    property Priority: Int32 read get_Priority write set_Priority;
    ///<summary>
    ///  Gets or setts style of conditional formatted cell ranges.
    ///</summary>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets and sets whether the conditional format Type.
    ///</summary>
    ///<see cref="T:Aspose.Cells.FormatConditionType" />
    property &Type: DNFormatConditionType read get_Type write set_Type;
    ///<summary>
    ///  Get the conditional formatting's "IconSet" instance.
    ///  The default instance's IconSetType is TrafficLights31.
    ///  Valid only for type = IconSet.
    ///</summary>
    ///<returns></returns>
    property IconSet: DNIconSet read get_IconSet;
    ///<summary>
    ///  Get the conditional formatting's "DataBar" instance.
    ///  The default instance's color is blue.
    ///  Valid only for type is DataBar.
    ///</summary>
    ///<returns></returns>
    property DataBar: DNDataBar read get_DataBar;
    ///<summary>
    ///  Get the conditional formatting's "ColorScale" instance.
    ///  The default instance is a "green-yellow-red" 3ColorScale .
    ///  Valid only for type = ColorScale.
    ///</summary>
    ///<returns></returns>
    property ColorScale: DNColorScale read get_ColorScale;
    ///<summary>
    ///  Get the conditional formatting's "Top10" instance.
    ///  The default instance's rule highlights cells whose
    ///  values fall in the top 10 bracket.
    ///  Valid only for type is Top10.
    ///</summary>
    ///<returns></returns>
    property Top10: DNTop10 read get_Top10;
    ///<summary>
    ///  Get the conditional formatting's "AboveAverage" instance.
    ///  The default instance's rule highlights cells that are
    ///  above the average for all values in the range.
    ///  Valid only for type = AboveAverage.
    ///</summary>
    ///<returns></returns>
    property AboveAverage: DNAboveAverage read get_AboveAverage;
    ///<summary>
    ///  The text value in a "text contains" conditional formatting rule.
    ///  Valid only for type = containsText, notContainsText, beginsWith and endsWith.
    ///  The default value is null.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  The applicable time period in a "date occurring¡­" conditional formatting rule.
    ///  Valid only for type = timePeriod.
    ///  The default value is TimePeriodType.Today.
    ///</summary>
    property TimePeriod: DNTimePeriodType read get_TimePeriod write set_TimePeriod;
  end;

  TDNFormatCondition = class(TDNGenericImport<DNFormatConditionClass, DNFormatCondition>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFormatConditionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71122BCD-4731-52FA-B1B5-543E276C4348}']
  end;

  ///<summary>
  ///  Represents conditional formatting.
  ///  The FormatConditions can contain up to three conditional formats.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Adds an empty conditional formatting
  ///  int index = sheet.ConditionalFormattings.Add();
  ///  FormatConditionCollection fcs = sheet.ConditionalFormattings[index];
  ///  //Sets the conditional format range.
  ///  CllArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 0;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  fcs.AddArea(ca);
  ///  ca = new CellArea();
  ///  ca.StartRow = 1;
  ///  ca.EndRow = 1;
  ///  ca.StartColumn = 1;
  ///  ca.EndColumn = 1;
  ///  fcs.AddArea(ca);
  ///  //Adds condition.
  ///  int conditionIndex = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "=A2", "100");
  ///  //Adds condition.
  ///  int conditionIndex2 = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "50", "100");
  ///  //Sets the background color.
  ///  FormatCondition fc = fcs[conditionIndex];
  ///  fc.Style.BackgroundColor = Color.Red;
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\output.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  ' Adds an empty conditional formatting
  ///  Dim index As Integer = sheet.ConditionalFormattings.Add()
  ///  Dim fcs As FormatConditionCollection = sheet.ConditionalFormattings(index)
  ///  'Sets the conditional format range.
  ///  Dim ca As CellArea = New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 0
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///  fcs.AddArea(ca)
  ///  ca = New CellArea()
  ///  ca.StartRow = 1
  ///  ca.EndRow = 1
  ///  ca.StartColumn = 1
  ///  ca.EndColumn = 1
  ///  fcs.AddArea(ca)
  ///  'Adds condition.
  ///  Dim conditionIndex As Integer = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "=A2", "100")
  ///  'Adds condition.
  ///  Dim conditionIndex2 As Integer = fcs.AddCondition(FormatConditionType.CellValue, OperatorType.Between, "50", "100")
  ///  'Sets the background color.
  ///  Dim fc As FormatCondition = fcs(conditionIndex)
  ///  fc.Style.BackgroundColor = Color.Red
  ///  'Saving the Excel file
  ///  workbook.Save("C:\output.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.FormatConditionCollection')]
  DNFormatConditionCollection = interface(DDN.mscorlib.DNObject)
  ['{0E545EA7-1E31-3EAA-B0B1-D118F424BC53}']
  { getters & setters } 

    function get_Count: Int32;
    function get_RangeCount: Int32;
    function get_Item(index: Int32): DNFormatCondition;

  { methods } 

    ///<summary>
    ///  Adds a formatting condition and effected cell rang to the FormatConditions
    ///  The FormatConditions can contain up to three conditional formats.
    ///  References to the other sheets are not allowed in the formulas of conditional formatting.
    ///</summary>
    ///  <param name="cellArea">Conditional formatted cell range.</param>
    ///  <param name="type">Type of conditional formatting.It could be one of the members of FormatConditionType.</param>
    ///  <param name="operatorType">Comparison operator.It could be one of the members of OperatorType.</param>
    ///  <param name="formula1">The value or expression associated with conditional formatting.</param>
    ///  <param name="formula2">The value or expression associated with conditional formatting</param>
    ///<returns>[0]:Formatting condition object index;[1] Effected cell rang index.</returns>
    ///<see cref="T:Aspose.Cells.OperatorType" />
    ///<set cref="T:Aspose.Cells.FormatConditionType" />
    function Add(cellArea: DNCellArea; &type: DNFormatConditionType; operatorType: DNOperatorType; formula1: string; formula2: string): TArray<Int32>;
    ///<summary>
    ///  Adds a conditional formatted cell range.
    ///</summary>
    ///  <param name="cellArea">Conditional formatted cell range.</param>
    ///<returns>Conditional formatted cell rang index.</returns>
    function AddArea(cellArea: DNCellArea): Int32;
    ///<summary>
    ///  Adds a formatting condition.
    ///</summary>
    ///  <param name="type"><set cref="T:Aspose.Cells.FormatConditionType" />
    ///  of conditional formatting.
    ///  It could be one of the members of FormatConditionType.</param>
    ///  <param name="operatorType">The comparison <see cref="T:Aspose.Cells.OperatorType" />
    ///  .
    ///  It could be one of the members of OperatorType.</param>
    ///  <param name="formula1">The value or expression associated with conditional formatting.
    ///  If the input value starts with '=', then it will be taken as formula.
    ///  Otherwise it will be taken as plain value(text, number, bool).
    ///  For text value that starts with '=', user may input it as formula in format: "=\"=...\"".</param>
    ///  <param name="formula2">The value or expression associated with conditional formatting.
    ///  The input format is same with formula1</param>
    ///<returns>Formatting condition object index;</returns>
    function AddCondition(&type: DNFormatConditionType; operatorType: DNOperatorType; formula1: string; formula2: string): Int32; overload;
    ///<summary>
    ///  Add a format condition.
    ///</summary>
    ///  <param name="type">Format condition type.</param>
    ///<returns>Formatting condition object index;</returns>
    function AddCondition(&type: DNFormatConditionType): Int32; overload;
    ///<summary>
    ///  Gets the conditional formatted cell range by index.
    ///</summary>
    ///  <param name="index">the index of the conditional formatted cell range.</param>
    ///<returns>the conditional formatted cell range</returns>
    function GetCellArea(index: Int32): DNCellArea;
    ///<summary>
    ///  Removes conditional formatted cell range by index.
    ///</summary>
    ///  <param name="index">The index of the conditional formatted cell range to be removed.</param>
    procedure RemoveArea(index: Int32); overload;
    ///<summary>
    ///  Remove conditional formatting int the range.
    ///</summary>
    ///  <param name="startRow">The startRow of the range.</param>
    ///  <param name="startColumn">The startColumn of the range.</param>
    ///  <param name="totalRows">The number of rows of the range.</param>
    ///  <param name="totalColumns">The number of columns of the range.</param>
    ///<returns>
    ///  Returns TRUE, this FormatCondtionCollection should be removed.
    ///</returns>
    function RemoveArea(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32): Boolean; overload;
    ///<summary>
    ///  Removes the formatting condition by index.
    ///</summary>
    ///  <param name="index">The index of the formatting condition to be removed.</param>
    procedure RemoveCondition(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of the conditions.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets count of conditionally formatted ranges.
    ///</summary>
    property RangeCount: Int32 read get_RangeCount;
    property Item[index: Int32]: DNFormatCondition read get_Item; default;
  end;

  TDNFormatConditionCollection = class(TDNGenericImport<DNFormatConditionCollectionClass, DNFormatConditionCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFormulaParseOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EF434C8-D6A2-54AD-B98D-FE95A50FE0AE}']
  { constructors } 

    {class} function init: DNFormulaParseOptions;

  end;

  ///<summary>
  ///  Represents options when parsing formula.
  ///</summary>
  [DNTypeName('Aspose.Cells.FormulaParseOptions')]
  DNFormulaParseOptions = interface(DDN.mscorlib.DNObject)
  ['{D8D18C36-641E-3CFD-97B9-DA327EEB351C}']
  { getters & setters } 

    function get_LocaleDependent: Boolean;
    procedure set_LocaleDependent(value: Boolean);
    function get_R1C1Style: Boolean;
    procedure set_R1C1Style(value: Boolean);
    function get_CheckAddIn: Boolean;
    procedure set_CheckAddIn(value: Boolean);
    function get_Parse: Boolean;
    procedure set_Parse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Whether the formula is locale formatted. Default is false.
    ///</summary>
    property LocaleDependent: Boolean read get_LocaleDependent write set_LocaleDependent;
    ///<summary>
    ///  Whether the formula is R1C1 reference style. Default is false.
    ///</summary>
    property R1C1Style: Boolean read get_R1C1Style write set_R1C1Style;
    ///<summary>
    ///  Whether check addins in existing external links of current workbook for user defined function without external link.
    ///  Default is true(if user defined function matches one addin in existing external links, then take it as the addin).
    ///</summary>
    property CheckAddIn: Boolean read get_CheckAddIn write set_CheckAddIn;
    ///<summary>
    ///  Whether parse given formula. Default is true.
    ///  If it is false, then given formula string will be kept as it is for the cell until user call other methods to parse them
    ///  or parsed formula data is required by other operations such as calculating formulas.
    ///</summary>
    property Parse: Boolean read get_Parse write set_Parse;
  end;

  TDNFormulaParseOptions = class(TDNGenericImport<DNFormulaParseOptionsClass, DNFormulaParseOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNGlobalizationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{939085D1-55A9-54A3-BBB0-278C10210163}']
  { constructors } 

    {class} function init: DNGlobalizationSettings;

  end;

  ///<summary>
  ///  Represents the globalization settings.
  ///</summary>
  [DNTypeName('Aspose.Cells.GlobalizationSettings')]
  DNGlobalizationSettings = interface(DDN.mscorlib.DNObject)
  ['{D03CAA60-E659-33CD-9633-DF02009FD4FA}']
  { getters & setters } 

    function get_ListSeparator: Char;
    function get_RowSeparatorOfFormulaArray: Char;
    function get_ColumnSeparatorOfFormulaArray: Char;

  { methods } 

    ///<summary>
    ///  Gets the name of "Total" label in the PivotTable.
    ///  You need to override this method when the PivotTable contains two or more PivotFields in the data area.
    ///</summary>
    ///<returns>The name of "Total" label</returns>
    function GetPivotTotalName: string;
    ///<summary>
    ///  Gets the name of "Grand Total" label in the PivotTable.
    ///</summary>
    ///<returns>The name of "Grand Total" label</returns>
    function GetPivotGrandTotalName: string;
    ///<summary>
    ///  Gets the name of "(Multiple Items)" label in the PivotTable.
    ///</summary>
    ///<returns>The name of "(Multiple Items)" label</returns>
    function GetMultipleItemsName: string;
    ///<summary>
    ///  Gets the name of "(All)" label in the PivotTable.
    ///</summary>
    ///<returns>The name of "(All)" label</returns>
    function GetAllName: string;
    ///<summary>
    ///  Gets the name of "Column Labels" label in the PivotTable.
    ///</summary>
    ///<returns>The name of column labels</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use GlobalizationSettings.GetColumnLabelsOfPivotTable() method.
    ///  This property will be removed 12 months later since September 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function GetColumnLablesName: string;
    ///<summary>
    ///  Gets the name of "Row Labels" label in the PivotTable.
    ///</summary>
    ///<returns>The name of row labels</returns>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use GlobalizationSettings.GetRowLabelsOfPivotTable() method.
    ///  This property will be removed 12 months later since September 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function GetRowLablesName: string;
    function GetProtectionNameOfPivotTable: string;
    ///<summary>
    ///  Gets the name of "Column Labels" label in the PivotTable.
    ///</summary>
    ///<returns>The name of column labels</returns>
    function GetColumnLabelsOfPivotTable: string;
    ///<summary>
    ///  Gets the name of "Row Labels" label in the PivotTable.
    ///</summary>
    ///<returns>The name of row labels</returns>
    function GetRowLabelsNameOfPivotTable: string;
    ///<summary>
    ///  Gets the name of "(blank)" label in the PivotTable.
    ///</summary>
    ///<returns>The name of empty data</returns>
    function GetEmptyDataName: string;
    ///<summary>
    ///  Gets the name of <see cref="T:Aspose.Cells.Pivot.PivotFieldSubtotalType" />
    ///  type in the PivotTable.
    ///</summary>
    ///  <param name="subTotalType">The <see cref="T:Aspose.Cells.Pivot.PivotFieldSubtotalType" />
    ///  type</param>
    ///<returns>The name of <see cref="T:Aspose.Cells.Pivot.PivotFieldSubtotalType" />
    ///  type</returns>
    function GetSubTotalName(subTotalType: DNPivotFieldSubtotalType): string;
    ///<summary>
    ///  Gets the total name of the function.
    ///</summary>
    ///  <param name="functionType">The function type.</param>
    ///<returns>The total name of the function.</returns>
    function GetTotalName(functionType: DNConsolidationFunction): string;
    ///<summary>
    ///  Gets the grand total name of the function.
    ///</summary>
    ///  <param name="functionType">The function type.</param>
    ///<returns>The grand total name of the function.</returns>
    function GetGrandTotalName(functionType: DNConsolidationFunction): string;
    ///<summary>
    ///  Gets the name of "Other" labels for Pie charts.
    ///</summary>
    ///<returns></returns>
    function GetOtherName: string;
    ///<summary>
    ///  Gets the type name of table rows that consists of the table header.
    ///  Default is "Headers": "#Headers" denotes the table header.
    ///</summary>
    ///<returns>the type name of table rows</returns>
    function GetTableRowTypeOfHeaders: string;
    ///<summary>
    ///  Gets the type name of table rows that consists of data region of referenced table.
    ///  Default is "Data": "#Data" denotes the data region of the table.
    ///</summary>
    ///<returns>the type name of table rows</returns>
    function GetTableRowTypeOfData: string;
    ///<summary>
    ///  Gets the type name of table rows that consists of all rows in referenced table.
    ///  Default is "All": "#All" denotes all rows in referenced table.
    ///</summary>
    ///<returns>the type name of table rows</returns>
    function GetTableRowTypeOfAll: string;
    ///<summary>
    ///  Gets the type name of table rows that consists of the total row of referenced table.
    ///  Default is "Totals": "#Totals" denotes the total row of referenced table.
    ///</summary>
    ///<returns>the type name of table rows</returns>
    function GetTableRowTypeOfTotals: string;
    ///<summary>
    ///  Gets the type name of table rows that consists of the current row in referenced table.
    ///  Default is "This Row": "#This Row" denotes the current row in referenced table.
    ///</summary>
    ///<returns>the type name of table rows</returns>
    function GetTableRowTypeOfCurrent: string;
    ///<summary>
    ///  Gets the display string value for cell's error value
    ///</summary>
    ///  <param name="err">error values such as #VALUE!,#NAME?</param>
    ///<returns>Default returns the error value itself</returns>
    function GetErrorValueString(err: string): string;
    ///<summary>
    ///  Gets the display string value for cell's boolean value
    ///</summary>
    ///  <param name="bv">boolean value</param>
    ///<returns>Default returns "TRUE" for true value and "FALSE" for false value.</returns>
    function GetBooleanValueString(bv: Boolean): string;
    ///<summary>
    ///  Gets the locale dependent function name according to given standard function name.
    ///</summary>
    ///  <param name="standardName">Standard(en-US locale) function name.</param>
    ///<returns>Locale dependent function name. The locale was specified by the Workbook for which this settings is used.</returns>
    function GetLocalFunctionName(standardName: string): string;
    ///<summary>
    ///  Gets the standard function name according to given locale dependent function name.
    ///</summary>
    ///  <param name="localName">Locale dependent function name. The locale was specified by the Workbook for which this settings is used.</param>
    ///<returns>Standard(en-US locale) function name.</returns>
    function GetStandardFunctionName(localName: string): string;
    ///<summary>
    ///  Gets the locale dependent text for built-in Name according to given standard text.
    ///</summary>
    ///  <param name="standardName">Standard(en-US locale) text of built-in Name.</param>
    ///<returns>Locale dependent text. The locale was specified by the Workbook for which this settings is used.</returns>
    function GetLocalBuiltInName(standardName: string): string;
    ///<summary>
    ///  Gets the standard text of built-in Name according to given locale dependent text.
    ///</summary>
    ///  <param name="localName">Locale dependent text of built-in Name. The locale was specified by the Workbook for which this settings is used.</param>
    ///<returns>Standard(en-US locale) text.</returns>
    function GetStandardBuiltInName(localName: string): string;
    ///<summary>
    ///  Gets standard English font style name(Regular, Bold, Italic) for Header/Footer according to given locale font style name.
    ///</summary>
    ///  <param name="localfontStyleName">Locale font style name for Header/Footer.</param>
    ///<returns>Standard English font style name(Regular, Bold, Italic)</returns>
    function GetStandardHeaderFooterFontStyleName(localfontStyleName: string): string;
    ///<summary>
    ///  Transforms the string into a comparable object according to certain collation rules.
    ///</summary>
    ///  <param name="v">String value needs to be compared with others.</param>
    ///  <param name="ignoreCase">whether ignore case when comparing values</param>
    ///<returns>Object can be used to compare or sort string values</returns>
    function GetCollationKey(v: string; ignoreCase: Boolean): DDN.mscorlib.DNIComparable;
    ///<summary>
    ///  Compares two string values according to certain collation rules.
    ///</summary>
    ///  <param name="v1">the first string</param>
    ///  <param name="v2">the second string</param>
    ///  <param name="ignoreCase">whether ignore case when comparing values</param>
    ///<returns>Integer that indicates the lexical relationship between the two comparands</returns>
    function Compare(v1: string; v2: string; ignoreCase: Boolean): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the separator for list, parameters of function, ...etc.
    ///</summary>
    property ListSeparator: Char read get_ListSeparator;
    ///<summary>
    ///  Gets the separator for rows in array data in formula.
    ///</summary>
    property RowSeparatorOfFormulaArray: Char read get_RowSeparatorOfFormulaArray;
    ///<summary>
    ///  Gets the separator for the items in array's row data in formula.
    ///</summary>
    property ColumnSeparatorOfFormulaArray: Char read get_ColumnSeparatorOfFormulaArray;
  end;

  TDNGlobalizationSettings = class(TDNGenericImport<DNGlobalizationSettingsClass, DNGlobalizationSettings>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHeaderFooterCommandClass = interface(DDN.mscorlib.DNObjectClass)
  ['{490B0073-0035-5486-B6E7-1808E67F40D6}']
  end;

  ///<summary>
  ///  Represents the command of header/footer
  ///</summary>
  [DNTypeName('Aspose.Cells.HeaderFooterCommand')]
  DNHeaderFooterCommand = interface(DDN.mscorlib.DNObject)
  ['{0822801E-4BFF-3DCC-9825-E0B9286A76AE}']
  { getters & setters } 

    function get_Type: DNHeaderFooterCommandType;
    function get_Font: DNFont;
    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the header/footer' command type .
    ///</summary>
    property &Type: DNHeaderFooterCommandType read get_Type;
    ///<summary>
    ///  Gets the font of the command's value.
    ///</summary>
    ///<remarks>
    ///  Useless for HeaderFooterCommandType.Picture.
    ///</remarks>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets the text of the command.
    ///</summary>
    ///<remarks>
    ///  Only valid for HeaderFooterCommandType.Text.
    ///</remarks>
    property Text: string read get_Text;
  end;

  TDNHeaderFooterCommand = class(TDNGenericImport<DNHeaderFooterCommandClass, DNHeaderFooterCommand>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHorizontalPageBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A9FB1B1-526C-5A4D-91C0-C80135391819}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a horizontal page break.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Add a page break at cell Y30
  ///  int Index = worksheet.HorizontalPageBreaks.Add("Y30");
  ///  //get the newly added horizontal page break
  ///  HorizontalPageBreak hPageBreak = worksheet.HorizontalPageBreaks[Index];
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Add a page break at cell Y30
  ///  Dim Index As Integer = worksheet.HorizontalPageBreaks.Add("Y30")
  ///  'get the newly added horizontal page break
  ///  Dim hPageBreak As HorizontalPageBreak = worksheet.HorizontalPageBreaks(Index)
  ///</code></example>
  [DNTypeName('Aspose.Cells.HorizontalPageBreak')]
  DNHorizontalPageBreak = interface(DDN.mscorlib.DNObject)
  ['{8E090E21-C724-3531-A14A-CF35F6B3AED8}']
  { getters & setters } 

    function get_StartColumn: Int32;
    function get_EndColumn: Int32;
    function get_Row: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the start column index of this horizontal page break.
    ///</summary>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  Gets the end column index of this horizontal page break.
    ///</summary>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  Gets the zero based row index.
    ///</summary>
    property Row: Int32 read get_Row;
  end;

  TDNHorizontalPageBreak = class(TDNGenericImport<DNHorizontalPageBreakClass, DNHorizontalPageBreak>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHyperlinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80243503-B878-5C14-8582-C8129EF4754E}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a hyperlink.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Adding a new worksheet to the Workbook object
  ///  workbook.Worksheets.Add();
  ///  //Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Adding a hyperlink to a URL at "A1" cell
  ///  worksheet.Hyperlinks.Add("A1", 1, 1, "http://www.aspose.com");
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Adding a new worksheet to the Workbook object
  ///  workbook.Worksheets.Add()
  ///  'Obtaining the reference of the newly added worksheet by passing its sheet index
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Adding a hyperlink to a URL at "A1" cell
  ///  worksheet.Hyperlinks.Add("A1", 1, 1, "http://www.aspose.com")
  ///  'Saving the Excel file
  ///  workbook.Save("C:\book1.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Hyperlink')]
  DNHyperlink = interface(DDN.mscorlib.DNObject)
  ['{B61F2F3D-A164-30B0-97B0-18AFEDBC41E9}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_TextToDisplay: string;
    procedure set_TextToDisplay(value: string);
    function get_Area: DNCellArea;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_LinkType: DNTargetModeType;

  { methods } 

    ///<summary>
    ///  Deletes this hyperlink
    ///</summary>
    procedure Delete;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the address of a hyperlink.
    ///</summary>
    property Address: string read get_Address write set_Address;
    ///<summary>
    ///  Represents the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink.
    ///</summary>
    property TextToDisplay: string read get_TextToDisplay write set_TextToDisplay;
    ///<summary>
    ///  Gets the range of hyperlink.
    ///</summary>
    property Area: DNCellArea read get_Area;
    ///<summary>
    ///  Returns or sets the ScreenTip text for the specified hyperlink.
    ///</summary>
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    ///<summary>
    ///  Gets the link type.
    ///</summary>
    property LinkType: DNTargetModeType read get_LinkType;
  end;

  TDNHyperlink = class(TDNGenericImport<DNHyperlinkClass, DNHyperlink>) end;

  //-------------namespace: Aspose.Cells----------------
  DNIconFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7766C057-DC39-55A5-B22A-3482EEB1CB73}']
  end;

  ///<summary>
  ///  Represents icon filter.
  ///</summary>
  [DNTypeName('Aspose.Cells.IconFilter')]
  DNIconFilter = interface(DDN.mscorlib.DNObject)
  ['{E8E7584D-A523-36FC-A3B4-C6C20A9CB7F2}']
  { getters & setters } 

    function get_IconSetType: DNIconSetType;
    procedure set_IconSetType(value: DNIconSetType);
    function get_IconId: Int32;
    procedure set_IconId(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets which icon set is used in the filter criteria.
    ///</summary>
    property IconSetType: DNIconSetType read get_IconSetType write set_IconSetType;
    ///<summary>
    ///  Gets and sets Zero-based index of an icon in an icon set.
    ///</summary>
    property IconId: Int32 read get_IconId write set_IconId;
  end;

  TDNIconFilter = class(TDNGenericImport<DNIconFilterClass, DNIconFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNIconSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC94D27B-BBBC-52DC-89A1-DC98338CBBFA}']
  end;

  ///<summary>
  ///  Describe the IconSet conditional formatting rule.
  ///  This conditional formatting rule applies icons to cells
  ///  according to their values.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Adds an empty conditional formatting
  ///  int index = sheet.ConditionalFormattings.Add();
  ///  FormatConditions fcs = sheet.ConditionalFormattings[index];
  ///  //Sets the conditional format range.
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 2;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  fcs.AddArea(ca);
  ///  //Adds condition.
  ///  int idx = fcs.AddCondtion(FormatConditionType.IconSet);
  ///  fcs.AddArea(ca);
  ///  FormatCondition cond = fcs[idx];
  ///  //Get Icon Set
  ///  IconSet iconSet = cond.IconSet;
  ///  //Set Icon Type
  ///  iconSet.Type = IconSetType.Arrows3;
  ///  //Put Cell Values
  ///  Aspose.Cells.Cell cell1 = sheet.Cells["A1"];
  ///  cell1.PutValue(10);
  ///  Aspose.Cells.Cell cell2 = sheet.Cells["A2"];
  ///  cell2.PutValue(120);
  ///  Aspose.Cells.Cell cell3 = sheet.Cells["A3"];
  ///  cell3.PutValue(260);
  ///  //Saving the Excel file
  ///  workbook.Save("D:\\book1.xlsx");
  ///  [VB.NET]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As New Workbook()
  ///  Dim sheet As Worksheet = workbook.Worksheets(0)
  ///  'Adds an empty conditional formatting
  ///  Dim index As Integer = sheet.ConditionalFormattings.Add()
  ///  Dim fcs As FormatConditions = sheet.ConditionalFormattings(index)
  ///  'Sets the conditional format range.
  ///  Dim ca As New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 2
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///  fcs.AddArea(ca)
  ///  'Adds condition.
  ///  Dim idx As Integer = fcs.AddCondtion(FormatConditionType.IconSet)
  ///  fcs.AddArea(ca)
  ///  Dim cond As FormatCondition = fcs(idx)
  ///  'Get Icon Set
  ///  Dim iconSet As IconSet = cond.IconSet
  ///  'Set Icon Type
  ///  iconSet.Type = IconSetType.Arrows3
  ///  'Put Cell Values
  ///  Dim cell1 As Aspose.Cells.Cell = sheet.Cells("A1")
  ///  cell1.PutValue(10)
  ///  Dim cell2 As Aspose.Cells.Cell = sheet.Cells("A2")
  ///  cell2.PutValue(120)
  ///  Dim cell3 As Aspose.Cells.Cell = sheet.Cells("A3")
  ///  cell3.PutValue(260)
  ///  'Saving the Excel file
  ///  workbook.Save("D:\book1.xlsx")
  ///</code></example>
  [DNTypeName('Aspose.Cells.IconSet')]
  DNIconSet = interface(DDN.mscorlib.DNObject)
  ['{C76EF106-7BB1-3071-89EA-92C35181F4C0}']
  { getters & setters } 

    function get_CfIcons: DNConditionalFormattingIconCollection;
    function get_Cfvos: DNConditionalFormattingValueCollection;
    function get_Type: DNIconSetType;
    procedure set_Type(value: DNIconSetType);
    function get_IsCustom: Boolean;
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_Reverse: Boolean;
    procedure set_Reverse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get the<see cref="T:Aspose.Cells.ConditionalFormattingIcon" />
    ///  from the collection
    ///</summary>
    property CfIcons: DNConditionalFormattingIconCollection read get_CfIcons;
    ///<summary>
    ///  Get the CFValueObjects instance.
    ///</summary>
    property Cfvos: DNConditionalFormattingValueCollection read get_Cfvos;
    ///<summary>
    ///  Get or Set the icon set type to display.
    ///  Setting the type will auto check if the current Cfvos's count is
    ///  accord with the new type. If not accord, old Cfvos will be cleaned and
    ///  default Cfvos will be added.
    ///</summary>
    property &Type: DNIconSetType read get_Type write set_Type;
    ///<summary>
    ///  Indicates whether the icon set is custom.
    ///  Default value is false.
    ///</summary>
    property IsCustom: Boolean read get_IsCustom;
    ///<summary>
    ///  Get or set the flag indicating whether to show the values of the cells on which this icon set is applied.
    ///  Default value is true.
    ///</summary>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    ///<summary>
    ///  Get or set the flag indicating whether to reverses the default order of the icons in this icon set.
    ///  Default value is false.
    ///</summary>
    property Reverse: Boolean read get_Reverse write set_Reverse;
  end;

  TDNIconSet = class(TDNGenericImport<DNIconSetClass, DNIconSet>) end;

  //-------------namespace: Aspose.Cells----------------
  DNImportTableOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E55A2233-8185-5036-A15F-F45ADC6FE617}']
  { constructors } 

    ///<summary>
    ///  Creates the default importing options.
    ///</summary>
    {class} function init: DNImportTableOptions;

  end;

  ///<summary>
  ///  Represents the options of importing data into cells.
  ///</summary>
  [DNTypeName('Aspose.Cells.ImportTableOptions')]
  DNImportTableOptions = interface(DDN.mscorlib.DNObject)
  ['{977FF3BD-8D03-3A93-9B3B-549AB9484C08}']
  { getters & setters } 

    function get_ConvertGridStyle: Boolean;
    procedure set_ConvertGridStyle(value: Boolean);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_InsertRows: Boolean;
    procedure set_InsertRows(value: Boolean);
    function get_ShiftFirstRowDown: Boolean;
    procedure set_ShiftFirstRowDown(value: Boolean);
    function get_IsFieldNameShown: Boolean;
    procedure set_IsFieldNameShown(value: Boolean);
    function get_DateFormat: string;
    procedure set_DateFormat(value: string);
    function get_NumberFormats: TArray<string>;
    procedure set_NumberFormats(value: TArray<string>);
    function get_IsFormulas: TArray<Boolean>;
    procedure set_IsFormulas(value: TArray<Boolean>);
    function get_TotalRows: Int32;
    procedure set_TotalRows(value: Int32);
    function get_TotalColumns: Int32;
    procedure set_TotalColumns(value: Int32);
    function get_ColumnIndexes: TArray<Int32>;
    procedure set_ColumnIndexes(value: TArray<Int32>);
    function get_DefaultValues: TArray<DDN.mscorlib.DNObject>;
    procedure set_DefaultValues(value: TArray<DDN.mscorlib.DNObject>);
    function get_IsHtmlString: Boolean;
    procedure set_IsHtmlString(value: Boolean);
    function get_CheckMergedCells: Boolean;
    procedure set_CheckMergedCells(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether apply the style of the grid view to cells.
    ///</summary>
    property ConvertGridStyle: Boolean read get_ConvertGridStyle write set_ConvertGridStyle;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string value should be converted to numeric or date value.
    ///</summary>
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    ///<summary>
    ///  Indicates whether new rows should be added for importing data records.
    ///</summary>
    property InsertRows: Boolean read get_InsertRows write set_InsertRows;
    ///<summary>
    ///  Indicates whether shifting the first row down when inserting rows.
    ///</summary>
    property ShiftFirstRowDown: Boolean read get_ShiftFirstRowDown write set_ShiftFirstRowDown;
    ///<summary>
    ///  Indicates whether field name should be imported.
    ///</summary>
    property IsFieldNameShown: Boolean read get_IsFieldNameShown write set_IsFieldNameShown;
    ///<summary>
    ///  Gets or sets date format string for cells with imported datetime values.
    ///</summary>
    property DateFormat: string read get_DateFormat write set_DateFormat;
    ///<summary>
    ///  Gets or sets the number formats
    ///</summary>
    property NumberFormats: TArray<string> read get_NumberFormats write set_NumberFormats;
    ///<summary>
    ///  Indicates whether the data are formulas.
    ///</summary>
    property IsFormulas: TArray<Boolean> read get_IsFormulas write set_IsFormulas;
    ///<summary>
    ///  Gets or sets total row count to import from data source. -1 means all rows of given data source.
    ///</summary>
    property TotalRows: Int32 read get_TotalRows write set_TotalRows;
    ///<summary>
    ///  Gets or sets total column count to import from data source. -1 means all rows of given data source.
    ///</summary>
    property TotalColumns: Int32 read get_TotalColumns write set_TotalColumns;
    ///<summary>
    ///  Gets or sets the columns(0-based) to import from data source. null means all columns should be imported.
    ///</summary>
    property ColumnIndexes: TArray<Int32> read get_ColumnIndexes write set_ColumnIndexes;
    ///<summary>
    ///  Default value for the value in the table is null.
    ///</summary>
    property DefaultValues: TArray<DDN.mscorlib.DNObject> read get_DefaultValues write set_DefaultValues;
    ///<summary>
    ///  Indicates whether the value contains html tags.
    ///</summary>
    property IsHtmlString: Boolean read get_IsHtmlString write set_IsHtmlString;
    ///<summary>
    ///  Indicates whether checking merged cells.
    ///</summary>
    property CheckMergedCells: Boolean read get_CheckMergedCells write set_CheckMergedCells;
  end;

  TDNImportTableOptions = class(TDNGenericImport<DNImportTableOptionsClass, DNImportTableOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNIndividualFontConfigsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8CD257EE-588F-5C2D-9391-BF6EEB69E9E2}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    {class} function init: DNIndividualFontConfigs;

  end;

  ///<summary>
  ///  Font configs for each <see cref="T:Aspose.Cells.Workbook" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Cells.IndividualFontConfigs')]
  DNIndividualFontConfigs = interface(DDN.mscorlib.DNObject)
  ['{7D7AAA0C-7A27-37A0-9796-F75C931D726C}']
  { methods } 

    ///<summary>
    ///  Font substitute names for given original font name.
    ///</summary>
    ///  <param name="originalFontName">Original font name.</param>
    ///  <param name="substituteFontNames">List of font substitute names to be used if original font is not presented.</param>
    procedure SetFontSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    ///<summary>
    ///  Returns array containing font substitute names to be used if original font is not presented.
    ///</summary>
    ///  <param name="originalFontName">originalFontName</param>
    ///<returns>An array containing font substitute names to be used if original font is not presented.</returns>
    function GetFontSubstitutes(originalFontName: string): TArray<string>;
    ///<summary>
    ///  Sets the fonts folder
    ///</summary>
    ///  <param name="fontFolder">The folder that contains TrueType fonts.</param>
    ///  <param name="recursive">Determines whether or not to scan subfolders.</param>
    procedure SetFontFolder(fontFolder: string; recursive: Boolean);
    ///<summary>
    ///  Sets the fonts folders
    ///</summary>
    ///  <param name="fontFolders">The folders that contains TrueType fonts.</param>
    ///  <param name="recursive">Determines whether or not to scan subfolders.</param>
    procedure SetFontFolders(fontFolders: TArray<string>; recursive: Boolean);
    ///<summary>
    ///  Sets the fonts sources.
    ///</summary>
    ///  <param name="sources">An array of sources that contain TrueType fonts.</param>
    procedure SetFontSources(sources: TArray<DNFontSourceBase>);
    ///<summary>
    ///  Gets a copy of the array that contains the list of sources
    ///</summary>
    ///<returns></returns>
    function GetFontSources: TArray<DNFontSourceBase>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIndividualFontConfigs = class(TDNGenericImport<DNIndividualFontConfigsClass, DNIndividualFontConfigs>) end;

  //-------------namespace: Aspose.Cells----------------
  DNInsertOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9CA82D62-40C4-57C6-9B4E-2468F99B2C5E}']
  { constructors } 

    {class} function init: DNInsertOptions;

  end;

  ///<summary>
  ///  Represents the options of inserting.
  ///</summary>
  [DNTypeName('Aspose.Cells.InsertOptions')]
  DNInsertOptions = interface(DDN.mscorlib.DNObject)
  ['{63F55A0A-80A3-3028-B8E2-D526D1F4F0F3}']
  { getters & setters } 

    function get_CopyFormatType: DNCopyFormatType;
    procedure set_CopyFormatType(value: DNCopyFormatType);
    function get_UpdateReference: Boolean;
    procedure set_UpdateReference(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary></summary>
    property CopyFormatType: DNCopyFormatType read get_CopyFormatType write set_CopyFormatType;
    ///<summary>
    ///  Indicates if references in other worksheets will be updated.
    ///</summary>
    property UpdateReference: Boolean read get_UpdateReference write set_UpdateReference;
  end;

  TDNInsertOptions = class(TDNGenericImport<DNInsertOptionsClass, DNInsertOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNInterruptMonitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EEA3458-7322-5FAD-AD92-8E7CD93D1857}']
  { constructors } 

    {class} function init: DNInterruptMonitor;

  end;

  ///<summary>
  ///  Represents all operator about the interrupt.
  ///</summary>
  [DNTypeName('Aspose.Cells.InterruptMonitor')]
  DNInterruptMonitor = interface(DDN.mscorlib.DNObject)
  ['{86AE7395-A161-3F7B-9187-632BB4D81269}']
  { methods } 

    ///<summary>
    ///  Interrupt the current operator.
    ///</summary>
    procedure Interrupt;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInterruptMonitor = class(TDNGenericImport<DNInterruptMonitorClass, DNInterruptMonitor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DAF205AD-9730-5636-803F-5E628823E4E6}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<example>
    ///  In this example, an attempt will be made to find a license file named MyLicense.lic
    ///  in the folder that contains
    ///  the component, in the folder that contains the calling assembly,
    ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
    ///<code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense("MyLicense.lic");
    ///  [Visual Basic]
    ///  Dim license As license = New license
    ///  License.SetLicense("MyLicense.lic")
    ///</code></example>
    {class} function init: DNLicense;

  end;

  ///<summary>
  ///  Provides methods to license the component.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to find a license file named MyLicense.lic
  ///  in the folder that contains
  ///  the component, in the folder that contains the calling assembly,
  ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
  ///<code>
  ///  [C#]
  ///  License license = new License();
  ///  license.SetLicense("MyLicense.lic");
  ///  [Visual Basic]
  ///  Dim license As license = New license
  ///  License.SetLicense("MyLicense.lic")
  ///</code></example>
  [DNTypeName('Aspose.Cells.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{11BFC9A6-3AE8-37C2-B5DC-F26521256433}']
  { methods } 

    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///<remarks><p>Tries to find the license in the following locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. The folder that contains the Aspose component assembly.</p>
    ///  <p>3. The folder that contains the client's calling assembly.</p>
    ///  <p>4. The folder that contains the entry (startup) assembly.</p>
    ///  <p>5. An embedded resource in the client's calling assembly.</p>
    ///  <p><b>Note:</b>
    ///  On the .NET Compact Framework, tries to find the license only in these locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. An embedded resource in the client's calling assembly.</p>
    ///</remarks>
    ///<example>
    ///  In this example, an attempt will be made to find a license file named MyLicense.lic
    ///  in the folder that contains
    ///  the component, in the folder that contains the calling assembly,
    ///  in the folder of the entry assembly and then in the embedded resources of the calling assembly.
    ///<code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense("MyLicense.lic");
    ///  [Visual Basic]
    ///  Dim license As License = New License
    ///  license.SetLicense("MyLicense.lic")
    ///</code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
    ///  Use an empty string to switch to evaluation mode.</param>
    ///</example>
    procedure SetLicense(licenseName: string); overload;
    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="stream">A stream that contains the license.</param>
    ///<remarks><p>Use this method to load a license from a stream.</p>
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  License license = new License();
    ///  license.SetLicense(myStream);
    ///  [Visual Basic]
    ///  Dim license as License = new License
    ///  license.SetLicense(myStream)
    ///</code></example>
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Cells----------------
  DNLoadFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B96C2CC-E0EC-5DA7-AFF8-D9A04CDF7C2F}']
  { constructors } 

    ///<summary>
    ///  Constructs one LoadFilter with default filter options LoadDataFilterOptions.All.
    ///</summary>
    {class} function init: DNLoadFilter; overload;
    ///<summary>
    ///  Constructs one LoadFilter with given filter options.
    ///</summary>
    ///  <param name="opts">the default filter options</param>
    {class} function init(opts: DNLoadDataFilterOptions): DNLoadFilter; overload;

  end;

  ///<summary>
  ///  Represents the filter that provides options for loading data when loading workbook from template.
  ///</summary>
  ///<remarks>
  ///  User may specify the filter options or implement their own LoadFilter to specify how to load data.
  ///</remarks>
  ///<example>
  ///  The following example shows how to determine the filter options according to worksheet's properties.
  ///<code>
  ///  [C#]
  ///  Workbook wb = new Workbook(template, new LoadOptions() { LoadFilter = new LoadFilterSheet() });
  ///  //Custom LoadFilter implementation
  ///  class LoadFilterSheet : LoadFilter
  ///  {
  ///  public override void StartSheet(Worksheet sheet)
  ///  {
  ///  if (sheet.Name == "Sheet1")
  ///  {
  ///  LoadDataFilterOptions = Aspose.Cells.LoadDataFilterOptions.All;
  ///  }
  ///  else
  ///  {
  ///  LoadDataFilterOptions = Aspose.Cells.LoadDataFilterOptions.None;
  ///  }
  ///  }
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Cells.LoadFilter')]
  DNLoadFilter = interface(DDN.mscorlib.DNObject)
  ['{F16486CB-85AA-306D-928C-9B27AB4DEDA6}']
  { getters & setters } 

    function get_LoadDataFilterOptions: DNLoadDataFilterOptions;
    procedure set_LoadDataFilterOptions(value: DNLoadDataFilterOptions);
    function get_SheetsInLoadingOrder: TArray<Int32>;

  { methods } 

    ///<summary>
    ///  Prepares filter options before loading given worksheet.
    ///  User's implementation of LoadFilter can change the LoadDataFilterOptions here
    ///  to denote how to load data for this worksheet.
    ///</summary>
    ///  <param name="sheet">The worksheet to be loaded.
    ///  There are only few properties can be used for the given worksheet object here
    ///  because most data and properties have not been loaded. The available properties are:
    ///  Name, Index, VisibilityType</param>
    procedure StartSheet(sheet: DNWorksheet);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The filter options to denote what data should be loaded.
    ///</summary>
    property LoadDataFilterOptions: DNLoadDataFilterOptions read get_LoadDataFilterOptions write set_LoadDataFilterOptions;
    ///<summary>
    ///  Specifies the sheets(indices) and order to be loaded.
    ///  Default is null, that denotes to load all sheets in the default order in template file.
    ///  If not null and some sheet's index is not in the returned array, then the sheet will not be loaded.
    ///</summary>
    property SheetsInLoadingOrder: TArray<Int32> read get_SheetsInLoadingOrder;
  end;

  TDNLoadFilter = class(TDNGenericImport<DNLoadFilterClass, DNLoadFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{00D60D4F-038F-595C-B516-8CF91DD7A68D}']
  { constructors } 

    ///<summary>
    ///  Creates an options of loading the file.
    ///</summary>
    {class} function init: DNLoadOptions; overload;
    ///<summary>
    ///  Creates an options of loading the file.
    ///</summary>
    ///  <param name="loadFormat">The loading format.</param>
    {class} function init(loadFormat: DNLoadFormat): DNLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents the options of loading the file.
  ///</summary>
  [DNTypeName('Aspose.Cells.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{C981F25D-DBB4-3254-B5DC-9BD901348AD2}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    ///<summary>
    ///  Sets the default print paper size from default printer's setting.
    ///</summary>
    ///  <param name="type">The default paper size.</param>
    ///<remarks>
    ///  If there is no setting about paper size,MS Excel will use default printer's setting.
    ///</remarks>
    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the load format.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    ///<summary>
    ///  Gets and set the password of the workbook.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Indicates whether parsing the formula when reading the file.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm and Xlsm file
    ///  because the formulas in the files are stored with a string formula.
    ///</remarks>
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    ///<summary>
    ///  Indicates whether parsing pivot cached records when loading the file.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm , Xlsm and xlsb file</remarks>
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    ///<summary>
    ///  Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
    ///</summary>
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    ///<summary>
    ///  Gets or sets the system regional settings based on CountryCode at the time the file was loaded.
    ///</summary>
    ///<remarks>If you do not want to use the region  saved in the file,
    ///  please reset it after reading the file.</remarks>
    property Region: DNCountryCode read get_Region write set_Region;
    ///<summary>
    ///  Gets or sets the system culture info at the time the file was loaded.
    ///</summary>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    ///<summary>
    ///  Sets the default standard font name
    ///</summary>
    property StandardFont: string read get_StandardFont write set_StandardFont;
    ///<summary>
    ///  Sets the default standard font size.
    ///</summary>
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    ///<summary>
    ///  Gets and sets the interrupt monitor.
    ///</summary>
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    ///<summary>
    ///  Ignore the data which are not printed if directly printing the file
    ///</summary>
    ///<remarks>
    ///  Only for xlsx file.
    ///</remarks>
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    ///<summary>
    ///  Check whether data is valid in the template file.
    ///</summary>
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    ///<summary>
    ///  Whether check restriction of excel file when user modify cells related objects.
    ///  For example, excel does not allow inputting string value longer than 32K.
    ///  When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
    ///  If this property is false, we will accept your input string value as the cell's value so that later
    ///  you can output the complete string value for other file formats such as CSV.
    ///  However, if you have set such kind of value that is invalid for excel file format,
    ///  you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
    ///</summary>
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    ///<summary>
    ///  Whether keep the unparsed data in memory for the Workbook when it is loaded from template file. Default is true.
    ///</summary>
    ///<remarks>
    ///  For scenarios that user only needs to read some contents from template file and does not need to save the workbook back,
    ///  set this property as false may improve performance, especially when using it together with some kind of LoadFilter,
    ///</remarks>
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    ///<summary>
    ///  The filter to denote how to load data.
    ///</summary>
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    ///<summary>
    ///  The data handler for processing cells data when reading template file.
    ///</summary>
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    ///<summary>
    ///  Gets or sets the memory usage options.
    ///</summary>
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets and sets the auto fitter options
    ///</summary>
    ///<remarks>
    ///  Only for xlsx file now.
    ///</remarks>
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    ///<summary>
    ///  Indicates whether auto filtering the data when loading the files.
    ///</summary>
    ///<remarks>
    ///  Sometimes although autofilter is set, the corresponding rows is not hidden in the file.
    ///  Now only works for SpreadSheetML file.
    ///</remarks>
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    ///<summary>
    ///  Gets and sets individual font configs.
    ///  Only works for the <see cref="T:Aspose.Cells.Workbook" />
    ///  which uses this <see cref="T:Aspose.Cells.LoadOptions" />
    ///  to load.&gt;
    ///</summary>
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAbstractTextLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{09C879EC-B5D4-5501-9008-64A602E398B5}']
  end;

  ///<summary>
  ///  Common options for loading text values
  ///</summary>
  [DNTypeName('Aspose.Cells.AbstractTextLoadOptions')]
  DNAbstractTextLoadOptions = interface(DNLoadOptions)
  ['{53303D65-7FC2-324C-AE45-87F4502C472F}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_LoadStyleStrategy: DNTxtLoadStyleStrategy;
    procedure set_LoadStyleStrategy(value: DNTxtLoadStyleStrategy);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_ConvertDateTimeData: Boolean;
    procedure set_ConvertDateTimeData(value: Boolean);
    function get_KeepPrecision: Boolean;
    procedure set_KeepPrecision(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    ///<summary>
    ///  Sets the default print paper size from default printer's setting.
    ///</summary>
    ///  <param name="type">The default paper size.</param>
    ///<remarks>
    ///  If there is no setting about paper size,MS Excel will use default printer's setting.
    ///</remarks>
    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the default encoding. Only applies for csv file.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Indicates the strategy to apply style for parsed values when converting string value to number or datetime.
    ///</summary>
    property LoadStyleStrategy: DNTxtLoadStyleStrategy read get_LoadStyleStrategy write set_LoadStyleStrategy;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in text file is converted to numeric data.
    ///</summary>
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in text file is converted to date data.
    ///</summary>
    property ConvertDateTimeData: Boolean read get_ConvertDateTimeData write set_ConvertDateTimeData;
    ///<summary>
    ///  Indicates whether not parsing a string value if the length is 15.
    ///</summary>
    property KeepPrecision: Boolean read get_KeepPrecision write set_KeepPrecision;
    ///<summary>
    ///  Gets the load format.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    ///<summary>
    ///  Gets and set the password of the workbook.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Indicates whether parsing the formula when reading the file.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm and Xlsm file
    ///  because the formulas in the files are stored with a string formula.
    ///</remarks>
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    ///<summary>
    ///  Indicates whether parsing pivot cached records when loading the file.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm , Xlsm and xlsb file</remarks>
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    ///<summary>
    ///  Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
    ///</summary>
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    ///<summary>
    ///  Gets or sets the system regional settings based on CountryCode at the time the file was loaded.
    ///</summary>
    ///<remarks>If you do not want to use the region  saved in the file,
    ///  please reset it after reading the file.</remarks>
    property Region: DNCountryCode read get_Region write set_Region;
    ///<summary>
    ///  Gets or sets the system culture info at the time the file was loaded.
    ///</summary>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    ///<summary>
    ///  Sets the default standard font name
    ///</summary>
    property StandardFont: string read get_StandardFont write set_StandardFont;
    ///<summary>
    ///  Sets the default standard font size.
    ///</summary>
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    ///<summary>
    ///  Gets and sets the interrupt monitor.
    ///</summary>
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    ///<summary>
    ///  Ignore the data which are not printed if directly printing the file
    ///</summary>
    ///<remarks>
    ///  Only for xlsx file.
    ///</remarks>
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    ///<summary>
    ///  Check whether data is valid in the template file.
    ///</summary>
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    ///<summary>
    ///  Whether check restriction of excel file when user modify cells related objects.
    ///  For example, excel does not allow inputting string value longer than 32K.
    ///  When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
    ///  If this property is false, we will accept your input string value as the cell's value so that later
    ///  you can output the complete string value for other file formats such as CSV.
    ///  However, if you have set such kind of value that is invalid for excel file format,
    ///  you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
    ///</summary>
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    ///<summary>
    ///  Whether keep the unparsed data in memory for the Workbook when it is loaded from template file. Default is true.
    ///</summary>
    ///<remarks>
    ///  For scenarios that user only needs to read some contents from template file and does not need to save the workbook back,
    ///  set this property as false may improve performance, especially when using it together with some kind of LoadFilter,
    ///</remarks>
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    ///<summary>
    ///  The filter to denote how to load data.
    ///</summary>
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    ///<summary>
    ///  The data handler for processing cells data when reading template file.
    ///</summary>
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    ///<summary>
    ///  Gets or sets the memory usage options.
    ///</summary>
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets and sets the auto fitter options
    ///</summary>
    ///<remarks>
    ///  Only for xlsx file now.
    ///</remarks>
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    ///<summary>
    ///  Indicates whether auto filtering the data when loading the files.
    ///</summary>
    ///<remarks>
    ///  Sometimes although autofilter is set, the corresponding rows is not hidden in the file.
    ///  Now only works for SpreadSheetML file.
    ///</remarks>
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    ///<summary>
    ///  Gets and sets individual font configs.
    ///  Only works for the <see cref="T:Aspose.Cells.Workbook" />
    ///  which uses this <see cref="T:Aspose.Cells.LoadOptions" />
    ///  to load.&gt;
    ///</summary>
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNAbstractTextLoadOptions = class(TDNGenericImport<DNAbstractTextLoadOptionsClass, DNAbstractTextLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHtmlLoadOptionsClass = interface(DNAbstractTextLoadOptionsClass)
  ['{483B862C-B354-5EED-A543-F802AD0FB06C}']
  { constructors } 

    ///<summary>
    ///  Creates an options of loading the file.
    ///</summary>
    {class} function init: DNHtmlLoadOptions; overload;
    ///<summary>
    ///  Creates an options of loading the file.
    ///</summary>
    ///  <param name="loadFormat">The loading format.</param>
    {class} function init(loadFormat: DNLoadFormat): DNHtmlLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents options when importing a html file.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlLoadOptions')]
  DNHtmlLoadOptions = interface(DNAbstractTextLoadOptions)
  ['{1FBDC63A-EF26-3F9D-B3EA-B29D328A8AA5}']
  { getters & setters } 

    function get_AttachedFilesDirectory: string;
    procedure set_AttachedFilesDirectory(value: string);
    function get_LoadFormulas: Boolean;
    procedure set_LoadFormulas(value: Boolean);
    function get_SupportDivTag: Boolean;
    procedure set_SupportDivTag(value: Boolean);
    function get_DeleteRedundantSpaces: Boolean;
    procedure set_DeleteRedundantSpaces(value: Boolean);
    function get_AutoFitColsAndRows: Boolean;
    procedure set_AutoFitColsAndRows(value: Boolean);
    function get_ConvertFormulasData: Boolean;
    procedure set_ConvertFormulasData(value: Boolean);
    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_ProgId: string;
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_LoadStyleStrategy: DNTxtLoadStyleStrategy;
    procedure set_LoadStyleStrategy(value: DNTxtLoadStyleStrategy);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_ConvertDateTimeData: Boolean;
    procedure set_ConvertDateTimeData(value: Boolean);
    function get_KeepPrecision: Boolean;
    procedure set_KeepPrecision(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The directory that the attached files will be saved to.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use HtmlLoadOptions.StreamProvider property.
    ///  This property will be removed 12 months later since December 2014.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property AttachedFilesDirectory: string read get_AttachedFilesDirectory write set_AttachedFilesDirectory;
    ///<summary>
    ///  Indicates whether importing formulas if the original html file contains formulas
    ///</summary>
    property LoadFormulas: Boolean read get_LoadFormulas write set_LoadFormulas;
    ///<summary>
    ///  Indicates whether support the layout of &lt;div&gt; tag when the html file contains &lt;div&gt; tags. The default value is false.
    ///</summary>
    property SupportDivTag: Boolean read get_SupportDivTag write set_SupportDivTag;
    ///<summary>
    ///  Indicates whether delete redundant spaces when the text wraps lines using &lt;br&gt;tag.The default value is false.
    ///</summary>
    property DeleteRedundantSpaces: Boolean read get_DeleteRedundantSpaces write set_DeleteRedundantSpaces;
    ///<summary>
    ///  Indicates whether auto-fit columns and rows. The default value is false.
    ///</summary>
    property AutoFitColsAndRows: Boolean read get_AutoFitColsAndRows write set_AutoFitColsAndRows;
    ///<summary>
    ///  if true, convert string to formula when string value starts with character '=',the default value is false.
    ///</summary>
    property ConvertFormulasData: Boolean read get_ConvertFormulasData write set_ConvertFormulasData;
    ///<summary>
    ///  Gets or sets the StreamProviderImportHtmlFile for importing objects.
    ///</summary>
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    ///<summary>
    ///  Gets the program id of creating the file.
    ///  Only for MHT files.
    ///</summary>
    property ProgId: string read get_ProgId;
    ///<summary>
    ///  Gets and sets the default encoding. Only applies for csv file.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Indicates the strategy to apply style for parsed values when converting string value to number or datetime.
    ///</summary>
    property LoadStyleStrategy: DNTxtLoadStyleStrategy read get_LoadStyleStrategy write set_LoadStyleStrategy;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in text file is converted to numeric data.
    ///</summary>
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in text file is converted to date data.
    ///</summary>
    property ConvertDateTimeData: Boolean read get_ConvertDateTimeData write set_ConvertDateTimeData;
    ///<summary>
    ///  Indicates whether not parsing a string value if the length is 15.
    ///</summary>
    property KeepPrecision: Boolean read get_KeepPrecision write set_KeepPrecision;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNHtmlLoadOptions = class(TDNGenericImport<DNHtmlLoadOptionsClass, DNHtmlLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTxtLoadOptionsClass = interface(DNAbstractTextLoadOptionsClass)
  ['{25B647B6-269B-587C-BE03-1AEB6EAEAC0A}']
  { constructors } 

    ///<summary>
    ///  Creates the options for loading text file.
    ///</summary>
    ///<remarks>The default load file type is CSV .</remarks>
    {class} function init: DNTxtLoadOptions; overload;
    ///<summary>
    ///  Creates the options for loading text file.
    ///</summary>
    ///  <param name="loadFormat">The loading format</param>
    {class} function init(loadFormat: DNLoadFormat): DNTxtLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents the options for loading text file.
  ///</summary>
  [DNTypeName('Aspose.Cells.TxtLoadOptions')]
  DNTxtLoadOptions = interface(DNAbstractTextLoadOptions)
  ['{CA1C381B-1D51-3F95-B711-3C557587E69A}']
  { getters & setters } 

    function get_Separator: Char;
    procedure set_Separator(value: Char);
    function get_SeparatorString: string;
    procedure set_SeparatorString(value: string);
    function get_IsMultiEncoded: Boolean;
    procedure set_IsMultiEncoded(value: Boolean);
    function get_PreferredParsers: TArray<DNICustomParser>;
    procedure set_PreferredParsers(value: TArray<DNICustomParser>);
    function get_HasFormula: Boolean;
    procedure set_HasFormula(value: Boolean);
    function get_HasTextQualifier: Boolean;
    procedure set_HasTextQualifier(value: Boolean);
    function get_TextQualifier: Char;
    procedure set_TextQualifier(value: Char);
    function get_TreatConsecutiveDelimitersAsOne: Boolean;
    procedure set_TreatConsecutiveDelimitersAsOne(value: Boolean);
    function get_TreatQuotePrefixAsValue: Boolean;
    procedure set_TreatQuotePrefixAsValue(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_LoadStyleStrategy: DNTxtLoadStyleStrategy;
    procedure set_LoadStyleStrategy(value: DNTxtLoadStyleStrategy);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_ConvertDateTimeData: Boolean;
    procedure set_ConvertDateTimeData(value: Boolean);
    function get_KeepPrecision: Boolean;
    procedure set_KeepPrecision(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets character separator of text file.
    ///</summary>
    property Separator: Char read get_Separator write set_Separator;
    ///<summary>
    ///  Gets and sets the a string value as separator.
    ///</summary>
    property SeparatorString: string read get_SeparatorString write set_SeparatorString;
    ///<summary>
    ///  True means that the file contains several encoding.
    ///</summary>
    property IsMultiEncoded: Boolean read get_IsMultiEncoded write set_IsMultiEncoded;
    ///<summary>
    ///  Gets and sets preferred value parsers for loading text file.
    ///</summary>
    ///<remarks>
    ///  parsers[0] is the parser will be used for the first column in text template file,
    ///  parsers[1] is the parser will be used for the second column, ...etc.
    ///  The last one(parsers[parsers.length-1]) will be used for all other columns start from parsers.length-1.
    ///  If one item is null, the corresponding column will be parsed by the default parser of Aspose.Cells.
    ///</remarks>
    property PreferredParsers: TArray<DNICustomParser> read get_PreferredParsers write set_PreferredParsers;
    ///<summary>
    ///  Indicates whether the text is formula if it starts with "=".
    ///</summary>
    property HasFormula: Boolean read get_HasFormula write set_HasFormula;
    ///<summary>
    ///  Whether there is text qualifier for cell value. Default is true.
    ///</summary>
    property HasTextQualifier: Boolean read get_HasTextQualifier write set_HasTextQualifier;
    ///<summary>
    ///  Specifies the text qualifier for cell values. Default qualifier is '"'.
    ///</summary>
    ///<remarks>When setting this property, <see cref="P:Aspose.Cells.TxtLoadOptions.HasTextQualifier" />
    ///  will become true automatically.</remarks>
    property TextQualifier: Char read get_TextQualifier write set_TextQualifier;
    ///<summary>
    ///  Whether consecutive delimiters should be treated as one.
    ///</summary>
    property TreatConsecutiveDelimitersAsOne: Boolean read get_TreatConsecutiveDelimitersAsOne write set_TreatConsecutiveDelimitersAsOne;
    ///<summary>
    ///  Indicates whether the leading single quote sign should be taken as part of the value of one cell.
    ///  Default is true. If it is false, the leading single quote will be removed from corresponding cell's value
    ///  and <see cref="P:Aspose.Cells.Style.QuotePrefix" />
    ///  will be set as true for the cell.
    ///</summary>
    property TreatQuotePrefixAsValue: Boolean read get_TreatQuotePrefixAsValue write set_TreatQuotePrefixAsValue;
    ///<summary>
    ///  Gets and sets the default encoding. Only applies for csv file.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Indicates the strategy to apply style for parsed values when converting string value to number or datetime.
    ///</summary>
    property LoadStyleStrategy: DNTxtLoadStyleStrategy read get_LoadStyleStrategy write set_LoadStyleStrategy;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in text file is converted to numeric data.
    ///</summary>
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in text file is converted to date data.
    ///</summary>
    property ConvertDateTimeData: Boolean read get_ConvertDateTimeData write set_ConvertDateTimeData;
    ///<summary>
    ///  Indicates whether not parsing a string value if the length is 15.
    ///</summary>
    property KeepPrecision: Boolean read get_KeepPrecision write set_KeepPrecision;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNTxtLoadOptions = class(TDNGenericImport<DNTxtLoadOptionsClass, DNTxtLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOdsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{81C44E3B-E7A0-59E6-A242-624A08BD1584}']
  { constructors } 

    ///<summary>
    ///  Represents the options of loading ods file.
    ///</summary>
    {class} function init: DNOdsLoadOptions; overload;
    ///<summary>
    ///  Represents the options of loading ods file.
    ///</summary>
    ///  <param name="type">The load format type.</param>
    {class} function init(&type: DNLoadFormat): DNOdsLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents the options of loading ods file.
  ///</summary>
  [DNTypeName('Aspose.Cells.OdsLoadOptions')]
  DNOdsLoadOptions = interface(DNLoadOptions)
  ['{EC8372C7-2A83-3EC1-A5F9-8F8A75AF19BC}']
  { getters & setters } 

    function get_ApplyExcelDefaultStyleToHyperlink: Boolean;
    procedure set_ApplyExcelDefaultStyleToHyperlink(value: Boolean);
    function get_RefreshPivotTables: Boolean;
    procedure set_RefreshPivotTables(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    ///<summary>
    ///  Sets the default print paper size from default printer's setting.
    ///</summary>
    ///  <param name="type">The default paper size.</param>
    ///<remarks>
    ///  If there is no setting about paper size,MS Excel will use default printer's setting.
    ///</remarks>
    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether applying the default style of the Excel to hyperlink.
    ///</summary>
    property ApplyExcelDefaultStyleToHyperlink: Boolean read get_ApplyExcelDefaultStyleToHyperlink write set_ApplyExcelDefaultStyleToHyperlink;
    ///<summary>
    ///  Indicates whether refresh pivot tables when loading file.
    ///</summary>
    property RefreshPivotTables: Boolean read get_RefreshPivotTables write set_RefreshPivotTables;
    ///<summary>
    ///  Gets the load format.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    ///<summary>
    ///  Gets and set the password of the workbook.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Indicates whether parsing the formula when reading the file.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm and Xlsm file
    ///  because the formulas in the files are stored with a string formula.
    ///</remarks>
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    ///<summary>
    ///  Indicates whether parsing pivot cached records when loading the file.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm , Xlsm and xlsb file</remarks>
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    ///<summary>
    ///  Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
    ///</summary>
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    ///<summary>
    ///  Gets or sets the system regional settings based on CountryCode at the time the file was loaded.
    ///</summary>
    ///<remarks>If you do not want to use the region  saved in the file,
    ///  please reset it after reading the file.</remarks>
    property Region: DNCountryCode read get_Region write set_Region;
    ///<summary>
    ///  Gets or sets the system culture info at the time the file was loaded.
    ///</summary>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    ///<summary>
    ///  Sets the default standard font name
    ///</summary>
    property StandardFont: string read get_StandardFont write set_StandardFont;
    ///<summary>
    ///  Sets the default standard font size.
    ///</summary>
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    ///<summary>
    ///  Gets and sets the interrupt monitor.
    ///</summary>
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    ///<summary>
    ///  Ignore the data which are not printed if directly printing the file
    ///</summary>
    ///<remarks>
    ///  Only for xlsx file.
    ///</remarks>
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    ///<summary>
    ///  Check whether data is valid in the template file.
    ///</summary>
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    ///<summary>
    ///  Whether check restriction of excel file when user modify cells related objects.
    ///  For example, excel does not allow inputting string value longer than 32K.
    ///  When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
    ///  If this property is false, we will accept your input string value as the cell's value so that later
    ///  you can output the complete string value for other file formats such as CSV.
    ///  However, if you have set such kind of value that is invalid for excel file format,
    ///  you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
    ///</summary>
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    ///<summary>
    ///  Whether keep the unparsed data in memory for the Workbook when it is loaded from template file. Default is true.
    ///</summary>
    ///<remarks>
    ///  For scenarios that user only needs to read some contents from template file and does not need to save the workbook back,
    ///  set this property as false may improve performance, especially when using it together with some kind of LoadFilter,
    ///</remarks>
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    ///<summary>
    ///  The filter to denote how to load data.
    ///</summary>
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    ///<summary>
    ///  The data handler for processing cells data when reading template file.
    ///</summary>
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    ///<summary>
    ///  Gets or sets the memory usage options.
    ///</summary>
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets and sets the auto fitter options
    ///</summary>
    ///<remarks>
    ///  Only for xlsx file now.
    ///</remarks>
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    ///<summary>
    ///  Indicates whether auto filtering the data when loading the files.
    ///</summary>
    ///<remarks>
    ///  Sometimes although autofilter is set, the corresponding rows is not hidden in the file.
    ///  Now only works for SpreadSheetML file.
    ///</remarks>
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    ///<summary>
    ///  Gets and sets individual font configs.
    ///  Only works for the <see cref="T:Aspose.Cells.Workbook" />
    ///  which uses this <see cref="T:Aspose.Cells.LoadOptions" />
    ///  to load.&gt;
    ///</summary>
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNOdsLoadOptions = class(TDNGenericImport<DNOdsLoadOptionsClass, DNOdsLoadOptions>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNCustomXmlPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61EF65C0-4F0A-55C4-A61A-602106448424}']
  end;

  ///<summary>
  ///  Represents a Custom XML Data Storage Part (custom XML data within a package).
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.CustomXmlPart')]
  DNCustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{EDC0FFA8-9C39-340A-9331-7498F0EED6D8}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);
    function get_SchemaData: TArray<Byte>;
    procedure set_SchemaData(value: TArray<Byte>);
    function get_ID: string;
    procedure set_ID(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the XML content of this Custom XML Data Storage Part.
    ///</summary>
    property Data: TArray<Byte> read get_Data write set_Data;
    ///<summary>
    ///  Gets or sets the XML content of this Custom XML Schema Data Storage Part.
    ///</summary>
    property SchemaData: TArray<Byte> read get_SchemaData write set_SchemaData;
    ///<summary>
    ///  Gets and sets the id of the custom xml part.
    ///</summary>
    property ID: string read get_ID write set_ID;
  end;

  TDNCustomXmlPart = class(TDNGenericImport<DNCustomXmlPartClass, DNCustomXmlPart>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagClass = interface(DDN.mscorlib.DNObjectClass)
  ['{086612CB-06BA-537C-BE8F-5754A2BF4524}']
  end;

  ///<summary>
  ///  Represents a smart tag.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTag')]
  DNSmartTag = interface(DDN.mscorlib.DNObject)
  ['{AA66B7CD-9051-39CD-B00D-1C2358D331FA}']
  { getters & setters } 

    function get_Deleted: Boolean;
    procedure set_Deleted(value: Boolean);
    function get_Properties: DNSmartTagPropertyCollection;
    procedure set_Properties(value: DNSmartTagPropertyCollection);
    function get_Uri: string;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  Change the name and  the namespace URI of the smart tag.
    ///</summary>
    ///  <param name="uri">The namespace URI of the smart tag.</param>
    ///  <param name="name">The name of the smart tag.</param>
    procedure SetLink(uri: string; name: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the smart tag is deleted.
    ///</summary>
    property Deleted: Boolean read get_Deleted write set_Deleted;
    ///<summary>
    ///  Gets and set the properties of the smart tag.
    ///</summary>
    property Properties: DNSmartTagPropertyCollection read get_Properties write set_Properties;
    ///<summary>
    ///  Gets the namespace URI of the smart tag.
    ///</summary>
    property Uri: string read get_Uri;
    ///<summary>
    ///  Gets the name of the smart tag.
    ///</summary>
    property Name: string read get_Name;
  end;

  TDNSmartTag = class(TDNGenericImport<DNSmartTagClass, DNSmartTag>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73471701-9661-526F-82B5-D77035030BD0}']
  { constructors } 

    {class} function init: DNSmartTagOptions;

  end;

  ///<summary>
  ///  Represents the options of the smart tag.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTagOptions')]
  DNSmartTagOptions = interface(DDN.mscorlib.DNObject)
  ['{14F7ED66-A98A-3A50-B1C3-D0C3F0E14B7A}']
  { getters & setters } 

    function get_EmbedSmartTags: Boolean;
    procedure set_EmbedSmartTags(value: Boolean);
    function get_ShowType: DNSmartTagShowType;
    procedure set_ShowType(value: DNSmartTagShowType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether saving smart tags with the workbook.
    ///</summary>
    property EmbedSmartTags: Boolean read get_EmbedSmartTags write set_EmbedSmartTags;
    ///<summary>
    ///  Represents the show type of smart tag.
    ///</summary>
    property ShowType: DNSmartTagShowType read get_ShowType write set_ShowType;
  end;

  TDNSmartTagOptions = class(TDNGenericImport<DNSmartTagOptionsClass, DNSmartTagOptions>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FC24BD6-3F9A-52A8-AE73-9FEE2D645591}']
  end;

  ///<summary>
  ///  Represents the property of the cell smart tag.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTagProperty')]
  DNSmartTagProperty = interface(DDN.mscorlib.DNObject)
  ['{97C73A52-7F98-3540-B297-E749C57C1744}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of the property.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets the value of the property.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNSmartTagProperty = class(TDNGenericImport<DNSmartTagPropertyClass, DNSmartTagProperty>) end;

  //-------------namespace: Aspose.Cells.Metadata----------------
  DNMetadataOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6ED63B31-614C-5395-A07C-FBBBD3778B1D}']
  { constructors } 

    ///<summary>
    ///  Creates an options of loading the metadata.
    ///</summary>
    ///  <param name="metadataType">The type of metadata.</param>
    {class} function init(metadataType: DNMetadataType): DNMetadataOptions;

  end;

  ///<summary>
  ///  Represents the options of loading metadata of the file.
  ///</summary>
  [DNTypeName('Aspose.Cells.Metadata.MetadataOptions')]
  DNMetadataOptions = interface(DDN.mscorlib.DNObject)
  ['{06B99F9F-AFD5-304D-9AD0-E374B2C621F4}']
  { getters & setters } 

    function get_MetadataType: DNMetadataType;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_KeyLength: Int32;
    procedure set_KeyLength(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the type of the metadata which is loading.
    ///</summary>
    property MetadataType: DNMetadataType read get_MetadataType;
    ///<summary>
    ///  Represents Workbook file encryption password.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  The key length.
    ///</summary>
    property KeyLength: Int32 read get_KeyLength write set_KeyLength;
  end;

  TDNMetadataOptions = class(TDNGenericImport<DNMetadataOptionsClass, DNMetadataOptions>) end;

  //-------------namespace: Aspose.Cells.Metadata----------------
  DNWorkbookMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6A47462F-66E8-50D6-8D36-3BB668E6A9F1}']
  { constructors } 

    ///<summary>
    ///  Create the meta data object.
    ///</summary>
    ///  <param name="fileName"></param>
    ///  <param name="options"></param>
    {class} function init(fileName: string; options: DNMetadataOptions): DNWorkbookMetadata; overload;
    ///<summary>
    ///  Create the meta data object.
    ///</summary>
    ///  <param name="stream"></param>
    ///  <param name="options"></param>
    {class} function init(stream: DDN.mscorlib.DNStream; options: DNMetadataOptions): DNWorkbookMetadata; overload;

  end;

  ///<summary>
  ///  Represents the meta data.
  ///</summary>
  ///<example>
  ///  The following example creates a WorkbookMetadata.
  ///<code>
  ///  [C#]
  ///  MetadataOptions options = new MetadataOptions(MetadataType.DocumentProperties);
  ///  WorkbookMetadata meta = new WorkbookMetadata(path + "book1.xlsx", options);
  ///  meta.CustomDocumentProperties.Add("test", "test");
  ///  meta.Save(path + "book2.xlsx");
  ///</code></example>
  [DNTypeName('Aspose.Cells.Metadata.WorkbookMetadata')]
  DNWorkbookMetadata = interface(DDN.mscorlib.DNObject)
  ['{2C520D63-B9C9-3562-A65B-2AFDAD522510}']
  { getters & setters } 

    function get_Options: DNMetadataOptions;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection;
    function get_CustomDocumentProperties: DNCustomDocumentPropertyCollection;

  { methods } 

    ///<summary>
    ///  Save the modified metadata to the file.
    ///</summary>
    ///  <param name="fileName">The file name.</param>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Save the modified metadata to the stream.
    ///</summary>
    ///  <param name="stream">The stream.</param>
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the options of the metadata.
    ///</summary>
    property Options: DNMetadataOptions read get_Options;
    ///<summary>
    ///  Returns a DocumentProperties collection that represents all the  built-in document properties of the spreadsheet.
    ///</summary>
    property BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection read get_BuiltInDocumentProperties;
    ///<summary>
    ///  Returns a DocumentProperties collection that represents all the custom document properties of the spreadsheet.
    ///</summary>
    property CustomDocumentProperties: DNCustomDocumentPropertyCollection read get_CustomDocumentProperties;
  end;

  TDNWorkbookMetadata = class(TDNGenericImport<DNWorkbookMetadataClass, DNWorkbookMetadata>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99F8C01E-5B95-5A13-BB86-C5BD0A8F7D7B}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init: DNMetered;

  { static methods } 

    ///<summary>
    ///  Gets consumption file size
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  Gets consumption credit
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  ///<summary>
  ///  Provides methods to set metered key.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to set metered public and private key
  ///<code>
  ///  [C#]
  ///  Metered matered = new Metered();
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey");
  ///  [Visual Basic]
  ///  Dim matered As Metered = New Metered
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{8A9E6A10-24A2-3480-AD82-D083CFA18C6E}']
  { methods } 

    ///<summary>
    ///  Sets metered public and private key.
    ///  If you purchase metered license, when start application, this API should be called, normally, this is enough. However, if always fail to upload consumption data and exceed 24 hours, the license will be set to evaluation status, to avoid such case, you should regularly check the license status, if it is evaluation status, call this API again.
    ///</summary>
    ///  <param name="publicKey">public key</param>
    ///  <param name="privateKey">private key</param>
    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Cells----------------
  DNNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24CC78A9-0D15-53A9-92DF-EE2E1D27642A}']
  end;

  ///<summary>
  ///  Represents a defined name for a range of cells.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  //Accessing the first worksheet in the Excel file
  ///  Worksheet worksheet = workbook.Worksheets[0];
  ///  //Creating a named range
  ///  Range range = worksheet.Cells.CreateRange("B4", "G14");
  ///  //Setting the name of the named range
  ///  range.Name = "TestRange";
  ///  //Saving the modified Excel file in default (that is Excel 2000) format
  ///  workbook.Save("C:\\output.xls");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  'Accessing the first worksheet in the Excel file
  ///  Dim worksheet As Worksheet = workbook.Worksheets(0)
  ///  'Creating a named range
  ///  Dim range As Range = worksheet.Cells.CreateRange("B4", "G14")
  ///  'Setting the name of the named range
  ///  range.Name = "TestRange"
  ///  'Saving the modified Excel file in default (that is Excel 2000) format
  ///  workbook.Save("C:\\output.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Name')]
  DNName = interface(DDN.mscorlib.DNObject)
  ['{37A9A4D6-B121-3CE5-8E11-C334F78A69C2}']
  { getters & setters } 

    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_FullText: string;
    function get_RefersTo: string;
    procedure set_RefersTo(value: string);
    function get_R1C1RefersTo: string;
    procedure set_R1C1RefersTo(value: string);
    function get_IsReferred: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_SheetIndex: Int32;
    procedure set_SheetIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Get the reference of this Name.
    ///</summary>
    ///  <param name="isR1C1">Whether the reference needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the reference needs to be formatted by locale.</param>
    function GetRefersTo(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Set the reference of this Name.
    ///</summary>
    ///  <param name="refersTo">The reference.</param>
    ///  <param name="isR1C1">Whether the reference is R1C1 format.</param>
    ///  <param name="isLocal">Whether the reference is locale formatted.</param>
    procedure SetRefersTo(refersTo: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Returns a string represents the current Range object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    ///<summary>
    ///  Gets all ranges referred by this name.
    ///</summary>
    ///<returns>All ranges.</returns>
    function GetRanges: TArray<DNRange>; overload;
    ///<summary>
    ///  Gets all ranges referred by this name.
    ///</summary>
    ///  <param name="recalculate">whether recalculate it if this name has been calculated before this invocation.</param>
    ///<returns>All ranges.</returns>
    function GetRanges(recalculate: Boolean): TArray<DNRange>; overload;
    ///<summary>
    ///  Gets all references referred by this name.
    ///</summary>
    ///  <param name="recalculate">whether recalculate it if this name has been calculated before this invocation.</param>
    ///<returns>All ranges.</returns>
    function GetReferredAreas(recalculate: Boolean): TArray<DNReferredArea>;
    ///<summary>
    ///  Gets the range if this name refers to a range.
    ///</summary>
    ///<returns>The range.</returns>
    function GetRange: DNRange; overload;
    ///<summary>
    ///  Gets the range if this name refers to a range
    ///</summary>
    ///  <param name="recalculate">whether recalculate it if this name has been calculated before this invocation.</param>
    ///<returns>The range.</returns>
    function GetRange(recalculate: Boolean): DNRange; overload;
    ///<summary>
    ///  Gets the range if this name refers to a range.
    ///  If the reference of this name is not absolute, the range may be different for different cell.
    ///</summary>
    ///  <param name="sheetIndex">The according sheet index.</param>
    ///  <param name="row">The according row index.</param>
    ///  <param name="column">The according column index</param>
    ///<returns>The range.</returns>
    function GetRange(sheetIndex: Int32; row: Int32; column: Int32): DNRange; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets and sets the comment of the name.
    ///  Only applies for Excel 2007.
    ///</summary>
    property Comment: string read get_Comment write set_Comment;
    ///<summary>
    ///  Gets the name text of the object.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the name  full text of the object with the scope setting.
    ///</summary>
    property FullText: string read get_FullText;
    ///<summary>
    ///  Returns or sets the formula that the name is defined to refer to, beginning with an equal sign.
    ///</summary>
    property RefersTo: string read get_RefersTo write set_RefersTo;
    ///<summary>
    ///  Gets or sets a R1C1 reference of the <see cref="T:Aspose.Cells.Name" />
    ///  .
    ///</summary>
    property R1C1RefersTo: string read get_R1C1RefersTo write set_R1C1RefersTo;
    ///<summary>
    ///  Indicates whether this name is referred by other formulas.
    ///</summary>
    property IsReferred: Boolean read get_IsReferred;
    ///<summary>
    ///  Indicates whether the name is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates this name belongs to Workbook or Worksheet.
    ///  0 = Global name, otherwise index to sheet (one-based)
    ///</summary>
    property SheetIndex: Int32 read get_SheetIndex write set_SheetIndex;
  end;

  TDNName = class(TDNGenericImport<DNNameClass, DNName>) end;

  //-------------namespace: Aspose.Cells----------------
  DNNegativeBarFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{345DAD0E-41B7-5688-958D-C650210FB427}']
  end;

  ///<summary>
  ///  Represents the color settings of the data bars for negative values that are defined by a data bar conditional formatting rule.
  ///</summary>
  [DNTypeName('Aspose.Cells.NegativeBarFormat')]
  DNNegativeBarFormat = interface(DDN.mscorlib.DNObject)
  ['{B8AB8660-EF11-3D5D-B4D7-7CADD88E8791}']
  { getters & setters } 

    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColorType: DNDataBarNegativeColorType;
    procedure set_BorderColorType(value: DNDataBarNegativeColorType);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ColorType: DNDataBarNegativeColorType;
    procedure set_ColorType(value: DNDataBarNegativeColorType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a FormatColor object that you can use to specify the border color for negative data bars.
    ///</summary>
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    ///<summary>
    ///  Gets whether to use the same border color as positive data bars.
    ///</summary>
    property BorderColorType: DNDataBarNegativeColorType read get_BorderColorType write set_BorderColorType;
    ///<summary>
    ///  Gets or sets a FormatColor object that you can use to specify the fill color for negative data bars.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets whether to use the same fill color as positive data bars.
    ///</summary>
    property ColorType: DNDataBarNegativeColorType read get_ColorType write set_ColorType;
  end;

  TDNNegativeBarFormat = class(TDNGenericImport<DNNegativeBarFormatClass, DNNegativeBarFormat>) end;

  //-------------namespace: Aspose.Cells.Ods----------------
  DNOdsCellFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CF13334-E4C3-5162-8F37-CCB083BA4610}']
  end;

  ///<summary>
  ///  Represents the cell field of ods.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsCellField')]
  DNOdsCellField = interface(DDN.mscorlib.DNObject)
  ['{E750A888-4860-3E60-9ABE-99A198A71CFC}']
  { getters & setters } 

    function get_CustomFormat: string;
    procedure set_CustomFormat(value: string);
    function get_FieldType: DNOdsCellFieldType;
    procedure set_FieldType(value: DNOdsCellFieldType);
    function get_Row: Int32;
    procedure set_Row(value: Int32);
    function get_Column: Int32;
    procedure set_Column(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the custom format of the field's value.
    ///</summary>
    property CustomFormat: string read get_CustomFormat write set_CustomFormat;
    ///<summary>
    ///  Gets and sets the type of the field.
    ///</summary>
    property FieldType: DNOdsCellFieldType read get_FieldType write set_FieldType;
    ///<summary>
    ///  Get and sets the row index of the cell.
    ///</summary>
    property Row: Int32 read get_Row write set_Row;
    ///<summary>
    ///  Get and sets the column index of the cell.
    ///</summary>
    property Column: Int32 read get_Column write set_Column;
  end;

  TDNOdsCellField = class(TDNGenericImport<DNOdsCellFieldClass, DNOdsCellField>) end;

  //-------------namespace: Aspose.Cells.Ods----------------
  DNOdsPageBackgroundClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7DB4C07A-7E64-50BA-B1DA-ECF79C96AC23}']
  { constructors } 

    {class} function init: DNOdsPageBackground;

  end;

  ///<summary>
  ///  Represents the page background of ods.
  ///</summary>
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackground')]
  DNOdsPageBackground = interface(DDN.mscorlib.DNObject)
  ['{752380CE-9C92-3262-AF5A-F324E41C9D34}']
  { getters & setters } 

    function get_Type: DNOdsPageBackgroundType;
    procedure set_Type(value: DNOdsPageBackgroundType);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_GraphicType: DNOdsPageBackgroundGraphicType;
    procedure set_GraphicType(value: DNOdsPageBackgroundGraphicType);
    function get_GraphicPositionType: DNOdsPageBackgroundGraphicPositionType;
    procedure set_GraphicPositionType(value: DNOdsPageBackgroundGraphicPositionType);
    function get_IsLink: Boolean;
    function get_LinkedGraphic: string;
    procedure set_LinkedGraphic(value: string);
    function get_GraphicData: TArray<Byte>;
    procedure set_GraphicData(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the page background type.
    ///</summary>
    property &Type: DNOdsPageBackgroundType read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets the color of background.
    ///</summary>
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets and sets the page background graphic type.
    ///</summary>
    property GraphicType: DNOdsPageBackgroundGraphicType read get_GraphicType write set_GraphicType;
    ///<summary>
    ///  Gets and set the background graphic position.
    ///</summary>
    property GraphicPositionType: DNOdsPageBackgroundGraphicPositionType read get_GraphicPositionType write set_GraphicPositionType;
    ///<summary>
    ///  Indicates whether it's a linked graphic.
    ///</summary>
    property IsLink: Boolean read get_IsLink;
    ///<summary>
    ///  Gets and sets the linked graphic path.
    ///</summary>
    property LinkedGraphic: string read get_LinkedGraphic write set_LinkedGraphic;
    ///<summary>
    ///  Gets and sets the graphic data.
    ///</summary>
    property GraphicData: TArray<Byte> read get_GraphicData write set_GraphicData;
  end;

  TDNOdsPageBackground = class(TDNGenericImport<DNOdsPageBackgroundClass, DNOdsPageBackground>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOutlineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65E723C1-8B44-5877-B0DF-31FF3CB40B57}']
  end;

  ///<summary>
  ///  Represents an outline on a worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Outline')]
  DNOutline = interface(DDN.mscorlib.DNObject)
  ['{47D8DC63-11EC-36D5-B8BB-D679CBA2A5BB}']
  { getters & setters } 

    function get_SummaryRowBelow: Boolean;
    procedure set_SummaryRowBelow(value: Boolean);
    function get_SummaryColumnRight: Boolean;
    procedure set_SummaryColumnRight(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if the summary row will be positioned below the detail rows in the outline.
    ///</summary>
    property SummaryRowBelow: Boolean read get_SummaryRowBelow write set_SummaryRowBelow;
    ///<summary>
    ///  Indicates if the summary column will be positioned to the right of the detail columns in the outline.
    ///</summary>
    property SummaryColumnRight: Boolean read get_SummaryColumnRight write set_SummaryColumnRight;
  end;

  TDNOutline = class(TDNGenericImport<DNOutlineClass, DNOutline>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPageSetupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F89FC30-9A0C-5D13-B513-D856297960D1}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents the page setup description.
  ///  The PageSetup object contains all page setup options.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  sheet.PageSetup.PrintArea = "D1:K13";
  ///  sheet.PageSetup.PrintTitleRows = "$5:$7";
  ///  sheet.PageSetup.PrintTitleColumns = "$A:$B";
  ///  [Visual Basic]
  ///  sheet.PageSetup.PrintArea = "D1:K13"
  ///  sheet.PageSetup.PrintTitleRows = "$5:$7"
  ///  sheet.PageSetup.PrintTitleColumns = "$A:$B"
  ///</code></example>
  [DNTypeName('Aspose.Cells.PageSetup')]
  DNPageSetup = interface(DDN.mscorlib.DNObject)
  ['{9C95574E-4D56-3F41-B549-353A4CB34096}']
  { getters & setters } 

    function get_ODSPageBackground: DNOdsPageBackground;
    function get_PrintArea: string;
    procedure set_PrintArea(value: string);
    function get_PrintTitleColumns: string;
    procedure set_PrintTitleColumns(value: string);
    function get_PrintTitleRows: string;
    procedure set_PrintTitleRows(value: string);
    function get_BlackAndWhite: Boolean;
    procedure set_BlackAndWhite(value: Boolean);
    function get_CenterHorizontally: Boolean;
    procedure set_CenterHorizontally(value: Boolean);
    function get_CenterVertically: Boolean;
    procedure set_CenterVertically(value: Boolean);
    function get_PrintDraft: Boolean;
    procedure set_PrintDraft(value: Boolean);
    function get_FooterMargin: Double;
    procedure set_FooterMargin(value: Double);
    function get_FooterMarginInch: Double;
    procedure set_FooterMarginInch(value: Double);
    function get_HeaderMargin: Double;
    procedure set_HeaderMargin(value: Double);
    function get_HeaderMarginInch: Double;
    procedure set_HeaderMarginInch(value: Double);
    function get_PrinterSettings: TArray<Byte>;
    procedure set_PrinterSettings(value: TArray<Byte>);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_LeftMarginInch: Double;
    procedure set_LeftMarginInch(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_RightMarginInch: Double;
    procedure set_RightMarginInch(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_TopMarginInch: Double;
    procedure set_TopMarginInch(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_BottomMarginInch: Double;
    procedure set_BottomMarginInch(value: Double);
    function get_FirstPageNumber: Int32;
    procedure set_FirstPageNumber(value: Int32);
    function get_FitToPagesTall: Int32;
    procedure set_FitToPagesTall(value: Int32);
    function get_FitToPagesWide: Int32;
    procedure set_FitToPagesWide(value: Int32);
    function get_IsPercentScale: Boolean;
    procedure set_IsPercentScale(value: Boolean);
    function get_Order: DNPrintOrderType;
    procedure set_Order(value: DNPrintOrderType);
    function get_IsAutomaticPaperSize: Boolean;
    function get_PaperSize: DNPaperSizeType;
    procedure set_PaperSize(value: DNPaperSizeType);
    function get_PaperWidth: Double;
    function get_PaperHeight: Double;
    function get_Orientation: DNPageOrientationType;
    procedure set_Orientation(value: DNPageOrientationType);
    function get_PrintComments: DNPrintCommentsType;
    procedure set_PrintComments(value: DNPrintCommentsType);
    function get_PrintErrors: DNPrintErrorsType;
    procedure set_PrintErrors(value: DNPrintErrorsType);
    function get_PrintHeadings: Boolean;
    procedure set_PrintHeadings(value: Boolean);
    function get_PrintGridlines: Boolean;
    procedure set_PrintGridlines(value: Boolean);
    function get_Zoom: Int32;
    procedure set_Zoom(value: Int32);
    function get_IsAutoFirstPageNumber: Boolean;
    procedure set_IsAutoFirstPageNumber(value: Boolean);
    function get_PrintQuality: Int32;
    procedure set_PrintQuality(value: Int32);
    function get_PrintCopies: Int32;
    procedure set_PrintCopies(value: Int32);
    function get_IsHFDiffOddEven: Boolean;
    procedure set_IsHFDiffOddEven(value: Boolean);
    function get_IsHFDiffFirst: Boolean;
    procedure set_IsHFDiffFirst(value: Boolean);
    function get_IsHFScaleWithDoc: Boolean;
    procedure set_IsHFScaleWithDoc(value: Boolean);
    function get_IsHFAlignMargins: Boolean;
    procedure set_IsHFAlignMargins(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets an image in the header of a worksheet.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="headerPicture">Image data.</param>
    ///<returns>Returns <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object.</returns>
    function SetHeaderPicture(section: Int32; headerPicture: TArray<Byte>): DNPicture;
    ///<summary>
    ///  Sets an image in the footer of a worksheet.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="footerPicture">Image data.</param>
    ///<returns>Returns <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object.</returns>
    function SetFooterPicture(section: Int32; footerPicture: TArray<Byte>): DNPicture;
    ///<summary>
    ///  Sets an image in the header/footer of a worksheet.
    ///</summary>
    ///  <param name="isFirst">Indicates whether setting the picture of first page header/footer. </param>
    ///  <param name="isEven">Indicates whether setting the picture of even page header/footer.</param>
    ///  <param name="isHeader">Indicates whether setting the picture of header/footer.</param>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="imageData">Image data.</param>
    ///<returns>Returns <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object.</returns>
    function SetPicture(isFirst: Boolean; isEven: Boolean; isHeader: Boolean; section: Int32; imageData: TArray<Byte>): DNPicture;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object of the header / footer.
    ///</summary>
    ///  <param name="isHeader">Indicates whether it is in the header or footer.</param>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///<returns>Returns <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object.
    ///  Returns null if there is no picture.</returns>
    function GetPicture(isHeader: Boolean; section: Int32): DNPicture; overload;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object of the header / footer.
    ///</summary>
    ///  <param name="isFirst">Indicates whether getting the picture of first page header/footer. </param>
    ///  <param name="isEven">Indicates whether getting the picture of even page header/footer.</param>
    ///  <param name="isHeader">Indicates whether getting the picture of header/footer.</param>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///<returns>Returns <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  object.</returns>
    function GetPicture(isFirst: Boolean; isEven: Boolean; isHeader: Boolean; section: Int32): DNPicture; overload;
    ///<summary>
    ///  Copies the setting of the page setup.
    ///</summary>
    ///  <param name="source">The source.</param>
    ///  <param name="copyOptions">The copy options.</param>
    procedure Copy(source: DNPageSetup; copyOptions: DNCopyOptions);
    ///<summary>
    ///  Sets the number of pages the worksheet will be scaled to when it's printed.
    ///</summary>
    ///  <param name="wide">Pages wide.</param>
    ///  <param name="tall">Pages tall.</param>
    procedure SetFitToPages(wide: Int32; tall: Int32);
    ///<summary>
    ///  Sets the custom paper size, in unit of inches.
    ///</summary>
    ///  <param name="width">The width of the paper. </param>
    ///  <param name="height">The height of the paper.</param>
    procedure CustomPaperSize(width: Double; height: Double);
    ///<summary>
    ///  Clears header and footer setting.
    ///</summary>
    procedure ClearHeaderFooter;
    ///<summary>
    ///  Gets a script formatting the header of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    function GetHeader(section: Int32): string;
    ///<summary>
    ///  Gets all commands of header or footer.
    ///</summary>
    ///  <param name="headerFooterScript">The header/footer script</param>
    ///<returns>Returns all commands of header or footer.</returns>
    function GetCommands(headerFooterScript: string): TArray<DNHeaderFooterCommand>;
    ///<summary>
    ///  Gets a script formatting the footer of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    function GetFooter(section: Int32): string;
    ///<summary>
    ///  Sets a script formatting the header of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="headerScript">Header format script.</param>
    ///<remarks><p>Script commands:</p>
    ///  <table class="dtTABLE" cellspacing="0"><tr><td width="25%"><font color="gray"><b>Command</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="75%"><font color="gray"><b>Description</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;P</td>
    ///      <td width="75%">Current page number¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;N</td>
    ///      <td width="75%">Page count¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;D</td>
    ///      <td width="75%">Current date¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;T</td>
    ///      <td width="75%">Current time</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;A</td>
    ///      <td width="75%">Sheet name</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;F</td>
    ///      <td width="75%">File name without path</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;"&lt;FontName&gt;"</td>
    ///      <td width="75%">Font name, for example: &amp;"Arial"</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;"&lt;FontName&gt;, &lt;FontStyle&gt;"</td>
    ///      <td width="75%">Font name and font style, for example: &amp;"Arial,Bold"</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;&lt;FontSize&gt;</td>
    ///      <td width="75%">Font size. If this command is followed by a plain number to be printed in the header, it will be separated from the font height with a space character.</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;"&lt;K"</td>
    ///      <td width="75%">Font color, for example(RED): &amp;FF0000</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;G</td>
    ///      <td width="75%">Image script</td>
    ///</tr>
    ///</table>
    ///  For example: "&amp;Arial,Bold&amp;8Header Note"
    ///</remarks>
    procedure SetHeader(section: Int32; headerScript: string);
    ///<summary>
    ///  Sets a script formatting the footer of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  dddd
    ///  <param name="footerScript">Footer format script.</param>
    ///<remarks><p>Script commands:</p>
    ///  <table class="dtTABLE" cellspacing="0"><tr><td width="25%"><font color="gray"><b>Command</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="75%"><font color="gray"><b>Description</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;P</td>
    ///      <td width="75%">Current page number¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;N</td>
    ///      <td width="75%">Page count¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;D</td>
    ///      <td width="75%">Current date¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;T</td>
    ///      <td width="75%">Current time</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;A</td>
    ///      <td width="75%">Sheet name</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;F</td>
    ///      <td width="75%">File name without path</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;"&lt;FontName&gt;"</td>
    ///      <td width="75%">Font name, for example: &amp;"Arial"</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;"&lt;FontName&gt;, &lt;FontStyle&gt;"</td>
    ///      <td width="75%">Font name and font style, for example: &amp;"Arial,Bold"</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;&lt;FontSize&gt;</td>
    ///      <td width="75%">Font size. If this command is followed by a plain number to be printed in the header, it will be separated from the font height with a space character.</td>
    ///</tr>
    ///    <tr><td width="25%">&amp;G</td>
    ///      <td width="75%">Image script</td>
    ///</tr>
    ///</table>
    ///  For example: "&amp;Arial,Bold&amp;8Footer Note"
    ///</remarks>
    procedure SetFooter(section: Int32; footerScript: string);
    ///<summary>
    ///  Sets a script formatting the even page header of an Excel file.
    ///  Only effect in Excel 2007 when IsHFDiffOddEven is true.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="headerScript">Header format script.</param>
    procedure SetEvenHeader(section: Int32; headerScript: string);
    ///<summary>
    ///  Gets a script formatting the even header of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    function GetEvenHeader(section: Int32): string;
    ///<summary>
    ///  Sets a script formatting the even page footer of an Excel file.
    ///  Only effect in Excel 2007 when IsHFDiffOddEven is true.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="footerScript">Footer format script.</param>
    procedure SetEvenFooter(section: Int32; footerScript: string);
    ///<summary>
    ///  Gets a script formatting the even footer of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    function GetEvenFooter(section: Int32): string;
    ///<summary>
    ///  Sets a script formatting the first page header of an Excel file.
    ///  Only effect in Excel 2007 when IsHFDiffFirst is true.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="headerScript">Header format script.</param>
    procedure SetFirstPageHeader(section: Int32; headerScript: string);
    ///<summary>
    ///  Gets a script formatting the first page header of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    function GetFirstPageHeader(section: Int32): string;
    ///<summary>
    ///  Sets a script formatting the first page footer of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    ///  <param name="footerScript">Footer format script.</param>
    procedure SetFirstPageFooter(section: Int32; footerScript: string);
    ///<summary>
    ///  Gets a script formatting the first page footer of an Excel file.
    ///</summary>
    ///  <param name="section"><p>0:Left Section.</p>
    ///  <p>1:Center Section</p>
    ///  <p>2:Right Section</p>
    ///</param>
    function GetFirstPageFooter(section: Int32): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the background of ODS.
    ///</summary>
    property ODSPageBackground: DNOdsPageBackground read get_ODSPageBackground;
    ///<summary>
    ///  Represents the range to be printed.
    ///</summary>
    property PrintArea: string read get_PrintArea write set_PrintArea;
    ///<summary>
    ///  Represents the columns that contain the cells to be repeated on the left side of each page.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  cells.PageSetup.PrintTitleColumns = "$A:$A";
    ///  [Visula Basic]
    ///  cells.PageSetup.PrintTitleColumns = "$A:$A"
    ///</code></example>
    property PrintTitleColumns: string read get_PrintTitleColumns write set_PrintTitleColumns;
    ///<summary>
    ///  Represents the rows that contain the cells to be repeated at the top of each page.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  cells.PageSetup.PrintTitleRows = "$1:$1";
    ///  [Visula Basic]
    ///  cells.PageSetup.PrintTitleRows = "$1:$1"
    ///</code></example>
    property PrintTitleRows: string read get_PrintTitleRows write set_PrintTitleRows;
    ///<summary>
    ///  Represents if elements of the document will be printed in black and white.
    ///</summary>
    property BlackAndWhite: Boolean read get_BlackAndWhite write set_BlackAndWhite;
    ///<summary>
    ///  Represent if the sheet is printed centered horizontally.
    ///</summary>
    property CenterHorizontally: Boolean read get_CenterHorizontally write set_CenterHorizontally;
    ///<summary>
    ///  Represent if the sheet is printed centered vertically.
    ///</summary>
    property CenterVertically: Boolean read get_CenterVertically write set_CenterVertically;
    ///<summary>
    ///  Represents if the sheet will be printed without graphics.
    ///</summary>
    property PrintDraft: Boolean read get_PrintDraft write set_PrintDraft;
    ///<summary>
    ///  Represents the distance from the bottom of the page to the footer, in unit of centimeters.
    ///</summary>
    property FooterMargin: Double read get_FooterMargin write set_FooterMargin;
    ///<summary>
    ///  Represents the distance from the bottom of the page to the footer, in unit of inches.
    ///</summary>
    property FooterMarginInch: Double read get_FooterMarginInch write set_FooterMarginInch;
    ///<summary>
    ///  Represents the distance from the top of the page to the header, in unit of centimeters.
    ///</summary>
    property HeaderMargin: Double read get_HeaderMargin write set_HeaderMargin;
    ///<summary>
    ///  Represents the distance from the top of the page to the header, in unit of inches.
    ///</summary>
    property HeaderMarginInch: Double read get_HeaderMarginInch write set_HeaderMarginInch;
    ///<summary>
    ///  Gets and sets the settings of the default printer.
    ///</summary>
    property PrinterSettings: TArray<Byte> read get_PrinterSettings write set_PrinterSettings;
    ///<summary>
    ///  Represents the size of the left margin, in unit of centimeters.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Represents the size of the left margin, in unit of inches.
    ///</summary>
    property LeftMarginInch: Double read get_LeftMarginInch write set_LeftMarginInch;
    ///<summary>
    ///  Represents the size of the right margin, in unit of centimeters.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Represents the size of the right margin, in unit of inches.
    ///</summary>
    property RightMarginInch: Double read get_RightMarginInch write set_RightMarginInch;
    ///<summary>
    ///  Represents the size of the top margin, in unit of centimeters.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Represents the size of the top margin, in unit of inches.
    ///</summary>
    property TopMarginInch: Double read get_TopMarginInch write set_TopMarginInch;
    ///<summary>
    ///  Represents the size of the bottom margin, in unit of centimeters.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Represents the size of the bottom margin, in unit of inches.
    ///</summary>
    property BottomMarginInch: Double read get_BottomMarginInch write set_BottomMarginInch;
    ///<summary>
    ///  Represents the first page number that will be used when this sheet is printed.
    ///</summary>
    property FirstPageNumber: Int32 read get_FirstPageNumber write set_FirstPageNumber;
    ///<summary>
    ///  Represents  the number of pages tall the worksheet will be scaled to when it's printed.
    ///  The default value is 1.
    ///</summary>
    ///<remarks>
    ///  You have to set FitToPagesWide as zero if you want to fit all rows on one page.
    ///</remarks>
    property FitToPagesTall: Int32 read get_FitToPagesTall write set_FitToPagesTall;
    ///<summary>
    ///  Represents the number of pages wide the worksheet will be scaled to when it's printed.
    ///  The default value is 1.
    ///</summary>
    ///<remarks>
    ///  You have to set FitToPagesTall as zero if you want to fit all columns on one page.
    ///</remarks>
    property FitToPagesWide: Int32 read get_FitToPagesWide write set_FitToPagesWide;
    ///<summary>
    ///  If this property is False, the FitToPagesWide and FitToPagesTall properties control how the worksheet is scaled.
    ///</summary>
    property IsPercentScale: Boolean read get_IsPercentScale write set_IsPercentScale;
    ///<summary>
    ///  Represents the order that Microsoft Excel uses to number pages when printing a large worksheet.
    ///</summary>
    property Order: DNPrintOrderType read get_Order write set_Order;
    ///<summary>
    ///  Indicates whether the paper size is automatic.
    ///</summary>
    property IsAutomaticPaperSize: Boolean read get_IsAutomaticPaperSize;
    ///<summary>
    ///  Represents the size of the paper.
    ///</summary>
    property PaperSize: DNPaperSizeType read get_PaperSize write set_PaperSize;
    ///<summary>
    ///  Gets the width of the paper in unit of inches, considered page orientation.
    ///</summary>
    property PaperWidth: Double read get_PaperWidth;
    ///<summary>
    ///  Gets the height of the paper in unit of inches , considered page orientation.
    ///</summary>
    property PaperHeight: Double read get_PaperHeight;
    ///<summary>
    ///  Represents page print orientation.
    ///</summary>
    property Orientation: DNPageOrientationType read get_Orientation write set_Orientation;
    ///<summary>
    ///  Represents the way comments are printed with the sheet.
    ///</summary>
    property PrintComments: DNPrintCommentsType read get_PrintComments write set_PrintComments;
    ///<summary>
    ///  Specifies the type of print error displayed.
    ///</summary>
    property PrintErrors: DNPrintErrorsType read get_PrintErrors write set_PrintErrors;
    ///<summary>
    ///  Represents if row and column headings are printed with this page.
    ///</summary>
    property PrintHeadings: Boolean read get_PrintHeadings write set_PrintHeadings;
    ///<summary>
    ///  Represents if cell gridlines are printed on the page.
    ///</summary>
    property PrintGridlines: Boolean read get_PrintGridlines write set_PrintGridlines;
    ///<summary>
    ///  Represents the scaling factor in percent. It should be between 10 and 400.
    ///</summary>
    property Zoom: Int32 read get_Zoom write set_Zoom;
    ///<summary>
    ///  Indicates whether the first the page number is automatically assigned.
    ///</summary>
    property IsAutoFirstPageNumber: Boolean read get_IsAutoFirstPageNumber write set_IsAutoFirstPageNumber;
    ///<summary>
    ///  Represents the print quality.
    ///</summary>
    property PrintQuality: Int32 read get_PrintQuality write set_PrintQuality;
    ///<summary>
    ///  Get and sets number of copies to print.
    ///</summary>
    property PrintCopies: Int32 read get_PrintCopies write set_PrintCopies;
    ///<summary>
    ///  True means that the header/footer of the odd pages is different with odd pages.
    ///</summary>
    property IsHFDiffOddEven: Boolean read get_IsHFDiffOddEven write set_IsHFDiffOddEven;
    ///<summary>
    ///  True means that the header/footer of the first page is different with other pages.
    ///</summary>
    property IsHFDiffFirst: Boolean read get_IsHFDiffFirst write set_IsHFDiffFirst;
    ///<summary>
    ///  Indicates whether header and footer are scaled with document scaling.
    ///  Only applies for Excel 2007.
    ///</summary>
    property IsHFScaleWithDoc: Boolean read get_IsHFScaleWithDoc write set_IsHFScaleWithDoc;
    ///<summary>
    ///  Indicates whether header and footer margins are aligned with the page margins.
    ///  If this property is true, the left header and footer will be aligned with the left margin,
    ///  and the right header and footer will be aligned with the right margin.
    ///  This option is enabled by default.
    ///</summary>
    property IsHFAlignMargins: Boolean read get_IsHFAlignMargins write set_IsHFAlignMargins;
  end;

  TDNPageSetup = class(TDNGenericImport<DNPageSetupClass, DNPageSetup>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPaneCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE5F1D52-D6AF-5828-926E-A46A14EB65F3}']
  end;

  ///<summary>
  ///  Represents all Pane objects shown in the specified window.
  ///</summary>
  [DNTypeName('Aspose.Cells.PaneCollection')]
  DNPaneCollection = interface(DDN.mscorlib.DNObject)
  ['{6650612B-E7E8-35DF-B560-80E5FE2457F5}']
  { getters & setters } 

    function get_FirstVisibleRowOfBottomPane: Int32;
    procedure set_FirstVisibleRowOfBottomPane(value: Int32);
    function get_FirstVisibleColumnOfRightPane: Int32;
    procedure set_FirstVisibleColumnOfRightPane(value: Int32);
    function get_AcitvePaneType: DNRectangleAlignmentType;
    procedure set_AcitvePaneType(value: DNRectangleAlignmentType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the first visible row of the bottom pane.
    ///</summary>
    property FirstVisibleRowOfBottomPane: Int32 read get_FirstVisibleRowOfBottomPane write set_FirstVisibleRowOfBottomPane;
    ///<summary>
    ///  Gets and sets the first visible column of the right pane.
    ///</summary>
    property FirstVisibleColumnOfRightPane: Int32 read get_FirstVisibleColumnOfRightPane write set_FirstVisibleColumnOfRightPane;
    ///<summary>
    ///  Gets and sets the active pane.
    ///</summary>
    property AcitvePaneType: DNRectangleAlignmentType read get_AcitvePaneType write set_AcitvePaneType;
  end;

  TDNPaneCollection = class(TDNGenericImport<DNPaneCollectionClass, DNPaneCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPasteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F3A0B77-6CBB-5D8B-9EE5-819A1E6F4DDC}']
  { constructors } 

    {class} function init: DNPasteOptions;

  end;

  ///<summary>
  ///  Represents the paste special options.
  ///</summary>
  [DNTypeName('Aspose.Cells.PasteOptions')]
  DNPasteOptions = interface(DDN.mscorlib.DNObject)
  ['{4CC8D2EC-D82F-3DB7-8CDA-479733223636}']
  { getters & setters } 

    function get_PasteType: DNPasteType;
    procedure set_PasteType(value: DNPasteType);
    function get_SkipBlanks: Boolean;
    procedure set_SkipBlanks(value: Boolean);
    function get_OnlyVisibleCells: Boolean;
    procedure set_OnlyVisibleCells(value: Boolean);
    function get_Transpose: Boolean;
    procedure set_Transpose(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The paste special type.
    ///</summary>
    property PasteType: DNPasteType read get_PasteType write set_PasteType;
    ///<summary>
    ///  Indicates whether skips blank cells.
    ///</summary>
    property SkipBlanks: Boolean read get_SkipBlanks write set_SkipBlanks;
    ///<summary>
    ///  True means only copying visible cells.
    ///</summary>
    property OnlyVisibleCells: Boolean read get_OnlyVisibleCells write set_OnlyVisibleCells;
    ///<summary>
    ///  True to transpose rows and columns when the range is pasted. The default value is False.
    ///</summary>
    property Transpose: Boolean read get_Transpose write set_Transpose;
  end;

  TDNPasteOptions = class(TDNGenericImport<DNPasteOptionsClass, DNPasteOptions>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4247E6F4-6ECD-5876-A5D9-FADE79734A12}']
  end;

  ///<summary>
  ///  Represents a field in a PivotTable report.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotField')]
  DNPivotField = interface(DDN.mscorlib.DNObject)
  ['{A60D1326-92BB-3DE5-8557-BB35CB5A7620}']
  { getters & setters } 

    function get_PivotItems: DNPivotItemCollection;
    function get_Range: DNSxRng;
    function get_IsCalculatedField: Boolean;
    function get_BaseIndex: Int32;
    procedure set_BaseIndex(value: Int32);
    function get_Position: Int32;
    function get_Name: string;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_IsAutoSubtotals: Boolean;
    procedure set_IsAutoSubtotals(value: Boolean);
    function get_DragToColumn: Boolean;
    procedure set_DragToColumn(value: Boolean);
    function get_DragToHide: Boolean;
    procedure set_DragToHide(value: Boolean);
    function get_DragToRow: Boolean;
    procedure set_DragToRow(value: Boolean);
    function get_DragToPage: Boolean;
    procedure set_DragToPage(value: Boolean);
    function get_DragToData: Boolean;
    procedure set_DragToData(value: Boolean);
    function get_IsMultipleItemSelectionAllowed: Boolean;
    procedure set_IsMultipleItemSelectionAllowed(value: Boolean);
    function get_IsRepeatItemLabels: Boolean;
    procedure set_IsRepeatItemLabels(value: Boolean);
    function get_IsIncludeNewItemsInFilter: Boolean;
    procedure set_IsIncludeNewItemsInFilter(value: Boolean);
    function get_IsInsertPageBreaksBetweenItems: Boolean;
    procedure set_IsInsertPageBreaksBetweenItems(value: Boolean);
    function get_ShowAllItems: Boolean;
    procedure set_ShowAllItems(value: Boolean);
    function get_IsAutoSort: Boolean;
    procedure set_IsAutoSort(value: Boolean);
    function get_IsAscendSort: Boolean;
    procedure set_IsAscendSort(value: Boolean);
    function get_AutoSortField: Int32;
    procedure set_AutoSortField(value: Int32);
    function get_IsAutoShow: Boolean;
    procedure set_IsAutoShow(value: Boolean);
    function get_IsAscendShow: Boolean;
    procedure set_IsAscendShow(value: Boolean);
    function get_AutoShowCount: Int32;
    procedure set_AutoShowCount(value: Int32);
    function get_AutoShowField: Int32;
    procedure set_AutoShowField(value: Int32);
    function get_Function: DNConsolidationFunction;
    procedure set_Function(value: DNConsolidationFunction);
    function get_DataDisplayFormat: DNPivotFieldDataDisplayFormat;
    procedure set_DataDisplayFormat(value: DNPivotFieldDataDisplayFormat);
    function get_BaseFieldIndex: Int32;
    procedure set_BaseFieldIndex(value: Int32);
    function get_BaseItemPosition: DNPivotItemPosition;
    procedure set_BaseItemPosition(value: DNPivotItemPosition);
    function get_BaseItemIndex: Int32;
    procedure set_BaseItemIndex(value: Int32);
    function get_CurrentPageItem: Int16;
    procedure set_CurrentPageItem(value: Int16);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_InsertBlankRow: Boolean;
    procedure set_InsertBlankRow(value: Boolean);
    function get_ShowSubtotalAtTop: Boolean;
    procedure set_ShowSubtotalAtTop(value: Boolean);
    function get_ShowInOutlineForm: Boolean;
    procedure set_ShowInOutlineForm(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Items: TArray<string>;
    function get_OriginalItems: TArray<string>;
    function get_ItemCount: Int32;
    function get_ShowCompact: Boolean;
    procedure set_ShowCompact(value: Boolean);

  { methods } 

    ///<summary>
    ///  Gets the pivot filter of the pivot field by type
    ///</summary>
    function GetPivotFilterByType(&type: DNPivotFilterType): DNPivotFilter;
    ///<summary>
    ///  Gets the pivot filters of the pivot field
    ///</summary>
    function GetPivotFilters: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Init the pivot items of the pivot field
    ///</summary>
    procedure InitPivotItems;
    ///<summary>
    ///  Get the formula string of the specified calculated field .
    ///</summary>
    function GetCalculatedFieldFormula: string;
    ///<summary>
    ///  Sets whether the specified field shows that subtotals.
    ///</summary>
    ///  <param name="subtotalType">subtotals type.</param>
    ///  <param name="shown">whether the specified field shows that subtotals.</param>
    ///<see cref="T:Aspose.Cells.Pivot.PivotFieldSubtotalType" />
    procedure SetSubtotals(subtotalType: DNPivotFieldSubtotalType; shown: Boolean);
    ///<summary>
    ///  Gets whether the specified field shows that subtotals.
    ///</summary>
    ///  <param name="subtotalType">subtotals type.</param>
    ///<returns>whether the specified field shows that subtotals.</returns>
    function GetSubtotals(subtotalType: DNPivotFieldSubtotalType): Boolean;
    ///<summary>
    ///  Indicates whether the specific PivotItem is hidden.
    ///</summary>
    ///  <param name="index">the index of the pivotItem in the pivotField.</param>
    ///<returns>whether the specific PivotItem is hidden</returns>
    function IsHiddenItem(index: Int32): Boolean;
    ///<summary>
    ///  Sets whether the specific PivotItem in a data field is hidden.
    ///</summary>
    ///  <param name="index">the index of the pivotItem in the pivotField.</param>
    ///  <param name="isHidden">whether the specific PivotItem is hidden</param>
    procedure HideItem(index: Int32; isHidden: Boolean); overload;
    ///<summary>
    ///  Indicates whether the specific PivotItem is hidden detail.
    ///</summary>
    ///  <param name="index">the index of the pivotItem in the pivotField.</param>
    ///<returns>whether the specific PivotItem is hidden detail</returns>
    function IsHiddenItemDetail(index: Int32): Boolean;
    ///<summary>
    ///  Sets whether the specific PivotItem in a pivot field is hidden detail.
    ///</summary>
    ///  <param name="index">the index of the pivotItem in the pivotField.</param>
    ///  <param name="isHiddenDetail">whether the specific PivotItem is hidden</param>
    procedure HideItemDetail(index: Int32; isHiddenDetail: Boolean);
    ///<summary>
    ///  Sets whether the PivotItems in a pivot field is hidden detail.That is collapse/expand this field.
    ///</summary>
    ///  <param name="isHiddenDetail">whether the PivotItems is hidden</param>
    procedure HideDetail(isHiddenDetail: Boolean);
    ///<summary>
    ///  Sets whether the specific PivotItem in a data field is hidden.
    ///</summary>
    ///  <param name="itemValue">the value of the pivotItem in the pivotField.</param>
    ///  <param name="isHidden">whether the specific PivotItem is hidden</param>
    procedure HideItem(itemValue: string; isHidden: Boolean); overload;
    ///<summary>
    ///  Add a calculated item to the pivot field.
    ///</summary>
    ///  <param name="name">The item's name.</param>
    ///  <param name="formula">The item's formula</param>
    ///<remarks>
    ///  Only supports to add calculated item to Row/Column field.
    ///</remarks>
    procedure AddCalculatedItem(name: string; formula: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the pivot items of the pivot field
    ///</summary>
    property PivotItems: DNPivotItemCollection read get_PivotItems;
    ///<summary>
    ///  Gets the group range of the pivot field
    ///</summary>
    property Range: DNSxRng read get_Range;
    ///<summary>
    ///  Indicates whether the specified PivotTable field is calculated field.
    ///</summary>
    property IsCalculatedField: Boolean read get_IsCalculatedField;
    ///<summary>
    ///  Represents the PivotField index in the base PivotFields.
    ///</summary>
    property BaseIndex: Int32 read get_BaseIndex write set_BaseIndex;
    ///<summary>
    ///  Represents the PivotField index in the PivotFields.
    ///</summary>
    property Position: Int32 read get_Position;
    ///<summary>
    ///  Represents the PivotField name.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Represents the PivotField display name.
    ///</summary>
    property DisplayName: string read get_DisplayName write set_DisplayName;
    ///<summary>
    ///  Indicates whether the specified field shows automatic subtotals. Default is true.
    ///</summary>
    property IsAutoSubtotals: Boolean read get_IsAutoSubtotals write set_IsAutoSubtotals;
    ///<summary>
    ///  Indicates whether the specified field can be dragged to the column position.
    ///  The default value is true.
    ///</summary>
    property DragToColumn: Boolean read get_DragToColumn write set_DragToColumn;
    ///<summary>
    ///  Indicates whether the specified field can be dragged to the hide position.
    ///  The default value is true.
    ///</summary>
    property DragToHide: Boolean read get_DragToHide write set_DragToHide;
    ///<summary>
    ///  Indicates whether the specified field can be dragged to the row position.
    ///  The default value is true.
    ///</summary>
    property DragToRow: Boolean read get_DragToRow write set_DragToRow;
    ///<summary>
    ///  Indicates whether the specified field can be dragged to the page position.
    ///  The default value is true.
    ///</summary>
    property DragToPage: Boolean read get_DragToPage write set_DragToPage;
    ///<summary>
    ///  Indicates whether the specified field can be dragged to the data position.
    ///  The default value is true.
    ///</summary>
    property DragToData: Boolean read get_DragToData write set_DragToData;
    ///<summary>
    ///  indicates whether the field can have multiple items
    ///  selected in the page field
    ///  The default value is false.
    ///</summary>
    property IsMultipleItemSelectionAllowed: Boolean read get_IsMultipleItemSelectionAllowed write set_IsMultipleItemSelectionAllowed;
    ///<summary>
    ///  indicates whether the field can repeat items labels
    ///  The default value is false.
    ///</summary>
    property IsRepeatItemLabels: Boolean read get_IsRepeatItemLabels write set_IsRepeatItemLabels;
    ///<summary>
    ///  indicates whether the field can include new items in manual filter
    ///  The default value is false.
    ///</summary>
    property IsIncludeNewItemsInFilter: Boolean read get_IsIncludeNewItemsInFilter write set_IsIncludeNewItemsInFilter;
    ///<summary>
    ///  indicates whether the field can insert page breaks between items
    ///  insert page break after each item
    ///  The default value is false.
    ///</summary>
    property IsInsertPageBreaksBetweenItems: Boolean read get_IsInsertPageBreaksBetweenItems write set_IsInsertPageBreaksBetweenItems;
    ///<summary>
    ///  Indicates whether all items in the PivotTable report are displayed,
    ///  even if they don't contain summary data.
    ///  show items with no data
    ///  The default value is false.
    ///</summary>
    property ShowAllItems: Boolean read get_ShowAllItems write set_ShowAllItems;
    ///<summary>
    ///  Indicates whether the specified PivotTable field is automatically sorted.
    ///</summary>
    property IsAutoSort: Boolean read get_IsAutoSort write set_IsAutoSort;
    ///<summary>
    ///  Indicates whether the specified PivotTable field is autosorted ascending.
    ///</summary>
    property IsAscendSort: Boolean read get_IsAscendSort write set_IsAscendSort;
    ///<summary>
    ///  Represents auto sort field index.
    ///  -1 means PivotField itself,others means the position of the data fields.
    ///</summary>
    property AutoSortField: Int32 read get_AutoSortField write set_AutoSortField;
    ///<summary>
    ///  Indicates whether the specified PivotTable field is automatically shown,only valid for excel 2003.
    ///</summary>
    property IsAutoShow: Boolean read get_IsAutoShow write set_IsAutoShow;
    ///<summary>
    ///  Indicates whether the specified PivotTable field is autoshown ascending.
    ///</summary>
    property IsAscendShow: Boolean read get_IsAscendShow write set_IsAscendShow;
    ///<summary>
    ///  Represent the number of top or bottom items
    ///  that are automatically shown in the specified PivotTable field.
    ///</summary>
    property AutoShowCount: Int32 read get_AutoShowCount write set_AutoShowCount;
    ///<summary>
    ///  Represents auto show field index. -1 means PivotField itself.
    ///  It should be the index of the data fields.
    ///</summary>
    property AutoShowField: Int32 read get_AutoShowField write set_AutoShowField;
    ///<summary>
    ///  Represents the function used to summarize the PivotTable data field.
    ///</summary>
    property &Function: DNConsolidationFunction read get_Function write set_Function;
    ///<summary>
    ///  Represents how to display the values contained in a data field.
    ///</summary>
    ///<see cref="T:Aspose.Cells.Pivot.PivotFieldDataDisplayFormat" />
    property DataDisplayFormat: DNPivotFieldDataDisplayFormat read get_DataDisplayFormat write set_DataDisplayFormat;
    ///<summary>
    ///  Represents the base field for a custom calculation.
    ///</summary>
    property BaseFieldIndex: Int32 read get_BaseFieldIndex write set_BaseFieldIndex;
    ///<summary>
    ///  Represents the item in the base field for a custom calculation.
    ///  Valid only for data fields.
    ///  Because PivotItemPosition.Custom is only for read,if you need to set PivotItemPosition.Custom,
    ///  please set PivotField.BaseItemIndex attribute.
    ///</summary>
    ///<see cref="T:Aspose.Cells.Pivot.PivotItemPosition" />
    property BaseItemPosition: DNPivotItemPosition read get_BaseItemPosition write set_BaseItemPosition;
    ///<summary>
    ///  Represents the item in the base field for a custom calculation.
    ///  Valid only for data fields.
    ///</summary>
    property BaseItemIndex: Int32 read get_BaseItemIndex write set_BaseItemIndex;
    ///<summary>
    ///  Represents the current page item showing for the page field (valid only for page fields).
    ///</summary>
    property CurrentPageItem: Int16 read get_CurrentPageItem write set_CurrentPageItem;
    ///<summary>
    ///  Represents the built-in display format of numbers and dates.
    ///</summary>
    property Number: Int32 read get_Number write set_Number;
    ///<summary>
    ///  Indicates whether inserting blank line after each item.
    ///</summary>
    property InsertBlankRow: Boolean read get_InsertBlankRow write set_InsertBlankRow;
    ///<summary>
    ///  when ShowInOutlineForm is true, then display subtotals at the top of the list of items instead of at the bottom
    ///</summary>
    property ShowSubtotalAtTop: Boolean read get_ShowSubtotalAtTop write set_ShowSubtotalAtTop;
    ///<summary>
    ///  Indicates whether layout this field in outline form on the Pivot Table view
    ///</summary>
    property ShowInOutlineForm: Boolean read get_ShowInOutlineForm write set_ShowInOutlineForm;
    ///<summary>
    ///  Represents the custom display format of numbers and dates.
    ///</summary>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Get all base items;
    ///</summary>
    property Items: TArray<string> read get_Items;
    ///<summary>
    ///  Get the original base items;
    ///</summary>
    property OriginalItems: TArray<string> read get_OriginalItems;
    ///<summary>
    ///  Gets the base item count of this pivot field.
    ///</summary>
    property ItemCount: Int32 read get_ItemCount;
    ///<summary></summary>
    property ShowCompact: Boolean read get_ShowCompact write set_ShowCompact;
  end;

  TDNPivotField = class(TDNGenericImport<DNPivotFieldClass, DNPivotField>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFieldCollectionClass = interface(DNObjectClass)
  ['{03482C24-9228-5679-87C1-CC0072BA2261}']
  end;

  ///<summary>
  ///  Represents a collection of all the PivotField objects
  ///  in the PivotTable's specific PivotFields type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldCollection')]
  DNPivotFieldCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{4DB0026F-84DB-3AD2-8640-CDF2C7DF0DA4}']
  { getters & setters } 

    function get_Type: DNPivotFieldType;
    function get_Count: Int32;
    function get_Item(index: Int32): DNPivotField; overload;
    function get_Item(name: string): DNPivotField; overload;

  { methods } 

    ///<summary>
    ///  Gets an enumerator over the elements in this collection in proper sequence.
    ///</summary>
    ///<returns>enumerator</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Adds a PivotField Object to the specific type PivotFields.
    ///</summary>
    ///  <param name="baseFieldIndex">field index in the base PivotFields.</param>
    ///<returns>the index of  the PivotField Object in this PivotFields.</returns>
    function AddByBaseIndex(baseFieldIndex: Int32): Int32;
    ///<summary>
    ///  Adds a PivotField Object to the specific type PivotFields.
    ///</summary>
    ///  <param name="pivotField">a PivotField Object.</param>
    ///<returns>the index of  the PivotField Object in this PivotFields.</returns>
    function Add(pivotField: DNPivotField): Int32;
    ///<summary>
    ///  clear all fields of PivotFieldCollection
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the PivotFields type.
    ///</summary>
    property &Type: DNPivotFieldType read get_Type;
    ///<summary>
    ///  Gets the count of the pivotFields.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPivotField read get_Item; default;
    property Item[name: string]: DNPivotField read get_Item; default;
  end;

  TDNPivotFieldCollection = class(TDNGenericImport<DNPivotFieldCollectionClass, DNPivotFieldCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BEB8E851-5FAD-5AEF-A76A-643D859CEFC9}']
  end;

  ///<summary>
  ///  Represents a PivotFilter in PivotFilter Collection.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFilter')]
  DNPivotFilter = interface(DDN.mscorlib.DNObject)
  ['{F4973E38-5A62-3AF6-99E1-F391B9F5642F}']
  { getters & setters } 

    function get_AutoFilter: DNAutoFilter;
    function get_FilterType: DNPivotFilterType;
    function get_FieldIndex: Int32;
    function get_Value1: string;
    procedure set_Value1(value: string);
    function get_Value2: string;
    procedure set_Value2(value: string);
    function get_MeasureFldIndex: Int32;
    procedure set_MeasureFldIndex(value: Int32);
    function get_MemberPropertyFieldIndex: Int32;
    procedure set_MemberPropertyFieldIndex(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_EvaluationOrder: Int32;
    procedure set_EvaluationOrder(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the autofilter of the pivot filter.
    ///</summary>
    property AutoFilter: DNAutoFilter read get_AutoFilter;
    ///<summary>
    ///  Gets the autofilter type of the pivot filter.
    ///</summary>
    property FilterType: DNPivotFilterType read get_FilterType;
    ///<summary>
    ///  Gets the field index of the pivot filter.
    ///</summary>
    property FieldIndex: Int32 read get_FieldIndex;
    ///<summary>
    ///  Gets the string value1 of the label pivot filter.
    ///</summary>
    property Value1: string read get_Value1 write set_Value1;
    ///<summary>
    ///  Gets the string value2 of the label pivot filter.
    ///</summary>
    property Value2: string read get_Value2 write set_Value2;
    ///<summary>
    ///  Gets the measure field index of the pivot filter.
    ///</summary>
    property MeasureFldIndex: Int32 read get_MeasureFldIndex write set_MeasureFldIndex;
    ///<summary>
    ///  Gets the member property field index of the pivot filter.
    ///</summary>
    property MemberPropertyFieldIndex: Int32 read get_MemberPropertyFieldIndex write set_MemberPropertyFieldIndex;
    ///<summary>
    ///  Gets the name of the pivot filter.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the Evaluation Order of the pivot filter.
    ///</summary>
    property EvaluationOrder: Int32 read get_EvaluationOrder write set_EvaluationOrder;
  end;

  TDNPivotFilter = class(TDNGenericImport<DNPivotFilterClass, DNPivotFilter>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFormatConditionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9C6173C3-5F7E-5A4B-95A6-F64588377D9F}']
  end;

  ///<summary>
  ///  Represents a PivotTable Format Condition in PivotFormatCondition Collection.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotFormatCondition')]
  DNPivotFormatCondition = interface(DDN.mscorlib.DNObject)
  ['{CFD3F105-D1EA-3AC5-8825-FD74A072D320}']
  { getters & setters } 

    function get_ScopeType: DNPivotConditionFormatScopeType;
    procedure set_ScopeType(value: DNPivotConditionFormatScopeType);
    function get_RuleType: DNPivotConditionFormatRuleType;
    procedure set_RuleType(value: DNPivotConditionFormatRuleType);
    function get_FormatConditions: DNFormatConditionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get and set scope type for the pivot table condition format .
    ///</summary>
    property ScopeType: DNPivotConditionFormatScopeType read get_ScopeType write set_ScopeType;
    ///<summary>
    ///  Get and set rule type for the pivot table condition format .
    ///</summary>
    property RuleType: DNPivotConditionFormatRuleType read get_RuleType write set_RuleType;
    ///<summary>
    ///  Get formatconditions for the pivot table condition format .
    ///</summary>
    property FormatConditions: DNFormatConditionCollection read get_FormatConditions;
  end;

  TDNPivotFormatCondition = class(TDNGenericImport<DNPivotFormatConditionClass, DNPivotFormatCondition>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A186CBDD-2402-5653-883F-DC50D68D1911}']
  { static getter & setter } 

    procedure set_Position(value: Int32);
    procedure set_PositionInSameParentNode(value: Int32);

  { static propertys } 

    ///<summary>
    ///  Specifying the position index in all the PivotItems,not the PivotItems under the same parent node.
    ///</summary>
    {class} property Position: Int32 write set_Position;
    ///<summary>
    ///  Specifying the position index in the PivotItems under the same parent node.
    ///</summary>
    {class} property PositionInSameParentNode: Int32 write set_PositionInSameParentNode;
  end;

  ///<summary>
  ///  Represents a item in a PivotField report.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotItem')]
  DNPivotItem = interface(DDN.mscorlib.DNObject)
  ['{3EA22A05-EB98-35BF-97F0-B7D77C5EFEA1}']
  { getters & setters } 

    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    procedure set_Position(value: Int32);
    procedure set_PositionInSameParentNode(value: Int32);
    function get_Value: DDN.mscorlib.DNObject;
    function get_Name: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Moves the item up or down
    ///</summary>
    ///  <param name="count">
    ///  The number of moving up or down.
    ///  Move the item up if this is less than zero;
    ///  Move the item down if this is greater than zero.
    ///</param>
    ///  <param name="isSameParent">
    ///  Specifying whether moving operation is in the same parent node or not
    ///</param>
    procedure Move(count: Int32; isSameParent: Boolean);
    ///<summary>
    ///  Gets the string value of the pivot item
    ///  If the value is null, it will return ""
    ///</summary>
    function GetStringValue: string;
    ///<summary>
    ///  Gets the double value of the pivot item
    ///  If the value is null or not number ,it will return 0
    ///</summary>
    function GetDoubleValue: Double;
    ///<summary>
    ///  Gets the date time value of the pivot item
    ///  If the value is null ,it will return DateTime.MinValue
    ///</summary>
    function GetDateTimeValue: DDN.mscorlib.DNDateTime;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and Sets whether the pivot item is hidden.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  Specifying the position index in all the PivotItems,not the PivotItems under the same parent node.
    ///</summary>
    property Position: Int32 write set_Position;
    ///<summary>
    ///  Specifying the position index in the PivotItems under the same parent node.
    ///</summary>
    property PositionInSameParentNode: Int32 write set_PositionInSameParentNode;
    ///<summary>
    ///  Gets the value of the pivot item
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  Gets the name of the pivot item.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the index of the pivot item in the pivot field
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNPivotItem = class(TDNGenericImport<DNPivotItemClass, DNPivotItem>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotItemCollectionClass = interface(DNObjectClass)
  ['{033ED0B8-E493-50C7-A1B9-C96F2BFF4419}']
  end;

  ///<summary>
  ///  Represents a collection of all the PivotItem objects in the PivotField's
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotItemCollection')]
  DNPivotItemCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A11A144A-3489-3840-8877-BA279E2B8F9E}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotItem; overload;
    function get_Item(itemValue: string): DNPivotItem; overload;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Gets an enumerator over the elements in this collection in proper sequence.
    ///</summary>
    ///<returns>enumerator</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Directly changes the orders of the two items.
    ///</summary>
    ///  <param name="sourceIndex">The current index</param>
    ///  <param name="destIndex">The dest index</param>
    procedure ChangeitemsOrder(sourceIndex: Int32; destIndex: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotItem read get_Item; default;
    property Item[itemValue: string]: DNPivotItem read get_Item; default;
    ///<summary>
    ///  Gets the count of the pivot items.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNPivotItemCollection = class(TDNGenericImport<DNPivotItemCollectionClass, DNPivotItemCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotPageFieldsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F75DE91B-A539-5062-820A-8E607E81EBA8}']
  { constructors } 

    ///<summary>
    ///  Represents the pivot page field items.
    ///</summary>
    {class} function init: DNPivotPageFields;

  end;

  ///<summary>
  ///  Represents the pivot page field items
  ///  if the pivot table data source is consolidation ranges.
  ///  It only can contain up to 4 fields.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotPageFields')]
  DNPivotPageFields = interface(DDN.mscorlib.DNObject)
  ['{22B6533D-425A-3FA4-885A-CC1F7CD98651}']
  { getters & setters } 

    function get_PageFieldCount: Int32;

  { methods } 

    ///<summary>
    ///  Adds a page field.
    ///</summary>
    ///  <param name="pageItems">Page field item label</param>
    procedure AddPageField(pageItems: TArray<string>);
    ///<summary>
    ///  Sets which item label in each page field to use to identify the data range.
    ///  The pageItemIndex.Length must be equal to PageFieldCount, so please add the page field first.
    ///</summary>
    ///  <param name="rangeIndex">The consolidation data range index.</param>
    ///  <param name="pageItemIndex">The page item index in the each page field.
    ///  pageItemIndex[2] = 1 means the second item in the third field to use to identify this range.
    ///  pageItemIndex[1] = -1 means no item in the second field to use to identify this range
    ///  and MS will auto create "blank" item in the second field  to identify this range.
    ///</param>
    procedure AddIdentify(rangeIndex: Int32; pageItemIndex: TArray<Int32>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of page fields.
    ///</summary>
    property PageFieldCount: Int32 read get_PageFieldCount;
  end;

  TDNPivotPageFields = class(TDNGenericImport<DNPivotPageFieldsClass, DNPivotPageFields>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotTableClass = interface(DNObjectClass)
  ['{B2CC9158-57A1-5F11-9EB5-0BC2629D9549}']
  end;

  ///<summary>
  ///  Summary description for PivotTable.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.PivotTable')]
  DNPivotTable = interface(DDN.mscorlib.DNIDisposable)
  ['{0AF8DDBA-C896-3D76-9FAD-6D52198DA7E9}']
  { getters & setters } 

    function get_IsExcel2003Compatible: Boolean;
    procedure set_IsExcel2003Compatible(value: Boolean);
    function get_RefreshedByWho: string;
    function get_RefreshDate: DDN.mscorlib.DNDateTime;
    function get_PivotTableStyleName: string;
    procedure set_PivotTableStyleName(value: string);
    function get_PivotTableStyleType: DNPivotTableStyleType;
    procedure set_PivotTableStyleType(value: DNPivotTableStyleType);
    function get_ColumnFields: DNPivotFieldCollection;
    function get_RowFields: DNPivotFieldCollection;
    function get_PageFields: DNPivotFieldCollection;
    function get_DataFields: DNPivotFieldCollection;
    function get_DataField: DNPivotField;
    function get_BaseFields: DNPivotFieldCollection;
    function get_PivotFilters: DNPivotFilterCollection;
    function get_ColumnRange: DNCellArea;
    function get_RowRange: DNCellArea;
    function get_DataBodyRange: DNCellArea;
    function get_TableRange1: DNCellArea;
    function get_TableRange2: DNCellArea;
    function get_ColumnGrand: Boolean;
    procedure set_ColumnGrand(value: Boolean);
    function get_IsGridDropZones: Boolean;
    procedure set_IsGridDropZones(value: Boolean);
    function get_RowGrand: Boolean;
    procedure set_RowGrand(value: Boolean);
    function get_DisplayNullString: Boolean;
    procedure set_DisplayNullString(value: Boolean);
    function get_NullString: string;
    procedure set_NullString(value: string);
    function get_DisplayErrorString: Boolean;
    procedure set_DisplayErrorString(value: Boolean);
    function get_ErrorString: string;
    procedure set_ErrorString(value: string);
    function get_IsAutoFormat: Boolean;
    procedure set_IsAutoFormat(value: Boolean);
    function get_AutoFormatType: DNPivotTableAutoFormatType;
    procedure set_AutoFormatType(value: DNPivotTableAutoFormatType);
    function get_HasBlankRows: Boolean;
    procedure set_HasBlankRows(value: Boolean);
    function get_MergeLabels: Boolean;
    procedure set_MergeLabels(value: Boolean);
    function get_PreserveFormatting: Boolean;
    procedure set_PreserveFormatting(value: Boolean);
    function get_ShowDrill: Boolean;
    procedure set_ShowDrill(value: Boolean);
    function get_EnableDrilldown: Boolean;
    procedure set_EnableDrilldown(value: Boolean);
    function get_EnableFieldDialog: Boolean;
    procedure set_EnableFieldDialog(value: Boolean);
    function get_EnableFieldList: Boolean;
    procedure set_EnableFieldList(value: Boolean);
    function get_EnableWizard: Boolean;
    procedure set_EnableWizard(value: Boolean);
    function get_SubtotalHiddenPageItems: Boolean;
    procedure set_SubtotalHiddenPageItems(value: Boolean);
    function get_GrandTotalName: string;
    procedure set_GrandTotalName(value: string);
    function get_ManualUpdate: Boolean;
    procedure set_ManualUpdate(value: Boolean);
    function get_IsMultipleFieldFilters: Boolean;
    procedure set_IsMultipleFieldFilters(value: Boolean);
    function get_MissingItemsLimit: DNPivotMissingItemLimitType;
    procedure set_MissingItemsLimit(value: DNPivotMissingItemLimitType);
    function get_EnableDataValueEditing: Boolean;
    procedure set_EnableDataValueEditing(value: Boolean);
    function get_ShowDataTips: Boolean;
    procedure set_ShowDataTips(value: Boolean);
    function get_ShowMemberPropertyTips: Boolean;
    procedure set_ShowMemberPropertyTips(value: Boolean);
    function get_ShowValuesRow: Boolean;
    procedure set_ShowValuesRow(value: Boolean);
    function get_ShowEmptyCol: Boolean;
    procedure set_ShowEmptyCol(value: Boolean);
    function get_ShowEmptyRow: Boolean;
    procedure set_ShowEmptyRow(value: Boolean);
    function get_FieldListSortAscending: Boolean;
    procedure set_FieldListSortAscending(value: Boolean);
    function get_PrintDrill: Boolean;
    procedure set_PrintDrill(value: Boolean);
    function get_AltTextTitle: string;
    procedure set_AltTextTitle(value: string);
    function get_AltTextDescription: string;
    procedure set_AltTextDescription(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ColumnHeaderCaption: string;
    procedure set_ColumnHeaderCaption(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_RowHeaderCaption: string;
    procedure set_RowHeaderCaption(value: string);
    function get_ShowRowHeaderCaption: Boolean;
    procedure set_ShowRowHeaderCaption(value: Boolean);
    function get_CustomListSort: Boolean;
    procedure set_CustomListSort(value: Boolean);
    function get_PivotFormatConditions: DNPivotFormatConditionCollection;
    function get_PageFieldOrder: DNPrintOrderType;
    procedure set_PageFieldOrder(value: DNPrintOrderType);
    function get_PageFieldWrapCount: Int32;
    procedure set_PageFieldWrapCount(value: Int32);
    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshDataOnOpeningFile: Boolean;
    procedure set_RefreshDataOnOpeningFile(value: Boolean);
    function get_RefreshDataFlag: Boolean;
    procedure set_RefreshDataFlag(value: Boolean);
    function get_ExternalConnectionDataSource: DNExternalConnection;
    function get_DataSource: TArray<string>;
    procedure set_DataSource(value: TArray<string>);
    function get_ItemPrintTitles: Boolean;
    procedure set_ItemPrintTitles(value: Boolean);
    function get_PrintTitles: Boolean;
    procedure set_PrintTitles(value: Boolean);
    function get_DisplayImmediateItems: Boolean;
    procedure set_DisplayImmediateItems(value: Boolean);
    function get_IsSelected: Boolean;
    procedure set_IsSelected(value: Boolean);
    function get_ShowPivotStyleRowHeader: Boolean;
    procedure set_ShowPivotStyleRowHeader(value: Boolean);
    function get_ShowPivotStyleColumnHeader: Boolean;
    procedure set_ShowPivotStyleColumnHeader(value: Boolean);
    function get_ShowPivotStyleRowStripes: Boolean;
    procedure set_ShowPivotStyleRowStripes(value: Boolean);
    function get_ShowPivotStyleColumnStripes: Boolean;
    procedure set_ShowPivotStyleColumnStripes(value: Boolean);
    function get_ShowPivotStyleLastColumn: Boolean;
    procedure set_ShowPivotStyleLastColumn(value: Boolean);

  { methods } 

    ///<summary>
    ///  Set pivottable's source data.
    ///  Sheet1!$A$1:$C$3
    ///</summary>
    procedure ChangeDataSource(source: TArray<string>);
    ///<summary>
    ///  Get pivottable's source data.
    ///</summary>
    function GetSource: TArray<string>;
    ///<summary>
    ///  Refreshes pivottable's data and setting from it's data source.
    ///</summary>
    ///<remarks>
    ///  We will gather data from data source to a pivot cache ,then calculate the data in the cache to the cells.
    ///  This method is only used to gather all data to a pivot cache.
    ///</remarks>
    procedure RefreshData;
    ///<summary>
    ///  Calculates pivottable's data to cells.
    ///</summary>
    ///<remarks>
    ///  Cell.Value in the pivot range could not return the correct result if the method is not been called.
    ///  This method calculates data with an inner pivot cache,not original data source.
    ///  So if the data source is changed, please call RefreshData() method first.
    ///</remarks>
    procedure CalculateData;
    ///<summary>
    ///  Clear PivotTable's data and formatting
    ///</summary>
    ///<remarks>
    ///  If this method is not called before you add or delete PivotField, Maybe the PivotTable data is not corrected
    ///</remarks>
    procedure ClearData;
    ///<summary>
    ///  Calculates pivottable's range.
    ///</summary>
    ///<remarks>
    ///  If this method is not been called,maybe the pivottable range is not corrected.
    ///</remarks>
    procedure CalculateRange;
    ///<summary>
    ///  Format all the cell in the pivottable area
    ///</summary>
    ///  <param name="style">Style which is to format</param>
    procedure FormatAll(style: DNStyle);
    ///<summary>
    ///  Format the cell in the pivottable area
    ///</summary>
    ///  <param name="row">RowIndex of the cell</param>
    ///  <param name="column">Column index of the cell</param>
    ///  <param name="style">Style which is to format the cell</param>
    procedure Format(row: Int32; column: Int32; style: DNStyle);
    ///<summary>
    ///  Sets auto field group by the PivotTable.
    ///</summary>
    ///  <param name="baseFieldIndex">The row or column field index in the base fields</param>
    procedure SetAutoGroupField(baseFieldIndex: Int32); overload;
    ///<summary>
    ///  Sets auto field group by the PivotTable.
    ///</summary>
    ///  <param name="pivotField">The row or column field in the specific fields</param>
    procedure SetAutoGroupField(pivotField: DNPivotField); overload;
    ///<summary>
    ///  Sets manual field group by the PivotTable.
    ///</summary>
    ///  <param name="baseFieldIndex">The row or column field index in the base fields</param>
    ///  <param name="startVal">Specifies the starting value for numeric grouping.</param>
    ///  <param name="endVal">Specifies the ending value for numeric grouping. </param>
    ///  <param name="groupByList">Specifies the grouping type list. Specified by PivotTableGroupType</param>
    ///  <param name="intervalNum">Specifies the interval number group by  numeric grouping.</param>
    procedure SetManualGroupField(baseFieldIndex: Int32; startVal: Double; endVal: Double; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Double); overload;
    ///<summary>
    ///  Sets manual field group by the PivotTable.
    ///</summary>
    ///  <param name="pivotField">The row or column field in the base fields</param>
    ///  <param name="startVal">Specifies the starting value for numeric grouping.</param>
    ///  <param name="endVal">Specifies the ending value for numeric grouping. </param>
    ///  <param name="groupByList">Specifies the grouping type list. Specified by PivotTableGroupType</param>
    ///  <param name="intervalNum">Specifies the interval number group by numeric grouping.</param>
    procedure SetManualGroupField(pivotField: DNPivotField; startVal: Double; endVal: Double; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Double); overload;
    ///<summary>
    ///  Sets manual field group by the PivotTable.
    ///</summary>
    ///  <param name="baseFieldIndex">The row or column field index in the base fields</param>
    ///  <param name="startVal">Specifies the starting value for date grouping. </param>
    ///  <param name="endVal">Specifies the ending value for date grouping.</param>
    ///  <param name="groupByList">Specifies the grouping type list. Specified by PivotTableGroupType</param>
    ///  <param name="intervalNum">Specifies the interval number group by in days grouping.The number of days must be positive integer of nonzero</param>
    procedure SetManualGroupField(baseFieldIndex: Int32; startVal: DDN.mscorlib.DNDateTime; endVal: DDN.mscorlib.DNDateTime; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Int32); overload;
    ///<summary>
    ///  Sets manual field group by the PivotTable.
    ///</summary>
    ///  <param name="pivotField">The row or column field in the base fields</param>
    ///  <param name="startVal">Specifies the starting value for date grouping.</param>
    ///  <param name="endVal">Specifies the ending value for date grouping.</param>
    ///  <param name="groupByList">Specifies the grouping type list. Specified by PivotTableGroupType</param>
    ///  <param name="intervalNum">Specifies the interval number group by in days grouping.The number of days must be positive integer of nonzero</param>
    procedure SetManualGroupField(pivotField: DNPivotField; startVal: DDN.mscorlib.DNDateTime; endVal: DDN.mscorlib.DNDateTime; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Int32); overload;
    ///<summary>
    ///  Sets ungroup by the PivotTable
    ///</summary>
    ///  <param name="baseFieldIndex">The row or column field index in the base fields</param>
    procedure SetUngroup(baseFieldIndex: Int32); overload;
    ///<summary>
    ///  Sets ungroup by the PivotTable
    ///</summary>
    ///  <param name="pivotField">The row or column field in the base fields</param>
    procedure SetUngroup(pivotField: DNPivotField); overload;
    ///<summary>
    ///  get pivot table row index list of horizontal pagebreaks
    ///</summary>
    ///<returns></returns>
    function GetHorizontalBreaks: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Layouts the PivotTable in compact form.
    ///</summary>
    procedure ShowInCompactForm;
    ///<summary>
    ///  Layouts the PivotTable in outline form.
    ///</summary>
    procedure ShowInOutlineForm;
    ///<summary>
    ///  Layouts the PivotTable in tabular form.
    ///</summary>
    procedure ShowInTabularForm;
    ///<summary>
    ///  Gets the Cell object by the DisplayName of PivotField
    ///</summary>
    ///  <param name="displayName">the DisplayName of PivotField</param>
    ///<returns>the Cell object</returns>
    function GetCellByDisplayName(displayName: string): DNCell;
    ///<summary>
    ///  Gets the Children Pivot Tables which use this PivotTable data as data source.
    ///</summary>
    ///<returns>the PivotTable array object</returns>
    function GetChildren: TArray<DNPivotTable>;
    ///<summary>
    ///  Performs application-defined tasks associated with freeing, releasing, or
    ///  resetting unmanaged resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Copies named style from another pivot table.
    ///</summary>
    ///  <param name="pivotTable">Source pivot table.</param>
    procedure CopyStyle(pivotTable: DNPivotTable);
    ///<summary>
    ///  Show all the report filter pages according to PivotField, the PivotField must be located in the PageFields.
    ///</summary>
    ///  <param name="pageField">The PivotField object</param>
    procedure ShowReportFilterPage(pageField: DNPivotField);
    ///<summary>
    ///  Show all the report filter pages according to PivotField's name, the PivotField must be located in the PageFields.
    ///</summary>
    ///  <param name="fieldName">The name of PivotField</param>
    procedure ShowReportFilterPageByName(fieldName: string);
    ///<summary>
    ///  Show all the report filter pages according to the position index in the PageFields
    ///</summary>
    ///  <param name="posIndex">The position index in the PageFields</param>
    procedure ShowReportFilterPageByIndex(posIndex: Int32);
    ///<summary>
    ///  Removes a field from specific field area
    ///</summary>
    ///  <param name="fieldType">The fields area type.</param>
    ///  <param name="fieldName">The name in the base fields.</param>
    ///<see cref="M:Aspose.Cells.Pivot.PivotTable.RemoveField(Aspose.Cells.Pivot.PivotFieldType,Aspose.Cells.Pivot.PivotField)" />
    procedure RemoveField(fieldType: DNPivotFieldType; fieldName: string); overload;
    ///<summary>
    ///  Removes a field from specific field area
    ///</summary>
    ///  <param name="fieldType">The fields area type.</param>
    ///  <param name="baseFieldIndex">The field index in the base fields.</param>
    ///<see cref="M:Aspose.Cells.Pivot.PivotTable.RemoveField(Aspose.Cells.Pivot.PivotFieldType,Aspose.Cells.Pivot.PivotField)" />
    procedure RemoveField(fieldType: DNPivotFieldType; baseFieldIndex: Int32); overload;
    ///<summary>
    ///  Remove field from specific field area
    ///</summary>
    ///  <param name="fieldType">the fields area type.It could be one of the following
    ///  values: <table border="1"><tr><td>PivotFieldType.Row</td>
    ///</tr>
    ///    <tr><td>PivotFieldType.Column</td>
    ///</tr>
    ///    <tr><td>PivotFieldType.Data</td>
    ///</tr>
    ///    <tr><td>PivotFieldType.Page</td>
    ///</tr>
    ///</table>
    ///</param>
    ///  <param name="pivotField">the field in the base fields.</param>
    procedure RemoveField(fieldType: DNPivotFieldType; pivotField: DNPivotField); overload;
    ///<summary>
    ///  Adds the field to the specific area.
    ///</summary>
    ///  <param name="fieldType">The fields area type.</param>
    ///  <param name="fieldName">The name in the base fields.</param>
    ///<returns>The field position in the specific fields.If there is no field named as it, return -1.</returns>
    ///<see cref="M:Aspose.Cells.Pivot.PivotTable.AddFieldToArea(Aspose.Cells.Pivot.PivotFieldType,Aspose.Cells.Pivot.PivotField)" />
    function AddFieldToArea(fieldType: DNPivotFieldType; fieldName: string): Int32; overload;
    ///<summary>
    ///  Adds the field to the specific area.
    ///</summary>
    ///  <param name="fieldType">The fields area type.</param>
    ///  <param name="baseFieldIndex">The field index in the base fields.</param>
    ///<returns>The field position in the specific fields.</returns>
    ///<see cref="M:Aspose.Cells.Pivot.PivotTable.AddFieldToArea(Aspose.Cells.Pivot.PivotFieldType,Aspose.Cells.Pivot.PivotField)" />
    function AddFieldToArea(fieldType: DNPivotFieldType; baseFieldIndex: Int32): Int32; overload;
    ///<summary>
    ///  Adds the field to the specific area.
    ///</summary>
    ///  <param name="fieldType">the fields area type.It could be one of the following
    ///  values: <table border="1"><tr><td>PivotFieldType.Row</td>
    ///</tr>
    ///    <tr><td>PivotFieldType.Column</td>
    ///</tr>
    ///    <tr><td>PivotFieldType.Data</td>
    ///</tr>
    ///    <tr><td>PivotFieldType.Page</td>
    ///</tr>
    ///</table>
    ///</param>
    ///  <param name="pivotField">the field in the base fields.</param>
    ///<returns>the field position in the specific fields.</returns>
    function AddFieldToArea(fieldType: DNPivotFieldType; pivotField: DNPivotField): Int32; overload;
    ///<summary>
    ///  Adds a calculated field to pivot field.
    ///</summary>
    ///  <param name="name">The name of the calculated field</param>
    ///  <param name="formula">The formula of the calculated field.</param>
    ///  <param name="dragToDataArea">True,drag this field to data area immediately</param>
    procedure AddCalculatedField(name: string; formula: string; dragToDataArea: Boolean); overload;
    ///<summary>
    ///  Adds a calculated field to pivot field and drag it to data area.
    ///</summary>
    ///  <param name="name">The name of the calculated field</param>
    ///  <param name="formula">The formula of the calculated field.</param>
    procedure AddCalculatedField(name: string; formula: string); overload;
    ///<summary>
    ///  Gets the specific fields by the field type.
    ///</summary>
    ///  <param name="fieldType">the field type.</param>
    ///<returns>the specific fields</returns>
    function Fields(fieldType: DNPivotFieldType): DNPivotFieldCollection;
    ///<summary>
    ///  Moves the PivotTable to a different location in the worksheet.
    ///</summary>
    ///  <param name="row">row index.</param>
    ///  <param name="column">column index.</param>
    procedure Move(row: Int32; column: Int32); overload;
    ///<summary>
    ///  Moves the PivotTable to a different location in the worksheet.
    ///</summary>
    ///  <param name="destCellName">the dest cell name.</param>
    procedure Move(destCellName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the PivotTable is compatible for Excel2003 when refreshing PivotTable,
    ///  if true, a string must be less than or equal to 255 characters, so if the string is greater than 255 characters,
    ///  it will be truncated. if false, a string will not have the aforementioned restriction.
    ///  The default value is true.
    ///</summary>
    property IsExcel2003Compatible: Boolean read get_IsExcel2003Compatible write set_IsExcel2003Compatible;
    ///<summary>
    ///  Gets the name of the user who last refreshed the PivotTable
    ///</summary>
    property RefreshedByWho: string read get_RefreshedByWho;
    ///<summary>
    ///  Gets the date when the PivotTable was last refreshed.
    ///</summary>
    property RefreshDate: DDN.mscorlib.DNDateTime read get_RefreshDate;
    ///<summary>
    ///  Gets and sets the pivottable style name.
    ///</summary>
    property PivotTableStyleName: string read get_PivotTableStyleName write set_PivotTableStyleName;
    ///<summary>
    ///  Gets and sets the built-in pivot table style.
    ///</summary>
    property PivotTableStyleType: DNPivotTableStyleType read get_PivotTableStyleType write set_PivotTableStyleType;
    ///<summary>
    ///  Returns a PivotFields object that are currently shown as column fields.
    ///</summary>
    property ColumnFields: DNPivotFieldCollection read get_ColumnFields;
    ///<summary>
    ///  Returns a PivotFields object that are currently shown as row fields.
    ///</summary>
    property RowFields: DNPivotFieldCollection read get_RowFields;
    ///<summary>
    ///  Returns a PivotFields object that are currently shown as page fields.
    ///</summary>
    property PageFields: DNPivotFieldCollection read get_PageFields;
    ///<summary>
    ///  Gets a PivotField object that represents all the data fields in a PivotTable.
    ///  Read-only.It would be init only when there are two or more data fields in the DataPiovtFiels.
    ///  It only use to add DataPivotField to the PivotTable row/column area . Default is in row area.
    ///</summary>
    property DataFields: DNPivotFieldCollection read get_DataFields;
    ///<summary>
    ///  Gets a PivotField object that represents all the data fields in a PivotTable.
    ///  Read-only.It would be init only when there are two or more data fields in the DataPiovtFiels.
    ///  It only use to add DataPivotField to the PivotTable row/column area . Default is in row area.
    ///</summary>
    property DataField: DNPivotField read get_DataField;
    ///<summary>
    ///  Returns a PivotFields object that includes all fields in the PivotTable report
    ///</summary>
    property BaseFields: DNPivotFieldCollection read get_BaseFields;
    ///<summary>
    ///  Returns a PivotFilterCollection object.
    ///</summary>
    property PivotFilters: DNPivotFilterCollection read get_PivotFilters;
    ///<summary>
    ///  Returns a CellArea object that represents the range
    ///  that contains the column area in the PivotTable report. Read-only.
    ///</summary>
    property ColumnRange: DNCellArea read get_ColumnRange;
    ///<summary>
    ///  Returns a CellArea object that represents the range
    ///  that contains the row area in the PivotTable report. Read-only.
    ///</summary>
    property RowRange: DNCellArea read get_RowRange;
    ///<summary>
    ///  Returns a CellArea object that represents the range that contains the data area
    ///  in the list between the header row and the insert row. Read-only.
    ///</summary>
    property DataBodyRange: DNCellArea read get_DataBodyRange;
    ///<summary>
    ///  Returns a CellArea object that represents the range containing the entire PivotTable report,
    ///  but doesn't include page fields. Read-only.
    ///</summary>
    property TableRange1: DNCellArea read get_TableRange1;
    ///<summary>
    ///  Returns a CellArea object that represents the range containing the entire PivotTable report,
    ///  includes page fields. Read-only.
    ///</summary>
    property TableRange2: DNCellArea read get_TableRange2;
    ///<summary>
    ///  Indicates whether the PivotTable report shows grand totals for columns.
    ///</summary>
    property ColumnGrand: Boolean read get_ColumnGrand write set_ColumnGrand;
    ///<summary>
    ///  Indicates whether the PivotTable report displays classic pivottable layout.
    ///  (enables dragging fields in the grid)
    ///</summary>
    property IsGridDropZones: Boolean read get_IsGridDropZones write set_IsGridDropZones;
    ///<summary>
    ///  Indicates whether the PivotTable report shows grand totals for rows.
    ///</summary>
    property RowGrand: Boolean read get_RowGrand write set_RowGrand;
    ///<summary>
    ///  Indicates whether the PivotTable report displays a custom string
    ///  in cells that contain null values.
    ///</summary>
    property DisplayNullString: Boolean read get_DisplayNullString write set_DisplayNullString;
    ///<summary>
    ///  Gets the string displayed in cells that contain null values
    ///  when the DisplayNullString property is true.The default value is an empty string.
    ///</summary>
    property NullString: string read get_NullString write set_NullString;
    ///<summary>
    ///  Indicates whether the PivotTable report displays a custom string in cells that contain errors.
    ///</summary>
    property DisplayErrorString: Boolean read get_DisplayErrorString write set_DisplayErrorString;
    ///<summary>
    ///  Gets the string displayed in cells that contain errors
    ///  when the DisplayErrorString property is true.The default value is an empty string.
    ///</summary>
    property ErrorString: string read get_ErrorString write set_ErrorString;
    ///<summary>
    ///  Indicates whether the PivotTable report is automatically formatted.
    ///  Checkbox "autoformat table " which is in pivottable option for Excel 2003
    ///  Checkbox "autofit column width on update" which is in pivot table Options :Layout Format for Excel 2007
    ///</summary>
    property IsAutoFormat: Boolean read get_IsAutoFormat write set_IsAutoFormat;
    ///<summary>
    ///  Gets the PivotTable auto format type.
    ///</summary>
    ///<see cref="T:Aspose.Cells.Pivot.PivotTableAutoFormatType" />
    property AutoFormatType: DNPivotTableAutoFormatType read get_AutoFormatType write set_AutoFormatType;
    ///<summary>
    ///  Indicates whether to add blank rows.
    ///  This property only applies for the PivotTable auto format types which needs to add blank rows.
    ///</summary>
    property HasBlankRows: Boolean read get_HasBlankRows write set_HasBlankRows;
    ///<summary>
    ///  Indicates whether the specified PivotTable report's outer-row item, column item, subtotal,
    ///  and grand total labels use merged cells.
    ///</summary>
    property MergeLabels: Boolean read get_MergeLabels write set_MergeLabels;
    ///<summary>
    ///  Indicates whether formatting is preserved when the PivotTable is refreshed or recalculated.
    ///</summary>
    property PreserveFormatting: Boolean read get_PreserveFormatting write set_PreserveFormatting;
    ///<summary>
    ///  Gets whether expand/collapse buttons is shown.
    ///</summary>
    property ShowDrill: Boolean read get_ShowDrill write set_ShowDrill;
    ///<summary>
    ///  Gets whether drilldown is enabled.
    ///</summary>
    property EnableDrilldown: Boolean read get_EnableDrilldown write set_EnableDrilldown;
    ///<summary>
    ///  Indicates whether the PivotTable Field dialog box is available
    ///  when the user double-clicks the PivotTable field.
    ///</summary>
    property EnableFieldDialog: Boolean read get_EnableFieldDialog write set_EnableFieldDialog;
    ///<summary>
    ///  Gets whether enable the field list for the PivotTable.
    ///</summary>
    property EnableFieldList: Boolean read get_EnableFieldList write set_EnableFieldList;
    ///<summary>
    ///  Indicates whether the PivotTable Wizard is available.
    ///</summary>
    property EnableWizard: Boolean read get_EnableWizard write set_EnableWizard;
    ///<summary>
    ///  Indicates whether hidden page field items in the PivotTable report
    ///  are included in row and column subtotals, block totals, and grand totals.
    ///  The default value is False.
    ///</summary>
    property SubtotalHiddenPageItems: Boolean read get_SubtotalHiddenPageItems write set_SubtotalHiddenPageItems;
    ///<summary>
    ///  Returns the text string label that is displayed in the grand total column or row heading.
    ///  The default value is the string "Grand Total".
    ///</summary>
    property GrandTotalName: string read get_GrandTotalName write set_GrandTotalName;
    ///<summary>
    ///  Indicates whether the PivotTable report is recalculated only at the user's request.
    ///</summary>
    property ManualUpdate: Boolean read get_ManualUpdate write set_ManualUpdate;
    ///<summary>
    ///  Specifies a boolean value that indicates whether the fields of a PivotTable can have multiple filters set on them.
    ///</summary>
    property IsMultipleFieldFilters: Boolean read get_IsMultipleFieldFilters write set_IsMultipleFieldFilters;
    ///<summary>
    ///  Specifies a boolean value that indicates whether the fields of a PivotTable can have multiple filters set on them.
    ///</summary>
    property MissingItemsLimit: DNPivotMissingItemLimitType read get_MissingItemsLimit write set_MissingItemsLimit;
    ///<summary>
    ///  Specifies a boolean value that indicates whether the user is allowed to edit the cells in the data area of the pivottable.
    ///  Enable cell editing in the values area
    ///</summary>
    property EnableDataValueEditing: Boolean read get_EnableDataValueEditing write set_EnableDataValueEditing;
    ///<summary>
    ///  Specifies a boolean value that indicates whether tooltips should be displayed for PivotTable data cells.
    ///</summary>
    property ShowDataTips: Boolean read get_ShowDataTips write set_ShowDataTips;
    ///<summary>
    ///  Specifies a boolean value that indicates whether member property information should be omitted from PivotTable tooltips.
    ///</summary>
    property ShowMemberPropertyTips: Boolean read get_ShowMemberPropertyTips write set_ShowMemberPropertyTips;
    ///<summary>
    ///  Specifies a boolean value that indicates whether show values row.
    ///  show the values row
    ///</summary>
    property ShowValuesRow: Boolean read get_ShowValuesRow write set_ShowValuesRow;
    ///<summary>
    ///  Specifies a boolean value that indicates whether to include empty columns in the table
    ///</summary>
    property ShowEmptyCol: Boolean read get_ShowEmptyCol write set_ShowEmptyCol;
    ///<summary>
    ///  Specifies a boolean value that indicates whether to include empty rows in the table.
    ///</summary>
    property ShowEmptyRow: Boolean read get_ShowEmptyRow write set_ShowEmptyRow;
    ///<summary>
    ///  Specifies a boolean value that indicates whether fields in the PivotTable are sorted in non-default order in the field list.
    ///</summary>
    property FieldListSortAscending: Boolean read get_FieldListSortAscending write set_FieldListSortAscending;
    ///<summary>
    ///  Specifies a boolean value that indicates whether drill indicators should be printed.
    ///  print expand/collapse buttons when displayed on pivottable.
    ///</summary>
    property PrintDrill: Boolean read get_PrintDrill write set_PrintDrill;
    ///<summary>
    ///  Gets the title of the altertext
    ///</summary>
    property AltTextTitle: string read get_AltTextTitle write set_AltTextTitle;
    ///<summary>
    ///  Gets the description of the alt text
    ///</summary>
    property AltTextDescription: string read get_AltTextDescription write set_AltTextDescription;
    ///<summary>
    ///  Gets the name of the PivotTable
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the Column Header Caption of the PivotTable.
    ///</summary>
    property ColumnHeaderCaption: string read get_ColumnHeaderCaption write set_ColumnHeaderCaption;
    ///<summary>
    ///  Specifies the indentation increment for compact axis and can be used to set the Report Layout to Compact Form.
    ///</summary>
    property Indent: Int32 read get_Indent write set_Indent;
    ///<summary>
    ///  Gets the Row Header Caption of the PivotTable.
    ///</summary>
    property RowHeaderCaption: string read get_RowHeaderCaption write set_RowHeaderCaption;
    ///<summary>
    ///  Indicates whether row header caption is shown in the PivotTable report
    ///  Indicates whether Display field captions and filter drop downs
    ///</summary>
    property ShowRowHeaderCaption: Boolean read get_ShowRowHeaderCaption write set_ShowRowHeaderCaption;
    ///<summary>
    ///  Indicates whether consider built-in custom list when sort data
    ///</summary>
    property CustomListSort: Boolean read get_CustomListSort write set_CustomListSort;
    ///<summary>
    ///  Gets the Format Conditions of the pivot table.
    ///</summary>
    property PivotFormatConditions: DNPivotFormatConditionCollection read get_PivotFormatConditions;
    ///<summary>
    ///  Gets the order in which page fields are added to the PivotTable report's layout.
    ///</summary>
    property PageFieldOrder: DNPrintOrderType read get_PageFieldOrder write set_PageFieldOrder;
    ///<summary>
    ///  Gets the number of page fields in each column or row in the PivotTable report.
    ///</summary>
    property PageFieldWrapCount: Int32 read get_PageFieldWrapCount write set_PageFieldWrapCount;
    ///<summary>
    ///  Gets a string saved with the PivotTable report.
    ///</summary>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Indicates whether data for the PivotTable report is saved with the workbook.
    ///</summary>
    property SaveData: Boolean read get_SaveData write set_SaveData;
    ///<summary>
    ///  Indicates whether Refresh Data when Opening File.
    ///</summary>
    property RefreshDataOnOpeningFile: Boolean read get_RefreshDataOnOpeningFile write set_RefreshDataOnOpeningFile;
    ///<summary>
    ///  Indicates whether Refresh Data or not.
    ///</summary>
    property RefreshDataFlag: Boolean read get_RefreshDataFlag write set_RefreshDataFlag;
    ///<summary>
    ///  Gets the external connection data source.
    ///</summary>
    property ExternalConnectionDataSource: DNExternalConnection read get_ExternalConnectionDataSource;
    ///<summary>
    ///  Gets and sets the data source of the pivot table.
    ///</summary>
    property DataSource: TArray<string> read get_DataSource write set_DataSource;
    ///<summary>
    ///  A bit that specifies whether pivot item captions on the row axis
    ///  are repeated on each printed page for pivot fields in tabular form.
    ///</summary>
    property ItemPrintTitles: Boolean read get_ItemPrintTitles write set_ItemPrintTitles;
    ///<summary>
    ///  Indicates whether the print titles for the worksheet are set based
    ///  on the PivotTable report. The default value is false.
    ///</summary>
    property PrintTitles: Boolean read get_PrintTitles write set_PrintTitles;
    ///<summary>
    ///  Indicates whether items in the row and column areas are visible
    ///  when the data area of the PivotTable is empty. The default value is true.
    ///</summary>
    property DisplayImmediateItems: Boolean read get_DisplayImmediateItems write set_DisplayImmediateItems;
    ///<summary>
    ///  Indicates whether the PivotTable is selected.
    ///</summary>
    property IsSelected: Boolean read get_IsSelected write set_IsSelected;
    ///<summary>
    ///  Indicates whether the row header in the pivot table should have the style applied.
    ///</summary>
    property ShowPivotStyleRowHeader: Boolean read get_ShowPivotStyleRowHeader write set_ShowPivotStyleRowHeader;
    ///<summary>
    ///  Indicates whether the column header in the pivot table should have the style applied.
    ///</summary>
    property ShowPivotStyleColumnHeader: Boolean read get_ShowPivotStyleColumnHeader write set_ShowPivotStyleColumnHeader;
    ///<summary>
    ///  Indicates whether row stripe formatting is applied.
    ///</summary>
    property ShowPivotStyleRowStripes: Boolean read get_ShowPivotStyleRowStripes write set_ShowPivotStyleRowStripes;
    ///<summary>
    ///  Indicates whether column stripe formatting is applied.
    ///</summary>
    property ShowPivotStyleColumnStripes: Boolean read get_ShowPivotStyleColumnStripes write set_ShowPivotStyleColumnStripes;
    ///<summary>
    ///  Indicates whether column stripe formatting is applied.
    ///</summary>
    property ShowPivotStyleLastColumn: Boolean read get_ShowPivotStyleLastColumn write set_ShowPivotStyleLastColumn;
  end;

  TDNPivotTable = class(TDNGenericImport<DNPivotTableClass, DNPivotTable>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNSxRngClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2839C1B8-DFA1-5133-B08C-3A3985621F6D}']
  end;

  ///<summary>
  ///  Represents Group Range in a PivotField.
  ///</summary>
  [DNTypeName('Aspose.Cells.Pivot.SxRng')]
  DNSxRng = interface(DDN.mscorlib.DNObject)
  ['{043C107A-BB72-340F-A58F-5C7FE13C0FDB}']
  { getters & setters } 

    function get_IsAutoStart: DDN.mscorlib.DNObject;
    function get_IsAutoEnd: DDN.mscorlib.DNObject;
    function get_Start: DDN.mscorlib.DNObject;
    function get_End: DDN.mscorlib.DNObject;
    function get_By: DDN.mscorlib.DNObject;
    function get_GroupByTypes: TArray<Boolean>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies a boolean value that indicates whether the application will use the source data to set the beginning range value.
    ///</summary>
    property IsAutoStart: DDN.mscorlib.DNObject read get_IsAutoStart;
    ///<summary>
    ///  Specifies a boolean value that indicates whether the application will use the source data to set the end range value.
    ///</summary>
    property IsAutoEnd: DDN.mscorlib.DNObject read get_IsAutoEnd;
    ///<summary>
    ///  Represents the start object for the group range.
    ///</summary>
    property Start: DDN.mscorlib.DNObject read get_Start;
    ///<summary>
    ///  Represents the end object for the group range.
    ///</summary>
    property &End: DDN.mscorlib.DNObject read get_End;
    ///<summary>
    ///  Represents the interval object for the group range.
    ///</summary>
    property By: DDN.mscorlib.DNObject read get_By;
    ///<summary>
    ///  Represents the group type for the group range.
    ///  rangeofvalue Seconds Minutes Hours Days Months Quarters Years
    ///</summary>
    property GroupByTypes: TArray<Boolean> read get_GroupByTypes;
  end;

  TDNSxRng = class(TDNGenericImport<DNSxRngClass, DNSxRng>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNContentTypePropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C0E1FD5C-42A2-5735-A93B-925485C05B2D}']
  end;

  ///<summary>
  ///  Represents identifier information.
  ///</summary>
  [DNTypeName('Aspose.Cells.Properties.ContentTypeProperty')]
  DNContentTypeProperty = interface(DDN.mscorlib.DNObject)
  ['{22254E85-5002-35ED-8873-CE0CC6153B6E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the name of the object.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the value of the content type property.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets and sets the type of the property.
    ///</summary>
    property &Type: string read get_Type write set_Type;
    ///<summary>
    ///  Indicates whether the value could be empty.
    ///</summary>
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
  end;

  TDNContentTypeProperty = class(TDNGenericImport<DNContentTypePropertyClass, DNContentTypeProperty>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNCustomPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F14F15C-4D4C-5940-B126-5E1B750CAFC8}']
  { constructors } 

    {class} function init: DNCustomProperty;

  end;

  ///<summary>
  ///  Represents identifier information.
  ///</summary>
  [DNTypeName('Aspose.Cells.Properties.CustomProperty')]
  DNCustomProperty = interface(DDN.mscorlib.DNObject)
  ['{15807470-4B41-3CA2-BAE4-1BACCA20912A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StringValue: string;
    procedure set_StringValue(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the name of the object.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the value of the custom property.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use CustomProperty.Value property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property StringValue: string read get_StringValue write set_StringValue;
    ///<summary>
    ///  Returns or sets the value of the custom property.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNCustomProperty = class(TDNGenericImport<DNCustomPropertyClass, DNCustomProperty>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNDocumentPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{962E040B-76A8-59DA-9FF6-28F361C72556}']
  end;

  ///<summary>
  ///  Represents a custom or built-in document property.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a Workbook object
  ///  Workbook workbook = new Workbook("C:\\book1.xls");
  ///  //Retrieve a list of all custom document properties of the Excel file
  ///  DocumentPropertyCollection customProperties = workbook.Worksheets.CustomDocumentProperties;
  ///  //Accessng a custom document property by using the property index
  ///  DocumentProperty customProperty1 = customProperties[3];
  ///  //Accessng a custom document property by using the property name
  ///  DocumentProperty customProperty2 = customProperties["Owner"];
  ///  [VB.NET]
  ///  'Instantiate a Workbook object
  ///  Dim workbook As Workbook = New Workbook("C:\\book1.xls")
  ///  'Retrieve a list of all custom document properties of the Excel file
  ///  Dim customProperties As DocumentPropertyCollection = workbook.Worksheets.CustomDocumentProperties
  ///  'Accessng a custom document property by using the property index
  ///  Dim customProperty1 As DocumentProperty = customProperties(3)
  ///  'Accessng a custom document property by using the property name
  ///  Dim customProperty2 As DocumentProperty = customProperties("Owner")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Properties.DocumentProperty')]
  DNDocumentProperty = interface(DDN.mscorlib.DNObject)
  ['{33257E93-0D15-312B-8766-25C17D147CF7}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_IsLinkedToContent: Boolean;
    function get_Source: string;
    function get_Type: DNPropertyType;
    function get_IsGeneratedName: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the property value as a string.
    ///</summary>
    ///<remarks><p>Converts a number property using Object.ToString(). Converts a boolean property
    ///  into "Y" or "N". Converts a date property into a short date string.</p>
    ///</remarks>
    function ToString: string;
    ///<summary>
    ///  Returns the property value as integer.
    ///</summary>
    ///<remarks>
    ///  Throws an exception if the property type is not PropertyType.Number.
    ///</remarks>
    function ToInt: Int32;
    ///<summary>
    ///  Returns the property value as double.
    ///</summary>
    ///<remarks>
    ///  Throws an exception if the property type is not PropertyType.Float.
    ///</remarks>
    function ToDouble: Double;
    ///<summary>
    ///  Returns the property value as DateTime in local timezone.
    ///</summary>
    ///<remarks><p>Throws an exception if the property type is not PropertyType.Date.</p>
    ///</remarks>
    function ToDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  Returns the property value as bool.
    ///</summary>
    ///<remarks><p>Throws an exception if the property type is not PropertyType.Boolean.</p>
    ///</remarks>
    function ToBool: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Returns the name of the property.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets or sets the value of the property.
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Indicates whether this property is linked to content
    ///</summary>
    property IsLinkedToContent: Boolean read get_IsLinkedToContent;
    ///<summary>
    ///  The linked content source.
    ///</summary>
    property Source: string read get_Source;
    ///<summary>
    ///  Gets the data type of the property.
    ///</summary>
    property &Type: DNPropertyType read get_Type;
    ///<summary>
    ///  Returns true if this property does not have a name in the OLE2 storage
    ///  and a unique name was generated only for the public API.
    ///</summary>
    property IsGeneratedName: Boolean read get_IsGeneratedName;
  end;

  TDNDocumentProperty = class(TDNGenericImport<DNDocumentPropertyClass, DNDocumentProperty>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNDocumentPropertyCollectionClass = interface(DNObjectClass)
  ['{047E3C42-D9C9-5714-A7C3-74F14BE65BF4}']
  end;

  ///<summary>
  ///  Base class for <see cref="T:Aspose.Cells.Properties.BuiltInDocumentPropertyCollection" />
  ///  and <see cref="T:Aspose.Cells.Properties.CustomDocumentPropertyCollection" />
  ///  collections.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a Workbook object by calling its empty constructor
  ///  Workbook workbook = new Workbook("C:\\book1.xls");
  ///  //Retrieve a list of all custom document properties of the Excel file
  ///  DocumentPropertyCollection customProperties = workbook.Worksheets.CustomDocumentProperties;
  ///  //Accessng a custom document property by using the property index
  ///  DocumentProperty customProperty1 = customProperties[3];
  ///  //Accessng a custom document property by using the property name
  ///  DocumentProperty customProperty2 = customProperties["Owner"];
  ///  [VB.NET]
  ///  'Instantiate a Workbook object by calling its empty constructor
  ///  Dim workbook As Workbook = New Workbook("C:\\book1.xls")
  ///  'Retrieve a list of all custom document properties of the Excel file
  ///  Dim customProperties As DocumentPropertyCollection = workbook.Worksheets.CustomDocumentProperties
  ///  'Accessng a custom document property by using the property index
  ///  Dim customProperty1 As DocumentProperty = customProperties(3)
  ///  'Accessng a custom document property by using the property name
  ///  Dim customProperty2 As DocumentProperty = customProperties("Owner")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Properties.DocumentPropertyCollection')]
  DNDocumentPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{0CA1E2BC-D26A-3E58-9FFA-ED2C09629891}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    ///<summary></summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Returns true if a property with the specified name exists in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>True if the property exists in the collection; false otherwise.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Gets the index of a property by name.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all properties from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNDocumentPropertyCollection = class(TDNGenericImport<DNDocumentPropertyCollectionClass, DNDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNBuiltInDocumentPropertyCollectionClass = interface(DNDocumentPropertyCollectionClass)
  ['{80A240BF-9676-52EE-8981-DBE425D9D523}']
  end;

  ///<summary>
  ///  A collection of built-in document properties.
  ///</summary>
  ///<remarks><p>Provides access to <see cref="T:Aspose.Cells.Properties.DocumentProperty" />
  ///  objects by their names (using an indexer) and
  ///  via a set of typed properties that return values of appropriate types.</p>
  ///</remarks>
  [DNTypeName('Aspose.Cells.Properties.BuiltInDocumentPropertyCollection')]
  DNBuiltInDocumentPropertyCollection = interface(DNDocumentPropertyCollection)
  ['{814C21B3-D3FC-3486-8EFC-45932AA53AE7}']
  { getters & setters } 

    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Bytes: Int32;
    procedure set_Bytes(value: Int32);
    function get_Characters: Int32;
    procedure set_Characters(value: Int32);
    function get_CharactersWithSpaces: Int32;
    procedure set_CharactersWithSpaces(value: Int32);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_CreatedUniversalTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedUniversalTime(value: DDN.mscorlib.DNDateTime);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastPrintedUniversalTime: DDN.mscorlib.DNDateTime;
    procedure set_LastPrintedUniversalTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedUniversalTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedUniversalTime(value: DDN.mscorlib.DNDateTime);
    function get_Lines: Int32;
    procedure set_Lines(value: Int32);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Pages: Int32;
    procedure set_Pages(value: Int32);
    function get_Paragraphs: Int32;
    procedure set_Paragraphs(value: Int32);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_Revision: string;
    procedure set_Revision(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Template: string;
    procedure set_Template(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TotalEditingTime: Double;
    procedure set_TotalEditingTime(value: Double);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_DocumentVersion: string;
    procedure set_DocumentVersion(value: string);
    function get_ScaleCrop: Boolean;
    procedure set_ScaleCrop(value: Boolean);
    function get_LinksUpToDate: Boolean;
    procedure set_LinksUpToDate(value: Boolean);
    function get_Words: Int32;
    procedure set_Words(value: Int32);
    function get_Count: Int32;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    ///<summary></summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Returns true if a property with the specified name exists in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>True if the property exists in the collection; false otherwise.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Gets the index of a property by name.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all properties from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNDocumentProperty read get_Item; default;
    ///<summary>
    ///  Gets or sets the document's language.
    ///</summary>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the name of the document's author.
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Represents an estimate of the number of bytes in the document.
    ///</summary>
    property Bytes: Int32 read get_Bytes write set_Bytes;
    ///<summary>
    ///  Represents an estimate of the number of characters in the document.
    ///</summary>
    property Characters: Int32 read get_Characters write set_Characters;
    ///<summary>
    ///  Represents an estimate of the number of characters (including spaces) in the document.
    ///</summary>
    property CharactersWithSpaces: Int32 read get_CharactersWithSpaces write set_CharactersWithSpaces;
    ///<summary>
    ///  Gets or sets the document comments.
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
    ///<summary>
    ///  Gets or sets the category of the document.
    ///</summary>
    property Category: string read get_Category write set_Category;
    ///<summary>
    ///  Gets or sets the content type of the document.
    ///</summary>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  Gets or sets the content status of the document.
    ///</summary>
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    ///<summary>
    ///  Gets or sets the company property.
    ///</summary>
    property Company: string read get_Company write set_Company;
    ///<summary>
    ///  Gets or sets the hyperlinkbase property.
    ///</summary>
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    ///<summary>
    ///  Gets or sets date of the document creation in local timezone.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Gets or sets the Universal time of the document creation.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property CreatedUniversalTime: DDN.mscorlib.DNDateTime read get_CreatedUniversalTime write set_CreatedUniversalTime;
    ///<summary>
    ///  Gets or sets the document keywords.
    ///</summary>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  Gets or sets the date when the document was last printed in local timezone.
    ///</summary>
    ///<remarks><p>If the document was never printed, this property will return DateTime.MinValue.</p>
    ///  <p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    ///<summary>
    ///  Gets or sets the Universal time when the document was last printed.
    ///</summary>
    property LastPrintedUniversalTime: DDN.mscorlib.DNDateTime read get_LastPrintedUniversalTime write set_LastPrintedUniversalTime;
    ///<summary>
    ///  Gets or sets the name of the last author.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    ///<summary>
    ///  Gets or sets the time of the last save in local timezone.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    ///<summary>
    ///  Gets or sets the universal time of the last save.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property LastSavedUniversalTime: DDN.mscorlib.DNDateTime read get_LastSavedUniversalTime write set_LastSavedUniversalTime;
    ///<summary>
    ///  Represents an estimate of the number of lines in the document.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property Lines: Int32 read get_Lines write set_Lines;
    ///<summary>
    ///  Gets or sets the manager property.
    ///</summary>
    property Manager: string read get_Manager write set_Manager;
    ///<summary>
    ///  Gets or sets the name of the application.
    ///</summary>
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    ///<summary>
    ///  Represents an estimate of the number of pages in the document.
    ///</summary>
    property Pages: Int32 read get_Pages write set_Pages;
    ///<summary>
    ///  Represents an estimate of the number of paragraphs in the document.
    ///</summary>
    property Paragraphs: Int32 read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets the document revision number.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    ///<remarks>NOTE: This property is now obsolete.
    ///  Instead, please use BuiltInDocumentPropertyCollection.Revision property,
    ///  this property will be removed 12 months later since February 2017.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    ///<summary>
    ///  Gets or sets the document revision number.
    ///</summary>
    ///<remarks><p>Aspose.Cells does not update this property when you modify the document.</p>
    ///</remarks>
    property Revision: string read get_Revision write set_Revision;
    ///<summary>
    ///  Gets or sets the subject of the document.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Gets or sets the informational name of the document template.
    ///</summary>
    property Template: string read get_Template write set_Template;
    ///<summary>
    ///  Gets or sets the title of the document.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the total editing time in minutes.
    ///</summary>
    property TotalEditingTime: Double read get_TotalEditingTime write set_TotalEditingTime;
    ///<summary>
    ///  Represents the version number of the application that created the document.
    ///</summary>
    ///<remarks>
    ///  It's format is "00.0000",for example : 12.0000
    ///</remarks>
    property Version: string read get_Version write set_Version;
    ///<summary>
    ///  Represents the version of the file.
    ///</summary>
    property DocumentVersion: string read get_DocumentVersion write set_DocumentVersion;
    ///<summary>
    ///  Indicates the display mode of the document thumbnail.
    ///</summary>
    property ScaleCrop: Boolean read get_ScaleCrop write set_ScaleCrop;
    ///<summary>
    ///  Indicates whether hyperlinks in a document are up-to-date.
    ///</summary>
    property LinksUpToDate: Boolean read get_LinksUpToDate write set_LinksUpToDate;
    ///<summary>
    ///  Represents an estimate of the number of words in the document.
    ///</summary>
    property Words: Int32 read get_Words write set_Words;
    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNBuiltInDocumentPropertyCollection = class(TDNGenericImport<DNBuiltInDocumentPropertyCollectionClass, DNBuiltInDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNCustomDocumentPropertyCollectionClass = interface(DNDocumentPropertyCollectionClass)
  ['{848A0884-DD8E-5B02-9614-5434E93482FB}']
  end;

  ///<summary>
  ///  A collection of custom document properties.
  ///</summary>
  ///<remarks><p>Each <see cref="T:Aspose.Cells.Properties.DocumentProperty" />
  ///  object represents a custom property of a container document.</p>
  ///</remarks>
  ///<example><code>
  ///  [C#]
  ///  //Instantiate a Workbook object
  ///  Workbook workbook = new Workbook("C:\\book1.xls");
  ///  //Retrieve a list of all custom document properties of the Excel file
  ///  CustomDocumentPropertyCollection customProperties = workbook.Worksheets.CustomDocumentProperties;
  ///  [VB.NET]
  ///  'Instantiate a Workbook object
  ///  Dim workbook As New Workbook("C:\book1.xls")
  ///  'Retrieve a list of all custom document properties of the Excel file
  ///  Dim customProperties As CustomDocumentPropertyCollection = workbook.Worksheets.CustomDocumentProperties
  ///</code></example>
  [DNTypeName('Aspose.Cells.Properties.CustomDocumentPropertyCollection')]
  DNCustomDocumentPropertyCollection = interface(DNDocumentPropertyCollection)
  ['{F821E8FE-C679-38F2-A85A-9446B31FAE75}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    ///<overloads>Creates a new custom document property.</overloads><summary>
    ///  Creates a new custom document property of the <b>PropertyType.String</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: string): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.Number</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: Int32): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.DateTime</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: DDN.mscorlib.DNDateTime): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.Boolean</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: Boolean): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.Float</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: Double): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property which links to content.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="source">The source of the property</param>
    ///<returns>The newly created property object.</returns>
    function AddLinkToContent(name: string; source: string): DNDocumentProperty;
    ///<summary>
    ///  Update custom document property value which links to content.
    ///</summary>
    procedure UpdateLinkedPropertyValue;
    ///<summary>
    ///  Update custom document property value to linked range.
    ///</summary>
    procedure UpdateLinkedRange;
    ///<summary></summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Returns true if a property with the specified name exists in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>True if the property exists in the collection; false otherwise.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Gets the index of a property by name.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all properties from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNCustomDocumentPropertyCollection = class(TDNGenericImport<DNCustomDocumentPropertyCollectionClass, DNCustomDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNProtectedRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7B34F60-8A4E-5410-95AB-FFEC06557ED2}']
  end;

  ///<summary>
  ///  A specified range to be allowed to edit when the sheet protection is ON.
  ///</summary>
  [DNTypeName('Aspose.Cells.ProtectedRange')]
  DNProtectedRange = interface(DDN.mscorlib.DNObject)
  ['{329055BA-BB62-302F-8431-E67DED36F647}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_CellArea: DNCellArea;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SecurityDescriptor: string;
    procedure set_SecurityDescriptor(value: string);

  { methods } 

    ///<summary>
    ///  Gets all referred areas.
    ///</summary>
    ///<returns>Returns all referred areas.</returns>
    function GetAreas: TArray<DNCellArea>;
    ///<summary>
    ///  Adds a referred area to this
    ///</summary>
    ///  <param name="startRow">The start row.</param>
    ///  <param name="startColumn">The start column.</param>
    ///  <param name="endRow">The end row.</param>
    ///  <param name="endColumn">The end column.</param>
    procedure AddArea(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the Range title. This is used as a descriptor, not as a named range definition.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.ProtectedRange.CellArea" />
    ///  object represents the cell area to be protected.
    ///</summary>
    property CellArea: DNCellArea read get_CellArea;
    ///<summary>
    ///  Represents the password to protect the range.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  The security descriptor defines user accounts who may edit this range without providing a password to access the range.
    ///</summary>
    property SecurityDescriptor: string read get_SecurityDescriptor write set_SecurityDescriptor;
  end;

  TDNProtectedRange = class(TDNGenericImport<DNProtectedRangeClass, DNProtectedRange>) end;

  //-------------namespace: Aspose.Cells----------------
  DNProtectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C29467D6-1CCC-565A-A060-3A2B5688195B}']
  end;

  ///<summary>
  ///  Represents the various types of protection options available for a worksheet.
  ///  Only used in ExcelXP and above version.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Allowing users to select locked cells of the worksheet
  ///  worksheet.Protection.AllowSelectingLockedCell = true;
  ///  //Allowing users to select unlocked cells of the worksheet
  ///  worksheet.Protection.AllowSelectingUnlockedCell = true;
  ///  [Visual Basic]
  ///  'Allowing users to select locked cells of the worksheet
  ///  worksheet.Protection.AllowSelectingLockedCell = True
  ///  'Allowing users to select unlocked cells of the worksheet
  ///  worksheet.Protection.AllowSelectingUnlockedCell = True
  ///</code></example>
  [DNTypeName('Aspose.Cells.Protection')]
  DNProtection = interface(DDN.mscorlib.DNObject)
  ['{FDEED681-CFC9-3995-A0FA-1AD11488CA5C}']
  { getters & setters } 

    function get_AllowDeletingColumn: Boolean;
    procedure set_AllowDeletingColumn(value: Boolean);
    function get_IsDeletingColumnsAllowed: Boolean;
    procedure set_IsDeletingColumnsAllowed(value: Boolean);
    function get_AllowDeletingRow: Boolean;
    procedure set_AllowDeletingRow(value: Boolean);
    function get_IsDeletingRowsAllowed: Boolean;
    procedure set_IsDeletingRowsAllowed(value: Boolean);
    function get_AllowFiltering: Boolean;
    procedure set_AllowFiltering(value: Boolean);
    function get_IsFilteringAllowed: Boolean;
    procedure set_IsFilteringAllowed(value: Boolean);
    function get_AllowFormattingCell: Boolean;
    procedure set_AllowFormattingCell(value: Boolean);
    function get_IsFormattingCellsAllowed: Boolean;
    procedure set_IsFormattingCellsAllowed(value: Boolean);
    function get_AllowFormattingColumn: Boolean;
    procedure set_AllowFormattingColumn(value: Boolean);
    function get_IsFormattingColumnsAllowed: Boolean;
    procedure set_IsFormattingColumnsAllowed(value: Boolean);
    function get_AllowFormattingRow: Boolean;
    procedure set_AllowFormattingRow(value: Boolean);
    function get_IsFormattingRowsAllowed: Boolean;
    procedure set_IsFormattingRowsAllowed(value: Boolean);
    function get_AllowInsertingColumn: Boolean;
    procedure set_AllowInsertingColumn(value: Boolean);
    function get_IsInsertingColumnsAllowed: Boolean;
    procedure set_IsInsertingColumnsAllowed(value: Boolean);
    function get_AllowInsertingHyperlink: Boolean;
    procedure set_AllowInsertingHyperlink(value: Boolean);
    function get_IsInsertingHyperlinksAllowed: Boolean;
    procedure set_IsInsertingHyperlinksAllowed(value: Boolean);
    function get_AllowInsertingRow: Boolean;
    procedure set_AllowInsertingRow(value: Boolean);
    function get_IsInsertingRowsAllowed: Boolean;
    procedure set_IsInsertingRowsAllowed(value: Boolean);
    function get_AllowSorting: Boolean;
    procedure set_AllowSorting(value: Boolean);
    function get_IsSortingAllowed: Boolean;
    procedure set_IsSortingAllowed(value: Boolean);
    function get_AllowUsingPivotTable: Boolean;
    procedure set_AllowUsingPivotTable(value: Boolean);
    function get_IsUsingPivotTablesAllowed: Boolean;
    procedure set_IsUsingPivotTablesAllowed(value: Boolean);
    function get_AllowEditingContent: Boolean;
    procedure set_AllowEditingContent(value: Boolean);
    function get_IsEditingContentsAllowed: Boolean;
    procedure set_IsEditingContentsAllowed(value: Boolean);
    function get_AllowEditingObject: Boolean;
    procedure set_AllowEditingObject(value: Boolean);
    function get_IsEditingObjectsAllowed: Boolean;
    procedure set_IsEditingObjectsAllowed(value: Boolean);
    function get_AllowEditingScenario: Boolean;
    procedure set_AllowEditingScenario(value: Boolean);
    function get_IsEditingScenariosAllowed: Boolean;
    procedure set_IsEditingScenariosAllowed(value: Boolean);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_IsProtectedWithPassword: Boolean;
    function get_AllowSelectingLockedCell: Boolean;
    procedure set_AllowSelectingLockedCell(value: Boolean);
    function get_IsSelectingLockedCellsAllowed: Boolean;
    procedure set_IsSelectingLockedCellsAllowed(value: Boolean);
    function get_AllowSelectingUnlockedCell: Boolean;
    procedure set_AllowSelectingUnlockedCell(value: Boolean);
    function get_IsSelectingUnlockedCellsAllowed: Boolean;
    procedure set_IsSelectingUnlockedCellsAllowed(value: Boolean);

  { methods } 

    ///<summary>
    ///  Copy protection info.
    ///</summary>
    ///  <param name="source"></param>
    procedure Copy(source: DNProtection);
    ///<summary>
    ///  Gets the hash of current password.
    ///</summary>
    function GetPasswordHash: Int32;
    ///<summary>
    ///  Verifies password.
    ///</summary>
    ///  <param name="password">The password.</param>
    ///<returns></returns>
    function VerifyPassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents if the deletion of columns is allowed on a protected worksheet.
    ///</summary>
    ///<remarks>The columns containing the cells to be deleted must be unlocked when the sheet is protected,
    ///  and "Select unlocked cells" option must be enabled. </remarks>
    property AllowDeletingColumn: Boolean read get_AllowDeletingColumn write set_AllowDeletingColumn;
    ///<summary>
    ///  Represents if the deletion of columns is allowed on a protected worksheet.
    ///</summary>
    ///<remarks>The columns containing the cells to be deleted must be unlocked when the sheet is protected,
    ///  and "Select unlocked cells" option must be enabled. </remarks>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowDeletingColumn property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsDeletingColumnsAllowed: Boolean read get_IsDeletingColumnsAllowed write set_IsDeletingColumnsAllowed;
    ///<summary>
    ///  Represents if the deletion of rows is allowed on a protected worksheet.
    ///</summary>
    ///<remarks>The rows containing the cells to be deleted must be unlocked when the sheet is protected,
    ///  and "Select unlocked cells" option must be enabled. </remarks>
    property AllowDeletingRow: Boolean read get_AllowDeletingRow write set_AllowDeletingRow;
    ///<summary>
    ///  Represents if the deletion of rows is allowed on a protected worksheet.
    ///</summary>
    ///<remarks>The rows containing the cells to be deleted must be unlocked when the sheet is protected,
    ///  and "Select unlocked cells" option must be enabled. </remarks>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowDeletingRow property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsDeletingRowsAllowed: Boolean read get_IsDeletingRowsAllowed write set_IsDeletingRowsAllowed;
    ///<summary>
    ///  Represents if the user is allowed to make use of an AutoFilter that was created before the sheet was protected.
    ///</summary>
    property AllowFiltering: Boolean read get_AllowFiltering write set_AllowFiltering;
    ///<summary>
    ///  Represents if the user is allowed to make use of an AutoFilter that was created before the sheet was protected.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowFiltering property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsFilteringAllowed: Boolean read get_IsFilteringAllowed write set_IsFilteringAllowed;
    ///<summary>
    ///  Represents if the formatting of cells is allowed on a protected worksheet.
    ///</summary>
    property AllowFormattingCell: Boolean read get_AllowFormattingCell write set_AllowFormattingCell;
    ///<summary>
    ///  Represents if the formatting of cells is allowed on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowFormattingCell property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsFormattingCellsAllowed: Boolean read get_IsFormattingCellsAllowed write set_IsFormattingCellsAllowed;
    ///<summary>
    ///  Represents if the formatting of columns is allowed on a protected worksheet
    ///</summary>
    property AllowFormattingColumn: Boolean read get_AllowFormattingColumn write set_AllowFormattingColumn;
    ///<summary>
    ///  Represents if the formatting of columns is allowed on a protected worksheet
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowFormattingColumn property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsFormattingColumnsAllowed: Boolean read get_IsFormattingColumnsAllowed write set_IsFormattingColumnsAllowed;
    ///<summary>
    ///  Represents if the formatting of rows is allowed on a protected worksheet
    ///</summary>
    property AllowFormattingRow: Boolean read get_AllowFormattingRow write set_AllowFormattingRow;
    ///<summary>
    ///  Represents if the formatting of rows is allowed on a protected worksheet
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowFormattingRow property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsFormattingRowsAllowed: Boolean read get_IsFormattingRowsAllowed write set_IsFormattingRowsAllowed;
    ///<summary>
    ///  Represents if the insertion of columns is allowed on a protected worksheet
    ///</summary>
    property AllowInsertingColumn: Boolean read get_AllowInsertingColumn write set_AllowInsertingColumn;
    ///<summary>
    ///  Represents if the insertion of columns is allowed on a protected worksheet
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowInsertingColumn property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsInsertingColumnsAllowed: Boolean read get_IsInsertingColumnsAllowed write set_IsInsertingColumnsAllowed;
    ///<summary>
    ///  Represents if the insertion of hyperlinks is allowed on a protected worksheet
    ///</summary>
    property AllowInsertingHyperlink: Boolean read get_AllowInsertingHyperlink write set_AllowInsertingHyperlink;
    ///<summary>
    ///  Represents if the insertion of hyperlinks is allowed on a protected worksheet
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowInsertingHyperlink property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsInsertingHyperlinksAllowed: Boolean read get_IsInsertingHyperlinksAllowed write set_IsInsertingHyperlinksAllowed;
    ///<summary>
    ///  Represents if the insertion of rows is allowed on a protected worksheet
    ///</summary>
    property AllowInsertingRow: Boolean read get_AllowInsertingRow write set_AllowInsertingRow;
    ///<summary>
    ///  Represents if the insertion of rows is allowed on a protected worksheet
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowInsertingRow property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsInsertingRowsAllowed: Boolean read get_IsInsertingRowsAllowed write set_IsInsertingRowsAllowed;
    ///<summary>
    ///  Represents if the sorting option is allowed on a protected worksheet.
    ///</summary>
    property AllowSorting: Boolean read get_AllowSorting write set_AllowSorting;
    ///<summary>
    ///  Represents if the sorting option is allowed on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowSorting property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsSortingAllowed: Boolean read get_IsSortingAllowed write set_IsSortingAllowed;
    ///<summary>
    ///  Represents if the user is allowed to manipulate pivot tables on a protected worksheet.
    ///</summary>
    property AllowUsingPivotTable: Boolean read get_AllowUsingPivotTable write set_AllowUsingPivotTable;
    ///<summary>
    ///  Represents if the user is allowed to manipulate pivot tables on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowUsingPivotTable property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsUsingPivotTablesAllowed: Boolean read get_IsUsingPivotTablesAllowed write set_IsUsingPivotTablesAllowed;
    ///<summary>
    ///  Represents if the user is allowed to edit contents of locked cells on a protected worksheet.
    ///</summary>
    property AllowEditingContent: Boolean read get_AllowEditingContent write set_AllowEditingContent;
    ///<summary>
    ///  Represents if the user is allowed to edit contents of locked cells on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowEditingContent property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsEditingContentsAllowed: Boolean read get_IsEditingContentsAllowed write set_IsEditingContentsAllowed;
    ///<summary>
    ///  Represents if the user is allowed to manipulate drawing objects on a protected worksheet.
    ///</summary>
    property AllowEditingObject: Boolean read get_AllowEditingObject write set_AllowEditingObject;
    ///<summary>
    ///  Represents if the user is allowed to manipulate drawing objects on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowEditingObject property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsEditingObjectsAllowed: Boolean read get_IsEditingObjectsAllowed write set_IsEditingObjectsAllowed;
    ///<summary>
    ///  Represents if the user is allowed to edit scenarios on a protected worksheet.
    ///</summary>
    property AllowEditingScenario: Boolean read get_AllowEditingScenario write set_AllowEditingScenario;
    ///<summary>
    ///  Represents if the user is allowed to edit scenarios on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowEditingScenario property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsEditingScenariosAllowed: Boolean read get_IsEditingScenariosAllowed write set_IsEditingScenariosAllowed;
    ///<summary>
    ///  Represents the password to protect the worksheet.
    ///</summary>
    ///<remarks>
    ///  If password is set to null or blank string, you can unprotect the worksheet or workbook without using a password. Otherwise, you must specify the password to unprotect the worksheet or workbook.
    ///</remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Indicates whether the worksheets is protected with password.
    ///</summary>
    property IsProtectedWithPassword: Boolean read get_IsProtectedWithPassword;
    ///<summary>
    ///  Represents if the user is allowed to select locked cells on a protected worksheet.
    ///</summary>
    property AllowSelectingLockedCell: Boolean read get_AllowSelectingLockedCell write set_AllowSelectingLockedCell;
    ///<summary>
    ///  Represents if the user is allowed to select locked cells on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowSelectingLockedCell property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsSelectingLockedCellsAllowed: Boolean read get_IsSelectingLockedCellsAllowed write set_IsSelectingLockedCellsAllowed;
    ///<summary>
    ///  Represents if the user is allowed to select unlocked cells on a protected worksheet.
    ///</summary>
    property AllowSelectingUnlockedCell: Boolean read get_AllowSelectingUnlockedCell write set_AllowSelectingUnlockedCell;
    ///<summary>
    ///  Represents if the user is allowed to select unlocked cells on a protected worksheet.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Protection.AllowSelectingUnlockedCell property.
    ///  This property will be removed 12 months later since June 2010.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property IsSelectingUnlockedCellsAllowed: Boolean read get_IsSelectingUnlockedCellsAllowed write set_IsSelectingUnlockedCellsAllowed;
  end;

  TDNProtection = class(TDNGenericImport<DNProtectionClass, DNProtection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNQueryTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3136ED2F-8BC8-5F71-B185-EEAB0B888157}']
  end;

  ///<summary>
  ///  Represents QueryTable information.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTable')]
  DNQueryTable = interface(DDN.mscorlib.DNObject)
  ['{679D18C3-E8F8-34CA-A4D8-93F15C2D2116}']
  { getters & setters } 

    function get_ConnectionId: Int32;
    function get_ExternalConnection: DNExternalConnection;
    function get_Name: string;
    function get_ResultRange: DNRange;
    function get_PreserveFormatting: Boolean;
    procedure set_PreserveFormatting(value: Boolean);
    function get_AdjustColumnWidth: Boolean;
    procedure set_AdjustColumnWidth(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the connection id of the query table.
    ///</summary>
    property ConnectionId: Int32 read get_ConnectionId;
    ///<summary>
    ///  Gets the relate external connection.
    ///</summary>
    property ExternalConnection: DNExternalConnection read get_ExternalConnection;
    ///<summary>
    ///  Gets the name of querytable.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the range of the result.
    ///</summary>
    ///<returns></returns>
    property ResultRange: DNRange read get_ResultRange;
    ///<summary>
    ///  Returns or sets the PreserveFormatting of the object.
    ///</summary>
    property PreserveFormatting: Boolean read get_PreserveFormatting write set_PreserveFormatting;
    ///<summary>
    ///  Returns or sets the AdjustColumnWidth of the object.
    ///</summary>
    property AdjustColumnWidth: Boolean read get_AdjustColumnWidth write set_AdjustColumnWidth;
  end;

  TDNQueryTable = class(TDNGenericImport<DNQueryTableClass, DNQueryTable>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNDataMashupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7CC1D30C-C9A6-5ED0-B078-7E098E294729}']
  end;

  ///<summary>
  ///  Represents mashup data.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.DataMashup')]
  DNDataMashup = interface(DDN.mscorlib.DNObject)
  ['{D20D3551-0B7C-3441-BEC9-C07C47DEBEC5}']
  { getters & setters } 

    function get_PowerQueryFormulas: DNPowerQueryFormulaCollction;
    function get_PowerQueryFormulaParameters: DNPowerQueryFormulaParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets all power query formulas.
    ///</summary>
    property PowerQueryFormulas: DNPowerQueryFormulaCollction read get_PowerQueryFormulas;
    ///<summary>
    ///  Gets all parameters of power query formulas.
    ///</summary>
    property PowerQueryFormulaParameters: DNPowerQueryFormulaParameterCollection read get_PowerQueryFormulaParameters;
  end;

  TDNDataMashup = class(TDNGenericImport<DNDataMashupClass, DNDataMashup>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0637AF15-DCA0-54BA-B861-7FC652A30D38}']
  end;

  ///<summary>
  ///  Represents the definition of power query formula.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormula')]
  DNPowerQueryFormula = interface(DDN.mscorlib.DNObject)
  ['{717B1870-44D2-3802-BBE3-4DA61F1376AA}']
  { getters & setters } 

    function get_FormulaDefinition: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the definition of the power query formula.
    ///</summary>
    property FormulaDefinition: string read get_FormulaDefinition;
    ///<summary>
    ///  Gets and sets the name of the power query formula.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets all items of power query formula.
    ///</summary>
    property PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection read get_PowerQueryFormulaItems;
  end;

  TDNPowerQueryFormula = class(TDNGenericImport<DNPowerQueryFormulaClass, DNPowerQueryFormula>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaFunctionClass = interface(DNPowerQueryFormulaClass)
  ['{CA5895F6-370D-5651-9384-73779B391971}']
  end;

  ///<summary>
  ///  Represents the function of power query.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaFunction')]
  DNPowerQueryFormulaFunction = interface(DNPowerQueryFormula)
  ['{2543BC05-C7C0-3793-BFF1-A64BB286B507}']
  { getters & setters } 

    function get_F: string;
    procedure set_F(value: string);
    function get_FormulaDefinition: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the definition of function.
    ///</summary>
    property F: string read get_F write set_F;
    ///<summary>
    ///  Gets the definition of the power query formula.
    ///</summary>
    property FormulaDefinition: string read get_FormulaDefinition;
    ///<summary>
    ///  Gets and sets the name of the power query formula.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets all items of power query formula.
    ///</summary>
    property PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection read get_PowerQueryFormulaItems;
  end;

  TDNPowerQueryFormulaFunction = class(TDNGenericImport<DNPowerQueryFormulaFunctionClass, DNPowerQueryFormulaFunction>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60E800A2-EC53-59E6-8BC2-B9BA0DBEDC88}']
  end;

  ///<summary>
  ///  Represents the item of the power query formula.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaItem')]
  DNPowerQueryFormulaItem = interface(DDN.mscorlib.DNObject)
  ['{15D124B6-2482-3AA1-BD7C-198733FDA35B}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the name of the item.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the value of the item.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNPowerQueryFormulaItem = class(TDNGenericImport<DNPowerQueryFormulaItemClass, DNPowerQueryFormulaItem>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaParameterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8397853D-66A0-5017-B46E-C5C20E51254D}']
  { constructors } 

    {class} function init: DNPowerQueryFormulaParameter;

  end;

  ///<summary>
  ///  Represents the parameter of power query formula.
  ///</summary>
  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaParameter')]
  DNPowerQueryFormulaParameter = interface(DDN.mscorlib.DNObject)
  ['{59772A29-9567-384B-B12E-475EEC6A943E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParameterDefinition: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the name of parameter.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the value of parameter.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets the definition of the parameter.
    ///</summary>
    property ParameterDefinition: string read get_ParameterDefinition;
  end;

  TDNPowerQueryFormulaParameter = class(TDNGenericImport<DNPowerQueryFormulaParameterClass, DNPowerQueryFormulaParameter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C36302C-C7D7-51A5-AAEA-6CF4739AB592}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a range of cells within a spreadsheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Range')]
  DNRange = interface(DDN.mscorlib.DNObject)
  ['{B21AA8C9-53BD-3DC0-8F98-C387C5422AC6}']
  { getters & setters } 

    function get_Hyperlinks: TArray<DNHyperlink>;
    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_CellCount: Int32;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefersTo: string;
    function get_Address: string;
    function get_FirstRow: Int32;
    function get_FirstColumn: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_ColumnWidth: Double;
    procedure set_ColumnWidth(value: Double);
    function get_RowHeight: Double;
    procedure set_RowHeight(value: Double);
    function get_Item(rowOffset: Int32; columnOffset: Int32): DNCell;
    function get_EntireColumn: DNRange;
    function get_EntireRow: DNRange;
    function get_Worksheet: DNWorksheet;

  { methods } 

    ///<summary>
    ///  Gets the enumerator for cells in this Range.
    ///</summary>
    ///<returns>The cells enumerator</returns>
    ///<remarks>When traversing elements by the returned Enumerator, the cells collection
    ///  should not be modified(such as operations that will cause new Cell/Row be instantiated or existing Cell/Row be deleted).
    ///  Otherwise the enumerator may not be able to traverse all cells correctly(some elements may be traversed repeatedly or skipped).</remarks>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Indicates whether the range is intersect.
    ///</summary>
    ///  <param name="range">The range.</param>
    ///<returns> Whether the range is intersect.</returns>
    ///<remarks>If the two ranges area not in the same worksheet ,return false.</remarks>
    function IsIntersect(range: DNRange): Boolean;
    ///<summary>
    ///  Returns a Range object that represents the rectangular intersection of two ranges.
    ///</summary>
    ///  <param name="range">The intersecting range.</param>
    ///<returns>a Range object</returns>
    ///<remarks>If the two ranges are not intersected, returns null.</remarks>
    function Intersect(range: DNRange): DNRange;
    ///<summary>
    ///  Returns the union of two ranges.
    ///</summary>
    ///  <param name="range">The range</param>
    ///<returns>The union of two ranges.
    ///</returns>
    function Union(range: DNRange): DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Combines a range of cells into a single cell.
    ///</summary>
    ///<remarks>
    ///  Reference the merged cell via the address of the upper-left cell in the range.
    ///</remarks>
    procedure Merge;
    ///<summary>
    ///  Unmerges merged cells of this range.
    ///</summary>
    procedure UnMerge;
    ///<summary>
    ///  Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
    ///</summary>
    ///  <param name="stringValue">Input value</param>
    ///  <param name="isConverted">True: converted to other data type if appropriate.</param>
    ///  <param name="setStyle">True: set the number format to cell's style when converting to other data type</param>
    procedure PutValue(stringValue: string; isConverted: Boolean; setStyle: Boolean);
    ///<summary>
    ///  Applies formats for a whole range.
    ///</summary>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    ///<remarks>Each cell in this range will contains a <see cref="T:Aspose.Cells.Style" />
    ///  object.
    ///  So this is a memory-consuming method. Please use it carefully.</remarks>
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    ///<summary>
    ///  Sets the style of the range.
    ///</summary>
    ///  <param name="style">The Style object.</param>
    procedure SetStyle(style: DNStyle);
    ///<summary>
    ///  Sets the outline borders around a range of cells with same border style and color.
    ///</summary>
    ///  <param name="borderStyle">Border style.</param>
    ///  <param name="borderColor">Border color.</param>
    procedure SetOutlineBorders(borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor); overload;
    ///<summary>
    ///  Sets out line borders around a range of cells.
    ///</summary>
    ///  <param name="borderStyles">Border styles.</param>
    ///  <param name="borderColors">Border colors.</param>
    ///<remarks>
    ///  Both the length of borderStyles and borderStyles must be 4.
    ///  The order of borderStyles and borderStyles must be top,bottom,left,right
    ///</remarks>
    procedure SetOutlineBorders(borderStyles: TArray<DNCellBorderType>; borderColors: TArray<DDN.System.Drawing.DNColor>); overload;
    ///<summary>
    ///  Sets outline border around a range of cells.
    ///</summary>
    ///  <param name="borderEdge">Border edge.</param>
    ///  <param name="borderStyle">Border style.</param>
    ///  <param name="borderColor">Border color.</param>
    procedure SetOutlineBorder(borderEdge: DNBorderType; borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor);
    ///<summary>
    ///  Move the current range to the dest range.
    ///</summary>
    ///  <param name="destRow">The start row of the dest range.</param>
    ///  <param name="destColumn">The start column of the dest range.</param>
    procedure MoveTo(destRow: Int32; destColumn: Int32);
    ///<summary>
    ///  Copies cell data (including formulas) from a source range.
    ///</summary>
    ///  <param name="range">Source <see cref="T:Aspose.Cells.Range" />
    ///  object.</param>
    procedure CopyData(range: DNRange);
    ///<summary>
    ///  Copies cell value from a source range.
    ///</summary>
    ///  <param name="range">Source <see cref="T:Aspose.Cells.Range" />
    ///  object.</param>
    procedure CopyValue(range: DNRange);
    ///<summary>
    ///  Copies style settings from a source range.
    ///</summary>
    ///  <param name="range">Source <see cref="T:Aspose.Cells.Range" />
    ///  object.</param>
    procedure CopyStyle(range: DNRange);
    ///<summary>
    ///  Copying the range with paste special options.
    ///</summary>
    ///  <param name="range">The source range.</param>
    ///  <param name="options">The paste special options.</param>
    procedure Copy(range: DNRange; options: DNPasteOptions); overload;
    ///<summary>
    ///  Copies data (including formulas), formatting, drawing objects etc. from a source range.
    ///</summary>
    ///  <param name="range">Source <see cref="T:Aspose.Cells.Range" />
    ///  object.</param>
    procedure Copy(range: DNRange); overload;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Cells.Cell" />
    ///  object or null in this range.
    ///</summary>
    ///  <param name="rowOffset">Row offset in this range, zero based.</param>
    ///  <param name="columnOffset">Column offset in this range, zero based.</param>
    ///<returns><see cref="T:Aspose.Cells.Cell" />
    ///  object.</returns>
    function GetCellOrNull(rowOffset: Int32; columnOffset: Int32): DNCell;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Cells.Range" />
    ///  range by offset.
    ///</summary>
    ///  <param name="rowOffset">Row offset in this range, zero based.</param>
    ///  <param name="columnOffset">Column offset in this range, zero based.</param>
    ///<returns></returns>
    function GetOffset(rowOffset: Int32; columnOffset: Int32): DNRange;
    ///<summary>
    ///  Returns a string represents the current Range object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    ///<summary>
    ///  Exports data in this range to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    function ExportDataTable: DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Exports data in this range to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///  <param name="options">The options of exporting range to datatable.</param>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    function ExportDataTable(options: DNExportTableOptions): DDN.System.Data.DNDataTable; overload;
    ///<summary>
    ///  Exports data in this range to a <see cref="T:System.Data.DataTable" />
    ///  object.
    ///</summary>
    ///<returns>Exported <see cref="T:System.Data.DataTable" />
    ///  object.</returns>
    ///<remarks>All data in the <see cref="T:Aspose.Cells.Cells" />
    ///  collection are converted to strings.</remarks>
    function ExportDataTableAsString: DDN.System.Data.DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets all hyperlink in the range.
    ///</summary>
    property Hyperlinks: TArray<DNHyperlink> read get_Hyperlinks;
    ///<summary>
    ///  Gets the count of rows in the range.
    ///</summary>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  Gets the count of columns in the range.
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount;
    ///<summary>
    ///  Gets all cell count in the range.
    ///</summary>
    ///<remarks>NOTE: This property is now obsolete.
    ///  Instead, please use RowCount and ColumnCount to get total cells count.
    ///  This property will be removed 12 months later since February 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property CellCount: Int32 read get_CellCount;
    ///<summary>
    ///  Gets or sets the name of the range.
    ///</summary>
    ///<remarks>Named range is supported. For example,
    ///  <p>range.Name = "Sheet1!MyRange";</p>
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the range's refers to.
    ///</summary>
    property RefersTo: string read get_RefersTo;
    ///<summary>
    ///  Gets address of the range.
    ///</summary>
    property Address: string read get_Address;
    ///<summary>
    ///  Gets the index of the first row of the range.
    ///</summary>
    property FirstRow: Int32 read get_FirstRow;
    ///<summary>
    ///  Gets the index of the first column of the range.
    ///</summary>
    property FirstColumn: Int32 read get_FirstColumn;
    ///<summary>
    ///  Gets and sets the value of the range.
    ///</summary>
    ///<remarks>
    ///  If the range contains multiple cells, return a two-dimension <see cref="T:System.Array" />
    ///  object.
    ///  If applies object array to the range, it should be a two-dimension <see cref="T:System.Array" />
    ///  object.
    ///</remarks>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Sets or gets the column width of this range
    ///</summary>
    property ColumnWidth: Double read get_ColumnWidth write set_ColumnWidth;
    ///<summary>
    ///  Sets or gets the height of rows in this range
    ///</summary>
    property RowHeight: Double read get_RowHeight write set_RowHeight;
    property Item[rowOffset: Int32; columnOffset: Int32]: DNCell read get_Item; default;
    ///<summary>
    ///  Gets a Range object that represents the entire column (or columns) that contains the specified range.
    ///</summary>
    property EntireColumn: DNRange read get_EntireColumn;
    ///<summary>
    ///  Gets a Range object that represents the entire row (or rows) that contains the specified range.
    ///</summary>
    property EntireRow: DNRange read get_EntireRow;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Range.Worksheet" />
    ///  object which contains this range.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
  end;

  TDNRange = class(TDNGenericImport<DNRangeClass, DNRange>) end;

  //-------------namespace: Aspose.Cells----------------
  DNReferredAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25ACF5F2-600F-5F49-8914-6074D786E09C}']
  end;

  ///<summary>
  ///  Represents a referred area by the formula.
  ///</summary>
  [DNTypeName('Aspose.Cells.ReferredArea')]
  DNReferredArea = interface(DDN.mscorlib.DNObject)
  ['{5F14E5EF-90E8-3AA1-940D-44D80B3C527B}']
  { getters & setters } 

    function get_IsExternalLink: Boolean;
    function get_ExternalFileName: string;
    function get_SheetName: string;
    function get_IsArea: Boolean;
    function get_EndColumn: Int32;
    function get_StartColumn: Int32;
    function get_EndRow: Int32;
    function get_StartRow: Int32;

  { methods } 

    ///<summary>
    ///  Gets cell values in this area.
    ///</summary>
    ///<returns>If this area is invalid, "#REF!" will be returned;
    ///  If this area is one single cell, then return the cell value object;
    ///  Otherwise return one 2D array for all values in this area.</returns>
    function GetValues: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  Gets cell values in this area.
    ///</summary>
    ///  <param name="calculateFormulas">In this range, if there are some formulas that have not been calculated,
    ///  this flag denotes whether those formulas should be calculated recursively</param>
    ///<returns>If this area is invalid, "#REF!" will be returned;
    ///  If this area is one single cell, then return the cell value object;
    ///  Otherwise return one 2D array for all values in this area.</returns>
    function GetValues(calculateFormulas: Boolean): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  Gets cell value with given offset from the top-left of this area.
    ///</summary>
    ///  <param name="rowOffset">row offset from the start row of this area</param>
    ///  <param name="colOffset">column offset from the start row of this area</param>
    ///<returns>"#REF!" if this area is invalid;
    ///  "#N/A" if given offset out of this area;
    ///  Otherwise return the cell value at given position.</returns>
    function GetValue(rowOffset: Int32; colOffset: Int32): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  Gets cell value with given offset from the top-left of this area.
    ///</summary>
    ///  <param name="rowOffset">row offset from the start row of this area</param>
    ///  <param name="colOffset">column offset from the start row of this area</param>
    ///  <param name="calculateFormulas">Whether calculate it recursively if the specified reference is formula</param>
    ///<returns>"#REF!" if this area is invalid;
    ///  "#N/A" if given offset out of this area;
    ///  Otherwise return the cell value at given position.</returns>
    function GetValue(rowOffset: Int32; colOffset: Int32; calculateFormulas: Boolean): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  Returns the simple string representation of this area.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Indicates whether this is an external link.
    ///</summary>
    property IsExternalLink: Boolean read get_IsExternalLink;
    ///<summary>
    ///  Get the external file name if this is an external reference.
    ///</summary>
    property ExternalFileName: string read get_ExternalFileName;
    ///<summary>
    ///  Indicates which sheet this reference is in.
    ///</summary>
    property SheetName: string read get_SheetName;
    ///<summary>
    ///  Indicates whether this is an area.
    ///</summary>
    ///<remarks>
    ///  If this is not an area, only StartRow and StartColumn effect.
    ///</remarks>
    property IsArea: Boolean read get_IsArea;
    ///<summary>
    ///  The end column of the area.
    ///</summary>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  The start column of the area.
    ///</summary>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  The end row of the area.
    ///</summary>
    property EndRow: Int32 read get_EndRow;
    ///<summary>
    ///  The start row of the area.
    ///</summary>
    property StartRow: Int32 read get_StartRow;
  end;

  TDNReferredArea = class(TDNGenericImport<DNReferredAreaClass, DNReferredArea>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNDrawObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8859F55F-35E9-55E8-BE17-81570B570E8C}']
  end;

  ///<summary>
  ///  DrawObject will be initialized and returned when rendering.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.DrawObject')]
  DNDrawObject = interface(DDN.mscorlib.DNObject)
  ['{311B4072-055B-3B49-A04E-43F9BE51E317}']
  { getters & setters } 

    function get_Cell: DNCell;
    function get_Shape: DNShape;
    function get_ImageBytes: TArray<Byte>;
    function get_Type: DNDrawObjectEnum;
    function get_CurrentPage: Int32;
    function get_TotalPages: Int32;
    function get_SheetIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates the Cell object when rendering.
    ///  All properties of cell can be accessed.
    ///</summary>
    property Cell: DNCell read get_Cell;
    ///<summary>
    ///  Indicates the Shape object when rendering.
    ///  All properties of shape can be accessed.
    ///</summary>
    property Shape: DNShape read get_Shape;
    ///<summary>
    ///  Indicates image bytes of rendered Chart, Shape when rendering.
    ///</summary>
    property ImageBytes: TArray<Byte> read get_ImageBytes;
    ///<summary>
    ///  Indicates the type of DrawObject.
    ///</summary>
    property &Type: DNDrawObjectEnum read get_Type;
    ///<summary>
    ///  Indicates the page index of DrawObject.
    ///  Page index is based on zero.
    ///  One Sheet contains several pages when rendering.
    ///</summary>
    property CurrentPage: Int32 read get_CurrentPage;
    ///<summary>
    ///  Indicates total pages in current rendering.
    ///</summary>
    property TotalPages: Int32 read get_TotalPages;
    ///<summary>
    ///  Indicates current sheet index of DrawObject.
    ///</summary>
    property SheetIndex: Int32 read get_SheetIndex;
  end;

  TDNDrawObject = class(TDNGenericImport<DNDrawObjectClass, DNDrawObject>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNDrawObjectEventHandlerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3EAB9DEA-4B54-535F-BF0D-603AC1C1F6F0}']
  end;

  ///<summary>
  ///  Interface to get DrawObject and Bound when rendering.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.DrawObjectEventHandler')]
  DNDrawObjectEventHandler = interface(DDN.mscorlib.DNObject)
  ['{C3A0FA07-241C-3EFD-8730-EF0C555458C0}']
  { methods } 

    ///<summary>
    ///  Implements this interface to get DrawObject and Bound when rendering.
    ///</summary>
    ///  <param name="drawObject"> DrawObject will be initialized and returned when rendering</param>
    ///  <param name="x">Left of DrawObject</param>
    ///  <param name="y">Top of DrawObject</param>
    ///  <param name="width">Width of DrawObject</param>
    ///  <param name="height">Height of DrawObject</param>
    procedure Draw(drawObject: DNDrawObject; x: Single; y: Single; width: Single; height: Single);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDrawObjectEventHandler = class(TDNGenericImport<DNDrawObjectEventHandlerClass, DNDrawObjectEventHandler>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNImageOrPrintOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC6D35BA-0A17-520C-8F9E-EC4F62A4106F}']
  { constructors } 

    {class} function init: DNImageOrPrintOptions;

  end;

  ///<summary>
  ///  Allows to specify options when rendering worksheet to images, printing worksheet or rendering chart to image.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Set Image Or Print Options
  ///  ImageOrPrintOptions options = new ImageOrPrintOptions();
  ///  //set Horizontal resolution
  ///  options.HorizontalResolution = 200;
  ///  //set Vertica; Resolution
  ///  options.VerticalResolution = 300;
  ///  //Instantiate Workbook
  ///  Workbook book = new Workbook(@"c:\test.xls");
  ///  //Save chart as Image using ImageOrPrint Options
  ///  Bitmap chartObject = book.Worksheets[0].Charts[0].ToImage(options);
  ///  [VB.NET]
  ///  'Set Image Or Print Options
  ///  Dim options As New ImageOrPrintOptions()
  ///  'set Horizontal resolution
  ///  options.HorizontalResolution = 200
  ///  'set Vertica; Resolution
  ///  options.VerticalResolution = 300
  ///  'Instantiate Workbook
  ///  Dim book As New Workbook("c:\test.xls")
  ///  'Save chart as Image using ImageOrPrint Options
  ///  Dim chartObject As Bitmap = book.Worksheets(0).Charts(0).ToImage(options)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Rendering.ImageOrPrintOptions')]
  DNImageOrPrintOptions = interface(DDN.mscorlib.DNObject)
  ['{A963CDB7-3D8C-3B69-8C94-49A4C2605A92}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_CustomPrintPageEventHandler: DDN.System.Drawing.DNPrintPageEventHandler;
    procedure set_CustomPrintPageEventHandler(value: DDN.System.Drawing.DNPrintPageEventHandler);
    function get_CustomQueryPageSettingsEventHandler: DDN.System.Drawing.DNQueryPageSettingsEventHandler;
    procedure set_CustomQueryPageSettingsEventHandler(value: DDN.System.Drawing.DNQueryPageSettingsEventHandler);
    function get_PrintWithStatusDialog: Boolean;
    procedure set_PrintWithStatusDialog(value: Boolean);
    function get_HorizontalResolution: Int32;
    procedure set_HorizontalResolution(value: Int32);
    function get_VerticalResolution: Int32;
    procedure set_VerticalResolution(value: Int32);
    function get_TiffCompression: DNTiffCompression;
    procedure set_TiffCompression(value: DNTiffCompression);
    function get_TiffColorDepth: DNColorDepth;
    procedure set_TiffColorDepth(value: DNColorDepth);
    function get_PrintingPage: DNPrintingPageType;
    procedure set_PrintingPage(value: DNPrintingPageType);
    function get_Quality: Int32;
    procedure set_Quality(value: Int32);
    function get_ImageFormat: DDN.System.Drawing.DNImageFormat;
    procedure set_ImageFormat(value: DDN.System.Drawing.DNImageFormat);
    function get_ImageType: DNImageType;
    procedure set_ImageType(value: DNImageType);
    function get_IsCellAutoFit: Boolean;
    procedure set_IsCellAutoFit(value: Boolean);
    function get_IsImageFitToPage: Boolean;
    procedure set_IsImageFitToPage(value: Boolean);
    function get_OnePagePerSheet: Boolean;
    procedure set_OnePagePerSheet(value: Boolean);
    function get_AllColumnsInOnePagePerSheet: Boolean;
    procedure set_AllColumnsInOnePagePerSheet(value: Boolean);
    function get_DrawObjectEventHandler: DNDrawObjectEventHandler;
    procedure set_DrawObjectEventHandler(value: DNDrawObjectEventHandler);
    function get_ChartImageType: DDN.System.Drawing.DNImageFormat;
    procedure set_ChartImageType(value: DDN.System.Drawing.DNImageFormat);
    function get_EmbededImageNameInSvg: string;
    procedure set_EmbededImageNameInSvg(value: string);
    function get_SVGFitToViewPort: Boolean;
    procedure set_SVGFitToViewPort(value: Boolean);
    function get_OnlyArea: Boolean;
    procedure set_OnlyArea(value: Boolean);
    function get_TextRenderingHint: DDN.System.Drawing.DNTextRenderingHint;
    procedure set_TextRenderingHint(value: DDN.System.Drawing.DNTextRenderingHint);
    function get_SmoothingMode: DDN.System.Drawing.DNSmoothingMode;
    procedure set_SmoothingMode(value: DDN.System.Drawing.DNSmoothingMode);
    function get_Transparent: Boolean;
    procedure set_Transparent(value: Boolean);
    function get_PixelFormat: DDN.System.Drawing.DNPixelFormat;
    procedure set_PixelFormat(value: DDN.System.Drawing.DNPixelFormat);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_IsFontSubstitutionCharGranularity: Boolean;
    procedure set_IsFontSubstitutionCharGranularity(value: Boolean);
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_DefaultFont: string;
    procedure set_DefaultFont(value: string);
    function get_CheckWorkbookDefaultFont: Boolean;
    procedure set_CheckWorkbookDefaultFont(value: Boolean);
    function get_OutputBlankPageWhenNothingToPrint: Boolean;
    procedure set_OutputBlankPageWhenNothingToPrint(value: Boolean);
    function get_GridlineType: DNGridlineType;
    procedure set_GridlineType(value: DNGridlineType);
    function get_TextCrossType: DNTextCrossType;
    procedure set_TextCrossType(value: DNTextCrossType);
    function get_EmfType: DDN.System.Drawing.DNEmfType;
    procedure set_EmfType(value: DDN.System.Drawing.DNEmfType);
    function get_DefaultEditLanguage: DNDefaultEditLanguage;
    procedure set_DefaultEditLanguage(value: DNDefaultEditLanguage);

  { methods } 

    ///<summary>
    ///  Sets desired width and height of image.
    ///</summary>
    ///  <param name="desiredWidth">desired width in pixels</param>
    ///  <param name="desiredHeight">desired height in pixels</param>
    procedure SetDesiredSize(desiredWidth: Int32; desiredHeight: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the output file format type
    ///  Support Tiff/XPS
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Client can special output to printer when print each page using this EventHandler
    ///</summary>
    property CustomPrintPageEventHandler: DDN.System.Drawing.DNPrintPageEventHandler read get_CustomPrintPageEventHandler write set_CustomPrintPageEventHandler;
    ///<summary>
    ///  Client can control page setting of printer when print each page using this EventHandler
    ///</summary>
    property CustomQueryPageSettingsEventHandler: DDN.System.Drawing.DNQueryPageSettingsEventHandler read get_CustomQueryPageSettingsEventHandler write set_CustomQueryPageSettingsEventHandler;
    ///<summary>
    ///  If PrintWithStatusDialog = true , there will be a dialog that shows current print status.
    ///  else no such dialog will show.
    ///</summary>
    property PrintWithStatusDialog: Boolean read get_PrintWithStatusDialog write set_PrintWithStatusDialog;
    ///<summary>
    ///  Gets or sets the horizontal resolution for generated images, in dots per inch.
    ///  Applies generating image method except Emf format images.
    ///</summary>
    ///<remarks>
    ///  The default value is 96.
    ///</remarks>
    property HorizontalResolution: Int32 read get_HorizontalResolution write set_HorizontalResolution;
    ///<summary>
    ///  Gets or sets the vertical  resolution for generated images, in dots per inch.
    ///  Applies generating image method except Emf format image.
    ///</summary>
    ///<remarks>
    ///  The default value is 96.
    ///</remarks>
    property VerticalResolution: Int32 read get_VerticalResolution write set_VerticalResolution;
    ///<summary>
    ///  Gets or sets the type of compression to apply only when saving pages to the <c>Tiff</c> format.
    ///</summary>
    ///<remarks>
    ///  Has effect only when saving to TIFF.
    ///  The default value is Lzw.
    ///</remarks>
    property TiffCompression: DNTiffCompression read get_TiffCompression write set_TiffCompression;
    ///<summary>
    ///  Gets or sets bit depth to apply only when saving pages to the <c>Tiff</c> format.
    ///</summary>
    ///<remarks>
    ///  Has effect only when saving to TIFF.
    ///  If TiffCompression is set to CCITT3, CCITT4, this will not take effect, the bit depth of the generated tiff image will be always 1.
    ///</remarks>
    property TiffColorDepth: DNColorDepth read get_TiffColorDepth write set_TiffColorDepth;
    ///<summary>
    ///  Indicates which pages will not be printed.
    ///</summary>
    property PrintingPage: DNPrintingPageType read get_PrintingPage write set_PrintingPage;
    ///<summary>
    ///  Gets or sets a value determining the quality of the generated  images
    ///  to apply only when saving pages to the <c>Jpeg</c> format. The default value is 100
    ///</summary>
    ///<remarks>
    ///  Has effect only when saving to JPEG.
    ///  The value must be between 0 and 100.
    ///  The default value is 100.
    ///</remarks>
    property Quality: Int32 read get_Quality write set_Quality;
    ///<summary>
    ///  Gets or sets the format of the generated images.
    ///  Don't apply the method that returns a <c>Bitmap</c> object.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use ImageOrPrintOptions.ImageType property.
    ///  This property will be removed 12 months later since April. 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property ImageFormat: DDN.System.Drawing.DNImageFormat read get_ImageFormat write set_ImageFormat;
    ///<summary>
    ///  Gets or sets the format of the generated images.
    ///  Don't apply the method that returns a <c>Bitmap</c> object.
    ///</summary>
    ///<remarks>
    ///  The default value is ImageFormat.Bmp.
    ///  Don't apply the method that returns a <c>Bitmap</c> object.
    ///</remarks>
    property ImageType: DNImageType read get_ImageType write set_ImageType;
    ///<summary>
    ///  Indicates whether the width and height of the cells is automatically fitted by cell value.
    ///  The default value is false.
    ///</summary>
    property IsCellAutoFit: Boolean read get_IsCellAutoFit write set_IsCellAutoFit;
    ///<summary>
    ///  When set the value to true, the page only include the cells that have data.
    ///  The default value is false.
    ///</summary>
    property IsImageFitToPage: Boolean read get_IsImageFitToPage write set_IsImageFitToPage;
    ///<summary>
    ///  If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
    ///  The paper size of pagesetup will be invalid, and the other settings of pagesetup
    ///  will still take effect.
    ///</summary>
    property OnePagePerSheet: Boolean read get_OnePagePerSheet write set_OnePagePerSheet;
    ///<summary>
    ///  If AllColumnsInOnePagePerSheet is true , all column content of one sheet will output to only one page in result.
    ///  The width of paper size of pagesetup will be invalid, and the other settings of pagesetup
    ///  will still take effect.
    ///</summary>
    property AllColumnsInOnePagePerSheet: Boolean read get_AllColumnsInOnePagePerSheet write set_AllColumnsInOnePagePerSheet;
    ///<summary>
    ///  Implements this interface to get DrawObject and Bound when rendering.
    ///</summary>
    property DrawObjectEventHandler: DNDrawObjectEventHandler read get_DrawObjectEventHandler write set_DrawObjectEventHandler;
    ///<summary>
    ///  Indicate the chart imagetype when converting.
    ///</summary>
    property ChartImageType: DDN.System.Drawing.DNImageFormat read get_ChartImageType write set_ChartImageType;
    ///<summary>
    ///  Indicate the filename of embedded image in svg.
    ///  This should be full path with directory like "c:\\xpsEmbedded"
    ///</summary>
    property EmbededImageNameInSvg: string read get_EmbededImageNameInSvg write set_EmbededImageNameInSvg;
    ///<summary>
    ///  if this property is true, the generated svg will fit to view port.
    ///</summary>
    property SVGFitToViewPort: Boolean read get_SVGFitToViewPort write set_SVGFitToViewPort;
    ///<summary>
    ///  If this property is true , one Area will be output, and no scale will take effect.
    ///</summary>
    property OnlyArea: Boolean read get_OnlyArea write set_OnlyArea;
    ///<summary>
    ///  Specifies the quality of text rendering.
    ///  The default value is TextRenderingHint.SystemDefault
    ///</summary>
    property TextRenderingHint: DDN.System.Drawing.DNTextRenderingHint read get_TextRenderingHint write set_TextRenderingHint;
    ///<summary>
    ///  Specifies whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas.
    ///  The default value is SmoothingMode.None
    ///</summary>
    property SmoothingMode: DDN.System.Drawing.DNSmoothingMode read get_SmoothingMode write set_SmoothingMode;
    ///<summary>
    ///  Indicates if the background of generated image should be transparent.
    ///</summary>
    ///<remarks>
    ///  The default value is false. That means the background of the generated images is white.
    ///</remarks>
    property Transparent: Boolean read get_Transparent write set_Transparent;
    ///<summary>
    ///  Gets or sets the pixel format for the generated images.
    ///</summary>
    ///<remarks>
    ///  The default value is PixelFormat.Format32bppArgb.
    ///</remarks>
    property PixelFormat: DDN.System.Drawing.DNPixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Control/Indicate progress of page saving process.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Indicates whether only substitute the font of character when the cell font is not compatibility for it.
    ///</summary>
    ///<remarks>
    ///  Default is false. We will try default font of Workbook and PdfSaveOption/system for cell font first.
    ///</remarks>
    property IsFontSubstitutionCharGranularity: Boolean read get_IsFontSubstitutionCharGranularity write set_IsFontSubstitutionCharGranularity;
    ///<summary>
    ///  Gets or sets the 0-based index of the first page to save.
    ///</summary>
    ///<remarks>
    ///  Default is 0.
    ///</remarks>
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    ///<summary>
    ///  Gets or sets the number of pages to save.
    ///</summary>
    ///<remarks>
    ///  Default is System.Int32.MaxValue which means all pages will be rendered..
    ///</remarks>
    property PageCount: Int32 read get_PageCount write set_PageCount;
    ///<summary>
    ///  When characters in the Excel are unicode and not be set with correct font in cell style,
    ///  They may appear as block in pdf,image.
    ///  Set the DefaultFont such as MingLiu or MS Gothic to show these characters.
    ///  If this property is not set, Aspose.Cells will use system default font to show these unicode characters.
    ///</summary>
    property DefaultFont: string read get_DefaultFont write set_DefaultFont;
    ///<summary>
    ///  When characters in the Excel are unicode and not be set with correct font in cell style,
    ///  They may appear as block in pdf,image.
    ///  Set this to true to try to use workbook's default font to show these characters first.
    ///</summary>
    ///<remarks>
    ///  Default is true.
    ///</remarks>
    property CheckWorkbookDefaultFont: Boolean read get_CheckWorkbookDefaultFont write set_CheckWorkbookDefaultFont;
    ///<summary>
    ///  Indicates whether to output a blank page when there is nothing to print.
    ///</summary>
    ///<remarks>
    ///  Default is false.
    ///</remarks>
    property OutputBlankPageWhenNothingToPrint: Boolean read get_OutputBlankPageWhenNothingToPrint write set_OutputBlankPageWhenNothingToPrint;
    ///<summary>
    ///  Gets or sets gridline type.
    ///</summary>
    ///<remarks>
    ///  Default is Dotted type.
    ///</remarks>
    property GridlineType: DNGridlineType read get_GridlineType write set_GridlineType;
    ///<summary>
    ///  Gets or sets displaying text type when the text width is larger than cell width.
    ///</summary>
    property TextCrossType: DNTextCrossType read get_TextCrossType write set_TextCrossType;
    ///<summary>
    ///  Gets or sets an EmfType that specifies the format of the Metafile..
    ///<remarks>The default value is EmfPlusDual.</remarks>
    ///</summary>
    property EmfType: DDN.System.Drawing.DNEmfType read get_EmfType write set_EmfType;
    ///<summary>
    ///  Gets or sets default edit language.
    ///</summary>
    ///<remarks>
    ///  It may display/render different layouts for text paragraph when different edit languages is set.
    ///  Default is <see cref="!:DefaultEditLanguage.Auto" />
    ///  .
    ///</remarks>
    property DefaultEditLanguage: DNDefaultEditLanguage read get_DefaultEditLanguage write set_DefaultEditLanguage;
  end;

  TDNImageOrPrintOptions = class(TDNGenericImport<DNImageOrPrintOptionsClass, DNImageOrPrintOptions>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPageSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90366516-3C3C-5381-8FF5-91AC03A6F516}']
  end;

  ///<summary>
  ///  Info for a page saving process.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PageSavingArgs')]
  DNPageSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{9599D3BE-6217-3BD1-9014-C697A17C7F77}']
  { getters & setters } 

    function get_PageIndex: Int32;
    function get_PageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Current page index, zero based.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Total page count.
    ///</summary>
    property PageCount: Int32 read get_PageCount;
  end;

  TDNPageSavingArgs = class(TDNGenericImport<DNPageSavingArgsClass, DNPageSavingArgs>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPageEndSavingArgsClass = interface(DNPageSavingArgsClass)
  ['{7CC343AF-5DB8-5311-90B8-D0E329E92095}']
  end;

  ///<summary>
  ///  Info for a page ends saving process.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PageEndSavingArgs')]
  DNPageEndSavingArgs = interface(DNPageSavingArgs)
  ['{59C2E948-8DBB-3C9C-8E6A-79A7F83EBA9B}']
  { getters & setters } 

    function get_HasMorePages: Boolean;
    procedure set_HasMorePages(value: Boolean);
    function get_PageIndex: Int32;
    function get_PageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value indicating whether having more pages to be output.
    ///  The default value is true.
    ///</summary>
    property HasMorePages: Boolean read get_HasMorePages write set_HasMorePages;
    ///<summary>
    ///  Current page index, zero based.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Total page count.
    ///</summary>
    property PageCount: Int32 read get_PageCount;
  end;

  TDNPageEndSavingArgs = class(TDNGenericImport<DNPageEndSavingArgsClass, DNPageEndSavingArgs>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPageStartSavingArgsClass = interface(DNPageSavingArgsClass)
  ['{CD92A4CB-4281-532B-B85D-A313F233C650}']
  end;

  ///<summary>
  ///  Info for a page starts saving process.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PageStartSavingArgs')]
  DNPageStartSavingArgs = interface(DNPageSavingArgs)
  ['{80C95EFF-AB78-3D04-A227-863C330BD342}']
  { getters & setters } 

    function get_IsToOutput: Boolean;
    procedure set_IsToOutput(value: Boolean);
    function get_PageIndex: Int32;
    function get_PageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value indicating whether the page should be output.
    ///  The default value is true.
    ///</summary>
    property IsToOutput: Boolean read get_IsToOutput write set_IsToOutput;
    ///<summary>
    ///  Current page index, zero based.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Total page count.
    ///</summary>
    property PageCount: Int32 read get_PageCount;
  end;

  TDNPageStartSavingArgs = class(TDNGenericImport<DNPageStartSavingArgsClass, DNPageStartSavingArgs>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPdfBookmarkEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{598C0315-DFC5-59EF-92B5-9FBAC5C3924D}']
  { constructors } 

    {class} function init: DNPdfBookmarkEntry;

  end;

  ///<summary>
  ///  PdfBookmarkEntry is an entry in pdf bookmark.
  ///  if Text property of current instance is null or "",
  ///  current instance will be hidden and children will be inserted on current level.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  workbook.Worksheets.Add();
  ///  workbook.Worksheets.Add();
  ///  Cell cellInPage1 = workbook.Worksheets[0].Cells["A0"];
  ///  Cell cellInPage2 = workbook.Worksheets[1].Cells["A0"];
  ///  Cell cellInPage3 = workbook.Worksheets[2].Cells["A0"];
  ///  cellInPage1.PutValue("page1");
  ///  cellInPage2.PutValue("page2");
  ///  cellInPage3.PutValue("page3");
  ///  PdfBookmarkEntry pbeRoot = new PdfBookmarkEntry();
  ///  pbeRoot.Text = "root";  // if pbeRoot.Text = null, all children of pbeRoot will be inserted on the top level in the bookmark.
  ///  pbeRoot.Destination = cellInPage1;
  ///  pbeRoot.SubEntry = new ArrayList();
  ///  pbeRoot.IsOpen = false;
  ///  PdfBookmarkEntry subPbe1 = new PdfBookmarkEntry();
  ///  subPbe1.Text = "section1";
  ///  subPbe1.Destination = cellInPage2;
  ///  PdfBookmarkEntry subPbe2 = new PdfBookmarkEntry();
  ///  subPbe2.Text = "section2";
  ///  subPbe2.Destination = cellInPage3;
  ///  pbeRoot.SubEntry.Add(subPbe1);
  ///  pbeRoot.SubEntry.Add(subPbe2);
  ///  workbook.SaveOptions.PdfBookmark = pbeRoot;
  ///  workbook.Save("c:\\Test.pdf");
  ///  [VB]
  ///  Dim workbook As Workbook = New Workbook
  ///  workbook.Worksheets.Add("sheet2")
  ///  workbook.Worksheets.Add("sheet3")
  ///  Dim cells As Cells = workbook.Worksheets(0).Cells
  ///  Dim cellInPage1 As Cell = cells("A0")
  ///  cellInPage1.PutValue("Page1")
  ///  cells = workbook.Worksheets(1).Cells
  ///  Dim cellInPage2 As Cell = cells("A0")
  ///  cellInPage2.PutValue("Page2")
  ///  cells = workbook.Worksheets(2).Cells
  ///  Dim cellInPage3 As Cell = cells("A0")
  ///  cellInPage3.PutValue("Page3")
  ///  Dim pbeRoot As PdfBookmarkEntry = New PdfBookmarkEntry()
  ///  pbeRoot.Text = "root"
  ///  pbeRoot.Destination = cellInPage1
  ///  pbeRoot.SubEntry = New ArrayList
  ///  pbeRoot.IsOpen = False
  ///  Dim subPbe1 As PdfBookmarkEntry = New PdfBookmarkEntry()
  ///  subPbe1.Text = "section1"
  ///  subPbe1.Destination = cellInPage2
  ///  Dim subPbe2 As PdfBookmarkEntry = New PdfBookmarkEntry()
  ///  subPbe2.Text = "section2"
  ///  subPbe2.Destination = cellInPage3
  ///  pbeRoot.SubEntry.Add(subPbe1)
  ///  pbeRoot.SubEntry.Add(subPbe2)
  ///  workbook.SaveOptions.PdfBookmark = pbeRoot
  ///  workbook.Save("c:\\Test.pdf")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Rendering.PdfBookmarkEntry')]
  DNPdfBookmarkEntry = interface(DDN.mscorlib.DNObject)
  ['{6C740661-53BA-35E7-A6B8-6F5F82BCF184}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Destination: DNCell;
    procedure set_Destination(value: DNCell);
    function get_DestinationName: string;
    procedure set_DestinationName(value: string);
    function get_SubEntry: DDN.mscorlib.DNArrayList;
    procedure set_SubEntry(value: DDN.mscorlib.DNArrayList);
    function get_IsOpen: Boolean;
    procedure set_IsOpen(value: Boolean);
    function get_IsCollapse: Boolean;
    procedure set_IsCollapse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Title of a bookmark.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  The cell to which the bookmark link.
    ///</summary>
    property Destination: DNCell read get_Destination write set_Destination;
    ///<summary>
    ///  Gets or sets name of destination.
    ///</summary>
    ///<remarks>
    ///  If destination name is set, the destination will be defined as a named destination with this name.
    ///</remarks>
    property DestinationName: string read get_DestinationName write set_DestinationName;
    ///<summary>
    ///  SubEntry of a bookmark.
    ///</summary>
    property SubEntry: DDN.mscorlib.DNArrayList read get_SubEntry write set_SubEntry;
    ///<summary>
    ///  When this property is true, the bookmarkentry will expand, otherwise it will collapse.
    ///</summary>
    property IsOpen: Boolean read get_IsOpen write set_IsOpen;
    ///<summary>
    ///  When this property is true, the bookmarkentry will collapse, otherwise it will expand.
    ///</summary>
    property IsCollapse: Boolean read get_IsCollapse write set_IsCollapse;
  end;

  TDNPdfBookmarkEntry = class(TDNGenericImport<DNPdfBookmarkEntryClass, DNPdfBookmarkEntry>) end;

  //-------------namespace: Aspose.Cells.Rendering.PdfSecurity----------------
  DNPdfSecurityOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C1E2A65-9B2D-5B18-A325-E4F5BF64693B}']
  { constructors } 

    ///<summary>
    ///  The constructor of PdfSecurityOptions
    ///</summary>
    {class} function init: DNPdfSecurityOptions;

  end;

  ///<summary>
  ///  Settings of pdf when converting excel to pdf, PDF/A does not allow security setting.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.PdfSecurity.PdfSecurityOptions')]
  DNPdfSecurityOptions = interface(DDN.mscorlib.DNObject)
  ['{C2707302-B17C-38C8-8BD9-88129872A77D}']
  { getters & setters } 

    function get_UserPassword: string;
    procedure set_UserPassword(value: string);
    function get_OwnerPassword: string;
    procedure set_OwnerPassword(value: string);
    function get_PrintPermission: Boolean;
    procedure set_PrintPermission(value: Boolean);
    function get_ModifyDocumentPermission: Boolean;
    procedure set_ModifyDocumentPermission(value: Boolean);
    function get_ExtractContentPermissionObsolete: Boolean;
    procedure set_ExtractContentPermissionObsolete(value: Boolean);
    function get_AnnotationsPermission: Boolean;
    procedure set_AnnotationsPermission(value: Boolean);
    function get_FillFormsPermission: Boolean;
    procedure set_FillFormsPermission(value: Boolean);
    function get_ExtractContentPermission: Boolean;
    procedure set_ExtractContentPermission(value: Boolean);
    function get_AccessibilityExtractContent: Boolean;
    procedure set_AccessibilityExtractContent(value: Boolean);
    function get_AssembleDocumentPermission: Boolean;
    procedure set_AssembleDocumentPermission(value: Boolean);
    function get_FullQualityPrintPermission: Boolean;
    procedure set_FullQualityPrintPermission(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the user password
    ///</summary>
    property UserPassword: string read get_UserPassword write set_UserPassword;
    ///<summary>
    ///  Gets or sets the owner password of the document
    ///</summary>
    property OwnerPassword: string read get_OwnerPassword write set_OwnerPassword;
    ///<summary>
    ///  Permission to print pdf document
    ///</summary>
    property PrintPermission: Boolean read get_PrintPermission write set_PrintPermission;
    ///<summary>
    ///  Permission to modify pdf document
    ///</summary>
    property ModifyDocumentPermission: Boolean read get_ModifyDocumentPermission write set_ModifyDocumentPermission;
    ///<summary>
    ///  Permission to copy or extract content Obsoleted according to PDF reference.
    ///</summary>
    property ExtractContentPermissionObsolete: Boolean read get_ExtractContentPermissionObsolete write set_ExtractContentPermissionObsolete;
    ///<summary>
    ///  Permission to comment on the document.
    ///</summary>
    property AnnotationsPermission: Boolean read get_AnnotationsPermission write set_AnnotationsPermission;
    ///<summary>
    ///  Permission to fill the form fields.
    ///</summary>
    property FillFormsPermission: Boolean read get_FillFormsPermission write set_FillFormsPermission;
    ///<summary>
    ///  Permission to copy or extract content.
    ///</summary>
    property ExtractContentPermission: Boolean read get_ExtractContentPermission write set_ExtractContentPermission;
    ///<summary>
    ///  Permission to copy or extract content (in support of accessibility    to disabled users or for other purposes).
    ///</summary>
    property AccessibilityExtractContent: Boolean read get_AccessibilityExtractContent write set_AccessibilityExtractContent;
    ///<summary>
    ///  Permission to insert, rotate, or delete pages and create bookmarks or thumbnail images even if ModifyDocumentPermission is not set.
    ///</summary>
    property AssembleDocumentPermission: Boolean read get_AssembleDocumentPermission write set_AssembleDocumentPermission;
    ///<summary>
    ///  Permission to print in high quality.
    ///</summary>
    property FullQualityPrintPermission: Boolean read get_FullQualityPrintPermission write set_FullQualityPrintPermission;
  end;

  TDNPdfSecurityOptions = class(TDNGenericImport<DNPdfSecurityOptionsClass, DNPdfSecurityOptions>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNSheetPrintingPreviewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{818C5393-FEA6-5A33-A424-16EBBD3C140D}']
  { constructors } 

    ///<summary>
    ///  The construct of SheetPrintingPreview
    ///</summary>
    ///  <param name="sheet">Indicate which spreadsheet to be printed.</param>
    ///  <param name="options">ImageOrPrintOptions contains some property of output</param>
    {class} function init(sheet: DNWorksheet; options: DNImageOrPrintOptions): DNSheetPrintingPreview;

  end;

  ///<summary>
  ///  Worksheet printing preview.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.SheetPrintingPreview')]
  DNSheetPrintingPreview = interface(DDN.mscorlib.DNObject)
  ['{BE6296B2-52B9-38D1-927C-768BEA98CAFE}']
  { getters & setters } 

    function get_EvaluatedPageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Evaluate the total page count of this worksheet
    ///</summary>
    property EvaluatedPageCount: Int32 read get_EvaluatedPageCount;
  end;

  TDNSheetPrintingPreview = class(TDNGenericImport<DNSheetPrintingPreviewClass, DNSheetPrintingPreview>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNSheetRenderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70B63DF0-D709-55F3-A86F-0E28366C1074}']
  { constructors } 

    ///<summary>
    ///  the construct of SheetRender, need worksheet and ImageOrPrintOptions as params
    ///</summary>
    ///  <param name="worksheet">Indicate which spreadsheet to be rendered.</param>
    ///  <param name="options">ImageOrPrintOptions contains some property of output image</param>
    {class} function init(worksheet: DNWorksheet; options: DNImageOrPrintOptions): DNSheetRender;

  end;

  ///<summary>
  ///  Represents a worksheet render which can render worksheet to various images such as (BMP, PNG, JPEG, TIFF..)
  ///  The constructor of this class , must be used after modification of pagesetup, cell style.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.SheetRender')]
  DNSheetRender = interface(DDN.mscorlib.DNObject)
  ['{74B20B17-1478-3043-9662-E93EA4727569}']
  { getters & setters } 

    function get_PageCount: Int32;
    function get_PageScale: Double;

  { methods } 

    ///<summary>
    ///  Get page size of output image. The size unit is in pixel.
    ///</summary>
    ///  <param name="pageIndex">The page index is based on zero.</param>
    ///<returns></returns>
    function GetPageSize(pageIndex: Int32): DDN.System.Drawing.DNSize;
    ///<summary>
    ///  Render certain page to a Graphics
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///  <param name="g">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in pixels) of the top left corner of the rendered page.</param>
    ///  <param name="y">The Y coordinate (in pixels) of the top left corner of the rendered page.</param>
    ///  <param name="width">The maximum width (in pixels) that can be occupied by the rendered page.</param>
    ///  <param name="height">The maximum height (in pixels) that can be occupied by the rendered page.</param>
    procedure ToImage(pageIndex: Int32; g: DDN.System.Drawing.DNGraphics; x: Single; y: Single; width: Single; height: Single); overload;
    ///<summary>
    ///  Render certain page to a Graphics
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///  <param name="g">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in pixels) of the top left corner of the rendered page.</param>
    ///  <param name="y">The Y coordinate (in pixels) of the top left corner of the rendered page.</param>
    procedure ToImage(pageIndex: Int32; g: DDN.System.Drawing.DNGraphics; x: Single; y: Single); overload;
    ///<summary>
    ///  Render certain page to a file.
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///  <param name="fileName">filename of the output image</param>
    procedure ToImage(pageIndex: Int32; fileName: string); overload;
    ///<summary>
    ///  Render certain page to a stream.
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///  <param name="stream">the stream of the output image</param>
    procedure ToImage(pageIndex: Int32; stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Render certain page to a Bitmap object.
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///<returns>the bitmap object of the page</returns>
    function ToImage(pageIndex: Int32): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Render whole worksheet as Tiff Image to stream.
    ///</summary>
    ///  <param name="stream">the stream of the output image</param>
    procedure ToTiff(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Render whole worksheet as Tiff Image to a file.
    ///</summary>
    ///  <param name="filename">the filename of the output image</param>
    procedure ToTiff(filename: string); overload;
    ///<summary>
    ///  Render worksheet to Printer
    ///</summary>
    ///  <param name="PrinterName">the name of the printer , for example: "Microsoft Office Document Image Writer"</param>
    procedure ToPrinter(PrinterName: string); overload;
    ///<summary>
    ///  Render worksheet to Printer
    ///</summary>
    ///  <param name="PrinterName">the name of the printer , for example: "Microsoft Office Document Image Writer"</param>
    ///  <param name="PrintPageIndex">the 0-based index of the first page to print, it must be in Range [0, SheetRender.PageCount-1]</param>
    ///  <param name="PrintPageCount">the number of pages to print, it must be greater than zero</param>
    procedure ToPrinter(PrinterName: string; PrintPageIndex: Int32; PrintPageCount: Int32); overload;
    ///<summary>
    ///  Render worksheet to Printer
    ///</summary>
    ///  <param name="PrinterName">the name of the printer , for example: "Microsoft Office Document Image Writer"</param>
    ///  <param name="DocumentName">set the print job name </param>
    procedure ToPrinter(PrinterName: string; DocumentName: string); overload;
    ///<summary>
    ///  Render worksheet to Printer
    ///</summary>
    ///  <param name="PrinterSettings"> the settings of printer, e.g. PrinterName, Duplex</param>
    procedure ToPrinter(PrinterSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    ///<summary>
    ///  Client can control page setting of printer when print each page using this function.
    ///</summary>
    ///  <param name="nextPageAfterPrint">If true , printer will go to next page after print current page</param>
    ///  <param name="printPageEventArgs">System.Drawing.Printing.PrintPageEventArgs</param>
    ///<returns>Indirect next page index,  based on zero</returns>
    function CustomPrint(nextPageAfterPrint: Boolean; printPageEventArgs: DDN.System.Drawing.DNPrintPageEventArgs): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicate the total page count of current worksheet
    ///</summary>
    property PageCount: Int32 read get_PageCount;
    ///<summary>
    ///  Gets calculated page scale of the sheet.
    ///</summary>
    ///<returns></returns>
    property PageScale: Double read get_PageScale;
  end;

  TDNSheetRender = class(TDNGenericImport<DNSheetRenderClass, DNSheetRender>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNWorkbookPrintingPreviewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67FD5B28-3D47-5BEE-A721-D13FB74A62A9}']
  { constructors } 

    ///<summary>
    ///  The construct of WorkbookPrintingPreview
    ///</summary>
    ///  <param name="workbook">Indicate which workbook to be printed.</param>
    ///  <param name="options">ImageOrPrintOptions contains some property of output</param>
    {class} function init(workbook: DNWorkbook; options: DNImageOrPrintOptions): DNWorkbookPrintingPreview;

  end;

  ///<summary>
  ///  Workbook printing preview.
  ///</summary>
  [DNTypeName('Aspose.Cells.Rendering.WorkbookPrintingPreview')]
  DNWorkbookPrintingPreview = interface(DDN.mscorlib.DNObject)
  ['{D6AB1C39-3728-3908-80CD-88998FC96F18}']
  { getters & setters } 

    function get_EvaluatedPageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Evaluate the total page count of this workbook
    ///</summary>
    property EvaluatedPageCount: Int32 read get_EvaluatedPageCount;
  end;

  TDNWorkbookPrintingPreview = class(TDNGenericImport<DNWorkbookPrintingPreviewClass, DNWorkbookPrintingPreview>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNWorkbookRenderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{345BD570-A1C0-59B1-91CE-26E315F888AE}']
  { constructors } 

    ///<summary>
    ///  The construct of WorkbookRender
    ///</summary>
    ///  <param name="workbook">Indicate which workbook to be rendered.</param>
    ///  <param name="options">ImageOrPrintOptions contains some property of output image</param>
    {class} function init(workbook: DNWorkbook; options: DNImageOrPrintOptions): DNWorkbookRender;

  end;

  ///<summary>
  ///  Represents a Workbook render.
  ///  The constructor of this class , must be used after modification of pagesetup, cell style.
  ///</summary>
  ///<remarks></remarks>
  [DNTypeName('Aspose.Cells.Rendering.WorkbookRender')]
  DNWorkbookRender = interface(DDN.mscorlib.DNObject)
  ['{9C2FFA2D-4432-3654-85CF-406A77323D68}']
  { getters & setters } 

    function get_PageCount: Int32;

  { methods } 

    ///<summary>
    ///  Get page size of output image. The size unit is in pixel.
    ///</summary>
    ///  <param name="pageIndex">The page index is based on zero.</param>
    ///<returns></returns>
    function GetPageSize(pageIndex: Int32): DDN.System.Drawing.DNSize;
    ///<summary>
    ///  Render whole workbook as Tiff Image to stream.
    ///</summary>
    ///  <param name="stream">the stream of the output image</param>
    procedure ToImage(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Render whole workbook as Tiff Image to a file.
    ///</summary>
    ///  <param name="filename">the filename of the output image</param>
    procedure ToImage(filename: string); overload;
    ///<summary>
    ///  Render certain page to a file.
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///  <param name="fileName">filename of the output image</param>
    procedure ToImage(pageIndex: Int32; fileName: string); overload;
    ///<summary>
    ///  Render certain page to a stream.
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///  <param name="stream">the stream of the output image</param>
    procedure ToImage(pageIndex: Int32; stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Render certain page to a Bitmap object.
    ///</summary>
    ///  <param name="pageIndex">indicate which page is to be converted</param>
    ///<returns>the bitmap object of the page</returns>
    function ToImage(pageIndex: Int32): DDN.System.Drawing.DNBitmap; overload;
    ///<summary>
    ///  Render workbook to Printer
    ///</summary>
    ///  <param name="PrinterName">the name of the printer , for example: "Microsoft Office Document Image Writer"</param>
    procedure ToPrinter(PrinterName: string); overload;
    ///<summary>
    ///  Render workbook to Printer
    ///</summary>
    ///  <param name="PrinterName">the name of the printer , for example: "Microsoft Office Document Image Writer"</param>
    ///  <param name="PrintPageIndex">the 0-based index of the first page to print, it must be in Range [0, WorkbookRender.PageCount-1]</param>
    ///  <param name="PrintPageCount">the number of pages to print, it must be greater than zero</param>
    procedure ToPrinter(PrinterName: string; PrintPageIndex: Int32; PrintPageCount: Int32); overload;
    ///<summary>
    ///  Render workbook to Printer
    ///</summary>
    ///  <param name="PrinterName">the name of the printer , for example: "Microsoft Office Document Image Writer"</param>
    ///  <param name="DocumentName">set the print job name </param>
    procedure ToPrinter(PrinterName: string; DocumentName: string); overload;
    ///<summary>
    ///  Render workbook to Printer
    ///</summary>
    ///  <param name="PrinterSettings"> the settings of printer, e.g. PrinterName, Duplex</param>
    procedure ToPrinter(PrinterSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    ///<summary>
    ///  Client can control page setting of printer when print each page using this function.
    ///</summary>
    ///  <param name="nextPageAfterPrint">If true , printer will go to next page after print current page</param>
    ///  <param name="printPageEventArgs">System.Drawing.Printing.PrintPageEventArgs</param>
    ///<returns>Indirect next page index,  based on zero</returns>
    function CustomPrint(nextPageAfterPrint: Boolean; printPageEventArgs: DDN.System.Drawing.DNPrintPageEventArgs): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicate the total page count of workbook
    ///</summary>
    property PageCount: Int32 read get_PageCount;
  end;

  TDNWorkbookRender = class(TDNGenericImport<DNWorkbookRenderClass, DNWorkbookRender>) end;

  //-------------namespace: Aspose.Cells----------------
  DNReplaceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB781629-0E8F-5347-8C76-C51C2309068D}']
  { constructors } 

    {class} function init: DNReplaceOptions;

  end;

  ///<summary>
  ///  Represent the replace options.
  ///</summary>
  [DNTypeName('Aspose.Cells.ReplaceOptions')]
  DNReplaceOptions = interface(DDN.mscorlib.DNObject)
  ['{3A9590F2-583A-3F7F-B01C-25190296B62B}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_MatchEntireCellContents: Boolean;
    procedure set_MatchEntireCellContents(value: Boolean);
    function get_RegexKey: Boolean;
    procedure set_RegexKey(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if the searched string is case sensitive.
    ///</summary>
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    ///<summary>
    ///  Indicates whether to match entire cells contents
    ///</summary>
    property MatchEntireCellContents: Boolean read get_MatchEntireCellContents write set_MatchEntireCellContents;
    ///<summary>
    ///  Indicates whether the searched key is regex. If true then the searched key will be taken as regex.
    ///</summary>
    property RegexKey: Boolean read get_RegexKey write set_RegexKey;
  end;

  TDNReplaceOptions = class(TDNGenericImport<DNReplaceOptionsClass, DNReplaceOptions>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8651030-90BF-542F-AC2C-F8F79AF8F577}']
  end;

  ///<summary>
  ///  Represents the revision.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.Revision')]
  DNRevision = interface(DDN.mscorlib.DNObject)
  ['{56C910B9-CD01-3877-A6D7-B1AF375A9512}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevision = class(TDNGenericImport<DNRevisionClass, DNRevision>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionAutoFormatClass = interface(DNRevisionClass)
  ['{886E4EF4-4D2A-536B-8112-CCBD4D715B1A}']
  end;

  ///<summary>
  ///  represents a revision record of information about a formatting change.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionAutoFormat')]
  DNRevisionAutoFormat = interface(DNRevision)
  ['{B727FCB0-9B8E-3D22-A934-C634EA68E6FF}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellArea: DNCellArea;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the location where the formatting was applied.
    ///</summary>
    property CellArea: DNCellArea read get_CellArea;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionAutoFormat = class(TDNGenericImport<DNRevisionAutoFormatClass, DNRevisionAutoFormat>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCellChangeClass = interface(DNRevisionClass)
  ['{C2C90B55-F875-5983-BBDE-BE6998E5B4B6}']
  end;

  ///<summary>
  ///  Represents the revision that changing cells.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionCellChange')]
  DNRevisionCellChange = interface(DNRevision)
  ['{50C4C612-E0C1-3685-8307-95AFB7A96929}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellName: string;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_IsNewFormatted: Boolean;
    function get_IsOldFormatted: Boolean;
    function get_OldFormula: string;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_NewFormula: string;
    function get_NewStyle: DNStyle;
    function get_OldStyle: DNStyle;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the name of the cell.
    ///</summary>
    property CellName: string read get_CellName;
    ///<summary>
    ///  Gets the row index of the cell.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets the column index of the cell.
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Indicates whether this cell is new formatted.
    ///</summary>
    property IsNewFormatted: Boolean read get_IsNewFormatted;
    ///<summary>
    ///  Indicates whether this cell is old formatted.
    ///</summary>
    property IsOldFormatted: Boolean read get_IsOldFormatted;
    ///<summary>
    ///  Gets the old formula.
    ///</summary>
    property OldFormula: string read get_OldFormula;
    ///<summary>
    ///  Gets old value of the cell.
    ///</summary>
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    ///<summary>
    ///  Gets new value of the cell.
    ///</summary>
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    ///<summary>
    ///  Gets the old formula.
    ///</summary>
    property NewFormula: string read get_NewFormula;
    ///<summary>
    ///  Gets the new style of the cell.
    ///</summary>
    property NewStyle: DNStyle read get_NewStyle;
    ///<summary>
    ///  Gets the old style of the cell.
    ///</summary>
    property OldStyle: DNStyle read get_OldStyle;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCellChange = class(TDNGenericImport<DNRevisionCellChangeClass, DNRevisionCellChange>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCellCommentClass = interface(DNRevisionClass)
  ['{16DC2F18-7595-5F23-A40C-A65FA1E7E118}']
  end;

  ///<summary>
  ///  Represents a revision record of a cell comment change.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionCellComment')]
  DNRevisionCellComment = interface(DNRevision)
  ['{3EA822D5-FE99-3F72-8A80-1F1E1B8D1A2E}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_CellName: string;
    procedure set_CellName(value: string);
    function get_ActionType: DNRevisionActionType;
    function get_IsOldComment: Boolean;
    function get_OldLength: Int32;
    function get_NewLength: Int32;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the row index of the which contains a comment.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets the column index of the which contains a comment.
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Gets the name of the cell.
    ///</summary>
    property CellName: string read get_CellName write set_CellName;
    ///<summary>
    ///  Gets the action type of the revision.
    ///</summary>
    property ActionType: DNRevisionActionType read get_ActionType;
    ///<summary>
    ///  Indicates whether it's an  old comment.
    ///</summary>
    property IsOldComment: Boolean read get_IsOldComment;
    ///<summary>
    ///  Gets Length of the comment text added in this revision.
    ///</summary>
    property OldLength: Int32 read get_OldLength;
    ///<summary>
    ///  Gets Length of the comment before this revision was made.
    ///</summary>
    property NewLength: Int32 read get_NewLength;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCellComment = class(TDNGenericImport<DNRevisionCellCommentClass, DNRevisionCellComment>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCellMoveClass = interface(DNRevisionClass)
  ['{E93800CA-E45A-5758-9438-2BC8D68BD287}']
  end;

  ///<summary>
  ///  Represents a revision record on a cell(s) that moved.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionCellMove')]
  DNRevisionCellMove = interface(DNRevision)
  ['{2C383ABF-F8B3-37D7-A822-6FF81974EAE9}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_SourceArea: DNCellArea;
    function get_DestinationArea: DNCellArea;
    function get_SourceWorksheet: DNWorksheet;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the source area.
    ///</summary>
    property SourceArea: DNCellArea read get_SourceArea;
    ///<summary>
    ///  Gets the destination area.
    ///</summary>
    property DestinationArea: DNCellArea read get_DestinationArea;
    ///<summary>
    ///  Gets the source worksheet.
    ///</summary>
    property SourceWorksheet: DNWorksheet read get_SourceWorksheet;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCellMove = class(TDNGenericImport<DNRevisionCellMoveClass, DNRevisionCellMove>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCustomViewClass = interface(DNRevisionClass)
  ['{63DE81AE-6742-52BD-B1A1-044242E116D1}']
  end;

  ///<summary>
  ///  Represents a revision record of adding or removing a custom view to the workbook
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionCustomView')]
  DNRevisionCustomView = interface(DNRevision)
  ['{92B791A0-5C16-3D65-9AA4-7B65F79DC289}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_ActionType: DNRevisionActionType;
    function get_Guid: DDN.mscorlib.DNGuid;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the type of action.
    ///</summary>
    property ActionType: DNRevisionActionType read get_ActionType;
    ///<summary>
    ///  Gets the globally unique identifier of the custom view.
    ///</summary>
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCustomView = class(TDNGenericImport<DNRevisionCustomViewClass, DNRevisionCustomView>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionDefinedNameClass = interface(DNRevisionClass)
  ['{4411B6B5-F5D4-5797-AA67-F1887189237C}']
  end;

  ///<summary>
  ///  Represents a revision record of a defined name change.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionDefinedName')]
  DNRevisionDefinedName = interface(DNRevision)
  ['{EFFE3E86-2377-3150-9DD3-704212831929}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Text: string;
    function get_OldFormula: string;
    function get_NewFormula: string;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the text of the defined name.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Gets the old formula.
    ///</summary>
    property OldFormula: string read get_OldFormula;
    ///<summary>
    ///  Gets the formula.
    ///</summary>
    property NewFormula: string read get_NewFormula;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionDefinedName = class(TDNGenericImport<DNRevisionDefinedNameClass, DNRevisionDefinedName>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionFormatClass = interface(DNRevisionClass)
  ['{8AFED276-6090-5C6A-A50E-EB336B26D7D8}']
  end;

  ///<summary>
  ///  represents a revision record of information about a formatting change.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionFormat')]
  DNRevisionFormat = interface(DNRevision)
  ['{9418CC85-FD8C-3CCE-8F26-A444C10AE245}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Areas: TArray<DNCellArea>;
    function get_Style: DNStyle;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  The range to which this formatting was applied.
    ///</summary>
    property Areas: TArray<DNCellArea> read get_Areas;
    ///<summary>
    ///  Gets the applied style.
    ///</summary>
    property Style: DNStyle read get_Style;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionFormat = class(TDNGenericImport<DNRevisionFormatClass, DNRevisionFormat>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionInsertDeleteClass = interface(DNRevisionClass)
  ['{77099A0A-3214-5E8B-B156-429E6263A72C}']
  end;

  ///<summary>
  ///  Represents a revision record of a row/column insert/delete action.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionInsertDelete')]
  DNRevisionInsertDelete = interface(DNRevision)
  ['{67795FED-3D33-31A4-857F-7E4C7C9B0260}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellArea: DNCellArea;
    function get_ActionType: DNRevisionActionType;
    function get_Revisions: DNRevisionCollection;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the inserting/deleting range.
    ///</summary>
    property CellArea: DNCellArea read get_CellArea;
    ///<summary>
    ///  Gets the action type of this revision.
    ///</summary>
    property ActionType: DNRevisionActionType read get_ActionType;
    ///<summary>
    ///  Gets revision list by this operation.
    ///</summary>
    property Revisions: DNRevisionCollection read get_Revisions;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionInsertDelete = class(TDNGenericImport<DNRevisionInsertDeleteClass, DNRevisionInsertDelete>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionInsertSheetClass = interface(DNRevisionClass)
  ['{DDF79A74-4EDA-53CB-B5DF-5578CA97BF1D}']
  end;

  ///<summary>
  ///  Represents a revision record of a sheet that was inserted.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionInsertSheet')]
  DNRevisionInsertSheet = interface(DNRevision)
  ['{D3BC5AF4-8999-383C-B1CE-2191F50FCA99}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_ActionType: DNRevisionActionType;
    function get_Name: string;
    function get_SheetPosition: Int32;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the action type of the revision.
    ///</summary>
    property ActionType: DNRevisionActionType read get_ActionType;
    ///<summary>
    ///  Gets the name of the worksheet.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the zero based position of the new sheet in the sheet tab bar.
    ///</summary>
    property SheetPosition: Int32 read get_SheetPosition;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionInsertSheet = class(TDNGenericImport<DNRevisionInsertSheetClass, DNRevisionInsertSheet>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionMergeConflictClass = interface(DNRevisionClass)
  ['{AF498549-39C7-5592-8F3D-432D2FB4C10E}']
  end;

  ///<summary>
  ///  Represents a revision record which indicates that there was a merge conflict.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionMergeConflict')]
  DNRevisionMergeConflict = interface(DNRevision)
  ['{F32414FB-91D9-3D7D-8F5E-65F2E1981817}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionMergeConflict = class(TDNGenericImport<DNRevisionMergeConflictClass, DNRevisionMergeConflict>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionQueryTableClass = interface(DNRevisionClass)
  ['{FFD69D47-A1BC-5095-B4E9-C215AB72E355}']
  end;

  ///<summary>
  ///  Represents a revision of a query table field change.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionQueryTable')]
  DNRevisionQueryTable = interface(DNRevision)
  ['{1FD457A8-DE24-3DEE-B3DF-BBADD3C054E0}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellArea: DNCellArea;
    function get_FieldId: Int32;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of the revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the location of the affected query table.
    ///</summary>
    property CellArea: DNCellArea read get_CellArea;
    ///<summary>
    ///  Gets ID of the specific query table field that was removed.
    ///</summary>
    property FieldId: Int32 read get_FieldId;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionQueryTable = class(TDNGenericImport<DNRevisionQueryTableClass, DNRevisionQueryTable>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionRenameSheetClass = interface(DNRevisionClass)
  ['{BFCC9A9A-7E8C-51C5-8FEE-A952F7E76E20}']
  end;

  ///<summary>
  ///  Represents a revision of renaming sheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionRenameSheet')]
  DNRevisionRenameSheet = interface(DNRevision)
  ['{3BC3B44A-6D36-370E-A253-EAE23954F937}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_OldName: string;
    function get_NewName: string;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the type of the revision.
    ///</summary>
    property &Type: DNRevisionType read get_Type;
    ///<summary>
    ///  Gets the old name of the worksheet.
    ///</summary>
    property OldName: string read get_OldName;
    ///<summary>
    ///  Gets the new name of the worksheet.
    ///</summary>
    property NewName: string read get_NewName;
    ///<summary>
    ///  Gets the worksheet.
    ///</summary>
    property Worksheet: DNWorksheet read get_Worksheet;
    ///<summary>
    ///  Gets the number of this revision.
    ///</summary>
    ///<remarks>
    ///  Zero means this revision does not contains id.
    ///</remarks>
    property Id: Int32 read get_Id;
  end;

  TDNRevisionRenameSheet = class(TDNGenericImport<DNRevisionRenameSheetClass, DNRevisionRenameSheet>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionLogClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6DAB717-A330-565E-B883-655AB3D36F5E}']
  end;

  ///<summary>
  ///  Represents the revision log.
  ///</summary>
  [DNTypeName('Aspose.Cells.Revisions.RevisionLog')]
  DNRevisionLog = interface(DDN.mscorlib.DNObject)
  ['{66AF1639-BED9-3457-821E-624EB9B3EB77}']
  { getters & setters } 

    function get_Revisions: DNRevisionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets all revisions in this log.
    ///</summary>
    property Revisions: DNRevisionCollection read get_Revisions;
  end;

  TDNRevisionLog = class(TDNGenericImport<DNRevisionLogClass, DNRevisionLog>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRowClass = interface(DNObjectClass)
  ['{18C1232B-651C-5EA5-AB54-FDD4B1DE5C54}']
  end;

  ///<summary>
  ///  Represents a single row in a worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Row')]
  DNRow = interface(DDN.mscorlib.DNIEnumerable)
  ['{AABBC73F-D1A6-3DC0-B5FE-1B3EF89982C5}']
  { getters & setters } 

    function get_IsBlank: Boolean;
    function get_Item(column: Int32): DNCell;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_Index: Int32;
    function get_GroupLevel: Byte;
    function get_IsHeightMatched: Boolean;
    procedure set_IsHeightMatched(value: Boolean);
    function get_Style: DNStyle;
    function get_FirstCell: DNCell;
    function get_FirstDataCell: DNCell;
    function get_LastCell: DNCell;
    function get_LastDataCell: DNCell;

  { methods } 

    ///<summary>
    ///  Get the cell by specific index in the list.
    ///</summary>
    ///  <param name="index">The position.</param>
    ///<returns>The Cell object.</returns>
    ///<remarks>NOTE: This member is now obsolete.
    ///  Instead, please use Row.GetEnumerator() method to iterate all cells in this row.
    ///  This property will be removed 12 months later since February 2015.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    function GetCellByIndex(index: Int32): DNCell;
    ///<summary>
    ///  Gets the cells enumerator
    ///</summary>
    ///<returns>The cells enumerator</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Gets the cell or null in the specific index.
    ///</summary>
    ///  <param name="column">The column index</param>
    ///<returns>Returns the cell object if the cell exists.
    ///  Or returns null if the cell object does not exist.</returns>
    function GetCellOrNull(column: Int32): DNCell;
    ///<summary>
    ///  Copy settings of row, such as style, height, visibility, ...etc.
    ///</summary>
    ///  <param name="source">the source row whose settings will be copied to this one</param>
    ///  <param name="checkStyle">whether check and gather style.
    ///  Only takes effect and be needed when two row objects belong to different workbook and the styles of two workbooks are different.</param>
    procedure CopySettings(source: DNRow; checkStyle: Boolean);
    ///<summary>
    ///  Applies formats for a whole row.
    ///</summary>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    ///<summary>
    ///  Checks whether this object refers to the same row with another.
    ///</summary>
    ///  <param name="obj">another object</param>
    ///<returns>true if two objects refers to the same row.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Checks whether this object refers to the same row with another row object.
    ///</summary>
    ///  <param name="row">another row object</param>
    ///<returns>true if two row objects refers to the same row.</returns>
    function Equals(row: DNRow): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the row contains any data
    ///</summary>
    property IsBlank: Boolean read get_IsBlank;
    property Item[column: Int32]: DNCell read get_Item; default;
    ///<summary>
    ///  Gets and sets the row height in unit of Points.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Indicates whether the row is hidden.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  Gets the index of this row.
    ///</summary>
    property Index: Int32 read get_Index;
    ///<summary>
    ///  Gets the group level of the row.
    ///</summary>
    property GroupLevel: Byte read get_GroupLevel;
    ///<summary>
    ///  Indicates that row height and default font height matches.
    ///</summary>
    property IsHeightMatched: Boolean read get_IsHeightMatched write set_IsHeightMatched;
    ///<summary>
    ///  Represents the style of this row.
    ///</summary>
    ///<remarks> You have to call Row.ApplyStyle() method to save your changing with the row style,
    ///  otherwise it will not effect.
    ///</remarks>
    property Style: DNStyle read get_Style;
    ///<summary>
    ///  Gets the first cell object in the row.
    ///</summary>
    property FirstCell: DNCell read get_FirstCell;
    ///<summary>
    ///  Gets the first non-blank cell in the row.
    ///</summary>
    property FirstDataCell: DNCell read get_FirstDataCell;
    ///<summary>
    ///  Gets the last cell object in the row.
    ///</summary>
    property LastCell: DNCell read get_LastCell;
    ///<summary>
    ///  Gets the last non-blank cell in the row.
    ///</summary>
    property LastDataCell: DNCell read get_LastDataCell;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRowCollectionClass = interface(DNObjectClass)
  ['{6BB143DC-B2A0-5D97-9A55-B60C5D49826C}']
  end;

  ///<summary>
  ///  Collects the <seealso cref="T:Aspose.Cells.Row" />
  ///  objects that represent the individual rows in a worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.RowCollection')]
  DNRowCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{D57ED111-FCB1-38C4-B461-C7B2C997CCA9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(rowIndex: Int32): DNRow;

  { methods } 

    ///<summary>
    ///  Gets an enumerator that iterates through this collection
    ///</summary>
    ///<returns>enumerator</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Gets the row object by the position in the list.
    ///</summary>
    ///  <param name="index">The position.</param>
    ///<returns>The Row object at given position.</returns>
    function GetRowByIndex(index: Int32): DNRow;
    ///<summary>
    ///  Clear all rows and cells.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Remove the row at the specified index
    ///</summary>
    ///  <param name="index">zero-based row index</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of rows in this collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[rowIndex: Int32]: DNRow read get_Item; default;
  end;

  TDNRowCollection = class(TDNGenericImport<DNRowCollectionClass, DNRowCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{363BDB4B-ED09-51C4-9C76-7904F0295275}']
  end;

  ///<summary>
  ///  Represents all save options
  ///</summary>
  [DNTypeName('Aspose.Cells.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{B6698B99-144C-3FC2-BEE0-800F318AAC1E}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDifSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E7E067A3-026A-5171-9175-E0C9095958C2}']
  { constructors } 

    ///<summary>
    ///  Creates the options for saving DIF file.
    ///</summary>
    {class} function init: DNDifSaveOptions;

  end;

  ///<summary>
  ///  Represents the options of saving dif file.
  ///</summary>
  [DNTypeName('Aspose.Cells.DifSaveOptions')]
  DNDifSaveOptions = interface(DNSaveOptions)
  ['{F33749A2-38D5-30CA-9868-F0EE8752E9B7}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNDifSaveOptions = class(TDNGenericImport<DNDifSaveOptionsClass, DNDifSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDocxSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{077EE379-1118-5DA6-800F-24858635D656}']
  { constructors } 

    ///<summary>
    ///  Represents options of saving .docx file.
    ///</summary>
    {class} function init: DNDocxSaveOptions; overload;
    ///<summary>
    ///  Represents options of saving .docx file.
    ///</summary>
    ///  <param name="saveAsImage">
    ///  If True, the workbook will be converted into some pictures of .docx file.
    ///  If False, the workbook will be converted into some tables of .docx file.</param>
    {class} function init(saveAsImage: Boolean): DNDocxSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents options of saving .docx file.
  ///</summary>
  [DNTypeName('Aspose.Cells.DocxSaveOptions')]
  DNDocxSaveOptions = interface(DNSaveOptions)
  ['{3386D1CB-110B-3DEE-8627-3806E8BAC273}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNDocxSaveOptions = class(TDNGenericImport<DNDocxSaveOptionsClass, DNDocxSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHtmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{43E79DDF-DE69-5ECE-80E3-4E042762AD1A}']
  { constructors } 

    ///<summary>
    ///  Creates options for saving html file.
    ///</summary>
    {class} function init: DNHtmlSaveOptions; overload;
    ///<summary>
    ///  Creates options for saving htm file.
    ///</summary>
    ///  <param name="format">The saving file format.</param>
    {class} function init(format: DNSaveFormat): DNHtmlSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the options for saving html file.
  ///</summary>
  [DNTypeName('Aspose.Cells.HtmlSaveOptions')]
  DNHtmlSaveOptions = interface(DNSaveOptions)
  ['{7A389362-DF4B-35D9-9F1A-7445D30ACBF4}']
  { getters & setters } 

    function get_PageTitle: string;
    procedure set_PageTitle(value: string);
    function get_AttachedFilesDirectory: string;
    procedure set_AttachedFilesDirectory(value: string);
    function get_AttachedFilesUrlPrefix: string;
    procedure set_AttachedFilesUrlPrefix(value: string);
    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_IsExportComments: Boolean;
    procedure set_IsExportComments(value: Boolean);
    function get_DisableDownlevelRevealedComments: Boolean;
    procedure set_DisableDownlevelRevealedComments(value: Boolean);
    function get_IsExpImageToTempDir: Boolean;
    procedure set_IsExpImageToTempDir(value: Boolean);
    function get_ImageScalable: Boolean;
    procedure set_ImageScalable(value: Boolean);
    function get_WidthScalable: Boolean;
    procedure set_WidthScalable(value: Boolean);
    function get_ExportSingleTab: Boolean;
    procedure set_ExportSingleTab(value: Boolean);
    function get_ExportImagesAsBase64: Boolean;
    procedure set_ExportImagesAsBase64(value: Boolean);
    function get_ExportActiveWorksheetOnly: Boolean;
    procedure set_ExportActiveWorksheetOnly(value: Boolean);
    function get_ExportPrintAreaOnly: Boolean;
    procedure set_ExportPrintAreaOnly(value: Boolean);
    function get_ExportArea: DNCellArea;
    procedure set_ExportArea(value: DNCellArea);
    function get_ParseHtmlTagInCell: Boolean;
    procedure set_ParseHtmlTagInCell(value: Boolean);
    function get_HtmlCrossStringType: DNHtmlCrossType;
    procedure set_HtmlCrossStringType(value: DNHtmlCrossType);
    function get_HiddenColDisplayType: DNHtmlHiddenColDisplayType;
    procedure set_HiddenColDisplayType(value: DNHtmlHiddenColDisplayType);
    function get_HiddenRowDisplayType: DNHtmlHiddenRowDisplayType;
    procedure set_HiddenRowDisplayType(value: DNHtmlHiddenRowDisplayType);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ExportObjectListener: DNIExportObjectListener;
    procedure set_ExportObjectListener(value: DNIExportObjectListener);
    function get_FilePathProvider: DNIFilePathProvider;
    procedure set_FilePathProvider(value: DNIFilePathProvider);
    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_ImageOptions: DNImageOrPrintOptions;
    function get_ExportHiddenWorksheet: Boolean;
    procedure set_ExportHiddenWorksheet(value: Boolean);
    function get_PresentationPreference: Boolean;
    procedure set_PresentationPreference(value: Boolean);
    function get_CellCssPrefix: string;
    procedure set_CellCssPrefix(value: string);
    function get_TableCssId: string;
    procedure set_TableCssId(value: string);
    function get_IsFullPathLink: Boolean;
    procedure set_IsFullPathLink(value: Boolean);
    function get_ExportWorksheetCSSSeparately: Boolean;
    procedure set_ExportWorksheetCSSSeparately(value: Boolean);
    function get_ExportSimilarBorderStyle: Boolean;
    procedure set_ExportSimilarBorderStyle(value: Boolean);
    function get_MergeEmptyTdForcely: Boolean;
    procedure set_MergeEmptyTdForcely(value: Boolean);
    function get_ExportCellCoordinate: Boolean;
    procedure set_ExportCellCoordinate(value: Boolean);
    function get_ExportExtraHeadings: Boolean;
    procedure set_ExportExtraHeadings(value: Boolean);
    function get_ExportHeadings: Boolean;
    procedure set_ExportHeadings(value: Boolean);
    function get_ExportFormula: Boolean;
    procedure set_ExportFormula(value: Boolean);
    function get_AddTooltipText: Boolean;
    procedure set_AddTooltipText(value: Boolean);
    function get_ExportGridLines: Boolean;
    procedure set_ExportGridLines(value: Boolean);
    function get_ExportBogusRowData: Boolean;
    procedure set_ExportBogusRowData(value: Boolean);
    function get_ExcludeUnusedStyles: Boolean;
    procedure set_ExcludeUnusedStyles(value: Boolean);
    function get_ExportDocumentProperties: Boolean;
    procedure set_ExportDocumentProperties(value: Boolean);
    function get_ExportWorksheetProperties: Boolean;
    procedure set_ExportWorksheetProperties(value: Boolean);
    function get_ExportWorkbookProperties: Boolean;
    procedure set_ExportWorkbookProperties(value: Boolean);
    function get_ExportFrameScriptsAndProperties: Boolean;
    procedure set_ExportFrameScriptsAndProperties(value: Boolean);
    function get_ExportDataOptions: DNHtmlExportDataOptions;
    procedure set_ExportDataOptions(value: DNHtmlExportDataOptions);
    function get_LinkTargetType: DNHtmlLinkTargetType;
    procedure set_LinkTargetType(value: DNHtmlLinkTargetType);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The title of the html page.
    ///  Only for saving to html stream.
    ///</summary>
    property PageTitle: string read get_PageTitle write set_PageTitle;
    ///<summary>
    ///  The directory that the attached files will be saved to.
    ///  Only for saving to html stream.
    ///</summary>
    property AttachedFilesDirectory: string read get_AttachedFilesDirectory write set_AttachedFilesDirectory;
    ///<summary>
    ///  Specify the Url prefix of attached files such as image in the html file.
    ///  Only for saving to html stream.
    ///</summary>
    property AttachedFilesUrlPrefix: string read get_AttachedFilesUrlPrefix write set_AttachedFilesUrlPrefix;
    ///<summary>
    ///  Specify the default font name for exporting html, the default font will be used  when the font of style is not existing,
    ///  If this property is null, Aspose.Cells will use universal font which have the same family with the original font,
    ///  the default value is null.
    ///</summary>
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    ///<summary>
    ///  Indicates if exporting comments when saving file to html, the default value is false.
    ///</summary>
    property IsExportComments: Boolean read get_IsExportComments write set_IsExportComments;
    ///<summary>
    ///  Indicates if disable Downlevel-revealed conditional comments when exporting file to html, the default value is false.
    ///</summary>
    property DisableDownlevelRevealedComments: Boolean read get_DisableDownlevelRevealedComments write set_DisableDownlevelRevealedComments;
    ///<summary>
    ///  Indicates whether exporting image files to temp directory.
    ///  Only for saving to html stream.
    ///</summary>
    property IsExpImageToTempDir: Boolean read get_IsExpImageToTempDir write set_IsExpImageToTempDir;
    ///<summary>
    ///  Indicates whether using scalable unit to describe the image width
    ///  when using scalable unit to describe the column width.
    ///  The default value is true.
    ///</summary>
    property ImageScalable: Boolean read get_ImageScalable write set_ImageScalable;
    ///<summary>
    ///  Indicates whether using scalable unit to describe the column width when exporting file to html.
    ///  The default value is false.
    ///</summary>
    property WidthScalable: Boolean read get_WidthScalable write set_WidthScalable;
    ///<summary>
    ///  Indicates whether exporting the single tab when the file only has one worksheet.
    ///  The default value is false.
    ///</summary>
    property ExportSingleTab: Boolean read get_ExportSingleTab write set_ExportSingleTab;
    ///<summary>
    ///  Specifies whether images are saved in Base64 format to HTML, MHTML or EPUB.
    ///</summary>
    ///<remarks>
    ///  When this property is set to true image data is exported directly on the
    ///  img elements and separate files are not created.
    ///</remarks>
    property ExportImagesAsBase64: Boolean read get_ExportImagesAsBase64 write set_ExportImagesAsBase64;
    ///<summary>
    ///  Indicates if exporting the whole workbook to html file.
    ///</summary>
    property ExportActiveWorksheetOnly: Boolean read get_ExportActiveWorksheetOnly write set_ExportActiveWorksheetOnly;
    ///<summary>
    ///  Indicates if only exporting the print area to html file. The default value is false.
    ///</summary>
    property ExportPrintAreaOnly: Boolean read get_ExportPrintAreaOnly write set_ExportPrintAreaOnly;
    ///<summary>
    ///  Gets or Sets the exporting CellArea of current active Worksheet.
    ///  If you set this attribute, the print area of current active Worksheet will be omitted.
    ///  Only the specified area will be exported when saving the file to html.
    ///</summary>
    property ExportArea: DNCellArea read get_ExportArea write set_ExportArea;
    ///<summary>
    ///  Parse html tag in cell,like <div></div>,as cell value,or as html tag,default is true
    ///</summary>
    property ParseHtmlTagInCell: Boolean read get_ParseHtmlTagInCell write set_ParseHtmlTagInCell;
    ///<summary>
    ///  Indicates if a cross-cell string will be displayed in the same way as MS Excel when saving an Excel file in html format.
    ///  By default the value is Default, so, for cross-cell strings, there is little difference between the html files created by Aspose.Cells and MS Excel.
    ///  But the performance for creating large html files,setting the value to Cross would be several times faster than setting it to Default or Fit2Cell.
    ///</summary>
    property HtmlCrossStringType: DNHtmlCrossType read get_HtmlCrossStringType write set_HtmlCrossStringType;
    ///<summary>
    ///  Hidden column(the width of this column is 0) in excel,before save this into html format,
    ///  if HtmlHiddenColDisplayType is "Remove",the hidden column would not been output,
    ///  if the value is "Hidden", the column would been output,but was hidden,the default value is "Hidden"
    ///</summary>
    property HiddenColDisplayType: DNHtmlHiddenColDisplayType read get_HiddenColDisplayType write set_HiddenColDisplayType;
    ///<summary>
    ///  Hidden row(the height of this row is 0) in excel,before save this into html format,
    ///  if HtmlHiddenRowDisplayType is "Remove",the hidden row would not been output,
    ///  if the value is "Hidden", the row would been output,but was hidden,the default value is "Hidden"
    ///</summary>
    property HiddenRowDisplayType: DNHtmlHiddenRowDisplayType read get_HiddenRowDisplayType write set_HiddenRowDisplayType;
    ///<summary>
    ///  If not set,use Encoding.UTF8 as default enconding type.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Gets or sets the ExportObjectListener for exporting objects.
    ///</summary>
    ///<remarks>
    ///  NOTE: This property is now obsolete. Instead,
    ///  please use HtmlSaveOptions.IStreamProvider property.
    ///  This property will be removed 12 months later since August 2015.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property ExportObjectListener: DNIExportObjectListener read get_ExportObjectListener write set_ExportObjectListener;
    ///<summary>
    ///  Gets or sets the IFilePathProvider for exporting Worksheet to html separately.
    ///</summary>
    property FilePathProvider: DNIFilePathProvider read get_FilePathProvider write set_FilePathProvider;
    ///<summary>
    ///  Gets or sets the IStreamProvider for exporting objects.
    ///</summary>
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    ///<summary>
    ///  Get the ImageOrPrintOptions object before exporting
    ///</summary>
    property ImageOptions: DNImageOrPrintOptions read get_ImageOptions;
    ///<summary>
    ///  Indicating if exporting the hidden worksheet content.The default value is true.
    ///</summary>
    property ExportHiddenWorksheet: Boolean read get_ExportHiddenWorksheet write set_ExportHiddenWorksheet;
    ///<summary>
    ///  Indicating if html or mht file is presentation preference.The default value is false.if you want to get
    ///  more beautiful presentation,please set the value to true.
    ///</summary>
    property PresentationPreference: Boolean read get_PresentationPreference write set_PresentationPreference;
    ///<summary>
    ///  Gets and sets the prefix of the css name,the default value is "".
    ///</summary>
    property CellCssPrefix: string read get_CellCssPrefix write set_CellCssPrefix;
    ///<summary>
    ///  Gets and sets the prefix of the type css name such as tr,col,td and so on, they are contained in the table element
    ///  which has the specific TableCssId attribute. The default value is "".
    ///</summary>
    property TableCssId: string read get_TableCssId write set_TableCssId;
    ///<summary>
    ///  Indicating whether using full path link in sheet00x.htm,filelist.xml and tabstrip.htm.
    ///  The default value is false.
    ///</summary>
    property IsFullPathLink: Boolean read get_IsFullPathLink write set_IsFullPathLink;
    ///<summary>
    ///  Indicating whether export the worksheet css separately.The default value is false.
    ///</summary>
    property ExportWorksheetCSSSeparately: Boolean read get_ExportWorksheetCSSSeparately write set_ExportWorksheetCSSSeparately;
    ///<summary>
    ///  Indicating whether exporting the similar border style when the border style is not supported by browsers.
    ///  If you want to import the html or mht file to excel, please keep the default value.
    ///  The default value is false.
    ///</summary>
    property ExportSimilarBorderStyle: Boolean read get_ExportSimilarBorderStyle write set_ExportSimilarBorderStyle;
    ///<summary>
    ///  Indicates whether merging empty TD element forcely when exporting file to html.
    ///  The size of html file will be reduced significantly after setting value to true. The default value is false.
    ///  If you want to import the html file to excel or export perfect grid lines when saving file to html,
    ///  please keep the default value.
    ///</summary>
    property MergeEmptyTdForcely: Boolean read get_MergeEmptyTdForcely write set_MergeEmptyTdForcely;
    ///<summary>
    ///  Indicates whether exporting excel coordinate of nonblank cells when saving file to html. The default value is false.
    ///  If you want to import the output html to excel, please keep the default value.
    ///</summary>
    property ExportCellCoordinate: Boolean read get_ExportCellCoordinate write set_ExportCellCoordinate;
    ///<summary>
    ///  Indicates whether exporting extra headings when the length of text is longer than max display column.
    ///  The default value is false. If you want to import the html file to excel, please keep the default value.
    ///</summary>
    property ExportExtraHeadings: Boolean read get_ExportExtraHeadings write set_ExportExtraHeadings;
    ///<summary>
    ///  Indicates whether exporting headings when saving file to html.The default value is false.
    ///  If you want to import the html file to excel, please keep the default value.
    ///</summary>
    property ExportHeadings: Boolean read get_ExportHeadings write set_ExportHeadings;
    ///<summary>
    ///  Indicates whether exporting formula when saving file to html. The default value is true.
    ///  If you want to import the output html to excel, please keep the default value.
    ///</summary>
    property ExportFormula: Boolean read get_ExportFormula write set_ExportFormula;
    ///<summary>
    ///  Indicates whether adding tooltip text when the data can't be fully displayed.
    ///  The default value is false.
    ///</summary>
    property AddTooltipText: Boolean read get_AddTooltipText write set_AddTooltipText;
    ///<summary>
    ///  Indicating whether exporting the gridlines.The default value is false.
    ///</summary>
    property ExportGridLines: Boolean read get_ExportGridLines write set_ExportGridLines;
    ///<summary>
    ///  Indicating whether exporting bogus bottom row data. The default value is true.If you want to import the html or mht file
    ///  to excel, please keep the default value.
    ///</summary>
    property ExportBogusRowData: Boolean read get_ExportBogusRowData write set_ExportBogusRowData;
    ///<summary>
    ///  Indicating whether excluding unused styles.The default value is false.If you want to import
    ///  the html or mht file to excel, please keep the default value.
    ///</summary>
    property ExcludeUnusedStyles: Boolean read get_ExcludeUnusedStyles write set_ExcludeUnusedStyles;
    ///<summary>
    ///  Indicating whether exporting document properties.The default value is true.If you want to import
    ///  the html or mht file to excel, please keep the default value.
    ///</summary>
    property ExportDocumentProperties: Boolean read get_ExportDocumentProperties write set_ExportDocumentProperties;
    ///<summary>
    ///  Indicating whether exporting worksheet properties.The default value is true.If you want to import
    ///  the html or mht file to excel, please keep the default value.
    ///</summary>
    property ExportWorksheetProperties: Boolean read get_ExportWorksheetProperties write set_ExportWorksheetProperties;
    ///<summary>
    ///  Indicating whether exporting workbook properties.The default value is true.If you want to import
    ///  the html or mht file to excel, please keep the default value.
    ///</summary>
    property ExportWorkbookProperties: Boolean read get_ExportWorkbookProperties write set_ExportWorkbookProperties;
    ///<summary>
    ///  Indicating whether exporting frame scripts and document properties. The default value is true.If you want to import the html or mht file
    ///  to excel, please keep the default value.
    ///</summary>
    property ExportFrameScriptsAndProperties: Boolean read get_ExportFrameScriptsAndProperties write set_ExportFrameScriptsAndProperties;
    ///<summary>
    ///  Indicating the rule of exporting html file data.The default value is All.
    ///</summary>
    property ExportDataOptions: DNHtmlExportDataOptions read get_ExportDataOptions write set_ExportDataOptions;
    ///<summary>
    ///  Indicating the type of  target attribute in &lt;a&gt; link,The default value is HtmlLinkTargetType.Parent.
    ///</summary>
    property LinkTargetType: DNHtmlLinkTargetType read get_LinkTargetType write set_LinkTargetType;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNHtmlSaveOptions = class(TDNGenericImport<DNHtmlSaveOptionsClass, DNHtmlSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNImageSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{CB8D33AA-BCB8-5564-9718-6184D49913A9}']
  { constructors } 

    ///<summary>
    ///  Creates the options for saving image file.
    ///</summary>
    {class} function init: DNImageSaveOptions; overload;
    ///<summary>
    ///  Creates the options for saving image file.
    ///</summary>
    ///  <param name="saveFormat">The file format.
    ///  It must be tiff or svg.</param>
    {class} function init(saveFormat: DNSaveFormat): DNImageSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents image save options
  ///</summary>
  [DNTypeName('Aspose.Cells.ImageSaveOptions')]
  DNImageSaveOptions = interface(DNSaveOptions)
  ['{5426A51C-74EB-3874-990D-CD20A9545FC6}']
  { getters & setters } 

    function get_ImageOrPrintOptions: DNImageOrPrintOptions;
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Additional image creation options
    ///</summary>
    property ImageOrPrintOptions: DNImageOrPrintOptions read get_ImageOrPrintOptions;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNImageSaveOptions = class(TDNGenericImport<DNImageSaveOptionsClass, DNImageSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSvgSaveOptionsClass = interface(DNImageSaveOptionsClass)
  ['{A9951855-0196-5F26-A692-AD8010698A5F}']
  { constructors } 

    ///<summary>
    ///  Creates the options for saving svg file.
    ///</summary>
    {class} function init: DNSvgSaveOptions; overload;
    ///<summary>
    ///  Creates the options for saving svg file.
    ///</summary>
    ///  <param name="saveFormat">The file format.
    ///  It must be svg.</param>
    {class} function init(saveFormat: DNSaveFormat): DNSvgSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents Svg save options
  ///</summary>
  [DNTypeName('Aspose.Cells.SvgSaveOptions')]
  DNSvgSaveOptions = interface(DNImageSaveOptions)
  ['{1106870F-8EB6-3A3E-9752-BFEC2C870F1F}']
  { getters & setters } 

    function get_SheetIndex: Int32;
    procedure set_SheetIndex(value: Int32);
    function get_ImageOrPrintOptions: DNImageOrPrintOptions;
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets which worksheet should be exported.
    ///  If the value is -1, the active  worksheet will be exported.
    ///</summary>
    property SheetIndex: Int32 read get_SheetIndex write set_SheetIndex;
    ///<summary>
    ///  Additional image creation options
    ///</summary>
    property ImageOrPrintOptions: DNImageOrPrintOptions read get_ImageOrPrintOptions;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNSvgSaveOptions = class(TDNGenericImport<DNSvgSaveOptionsClass, DNSvgSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMarkdownSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E524B2E0-7B03-5959-9519-1F8299D615EE}']
  { constructors } 

    ///<summary>
    ///  Creates options for saving markdown document
    ///</summary>
    {class} function init: DNMarkdownSaveOptions;

  end;

  ///<summary>
  ///  Represents the save options for markdown.
  ///</summary>
  [DNTypeName('Aspose.Cells.MarkdownSaveOptions')]
  DNMarkdownSaveOptions = interface(DNSaveOptions)
  ['{D496D390-31E7-3EB5-AF6A-4927DD5D6D74}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_FormatStrategy: DNCellValueFormatStrategy;
    procedure set_FormatStrategy(value: DNCellValueFormatStrategy);
    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_LineSeparator: string;
    procedure set_LineSeparator(value: string);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the default encoding.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Gets and sets the format strategy when exporting the cell value as string.
    ///</summary>
    property FormatStrategy: DNCellValueFormatStrategy read get_FormatStrategy write set_FormatStrategy;
    ///<summary>
    ///  The Data provider to provide cells data for saving workbook in light mode.
    ///</summary>
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    ///<summary>
    ///  Gets and sets the line separator.
    ///</summary>
    property LineSeparator: string read get_LineSeparator write set_LineSeparator;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNMarkdownSaveOptions = class(TDNGenericImport<DNMarkdownSaveOptionsClass, DNMarkdownSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOdsSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{19BBE139-2A5A-5CB8-990C-A21ECCB98E6F}']
  { constructors } 

    ///<summary>
    ///  Creates the options of saving ods file.
    ///</summary>
    {class} function init: DNOdsSaveOptions; overload;
    ///<summary>
    ///  Creates the options of saving ods file.
    ///</summary>
    ///  <param name="saveFormat"></param>
    {class} function init(saveFormat: DNSaveFormat): DNOdsSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the options of saving ods file.
  ///</summary>
  [DNTypeName('Aspose.Cells.OdsSaveOptions')]
  DNOdsSaveOptions = interface(DNSaveOptions)
  ['{4723FB3E-EAC4-3F46-BFE0-80C6E6664423}']
  { getters & setters } 

    function get_GeneratorType: DNOdsGeneratorType;
    procedure set_GeneratorType(value: DNOdsGeneratorType);
    function get_IsStrictSchema11: Boolean;
    procedure set_IsStrictSchema11(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the generator of the ods file.
    ///</summary>
    property GeneratorType: DNOdsGeneratorType read get_GeneratorType write set_GeneratorType;
    ///<summary>
    ///  Indicates whether the ods file should be saved as ODF format version 1.1. Default is false.
    ///</summary>
    property IsStrictSchema11: Boolean read get_IsStrictSchema11 write set_IsStrictSchema11;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNOdsSaveOptions = class(TDNGenericImport<DNOdsSaveOptionsClass, DNOdsSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOoxmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{C1DBB9BF-72AD-5608-B69E-E9BEC2449252}']
  { constructors } 

    ///<summary>
    ///  Creates the options for saving office open xml file.
    ///</summary>
    {class} function init: DNOoxmlSaveOptions; overload;
    ///<summary>
    ///  Creates the options for saving office open xml file.
    ///</summary>
    ///  <param name="saveFormat">The file format.
    ///  It must be xlsx,xltx,xlsm,xltm.</param>
    {class} function init(saveFormat: DNSaveFormat): DNOoxmlSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the options of saving office open xml file.
  ///</summary>
  [DNTypeName('Aspose.Cells.OoxmlSaveOptions')]
  DNOoxmlSaveOptions = interface(DNSaveOptions)
  ['{9E15EEB5-EDBA-3C84-B57E-03EBFBAA4E8B}']
  { getters & setters } 

    function get_ExportCellName: Boolean;
    procedure set_ExportCellName(value: Boolean);
    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_UpdateZoom: Boolean;
    procedure set_UpdateZoom(value: Boolean);
    function get_EnableZip64: Boolean;
    procedure set_EnableZip64(value: Boolean);
    function get_EmbedOoxmlAsOleObject: Boolean;
    procedure set_EmbedOoxmlAsOleObject(value: Boolean);
    function get_CompressionType: DNOoxmlCompressionType;
    procedure set_CompressionType(value: DNOoxmlCompressionType);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates if export cell name to Excel2007 .xlsx (.xlsm, .xltx, .xltm) file.
    ///  If the output file may be accessed by SQL Server DTS, this value must be true.
    ///  Setting the value to false will highly increase the performance and reduce the file size when creating large file.
    ///  Default value is true.
    ///</summary>
    property ExportCellName: Boolean read get_ExportCellName write set_ExportCellName;
    ///<summary>
    ///  The Data provider to provide cells data for saving workbook in light mode.
    ///</summary>
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    ///<summary>
    ///  Indicates whether update scaling factor before saving the file
    ///  if the PageSetup.FitToPagesWide and PageSetup.FitToPagesTall properties control how the worksheet is scaled.
    ///</summary>
    ///<remarks>
    ///  The default value is false for performance.
    ///</remarks>
    property UpdateZoom: Boolean read get_UpdateZoom write set_UpdateZoom;
    ///<summary>
    ///  Always use ZIP64 extensions when writing zip archives, even when unnecessary.
    ///</summary>
    property EnableZip64: Boolean read get_EnableZip64 write set_EnableZip64;
    ///<summary>
    ///  Indicates whether embedding Ooxml files of OleObject as ole object.
    ///</summary>
    ///<remarks>
    ///  Only for OleObject.
    ///</remarks>
    property EmbedOoxmlAsOleObject: Boolean read get_EmbedOoxmlAsOleObject write set_EmbedOoxmlAsOleObject;
    ///<summary>
    ///  Gets and sets the compression type for ooxml file.
    ///</summary>
    ///<remarks>The default value is OoxmlCompressionType.Level2.</remarks>
    property CompressionType: DNOoxmlCompressionType read get_CompressionType write set_CompressionType;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNOoxmlSaveOptions = class(TDNGenericImport<DNOoxmlSaveOptionsClass, DNOoxmlSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPdfSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{9F020F11-B3B5-53FB-A003-37D3CA0FE39B}']
  { constructors } 

    ///<summary>
    ///  Creates the options for saving pdf file.
    ///</summary>
    {class} function init: DNPdfSaveOptions; overload;
    ///<summary>
    ///  Creates the options for saving pdf file.
    ///</summary>
    ///  <param name="saveFormat">The save format.It must be pdf.</param>
    ///<remarks>NOTE: This constructor is now obsolete.
    ///  Instead, please use PdfSaveOptions() constructor.
    ///  This property will be removed 12 months later since January 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    {class} function init(saveFormat: DNSaveFormat): DNPdfSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the options for saving pdf file.
  ///</summary>
  [DNTypeName('Aspose.Cells.PdfSaveOptions')]
  DNPdfSaveOptions = interface(DNSaveOptions)
  ['{19B1D7CC-7F68-3394-AD1F-FF5CF07FB196}']
  { getters & setters } 

    function get_PrintingPageType: DNPrintingPageType;
    procedure set_PrintingPageType(value: DNPrintingPageType);
    function get_EmbedStandardWindowsFonts: Boolean;
    procedure set_EmbedStandardWindowsFonts(value: Boolean);
    function get_Bookmark: DNPdfBookmarkEntry;
    procedure set_Bookmark(value: DNPdfBookmarkEntry);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_DefaultFont: string;
    procedure set_DefaultFont(value: string);
    function get_CheckWorkbookDefaultFont: Boolean;
    procedure set_CheckWorkbookDefaultFont(value: Boolean);
    function get_SecurityOptions: DNPdfSecurityOptions;
    procedure set_SecurityOptions(value: DNPdfSecurityOptions);
    function get_OnePagePerSheet: Boolean;
    procedure set_OnePagePerSheet(value: Boolean);
    function get_AllColumnsInOnePagePerSheet: Boolean;
    procedure set_AllColumnsInOnePagePerSheet(value: Boolean);
    function get_ImageType: DDN.System.Drawing.DNImageFormat;
    procedure set_ImageType(value: DDN.System.Drawing.DNImageFormat);
    function get_CalculateFormula: Boolean;
    procedure set_CalculateFormula(value: Boolean);
    function get_PdfCompression: DNPdfCompressionCore;
    procedure set_PdfCompression(value: DNPdfCompressionCore);
    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_CheckFontCompatibility: Boolean;
    procedure set_CheckFontCompatibility(value: Boolean);
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_OptimizationType: DNPdfOptimizationType;
    procedure set_OptimizationType(value: DNPdfOptimizationType);
    function get_IsFontSubstitutionCharGranularity: Boolean;
    procedure set_IsFontSubstitutionCharGranularity(value: Boolean);
    function get_GridlineType: DNGridlineType;
    procedure set_GridlineType(value: DNGridlineType);
    function get_TextCrossType: DNTextCrossType;
    procedure set_TextCrossType(value: DNTextCrossType);
    function get_IgnoreError: Boolean;
    procedure set_IgnoreError(value: Boolean);
    function get_OutputBlankPageWhenNothingToPrint: Boolean;
    procedure set_OutputBlankPageWhenNothingToPrint(value: Boolean);
    function get_DrawObjectEventHandler: DNDrawObjectEventHandler;
    procedure set_DrawObjectEventHandler(value: DNDrawObjectEventHandler);
    function get_CustomPropertiesExport: DNPdfCustomPropertiesExport;
    procedure set_CustomPropertiesExport(value: DNPdfCustomPropertiesExport);
    function get_ExportDocumentStructure: Boolean;
    procedure set_ExportDocumentStructure(value: Boolean);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_EmfRenderSetting: DNEmfRenderSetting;
    procedure set_EmfRenderSetting(value: DNEmfRenderSetting);
    function get_DisplayDocTitle: Boolean;
    procedure set_DisplayDocTitle(value: Boolean);
    function get_DefaultEditLanguage: DNDefaultEditLanguage;
    procedure set_DefaultEditLanguage(value: DNDefaultEditLanguage);
    function get_FontEncoding: DNPdfFontEncoding;
    procedure set_FontEncoding(value: DNPdfFontEncoding);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets desired PPI(pixels per inch) of resample images and jpeg quality
    ///  All images will be converted to JPEG with the specified quality setting,
    ///  and images that are greater than the specified PPI (pixels per inch) will be resampled.
    ///</summary>
    ///  <param name="desiredPPI">Desired pixels per inch. 220 high quality. 150 screen quality. 96 email quality.</param>
    ///  <param name="jpegQuality">0 - 100% JPEG quality.</param>
    procedure SetImageResample(desiredPPI: Int32; jpegQuality: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates which pages will not be printed.
    ///</summary>
    property PrintingPageType: DNPrintingPageType read get_PrintingPageType write set_PrintingPageType;
    ///<summary>
    ///  True to embed true type fonts.
    ///  Affects only ASCII characters 32-127.
    ///  Fonts for character codes greater than 127 are always embedded.
    ///  Fonts are always embedded for PDF/A-1a, PDF/A-1b standard.
    ///  Default is true.
    ///</summary>
    property EmbedStandardWindowsFonts: Boolean read get_EmbedStandardWindowsFonts write set_EmbedStandardWindowsFonts;
    ///<summary>
    ///  Gets and sets the <see cref="T:Aspose.Cells.Rendering.PdfBookmarkEntry">PdfBookmarkEntry</see> object.
    ///</summary>
    property Bookmark: DNPdfBookmarkEntry read get_Bookmark write set_Bookmark;
    ///<summary>
    ///  Workbook converts to pdf will according to PdfCompliance in this property.
    ///</summary>
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    ///<summary>
    ///  When characters in the Excel are unicode and not be set with correct font in cell style,
    ///  They may appear as block in pdf,image.
    ///  Set the DefaultFont such as MingLiu or MS Gothic to show these characters.
    ///  If this property is not set, Aspose.Cells will use system default font to show these unicode characters.
    ///</summary>
    property DefaultFont: string read get_DefaultFont write set_DefaultFont;
    ///<summary>
    ///  When characters in the Excel are unicode and not be set with correct font in cell style,
    ///  They may appear as block in pdf,image.
    ///  Set this to true to try to use workbook's default font to show these characters first.
    ///</summary>
    ///<remarks>
    ///  Default is true.
    ///</remarks>
    property CheckWorkbookDefaultFont: Boolean read get_CheckWorkbookDefaultFont write set_CheckWorkbookDefaultFont;
    ///<summary>
    ///  Set this options, when security is need in xls2pdf result.
    ///</summary>
    property SecurityOptions: DNPdfSecurityOptions read get_SecurityOptions write set_SecurityOptions;
    ///<summary>
    ///  If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
    ///  The paper size of pagesetup will be invalid, and the other settings of pagesetup
    ///  will still take effect.
    ///</summary>
    property OnePagePerSheet: Boolean read get_OnePagePerSheet write set_OnePagePerSheet;
    ///<summary>
    ///  If AllColumnsInOnePagePerSheet is true , all column content of one sheet will output to only one page in result.
    ///  The width of paper size of pagesetup will be ignored, and the other settings of pagesetup
    ///  will still take effect.
    ///</summary>
    property AllColumnsInOnePagePerSheet: Boolean read get_AllColumnsInOnePagePerSheet write set_AllColumnsInOnePagePerSheet;
    ///<summary>
    ///  Represents the image type when converting the chart and shape .
    ///</summary>
    property ImageType: DDN.System.Drawing.DNImageFormat read get_ImageType write set_ImageType;
    ///<summary>
    ///  Indicates whether calculate formulas before saving pdf file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CalculateFormula: Boolean read get_CalculateFormula write set_CalculateFormula;
    ///<summary>
    ///  Indicate the compression algorithm
    ///</summary>
    property PdfCompression: DNPdfCompressionCore read get_PdfCompression write set_PdfCompression;
    ///<summary>
    ///  Gets or sets the IStreamProvider for exporting objects.
    ///</summary>
    ///<remarks>NOTE: This member is now obsolete. Instead,
    ///  please use Border property.
    ///  This property will be removed 12 months later since January 2018.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    ///<summary>
    ///  Indicates whether check font compatibility for every character in text.
    ///</summary>
    ///<remarks>
    ///  The default value is true.
    ///  Disable this property may give better performance.
    ///  But when the default or specified font of text/character cannot be used to render it,
    ///  unreadable characters(such as block) maybe occur in the generated pdf.
    ///  For such situation user should keep this property as true so that
    ///  alternative font can be searched and used to render the text instead;
    ///</remarks>
    property CheckFontCompatibility: Boolean read get_CheckFontCompatibility write set_CheckFontCompatibility;
    ///<summary>
    ///  Gets or sets the 0-based index of the first page to save.
    ///</summary>
    ///<remarks>
    ///  Default is 0.
    ///</remarks>
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    ///<summary>
    ///  Gets or sets the number of pages to save.
    ///</summary>
    ///<remarks>
    ///  Default is System.Int32.MaxValue which means all pages will be rendered..
    ///</remarks>
    property PageCount: Int32 read get_PageCount write set_PageCount;
    ///<summary>
    ///  Gets and sets the time of generating the pdf document.
    ///</summary>
    ///<remarks>
    ///  if it is not be set, it will be the time of generating the pdf.
    ///</remarks>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Gets and sets pdf optimization type.
    ///</summary>
    property OptimizationType: DNPdfOptimizationType read get_OptimizationType write set_OptimizationType;
    ///<summary>
    ///  Indicates whether only substitute the font of character when the cell font is not compatibility for it.
    ///</summary>
    ///<remarks>
    ///  Default is false. We will try default font of Workbook and PdfSaveOption/system for cell font first.
    ///</remarks>
    property IsFontSubstitutionCharGranularity: Boolean read get_IsFontSubstitutionCharGranularity write set_IsFontSubstitutionCharGranularity;
    ///<summary>
    ///  Gets or sets gridline type.
    ///</summary>
    ///<remarks>
    ///  Default is Dotted type.
    ///</remarks>
    property GridlineType: DNGridlineType read get_GridlineType write set_GridlineType;
    ///<summary>
    ///  Gets or sets displaying text type when the text width is larger than cell width.
    ///</summary>
    property TextCrossType: DNTextCrossType read get_TextCrossType write set_TextCrossType;
    ///<summary>
    ///  Indicates if you need to hide the error while rendering.
    ///  The error can be error in shape, image, chart rendering, etc.
    ///</summary>
    property IgnoreError: Boolean read get_IgnoreError write set_IgnoreError;
    ///<summary>
    ///  Indicates whether to output a blank page when there is nothing to print.
    ///</summary>
    ///<remarks>
    ///  Default is true.
    ///</remarks>
    property OutputBlankPageWhenNothingToPrint: Boolean read get_OutputBlankPageWhenNothingToPrint write set_OutputBlankPageWhenNothingToPrint;
    ///<summary>
    ///  Implements this interface to get DrawObject and Bound when rendering.
    ///</summary>
    property DrawObjectEventHandler: DNDrawObjectEventHandler read get_DrawObjectEventHandler write set_DrawObjectEventHandler;
    ///<summary>
    ///  Gets or sets a value determining the way <see cref="T:Aspose.Cells.Properties.CustomDocumentPropertyCollection" />
    ///  are exported to PDF file. Default value is None.
    ///</summary>
    property CustomPropertiesExport: DNPdfCustomPropertiesExport read get_CustomPropertiesExport write set_CustomPropertiesExport;
    ///<summary>
    ///  Gets or sets a value determining whether or not to export document structure.
    ///</summary>
    property ExportDocumentStructure: Boolean read get_ExportDocumentStructure write set_ExportDocumentStructure;
    ///<summary>
    ///  Control/Indicate progress of page saving process.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Setting for rendering Emf metafile.
    ///</summary>
    ///<remarks>
    ///  EMF metafiles identified as "EMF+ Dual" can contain both EMF+ records and EMF records.
    ///  Either type of record can be used to render the image, only EMF+ records, or only EMF records.
    ///  When <see cref="!:EmfRenderSetting.EmfPlusPrefer" />
    ///  is set, then EMF+ records will be parsed while rendering to pdf, otherwise only EMF records will be parsed.
    ///  Default value is <see cref="!:EmfRenderSetting.EmfOnly" />
    ///  .
    ///</remarks>
    property EmfRenderSetting: DNEmfRenderSetting read get_EmfRenderSetting write set_EmfRenderSetting;
    ///<summary>
    ///  Indicate whether the window's title bar should display the document title.
    ///</summary>
    ///<remarks>
    ///  If false, the title bar should instead display the name of the PDF file.
    ///  Default value is false.
    ///</remarks>
    property DisplayDocTitle: Boolean read get_DisplayDocTitle write set_DisplayDocTitle;
    ///<summary>
    ///  Gets or sets default edit language.
    ///</summary>
    ///<remarks>
    ///  It may display/render different layouts for text paragraph when different edit languages is set.
    ///  Default is <see cref="!:DefaultEditLanguage.Auto" />
    ///  .
    ///</remarks>
    property DefaultEditLanguage: DNDefaultEditLanguage read get_DefaultEditLanguage write set_DefaultEditLanguage;
    property FontEncoding: DNPdfFontEncoding read get_FontEncoding write set_FontEncoding;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNPdfSaveOptions = class(TDNGenericImport<DNPdfSaveOptionsClass, DNPdfSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPptxSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{61924C01-6409-5ADF-9799-D90708B10C74}']
  { constructors } 

    ///<summary>
    ///  Represents the pptx save options.
    ///</summary>
    {class} function init: DNPptxSaveOptions;

  end;

  ///<summary>
  ///  Represents the pptx save options.
  ///</summary>
  [DNTypeName('Aspose.Cells.PptxSaveOptions')]
  DNPptxSaveOptions = interface(DNSaveOptions)
  ['{E1461AF5-3118-30CD-AC8B-E2E4D21B14EE}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNPptxSaveOptions = class(TDNGenericImport<DNPptxSaveOptionsClass, DNPptxSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSpreadsheetML2003SaveOptionsClass = interface(DNSaveOptionsClass)
  ['{F02DD1A1-D2CE-5F69-82B8-F839FD9D8BC5}']
  { constructors } 

    ///<summary>
    ///  Creates the options for saving Excel 2003 spreadml file.
    ///</summary>
    {class} function init: DNSpreadsheetML2003SaveOptions; overload;
    ///<summary>
    ///  Creates the options for saving Excel 2003 spreadml file.
    ///</summary>
    ///  <param name="saveFormat">The save format.</param>
    ///<remarks>NOTE: This constructor is now obsolete.
    ///  Instead, please use SpreadsheetML2003SaveOptions() constructor.
    ///  This property will be removed 12 months later since January 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    {class} function init(saveFormat: DNSaveFormat): DNSpreadsheetML2003SaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the options for saving Excel 2003 spreadml file.
  ///</summary>
  [DNTypeName('Aspose.Cells.SpreadsheetML2003SaveOptions')]
  DNSpreadsheetML2003SaveOptions = interface(DNSaveOptions)
  ['{B40F2E4D-EC2B-39E6-A5D8-90DBE1A07FBD}']
  { getters & setters } 

    function get_IsIndentedFormatting: Boolean;
    procedure set_IsIndentedFormatting(value: Boolean);
    function get_LimitAsXls: Boolean;
    procedure set_LimitAsXls(value: Boolean);
    function get_ExportColumnIndexOfCell: Boolean;
    procedure set_ExportColumnIndexOfCell(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Causes child elements to be indented.
    ///</summary>
    ///<remarks>
    ///  The default value is true.
    ///  If the value is false, it will reduce the size of the xml file
    ///</remarks>
    property IsIndentedFormatting: Boolean read get_IsIndentedFormatting write set_IsIndentedFormatting;
    ///<summary>
    ///  Limit as xls, the max row index is 65535 and the max column index is 255.
    ///</summary>
    property LimitAsXls: Boolean read get_LimitAsXls write set_LimitAsXls;
    ///<summary>
    ///  The default value is false, it means that column index  will be ignored if the cell is contiguous to the previous cell.
    ///</summary>
    property ExportColumnIndexOfCell: Boolean read get_ExportColumnIndexOfCell write set_ExportColumnIndexOfCell;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNSpreadsheetML2003SaveOptions = class(TDNGenericImport<DNSpreadsheetML2003SaveOptionsClass, DNSpreadsheetML2003SaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTxtSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{5702B2D1-C1D4-5600-AAF2-E1E43A1430DA}']
  { constructors } 

    ///<summary>
    ///  Creates text file save options.
    ///</summary>
    {class} function init: DNTxtSaveOptions; overload;
    ///<summary>
    ///  Creates text file save options.
    ///</summary>
    ///  <param name="format">The save format of the text file.</param>
    {class} function init(format: DNSaveFormat): DNTxtSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the save options for csv/tab delimited/other text format.
  ///</summary>
  [DNTypeName('Aspose.Cells.TxtSaveOptions')]
  DNTxtSaveOptions = interface(DNSaveOptions)
  ['{C7DB8138-D70C-35A0-BB1C-6A1B8E505F86}']
  { getters & setters } 

    function get_Separator: Char;
    procedure set_Separator(value: Char);
    function get_SeparatorString: string;
    procedure set_SeparatorString(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_AlwaysQuoted: Boolean;
    procedure set_AlwaysQuoted(value: Boolean);
    function get_QuoteType: DNTxtValueQuoteType;
    procedure set_QuoteType(value: DNTxtValueQuoteType);
    function get_FormatStrategy: DNCellValueFormatStrategy;
    procedure set_FormatStrategy(value: DNCellValueFormatStrategy);
    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_TrimLeadingBlankRowAndColumn: Boolean;
    procedure set_TrimLeadingBlankRowAndColumn(value: Boolean);
    function get_KeepSeparatorsForBlankRow: Boolean;
    procedure set_KeepSeparatorsForBlankRow(value: Boolean);
    function get_ExportArea: DNCellArea;
    procedure set_ExportArea(value: DNCellArea);
    function get_ExportQuotePrefix: Boolean;
    procedure set_ExportQuotePrefix(value: Boolean);
    function get_ExportAllSheets: Boolean;
    procedure set_ExportAllSheets(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets char Delimiter of text file.
    ///</summary>
    property Separator: Char read get_Separator write set_Separator;
    ///<summary>
    ///  Gets and sets the a string value as separator.
    ///</summary>
    property SeparatorString: string read get_SeparatorString write set_SeparatorString;
    ///<summary>
    ///  Gets and sets the default encoding.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Indicates whether always adding '"' for each field.
    ///  If true then all values will be quoted;
    ///  If false then values will only be quoted when needed(for example,
    ///  when values contain special characters such as '"' , '\n' or separator character).
    ///  Default is false.
    ///</summary>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use QuoteType property instead.
    ///  This property will be removed 12 months later since August 2012.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property AlwaysQuoted: Boolean read get_AlwaysQuoted write set_AlwaysQuoted;
    ///<summary>
    ///  Gets or sets how to quote values in the exported text file.
    ///</summary>
    property QuoteType: DNTxtValueQuoteType read get_QuoteType write set_QuoteType;
    ///<summary>
    ///  Gets and sets the format strategy when exporting the cell value as string.
    ///</summary>
    property FormatStrategy: DNCellValueFormatStrategy read get_FormatStrategy write set_FormatStrategy;
    ///<summary>
    ///  The Data provider to provide cells data for saving workbook in light mode.
    ///</summary>
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    ///<summary>
    ///  Indicates whether leading blank rows and columns should be trimmed like what ms excel does.
    ///  Default is true.
    ///</summary>
    ///<remarks>When saving with LightCells mode, this option takes no effect.
    ///  User should control the output range by the implementation of <see cref="P:Aspose.Cells.TxtSaveOptions.LightCellsDataProvider" />
    ///  or by speicifing <see cref="P:Aspose.Cells.TxtSaveOptions.ExportArea" />
    ///</remarks>
    property TrimLeadingBlankRowAndColumn: Boolean read get_TrimLeadingBlankRowAndColumn write set_TrimLeadingBlankRowAndColumn;
    ///<summary>
    ///  Indicates whether separators should be output for blank row.
    ///  Default value is false so by default the content for blank row will be empty.
    ///</summary>
    property KeepSeparatorsForBlankRow: Boolean read get_KeepSeparatorsForBlankRow write set_KeepSeparatorsForBlankRow;
    ///<summary>
    ///  The range of cells to be exported.
    ///</summary>
    ///<remarks>If the exported area has been specified, <see cref="P:Aspose.Cells.TxtSaveOptions.TrimLeadingBlankRowAndColumn" />
    ///  will takes no effect.
    ///</remarks>
    property ExportArea: DNCellArea read get_ExportArea write set_ExportArea;
    ///<summary>
    ///  Indicates whether the single quote sign should be exported as part of the value of one cell
    ///  when <see cref="P:Aspose.Cells.Style.QuotePrefix" />
    ///  is true for it. Default is false.
    ///</summary>
    property ExportQuotePrefix: Boolean read get_ExportQuotePrefix write set_ExportQuotePrefix;
    ///<summary>
    ///  Indicates whether exporting all sheets to the text file.
    ///  If it is false, only export the activesheet, just like MS Excel.
    ///</summary>
    ///<remarks>
    ///  The defult value is false.
    ///</remarks>
    property ExportAllSheets: Boolean read get_ExportAllSheets write set_ExportAllSheets;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNTxtSaveOptions = class(TDNGenericImport<DNTxtSaveOptionsClass, DNTxtSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXlsbSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{965ADB1F-8EB6-59A5-B769-9A807E9FD4DE}']
  { constructors } 

    ///<summary>
    ///  Creates xlsb file save options.
    ///</summary>
    {class} function init: DNXlsbSaveOptions; overload;
    ///<summary>
    ///  Creates xlsb file save options.
    ///</summary>
    ///  <param name="saveFormat">The save format . It must be xlsb.</param>
    ///<remarks>NOTE: This constructor is now obsolete.
    ///  Instead, please use XlsbSaveOptions() constructor.
    ///  This property will be removed 12 months later since January 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    {class} function init(saveFormat: DNSaveFormat): DNXlsbSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the options for saving xlsb file.
  ///</summary>
  [DNTypeName('Aspose.Cells.XlsbSaveOptions')]
  DNXlsbSaveOptions = interface(DNSaveOptions)
  ['{B37B7E7F-AB42-314D-8674-9FDE96C55539}']
  { getters & setters } 

    function get_CompressionType: DNOoxmlCompressionType;
    procedure set_CompressionType(value: DNOoxmlCompressionType);
    function get_ExportAllColumnIndexes: Boolean;
    procedure set_ExportAllColumnIndexes(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the compression type for ooxml file.
    ///</summary>
    ///<remarks>The default value is OoxmlCompressionType.Level6.</remarks>
    property CompressionType: DNOoxmlCompressionType read get_CompressionType write set_CompressionType;
    ///<summary>
    ///  Indicates whether exporting all column indexes for cells.
    ///</summary>
    ///<remarks>
    ///  The default value is true.
    ///</remarks>
    property ExportAllColumnIndexes: Boolean read get_ExportAllColumnIndexes write set_ExportAllColumnIndexes;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNXlsbSaveOptions = class(TDNGenericImport<DNXlsbSaveOptionsClass, DNXlsbSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXlsSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E330A5FE-94F6-5A8E-B4BB-01DD3FE39262}']
  { constructors } 

    ///<summary>
    ///  Creates options for saving Excel 97-2003 xls/xlt file.
    ///</summary>
    {class} function init: DNXlsSaveOptions; overload;
    ///<summary>
    ///  Creates options for saving Excel 97-2003 xls/xlt file.
    ///</summary>
    ///  <param name="format">The file format. It must be xls/xlt.</param>
    ///<remarks>NOTE: This constructor is now obsolete.
    ///  Instead, please use XlsSaveOptions() constructor.
    ///  This property will be removed 12 months later since January 2021.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    {class} function init(format: DNSaveFormat): DNXlsSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the save options for the Excel 97-2003 file format: xls and xlt.
  ///</summary>
  [DNTypeName('Aspose.Cells.XlsSaveOptions')]
  DNXlsSaveOptions = interface(DNSaveOptions)
  ['{AA58F0DE-D33B-3D6B-97E2-AD29778DCDB4}']
  { getters & setters } 

    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_IsTemplate: Boolean;
    procedure set_IsTemplate(value: Boolean);
    function get_MatchColor: Boolean;
    procedure set_MatchColor(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The Data provider to provide cells data for saving workbook in light mode.
    ///</summary>
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    ///<summary>
    ///  Indicates whether saving a template file.
    ///</summary>
    property IsTemplate: Boolean read get_IsTemplate write set_IsTemplate;
    ///<summary>
    ///  Indicates whether matching font color because there are 56 colors in the standard color palette.
    ///</summary>
    property MatchColor: Boolean read get_MatchColor write set_MatchColor;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNXlsSaveOptions = class(TDNGenericImport<DNXlsSaveOptionsClass, DNXlsSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXpsSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{82D1AA39-4A6C-5DF3-B986-D67D9C3B3A02}']
  { constructors } 

    ///<summary>
    ///  Creates options for saving xps file.
    ///</summary>
    {class} function init: DNXpsSaveOptions; overload;
    ///<summary>
    ///  Creates options for saving xps file.
    ///</summary>
    ///  <param name="saveFormat">The save format, it must be xps format.</param>
    {class} function init(saveFormat: DNSaveFormat): DNXpsSaveOptions; overload;

  end;

  ///<summary>
  ///  Represents the additional options when saving the file as the Xps.
  ///</summary>
  [DNTypeName('Aspose.Cells.XpsSaveOptions')]
  DNXpsSaveOptions = interface(DNSaveOptions)
  ['{255E5AFE-1BEF-33C3-A4E0-3F62D8D17F6E}']
  { getters & setters } 

    function get_OnePagePerSheet: Boolean;
    procedure set_OnePagePerSheet(value: Boolean);
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If OnePagePerSheet is true , all content of one sheet will output to only one page in result.
    ///  The paper size of pagesetup will be invalid, and the other settings of pagesetup
    ///  will still take effect.
    ///</summary>
    property OnePagePerSheet: Boolean read get_OnePagePerSheet write set_OnePagePerSheet;
    ///<summary>
    ///  Gets or sets the 0-based index of the first page to save.
    ///</summary>
    ///<remarks>
    ///  Default is 0.
    ///</remarks>
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    ///<summary>
    ///  Gets or sets the number of pages to save.
    ///</summary>
    ///<remarks>
    ///  Default is System.Int32.MaxValue which means all pages will be rendered..
    ///</remarks>
    property PageCount: Int32 read get_PageCount write set_PageCount;
    ///<summary>
    ///  Gets the save file format.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Make the workbook empty after saving the file.
    ///</summary>
    property ClearData: Boolean read get_ClearData write set_ClearData;
    ///<summary>
    ///  The cached file folder is used to store some large data.
    ///</summary>
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    ///<summary>
    ///  Indicates whether validate merged cells before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    ///<summary>
    ///  Indicates whether merge the areas of conditional formatting and validation before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    ///<summary>
    ///  If true and the directory does not exist, the directory will be automatically created before saving the file.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///</remarks>
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    ///<summary>
    ///  Indicates whether sorting defined names before saving file.
    ///</summary>
    property SortNames: Boolean read get_SortNames write set_SortNames;
    ///<summary>
    ///  Indicates whether sorting external defined names before saving file.
    ///</summary>
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    ///<summary>
    ///  Indicates whether refreshing chart cache data
    ///</summary>
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    ///<summary>
    ///  The physical folder where images will be saved when exporting a workbook to Aspose.Pdf XML format.
    ///  Default is an empty string.
    ///</summary>
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    ///<summary>
    ///  Indicates if http compression is to be used in user's IIS.
    ///</summary>
    ///<remarks>Please specify this property to true if http compression is used.</remarks>
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Indicates whether updating smart art setting.
    ///  The default value is false.
    ///</summary>
    ///<remarks>
    ///  Only effects after calling Shape.GetResultOfSmartArt() method and the cached shapes exist in the template file.
    ///</remarks>
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNXpsSaveOptions = class(TDNGenericImport<DNXpsSaveOptionsClass, DNXpsSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B9D2D043-C6F1-5F32-ACB7-E0892BC24E50}']
  end;

  ///<summary>
  ///  Represents an individual scenario.
  ///</summary>
  [DNTypeName('Aspose.Cells.Scenario')]
  DNScenario = interface(DDN.mscorlib.DNObject)
  ['{8642E0B9-2CA0-37D1-8A86-022283F63AE8}']
  { getters & setters } 

    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_User: string;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_InputCells: DNScenarioInputCellCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the comment of scenario.
    ///</summary>
    property Comment: string read get_Comment write set_Comment;
    ///<summary>
    ///  Gets and sets the name of scenario.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets name of user who last changed the scenario.
    ///</summary>
    property User: string read get_User;
    ///<summary>
    ///  Indicates whether scenario is hidden.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  Indicates whether scenario is locked for editing when the sheet is protected.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets the input cells of scenario.
    ///</summary>
    property InputCells: DNScenarioInputCellCollection read get_InputCells;
  end;

  TDNScenario = class(TDNGenericImport<DNScenarioClass, DNScenario>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioInputCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{37617C6B-13EB-5209-89DF-60C47CA7BA70}']
  end;

  ///<summary>
  ///  Represents input cell for the scenario.
  ///</summary>
  [DNTypeName('Aspose.Cells.ScenarioInputCell')]
  DNScenarioInputCell = interface(DDN.mscorlib.DNObject)
  ['{AB992B5B-B3BD-35B7-9A2D-D194C7530D8A}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the row index of the input cell.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets and sets the column index of the input cell.
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Gets and sets the input cell address.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets and sets value of the input cell.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Indicates whether input cell is deleted.
    ///</summary>
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
  end;

  TDNScenarioInputCell = class(TDNGenericImport<DNScenarioInputCellClass, DNScenarioInputCell>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5B1803B3-4D1D-5AB0-A357-10AA87F19A18}']
  end;

  ///<summary>
  ///  summary description of Slicer View
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.Slicer')]
  DNSlicer = interface(DDN.mscorlib.DNObject)
  ['{8A9D6C69-7736-315B-9C72-A20101D56D3D}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_LockedAspectRatio: Boolean;
    procedure set_LockedAspectRatio(value: Boolean);
    function get_LockedPosition: Boolean;
    procedure set_LockedPosition(value: Boolean);
    function get_SlicerCache: DNSlicerCache;
    function get_Parent: DNWorksheet;
    function get_StyleType: DNSlicerStyleType;
    procedure set_StyleType(value: DNSlicerStyleType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionVisible: Boolean;
    procedure set_CaptionVisible(value: Boolean);
    function get_NumberOfColumns: Int32;
    procedure set_NumberOfColumns(value: Int32);
    function get_LeftPixel: Int32;
    procedure set_LeftPixel(value: Int32);
    function get_TopPixel: Int32;
    procedure set_TopPixel(value: Int32);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_WidthPixel: Int32;
    procedure set_WidthPixel(value: Int32);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_HeightPixel: Int32;
    procedure set_HeightPixel(value: Int32);
    function get_ColumnWidthPixel: Int32;
    procedure set_ColumnWidthPixel(value: Int32);
    function get_ColumnWidth: Double;
    procedure set_ColumnWidth(value: Double);
    function get_RowHeightPixel: Int32;
    procedure set_RowHeightPixel(value: Int32);
    function get_RowHeight: Double;
    procedure set_RowHeight(value: Double);

  { methods } 

    ///<summary>
    ///  Adds PivotTable connection
    ///</summary>
    ///  <param name="pivot">The PivotTable object</param>
    procedure AddPivotConnection(pivot: DNPivotTable);
    ///<summary>
    ///  Removes PivotTable connection
    ///</summary>
    ///  <param name="pivot">The PivotTable object</param>
    procedure RemovePivotConnection(pivot: DNPivotTable);
    ///<summary>
    ///  Refreshing the slicer.Meanwhile, Refreshing and Calculating  relative PivotTables.
    ///</summary>
    procedure Refresh;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the title of the current Slicer object.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns or sets the descriptive (alternative) text string of the Slicer object.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Indicates whether the slicer object is printable.
    ///</summary>
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    ///<summary>
    ///  Indicates whether the slicer shape is locked.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Represents the way the drawing object is attached to the cells below it.
    ///  The property controls the placement of an object on a worksheet.
    ///</summary>
    property Placement: DNPlacementType read get_Placement write set_Placement;
    ///<summary>
    ///  Indicates whether locking aspect ratio.
    ///</summary>
    property LockedAspectRatio: Boolean read get_LockedAspectRatio write set_LockedAspectRatio;
    ///<summary>
    ///  Indicates whether the specified slicer can be moved or resized by using the user interface.
    ///</summary>
    property LockedPosition: Boolean read get_LockedPosition write set_LockedPosition;
    ///<summary>
    ///  Returns the SlicerCache object associated with the slicer. Read-only.
    ///</summary>
    property SlicerCache: DNSlicerCache read get_SlicerCache;
    ///<summary>
    ///  Returns the Worksheet object that represents the sheet that contains the slicer. Read-only.
    ///</summary>
    property Parent: DNWorksheet read get_Parent;
    ///<summary>
    ///  Specify the type of Built-in slicer style
    ///  the default type is SlicerStyleLight1
    ///</summary>
    property StyleType: DNSlicerStyleType read get_StyleType write set_StyleType;
    ///<summary>
    ///  Returns or sets the name of the specified slicer
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the caption of the specified slicer.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  Returns or sets whether the header that displays the slicer Caption is visible
    ///  the default value is true
    ///</summary>
    property CaptionVisible: Boolean read get_CaptionVisible write set_CaptionVisible;
    ///<summary>
    ///  Returns or sets the number of columns in the specified slicer.
    ///</summary>
    property NumberOfColumns: Int32 read get_NumberOfColumns write set_NumberOfColumns;
    ///<summary>
    ///  Returns or sets the horizontal offset of slicer shape from its left column, in pixels.
    ///</summary>
    property LeftPixel: Int32 read get_LeftPixel write set_LeftPixel;
    ///<summary>
    ///  Returns or sets the vertical offset of slicer shape from its top row, in pixels.
    ///</summary>
    property TopPixel: Int32 read get_TopPixel write set_TopPixel;
    ///<summary>
    ///  Returns or sets the width of the specified slicer, in points.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the width of the specified slicer, in pixels.
    ///</summary>
    property WidthPixel: Int32 read get_WidthPixel write set_WidthPixel;
    ///<summary>
    ///  Returns or sets the height of the specified slicer, in points.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the height of the specified slicer, in pixels.
    ///</summary>
    property HeightPixel: Int32 read get_HeightPixel write set_HeightPixel;
    ///<summary>
    ///  Gets or sets the width in unit of pixels for each column of the slicer.
    ///</summary>
    property ColumnWidthPixel: Int32 read get_ColumnWidthPixel write set_ColumnWidthPixel;
    ///<summary>
    ///  Returns or sets the width, in points, of each column in the slicer.
    ///</summary>
    property ColumnWidth: Double read get_ColumnWidth write set_ColumnWidth;
    ///<summary>
    ///  Returns or sets the height, in pixels, of each row in the specified slicer.
    ///</summary>
    property RowHeightPixel: Int32 read get_RowHeightPixel write set_RowHeightPixel;
    ///<summary>
    ///  Returns or sets the height, in points, of each row in the specified slicer.
    ///</summary>
    property RowHeight: Double read get_RowHeight write set_RowHeight;
  end;

  TDNSlicer = class(TDNGenericImport<DNSlicerClass, DNSlicer>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FF16BBC9-963E-5FED-A995-F071D0CAC9A1}']
  end;

  ///<summary>
  ///  summary description of slicer cache
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerCache')]
  DNSlicerCache = interface(DDN.mscorlib.DNObject)
  ['{93812C36-59DF-3362-B05F-7C200140FEE8}']
  { getters & setters } 

    function get_CrossFilterType: DNSlicerCacheCrossFilterType;
    procedure set_CrossFilterType(value: DNSlicerCacheCrossFilterType);
    function get_List: Boolean;
    function get_SlicerCacheItems: DNSlicerCacheItemCollection;
    function get_Name: string;
    function get_SourceName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets whether a slicer is participating in cross filtering with other slicers
    ///  that share the same slicer cache, and how cross filtering is displayed. Read/write
    ///</summary>
    property CrossFilterType: DNSlicerCacheCrossFilterType read get_CrossFilterType write set_CrossFilterType;
    ///<summary>
    ///  Returns whether the slicer associated with the specified slicer cache is based on an Non-OLAP data source. Read-only
    ///</summary>
    property List: Boolean read get_List;
    ///<summary>
    ///  Returns a SlicerCacheItem collection that contains the collection of all items in the slicer cache. Read-only
    ///</summary>
    property SlicerCacheItems: DNSlicerCacheItemCollection read get_SlicerCacheItems;
    ///<summary>
    ///  Returns the name of the slicer cache.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns the name of cache field
    ///</summary>
    property SourceName: string read get_SourceName;
  end;

  TDNSlicerCache = class(TDNGenericImport<DNSlicerCacheClass, DNSlicerCache>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCacheItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D55EDBDF-E852-5AF3-A894-FD34684CD605}']
  end;

  ///<summary>
  ///  Represent slicer data source item
  ///</summary>
  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheItem')]
  DNSlicerCacheItem = interface(DDN.mscorlib.DNObject)
  ['{A87DCCC5-6D15-3F78-AA0E-3225E8E8EA89}']
  { getters & setters } 

    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_Value: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the SlicerItem is selected or not.
    ///</summary>
    property Selected: Boolean read get_Selected write set_Selected;
    property Value: string read get_Value;
  end;

  TDNSlicerCacheItem = class(TDNGenericImport<DNSlicerCacheItemClass, DNSlicerCacheItem>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStreamProviderOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93BD369C-1692-5251-AAF4-32318E5AE837}']
  { static getter & setter } 

    procedure set_CustomPath(value: string);

  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.StreamProviderOptions" />
    ///  class.
    ///</summary>
    ///  <param name="loadingType">The type to load the linked resource.</param>
    ///  <param name="defaultPath">The default path.</param>
    {class} function init(loadingType: DNResourceLoadingType; defaultPath: string): DNStreamProviderOptions; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.StreamProviderOptions" />
    ///  class.
    ///</summary>
    {class} function init: DNStreamProviderOptions; overload;

  { static propertys } 

    ///<summary>
    ///  The user custom path(URL) saved in generated html file for the referred source. If not defined by user, DefaultPath will be used.
    ///  For example, the sheet data will be saved by user to d:/sheet001.htm, the url used in the main html file should be "d:/sheet001.htm" or other valid relative path that can be accessed by the main html file.
    ///</summary>
    {class} property CustomPath: string write set_CustomPath;
  end;

  ///<summary>
  ///  Represents the stream options.
  ///</summary>
  [DNTypeName('Aspose.Cells.StreamProviderOptions')]
  DNStreamProviderOptions = interface(DDN.mscorlib.DNObject)
  ['{D2F7D9D0-6870-3071-ABEC-DAAA4E230DAF}']
  { getters & setters } 

    function get_ResourceLoadingType: DNResourceLoadingType;
    procedure set_ResourceLoadingType(value: DNResourceLoadingType);
    function get_DefaultPath: string;
    procedure set_CustomPath(value: string);
    function get_Stream: DDN.mscorlib.DNStream;
    procedure set_Stream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the type of loading resource.
    ///</summary>
    property ResourceLoadingType: DNResourceLoadingType read get_ResourceLoadingType write set_ResourceLoadingType;
    ///<summary>
    ///  The default path(URL) saved in generated html file for the referred source.
    ///  For example, the sheet data saved in xxx_files/sheet001.htm, the url used in the main html file should be like "src="xxx_files/sheet001.htm""
    ///</summary>
    property DefaultPath: string read get_DefaultPath;
    ///<summary>
    ///  The user custom path(URL) saved in generated html file for the referred source. If not defined by user, DefaultPath will be used.
    ///  For example, the sheet data will be saved by user to d:/sheet001.htm, the url used in the main html file should be "d:/sheet001.htm" or other valid relative path that can be accessed by the main html file.
    ///</summary>
    property CustomPath: string write set_CustomPath;
    ///<summary>
    ///  Gets/Sets the stream
    ///</summary>
    property Stream: DDN.mscorlib.DNStream read get_Stream write set_Stream;
  end;

  TDNStreamProviderOptions = class(TDNGenericImport<DNStreamProviderOptionsClass, DNStreamProviderOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB695111-785C-5BFE-B19A-5B6BBB1605B5}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Style" />
    ///  class.
    ///</summary>
    ///<remarks>NOTE: This constructor is now obsolete.
    ///  Instead, please use CellsFactory.CreateStyle() method.
    ///  This property will be removed 6 months later since October 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    {class} function init: DNStyle;

  end;

  ///<summary>
  ///  Represents display style of excel document,such as font,color,alignment,border,etc.
  ///</summary>
  ///  The Style object contains all style attributes (font, number format, alignment, and so on) as properties.
  ///  There are two methods to set a cell's style.
  ///<example><code>
  ///  [C#]
  ///  Cell cell = excel.Worksheets[0].Cells["A1"];
  ///  Style style =  cell.GetStyle();
  ///  style.Font.Name = "Times New Roman";
  ///  style.Font.Color = Color.Blue;
  ///  cell.SetStyle(style);
  ///</code></example>
  [DNTypeName('Aspose.Cells.Style')]
  DNStyle = interface(DDN.mscorlib.DNObject)
  ['{100DEAF6-C808-336F-935A-0140E7F139B4}']
  { getters & setters } 

    function get_BackgroundThemeColor: DNThemeColor;
    procedure set_BackgroundThemeColor(value: DNThemeColor);
    function get_ForegroundThemeColor: DNThemeColor;
    procedure set_ForegroundThemeColor(value: DNThemeColor);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Pattern: DNBackgroundType;
    procedure set_Pattern(value: DNBackgroundType);
    function get_Borders: DNBorderCollection;
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroundArgbColor: Int32;
    procedure set_BackgroundArgbColor(value: Int32);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundArgbColor: Int32;
    procedure set_ForegroundArgbColor(value: Int32);
    function get_ParentStyle: DNStyle;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_Font: DNFont;
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_VerticalAlignment: DNTextAlignmentType;
    procedure set_VerticalAlignment(value: DNTextAlignmentType);
    function get_HorizontalAlignment: DNTextAlignmentType;
    procedure set_HorizontalAlignment(value: DNTextAlignmentType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Custom: string;
    procedure set_Custom(value: string);
    function get_CultureCustom: string;
    procedure set_CultureCustom(value: string);
    function get_InvariantCustom: string;
    function get_IsFormulaHidden: Boolean;
    procedure set_IsFormulaHidden(value: Boolean);
    function get_ShrinkToFit: Boolean;
    procedure set_ShrinkToFit(value: Boolean);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_IsJustifyDistributed: Boolean;
    procedure set_IsJustifyDistributed(value: Boolean);
    function get_QuotePrefix: Boolean;
    procedure set_QuotePrefix(value: Boolean);
    function get_IsGradient: Boolean;
    procedure set_IsGradient(value: Boolean);
    function get_IsPercent: Boolean;
    function get_IsDateTime: Boolean;

  { methods } 

    ///<summary>
    ///  Sets the specified fill to a two-color gradient.
    ///</summary>
    ///  <param name="color1">One gradient color.</param>
    ///  <param name="color2">Two gradient color.</param>
    ///  <param name="gradientStyleType">Gradient shading style.</param>
    ///  <param name="variant">The gradient variant. Can be a value from 1 through 4, corresponding to one of the four variants on the Gradient tab in the Fill Effects dialog box. If style is GradientStyle.FromCenter, the Variant argument can only be 1 or 2.</param>
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; gradientStyleType: DNGradientStyleType; variant: Int32);
    procedure GetTwoColorGradient(out color1: DDN.System.Drawing.DNColor; out color2: DDN.System.Drawing.DNColor; out gradientStyleType: DNGradientStyleType; out variant: Int32);
    ///<summary>
    ///  Sets the background color.
    ///</summary>
    ///  <param name="pattern">The pattern.</param>
    ///  <param name="color1">The foreground color.</param>
    ///  <param name="color2">The background color. Only works when pattern is not BackgroundType.None and BackgroundType.Solid.</param>
    procedure SetPatternColor(pattern: DNBackgroundType; color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor);
    ///<summary>
    ///  Copies data from another style object
    ///</summary>
    ///  <param name="style">Source Style object</param>
    ///<remarks>
    ///  This method does not copy the name of the style.
    ///  If you want to copy the name, please call the following codes after copying style:
    ///  destStyle.Name = style.Name.</remarks>
    procedure Copy(style: DNStyle);
    ///<summary>
    ///  Apply the named style to the styles of the cells which use this named style.
    ///  It works like clicking the "ok" button after you finished modifying the style.
    ///  Only applies for named style.
    ///</summary>
    procedure Update;
    ///<summary>
    ///  Checks whether the specified properties of the style have been modified.
    ///  Used for style of ConditionalFormattings to check whether the specified properties of this style should be used when applying the ConditionalFormattings on a cell.
    ///</summary>
    ///  <param name="modifyFlag">Style modified flags</param>
    ///<returns>true if the specified properties have been modified</returns>
    function IsModified(modifyFlag: DNStyleModifyFlag): Boolean;
    ///<summary>
    ///  Determines whether two Style instances are equal.
    ///</summary>
    ///  <param name="obj">The Style object to compare with the current Style object. </param>
    ///<returns>true if the specified Object is equal to the current Object; otherwise, false.
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for a Style object.
    ///</summary>
    ///<returns>A hash code for the current Object.</returns>
    ///<remarks>This method is only for internal use.</remarks>
    function GetHashCode: Int32;
    ///<summary>
    ///  Sets the borders of the style.
    ///</summary>
    ///  <param name="borderEdge">The type fo the border.</param>
    ///  <param name="borderStyle">The style of the border.</param>
    ///  <param name="borderColor">The color of the border.</param>
    ///<returns>Returns whether changing the current borders.</returns>
    function SetBorder(borderEdge: DNBorderType; borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor): Boolean;
    ///<summary>
    ///  Sets the Custom number format string of a cell.
    ///</summary>
    ///  <param name="custom">Custom number format string, should be InvariantCulture pattern.</param>
    ///  <param name="builtinPreference">If given Custom number format string matches one of the built-in number formats
    ///  corresponding to current regional settings, whether set the number format as built-in instead of Custom.</param>
    procedure SetCustom(custom: string; builtinPreference: Boolean);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the background theme color.
    ///</summary>
    ///<remarks>
    ///  If the background color is not a theme color, NULL will be returned.
    ///</remarks>
    property BackgroundThemeColor: DNThemeColor read get_BackgroundThemeColor write set_BackgroundThemeColor;
    ///<summary>
    ///  Gets and sets the foreground theme color.
    ///</summary>
    ///<remarks>
    ///  If the foreground color is not a theme color, NULL will be returned.
    ///</remarks>
    property ForegroundThemeColor: DNThemeColor read get_ForegroundThemeColor write set_ForegroundThemeColor;
    ///<summary>
    ///  Gets or sets the name of the style.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets the cell background pattern type.
    ///</summary>
    property Pattern: DNBackgroundType read get_Pattern write set_Pattern;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.BorderCollection" />
    ///  of the style.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Gets or sets a style's background color.
    ///</summary>
    ///<remarks>If you want to set a cell's color, please use Style.ForegroundColor property.
    ///  Only if the cell style pattern is other than none or solid, this property will take effect.</remarks>
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets and sets the background color with a 32-bit ARGB value.
    ///</summary>
    property BackgroundArgbColor: Int32 read get_BackgroundArgbColor write set_BackgroundArgbColor;
    ///<summary>
    ///  Gets or sets a style's foreground color.
    ///</summary>
    ///<remarks>It means no color setting if Color.Empty is returned.</remarks>
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets and sets the foreground color with a 32-bit ARGB value.
    ///</summary>
    property ForegroundArgbColor: Int32 read get_ForegroundArgbColor write set_ForegroundArgbColor;
    ///<summary>
    ///  Gets the parent style of this style.
    ///</summary>
    property ParentStyle: DNStyle read get_ParentStyle;
    ///<summary>
    ///  Represents the indent level for the cell or range. Can only be an integer from 0 to 250.
    ///</summary>
    ///<remarks>
    ///  If text horizontal alignment type is set to value other than left or right, indent level will
    ///  be reset to zero.
    ///</remarks>
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Cells.Style.Font" />
    ///  object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Represents text rotation angle.
    ///</summary>
    ///<remarks><p>0: Not rotated.</p>
    ///  <p>255: Top to Bottom.</p>
    ///  <p>-90: Downward.</p>
    ///  <p>90: Upward.</p>
    ///  You can set 255 or value ranged from -90 to 90.</remarks>
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    ///<summary>
    ///  Gets or sets the vertical alignment type of the text in a cell.
    ///</summary>
    property VerticalAlignment: DNTextAlignmentType read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets the horizontal alignment type of the text in a cell.
    ///</summary>
    property HorizontalAlignment: DNTextAlignmentType read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a value indicating whether the text within a cell is wrapped.
    ///</summary>
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    ///<summary>
    ///  Gets or sets the display format of numbers and dates. The formatting patterns are different for different regions.
    ///</summary>
    ///<remarks>
    ///  For example, the formatting patterns represented by numbers for en_US region:
    ///  <table class="dtTABLE" cellspacing="0"><tr><td width="33%"><font color="gray"><b>Value</b>
    ///</font>
    ///</td>
    ///      <td width="33%"><font color="gray"><b>Type</b>
    ///</font>
    ///</td>
    ///      <td width="33%"><font color="gray"><b>Format String</b>
    ///</font>
    ///</td>
    ///</tr>
    ///    <tr><td width="33%">0</td>
    ///      <td width="33%">General</td>
    ///      <td width="33%">General</td>
    ///</tr>
    ///    <tr><td width="33%">1</td>
    ///      <td width="33%">Decimal</td>
    ///      <td width="33%">0</td>
    ///</tr>
    ///    <tr><td width="33%">2</td>
    ///      <td width="33%">Decimal</td>
    ///      <td width="33%">0.00</td>
    ///</tr>
    ///    <tr><td width="33%">3</td>
    ///      <td width="33%">Decimal</td>
    ///      <td width="33%">#,##0</td>
    ///</tr>
    ///    <tr><td width="33%">4</td>
    ///      <td width="33%">Decimal</td>
    ///      <td width="33%">#,##0.00</td>
    ///</tr>
    ///    <tr><td width="33%">5</td>
    ///      <td width="33%">Currency</td>
    ///      <td width="33%">$#,##0_);($#,##0)</td>
    ///</tr>
    ///    <tr><td width="33%">6</td>
    ///      <td width="33%">Currency</td>
    ///      <td width="33%">$#,##0_);[Red]($#,##0)</td>
    ///</tr>
    ///    <tr><td width="33%">7</td>
    ///      <td width="33%">Currency</td>
    ///      <td width="33%">$#,##0.00_);($#,##0.00)</td>
    ///</tr>
    ///    <tr><td width="33%">8</td>
    ///      <td width="33%">Currency</td>
    ///      <td width="33%">$#,##0.00_);[Red]($#,##0.00)</td>
    ///</tr>
    ///    <tr><td width="33%">9</td>
    ///      <td width="33%">Percentage</td>
    ///      <td width="33%">0%</td>
    ///</tr>
    ///    <tr><td width="33%">10</td>
    ///      <td width="33%">Percentage</td>
    ///      <td width="33%">0.00%</td>
    ///</tr>
    ///    <tr><td width="33%">11</td>
    ///      <td width="33%">Scientific</td>
    ///      <td width="33%">0.00E+00</td>
    ///</tr>
    ///    <tr><td width="33%">12</td>
    ///      <td width="33%">Fraction</td>
    ///      <td width="33%"># ?/?</td>
    ///</tr>
    ///    <tr><td width="33%">13</td>
    ///      <td width="33%">Fraction</td>
    ///      <td width="33%"># ??/??</td>
    ///</tr>
    ///    <tr><td width="33%">14</td>
    ///      <td width="33%">Date</td>
    ///      <td width="33%">m/d/yyyy</td>
    ///</tr>
    ///    <tr><td width="33%">15</td>
    ///      <td width="33%">Date</td>
    ///      <td width="33%">d-mmm-yy</td>
    ///</tr>
    ///    <tr><td width="33%">16</td>
    ///      <td width="33%">Date</td>
    ///      <td width="33%">d-mmm</td>
    ///</tr>
    ///    <tr><td width="33%">17</td>
    ///      <td width="33%">Date</td>
    ///      <td width="33%">mmm-yy</td>
    ///</tr>
    ///    <tr><td width="33%">18</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">h:mm AM/PM</td>
    ///</tr>
    ///    <tr><td width="33%">19</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">h:mm:ss AM/PM</td>
    ///</tr>
    ///    <tr><td width="33%">20</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">h:mm</td>
    ///</tr>
    ///    <tr><td width="33%">21</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">h:mm:ss</td>
    ///</tr>
    ///    <tr><td width="33%">22</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">m/d/yyyy h:mm</td>
    ///</tr>
    ///    <tr><td width="33%">37</td>
    ///      <td width="33%">Accounting</td>
    ///      <td width="33%">#,##0_);(#,##0)</td>
    ///</tr>
    ///    <tr><td width="33%">38</td>
    ///      <td width="33%">Accounting</td>
    ///      <td width="33%">#,##0_);[Red](#,##0)</td>
    ///</tr>
    ///    <tr><td width="33%">39</td>
    ///      <td width="33%">Accounting</td>
    ///      <td width="33%">#,##0.00_);(#,##0.00)</td>
    ///</tr>
    ///    <tr><td width="33%">40</td>
    ///      <td width="33%">Accounting</td>
    ///      <td width="33%">#,##0.00_);[Red](#,##0.00)</td>
    ///</tr>
    ///    <tr><td width="33%">41</td>
    ///      <td width="33%">Accounting</td>
    ///      <td width="33%">_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)</td>
    ///</tr>
    ///    <tr><td width="33%">42</td>
    ///      <td width="33%">Currency</td>
    ///      <td width="33%">_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)</td>
    ///</tr>
    ///    <tr><td width="33%">43</td>
    ///      <td width="33%">Accounting</td>
    ///      <td width="33%">_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)</td>
    ///</tr>
    ///    <tr><td width="33%">44</td>
    ///      <td width="33%">Currency</td>
    ///      <td width="33%">_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)</td>
    ///</tr>
    ///    <tr><td width="33%">45</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">mm:ss</td>
    ///</tr>
    ///    <tr><td width="33%">46</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">[h]:mm:ss</td>
    ///</tr>
    ///    <tr><td width="33%">47</td>
    ///      <td width="33%">Time</td>
    ///      <td width="33%">mm:ss.0</td>
    ///</tr>
    ///    <tr><td width="33%">48</td>
    ///      <td width="33%">Scientific</td>
    ///      <td width="33%">##0.0E+0</td>
    ///</tr>
    ///    <tr><td width="33%">49</td>
    ///      <td width="33%">Text</td>
    ///      <td width="33%">@</td>
    ///</tr>
    ///</table>
    ///</remarks>
    property Number: Int32 read get_Number write set_Number;
    ///<summary>
    ///  Gets or sets a value indicating whether a cell can be modified or not.
    ///</summary>
    ///<remarks>Locking cells has no effect unless the worksheet is protected. </remarks>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Represents the custom number format string of this style object.
    ///  If the custom number format is not set(For example, the number format is builtin), "" will be returned.
    ///</summary>
    ///<remarks>
    ///  The returned custom string is culture-independent.
    ///</remarks>
    property Custom: string read get_Custom write set_Custom;
    ///<summary>
    ///  Gets and sets the culture-dependent pattern string for number format.
    ///  If no number format has been set for this object, null will be returned.
    ///  If number format is builtin, the pattern string corresponding to the builtin number will be returned.
    ///</summary>
    ///<remarks>
    ///  For builtin number format, both the pattern content(such as, one builtin date format is "m/d/y" for some locales,
    ///  but for some other locales it becomes  "d/m/y") and the format specifier(such as,
    ///  some locales is using character other than 'y' to represent the year part for date formatting)
    ///  are culture-dependent;
    ///  For user specified custom format, only format specifiers are changed according to the culture,
    ///  other parts of the formatting pattern will not be modified.
    ///</remarks>
    property CultureCustom: string read get_CultureCustom write set_CultureCustom;
    ///<summary>
    ///  Gets the culture-independent pattern string for number format.
    ///  If no number format has been set for this object, null will be returned.
    ///  If number format is builtin, the pattern string corresponding to the builtin number will be returned.
    ///</summary>
    ///<remarks>
    ///  For builtin number formats, the returned pattern content is still culture-dependent,
    ///  such as, for some locales it returns "m/d/y" and for some other locales it returns "d/m/y".
    ///  The difference from <see cref="P:Aspose.Cells.Style.CultureCustom" />
    ///  is(that is also what culture-independent means):
    ///  the format specifiers and separators are kept as standard, such as '/' will always be used as datetime separator
    ///  and  "y" will always be used as the "year" part no matter what other special character is used for the specific locale.
    ///</remarks>
    property InvariantCustom: string read get_InvariantCustom;
    ///<summary>
    ///  Represents if the formula will be hidden when the worksheet is protected.
    ///</summary>
    property IsFormulaHidden: Boolean read get_IsFormulaHidden write set_IsFormulaHidden;
    ///<summary>
    ///  Represents if text automatically shrinks to fit in the available column width.
    ///</summary>
    property ShrinkToFit: Boolean read get_ShrinkToFit write set_ShrinkToFit;
    ///<summary>
    ///  Represents text reading order.
    ///</summary>
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Indicates if the cells justified or distributed alignment should be used on the last line of text.
    ///</summary>
    ///<remarks>
    ///  This is typical for East Asian alignments but not typical in other contexts.
    ///</remarks>
    property IsJustifyDistributed: Boolean read get_IsJustifyDistributed write set_IsJustifyDistributed;
    ///<summary>
    ///  Indicates whether the cell's value starts with single quote mark.
    ///</summary>
    property QuotePrefix: Boolean read get_QuotePrefix write set_QuotePrefix;
    ///<summary>
    ///  Indicates whether the cell shading is a gradient pattern.
    ///</summary>
    property IsGradient: Boolean read get_IsGradient write set_IsGradient;
    ///<summary>
    ///  Indicates whether the number format is a percent format.
    ///</summary>
    property IsPercent: Boolean read get_IsPercent;
    ///<summary>
    ///  Indicates whether the number format is a date format.
    ///</summary>
    property IsDateTime: Boolean read get_IsDateTime;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DCF467E-D4DC-514F-AB55-E98198F0472D}']
  end;

  [DNTypeName('Aspose.Cells.StyleCollection')]
  DNStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{8B381EAC-A94B-35BD-8E1F-623BD832C091}']
  { getters & setters } 

    function get_Item(index: Int32): DNStyle; overload;
    function get_Item(name: string): DNStyle; overload;
    function get_Count: Int32;

  { methods } 

    function GetThemeStyle(themeColorType: DNThemeColorType; tint: Double): DNStyle;
    function CreateBuiltinStyle(&type: DNBuiltinStyleType): DNStyle;
    function Add: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNStyle read get_Item; default;
    property Item[name: string]: DNStyle read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNStyleCollection = class(TDNGenericImport<DNStyleCollectionClass, DNStyleCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStyleFlagClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CA074AD-DCDB-50BC-8684-E25ABDC34C6F}']
  { constructors } 

    {class} function init: DNStyleFlag;

  end;

  ///<summary>
  ///  Represents flags which indicates applied formatting properties.
  ///</summary>
  [DNTypeName('Aspose.Cells.StyleFlag')]
  DNStyleFlag = interface(DDN.mscorlib.DNObject)
  ['{D1A81130-3817-3D8D-A287-38BA0A005B01}']
  { getters & setters } 

    function get_All: Boolean;
    procedure set_All(value: Boolean);
    function get_Borders: Boolean;
    procedure set_Borders(value: Boolean);
    function get_LeftBorder: Boolean;
    procedure set_LeftBorder(value: Boolean);
    function get_RightBorder: Boolean;
    procedure set_RightBorder(value: Boolean);
    function get_TopBorder: Boolean;
    procedure set_TopBorder(value: Boolean);
    function get_BottomBorder: Boolean;
    procedure set_BottomBorder(value: Boolean);
    function get_DiagonalDownBorder: Boolean;
    procedure set_DiagonalDownBorder(value: Boolean);
    function get_DiagonalUpBorder: Boolean;
    procedure set_DiagonalUpBorder(value: Boolean);
    function get_Font: Boolean;
    procedure set_Font(value: Boolean);
    function get_FontSize: Boolean;
    procedure set_FontSize(value: Boolean);
    function get_FontName: Boolean;
    procedure set_FontName(value: Boolean);
    function get_FontColor: Boolean;
    procedure set_FontColor(value: Boolean);
    function get_FontBold: Boolean;
    procedure set_FontBold(value: Boolean);
    function get_FontItalic: Boolean;
    procedure set_FontItalic(value: Boolean);
    function get_FontUnderline: Boolean;
    procedure set_FontUnderline(value: Boolean);
    function get_FontStrike: Boolean;
    procedure set_FontStrike(value: Boolean);
    function get_FontScript: Boolean;
    procedure set_FontScript(value: Boolean);
    function get_NumberFormat: Boolean;
    procedure set_NumberFormat(value: Boolean);
    function get_Alignments: Boolean;
    procedure set_Alignments(value: Boolean);
    function get_HorizontalAlignment: Boolean;
    procedure set_HorizontalAlignment(value: Boolean);
    function get_VerticalAlignment: Boolean;
    procedure set_VerticalAlignment(value: Boolean);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_Rotation: Boolean;
    procedure set_Rotation(value: Boolean);
    function get_WrapText: Boolean;
    procedure set_WrapText(value: Boolean);
    function get_ShrinkToFit: Boolean;
    procedure set_ShrinkToFit(value: Boolean);
    function get_TextDirection: Boolean;
    procedure set_TextDirection(value: Boolean);
    function get_CellShading: Boolean;
    procedure set_CellShading(value: Boolean);
    function get_Locked: Boolean;
    procedure set_Locked(value: Boolean);
    function get_HideFormula: Boolean;
    procedure set_HideFormula(value: Boolean);
    function get_QuotePrefix: Boolean;
    procedure set_QuotePrefix(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  All properties will be applied.
    ///</summary>
    property All: Boolean read get_All write set_All;
    ///<summary>
    ///  All borders settings will be applied.
    ///</summary>
    property Borders: Boolean read get_Borders write set_Borders;
    ///<summary>
    ///  Left border settings will be applied.
    ///</summary>
    property LeftBorder: Boolean read get_LeftBorder write set_LeftBorder;
    ///<summary>
    ///  Right border settings will be applied.
    ///</summary>
    property RightBorder: Boolean read get_RightBorder write set_RightBorder;
    ///<summary>
    ///  Top border settings will be applied.
    ///</summary>
    property TopBorder: Boolean read get_TopBorder write set_TopBorder;
    ///<summary>
    ///  Bottom border settings will be applied.
    ///</summary>
    property BottomBorder: Boolean read get_BottomBorder write set_BottomBorder;
    ///<summary>
    ///  Diagonal down border settings will be applied.
    ///</summary>
    property DiagonalDownBorder: Boolean read get_DiagonalDownBorder write set_DiagonalDownBorder;
    ///<summary>
    ///  Diagonal up border settings will be applied.
    ///</summary>
    property DiagonalUpBorder: Boolean read get_DiagonalUpBorder write set_DiagonalUpBorder;
    ///<summary>
    ///  Font settings will be applied.
    ///</summary>
    property Font: Boolean read get_Font write set_Font;
    ///<summary>
    ///  Font size setting will be applied.
    ///</summary>
    property FontSize: Boolean read get_FontSize write set_FontSize;
    ///<summary>
    ///  Font name setting will be applied.
    ///</summary>
    property FontName: Boolean read get_FontName write set_FontName;
    ///<summary>
    ///  Font color setting will be applied.
    ///</summary>
    property FontColor: Boolean read get_FontColor write set_FontColor;
    ///<summary>
    ///  Font bold setting will be applied.
    ///</summary>
    property FontBold: Boolean read get_FontBold write set_FontBold;
    ///<summary>
    ///  Font italic setting will be applied.
    ///</summary>
    property FontItalic: Boolean read get_FontItalic write set_FontItalic;
    ///<summary>
    ///  Font underline setting will be applied.
    ///</summary>
    property FontUnderline: Boolean read get_FontUnderline write set_FontUnderline;
    ///<summary>
    ///  Font strikeout setting will be applied.
    ///</summary>
    property FontStrike: Boolean read get_FontStrike write set_FontStrike;
    ///<summary>
    ///  Font script setting will be applied.
    ///</summary>
    property FontScript: Boolean read get_FontScript write set_FontScript;
    ///<summary>
    ///  Number format setting will be applied.
    ///</summary>
    property NumberFormat: Boolean read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Alignment setting will be applied.
    ///</summary>
    property Alignments: Boolean read get_Alignments write set_Alignments;
    ///<summary>
    ///  Horizontal alignment setting will be applied.
    ///</summary>
    property HorizontalAlignment: Boolean read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Vertical alignment setting will be applied.
    ///</summary>
    property VerticalAlignment: Boolean read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Indent level setting will be applied.
    ///</summary>
    property Indent: Boolean read get_Indent write set_Indent;
    ///<summary>
    ///  Rotation setting will be applied.
    ///</summary>
    property Rotation: Boolean read get_Rotation write set_Rotation;
    ///<summary>
    ///  Wrap text setting will be applied.
    ///</summary>
    property WrapText: Boolean read get_WrapText write set_WrapText;
    ///<summary>
    ///  Shrink to fit setting will be applied.
    ///</summary>
    property ShrinkToFit: Boolean read get_ShrinkToFit write set_ShrinkToFit;
    ///<summary>
    ///  Text direction setting will be applied.
    ///</summary>
    property TextDirection: Boolean read get_TextDirection write set_TextDirection;
    ///<summary>
    ///  Cell shading setting will be applied.
    ///</summary>
    property CellShading: Boolean read get_CellShading write set_CellShading;
    ///<summary>
    ///  Locked setting will be applied.
    ///</summary>
    property Locked: Boolean read get_Locked write set_Locked;
    ///<summary>
    ///  Hide formula setting will be applied.
    ///</summary>
    property HideFormula: Boolean read get_HideFormula write set_HideFormula;
    ///<summary>
    ///  Hide formula setting will be applied.
    ///</summary>
    property QuotePrefix: Boolean read get_QuotePrefix write set_QuotePrefix;
  end;

  TDNStyleFlag = class(TDNGenericImport<DNStyleFlagClass, DNStyleFlag>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSubtotalSettingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AD58B70-B69C-5364-A955-054746F00C21}']
  end;

  ///<summary>
  ///  Represents the setting of the subtotal .
  ///</summary>
  [DNTypeName('Aspose.Cells.SubtotalSetting')]
  DNSubtotalSetting = interface(DDN.mscorlib.DNObject)
  ['{C6AB529A-B7FB-3965-8211-207EB808CF81}']
  { getters & setters } 

    function get_GroupBy: Int32;
    function get_SubtotalFunction: DNConsolidationFunction;
    function get_TotalList: TArray<Int32>;
    function get_SummaryBelowData: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The field to group by, as a zero-based integer offset
    ///</summary>
    property GroupBy: Int32 read get_GroupBy;
    ///<summary>
    ///  The subtotal function.
    ///</summary>
    property SubtotalFunction: DNConsolidationFunction read get_SubtotalFunction;
    ///<summary>
    ///  An array of zero-based field offsets, indicating the fields to which the subtotals are added.
    ///</summary>
    property TotalList: TArray<Int32> read get_TotalList;
    ///<summary>
    ///  Indicates whether add summary below data.
    ///</summary>
    property SummaryBelowData: Boolean read get_SummaryBelowData;
  end;

  TDNSubtotalSetting = class(TDNGenericImport<DNSubtotalSettingClass, DNSubtotalSetting>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{68A1709A-D56A-5F4C-A769-91BE143CCEE2}']
  end;

  ///<summary>
  ///  Represents a column in a list.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.ListColumn')]
  DNListColumn = interface(DDN.mscorlib.DNObject)
  ['{0F1AA4EA-1C43-331F-84DB-0FA832B4837D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TotalsCalculation: DNTotalsCalculation;
    procedure set_TotalsCalculation(value: DNTotalsCalculation);
    function get_Range: DNRange;
    function get_Formula: string;
    procedure set_Formula(value: string);

  { methods } 

    ///<summary>
    ///  Gets the formula of this list column.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The formula of this list column.</returns>
    function GetCustomCalculatedFormula(isR1C1: Boolean; isLocal: Boolean): string;
    ///<summary>
    ///  Sets the formula for this list column.
    ///</summary>
    ///  <param name="formula">the formula for this list column.</param>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    procedure SetCustomCalculatedFormula(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of the column.
    ///</summary>
    ///<remarks>
    ///  If sets the name of the column, the according cell' value will be changed too.
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets the type of calculation in the Totals row of the list column.
    ///</summary>
    property TotalsCalculation: DNTotalsCalculation read get_TotalsCalculation write set_TotalsCalculation;
    ///<summary>
    ///  Gets the range of this list column.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Gets and sets the formula of the list column.
    ///</summary>
    property Formula: string read get_Formula write set_Formula;
  end;

  TDNListColumn = class(TDNGenericImport<DNListColumnClass, DNListColumn>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E04A4E9-A089-549E-9C72-BB95CF327B82}']
  end;

  ///<summary>
  ///  Represents a list object on a worksheet.
  ///  The ListObject object is a member of the ListObjects collection.
  ///  The ListObjects collection contains all the list objects on a worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  Cells cells = workbook.Worksheets[0].Cells;
  ///  for (int i = 0; i  &lt;5; i++)
  ///  {
  ///  cells[0,i].PutValue(CellsHelper.ColumnIndexToName(i));
  ///  }
  ///  for (int row = 1; row  &lt;10; row++)
  ///  {
  ///  for (int column = 0; column  &lt;5; column++)
  ///  {
  ///  cells[row, column].PutValue(row * column);
  ///  }
  ///  }
  ///  ListObjectCollection tables = workbook.Worksheets[0].ListObjects;
  ///  int index = tables.Add(0, 0, 9, 4, true);
  ///  ListObject table = tables[0];
  ///  table.ShowTotals = true;
  ///  table.ListColumns[4].TotalsCalculation = Aspose.Cells.TotalsCalculation.Sum;
  ///  workbook.Save(@"C:\Book1.xlsx");
  ///  [Visual Basic]
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim cells As Cells = workbook.Worksheets(0).Cells
  ///  For i As Int32 = 0 To 4
  ///  cells(0, i).PutValue(CellsHelper.ColumnIndexToName(i))
  ///  Next
  ///  For row As Int32 = 1 To 9
  ///  For column As Int32 = 0 To 4
  ///  cells(row, column).PutValue(row * column)
  ///  Next
  ///  Next
  ///  Dim tables As ListObjectCollection = workbook.Worksheets(0).ListObjects
  ///  Dim index As Int32 = tables.Add(0, 0, 9, 4, True)
  ///  Dim table As ListObject = tables(0)
  ///  table.ShowTotals = True
  ///  table.ListColumns(4).TotalsCalculation = Aspose.Cells.TotalsCalculation.Sum
  ///  workbook.Save("C:\Book1.xlsx")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Tables.ListObject')]
  DNListObject = interface(DDN.mscorlib.DNObject)
  ['{DE0AFA8F-CCD5-3FEB-A927-1896F6444A02}']
  { getters & setters } 

    function get_StartRow: Int32;
    function get_StartColumn: Int32;
    function get_EndRow: Int32;
    function get_EndColumn: Int32;
    function get_ListColumns: DNListColumnCollection;
    function get_ShowHeaderRow: Boolean;
    procedure set_ShowHeaderRow(value: Boolean);
    function get_ShowTotals: Boolean;
    procedure set_ShowTotals(value: Boolean);
    function get_DataRange: DNRange;
    function get_QueryTable: DNQueryTable;
    function get_DataSourceType: DNTableDataSourceType;
    function get_AutoFilter: DNAutoFilter;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_ShowTableStyleFirstColumn: Boolean;
    procedure set_ShowTableStyleFirstColumn(value: Boolean);
    function get_ShowTableStyleLastColumn: Boolean;
    procedure set_ShowTableStyleLastColumn(value: Boolean);
    function get_ShowTableStyleRowStripes: Boolean;
    procedure set_ShowTableStyleRowStripes(value: Boolean);
    function get_ShowTableStyleColumnStripes: Boolean;
    procedure set_ShowTableStyleColumnStripes(value: Boolean);
    function get_TableStyleType: DNTableStyleType;
    procedure set_TableStyleType(value: DNTableStyleType);
    function get_TableStyleName: string;
    procedure set_TableStyleName(value: string);
    function get_XmlMap: DNXmlMap;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeDescription: string;
    procedure set_AlternativeDescription(value: string);

  { methods } 

    ///<summary>
    ///  Resize the range of the list object.
    ///</summary>
    ///  <param name="startRow">The start row index of the new range.</param>
    ///  <param name="startColumn">The start column index of the new range.</param>
    ///  <param name="endRow">The end row index of the new range.</param>
    ///  <param name="endColumn">The end column index of the new range.</param>
    ///  <param name="hasHeaders">Whether the ListObject has headers.</param>
    procedure Resize(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; hasHeaders: Boolean);
    ///<summary>
    ///  Put the value to the cell.
    ///</summary>
    ///  <param name="rowOffset">The row offset.</param>
    ///  <param name="columnOffset">The column offset.</param>
    ///  <param name="value">The cell value.</param>
    procedure PutCellValue(rowOffset: Int32; columnOffset: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Updates all list columns' name from the worksheet.
    ///</summary>
    ///<remarks>
    ///  The value of the cells in the header row of the table must be same as the name of the ListColumn;
    ///  Cell.PutValue do not auto modify the name of the ListColumn for performance.
    ///</remarks>
    procedure UpdateColumnName;
    ///<summary>
    ///  Filter the table.
    ///</summary>
    function Filter: DNAutoFilter;
    ///<summary>
    ///  Apply the table style to the range.
    ///</summary>
    procedure ApplyStyleToRange;
    ///<summary>
    ///  Convert the table to range.
    ///</summary>
    procedure ConvertToRange; overload;
    ///<summary>
    ///  Convert the table to range.
    ///</summary>
    ///  <param name="options">the options when converting table to range.</param>
    procedure ConvertToRange(options: DNTableToRangeOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the start row of the range.
    ///</summary>
    property StartRow: Int32 read get_StartRow;
    ///<summary>
    ///  Gets the start column of the range.
    ///</summary>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  Gets the end  row of the range.
    ///</summary>
    property EndRow: Int32 read get_EndRow;
    ///<summary>
    ///  Gets the end column of the range.
    ///</summary>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  Gets ListColumns of the ListObject.
    ///</summary>
    property ListColumns: DNListColumnCollection read get_ListColumns;
    ///<summary>
    ///  Gets and sets whether this ListObject show header row.
    ///</summary>
    property ShowHeaderRow: Boolean read get_ShowHeaderRow write set_ShowHeaderRow;
    ///<summary>
    ///  Gets and sets whether this ListObject show total row.
    ///</summary>
    property ShowTotals: Boolean read get_ShowTotals write set_ShowTotals;
    ///<summary>
    ///  Gets the data range of the ListObject.
    ///</summary>
    property DataRange: DNRange read get_DataRange;
    ///<summary>
    ///  Gets the linked QueryTable.
    ///</summary>
    property QueryTable: DNQueryTable read get_QueryTable;
    ///<summary>
    ///  Gets the data source type of the table.
    ///</summary>
    property DataSourceType: DNTableDataSourceType read get_DataSourceType;
    ///<summary>
    ///  Gets auto filter.
    ///</summary>
    property AutoFilter: DNAutoFilter read get_AutoFilter;
    ///<summary>
    ///  Gets and sets the display name.
    ///</summary>
    property DisplayName: string read get_DisplayName write set_DisplayName;
    ///<summary>
    ///  Gets and sets the comment of the table.
    ///</summary>
    property Comment: string read get_Comment write set_Comment;
    ///<summary>
    ///  Indicates whether the first column in the table should have the style applied.
    ///</summary>
    property ShowTableStyleFirstColumn: Boolean read get_ShowTableStyleFirstColumn write set_ShowTableStyleFirstColumn;
    ///<summary>
    ///  Indicates whether the last column in the table should have the style applied.
    ///</summary>
    property ShowTableStyleLastColumn: Boolean read get_ShowTableStyleLastColumn write set_ShowTableStyleLastColumn;
    ///<summary>
    ///  Indicates whether row stripe formatting is applied.
    ///</summary>
    property ShowTableStyleRowStripes: Boolean read get_ShowTableStyleRowStripes write set_ShowTableStyleRowStripes;
    ///<summary>
    ///  Indicates whether column stripe formatting is applied.
    ///</summary>
    property ShowTableStyleColumnStripes: Boolean read get_ShowTableStyleColumnStripes write set_ShowTableStyleColumnStripes;
    ///<summary>
    ///  Gets and the built-in table style.
    ///</summary>
    property TableStyleType: DNTableStyleType read get_TableStyleType write set_TableStyleType;
    ///<summary>
    ///  Gets and sets the table style name.
    ///</summary>
    property TableStyleName: string read get_TableStyleName write set_TableStyleName;
    ///<summary>
    ///  Gets an <see cref="P:Aspose.Cells.Tables.ListObject.XmlMap" />
    ///  used for this list.
    ///</summary>
    property XmlMap: DNXmlMap read get_XmlMap;
    ///<summary>
    ///  Gets and sets the alternative text.
    ///</summary>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets and sets the alternative description.
    ///</summary>
    property AlternativeDescription: string read get_AlternativeDescription write set_AlternativeDescription;
  end;

  TDNListObject = class(TDNGenericImport<DNListObjectClass, DNListObject>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2A265FA1-E868-52F6-B632-12FA9CCABD91}']
  end;

  ///<summary>
  ///  Represents the table style.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  Style firstColumnStyle = workbook.CreateStyle();
  ///  firstColumnStyle.Pattern = BackgroundType.Solid;
  ///  firstColumnStyle.BackgroundColor = System.Drawing.Color.Red;
  ///  Style lastColumnStyle = workbook.CreateStyle();
  ///  lastColumnStyle.Font.IsBold = true;
  ///  lastColumnStyle.Pattern = BackgroundType.Solid;
  ///  lastColumnStyle.BackgroundColor = System.Drawing.Color.Red;
  ///  string tableStyleName = "Custom1";
  ///  TableStyleCollection tableStyles = workbook.Worksheets.TableStyles;
  ///  int index1 = tableStyles.AddTableStyle(tableStyleName);
  ///  TableStyle tableStyle = tableStyles[index1];
  ///  TableStyleElementCollection elements = tableStyle.TableStyleElements;
  ///  index1 = elements.Add(TableStyleElementType.FirstColumn);
  ///  TableStyleElement element = elements[index1];
  ///  element.SetElementStyle(firstColumnStyle);
  ///  index1 = elements.Add(TableStyleElementType.LastColumn);
  ///  element = elements[index1];
  ///  element.SetElementStyle(lastColumnStyle);
  ///  Cells cells = workbook.Worksheets[0].Cells;
  ///  for (int i = 0; i  &lt;5; i++)
  ///  {
  ///  cells[0, i].PutValue(CellsHelper.ColumnIndexToName(i));
  ///  }
  ///  for (int row = 1; row  &lt;10; row++)
  ///  {
  ///  for (int column = 0; column  &lt;5; column++)
  ///  {
  ///  cells[row, column].PutValue(row * column);
  ///  }
  ///  }
  ///  ListObjectCollection tables = workbook.Worksheets[0].ListObjects;
  ///  int index = tables.Add(0, 0, 9, 4, true);
  ///  ListObject table = tables[0];
  ///  table.ShowTableStyleFirstColumn = true;
  ///  table.ShowTableStyleLastColumn = true;
  ///  table.TableStyleName = tableStyleName;
  ///  workbook.Save(@"C:\Book1.xlsx");
  ///  [Visual Basic]
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim firstColumnStyle As Style = workbook.CreateStyle()
  ///  firstColumnStyle.Pattern = BackgroundType.Solid
  ///  firstColumnStyle.BackgroundColor = System.Drawing.Color.Red
  ///  Dim lastColumnStyle As Style = workbook.CreateStyle()
  ///  lastColumnStyle.Font.IsBold = True
  ///  lastColumnStyle.Pattern = BackgroundType.Solid
  ///  lastColumnStyle.BackgroundColor = System.Drawing.Color.Red
  ///  Dim tableStyleName As String = "Custom1"
  ///  Dim tableStyles As TableStyleCollection = workbook.Worksheets.TableStyles
  ///  Dim index1 As Int32 = tableStyles.AddTableStyle(tableStyleName)
  ///  Dim tableStyle As TableStyle = tableStyles(index1)
  ///  Dim elements As TableStyleElementCollection = tableStyle.TableStyleElements
  ///  index1 = elements.Add(TableStyleElementType.FirstColumn)
  ///  Dim element As TableStyleElement = elements(index1)
  ///  element.SetElementStyle(firstColumnStyle)
  ///  index1 = elements.Add(TableStyleElementType.LastColumn)
  ///  element = elements(index1)
  ///  element.SetElementStyle(lastColumnStyle)
  ///  Dim cells As Cells = workbook.Worksheets(0).Cells
  ///  For i As Int32 = 0 To 4
  ///  cells(0, i).PutValue(CellsHelper.ColumnIndexToName(i))
  ///  Next
  ///  For row As Int32 = 1 To 9
  ///  For column As Int32 = 0 To 4
  ///  cells(row, column).PutValue(row * column)
  ///  Next
  ///  Next
  ///  Dim tables As ListObjectCollection = workbook.Worksheets(0).ListObjects
  ///  Dim index As Int32 = tables.Add(0, 0, 9, 4, True)
  ///  Dim table As ListObject = tables(0)
  ///  table.ShowTableStyleFirstColumn = True
  ///  table.ShowTableStyleLastColumn = True
  ///  table.TableStyleName = tableStyleName
  ///  workbook.Save("C:\Book1.xlsx")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Tables.TableStyle')]
  DNTableStyle = interface(DDN.mscorlib.DNObject)
  ['{0B1312E8-94B8-39F8-B85E-ECF58B2DD789}']
  { getters & setters } 

    function get_Name: string;
    function get_TableStyleElements: DNTableStyleElementCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the name of table style.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets all elements of the table style.
    ///</summary>
    property TableStyleElements: DNTableStyleElementCollection read get_TableStyleElements;
  end;

  TDNTableStyle = class(TDNGenericImport<DNTableStyleClass, DNTableStyle>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7AA1BA3E-E473-5103-85F0-E699E6F24382}']
  end;

  ///<summary>
  ///  Represents the element of the table style.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableStyleElement')]
  DNTableStyleElement = interface(DDN.mscorlib.DNObject)
  ['{BC85030F-F48A-3D25-B9FB-CB5A90731DC6}']
  { getters & setters } 

    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DNTableStyleElementType;

  { methods } 

    ///<summary>
    ///  Gets the element style.
    ///</summary>
    ///<returns>Returns the <see cref="T:Aspose.Cells.Style" />
    ///  object.</returns>
    function GetElementStyle: DNStyle;
    ///<summary>
    ///  Sets the element style.
    ///</summary>
    ///  <param name="style">The element style.</param>
    procedure SetElementStyle(style: DNStyle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Number of rows or columns in a single band of striping.
    ///  Applies only when type is firstRowStripe, secondRowStripe, firstColumnStripe, or secondColumnStripe.
    ///</summary>
    property Size: Int32 read get_Size write set_Size;
    ///<summary>
    ///  Gets the element type.
    ///</summary>
    property &Type: DNTableStyleElementType read get_Type;
  end;

  TDNTableStyleElement = class(TDNGenericImport<DNTableStyleElementClass, DNTableStyleElement>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableToRangeOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E363FEA-175D-5A1E-B23E-D93E930D0316}']
  { constructors } 

    {class} function init: DNTableToRangeOptions;

  end;

  ///<summary>
  ///  Represents the options when converting table to range.
  ///</summary>
  [DNTypeName('Aspose.Cells.Tables.TableToRangeOptions')]
  DNTableToRangeOptions = interface(DDN.mscorlib.DNObject)
  ['{8D5C3CF3-6C22-36C5-9E87-31C7E70B0C35}']
  { getters & setters } 

    function get_LastRow: Int32;
    procedure set_LastRow(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the last row index of the table.
    ///</summary>
    property LastRow: Int32 read get_LastRow write set_LastRow;
  end;

  TDNTableToRangeOptions = class(TDNGenericImport<DNTableToRangeOptionsClass, DNTableToRangeOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThemeColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3FAAB78D-CC41-563D-95DC-702352876E95}']
  { constructors } 

    ///<summary></summary>
    ///  <param name="type">The theme type.</param>
    ///  <param name="tint">The tint value.</param>
    {class} function init(&type: DNThemeColorType; tint: Double): DNThemeColor;

  end;

  ///<summary>
  ///  Represents a theme color.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Instantiating a Workbook object
  ///  Workbook workbook = new Workbook();
  ///  Cells cells = workbook.Worksheets[0].Cells;
  ///  cells["A1"].PutValue("Hello World");
  ///  Style style = cells["A1"].GetStyle();
  ///  //Set ThemeColorType.Text2 color type with 40% lighten as the font color.
  ///  style.Font.ThemeColor = new ThemeColor(ThemeColorType.Text2, 0.4);
  ///  style.Pattern = BackgroundType.Solid;
  ///  //Set ThemeColorType.Background2 color type with 75% darken as the foreground color
  ///  style.ForegroundThemeColor = new ThemeColor(ThemeColorType.Background2, -0.75);
  ///  cells["A1"].SetStyle(style);
  ///  //Saving the Excel file
  ///  workbook.Save("C:\\book1.xlsx");
  ///  [Visual Basic]
  ///  'Instantiating a Workbook object
  ///  Dim workbook As Workbook = New Workbook()
  ///  Dim cells As Cells = workbook.Worksheets(0).Cells
  ///  cells("A1").PutValue("Hello World")
  ///  'Get the cell style
  ///  Dim style As Style = cells("A1").GetStyle()
  ///  'Set ThemeColorType.Text2 color type with 40% lighten as the font color.
  ///  Style.Font.ThemeColor = New ThemeColor(ThemeColorType.Text2, 0.4)
  ///  Style.Pattern = BackgroundType.Solid
  ///  'Set ThemeColorType.Background2 color type with 75% darken as the foreground color
  ///  style.ForegroundThemeColor = New ThemeColor(ThemeColorType.Background2, -0.75)
  ///  'Set the cell style
  ///  cells("A1").SetStyle(style)
  ///  'Saving the Excel file
  ///  Workbook.Save("C:\\book1.xlsx")
  ///</code></example>
  [DNTypeName('Aspose.Cells.ThemeColor')]
  DNThemeColor = interface(DDN.mscorlib.DNObject)
  ['{B539E7C5-70B1-3615-9491-01A41416AE56}']
  { getters & setters } 

    function get_ColorType: DNThemeColorType;
    procedure set_ColorType(value: DNThemeColorType);
    function get_Tint: Double;
    procedure set_Tint(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the theme type.
    ///</summary>
    property ColorType: DNThemeColorType read get_ColorType write set_ColorType;
    ///<summary>
    ///  Gets and sets the tint value.
    ///</summary>
    ///<remarks>
    ///  The tint value is stored as a double from -1.0 .. 1.0, where -1.0 means 100% darken
    ///  and 1.0 means 100% lighten. Also, 0.0 means no change.
    ///</remarks>
    property Tint: Double read get_Tint write set_Tint;
  end;

  TDNThemeColor = class(TDNGenericImport<DNThemeColorClass, DNThemeColor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DA2D6B2-9C1B-5CBC-B7F3-5DA9C3E8B413}']
  end;

  ///<summary>
  ///  Represents the threaded comment.
  ///</summary>
  [DNTypeName('Aspose.Cells.ThreadedComment')]
  DNThreadedComment = interface(DDN.mscorlib.DNObject)
  ['{CD1E3E85-91BB-3977-87D3-45259A1D917C}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Notes: string;
    procedure set_Notes(value: string);
    function get_Author: DNThreadedCommentAuthor;
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the row index of the comment.
    ///</summary>
    property Row: Int32 read get_Row;
    ///<summary>
    ///  Gets the column index of the comment.
    ///</summary>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  Gets and sets the text of the comment.
    ///</summary>
    property Notes: string read get_Notes write set_Notes;
    ///<summary>
    ///  Gets the author of the comment.
    ///</summary>
    property Author: DNThreadedCommentAuthor read get_Author;
    ///<summary>
    ///  Gets and sets the created time of this threaded comment.
    ///</summary>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
  end;

  TDNThreadedComment = class(TDNGenericImport<DNThreadedCommentClass, DNThreadedComment>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentAuthorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7D7AB6EC-67D9-5FC4-8AED-D079CF1C88FC}']
  end;

  ///<summary>
  ///  Represents the person who creates the threaded comments;
  ///</summary>
  [DNTypeName('Aspose.Cells.ThreadedCommentAuthor')]
  DNThreadedCommentAuthor = interface(DDN.mscorlib.DNObject)
  ['{B53BA48D-29D6-3B1A-ACEE-CECF628C1169}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_UserId: string;
    procedure set_UserId(value: string);
    function get_ProviderId: string;
    procedure set_ProviderId(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets the id of the user.
    ///</summary>
    property UserId: string read get_UserId write set_UserId;
    ///<summary>
    ///  Gets the id of the provider.
    ///</summary>
    property ProviderId: string read get_ProviderId write set_ProviderId;
  end;

  TDNThreadedCommentAuthor = class(TDNGenericImport<DNThreadedCommentAuthorClass, DNThreadedCommentAuthor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTop10Class = interface(DDN.mscorlib.DNObjectClass)
  ['{F5E20B6B-4FDC-52DB-B28B-CB789742CEF4}']
  { constructors } 

    {class} function init: DNTop10;

  end;

  ///<summary>
  ///  Describe the Top10 conditional formatting rule.
  ///  This conditional formatting rule highlights cells whose
  ///  values fall in the top N or bottom N bracket, as specified.
  ///</summary>
  [DNTypeName('Aspose.Cells.Top10')]
  DNTop10 = interface(DDN.mscorlib.DNObject)
  ['{C7FCFA5C-B532-3FF2-8CF9-153504F8415D}']
  { getters & setters } 

    function get_IsPercent: Boolean;
    procedure set_IsPercent(value: Boolean);
    function get_IsBottom: Boolean;
    procedure set_IsBottom(value: Boolean);
    function get_Rank: Int32;
    procedure set_Rank(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get or set the flag indicating whether a "top/bottom n" rule is a "top/bottom n percent" rule.
    ///  Default value is false.
    ///</summary>
    property IsPercent: Boolean read get_IsPercent write set_IsPercent;
    ///<summary>
    ///  Get or set the flag indicating whether a "top/bottom n" rule is a "bottom n" rule. '1' indicates 'bottom'.
    ///  Default value is false.
    ///</summary>
    property IsBottom: Boolean read get_IsBottom write set_IsBottom;
    ///<summary>
    ///  Get or set the value of "n" in a "top/bottom n" conditional formatting rule.
    ///  If IsPercent is true, the value must between 0 and 100.
    ///  Otherwise it must between 0 and 1000.
    ///  Default value is 10.
    ///</summary>
    property Rank: Int32 read get_Rank write set_Rank;
  end;

  TDNTop10 = class(TDNGenericImport<DNTop10Class, DNTop10>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTop10FilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B5214B84-C649-51B6-8408-158613946443}']
  end;

  ///<summary>
  ///  Represents the top 10 filter.
  ///</summary>
  [DNTypeName('Aspose.Cells.Top10Filter')]
  DNTop10Filter = interface(DDN.mscorlib.DNObject)
  ['{21F80AEF-55E1-3749-A983-DB28F24A3527}']
  { getters & setters } 

    function get_IsTop: Boolean;
    procedure set_IsTop(value: Boolean);
    function get_IsPercent: Boolean;
    procedure set_IsPercent(value: Boolean);
    function get_Items: Int32;
    procedure set_Items(value: Int32);
    function get_Criteria: DDN.mscorlib.DNObject;
    procedure set_Criteria(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether it's top filter.
    ///</summary>
    property IsTop: Boolean read get_IsTop write set_IsTop;
    ///<summary>
    ///  Indicates whether the items is percent.
    ///</summary>
    property IsPercent: Boolean read get_IsPercent write set_IsPercent;
    ///<summary>
    ///  Gets and sets the items of the filter.
    ///</summary>
    property Items: Int32 read get_Items write set_Items;
    ///<summary></summary>
    property Criteria: DDN.mscorlib.DNObject read get_Criteria write set_Criteria;
  end;

  TDNTop10Filter = class(TDNGenericImport<DNTop10FilterClass, DNTop10Filter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNUnionRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A5DAD88-E25C-59BC-9630-639DBDE3F17C}']
  end;

  ///<summary>
  ///  Represents union range.
  ///</summary>
  [DNTypeName('Aspose.Cells.UnionRange')]
  DNUnionRange = interface(DDN.mscorlib.DNObject)
  ['{413AB0E2-9551-3440-A67D-8366477317BB}']
  { getters & setters } 

    function get_FirstRow: Int32;
    function get_FirstColumn: Int32;
    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefersTo: string;
    function get_HasRange: Boolean;
    function get_Hyperlinks: TArray<DNHyperlink>;
    function get_CellCount: Int32;
    function get_RangeCount: Int32;
    function get_Ranges: TArray<DNRange>;

  { methods } 

    ///<summary>
    ///  Combines a range of cells into a single cell.
    ///</summary>
    ///<remarks>
    ///  Reference the merged cell via the address of the upper-left cell in the range.
    ///</remarks>
    procedure Merge;
    ///<summary>
    ///  Unmerges merged cells of this range.
    ///</summary>
    procedure UnMerge;
    ///<summary>
    ///  Puts a value into the range, if appropriate the value will be converted to other data type and cell's number format will be reset.
    ///</summary>
    ///  <param name="stringValue">Input value</param>
    ///  <param name="isConverted">True: converted to other data type if appropriate.</param>
    ///  <param name="setStyle">True: set the number format to cell's style when converting to other data type</param>
    procedure PutValue(stringValue: string; isConverted: Boolean; setStyle: Boolean);
    ///<summary>
    ///  Sets the style of the range.
    ///</summary>
    ///  <param name="style">The Style object.</param>
    procedure SetStyle(style: DNStyle);
    ///<summary>
    ///  Applies formats for a whole range.
    ///</summary>
    ///  <param name="style">The style object which will be applied.</param>
    ///  <param name="flag">Flags which indicates applied formatting properties.</param>
    ///<remarks>Each cell in this range will contains a <see cref="T:Aspose.Cells.Style" />
    ///  object.
    ///  So this is a memory-consuming method. Please use it carefully.</remarks>
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    ///<summary>
    ///  Copying the range with paste special options.
    ///</summary>
    ///  <param name="range">The source range.</param>
    ///  <param name="options">The paste special options.</param>
    procedure Copy(range: DNUnionRange; options: DNPasteOptions);
    ///<summary>
    ///  Gets the enumerator for cells in this Range.
    ///</summary>
    ///<returns>The cells enumerator</returns>
    ///<remarks>When traversing elements by the returned Enumerator, the cells collection
    ///  should not be modified(such as operations that will cause new Cell/Row be instantiated or existing Cell/Row be deleted).
    ///  Otherwise the enumerator may not be able to traverse all cells correctly(some elements may be traversed repeatedly or skipped).</remarks>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  Sets out line borders around a range of cells.
    ///</summary>
    ///  <param name="borderStyles">Border styles.</param>
    ///  <param name="borderColors">Border colors.</param>
    ///<remarks>
    ///  Both the length of borderStyles and borderStyles must be 4.
    ///  The order of borderStyles and borderStyles must be top,bottom,left,right
    ///</remarks>
    procedure SetOutlineBorders(borderStyles: TArray<DNCellBorderType>; borderColors: TArray<DDN.System.Drawing.DNColor>); overload;
    ///<summary>
    ///  Sets the outline borders around a range of cells with same border style and color.
    ///</summary>
    ///  <param name="borderStyle">Border style.</param>
    ///  <param name="borderColor">Border color.</param>
    procedure SetOutlineBorders(borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor); overload;
    ///<summary>
    ///  Intersects another range.
    ///</summary>
    ///  <param name="range">The range.</param>
    ///<remarks>If the two union ranges are not intersected, returns null.</remarks>
    function Intersect(range: string): DNUnionRange; overload;
    ///<summary>
    ///  Intersects another range.
    ///</summary>
    ///  <param name="unionRange">The range.</param>
    ///<remarks>If the two union ranges are not intersected, returns null.</remarks>
    function Intersect(unionRange: DNUnionRange): DNUnionRange; overload;
    ///<summary>
    ///  Intersects another range.
    ///</summary>
    ///  <param name="ranges">The range.</param>
    ///<remarks>If the two union ranges are not intersected, returns null.</remarks>
    function Intersect(ranges: TArray<DNRange>): DNUnionRange; overload;
    ///<summary>
    ///  Union another range.
    ///</summary>
    ///  <param name="range">The range.</param>
    ///<returns></returns>
    function Union(range: string): DNUnionRange; overload;
    ///<summary>
    ///  Union another range.
    ///</summary>
    ///  <param name="unionRange">The range.</param>
    ///<returns></returns>
    function Union(unionRange: DNUnionRange): DNUnionRange; overload;
    ///<summary>
    ///  Union the ranges.
    ///</summary>
    ///  <param name="ranges">The ranges.</param>
    ///<returns></returns>
    function Union(ranges: TArray<DNRange>): DNUnionRange; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the index of the first row of the range.
    ///</summary>
    ///<remarks>
    ///  Only effects when it only contains one range.
    ///</remarks>
    property FirstRow: Int32 read get_FirstRow;
    ///<summary>
    ///  Gets the index of the first column of the range.
    ///</summary>
    ///<remarks>
    ///  Only effects when it only contains one range.
    ///</remarks>
    property FirstColumn: Int32 read get_FirstColumn;
    ///<summary>
    ///  Gets the count of rows in the range.
    ///</summary>
    ///<remarks>
    ///  Only effects when it only contains one range.
    ///</remarks>
    property RowCount: Int32 read get_RowCount;
    ///<summary>
    ///  Gets the count of rows in the range.
    ///</summary>
    ///<remarks>
    ///  Only effects when it only contains one range.
    ///</remarks>
    property ColumnCount: Int32 read get_ColumnCount;
    ///<summary>
    ///  Gets and sets the values of the range.
    ///</summary>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets the name of the range.
    ///</summary>
    ///<remarks>Named range is supported. For example,
    ///  <p>range.Name = "Sheet1!MyRange";</p>
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the range's refers to.
    ///</summary>
    property RefersTo: string read get_RefersTo;
    ///<summary>
    ///  Indicates whether this has range.
    ///</summary>
    property HasRange: Boolean read get_HasRange;
    ///<summary>
    ///  Gets all hyperlink in the range.
    ///</summary>
    property Hyperlinks: TArray<DNHyperlink> read get_Hyperlinks;
    ///<summary>
    ///  Gets all cell count in the range.
    ///</summary>
    property CellCount: Int32 read get_CellCount;
    ///<summary>
    ///  Gets the count of the ranges.
    ///</summary>
    property RangeCount: Int32 read get_RangeCount;
    ///<summary>
    ///  Gets all union ranges.
    ///</summary>
    property Ranges: TArray<DNRange> read get_Ranges;
  end;

  TDNUnionRange = class(TDNGenericImport<DNUnionRangeClass, DNUnionRange>) end;

  //-------------namespace: Aspose.Cells.Utility----------------
  DNExportRangeToJsonOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C18F07B3-FEA4-5096-832B-E18CA269DD99}']
  { constructors } 

    {class} function init: DNExportRangeToJsonOptions;

  end;

  ///<summary>
  ///  Indicates the options that exporting range to json.
  ///</summary>
  [DNTypeName('Aspose.Cells.Utility.ExportRangeToJsonOptions')]
  DNExportRangeToJsonOptions = interface(DDN.mscorlib.DNObject)
  ['{FD92250D-7CCB-3697-8D5C-F37BC5D4482D}']
  { getters & setters } 

    function get_HasHeaderRow: Boolean;
    procedure set_HasHeaderRow(value: Boolean);
    function get_ExportAsString: Boolean;
    procedure set_ExportAsString(value: Boolean);
    function get_Indent: string;
    procedure set_Indent(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the range contains header row.
    ///</summary>
    property HasHeaderRow: Boolean read get_HasHeaderRow write set_HasHeaderRow;
    ///<summary>
    ///  Exports the string value of the cells to json.
    ///</summary>
    property ExportAsString: Boolean read get_ExportAsString write set_ExportAsString;
    ///<summary>
    ///  Indicates the indent.
    ///</summary>
    ///<remarks>
    ///  If the indent is null or empty, the exported json is not formatted.
    ///</remarks>
    property Indent: string read get_Indent write set_Indent;
  end;

  TDNExportRangeToJsonOptions = class(TDNGenericImport<DNExportRangeToJsonOptionsClass, DNExportRangeToJsonOptions>) end;

  //-------------namespace: Aspose.Cells.Utility----------------
  DNJsonLayoutOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{370B9552-58A4-5872-AC36-D796E2852688}']
  { constructors } 

    {class} function init: DNJsonLayoutOptions;

  end;

  ///<summary>
  ///  Represents the options of json layout type.
  ///</summary>
  [DNTypeName('Aspose.Cells.Utility.JsonLayoutOptions')]
  DNJsonLayoutOptions = interface(DDN.mscorlib.DNObject)
  ['{E02E5657-CD65-36FC-A06C-650BF368EAE0}']
  { getters & setters } 

    function get_ArrayAsTable: Boolean;
    procedure set_ArrayAsTable(value: Boolean);
    function get_IgnoreNull: Boolean;
    procedure set_IgnoreNull(value: Boolean);
    function get_IgnoreArrayTitle: Boolean;
    procedure set_IgnoreArrayTitle(value: Boolean);
    function get_IgnoreObjectTitle: Boolean;
    procedure set_IgnoreObjectTitle(value: Boolean);
    function get_ConvertNumericOrDate: Boolean;
    procedure set_ConvertNumericOrDate(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_DateFormat: string;
    procedure set_DateFormat(value: string);
    function get_TitleStyle: DNStyle;
    procedure set_TitleStyle(value: DNStyle);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Processes Array as table.
    ///</summary>
    property ArrayAsTable: Boolean read get_ArrayAsTable write set_ArrayAsTable;
    ///<summary>
    ///  Indicates whether ignoring null value.
    ///</summary>
    property IgnoreNull: Boolean read get_IgnoreNull write set_IgnoreNull;
    ///<summary>
    ///  Indicates whether ignore title if array is a property of object.
    ///</summary>
    property IgnoreArrayTitle: Boolean read get_IgnoreArrayTitle write set_IgnoreArrayTitle;
    ///<summary>
    ///  Indicates whether ignore title if object is a property of object.
    ///</summary>
    property IgnoreObjectTitle: Boolean read get_IgnoreObjectTitle write set_IgnoreObjectTitle;
    ///<summary>
    ///  Gets or sets a value that indicates whether the string in json is converted to numeric or date.
    ///</summary>
    property ConvertNumericOrDate: Boolean read get_ConvertNumericOrDate write set_ConvertNumericOrDate;
    ///<summary>
    ///  Gets and sets the format of numeric value.
    ///</summary>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Gets and sets the format of date value.
    ///</summary>
    property DateFormat: string read get_DateFormat write set_DateFormat;
    ///<summary>
    ///  Gets and sets the style of the title.
    ///</summary>
    property TitleStyle: DNStyle read get_TitleStyle write set_TitleStyle;
  end;

  TDNJsonLayoutOptions = class(TDNGenericImport<DNJsonLayoutOptionsClass, DNJsonLayoutOptions>) end;

  //-------------namespace: Aspose.Cells.Utility----------------
  DNJsonUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2103F451-C39E-577B-A549-A5A21BDE20C7}']
  { constructors } 

    {class} function init: DNJsonUtility;

  { static methods } 

    ///<summary>
    ///  Import the json string.
    ///</summary>
    ///  <param name="json">The json string.</param>
    ///  <param name="cells">The Cells.</param>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///  <param name="option">The options of import json string.</param>
    {class} function ImportData(json: string; cells: DNCells; row: Int32; column: Int32; option: DNJsonLayoutOptions): TArray<Int32>;
    ///<summary>
    ///  Exporting the range to json file.
    ///</summary>
    ///  <param name="range">The range.</param>
    ///  <param name="options">The options of exporting.</param>
    ///<returns>The json string value.</returns>
    {class} function ExportRangeToJson(range: DNRange; options: DNExportRangeToJsonOptions): string;

  end;

  ///<summary>
  ///  Represents the utility class of processing json.
  ///</summary>
  [DNTypeName('Aspose.Cells.Utility.JsonUtility')]
  DNJsonUtility = interface(DDN.mscorlib.DNObject)
  ['{B311CE86-5D5C-367B-ACDF-FA83F00E8E71}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJsonUtility = class(TDNGenericImport<DNJsonUtilityClass, DNJsonUtility>) end;

  //-------------namespace: Aspose.Cells----------------
  DNValidationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E94A7E19-35BC-5AFF-A56A-62F1E678FB89}']
  end;

  ///<summary>
  ///  Represents data validation.settings.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  ValidationCollection validations = workbook.Worksheets[0].Validations;
  ///  Validation validation = validations[validations.Add()];
  ///  validation.Type = Aspose.Cells.ValidationType.WholeNumber;
  ///  validation.Operator = OperatorType.Between;
  ///  validation.Formula1 = "3";
  ///  validation.Formula2 = "1234";
  ///  CellArea area;
  ///  area.StartRow = 0;
  ///  area.EndRow = 1;
  ///  area.StartColumn = 0;
  ///  area.EndColumn = 1;
  ///  validation.AddArea(area);
  ///  [Visual Basic]
  ///  Dim workbook as Workbook = new Workbook()
  ///  Dim validations as ValidationCollection  = workbook.Worksheets(0).Validations
  ///  Dim validation as Validation = validations(validations.Add())
  ///  validation.Type = ValidationType.WholeNumber
  ///  validation.Operator = OperatorType.Between
  ///  validation.Formula1 = "3"
  ///  validation.Formula2 = "1234"
  ///  Dim area as CellArea
  ///  area.StartRow = 0
  ///  area.EndRow = 1
  ///  area.StartColumn = 0
  ///  area.EndColumn = 1
  ///  validation.AddArea(area)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Validation')]
  DNValidation = interface(DDN.mscorlib.DNObject)
  ['{CCDD3348-7AB4-332E-B50F-33A6E744C9B0}']
  { getters & setters } 

    function get_Operator: DNOperatorType;
    procedure set_Operator(value: DNOperatorType);
    function get_AlertStyle: DNValidationAlertType;
    procedure set_AlertStyle(value: DNValidationAlertType);
    function get_Type: DNValidationType;
    procedure set_Type(value: DNValidationType);
    function get_InputMessage: string;
    procedure set_InputMessage(value: string);
    function get_InputTitle: string;
    procedure set_InputTitle(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorTitle: string;
    procedure set_ErrorTitle(value: string);
    function get_ShowInput: Boolean;
    procedure set_ShowInput(value: Boolean);
    function get_ShowError: Boolean;
    procedure set_ShowError(value: Boolean);
    function get_IgnoreBlank: Boolean;
    procedure set_IgnoreBlank(value: Boolean);
    function get_Formula1: string;
    procedure set_Formula1(value: string);
    function get_Formula2: string;
    procedure set_Formula2(value: string);
    function get_Value1: DDN.mscorlib.DNObject;
    procedure set_Value1(value: DDN.mscorlib.DNObject);
    function get_Value2: DDN.mscorlib.DNObject;
    procedure set_Value2(value: DDN.mscorlib.DNObject);
    function get_InCellDropDown: Boolean;
    procedure set_InCellDropDown(value: Boolean);
    function get_Areas: TArray<DNCellArea>;

  { methods } 

    ///<summary>
    ///  Gets the value or expression associated with this validation.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The value or expression associated with this validation.</returns>
    function GetFormula1(isR1C1: Boolean; isLocal: Boolean): string; overload;
    ///<summary>
    ///  Gets the value or expression associated with this validation.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///<returns>The value or expression associated with this validation.</returns>
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean): string; overload;
    ///<summary>
    ///  Gets the value or expression associated with this validation for specific cell.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The value or expression associated with this validation.</returns>
    function GetFormula1(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    ///<summary>
    ///  Gets the value or expression associated with this validation for specific cell.
    ///</summary>
    ///  <param name="isR1C1">Whether the formula needs to be formatted as R1C1.</param>
    ///  <param name="isLocal">Whether the formula needs to be formatted by locale.</param>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The value or expression associated with this validation.</returns>
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    ///<summary>
    ///  Sets the value or expression associated with this validation.
    ///</summary>
    ///  <param name="formula">The value or expression associated with this format condition.</param>
    ///  <param name="isR1C1">Whether the formula is R1C1 formula.</param>
    ///  <param name="isLocal">Whether the formula is locale formatted.</param>
    procedure SetFormula1(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Sets the value or expression associated with this validation.
    ///</summary>
    ///  <param name="formula">The value or expression associated with this format condition.</param>
    ///  <param name="isR1C1">Whether the formula is R1C1 formula.</param>
    ///  <param name="isLocal">Whether the formula is locale formatted.</param>
    procedure SetFormula2(formula: string; isR1C1: Boolean; isLocal: Boolean);
    ///<summary>
    ///  Get the value for list of the validation for the specified cell.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column">The column index.</param>
    ///<returns>The value to produce the list of this validation for the specified cell.
    ///  If the list references to a range, then the returned value will be a <see cref="T:Aspose.Cells.ReferredArea" />
    ///  object;
    ///  Otherwise the returned value may be null, object[], or simple object.</returns>
    ///<remarks>Only for validation whose type is List and has been applied to given cell,
    ///  otherwise null will be returned.</remarks>
    function GetListValue(row: Int32; column: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Applies the validation to the area.
    ///</summary>
    ///  <param name="cellArea">The area.</param>
    ///<remarks>
    ///  It is equivalent to use <see cref="M:Aspose.Cells.Validation.AddArea(Aspose.Cells.CellArea,System.Boolean,System.Boolean)" />
    ///  with checking intersection and edge.
    ///</remarks>
    procedure AddArea(cellArea: DNCellArea); overload;
    ///<summary>
    ///  Applies the validation to the area.
    ///</summary>
    ///  <param name="cellArea">The area.</param>
    ///  <param name="checkIntersection">Whether check the intersection of given area with existing validations' areas.
    ///  If one validation has been applied in given area(or part of it),
    ///  then the existing validation should be removed at first from given area.
    ///  Otherwise corruption may be caused for the generated Validations.
    ///  If user is sure that the added area does not intersect with any existing area,
    ///  this parameter can be set as false for performance consideration.</param>
    ///  <param name="checkEdge">Whether check the edge of this validation's applied areas.
    ///  Validation's internal settings depend on the top-left one of its applied ranges,
    ///  so if given area will become the new top-left one of the applied ranges,
    ///  the internal settings should be changed and rebuilt, otherwise unexpected result may be caused.
    ///  If user is sure that the added area is not the top-left one,
    ///  this parameter can be set as false for performance consideration.</param>
    ///<remarks>
    ///  In this method, we will remove all old validations in given area.
    ///  For the top-left one of Validation's applied ranges, firstly its StartRow is smallest,
    ///  secondly its StartColumn is the smallest one of those areas who have the same smallest StartRow.
    ///</remarks>
    procedure AddArea(cellArea: DNCellArea; checkIntersection: Boolean; checkEdge: Boolean); overload;
    ///<summary>
    ///  Applies the validation to given areas.
    ///</summary>
    ///  <param name="areas">The areas.</param>
    ///  <param name="checkIntersection">Whether check the intersection of given area with existing validations' areas.
    ///  If one validation has been applied in given area(or part of it),
    ///  then the existing validation should be removed at first from given area.
    ///  Otherwise corruption may be caused for the generated Validations.
    ///  If user is sure that all the added areas do not intersect with any existing area,
    ///  this parameter can be set as false for performance consideration.</param>
    ///  <param name="checkEdge">Whether check the edge of this validation's applied areas.
    ///  Validation's internal settings depend on the top-left one of its applied ranges,
    ///  so if one of given areas will become the new top-left one of the applied ranges,
    ///  the internal settings should be changed and rebuilt, otherwise unexpected result may be caused.
    ///  If user is sure that no one of those added areas is the top-left,
    ///  this parameter can be set as false for performance consideration.</param>
    ///<remarks>
    ///  In this method, we will remove all old validations in given area.
    ///  For the top-left one of Validation's applied ranges, firstly its StartRow is smallest,
    ///  secondly its StartColumn is the smallest one of those areas who have the same smallest StartRow.
    ///</remarks>
    procedure AddAreas(areas: TArray<DNCellArea>; checkIntersection: Boolean; checkEdge: Boolean);
    ///<summary>
    ///  Remove the validation settings in the range.
    ///</summary>
    ///  <param name="cellArea">the areas where this validation settings should be removed.</param>
    procedure RemoveArea(cellArea: DNCellArea);
    ///<summary>
    ///  Removes this validation from given areas.
    ///</summary>
    ///  <param name="areas">the areas where this validation settings should be removed.</param>
    procedure RemoveAreas(areas: TArray<DNCellArea>);
    ///<summary>
    ///  Remove the validation settings in the cell.
    ///</summary>
    ///  <param name="row">The row index.</param>
    ///  <param name="column"> The column index.</param>
    procedure RemoveACell(row: Int32; column: Int32);
    ///<summary>
    ///  Copy validation.
    ///</summary>
    ///  <param name="source">The source validation.</param>
    ///  <param name="copyOption">The copy option.</param>
    procedure Copy(source: DNValidation; copyOption: DNCopyOptions);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the operator for the data validation.
    ///</summary>
    property Operator: DNOperatorType read get_Operator write set_Operator;
    ///<summary>
    ///  Represents the validation alert style.
    ///</summary>
    property AlertStyle: DNValidationAlertType read get_AlertStyle write set_AlertStyle;
    ///<summary>
    ///  Represents the data validation type.
    ///</summary>
    property &Type: DNValidationType read get_Type write set_Type;
    ///<summary>
    ///  Represents the data validation input message.
    ///</summary>
    property InputMessage: string read get_InputMessage write set_InputMessage;
    ///<summary>
    ///  Represents the title of the data-validation input dialog box.
    ///</summary>
    property InputTitle: string read get_InputTitle write set_InputTitle;
    ///<summary>
    ///  Represents the data validation error message.
    ///</summary>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  Represents the title of the data-validation error dialog box.
    ///</summary>
    property ErrorTitle: string read get_ErrorTitle write set_ErrorTitle;
    ///<summary>
    ///  Indicates whether the data validation input message will be displayed whenever the user selects a cell in the data validation range.
    ///</summary>
    property ShowInput: Boolean read get_ShowInput write set_ShowInput;
    ///<summary>
    ///  Indicates whether the data validation error message will be displayed whenever the user enters invalid data.
    ///</summary>
    property ShowError: Boolean read get_ShowError write set_ShowError;
    ///<summary>
    ///  Indicates whether blank values are permitted by the range data validation.
    ///</summary>
    property IgnoreBlank: Boolean read get_IgnoreBlank write set_IgnoreBlank;
    ///<summary>
    ///  Represents the value or expression associated with the data validation.
    ///</summary>
    property Formula1: string read get_Formula1 write set_Formula1;
    ///<summary>
    ///  Represents the value or expression associated with the data validation.
    ///</summary>
    property Formula2: string read get_Formula2 write set_Formula2;
    ///<summary>
    ///  Represents the first value associated with the data validation.
    ///</summary>
    property Value1: DDN.mscorlib.DNObject read get_Value1 write set_Value1;
    ///<summary>
    ///  Represents the second value associated with the data validation.
    ///</summary>
    property Value2: DDN.mscorlib.DNObject read get_Value2 write set_Value2;
    ///<summary>
    ///  Indicates whether data validation displays a drop-down list that contains acceptable values.
    ///</summary>
    property InCellDropDown: Boolean read get_InCellDropDown write set_InCellDropDown;
    ///<summary>
    ///  Gets all <see cref="T:Aspose.Cells.CellArea" />
    ///  which contain the data validation settings.
    ///</summary>
    property Areas: TArray<DNCellArea> read get_Areas;
  end;

  TDNValidation = class(TDNGenericImport<DNValidationClass, DNValidation>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaModuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{97617718-970A-5732-8781-D3341124668F}']
  end;

  ///<summary>
  ///  Represents module that is contained in VBA project.
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaModule')]
  DNVbaModule = interface(DDN.mscorlib.DNObject)
  ['{3CB76BFE-94F8-3DA1-8F75-17949828F519}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNVbaModuleType;
    function get_Codes: string;
    procedure set_Codes(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the name of Module.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the type of module.
    ///</summary>
    property &Type: DNVbaModuleType read get_Type;
    ///<summary>
    ///  Gets and sets the codes of module.
    ///</summary>
    property Codes: string read get_Codes write set_Codes;
  end;

  TDNVbaModule = class(TDNGenericImport<DNVbaModuleClass, DNVbaModule>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaProjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8DD8282-8787-51C1-8EE8-19AA58D101C1}']
  end;

  ///<summary>
  ///  Represents the VBA project.
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaProject')]
  DNVbaProject = interface(DDN.mscorlib.DNObject)
  ['{A7EA43A2-6C41-3079-89DD-099B57A1A38E}']
  { getters & setters } 

    function get_IsValidSigned: Boolean;
    function get_CertRawData: TArray<Byte>;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsSigned: Boolean;
    function get_IsProtected: Boolean;
    function get_IslockedForViewing: Boolean;
    function get_Modules: DNVbaModuleCollection;
    function get_References: DNVbaProjectReferenceCollection;

  { methods } 

    ///<summary>
    ///  Sign this VBA project by a DigitalSignature
    ///</summary>
    ///  <param name="digitalSignature">DigitalSignature</param>
    procedure Sign(digitalSignature: DNDigitalSignature);
    ///<summary>
    ///  Protects or unprotects this VBA project.
    ///</summary>
    ///  <param name="islockedForViewing">indicates whether locks project for viewing.</param>
    ///  <param name="password">
    ///  If the value is null, unprotects this VBA project, otherwise projects the this VBA project.
    ///</param>
    ///<remarks>
    ///  If islockedForViewing is true, the password could not be null.
    ///</remarks>
    procedure Protect(islockedForViewing: Boolean; password: string);
    ///<summary>
    ///  Copy VBA project from other file.
    ///</summary>
    ///  <param name="source"></param>
    procedure Copy(source: DNVbaProject);
    ///<summary>
    ///  Validates protection password.
    ///</summary>
    ///  <param name="password">the password</param>
    ///<returns>Whether password is the protection password of this VBA project</returns>
    function ValidatePassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether the signature of VBA project is valid or not.
    ///</summary>
    property IsValidSigned: Boolean read get_IsValidSigned;
    ///<summary>
    ///  Gets certificate raw data if this VBA project is signed.
    ///</summary>
    property CertRawData: TArray<Byte> read get_CertRawData;
    ///<summary>
    ///  Gets and sets the name of the VBA project.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Indicates whether VBAcode is signed or not.
    ///</summary>
    property IsSigned: Boolean read get_IsSigned;
    ///<summary>
    ///  Indicates whether this VBA project is protected.
    ///</summary>
    property IsProtected: Boolean read get_IsProtected;
    ///<summary>
    ///  Indicates whether this VBA project is locked for viewing.
    ///</summary>
    property IslockedForViewing: Boolean read get_IslockedForViewing;
    ///<summary>
    ///  Gets all <see cref="T:Aspose.Cells.Vba.VbaModule" />
    ///  objects.
    ///</summary>
    property Modules: DNVbaModuleCollection read get_Modules;
    ///<summary>
    ///  Gets all references of VBA project.
    ///</summary>
    property References: DNVbaProjectReferenceCollection read get_References;
  end;

  TDNVbaProject = class(TDNGenericImport<DNVbaProjectClass, DNVbaProject>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaProjectReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{540E0369-CE74-56F2-930F-851CDAD143D0}']
  end;

  ///<summary>
  ///  Represents the reference of VBA project.
  ///</summary>
  [DNTypeName('Aspose.Cells.Vba.VbaProjectReference')]
  DNVbaProjectReference = interface(DDN.mscorlib.DNObject)
  ['{A4A57452-213B-386B-B771-B4DA2E9690C0}']
  { getters & setters } 

    function get_Type: DNVbaProjectReferenceType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Libid: string;
    procedure set_Libid(value: string);
    function get_Twiddledlibid: string;
    procedure set_Twiddledlibid(value: string);
    function get_ExtendedLibid: string;
    procedure set_ExtendedLibid(value: string);
    function get_RelativeLibid: string;
    procedure set_RelativeLibid(value: string);

  { methods } 

    ///<summary></summary>
    ///  <param name="source"></param>
    procedure Copy(source: DNVbaProjectReference);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of this reference.
    ///</summary>
    property &Type: DNVbaProjectReferenceType read get_Type;
    ///<summary>
    ///  Gets and sets the name of the reference.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets the Libid of the reference.
    ///</summary>
    property Libid: string read get_Libid write set_Libid;
    ///<summary>
    ///  Gets and sets the twiddled Libid of the reference.
    ///</summary>
    ///<remarks>
    ///  Only for control reference.
    ///</remarks>
    property Twiddledlibid: string read get_Twiddledlibid write set_Twiddledlibid;
    ///<summary>
    ///  Gets and sets the extended Libid of the reference.
    ///</summary>
    ///<remarks>
    ///  Only for control reference.
    ///</remarks>
    property ExtendedLibid: string read get_ExtendedLibid write set_ExtendedLibid;
    ///<summary>
    ///  Gets and sets the referenced VBA project's identifier with an relative path.
    ///</summary>
    ///<remarks>
    ///  Only for project reference.
    ///</remarks>
    property RelativeLibid: string read get_RelativeLibid write set_RelativeLibid;
  end;

  TDNVbaProjectReference = class(TDNGenericImport<DNVbaProjectReferenceClass, DNVbaProjectReference>) end;

  //-------------namespace: Aspose.Cells----------------
  DNVerticalPageBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EE80D0B-5222-57A9-AA8E-258B65ABDC36}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a vertical page break.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Add a pagebreak at G5
  ///  excel.Worksheets[0].HorizontalPageBreaks.Add("G5");
  ///  excel.Worksheets[0].VerticalPageBreaks.Add("G5");
  ///  [VB]
  ///  'Add a pagebreak at G5
  ///  excel.Worksheets(0).HorizontalPageBreaks.Add("G5")
  ///  excel.Worksheets(0).VerticalPageBreaks.Add("G5")
  ///</code></example>
  [DNTypeName('Aspose.Cells.VerticalPageBreak')]
  DNVerticalPageBreak = interface(DDN.mscorlib.DNObject)
  ['{9E396BAF-444B-3B9D-BF76-B01087BACDC4}']
  { getters & setters } 

    function get_StartRow: Int32;
    function get_EndRow: Int32;
    function get_Column: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the start row index of the vertical page break.
    ///</summary>
    property StartRow: Int32 read get_StartRow;
    ///<summary>
    ///  Gets the end row index of the vertical page break.
    ///</summary>
    property EndRow: Int32 read get_EndRow;
    ///<summary>
    ///  Gets the column index of the vertical page break.
    ///</summary>
    property Column: Int32 read get_Column;
  end;

  TDNVerticalPageBreak = class(TDNGenericImport<DNVerticalPageBreakClass, DNVerticalPageBreak>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWarningInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F77C6D5-3E35-52A2-8053-B9B77AB9D39B}']
  end;

  ///<summary>
  ///  Warning info
  ///</summary>
  [DNTypeName('Aspose.Cells.WarningInfo')]
  DNWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{8B52C3AC-5350-3A48-AD9C-DD2A4C594A74}']
  { getters & setters } 

    function get_WarningType: DNWarningType;
    function get_Description: string;
    function get_ErrorObject: DDN.mscorlib.DNObject;
    function get_CorrectedObject: DDN.mscorlib.DNObject;
    procedure set_CorrectedObject(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get warning type.
    ///</summary>
    property WarningType: DNWarningType read get_WarningType;
    ///<summary>
    ///  Get description of warning info.
    ///</summary>
    property Description: string read get_Description;
    ///<summary>
    ///  The error object.
    ///</summary>
    property ErrorObject: DDN.mscorlib.DNObject read get_ErrorObject;
    ///<summary>
    ///  Gets and sets the corrected object.
    ///</summary>
    property CorrectedObject: DDN.mscorlib.DNObject read get_CorrectedObject write set_CorrectedObject;
  end;

  TDNWarningInfo = class(TDNGenericImport<DNWarningInfoClass, DNWarningInfo>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{385B4CDD-F4D0-5E2A-B1C4-0FBD7DBBCFF2}']
  end;

  ///<summary>
  ///  Represents an Office Add-in instance.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtension')]
  DNWebExtension = interface(DDN.mscorlib.DNObject)
  ['{C5E80E25-5433-3F1D-8849-458D9797ADEE}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_IsFrozen: Boolean;
    procedure set_IsFrozen(value: Boolean);
    function get_Reference: DNWebExtensionReference;
    function get_AlterReferences: DNWebExtensionReferenceCollection;
    function get_Properties: DNWebExtensionPropertyCollection;
    function get_Bindings: DNWebExtensionBindingCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the uniquely identifies the Office Add-in instance in the current document.
    ///</summary>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Indicates whether the user can interact with the Office Add-in or not.
    ///</summary>
    property IsFrozen: Boolean read get_IsFrozen write set_IsFrozen;
    ///<summary>
    ///  Get the primary reference to an Office Add-in.
    ///</summary>
    property Reference: DNWebExtensionReference read get_Reference;
    ///<summary>
    ///  Gets a list of alter references.
    ///</summary>
    property AlterReferences: DNWebExtensionReferenceCollection read get_AlterReferences;
    ///<summary>
    ///  Gets all properties of web extension.
    ///</summary>
    property Properties: DNWebExtensionPropertyCollection read get_Properties;
    ///<summary>
    ///  Gets all bindings relationship between an Office Add-in and the data in the document.
    ///</summary>
    property Bindings: DNWebExtensionBindingCollection read get_Bindings;
  end;

  TDNWebExtension = class(TDNGenericImport<DNWebExtensionClass, DNWebExtension>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10E85D58-43C9-5270-87F2-1140B7B9197B}']
  { constructors } 

    {class} function init: DNWebExtensionBinding;

  end;

  ///<summary>
  ///  Represents a binding relationship between an Office Add-in and the data in the document.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionBinding')]
  DNWebExtensionBinding = interface(DDN.mscorlib.DNObject)
  ['{12BA672B-D689-3002-8BE0-DA5D5723DD3C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Appref: string;
    procedure set_Appref(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the binding identifier.
    ///</summary>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Gets and sets the binding type.
    ///</summary>
    property &Type: string read get_Type write set_Type;
    ///<summary>
    ///  Gets and sets the binding key used to map the binding entry in this list with the bound data in the document.
    ///</summary>
    property Appref: string read get_Appref write set_Appref;
  end;

  TDNWebExtensionBinding = class(TDNGenericImport<DNWebExtensionBindingClass, DNWebExtensionBinding>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E45B52A-6659-5D11-BB87-974868D801E1}']
  end;

  ///<summary>
  ///  Represents an Office Add-in custom property.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionProperty')]
  DNWebExtensionProperty = interface(DDN.mscorlib.DNObject)
  ['{8E4A7FA2-929E-38D3-9858-D47E93A842CD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and set a custom property name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets and sets a custom property value.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNWebExtensionProperty = class(TDNGenericImport<DNWebExtensionPropertyClass, DNWebExtensionProperty>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89582AF8-9890-5188-9300-273C027F16A8}']
  end;

  ///<summary>
  ///  Represents identify the provider location and version of the extension.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionReference')]
  DNWebExtensionReference = interface(DDN.mscorlib.DNObject)
  ['{E6414F67-B28A-3887-989C-50AA99D53A52}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_StoreName: string;
    procedure set_StoreName(value: string);
    function get_StoreType: DNWebExtensionStoreType;
    procedure set_StoreType(value: DNWebExtensionStoreType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the identifier associated with the Office Add-in within a catalog provider.
    ///  The identifier MUST be unique within a catalog provider.
    ///</summary>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Gets and sets the version.
    ///</summary>
    property Version: string read get_Version write set_Version;
    ///<summary>
    ///  Gets and sets the instance of the marketplace where the Office Add-in is stored. .
    ///</summary>
    property StoreName: string read get_StoreName write set_StoreName;
    ///<summary>
    ///  Gets and sets the type of marketplace that the store attribute identifies.
    ///</summary>
    property StoreType: DNWebExtensionStoreType read get_StoreType write set_StoreType;
  end;

  TDNWebExtensionReference = class(TDNGenericImport<DNWebExtensionReferenceClass, DNWebExtensionReference>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionTaskPaneClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5473D0B9-CF57-5ACB-A60D-846E8640497A}']
  end;

  ///<summary>
  ///  Represents a persisted taskpane object.
  ///</summary>
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionTaskPane')]
  DNWebExtensionTaskPane = interface(DDN.mscorlib.DNObject)
  ['{1D95237B-ECC4-392E-ADA5-236D0BD65482}']
  { getters & setters } 

    function get_WebExtension: DNWebExtension;
    procedure set_WebExtension(value: DNWebExtension);
    function get_DockState: string;
    procedure set_DockState(value: string);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Row: Int32;
    procedure set_Row(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the web extension part associated with the taskpane instance
    ///</summary>
    property WebExtension: DNWebExtension read get_WebExtension write set_WebExtension;
    ///<summary>
    ///  Gets and sets the last-docked location of this taskpane object.
    ///</summary>
    property DockState: string read get_DockState write set_DockState;
    ///<summary>
    ///  Indicates whether the Task Pane shows as visible by default when the document opens.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Indicates whether the taskpane is locked to the document in the UI and cannot be closed by the user.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets and sets the default width value for this taskpane instance.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets and sets the index, enumerating from the outside to the inside, of this taskpane among other persisted taskpanes docked in the same default location.
    ///</summary>
    property Row: Int32 read get_Row write set_Row;
  end;

  TDNWebExtensionTaskPane = class(TDNGenericImport<DNWebExtensionTaskPaneClass, DNWebExtensionTaskPane>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorkbookClass = interface(DNObjectClass)
  ['{57237464-147F-5D00-92A0-386F9A7AE337}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Workbook" />
    ///  class.
    ///</summary>
    ///<example>
    ///  The following code shows how to use the Workbook constructor to create and initialize a new instance of the class.
    ///<code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  [Visual Basic]
    ///  Dim workbook as Workbook = new Workbook()
    ///</code></example><remarks>
    ///  The default file format type is Excel97To2003.If want create other format file type, please call Workbook(FileFormatType fileFormatType).
    ///</remarks>
    {class} function init: DNWorkbook; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Workbook" />
    ///  class.
    ///</summary>
    ///  <param name="fileFormatType">
    ///  The new file format.
    ///</param>
    ///<example>
    ///  The following code shows how to use the Workbook constructor to create and initialize a new instance of the class.
    ///<code>
    ///  [C#]
    ///  Workbook workbook = new Workbook(FileFormatType.Excel2007Xlsx);
    ///  [Visual Basic]
    ///  Dim workbook as Workbook = new Workbook(FileFormatType.Excel2007Xlsx)
    ///</code></example><remarks>
    ///  The default file format type is Excel97To2003.
    ///</remarks>
    {class} function init(fileFormatType: DNFileFormatType): DNWorkbook; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Workbook" />
    ///  class and open a file.
    ///</summary>
    ///  <param name="file">The file name.</param>
    {class} function init(&file: string): DNWorkbook; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Workbook" />
    ///  class and open a stream.
    ///</summary>
    ///  <param name="stream">The stream.</param>
    {class} function init(stream: DDN.mscorlib.DNStream): DNWorkbook; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Workbook" />
    ///  class and open a file.
    ///</summary>
    ///  <param name="file">The file name.</param>
    ///  <param name="loadOptions">The load options</param>
    {class} function init(&file: string; loadOptions: DNLoadOptions): DNWorkbook; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.Workbook" />
    ///  class and open stream.
    ///</summary>
    ///  <param name="stream">The stream.</param>
    ///  <param name="loadOptions">The load options</param>
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNWorkbook; overload;

  end;

  ///<summary>
  ///  Represents a root object to create an Excel spreadsheet.
  ///</summary>
  ///<remarks>The Workbook class denotes an Excel spreadsheet. Each spreadsheet can contain multiple worksheets.
  ///  The basic feature of the class is to open and save native excel files.
  ///  The class has some advanced features like copying data from other Workbooks, combining two Workbooks and protecting the Excel spreadsheet.
  ///</remarks>
  ///<example>
  ///  The following example creates a Workbook, opens a file named designer.xls in it and makes the horizontal and vertical scroll bars invisible for the Workbook. It then replaces two string values with an Integer value and string value respectively within the spreadsheet and finally sends the updated file to the client browser.
  ///<code>
  ///  [C#]
  ///  //Open a designer file
  ///  string designerFile = MapPath("Designer") + "\\designer.xls";
  ///  Workbook workbook = new Workbook(designerFile);
  ///  //Set scroll bars
  ///  workbook.Settings.IsHScrollBarVisible = false;
  ///  workbook.Settings.IsVScrollBarVisible = false;
  ///  //Replace the placeholder string with new values
  ///  int newInt = 100;
  ///  workbook.Replace("OldInt", newInt);
  ///  string newString = "Hello!";
  ///  workbook.Replace("OldString", newString);
  ///  XlsSaveOptions saveOptions = new XlsSaveOptions();
  ///  workbook.Save(Response, "result.xls", ContentDisposition.Inline, saveOptions);
  ///  [Visual Basic]
  ///  'Open a designer file
  ///  Dim designerFile as String = MapPath("Designer") + "\designer.xls"
  ///  Dim workbook as Workbook = new Workbook(designerFile)
  ///  'Set scroll bars
  ///  workbook.IsHScrollBarVisible = False
  ///  workbook.IsVScrollBarVisible = False
  ///  'Replace the placeholder string with new values
  ///  Dim newInt as Integer = 100
  ///  workbook.Replace("OldInt", newInt)
  ///  Dim newString as String = "Hello!"
  ///  workbook.Replace("OldString", newString)
  ///  Dim saveOptions as XlsSaveOptions  = new XlsSaveOptions()
  ///  workbook.Save(Response, "result.xls", ContentDisposition.Inline, saveOptions)
  ///</code></example>
  [DNTypeName('Aspose.Cells.Workbook')]
  DNWorkbook = interface(DDN.mscorlib.DNIDisposable)
  ['{E2CCC9D8-7619-36D0-90CD-F467D879BCC7}']
  { getters & setters } 

    function get_Settings: DNWorkbookSettings;
    function get_Worksheets: DNWorksheetCollection;
    function get_IsLicensed: Boolean;
    function get_Colors: TArray<DDN.System.Drawing.DNColor>;
    function get_CountOfStylesInPool: Int32;
    function get_DefaultStyle: DNStyle;
    procedure set_DefaultStyle(value: DNStyle);
    function get_IsDigitallySigned: Boolean;
    function get_IsWorkbookProtectedWithPassword: Boolean;
    function get_VbaProject: DNVbaProject;
    function get_HasMacro: Boolean;
    function get_HasRevisions: Boolean;
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_DataSorter: DNDataSorter;
    function get_Theme: string;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection;
    function get_CustomDocumentProperties: DNCustomDocumentPropertyCollection;
    function get_FileFormat: DNFileFormatType;
    procedure set_FileFormat(value: DNFileFormatType);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_ContentTypeProperties: DNContentTypePropertyCollection;
    function get_CustomXmlParts: DNCustomXmlPartCollection;
    function get_DataMashup: DNDataMashup;
    function get_RibbonXml: string;
    procedure set_RibbonXml(value: string);
    function get_AbsolutePath: string;
    procedure set_AbsolutePath(value: string);
    function get_DataConnections: DNExternalConnectionCollection;

  { methods } 

    ///<summary>
    ///  Performs application-defined tasks associated with freeing, releasing, or
    ///  resetting unmanaged resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Parses all formulas which have not been parsed when they were loaded from template file or set to a cell.
    ///</summary>
    ///  <param name="ignoreError">whether ignore error for invalid formula.
    ///  For one invalid formula, if ignore error then this formula will be ignored
    ///  and the process will continue to parse other formulas, otherwise exception will be thrown.</param>
    procedure ParseFormulas(ignoreError: Boolean);
    ///<summary>
    ///  Starts the session that uses caches to access data.
    ///</summary>
    ///  <param name="opts">options of data access</param>
    ///<remarks>If the cache of specified data access requires some data models in worksheet to be "read-only",
    ///  then corresponding data models in every worksheet in this workbook will be taken as "read-only"
    ///  and user should not change any of them.
    ///<br></br>
    ///  After finishing the access to the data, <see cref="M:Aspose.Cells.Workbook.CloseAccessCache(Aspose.Cells.AccessCacheOptions)" />
    ///  should
    ///  be invoked with same options to clear all caches and recover normal access mode.
    ///<br></br></remarks>
    procedure StartAccessCache(opts: DNAccessCacheOptions);
    ///<summary>
    ///  Closes the session that uses caches to access data.
    ///</summary>
    ///  <param name="opts">options of data access</param>
    procedure CloseAccessCache(opts: DNAccessCacheOptions);
    ///<summary>
    ///  Saves the workbook to the disk.
    ///</summary>
    ///  <param name="fileName">The file name.</param>
    ///  <param name="saveFormat">The save format type.</param>
    procedure Save(fileName: string; saveFormat: DNSaveFormat); overload;
    ///<summary>
    ///  Save the workbook to the disk.
    ///</summary>
    ///  <param name="fileName"></param>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Saves the workbook to the disk.
    ///</summary>
    ///  <param name="fileName">The file name.</param>
    ///  <param name="saveOptions">The save options.</param>
    procedure Save(fileName: string; saveOptions: DNSaveOptions); overload;
    ///<summary>
    ///  Saves the workbook to the stream.
    ///</summary>
    ///  <param name="stream">The file stream.</param>
    ///  <param name="saveFormat">The save file format type.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; saveFormat: DNSaveFormat); overload;
    ///<summary>
    ///  Saves the workbook to the stream.
    ///</summary>
    ///  <param name="stream">The file stream.</param>
    ///  <param name="saveOptions">The save options.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions); overload;
    ///<summary>
    ///  Saves Excel file to a MemoryStream object and returns it.
    ///</summary>
    ///<returns>MemoryStream object which contains an Excel file.</returns>
    ///<remarks>
    ///  This method provides same function as Save method and only save the workbook as Excel97-2003 xls file.
    ///  It's mainly for calling from COM clients.</remarks>
    function SaveToStream: DDN.mscorlib.DNMemoryStream;
    ///<summary>
    ///  Creates the result spreadsheet and transfer it to the client then open it in the browser or MS Workbook.
    ///</summary>
    ///  <param name="response">Response object to return the spreadsheet to client.</param>
    ///  <param name="fileName">The name of created file.</param>
    ///  <param name="contentDisposition">The content disposition type.</param>
    ///  <param name="saveOptions">The save options.</param>
    procedure Save(response: DDN.System.Web.DNHttpResponse; fileName: string; contentDisposition: DNContentDisposition; saveOptions: DNSaveOptions); overload;
    ///<summary>
    ///  Creates the result spreadsheet and transfer it to the client then open it in the browser or MS Workbook.
    ///</summary>
    ///  <param name="response">Response object to return the spreadsheet to client.</param>
    ///  <param name="fileName">The name of created file.</param>
    ///  <param name="contentDisposition">The content disposition type.</param>
    ///  <param name="saveOptions">The save options.</param>
    ///  <param name="enableHttpCompression">whether http compression is to be used</param>
    procedure Save(response: DDN.System.Web.DNHttpResponse; fileName: string; contentDisposition: DNContentDisposition; saveOptions: DNSaveOptions; enableHttpCompression: Boolean); overload;
    ///<summary>
    ///  Remove all unused styles.
    ///</summary>
    procedure RemoveUnusedStyles;
    ///<summary>
    ///  Creates a new style.
    ///</summary>
    ///<returns>Returns a style object.</returns>
    function CreateStyle: DNStyle;
    ///<summary>
    ///  Creates built-in style by given type.
    ///</summary>
    ///  <param name="type"></param>
    ///<returns>style object</returns>
    function CreateBuiltinStyle(&type: DNBuiltinStyleType): DNStyle;
    ///<summary>
    ///  Creates a <see cref="T:Aspose.Cells.CellsColor" />
    ///  object.
    ///</summary>
    ///<returns>Returns a <see cref="T:Aspose.Cells.CellsColor" />
    ///  object.</returns>
    function CreateCellsColor: DNCellsColor;
    ///<summary>
    ///  Replaces a cell's value with a new string.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  ......
    ///  workbook.Replace("AnOldValue", "NewValue");
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  ........
    ///  workbook.Replace("AnOldValue", "NewValue")
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValue">String value to replace</param>
    function Replace(placeHolder: string; newValue: string): Int32; overload;
    ///<summary>
    ///  Replaces a cell's value with a new integer.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  ......
    ///  int newValue = 100;
    ///  workbook.Replace("AnOldValue", newValue);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  .........
    ///  Dim NewValue As Integer =  100
    ///  workbook.Replace("AnOldValue", NewValue)
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValue">Integer value to replace</param>
    function Replace(placeHolder: string; newValue: Int32): Int32; overload;
    ///<summary>
    ///  Replaces a cell's value with a new double.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  ......
    ///  double newValue = 100.0;
    ///  workbook.Replace("AnOldValue", newValue);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  .........
    ///  Dim NewValue As Double =  100.0
    ///  workbook.Replace("AnOldValue", NewValue)
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValue">Double value to replace</param>
    function Replace(placeHolder: string; newValue: Double): Int32; overload;
    ///<summary>
    ///  Replaces a cell's value with a new string array.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  ......
    ///  string[] newValues = new string[]{"Tom", "Alice", "Jerry"};
    ///  workbook.Replace("AnOldValue", newValues, true);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  .............
    ///  Dim NewValues() As String =  New String() {"Tom", "Alice", "Jerry"}
    ///  workbook.Replace("AnOldValue", NewValues, True)
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValues">String array to replace</param>
    ///  <param name="isVertical">True - Vertical, False - Horizontal</param>
    function Replace(placeHolder: string; newValues: TArray<string>; isVertical: Boolean): Int32; overload;
    ///<summary>
    ///  Replaces cells' values with an integer array.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  ......
    ///  int[] newValues = new int[]{1, 2, 3};
    ///  workbook.Replace("AnOldValue", newValues, true);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  ...........
    ///  Dim NewValues() As Integer =  New Integer() {1, 2, 3}
    ///  workbook.Replace("AnOldValue", NewValues, True)
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValues">Integer array to replace</param>
    ///  <param name="isVertical">True - Vertical, False - Horizontal</param>
    function Replace(placeHolder: string; newValues: TArray<Int32>; isVertical: Boolean): Int32; overload;
    ///<summary>
    ///  Replaces cells' values with a double array.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  ......
    ///  double[] newValues = new double[]{1.23, 2.56, 3.14159};
    ///  workbook.Replace("AnOldValue", newValues, true);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  ...........
    ///  Dim NewValues() As Double =  New Double() {1.23, 2.56, 3.14159}
    ///  workbook.Replace("AnOldValue", NewValues, True)
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValues">Double array to replace</param>
    ///  <param name="isVertical">True - Vertical, False - Horizontal</param>
    function Replace(placeHolder: string; newValues: TArray<Double>; isVertical: Boolean): Int32; overload;
    ///<summary>
    ///  Replaces cells' values with data from a <see cref="T:System.Data.DataTable" />
    ///  .
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  DataTable myDataTable = new DataTable("Customers");
    ///  // Adds data to myDataTable
    ///  ........
    ///  workbook.Replace("AnOldValue", myDataTable);
    ///  [Visual Basic]
    ///  Dim workbook As Workbook =  New Workbook()
    ///  Dim myDataTable As DataTable =  New DataTable("Customers")
    ///  ' Adds data to myDataTable
    ///  .............
    ///  workbook.Replace("AnOldValue", myDataTable)
    ///</code></example><param name="placeHolder">Cell placeholder</param>
    ///  <param name="insertTable">DataTable to replace</param>
    function Replace(placeHolder: string; insertTable: DDN.System.Data.DNDataTable): Int32; overload;
    ///<summary>
    ///  Replaces cells' values with new data.
    ///</summary>
    ///  <param name="boolValue">The boolean value to be replaced.</param>
    ///  <param name="newValue">New value. Can be string, integer, double or DateTime value.</param>
    function Replace(boolValue: Boolean; newValue: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  Replaces cells' values with new data.
    ///</summary>
    ///  <param name="intValue">The integer value to be replaced.</param>
    ///  <param name="newValue">New value. Can be string, integer, double or DateTime value.</param>
    function Replace(intValue: Int32; newValue: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  Replaces a cell's value with a new string.
    ///</summary>
    ///  <param name="placeHolder">Cell placeholder</param>
    ///  <param name="newValue">String value to replace</param>
    ///  <param name="options"> The replace options</param>
    function Replace(placeHolder: string; newValue: string; options: DNReplaceOptions): Int32; overload;
    ///<summary>
    ///  Copies data from a source Workbook object.
    ///</summary>
    ///  <param name="source">Source Workbook object.</param>
    ///  <param name="copyOptions"></param>
    procedure Copy(source: DNWorkbook; copyOptions: DNCopyOptions); overload;
    ///<summary>
    ///  Copies data from a source Workbook object.
    ///</summary>
    ///  <param name="source">Source Workbook object.</param>
    procedure Copy(source: DNWorkbook); overload;
    ///<summary>
    ///  Combines another Workbook object.
    ///</summary>
    ///  <param name="secondWorkbook">Another Workbook object.</param>
    ///<remarks>Currently, only cell data and cell style of the second Workbook object can be combined. Images, charts and other drawing objects are not supported.
    ///</remarks>
    procedure Combine(secondWorkbook: DNWorkbook);
    ///<summary>
    ///  Gets the style in the style pool.
    ///  All styles in the workbook will be gathered into a pool.
    ///  There is only a simple reference index in the cells.
    ///</summary>
    ///  <param name="index">The index.</param>
    ///<returns>
    ///  The style in the pool corresponds to given index, may be null.
    ///</returns>
    ///<remarks>
    ///  If the returned style is changed, the style of all cells(which refers to this style) will be changed.
    ///</remarks>
    function GetStyleInPool(index: Int32): DNStyle;
    ///<summary>
    ///  Gets all fonts in the style pool.
    ///</summary>
    function GetFonts: TArray<DNFont>;
    ///<summary>
    ///  Gets the named style in the style pool.
    ///</summary>
    ///  <param name="name">name of the style</param>
    ///<returns>named style, maybe null.</returns>
    function GetNamedStyle(name: string): DNStyle;
    ///<summary>
    ///  Changes the palette for the spreadsheet in the specified index.
    ///</summary>
    ///  <param name="color">Color structure.</param>
    ///  <param name="index">Palette index, 0 - 55.</param>
    ///<remarks>The palette has 56 entries, each represented by an RGB value.
    ///  If you set a color which is not in the palette, it will not take effect.
    ///  So if you want to set a custom color, please change the palette at first.
    ///  <p>The following is the standard color palette.</p>
    ///  <table class="dtTABLE" cellspacing="0"><tr><td width="25%"><font color="gray"><b>Color</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="25%"><font color="gray"><b>Red</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="25%"><font color="gray"><b>Green</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="25%"><font color="gray"><b>Blue</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Black¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">White¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Red¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Lime¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Blue¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Yellow¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Magenta¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Cyan¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Maroon¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Green¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Navy¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Olive¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Purple¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Teal¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Silver¡¡</td>
    ///      <td width="25%">192¡¡</td>
    ///      <td width="25%">192¡¡</td>
    ///      <td width="25%">192¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Gray¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color17¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color18¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color19¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color20¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color21¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color22¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color23¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color24¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color25¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color26¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color27¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color28¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color29¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color30¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color31¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///      <td width="25%">128¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color32¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color33¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color34¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color35¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color36¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color37¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color38¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color39¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color40¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color41¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color42¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color43¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color44¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">204¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color45¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color46¡¡</td>
    ///      <td width="25%">255¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color47¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color48¡¡</td>
    ///      <td width="25%">150¡¡</td>
    ///      <td width="25%">150¡¡</td>
    ///      <td width="25%">150¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color49¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color50¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color51¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color52¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color53¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">0¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color54¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">102¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color55¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">153¡¡</td>
    ///</tr>
    ///    <tr><td width="25%">Color56¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///      <td width="25%">51¡¡</td>
    ///</tr>
    ///</table>
    ///</remarks>
    procedure ChangePalette(color: DDN.System.Drawing.DNColor; index: Int32);
    ///<summary>
    ///  Checks if a color is in the palette for the spreadsheet.
    ///</summary>
    ///  <param name="color">Color structure.</param>
    ///<returns>Returns true if this color is in the palette. Otherwise, returns false</returns>
    function IsColorInPalette(color: DDN.System.Drawing.DNColor): Boolean;
    ///<summary>
    ///  Calculates the result of formulas.
    ///</summary>
    ///<remarks>
    ///  For all supported formulas, please see the list at https://docs.aspose.com/display/cellsnet/Supported+Formula+Functions
    ///</remarks>
    procedure CalculateFormula; overload;
    ///<summary>
    ///  Calculates the result of formulas.
    ///</summary>
    ///  <param name="ignoreError">Indicates if hide the error in calculating formulas. The error may be unsupported function, external links, etc.</param>
    procedure CalculateFormula(ignoreError: Boolean); overload;
    ///<summary>
    ///  Calculates the result of formulas.
    ///</summary>
    ///  <param name="ignoreError">Indicates if hide the error in calculating formulas. The error may be unsupported function, external links, etc.</param>
    ///  <param name="customFunction">The custom formula calculation functions to extend the calculation engine.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use CalculateFormula(CalculationOptions) method.
    ///  This method will be removed 12 months later since August 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure CalculateFormula(ignoreError: Boolean; customFunction: DNICustomFunction); overload;
    ///<summary>
    ///  Calculating formulas in this workbook.
    ///</summary>
    ///  <param name="options">Options for calculation</param>
    procedure CalculateFormula(options: DNCalculationOptions); overload;
    ///<summary>
    ///  Refreshes dynamic array formulas(spill into new range of neighboring cells according to current data)
    ///</summary>
    ///  <param name="calculate">Whether calculates and update cell values for those dynamic array formulas when
    ///  the spilled range changes.</param>
    procedure RefreshDynamicArrayFormulas(calculate: Boolean);
    ///<summary>
    ///  Find best matching Color in current palette.
    ///</summary>
    ///  <param name="rawColor">Raw color.</param>
    ///<returns>Best matching color.</returns>
    function GetMatchingColor(rawColor: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNColor;
    ///<summary>
    ///  Set Encryption Options.
    ///</summary>
    ///  <param name="encryptionType">The encryption type.</param>
    ///  <param name="keyLength">The key length.</param>
    procedure SetEncryptionOptions(encryptionType: DNEncryptionType; keyLength: Int32);
    ///<summary>
    ///  Protects a workbook.
    ///</summary>
    ///  <param name="protectionType">Protection type.</param>
    ///  <param name="password">Password to protect the workbook.</param>
    procedure Protect(protectionType: DNProtectionType; password: string);
    ///<summary>
    ///  Protects a shared workbook.
    ///</summary>
    ///  <param name="password">Password to protect the workbook.</param>
    procedure ProtectSharedWorkbook(password: string);
    ///<summary>
    ///  Unprotects a workbook.
    ///</summary>
    ///  <param name="password">Password to unprotect the workbook.</param>
    procedure Unprotect(password: string);
    ///<summary>
    ///  Unprotects a shared workbook.
    ///</summary>
    ///  <param name="password">Password to unprotect the workbook.</param>
    procedure UnprotectSharedWorkbook(password: string);
    ///<summary>
    ///  Removes VBA/macro from this spreadsheet.
    ///</summary>
    procedure RemoveMacro;
    ///<summary>
    ///  Removes digital signature from this spreadsheet.
    ///</summary>
    procedure RemoveDigitalSignature;
    ///<summary>
    ///  Accepts all tracked changes in the workbook.
    ///</summary>
    procedure AcceptAllRevisions;
    ///<summary>
    ///  Removes all external links in the workbook.
    ///</summary>
    procedure RemoveExternalLinks;
    ///<summary>
    ///  Gets theme color.
    ///</summary>
    ///  <param name="type">The theme color type.</param>
    ///<returns>The theme color.</returns>
    function GetThemeColor(&type: DNThemeColorType): DDN.System.Drawing.DNColor;
    ///<summary>
    ///  Sets the theme color
    ///</summary>
    ///  <param name="type">The theme color type.</param>
    ///  <param name="color">the theme color</param>
    procedure SetThemeColor(&type: DNThemeColorType; color: DDN.System.Drawing.DNColor);
    ///<summary>
    ///  Customs the theme.
    ///</summary>
    ///  <param name="themeName">The theme name</param>
    ///  <param name="colors">The theme colors</param>
    ///<remarks>
    ///  The length of colors should be 12.
    ///  <table class="dtTABLE" cellspacing="0"><tr><td width="50%"><font color="gray"><b>Array index</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Theme type</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>0</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Backgournd1</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>1</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Text1</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>2</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Backgournd2</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>3</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Text2</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>4</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Accent1</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>5</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Accent2</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>6</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Accent3</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>7</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Accent4</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>8</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Accent5</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>9</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Accent6</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>10</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Hyperlink</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///    <tr><td width="50%"><font color="gray"><b>11</b>
    ///</font>
    ///  ¡¡</td>
    ///      <td width="50%"><font color="gray"><b>Followed Hyperlink</b>
    ///</font>
    ///  ¡¡</td>
    ///</tr>
    ///</table>
    ///</remarks>
    procedure CustomTheme(themeName: string; colors: TArray<DDN.System.Drawing.DNColor>);
    ///<summary>
    ///  Copies the theme from another workbook.
    ///</summary>
    ///  <param name="source">Source workbook.</param>
    procedure CopyTheme(source: DNWorkbook);
    ///<summary>
    ///  Indicates whether this workbook contains external links to other data sources.
    ///</summary>
    ///<returns>Whether this workbook contains external links to other data sources.</returns>
    function HasExernalLinks: Boolean;
    ///<summary>
    ///  If this workbook contains external links to other data source,
    ///  Aspose.Cells will attempt to retrieve the latest data.
    ///</summary>
    ///  <param name="externalWorkbooks">
    ///  External workbooks are referenced by this workbook.
    ///  If it's null, we will directly open the external linked files..
    ///  If it's not null,
    ///  we will check whether the external link in the array first;
    ///  if not, we will open the external linked files again.
    ///</param>
    ///<remarks>
    ///  If the method is not called before calculating formulas,
    ///  Aspose.Cells will use the previous information(cached in the file);
    ///  Please set CellsHelper.StartupPath,CellsHelper.AltStartPath,CellsHelper.LibraryPath.
    ///  And please set Workbook.FilePath if this workbook is from a stream,
    ///  otherwise Aspose.Cells could not get the external link full path sometimes.
    ///</remarks>
    procedure UpdateLinkedDataSource(externalWorkbooks: TArray<DNWorkbook>);
    ///<summary>
    ///  Imports an xml file into the workbook.
    ///</summary>
    ///  <param name="url">the path of the xml file.</param>
    ///  <param name="sheetName">the destination sheet name .</param>
    ///  <param name="row">the destination row of the xml.</param>
    ///  <param name="col">the destination column of the xml.</param>
    procedure ImportXml(url: string; sheetName: string; row: Int32; col: Int32); overload;
    ///<summary>
    ///  Imports an xml file into the workbook.
    ///</summary>
    ///  <param name="stream">the xml file stream.</param>
    ///  <param name="sheetName">the destination sheet name .</param>
    ///  <param name="row">the destination row of the xml.</param>
    ///  <param name="col">the destination column of the xml.</param>
    procedure ImportXml(stream: DDN.mscorlib.DNStream; sheetName: string; row: Int32; col: Int32); overload;
    ///<summary>
    ///  Export XML data.
    ///</summary>
    ///  <param name="mapName">name of the XML map that need to be exported</param>
    ///  <param name="path">the export path</param>
    procedure ExportXml(mapName: string; path: string); overload;
    ///<summary>
    ///  Export XML data.
    ///</summary>
    ///  <param name="mapName">name of the XML map that need to be exported</param>
    ///  <param name="stream">the export stream</param>
    procedure ExportXml(mapName: string; stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets digital signature to an spreadsheet file (Excel2007 and later).
    ///</summary>
    ///  <param name="digitalSignatureCollection"></param>
    ///<remarks>Only support adding Xmldsig Digital Signature</remarks>
    procedure SetDigitalSignature(digitalSignatureCollection: DNDigitalSignatureCollection);
    ///<summary>
    ///  Adds digital signature to an OOXML spreadsheet file (Excel2007 and later).
    ///</summary>
    ///  <param name="digitalSignatureCollection"></param>
    ///<remarks>Only support adding Xmldsig Digital Signature to an OOXML spreadsheet file</remarks>
    procedure AddDigitalSignature(digitalSignatureCollection: DNDigitalSignatureCollection);
    ///<summary>
    ///  Gets digital signature from file.
    ///</summary>
    function GetDigitalSignature: DNDigitalSignatureCollection;
    ///<summary>
    ///  Removes personal information.
    ///</summary>
    procedure RemovePersonalInformation;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents the workbook settings.
    ///</summary>
    property Settings: DNWorkbookSettings read get_Settings;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.WorksheetCollection" />
    ///  collection in the spreadsheet.
    ///</summary>
    ///<returns><see cref="T:Aspose.Cells.WorksheetCollection" />
    ///  collection</returns>
    property Worksheets: DNWorksheetCollection read get_Worksheets;
    ///<summary>
    ///  Indicates whether license is set.
    ///</summary>
    property IsLicensed: Boolean read get_IsLicensed;
    ///<summary>
    ///  Returns colors in the palette for the spreadsheet.
    ///</summary>
    ///<remarks>The palette has 56 entries, each represented by an RGB value.</remarks>
    property Colors: TArray<DDN.System.Drawing.DNColor> read get_Colors;
    ///<summary>
    ///  Gets number of the styles in the style pool.
    ///</summary>
    property CountOfStylesInPool: Int32 read get_CountOfStylesInPool;
    ///<summary>
    ///  Gets or sets the default <see cref="T:Aspose.Cells.Style" />
    ///  object of the workbook.
    ///</summary>
    ///<remarks>
    ///  The DefaultStyle property is useful to implement a Style for the whole Workbook.
    ///</remarks>
    ///<example>
    ///  The following code creates and instantiates a new Workbook and sets a default <see cref="T:Aspose.Cells.Style" />
    ///  to it.
    ///<code>
    ///  [C#]
    ///  Workbook workbook = new Workbook();
    ///  Style defaultStyle = workbook.DefaultStyle;
    ///  defaultStyle.Font.Name = "Tahoma";
    ///  workbook.DefaultStyle = defaultStyle;
    ///  [Visual Basic]
    ///  Dim workbook as Workbook = new Workbook()
    ///  Dim defaultStyle as Style = workbook.DefaultStyle
    ///  defaultStyle.Font.Name = "Tahoma"
    ///  workbook.DefaultStyle = defaultStyle
    ///</code></example>
    property DefaultStyle: DNStyle read get_DefaultStyle write set_DefaultStyle;
    ///<summary>
    ///  Indicates if this spreadsheet is digitally signed.
    ///</summary>
    property IsDigitallySigned: Boolean read get_IsDigitallySigned;
    ///<summary>
    ///  Indicates whether structure or window is protected with password.
    ///</summary>
    property IsWorkbookProtectedWithPassword: Boolean read get_IsWorkbookProtectedWithPassword;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Workbook.VbaProject" />
    ///  in a spreadsheet.
    ///</summary>
    property VbaProject: DNVbaProject read get_VbaProject;
    ///<summary>
    ///  Indicates if this spreadsheet contains macro/VBA.
    ///</summary>
    property HasMacro: Boolean read get_HasMacro;
    ///<summary>
    ///  Gets if the workbook has any tracked changes
    ///</summary>
    property HasRevisions: Boolean read get_HasRevisions;
    ///<summary>
    ///  Gets and sets the current file name.
    ///</summary>
    ///<remarks>
    ///  If the file is opened by stream and there are some external formula references,
    ///  please set the file name.
    ///</remarks>
    property FileName: string read get_FileName write set_FileName;
    ///<summary>
    ///  Gets a DataSorter object to sort data.
    ///</summary>
    property DataSorter: DNDataSorter read get_DataSorter;
    ///<summary>
    ///  Gets the theme name.
    ///</summary>
    property Theme: string read get_Theme;
    ///<summary>
    ///  Returns a DocumentProperties collection that represents all the built-in document properties of the spreadsheet.
    ///</summary>
    ///<remarks>A new property cannot be added to built-in document properties list. You can only get a built-in property and change its value.
    ///  The following is the built-in properties name list:
    ///  <p>Title</p>
    ///  <p>Subject</p>
    ///  <p>Author</p>
    ///  <p>Keywords</p>
    ///  <p>Comments</p>
    ///  <p>Template</p>
    ///  <p>Last Author</p>
    ///  <p>Revision Number</p>
    ///  <p>Application Name</p>
    ///  <p>Last Print Date</p>
    ///  <p>Creation Date</p>
    ///  <p>Last Save Time</p>
    ///  <p>Total Editing Time</p>
    ///  <p>Number of Pages</p>
    ///  <p>Number of Words</p>
    ///  <p>Number of Characters</p>
    ///  <p>Security</p>
    ///  <p>Category</p>
    ///  <p>Format</p>
    ///  <p>Manager</p>
    ///  <p>Company</p>
    ///  <p>Number of Bytes</p>
    ///  <p>Number of Lines</p>
    ///  <p>Number of Paragraphs</p>
    ///  <p>Number of Slides</p>
    ///  <p>Number of Notes</p>
    ///  <p>Number of Hidden Slides</p>
    ///  <p>Number of Multimedia Clips</p>
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  DocumentProperty doc = workbook.BuiltInDocumentProperties["Author"];
    ///  doc.Value = "John Smith";
    ///  [Visual Basic]
    ///  Dim doc as DocumentProperty = workbook.BuiltInDocumentProperties("Author")
    ///  doc.Value = "John Smith"
    ///</code></example>
    property BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection read get_BuiltInDocumentProperties;
    ///<summary>
    ///  Returns a DocumentProperties collection that represents all the custom document properties of the spreadsheet.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  excel.CustomDocumentProperties.Add("Checked by", "Jane");
    ///  [Visual Basic]
    ///  excel.CustomDocumentProperties.Add("Checked by", "Jane")
    ///</code></example>
    property CustomDocumentProperties: DNCustomDocumentPropertyCollection read get_CustomDocumentProperties;
    ///<summary>
    ///  Gets and sets the file format.
    ///</summary>
    property FileFormat: DNFileFormatType read get_FileFormat write set_FileFormat;
    ///<summary>
    ///  Gets and sets the interrupt monitor.
    ///</summary>
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    ///<summary>
    ///  Gets the list of  <see cref="T:Aspose.Cells.Properties.ContentTypeProperty" />
    ///  objects in the workbook.
    ///</summary>
    property ContentTypeProperties: DNContentTypePropertyCollection read get_ContentTypeProperties;
    ///<summary>
    ///  Represents a Custom XML Data Storage Part (custom XML data within a package).
    ///</summary>
    property CustomXmlParts: DNCustomXmlPartCollection read get_CustomXmlParts;
    ///<summary>
    ///  Gets mashup data.
    ///</summary>
    property DataMashup: DNDataMashup read get_DataMashup;
    ///<summary>
    ///  Gets and sets the XML file that defines the Ribbon UI.
    ///</summary>
    property RibbonXml: string read get_RibbonXml write set_RibbonXml;
    ///<summary>
    ///  Gets and sets the absolute path of the file.
    ///</summary>
    ///<remarks>
    ///  Only used for external links.
    ///</remarks>
    property AbsolutePath: string read get_AbsolutePath write set_AbsolutePath;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.ExternalConnections.ExternalConnection" />
    ///  collection.
    ///</summary>
    property DataConnections: DNExternalConnectionCollection read get_DataConnections;
  end;

  TDNWorkbook = class(TDNGenericImport<DNWorkbookClass, DNWorkbook>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorkbookDesignerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C3D2B91-1A05-578E-8DF0-B9F24939F66C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.WorkbookDesigner" />
    ///  class.
    ///</summary>
    {class} function init: DNWorkbookDesigner; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Cells.WorkbookDesigner" />
    ///  class.
    ///</summary>
    ///  <param name="workbook">
    ///  The template workbook file.
    ///</param>
    {class} function init(workbook: DNWorkbook): DNWorkbookDesigner; overload;

  end;

  ///<summary>
  ///  Encapsulates the object that represents a designer spreadsheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Create a connection object, specify the provider info and set the data source.
  ///  OleDbConnection con = new OleDbConnection("provider=microsoft.jet.oledb.4.0;data source=d:\\test\\Northwind.mdb");
  ///  //Open the connection object.
  ///  con.Open();
  ///  //Create a command object and specify the SQL query.
  ///  OleDbCommand cmd = new OleDbCommand("Select * from [Order Details]", con);
  ///  //Create a data adapter object.
  ///  OleDbDataAdapter da = new OleDbDataAdapter();
  ///  //Specify the command.
  ///  da.SelectCommand = cmd;
  ///  //Create a dataset object.
  ///  DataSet ds = new DataSet();
  ///  //Fill the dataset with the table records.
  ///  da.Fill(ds, "Order Details");
  ///  //Create a datatable with respect to dataset table.
  ///  DataTable dt = ds.Tables["Order Details"];
  ///  //Create WorkbookDesigner object.
  ///  WorkbookDesigner wd = new WorkbookDesigner();
  ///  //Open the template file (which contains smart markers).
  ///  wd.Open("D:\\test\\SmartMarker_Designer.xls");
  ///  //Set the datatable as the data source.
  ///  wd.SetDataSource(dt);
  ///  //Process the smart markers to fill the data into the worksheets.
  ///  wd.Process(true);
  ///  //Save the excel file.
  ///  wd.Workbook.Save("D:\\test\\outSmartMarker_Designer.xls");
  ///  [Visual Basic]
  ///  'Create a connection object, specify the provider info and set the data source.
  ///  Dim con As OleDbConnection = New OleDbConnection("provider=microsoft.jet.oledb.4.0;data source=d:\test\Northwind.mdb")
  ///  'Open the connection object.
  ///  con.Open()
  ///  'Create a command object and specify the SQL query.
  ///  Dim cmd As OleDbCommand = New OleDbCommand("Select * from [Order Details]", con)
  ///  'Create a data adapter object.
  ///  Dim da As OleDbDataAdapter = New OleDbDataAdapter()
  ///  'Specify the command.
  ///  da.SelectCommand = cmd
  ///  'Create a dataset object.
  ///  Dim ds As DataSet = New DataSet()
  ///  'Fill the dataset with the table records.
  ///  da.Fill(ds, "Order Details")
  ///  'Create a datatable with respect to dataset table.
  ///  Dim dt As DataTable = ds.Tables("Order Details")
  ///  'Create WorkbookDesigner object.
  ///  Dim wd As WorkbookDesigner = New WorkbookDesigner()
  ///  'Open the template file (which contains smart markers).
  ///  wd.Open("D:\test\SmartMarker_Designer.xls")
  ///  'Set the datatable as the data source.
  ///  wd.SetDataSource(dt)
  ///  'Process the smart markers to fill the data into the worksheets.
  ///  wd.Process(True)
  ///  'Save the excel file.
  ///  wd.Workbook.Save("D:\test\outSmartMarker_Designer.xls")
  ///</code></example>
  [DNTypeName('Aspose.Cells.WorkbookDesigner')]
  DNWorkbookDesigner = interface(DDN.mscorlib.DNObject)
  ['{7A78855D-11B2-339B-902D-0BCFC8050452}']
  { getters & setters } 

    function get_Workbook: DNWorkbook;
    procedure set_Workbook(value: DNWorkbook);
    function get_RepeatFormulasWithSubtotal: Boolean;
    procedure set_RepeatFormulasWithSubtotal(value: Boolean);
    function get_UpdateEmptyStringAsNull: Boolean;
    procedure set_UpdateEmptyStringAsNull(value: Boolean);
    function get_UpdateReference: Boolean;
    procedure set_UpdateReference(value: Boolean);
    function get_CalculateFormula: Boolean;
    procedure set_CalculateFormula(value: Boolean);
    function get_CallBack: DNISmartMarkerCallBack;
    procedure set_CallBack(value: DNISmartMarkerCallBack);
    function get_LineByLine: Boolean;
    procedure set_LineByLine(value: Boolean);

  { methods } 

    ///<summary>
    ///  Clears all data sources.
    ///</summary>
    procedure ClearDataSource;
    ///<summary>
    ///  Sets data source of a DataSet object.
    ///</summary>
    ///  <param name="dataSet">DataSet object</param>
    procedure SetDataSource(dataSet: DDN.System.Data.DNDataSet); overload;
    ///<summary>
    ///  Sets data source of a DataTable object.
    ///</summary>
    ///  <param name="dataTable">DataTable object</param>
    procedure SetDataSource(dataTable: DDN.System.Data.DNDataTable); overload;
    ///<summary>
    ///  Sets data source of a <see cref="T:Aspose.Cells.ICellsDataTable" />
    ///  object.
    ///</summary>
    ///  <param name="name">The name of the table.</param>
    ///  <param name="dataTable">DataTable object</param>
    procedure SetDataSource(name: string; dataTable: DNICellsDataTable); overload;
    ///<summary>
    ///  Sets data source of a DataView object and binds it to a data source name.
    ///</summary>
    ///  <param name="dataSourceName">Data source name.</param>
    ///  <param name="dataView">DataView object.</param>
    procedure SetDataSource(dataSourceName: string; dataView: DDN.System.Data.DNDataView); overload;
    ///<summary>
    ///  Sets data source of a DataView object.
    ///</summary>
    ///  <param name="dataView">DataView object</param>
    procedure SetDataSource(dataView: DDN.System.Data.DNDataView); overload;
    ///<summary>
    ///  Sets data source of a IDataReader object.
    ///</summary>
    ///  <param name="name">The data source map name.</param>
    ///  <param name="dataReader">IDataReader object</param>
    ///  <param name="rowCount">The number of the data rows.
    ///  If the smart marker does not contains "noadd",
    ///  we have to insert rows by the row count for performance issue and dynamic repeated formulas.
    ///  -1 means the param is useless.
    ///</param>
    procedure SetDataSource(name: string; dataReader: DDN.System.Data.DNIDataReader; rowCount: Int32); overload;
    ///<summary>
    ///  Sets data binding to a variable.
    ///</summary>
    ///  <param name="variable">Variable name created using smart marker.</param>
    ///  <param name="data">Source data.</param>
    procedure SetDataSource(variable: string; data: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Sets data array binding to a variable.
    ///</summary>
    ///  <param name="variable">Variable name created using smart marker.</param>
    ///  <param name="dataArray">Source data array.</param>
    procedure SetDataSource(variable: string; dataArray: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  Processes the smart markers and populates the data source values.
    ///</summary>
    procedure Process; overload;
    ///<summary>
    ///  Processes the smart markers and populates the data source values.
    ///</summary>
    ///  <param name="isPreserved">True if the unrecognized smart marker is preserved.</param>
    procedure Process(isPreserved: Boolean); overload;
    ///<summary>
    ///  Processes the smart markers and populates the data source values.
    ///</summary>
    ///  <param name="sheetIndex">Worksheet index.</param>
    ///  <param name="isPreserved">True if the unrecognized smart marker is preserved.</param>
    ///<remarks>This method works on worksheet level.</remarks>
    procedure Process(sheetIndex: Int32; isPreserved: Boolean); overload;
    ///<summary>
    ///  Returns a collection of smart markers in a spreadsheet.
    ///</summary>
    ///<returns>A collection of smart markers</returns>
    ///<remarks>A string array is created on every call. The array is sorted and duplicated values are removed.</remarks>
    function GetSmartMarkers: TArray<string>;
    ///<summary>
    ///  Sets data source of a OleDbConnection object.
    ///</summary>
    ///  <param name="connection">OleDbConnection object</param>
    procedure SetDataSource(connection: DDN.System.Data.DNOleDbConnection); overload;
    ///<summary>
    ///  Sets data source of a SqlConnection object.
    ///</summary>
    ///  <param name="connection">SqlConnection object</param>
    procedure SetDataSource(connection: DDN.System.Data.DNSqlConnection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the <see cref="P:Aspose.Cells.WorkbookDesigner.Workbook" />
    ///  object.
    ///</summary>
    property Workbook: DNWorkbook read get_Workbook write set_Workbook;
    ///<summary>
    ///  Indicates whether repeating formulas with subtotal row.
    ///</summary>
    property RepeatFormulasWithSubtotal: Boolean read get_RepeatFormulasWithSubtotal write set_RepeatFormulasWithSubtotal;
    ///<summary>
    ///  If TRUE, Null will be inserted if the value is "";
    ///</summary>
    property UpdateEmptyStringAsNull: Boolean read get_UpdateEmptyStringAsNull write set_UpdateEmptyStringAsNull;
    ///<summary>
    ///  Indicates if references in other worksheets will be updated.
    ///</summary>
    property UpdateReference: Boolean read get_UpdateReference write set_UpdateReference;
    ///<summary>
    ///  Indicates whether formulas should be calculated.
    ///</summary>
    property CalculateFormula: Boolean read get_CalculateFormula write set_CalculateFormula;
    ///<summary>
    ///  Gets and sets callback interface of processing smartmarker.
    ///</summary>
    property CallBack: DNISmartMarkerCallBack read get_CallBack write set_CallBack;
    ///<summary>
    ///  Indicates wether processing the smart marker line by line.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///  If False, the template file must contain a range which is named as "_CellsSmartMarkers".
    ///</remarks>
    property LineByLine: Boolean read get_LineByLine write set_LineByLine;
  end;

  TDNWorkbookDesigner = class(TDNGenericImport<DNWorkbookDesignerClass, DNWorkbookDesigner>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorkbookSettingsClass = interface(DNObjectClass)
  ['{B16FD210-152A-5D17-BD94-1068983C9318}']
  end;

  ///<summary>
  ///  Represents all settings of the workbook.
  ///</summary>
  [DNTypeName('Aspose.Cells.WorkbookSettings')]
  DNWorkbookSettings = interface(DDN.mscorlib.DNIDisposable)
  ['{FBCA01A8-A677-3D75-80B8-5B03AC6F1DD4}']
  { getters & setters } 

    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_CheckCustomNumberFormat: Boolean;
    procedure set_CheckCustomNumberFormat(value: Boolean);
    function get_EnableMacros: Boolean;
    procedure set_EnableMacros(value: Boolean);
    function get_Date1904: Boolean;
    procedure set_Date1904(value: Boolean);
    function get_ProtectionType: DNProtectionType;
    function get_PrecisionAsDisplayed: Boolean;
    procedure set_PrecisionAsDisplayed(value: Boolean);
    function get_ReCalculateOnOpen: Boolean;
    procedure set_ReCalculateOnOpen(value: Boolean);
    function get_CreateCalcChain: Boolean;
    procedure set_CreateCalcChain(value: Boolean);
    function get_DisplayDrawingObjects: DNDisplayDrawingObjects;
    procedure set_DisplayDrawingObjects(value: DNDisplayDrawingObjects);
    function get_ForceFullCalculate: Boolean;
    procedure set_ForceFullCalculate(value: Boolean);
    function get_Iteration: Boolean;
    procedure set_Iteration(value: Boolean);
    function get_MaxIteration: Int32;
    procedure set_MaxIteration(value: Int32);
    function get_MaxChange: Double;
    procedure set_MaxChange(value: Double);
    function get_CalcMode: DNCalcModeType;
    procedure set_CalcMode(value: DNCalcModeType);
    function get_CalculationId: string;
    procedure set_CalculationId(value: string);
    function get_CalcStackSize: Int32;
    procedure set_CalcStackSize(value: Int32);
    function get_RecalculateBeforeSave: Boolean;
    procedure set_RecalculateBeforeSave(value: Boolean);
    function get_SheetTabBarWidth: Int32;
    procedure set_SheetTabBarWidth(value: Int32);
    function get_ShowTabs: Boolean;
    procedure set_ShowTabs(value: Boolean);
    function get_FirstVisibleTab: Int32;
    procedure set_FirstVisibleTab(value: Int32);
    function get_IsHScrollBarVisible: Boolean;
    procedure set_IsHScrollBarVisible(value: Boolean);
    function get_IsVScrollBarVisible: Boolean;
    procedure set_IsVScrollBarVisible(value: Boolean);
    function get_Shared: Boolean;
    procedure set_Shared(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_GlobalizationSettings: DNGlobalizationSettings;
    procedure set_GlobalizationSettings(value: DNGlobalizationSettings);
    function get_NumberDecimalSeparator: Char;
    procedure set_NumberDecimalSeparator(value: Char);
    function get_NumberGroupSeparator: Char;
    procedure set_NumberGroupSeparator(value: Char);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_WriteProtection: DNWriteProtection;
    function get_IsEncrypted: Boolean;
    function get_IsProtected: Boolean;
    function get_IsDefaultEncrypted: Boolean;
    procedure set_IsDefaultEncrypted(value: Boolean);
    function get_IsMinimized: Boolean;
    procedure set_IsMinimized(value: Boolean);
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_AutoCompressPictures: Boolean;
    procedure set_AutoCompressPictures(value: Boolean);
    function get_RemovePersonalInformation: Boolean;
    procedure set_RemovePersonalInformation(value: Boolean);
    function get_HidePivotFieldList: Boolean;
    procedure set_HidePivotFieldList(value: Boolean);
    function get_UpdateLinksType: DNUpdateLinksType;
    procedure set_UpdateLinksType(value: DNUpdateLinksType);
    function get_MaxRow: Int32;
    function get_MaxColumn: Int32;
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_WindowLeft: Double;
    procedure set_WindowLeft(value: Double);
    function get_WindowLeftInch: Double;
    procedure set_WindowLeftInch(value: Double);
    function get_WindowLeftCM: Double;
    procedure set_WindowLeftCM(value: Double);
    function get_WindowTop: Double;
    procedure set_WindowTop(value: Double);
    function get_WindowTopInch: Double;
    procedure set_WindowTopInch(value: Double);
    function get_WindowTopCM: Double;
    procedure set_WindowTopCM(value: Double);
    function get_WindowWidth: Double;
    procedure set_WindowWidth(value: Double);
    function get_WindowWidthInch: Double;
    procedure set_WindowWidthInch(value: Double);
    function get_WindowWidthCM: Double;
    procedure set_WindowWidthCM(value: Double);
    function get_WindowHeight: Double;
    procedure set_WindowHeight(value: Double);
    function get_WindowHeightInch: Double;
    procedure set_WindowHeightInch(value: Double);
    function get_WindowHeightCM: Double;
    procedure set_WindowHeightCM(value: Double);
    function get_UpdateAdjacentCellsBorder: Boolean;
    procedure set_UpdateAdjacentCellsBorder(value: Boolean);
    function get_SignificantDigits: Int32;
    procedure set_SignificantDigits(value: Int32);
    function get_CheckCompatibility: Boolean;
    procedure set_CheckCompatibility(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_AutoRecover: Boolean;
    procedure set_AutoRecover(value: Boolean);
    function get_CrashSave: Boolean;
    procedure set_CrashSave(value: Boolean);
    function get_DataExtractLoad: Boolean;
    procedure set_DataExtractLoad(value: Boolean);
    function get_RepairLoad: Boolean;
    procedure set_RepairLoad(value: Boolean);
    function get_BuildVersion: string;
    procedure set_BuildVersion(value: string);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_PaperSize: DNPaperSizeType;
    procedure set_PaperSize(value: DNPaperSizeType);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_MaxRowsOfSharedFormula: Int32;
    procedure set_MaxRowsOfSharedFormula(value: Int32);
    function get_Compliance: DNOoxmlCompliance;
    procedure set_Compliance(value: DNOoxmlCompliance);
    function get_QuotePrefixToStyle: Boolean;
    procedure set_QuotePrefixToStyle(value: Boolean);

  { methods } 

    ///<summary>
    ///  Releases resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets the default theme font name.
    ///</summary>
    ///  <param name="type">The scheme type of the font.</param>
    ///<returns></returns>
    function GetThemeFont(&type: DNFontSchemeType): string;
    ///<summary>
    ///  Set the type of  print orientation for the whole workbook.
    ///</summary>
    ///  <param name="pageOrientationType">The <see cref="T:Aspose.Cells.PageOrientationType" />
    ///</param>
    procedure SetPageOrientationType(pageOrientationType: DNPageOrientationType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the stream provider for external resource.
    ///</summary>
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    ///<summary>
    ///  Gets and sets the author of the file.
    ///</summary>
    ///<remarks>
    ///  It''s not set, check  <see cref="P:Aspose.Cells.Properties.BuiltInDocumentPropertyCollection.Author" />
    ///  first, then check the user of Environment.
    ///</remarks>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Indicates whether checking custom number format when setting Style.Custom.
    ///</summary>
    property CheckCustomNumberFormat: Boolean read get_CheckCustomNumberFormat write set_CheckCustomNumberFormat;
    ///<summary>
    ///  Enable macros;
    ///</summary>
    ///<remarks>
    ///  Now it only works when copying a worksheet to other worksheet in a workbook.
    ///</remarks>
    property EnableMacros: Boolean read get_EnableMacros write set_EnableMacros;
    ///<summary>
    ///  Gets or sets a value which represents if the workbook uses the 1904 date system.
    ///</summary>
    property Date1904: Boolean read get_Date1904 write set_Date1904;
    ///<summary>
    ///  Gets the protection type of the workbook.
    ///</summary>
    property ProtectionType: DNProtectionType read get_ProtectionType;
    ///<summary>
    ///  True if calculations in this workbook will be done using only the precision of the numbers as they're displayed
    ///</summary>
    property PrecisionAsDisplayed: Boolean read get_PrecisionAsDisplayed write set_PrecisionAsDisplayed;
    ///<summary>
    ///  Indicates whether re-calculate all formulas on opening file.
    ///</summary>
    property ReCalculateOnOpen: Boolean read get_ReCalculateOnOpen write set_ReCalculateOnOpen;
    ///<summary>
    ///  Indicates whether create calculated formulas chain. Default is false.
    ///</summary>
    property CreateCalcChain: Boolean read get_CreateCalcChain write set_CreateCalcChain;
    ///<summary>
    ///  Indicates whether and how to show objects in the workbook.
    ///</summary>
    property DisplayDrawingObjects: DNDisplayDrawingObjects read get_DisplayDrawingObjects write set_DisplayDrawingObjects;
    ///<summary>
    ///  Fully calculates every time when a calculation is triggered.
    ///</summary>
    property ForceFullCalculate: Boolean read get_ForceFullCalculate write set_ForceFullCalculate;
    ///<summary>
    ///  Indicates whether use iteration to resolve circular references.
    ///</summary>
    property Iteration: Boolean read get_Iteration write set_Iteration;
    ///<summary>
    ///  Returns or sets the maximum number of iterations to resolve a circular reference.
    ///</summary>
    property MaxIteration: Int32 read get_MaxIteration write set_MaxIteration;
    ///<summary>
    ///  Returns or sets the maximum number of change to resolve a circular reference.
    ///</summary>
    property MaxChange: Double read get_MaxChange write set_MaxChange;
    ///<summary>
    ///  It specifies whether to calculate formulas manually,
    ///  automatically or automatically except for multiple table operations.
    ///</summary>
    ///<remarks>
    ///  Only sets for MS Excel.
    ///  Please manually calling Workbook.CalculateFormula() method to calculate formulas with Aspose.Cells.
    ///</remarks>
    property CalcMode: DNCalcModeType read get_CalcMode write set_CalcMode;
    ///<summary>
    ///  Specifies the version of the calculation engine used to calculate values in the workbook.
    ///</summary>
    property CalculationId: string read get_CalculationId write set_CalculationId;
    ///<summary>
    ///  Specifies the stack size for calculating cells recursively.
    ///  The large value for this size will give better performance when there are lots of cells need to be calculated recursively.
    ///  On the other hand, larger value will raise the risk of StackOverflowException.
    ///  If user gets StackOverflowException when calculating formulas, this value should be decreased.
    ///</summary>
    property CalcStackSize: Int32 read get_CalcStackSize write set_CalcStackSize;
    ///<summary>
    ///  Indicates whether to recalculate before saving the document.
    ///</summary>
    property RecalculateBeforeSave: Boolean read get_RecalculateBeforeSave write set_RecalculateBeforeSave;
    ///<summary>
    ///  Width of worksheet tab bar (in 1/1000 of window width).
    ///</summary>
    property SheetTabBarWidth: Int32 read get_SheetTabBarWidth write set_SheetTabBarWidth;
    ///<summary>
    ///  Get or sets a value whether the Workbook tabs are displayed.
    ///</summary>
    ///<remarks>The default value is true.</remarks>
    ///<example>The following code hides the Sheet Tabs and Tab Scrolling Buttons for the spreadsheet.
    ///<code>
    ///  [C#]
    ///  // Hide the spreadsheet tabs.
    ///  workbook.ShowTabs = false;
    ///  [Visual Basic]
    ///  ' Hide the spreadsheet tabs.
    ///  workbook.ShowTabs = False
    ///</code></example>
    property ShowTabs: Boolean read get_ShowTabs write set_ShowTabs;
    ///<summary>
    ///  Gets or sets the first visible worksheet tab.
    ///</summary>
    property FirstVisibleTab: Int32 read get_FirstVisibleTab write set_FirstVisibleTab;
    ///<summary>
    ///  Gets or sets a value indicating whether the generated spreadsheet will contain a horizontal scroll bar.
    ///</summary>
    ///<remarks>The default value is true.</remarks>
    ///<example>
    ///  The following code makes the horizontal scroll bar invisible for the spreadsheet.
    ///<code>
    ///  [C#]
    ///  // Hide the horizontal scroll bar of the Excel file.
    ///  workbook.IsHScrollBarVisible = false;
    ///  [Visual Basic]
    ///  ' Hide the horizontal scroll bar of the Excel file.
    ///  workbook.IsHScrollBarVisible = False
    ///</code></example>
    property IsHScrollBarVisible: Boolean read get_IsHScrollBarVisible write set_IsHScrollBarVisible;
    ///<summary>
    ///  Gets or sets a value indicating whether the generated spreadsheet will contain a vertical scroll bar.
    ///</summary>
    ///<remarks>The default value is true.</remarks>
    ///<example>The following code makes the vertical scroll bar invisible for the spreadsheet.
    ///<code>
    ///  [C#]
    ///  // Hide the vertical scroll bar of the Excel file.
    ///  workbook.IsVScrollBarVisible = false;
    ///  [Visual Basic]
    ///  ' Hide the vertical scroll bar of the Excel file.
    ///  workbook.IsVScrollBarVisible = False
    ///</code></example>
    property IsVScrollBarVisible: Boolean read get_IsVScrollBarVisible write set_IsVScrollBarVisible;
    ///<summary>
    ///  Gets or sets a value that indicates whether the Workbook is shared.
    ///</summary>
    ///<remarks>The default value is false.</remarks>
    property Shared: Boolean read get_Shared write set_Shared;
    ///<summary>
    ///  Gets or sets the user interface language of the Workbook version based on CountryCode that has saved the file.
    ///</summary>
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    ///<summary>
    ///  Gets or sets the regional settings for workbook.
    ///</summary>
    ///<remarks>
    ///  1. Regional settings used by Aspose.Cells component for a workbook loaded from template file:
    ///  i). For an XLS file, there are fields defined for regional settings and MS Excel does save regional settings data into the file when saving the XLS file.
    ///  So, we use the saved region in the template file for the workbook.
    ///  If you do not want to use the region saved in the XLS file, please reset it to the expected one (such as, CountryCode.Default) after loading the template file.
    ///  And, we save the user specified value (by this method) into the file too when saving an XLS file.
    ///  ii). For other file formats, such as, XLSX, XLSB...etc., there is no field defined for regional settings in the file format specification.
    ///  So, we use the regional settings of application's environment for the workbook.
    ///  And, the user specified value (by this method) cannot be kept for the generated files with those file formats.
    ///  2. For the view effect in MS Excel:
    ///  The applied regional settings here can take effect only at runtime with Aspose.Cells component and not when viewing the generated file with MS Excel.
    ///  Even for the generated XLS file in which the specified regional settings data has been saved, when viewing/editing it with MS Excel,
    ///  the used region to perform formatting by MS Excel is always the default regional settings of the environment where MS Excel is running,
    ///  not the one saved in the file. It is MS Excel's behavior and cannot be changed by code.
    ///</remarks>
    property Region: DNCountryCode read get_Region write set_Region;
    ///<summary>
    ///  Gets or sets the system culture info.
    ///</summary>
    ///<remarks>
    ///  Returns null if culture info is not set and <see cref="P:Aspose.Cells.WorkbookSettings.Region" />
    ///  is not set.
    ///</remarks>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    ///<summary>
    ///  Gets and sets the globalization settings.
    ///</summary>
    property GlobalizationSettings: DNGlobalizationSettings read get_GlobalizationSettings write set_GlobalizationSettings;
    ///<summary>
    ///  Gets or sets the decimal separator for formatting/parsing numeric values. Default is the decimal separator of current Region.
    ///</summary>
    property NumberDecimalSeparator: Char read get_NumberDecimalSeparator write set_NumberDecimalSeparator;
    ///<summary>
    ///  Gets or sets the character that separates groups of digits to the left of the decimal in numeric values. Default is the group separator of current Region.
    ///</summary>
    property NumberGroupSeparator: Char read get_NumberGroupSeparator write set_NumberGroupSeparator;
    ///<summary>
    ///  Represents Workbook file encryption password.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Provides access to the workbook write protection options.
    ///</summary>
    property WriteProtection: DNWriteProtection read get_WriteProtection;
    ///<summary>
    ///  Gets a value that indicates whether a password is required to open this workbook.
    ///</summary>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Gets a value that indicates whether the structure or window of the Workbook is protected.
    ///</summary>
    property IsProtected: Boolean read get_IsProtected;
    ///<summary>
    ///  Indicates whether encrypting the workbook with default password if Structure and Windows of the workbook are locked.
    ///</summary>
    ///<remarks>
    ///  The default value is false now. It's same as MS Excel 2013.
    ///</remarks>
    property IsDefaultEncrypted: Boolean read get_IsDefaultEncrypted write set_IsDefaultEncrypted;
    ///<summary>
    ///  Represents whether the generated spreadsheet will be opened Minimized.
    ///</summary>
    property IsMinimized: Boolean read get_IsMinimized write set_IsMinimized;
    ///<summary>
    ///  Indicates whether this workbook is hidden.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  Specifies a boolean value that indicates the application automatically compressed pictures in the workbook.
    ///</summary>
    property AutoCompressPictures: Boolean read get_AutoCompressPictures write set_AutoCompressPictures;
    ///<summary>
    ///  True if personal information can be removed from the specified workbook.
    ///</summary>
    ///<remarks></remarks>
    property RemovePersonalInformation: Boolean read get_RemovePersonalInformation write set_RemovePersonalInformation;
    ///<summary>
    ///  Gets and sets whether hide the field list for the PivotTable.
    ///</summary>
    property HidePivotFieldList: Boolean read get_HidePivotFieldList write set_HidePivotFieldList;
    ///<summary>
    ///  Gets and sets how updates external links when the workbook is opened.
    ///</summary>
    property UpdateLinksType: DNUpdateLinksType read get_UpdateLinksType write set_UpdateLinksType;
    ///<summary>
    ///  Gets the max row index, zero-based.
    ///</summary>
    ///<remarks>
    ///  Returns 65535 if the file format is Excel97-2003;
    ///</remarks>
    property MaxRow: Int32 read get_MaxRow;
    ///<summary>
    ///  Gets the max column index, zero-based.
    ///</summary>
    ///<remarks>
    ///  Returns 255 if the file format is Excel97-2003;
    ///</remarks>
    property MaxColumn: Int32 read get_MaxColumn;
    ///<summary>
    ///  Indicates whether parsing the formula when reading the file.
    ///</summary>
    ///<remarks>
    ///  Only applies for Excel Xlsx, Xltx, Xltm and Xlsm file
    ///  because the formulas in the files are stored with a string formula.
    ///  NOTE: This member is now obsolete. Instead, please use LoadOptions.ParsingFormulaOnOpen.
    ///  This property will be removed 12 months later since January 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    ///<summary>
    ///  The distance from the left edge of the client area to the left edge of the window, in unit of point.
    ///</summary>
    property WindowLeft: Double read get_WindowLeft write set_WindowLeft;
    ///<summary>
    ///  The distance from the left edge of the client area to the left edge of the window.
    ///  In unit of inch.
    ///</summary>
    property WindowLeftInch: Double read get_WindowLeftInch write set_WindowLeftInch;
    ///<summary>
    ///  The distance from the left edge of the client area to the left edge of the window.
    ///  In unit of centimeter.
    ///</summary>
    property WindowLeftCM: Double read get_WindowLeftCM write set_WindowLeftCM;
    ///<summary>
    ///  The distance from the top edge of the client area to the top edge of the window, in unit of point.
    ///</summary>
    property WindowTop: Double read get_WindowTop write set_WindowTop;
    ///<summary>
    ///  The distance from the top edge of the client area to the top edge of the window, in unit of inch.
    ///</summary>
    property WindowTopInch: Double read get_WindowTopInch write set_WindowTopInch;
    ///<summary>
    ///  The distance from the top edge of the client area to the top edge of the window, in unit of centimeter.
    ///</summary>
    property WindowTopCM: Double read get_WindowTopCM write set_WindowTopCM;
    ///<summary>
    ///  The width of the window, in unit of point.
    ///</summary>
    property WindowWidth: Double read get_WindowWidth write set_WindowWidth;
    ///<summary>
    ///  The width of the window, in unit of inch.
    ///</summary>
    property WindowWidthInch: Double read get_WindowWidthInch write set_WindowWidthInch;
    ///<summary>
    ///  The width of the window, in unit of centimeter.
    ///</summary>
    property WindowWidthCM: Double read get_WindowWidthCM write set_WindowWidthCM;
    ///<summary>
    ///  The height of the window, in unit of point.
    ///</summary>
    property WindowHeight: Double read get_WindowHeight write set_WindowHeight;
    ///<summary>
    ///  The height of the window, in unit of inch.
    ///</summary>
    property WindowHeightInch: Double read get_WindowHeightInch write set_WindowHeightInch;
    ///<summary>
    ///  The height of the window, in unit of centimeter.
    ///</summary>
    property WindowHeightCM: Double read get_WindowHeightCM write set_WindowHeightCM;
    ///<summary>
    ///  Indicates whether update adjacent cells' border.
    ///</summary>
    ///<remarks>
    ///  The default value is false.
    ///  For example: the bottom border of the cell A1 is update,
    ///  the top border of the cell A2 should be changed too.
    ///</remarks>
    property UpdateAdjacentCellsBorder: Boolean read get_UpdateAdjacentCellsBorder write set_UpdateAdjacentCellsBorder;
    ///<summary>
    ///  Gets and sets the number of significant digits.
    ///  The default value is <see cref="P:Aspose.Cells.CellsHelper.SignificantDigits" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Only could be 15 or 17 now.
    ///</remarks>
    property SignificantDigits: Int32 read get_SignificantDigits write set_SignificantDigits;
    ///<summary>
    ///  Indicates whether check compatibility when saving workbook.
    ///</summary>
    ///<remarks>
    ///  The default value is true.
    ///</remarks>
    property CheckCompatibility: Boolean read get_CheckCompatibility write set_CheckCompatibility;
    ///<summary>
    ///  Whether check restriction of excel file when user modify cells related objects.
    ///  For example, excel does not allow inputting string value longer than 32K.
    ///  When you input a value longer than 32K such as by Cell.PutValue(string), if this property is true, you will get an Exception.
    ///  If this property is false, we will accept your input string value as the cell's value so that later
    ///  you can output the complete string value for other file formats such as CSV.
    ///  However, if you have set such kind of value that is invalid for excel file format,
    ///  you should not save the workbook as excel file format later. Otherwise there may be unexpected error for the generated excel file.
    ///</summary>
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    ///<summary>
    ///  Indicates whether the file is mark for auto-recovery.
    ///</summary>
    property AutoRecover: Boolean read get_AutoRecover write set_AutoRecover;
    ///<summary>
    ///  indicates whether the application last saved the workbook file after a crash.
    ///</summary>
    property CrashSave: Boolean read get_CrashSave write set_CrashSave;
    ///<summary>
    ///  indicates whether the application last opened the workbook for data recovery.
    ///</summary>
    property DataExtractLoad: Boolean read get_DataExtractLoad write set_DataExtractLoad;
    ///<summary>
    ///  Indicates whether the application last opened the workbook in safe or repair mode.
    ///</summary>
    property RepairLoad: Boolean read get_RepairLoad write set_RepairLoad;
    ///<summary>
    ///  Specifies the incremental public release of the application.
    ///</summary>
    property BuildVersion: string read get_BuildVersion write set_BuildVersion;
    ///<summary>
    ///  Gets or sets the memory usage options. The new option will be taken as the default option for newly created worksheets but does not take effect for existing worksheets.
    ///</summary>
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    ///<summary>
    ///  Gets and sets the default print paper size.
    ///</summary>
    ///<remarks>
    ///  If there is no setting about paper size,MS Excel will use default printer's setting.
    ///</remarks>
    property PaperSize: DNPaperSizeType read get_PaperSize write set_PaperSize;
    ///<summary>
    ///  Gets or sets warning callback.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets and sets the max row number of shared formula.
    ///</summary>
    ///<remarks>
    ///  If the number is too large, the autofilter works very slow in MS Excel 2013.
    ///</remarks>
    property MaxRowsOfSharedFormula: Int32 read get_MaxRowsOfSharedFormula write set_MaxRowsOfSharedFormula;
    ///<summary>
    ///  Specifies the OOXML version for the output document. The default value is Ecma376_2006.
    ///</summary>
    ///<remarks>
    ///  Only for .xlsx files.
    ///</remarks>
    property Compliance: DNOoxmlCompliance read get_Compliance write set_Compliance;
    ///<summary>
    ///  Indicates whether setting <see cref="P:Aspose.Cells.Style.QuotePrefix" />
    ///  property when entering the string value(which starts  with single quote mark ) to the cell
    ///</summary>
    property QuotePrefixToStyle: Boolean read get_QuotePrefixToStyle write set_QuotePrefixToStyle;
  end;

  TDNWorkbookSettings = class(TDNGenericImport<DNWorkbookSettingsClass, DNWorkbookSettings>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorksheetClass = interface(DNObjectClass)
  ['{9C0B4EE7-4535-5C6A-B016-A88957A8AE44}']
  end;

  ///<summary>
  ///  Encapsulates the object that represents a single worksheet.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  Workbook workbook = new Workbook();
  ///  Worksheet sheet = workbook.Worksheets[0];
  ///  //Freeze panes at "AS40" with 10 rows and 10 columns
  ///  sheet.FreezePanes("AS40", 10, 10);
  ///  //Add a hyperlink in Cell A1
  ///  sheet.Hyperlinks.Add("A1", 1, 1, "http://www.aspose.com");
  ///  [Visual Basic]
  ///  Dim workbook as Workbook = new Workbook()
  ///  Dim sheet as Worksheet = workbook.Worksheets(0)
  ///  'Freeze panes at "AS40" with 10 rows and 10 columns
  ///  sheet.FreezePanes("AS40", 10, 10)
  ///  'Add a hyperlink in Cell A1
  ///  sheet.Hyperlinks.Add("A1", 1, 1, "http://www.aspose.com")
  ///</code></example>
  [DNTypeName('Aspose.Cells.Worksheet')]
  DNWorksheet = interface(DDN.mscorlib.DNIDisposable)
  ['{0E8A6275-5393-37B4-A51D-33323D05B490}']
  { getters & setters } 

    function get_Protection: DNProtection;
    function get_UniqueId: string;
    procedure set_UniqueId(value: string);
    function get_Workbook: DNWorkbook;
    function get_Cells: DNCells;
    function get_QueryTables: DNQueryTableCollection;
    function get_PivotTables: DNPivotTableCollection;
    function get_Type: DNSheetType;
    procedure set_Type(value: DNSheetType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShowFormulas: Boolean;
    procedure set_ShowFormulas(value: Boolean);
    function get_IsGridlinesVisible: Boolean;
    procedure set_IsGridlinesVisible(value: Boolean);
    function get_IsRowColumnHeadersVisible: Boolean;
    procedure set_IsRowColumnHeadersVisible(value: Boolean);
    function get_PaneState: DNPaneStateType;
    function get_DisplayZeros: Boolean;
    procedure set_DisplayZeros(value: Boolean);
    function get_DisplayRightToLeft: Boolean;
    procedure set_DisplayRightToLeft(value: Boolean);
    function get_IsOutlineShown: Boolean;
    procedure set_IsOutlineShown(value: Boolean);
    function get_IsSelected: Boolean;
    procedure set_IsSelected(value: Boolean);
    function get_ListObjects: DNListObjectCollection;
    function get_TabId: Int32;
    procedure set_TabId(value: Int32);
    function get_HorizontalPageBreaks: DNHorizontalPageBreakCollection;
    function get_VerticalPageBreaks: DNVerticalPageBreakCollection;
    function get_Hyperlinks: DNHyperlinkCollection;
    function get_PageSetup: DNPageSetup;
    function get_AutoFilter: DNAutoFilter;
    function get_HasAutofilter: Boolean;
    function get_TransitionEvaluation: Boolean;
    procedure set_TransitionEvaluation(value: Boolean);
    function get_TransitionEntry: Boolean;
    procedure set_TransitionEntry(value: Boolean);
    function get_VisibilityType: DNVisibilityType;
    procedure set_VisibilityType(value: DNVisibilityType);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_SparklineGroupCollection: DNSparklineGroupCollection;
    function get_Charts: DNChartCollection;
    function get_Comments: DNCommentCollection;
    function get_Pictures: DNPictureCollection;
    function get_TextBoxes: DNTextBoxCollection;
    function get_CheckBoxes: DNCheckBoxCollection;
    function get_OleObjects: DNOleObjectCollection;
    function get_Shapes: DNShapeCollection;
    function get_Slicers: DNSlicerCollection;
    function get_Index: Int32;
    function get_IsProtected: Boolean;
    function get_Validations: DNValidationCollection;
    function get_AllowEditRanges: DNProtectedRangeCollection;
    function get_ErrorCheckOptions: DNErrorCheckOptionCollection;
    function get_Outline: DNOutline;
    function get_FirstVisibleRow: Int32;
    procedure set_FirstVisibleRow(value: Int32);
    function get_FirstVisibleColumn: Int32;
    procedure set_FirstVisibleColumn(value: Int32);
    function get_Zoom: Int32;
    procedure set_Zoom(value: Int32);
    function get_ViewType: DNViewType;
    procedure set_ViewType(value: DNViewType);
    function get_IsPageBreakPreview: Boolean;
    procedure set_IsPageBreakPreview(value: Boolean);
    function get_IsRulerVisible: Boolean;
    procedure set_IsRulerVisible(value: Boolean);
    function get_TabColor: DDN.System.Drawing.DNColor;
    procedure set_TabColor(value: DDN.System.Drawing.DNColor);
    function get_CodeName: string;
    procedure set_CodeName(value: string);
    function get_BackgroundImage: TArray<Byte>;
    procedure set_BackgroundImage(value: TArray<Byte>);
    function get_ConditionalFormattings: DNConditionalFormattingCollection;
    function get_ActiveCell: string;
    procedure set_ActiveCell(value: string);
    function get_CustomProperties: DNCustomPropertyCollection;
    function get_SmartTagSetting: DNSmartTagSetting;
    function get_Scenarios: DNScenarioCollection;
    function get_CellWatches: DNCellWatchCollection;

  { methods } 

    ///<summary>
    ///  Replaces all cells' text with a new string.
    ///</summary>
    ///  <param name="oldString">Old string value.</param>
    ///  <param name="newString">New string value.</param>
    function Replace(oldString: string; newString: string): Int32;
    ///<summary>
    ///  Gets selected ranges of cells in the designer spreadsheet.
    ///</summary>
    ///<returns>An <see cref="T:System.Collections.ArrayList" />
    ///  which contains selected ranges.</returns>
    function GetSelectedRanges: DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Sets worksheet background image.
    ///</summary>
    ///  <param name="pictureData">Picture data.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use Worksheet.BackgroundImage property.
    ///  This property will be removed 12 months later since August 2016.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure SetBackground(pictureData: TArray<Byte>);
    ///<summary>
    ///  Gets automatic page breaks.
    ///</summary>
    ///  <param name="options">The print options</param>
    ///<returns>The automatic page breaks areas.</returns>
    ///<remarks>
    ///  Each cell area represents a paper.
    ///</remarks>
    function GetPrintingPageBreaks(options: DNImageOrPrintOptions): TArray<DNCellArea>;
    ///<summary>
    ///  Returns a string represents the current Worksheet object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    ///<summary>
    ///  Starts the session that uses caches to access the data in this worksheet.
    ///</summary>
    ///  <param name="opts">options of data access</param>
    ///<remarks>
    ///  After finishing the access to the data, <see cref="M:Aspose.Cells.Worksheet.CloseAccessCache(Aspose.Cells.AccessCacheOptions)" />
    ///  should
    ///  be invoked with same options to clear all caches and recover normal access mode.
    ///</remarks>
    procedure StartAccessCache(opts: DNAccessCacheOptions);
    ///<summary>
    ///  Closes the session that uses caches to access the data in this worksheet.
    ///</summary>
    ///  <param name="opts">options of data access</param>
    procedure CloseAccessCache(opts: DNAccessCacheOptions);
    ///<summary>
    ///  Calculates a formula.
    ///</summary>
    ///  <param name="formula">Formula to be calculated.</param>
    ///<returns>Calculated formula result.</returns>
    function CalculateFormula(formula: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  Calculates a formula.
    ///</summary>
    ///  <param name="formula">Formula to be calculated.</param>
    ///  <param name="opts">Options for calculating formula</param>
    ///<returns>Calculated formula result.</returns>
    function CalculateFormula(formula: string; opts: DNCalculationOptions): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  Calculates all formulas in this worksheet.
    ///</summary>
    ///  <param name="recursive">True means if the worksheet' cells depend on the cells of other worksheets,
    ///  the dependent cells in other worksheets will be calculated too.
    ///  False means all the formulas in the worksheet have been calculated and the values are right.</param>
    ///  <param name="ignoreError">Indicates if hide the error in calculating formulas.
    ///  The error may be unsupported function, external links, etc.</param>
    ///  <param name="customFunction">The custom formula calculation functions to extend the calculation engine.</param>
    ///<remarks>
    ///  NOTE: This member is now obsolete. Instead,
    ///  please use CalculateFormula(CalculationOptions, bool) method.
    ///  This method will be removed 12 months later since August 2020.
    ///  Aspose apologizes for any inconvenience you may have experienced.</remarks>
    procedure CalculateFormula(recursive: Boolean; ignoreError: Boolean; customFunction: DNICustomFunction); overload;
    ///<summary>
    ///  Calculates all formulas in this worksheet.
    ///</summary>
    ///  <param name="options">Options for calculation</param>
    ///  <param name="recursive">True means if the worksheet' cells depend on the cells of other worksheets,
    ///  the dependent cells in other worksheets will be calculated too.
    ///  False means all the formulas in the worksheet have been calculated and the values are right.</param>
    procedure CalculateFormula(options: DNCalculationOptions; recursive: Boolean); overload;
    ///<summary>
    ///  Query cell areas that mapped/linked to the specific path of xml map.
    ///</summary>
    ///  <param name="path">xml element path</param>
    ///  e.g. A xml map element structure:
    ///  -RootElement
    ///  |-Attribute1
    ///  |-SubElement
    ///  |-Attribute2
    ///  |-Attribute3
    ///  To query "Attribute1", path is "/RootElement/@Attribute1"
    ///  To query "Attribute2", path is "/RootElement/SubElement/@Attribute2"
    ///  To query whole "SubElement", path is "/RootElement/SubElement"
    ///  <param name="xmlMap">Specify an xml map if you want to query for the specific path within a specific map</param>
    ///<returns><see cref="T:Aspose.Cells.CellArea" />
    ///  list that mapped/linked to the specific path of xml map, an empty list is returned if nothing is mapped/linked.</returns>
    function XmlMapQuery(path: string; xmlMap: DNXmlMap): DDN.mscorlib.DNArrayList;
    ///<summary>
    ///  Refreshes all the PivotTables in this Worksheet.
    ///</summary>
    procedure RefreshPivotTables;
    ///<summary>
    ///  Performs application-defined tasks associated with freeing, releasing, or
    ///  resetting unmanaged resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets the window panes.
    ///</summary>
    ///<remarks>
    ///  If the window is not split or frozen.
    ///</remarks>
    function GetPanes: DNPaneCollection;
    ///<summary>
    ///  Freezes panes at the specified cell in the worksheet.
    ///</summary>
    ///  <param name="row">Row index.</param>
    ///  <param name="column">Column index.</param>
    ///  <param name="freezedRows">Number of visible rows in top pane, no more than row index.</param>
    ///  <param name="freezedColumns">Number of visible columns in left pane, no more than column index.</param>
    ///<remarks><p>Row index and column index cannot all be zero. Number of rows and number of columns
    ///  also cannot all be zero.</p>
    ///  <p>The first two parameters specify the froze position and the last two parameters specify the area frozen on the left top pane.</p>
    ///</remarks>
    procedure FreezePanes(row: Int32; column: Int32; freezedRows: Int32; freezedColumns: Int32); overload;
    function GetFreezedPanes(out row: Int32; out column: Int32; out freezedRows: Int32; out freezedColumns: Int32): Boolean;
    ///<summary>
    ///  Splits window.
    ///</summary>
    procedure Split;
    ///<summary>
    ///  Freezes panes at the specified cell in the worksheet.
    ///</summary>
    ///  <param name="cellName">Cell name.</param>
    ///  <param name="freezedRows">Number of visible rows in top pane, no more than row index.</param>
    ///  <param name="freezedColumns">Number of visible columns in left pane, no more than column index.</param>
    ///<remarks>Row index and column index cannot all be zero. Number of rows and number of columns
    ///  also cannot all be zero.</remarks>
    procedure FreezePanes(cellName: string; freezedRows: Int32; freezedColumns: Int32); overload;
    ///<summary>
    ///  Unfreezes panes in the worksheet.
    ///</summary>
    procedure UnFreezePanes;
    ///<summary>
    ///  Removes split window.
    ///</summary>
    procedure RemoveSplit;
    ///<summary>
    ///  Adds page break.
    ///</summary>
    ///  <param name="cellName"></param>
    procedure AddPageBreaks(cellName: string);
    ///<summary>
    ///  Copies contents and formats from another worksheet.
    ///</summary>
    ///  <param name="sourceSheet">Source worksheet.</param>
    procedure Copy(sourceSheet: DNWorksheet); overload;
    ///<summary>
    ///  Copies contents and formats from another worksheet.
    ///</summary>
    ///  <param name="sourceSheet">Source worksheet.</param>
    ///  <param name="copyOptions"></param>
    ///<remarks>You can copy data from another worksheet in the same file or another file. However, this method does not support to copy drawing objects, such as comments, images and charts.</remarks>
    procedure Copy(sourceSheet: DNWorksheet; copyOptions: DNCopyOptions); overload;
    ///<summary>
    ///  Autofits the column width.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="lastRow">Last row index.</param>
    ///<remarks>This method autofits a row based on content in a range of cells within the row.
    ///</remarks>
    procedure AutoFitColumn(columnIndex: Int32; firstRow: Int32; lastRow: Int32); overload;
    ///<summary>
    ///  Autofits all columns in this worksheet.
    ///</summary>
    procedure AutoFitColumns; overload;
    ///<summary>
    ///  Autofits all columns in this worksheet.
    ///</summary>
    ///  <param name="options">The auto fitting options
    ///</param>
    procedure AutoFitColumns(options: DNAutoFitterOptions); overload;
    ///<summary>
    ///  Autofits the column width.
    ///</summary>
    ///  <param name="columnIndex">Column index.</param>
    ///<remarks>AutoFitColumn is an imprecise function.</remarks>
    procedure AutoFitColumn(columnIndex: Int32); overload;
    ///<summary>
    ///  Autofits the columns width.
    ///</summary>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="lastColumn">Last column index.</param>
    ///<remarks>AutoFitColumn is an imprecise function.</remarks>
    procedure AutoFitColumns(firstColumn: Int32; lastColumn: Int32); overload;
    ///<summary>
    ///  Autofits the columns width.
    ///</summary>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="lastColumn">Last column index.</param>
    ///  <param name="options">The auto fitting options</param>
    ///<remarks>AutoFitColumn is an imprecise function.</remarks>
    procedure AutoFitColumns(firstColumn: Int32; lastColumn: Int32; options: DNAutoFitterOptions); overload;
    ///<summary>
    ///  Autofits the columns width.
    ///</summary>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="lastRow">Last row index.</param>
    ///  <param name="lastColumn">Last column index.</param>
    ///<remarks>AutoFitColumn is an imprecise function.</remarks>
    procedure AutoFitColumns(firstRow: Int32; firstColumn: Int32; lastRow: Int32; lastColumn: Int32); overload;
    ///<summary>
    ///  Autofits the columns width.
    ///</summary>
    ///  <param name="firstRow">First row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="lastRow">Last row index.</param>
    ///  <param name="lastColumn">Last column index.</param>
    ///  <param name="options">The auto fitting options</param>
    ///<remarks>AutoFitColumn is an imprecise function.</remarks>
    procedure AutoFitColumns(firstRow: Int32; firstColumn: Int32; lastRow: Int32; lastColumn: Int32; options: DNAutoFitterOptions); overload;
    ///<summary>
    ///  Autofits the row height.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="lastColumn">Last column index.</param>
    ///<remarks>This method autofits a row based on content in a range of cells within the row.
    ///</remarks>
    procedure AutoFitRow(rowIndex: Int32; firstColumn: Int32; lastColumn: Int32); overload;
    ///<summary>
    ///  Autofits the row height.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///  <param name="firstColumn">First column index.</param>
    ///  <param name="lastColumn">Last column index.</param>
    ///  <param name="options">The auto fitter options</param>
    ///<remarks>This method autofits a row based on content in a range of cells within the row.
    ///</remarks>
    procedure AutoFitRow(rowIndex: Int32; firstColumn: Int32; lastColumn: Int32; options: DNAutoFitterOptions); overload;
    ///<summary>
    ///  Autofits all rows in this worksheet.
    ///</summary>
    procedure AutoFitRows; overload;
    ///<summary>
    ///  Autofits all rows in this worksheet.
    ///</summary>
    ///  <param name="onlyAuto">
    ///  True,only autofits the row height when row height is not customed.
    ///</param>
    procedure AutoFitRows(onlyAuto: Boolean); overload;
    ///<summary>
    ///  Autofits all rows in this worksheet.
    ///</summary>
    ///  <param name="options">The auto fitter options</param>
    procedure AutoFitRows(options: DNAutoFitterOptions); overload;
    ///<summary>
    ///  Autofits row height in a range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="endRow">End row index.</param>
    procedure AutoFitRows(startRow: Int32; endRow: Int32); overload;
    ///<summary>
    ///  Autofits row height in a range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="options">The options of auto fitter.</param>
    procedure AutoFitRows(startRow: Int32; endRow: Int32; options: DNAutoFitterOptions); overload;
    ///<summary>
    ///  Autofits row height in a rectangle range.
    ///</summary>
    ///  <param name="startRow">Start row index.</param>
    ///  <param name="endRow">End row index.</param>
    ///  <param name="startColumn">Start column index.</param>
    ///  <param name="endColumn">End column index.</param>
    procedure AutoFitRow(startRow: Int32; endRow: Int32; startColumn: Int32; endColumn: Int32); overload;
    ///<summary>
    ///  Autofits the row height.
    ///</summary>
    ///  <param name="rowIndex">Row index.</param>
    ///<remarks>AutoFitRow is an imprecise function.</remarks>
    procedure AutoFitRow(rowIndex: Int32); overload;
    ///<summary>
    ///  Filters data using complex criteria.
    ///</summary>
    ///  <param name="isFilter">Indicates whether filtering the list in place.</param>
    ///  <param name="listRange">The list range.</param>
    ///  <param name="criteriaRange">The criteria range.</param>
    ///  <param name="copyTo">The range where copying data to. </param>
    ///  <param name="uniqueRecordOnly">Only displaying or copying unique rows.</param>
    procedure AdvancedFilter(isFilter: Boolean; listRange: string; criteriaRange: string; copyTo: string; uniqueRecordOnly: Boolean);
    ///<summary>
    ///  Removes the auto filter of the worksheet.
    ///</summary>
    procedure RemoveAutoFilter;
    ///<summary>
    ///  Sets the visible options.
    ///</summary>
    ///  <param name="isVisible">Whether the worksheet is visible</param>
    ///  <param name="ignoreError">Whether to ignore error if this option is not valid.</param>
    procedure SetVisible(isVisible: Boolean; ignoreError: Boolean);
    ///<summary>
    ///  Selects a range.
    ///</summary>
    ///  <param name="startRow">The start row.
    ///</param>
    ///  <param name="startColumn">The start column</param>
    ///  <param name="totalRows">The number of rows.</param>
    ///  <param name="totalColumns">The number of columns</param>
    ///  <param name="removeOthers">True means removing other selected range and only select this range.
    ///</param>
    procedure SelectRange(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32; removeOthers: Boolean);
    ///<summary>
    ///  Removes all drawing objects in this worksheet.
    ///</summary>
    procedure RemoveAllDrawingObjects;
    ///<summary>
    ///  Clears all comments in designer spreadsheet.
    ///</summary>
    procedure ClearComments;
    ///<summary>
    ///  Protects worksheet.
    ///</summary>
    ///  <param name="type">Protection type.</param>
    ///<remarks>This method protects worksheet without password. It can protect worksheet in all versions of Excel file.
    ///</remarks>
    procedure Protect(&type: DNProtectionType); overload;
    ///<summary>
    ///  Protects worksheet.
    ///</summary>
    ///  <param name="type">Protection type.</param>
    ///  <param name="password">Password.</param>
    ///  <param name="oldPassword">If the worksheet is already protected by a password, please supply the old password.
    ///  Otherwise, you can set a null value or blank string to this parameter.</param>
    ///<remarks>This method can protect worksheet in all versions of Excel file.
    ///</remarks>
    ///<example><code>
    ///  [C#]
    ///  //Creating a file stream containing the Excel file to be opened
    ///  FileStream fstream = new FileStream("C:\\book1.xls", FileMode.Open);
    ///  //Instantiating a Workbook object and Opening the Excel file through the file stream
    ///  Workbook excel = new Workbook(fstream);
    ///  //Accessing the first worksheet in the Excel file
    ///  Worksheet worksheet = excel.Worksheets[0];
    ///  //Protecting the worksheet with a password
    ///  worksheet.Protect(ProtectionType.All, "aspose", null);
    ///  //Saving the modified Excel file in default (that is Excel 20003) format
    ///  excel.Save("C:\\output.xls");
    ///  //Closing the file stream to free all resources
    ///  fstream.Close();
    ///  [Visual Basic]
    ///  'Creating a file stream containing the Excel file to be opened
    ///  Dim fstream As FileStream = New FileStream("C:\\book1.xls", FileMode.Open)
    ///  'Instantiating a Workbook object and Opening the Excel file through the file stream
    ///  Dim excel As Workbook = New Workbook(fstream)
    ///  'Accessing the first worksheet in the Excel file
    ///  Dim worksheet As Worksheet = excel.Worksheets(0)
    ///  'Protecting the worksheet with a password
    ///  worksheet.Protect(ProtectionType.All, "aspose", DBNull.Value.ToString())
    ///  'Saving the modified Excel file in default (that is Excel 20003) format
    ///  excel.Save("C:\\output.xls")
    ///  'Closing the file stream to free all resources
    ///  fstream.Close()
    ///</code></example>
    procedure Protect(&type: DNProtectionType; password: string; oldPassword: string); overload;
    ///<summary>
    ///  Unprotects worksheet.
    ///</summary>
    ///<remarks> This method unprotects worksheet which is protected without password.
    ///</remarks>
    procedure Unprotect; overload;
    ///<summary>
    ///  Unprotects worksheet.
    ///</summary>
    ///  <param name="password">Password</param>
    ///<remarks>If the worksheet is protected without a password, you can set a null value or blank string to password parameter.
    ///</remarks>
    procedure Unprotect(password: string); overload;
    ///<summary>
    ///  Moves the sheet to another location in the spreadsheet.
    ///</summary>
    ///  <param name="index">Destination sheet index.</param>
    procedure MoveTo(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Represents the various types of protection options available for a worksheet. Supports advanced protection options in ExcelXP and above version.
    ///</summary>
    ///<remarks>This property can protect worksheet in all versions of Excel file and support advanced protection options in ExcelXP and above version.
    ///</remarks>
    property Protection: DNProtection read get_Protection;
    ///<summary>
    ///  Gets and sets the unique id, it is same as {15DB5C3C-A5A1-48AF-8F25-3D86AC232D4F}.
    ///</summary>
    property UniqueId: string read get_UniqueId write set_UniqueId;
    ///<summary>
    ///  Gets the workbook object which contains this sheet.
    ///</summary>
    property Workbook: DNWorkbook read get_Workbook;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Cells.Worksheet.Cells" />
    ///  collection.
    ///</summary>
    property Cells: DNCells read get_Cells;
    ///<summary>
    ///  Gets the queryTables in the worksheet.
    ///</summary>
    property QueryTables: DNQueryTableCollection read get_QueryTables;
    ///<summary>
    ///  Gets all pivot tables in this worksheet.
    ///</summary>
    property PivotTables: DNPivotTableCollection read get_PivotTables;
    ///<summary>
    ///  Represents worksheet type.
    ///</summary>
    property &Type: DNSheetType read get_Type write set_Type;
    ///<summary>
    ///  Gets or sets the name of the worksheet.
    ///</summary>
    ///<remarks>The max length of sheet name is 31. And you cannot assign same name(case insensitive) to two worksheets.
    ///  For example, you cannot set "SheetName1" to the first worksheet and set "SHEETNAME1" to the second worksheet.</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Indicates whether to show formulas or their results.
    ///</summary>
    property ShowFormulas: Boolean read get_ShowFormulas write set_ShowFormulas;
    ///<summary>
    ///  Gets or sets a value indicating whether the gridlines are visible.Default is true.
    ///</summary>
    property IsGridlinesVisible: Boolean read get_IsGridlinesVisible write set_IsGridlinesVisible;
    ///<summary>
    ///  Gets or sets a value indicating whether the worksheet will display row and column headers.
    ///  Default is true.
    ///</summary>
    property IsRowColumnHeadersVisible: Boolean read get_IsRowColumnHeadersVisible write set_IsRowColumnHeadersVisible;
    ///<summary>
    ///  Indicates whether the pane has horizontal or vertical splits, and whether those splits are frozen.
    ///</summary>
    property PaneState: DNPaneStateType read get_PaneState;
    ///<summary>
    ///  True if zero values are displayed.
    ///</summary>
    property DisplayZeros: Boolean read get_DisplayZeros write set_DisplayZeros;
    ///<summary>
    ///  Indicates if the specified worksheet is displayed from right to left instead of from left to right.
    ///  Default is false.
    ///</summary>
    property DisplayRightToLeft: Boolean read get_DisplayRightToLeft write set_DisplayRightToLeft;
    ///<summary>
    ///  Indicates whether to show outline.
    ///</summary>
    property IsOutlineShown: Boolean read get_IsOutlineShown write set_IsOutlineShown;
    ///<summary>
    ///  Indicates whether this worksheet is selected when the workbook is opened.
    ///</summary>
    property IsSelected: Boolean read get_IsSelected write set_IsSelected;
    ///<summary>
    ///  Gets all ListObjects in this worksheet.
    ///</summary>
    property ListObjects: DNListObjectCollection read get_ListObjects;
    ///<summary>
    ///  Specifies the internal identifier for the sheet.
    ///</summary>
    property TabId: Int32 read get_TabId write set_TabId;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.HorizontalPageBreakCollection" />
    ///  collection.
    ///</summary>
    property HorizontalPageBreaks: DNHorizontalPageBreakCollection read get_HorizontalPageBreaks;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.VerticalPageBreakCollection" />
    ///  collection.
    ///</summary>
    property VerticalPageBreaks: DNVerticalPageBreakCollection read get_VerticalPageBreaks;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.HyperlinkCollection" />
    ///  collection.
    ///</summary>
    property Hyperlinks: DNHyperlinkCollection read get_Hyperlinks;
    ///<summary>
    ///  Represents the page setup description in this sheet.
    ///</summary>
    property PageSetup: DNPageSetup read get_PageSetup;
    ///<summary>
    ///  Represents auto filter for the specified worksheet.
    ///</summary>
    property AutoFilter: DNAutoFilter read get_AutoFilter;
    ///<summary>
    ///  Indicates whether this worksheet has auto filter.
    ///</summary>
    property HasAutofilter: Boolean read get_HasAutofilter;
    ///<summary>
    ///  Indicates whether the Transition Formula Evaluation (Lotus compatibility) option is enabled.
    ///</summary>
    property TransitionEvaluation: Boolean read get_TransitionEvaluation write set_TransitionEvaluation;
    ///<summary>
    ///  Indicates whether the Transition Formula Entry (Lotus compatibility) option is enabled.
    ///</summary>
    property TransitionEntry: Boolean read get_TransitionEntry write set_TransitionEntry;
    ///<summary>
    ///  Indicates the visible state for this sheet.
    ///</summary>
    property VisibilityType: DNVisibilityType read get_VisibilityType write set_VisibilityType;
    ///<summary>
    ///  Represents if the worksheet is visible.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Gets the sparkline group collection in the worksheet.
    ///</summary>
    property SparklineGroupCollection: DNSparklineGroupCollection read get_SparklineGroupCollection;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Cells.Charts.Chart" />
    ///  collection
    ///</summary>
    property Charts: DNChartCollection read get_Charts;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Cells.Comment" />
    ///  collection.
    ///</summary>
    property Comments: DNCommentCollection read get_Comments;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Cells.Drawing.Picture" />
    ///  collection.
    ///</summary>
    property Pictures: DNPictureCollection read get_Pictures;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Cells.Drawing.TextBox" />
    ///  collection.
    ///</summary>
    property TextBoxes: DNTextBoxCollection read get_TextBoxes;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Cells.Drawing.CheckBox" />
    ///  collection.
    ///</summary>
    property CheckBoxes: DNCheckBoxCollection read get_CheckBoxes;
    ///<summary>
    ///  Represents a collection of <see cref="T:Aspose.Cells.Drawing.OleObject" />
    ///  in a worksheet.
    ///</summary>
    property OleObjects: DNOleObjectCollection read get_OleObjects;
    ///<summary>
    ///  Returns all drawing shapes in this worksheet.
    ///</summary>
    property Shapes: DNShapeCollection read get_Shapes;
    ///<summary>
    ///  Get the Slicer collection in the worksheet
    ///</summary>
    property Slicers: DNSlicerCollection read get_Slicers;
    ///<summary>
    ///  Gets the index of sheet in the worksheet collection.
    ///</summary>
    property Index: Int32 read get_Index;
    ///<summary>
    ///  Indicates if the worksheet is protected.
    ///</summary>
    property IsProtected: Boolean read get_IsProtected;
    ///<summary>
    ///  Gets the data validation setting collection in the worksheet.
    ///</summary>
    property Validations: DNValidationCollection read get_Validations;
    ///<summary>
    ///  Gets the allow edit range collection in the worksheet.
    ///</summary>
    property AllowEditRanges: DNProtectedRangeCollection read get_AllowEditRanges;
    ///<summary>
    ///  Gets error check setting applied on certain ranges.
    ///</summary>
    property ErrorCheckOptions: DNErrorCheckOptionCollection read get_ErrorCheckOptions;
    ///<summary>
    ///  Gets the outline on this worksheet.
    ///</summary>
    property Outline: DNOutline read get_Outline;
    ///<summary>
    ///  Represents first visible row index.
    ///</summary>
    property FirstVisibleRow: Int32 read get_FirstVisibleRow write set_FirstVisibleRow;
    ///<summary>
    ///  Represents first visible column index.
    ///</summary>
    property FirstVisibleColumn: Int32 read get_FirstVisibleColumn write set_FirstVisibleColumn;
    ///<summary>
    ///  Represents the scaling factor in percentage. It should be between 10 and 400.
    ///</summary>
    ///<remarks>Please set the view type first.</remarks>
    property Zoom: Int32 read get_Zoom write set_Zoom;
    ///<summary>
    ///  Gets and sets the view type.
    ///</summary>
    property ViewType: DNViewType read get_ViewType write set_ViewType;
    ///<summary>
    ///  Indicates whether the specified worksheet is shown in normal view or page break preview.
    ///</summary>
    property IsPageBreakPreview: Boolean read get_IsPageBreakPreview write set_IsPageBreakPreview;
    ///<summary>
    ///  Indicates whether the ruler is visible. This property is only applied for page break preview.
    ///</summary>
    property IsRulerVisible: Boolean read get_IsRulerVisible write set_IsRulerVisible;
    ///<summary>
    ///  Represents worksheet tab color.
    ///</summary>
    ///<remarks>This feature is only supported in ExcelXP(Excel2002) and later versions.
    ///  If you save file as Excel97 or Excel2000 format, it will be omitted.</remarks>
    property TabColor: DDN.System.Drawing.DNColor read get_TabColor write set_TabColor;
    ///<summary>
    ///  Gets worksheet code name.
    ///</summary>
    property CodeName: string read get_CodeName write set_CodeName;
    ///<summary>
    ///  Gets and sets worksheet background image.
    ///</summary>
    property BackgroundImage: TArray<Byte> read get_BackgroundImage write set_BackgroundImage;
    ///<summary>
    ///  Gets the ConditionalFormattings in the worksheet.
    ///</summary>
    property ConditionalFormattings: DNConditionalFormattingCollection read get_ConditionalFormattings;
    ///<summary>
    ///  Gets or sets the active cell in the worksheet.
    ///</summary>
    property ActiveCell: string read get_ActiveCell write set_ActiveCell;
    ///<summary>
    ///  Gets an object representing
    ///  the identifier information associated with a worksheet.
    ///</summary>
    ///<remarks>
    ///  Worksheet.CustomProperties provide a preferred mechanism for storing arbitrary data.
    ///  It supports legacy third-party document components, as well as those situations that have a stringent need for binary parts.
    ///</remarks>
    property CustomProperties: DNCustomPropertyCollection read get_CustomProperties;
    ///<summary>
    ///  Gets all <see cref="T:Aspose.Cells.Markup.SmartTagCollection" />
    ///  objects of the worksheet.
    ///</summary>
    property SmartTagSetting: DNSmartTagSetting read get_SmartTagSetting;
    ///<summary>
    ///  Gets the collection of <see cref="T:Aspose.Cells.Scenario" />
    ///  .
    ///</summary>
    property Scenarios: DNScenarioCollection read get_Scenarios;
    ///<summary>
    ///  Gets collection of cells on this worksheet being watched in the 'watch window'.
    ///</summary>
    property CellWatches: DNCellWatchCollection read get_CellWatches;
  end;

  TDNWorksheet = class(TDNGenericImport<DNWorksheetClass, DNWorksheet>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWriteProtectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79975B1B-133A-5716-9AB0-0AE0866E09CC}']
  { static getter & setter } 

    procedure set_Password(value: string);

  { constructors } 

    {class} function init: DNWriteProtection;

  { static propertys } 

    ///<summary>
    ///  Sets the protected password to modify the file.
    ///</summary>
    {class} property Password: string write set_Password;
  end;

  ///<summary>
  ///  Specifies write protection settings for a workbook.
  ///</summary>
  [DNTypeName('Aspose.Cells.WriteProtection')]
  DNWriteProtection = interface(DDN.mscorlib.DNObject)
  ['{208E31F6-2D20-3C01-B0AD-084D988C6D29}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_RecommendReadOnly: Boolean;
    procedure set_RecommendReadOnly(value: Boolean);
    function get_IsWriteProtected: Boolean;
    procedure set_Password(value: string);

  { methods } 

    ///<summary>
    ///  Returns true if the specified password is the same as the write-protection password the file was protected with.
    ///</summary>
    ///  <param name="password">The specified password.</param>
    ///<returns></returns>
    function ValidatePassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets and sets the author.
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Indicates if the Read Only Recommended option is selected.
    ///</summary>
    property RecommendReadOnly: Boolean read get_RecommendReadOnly write set_RecommendReadOnly;
    ///<summary>
    ///  Indicates whether this workbook is write protected.
    ///</summary>
    property IsWriteProtected: Boolean read get_IsWriteProtected;
    ///<summary>
    ///  Sets the protected password to modify the file.
    ///</summary>
    property Password: string write set_Password;
  end;

  TDNWriteProtection = class(TDNGenericImport<DNWriteProtectionClass, DNWriteProtection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlColumnPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{20367B91-4E89-500C-9B87-752306DA7EB6}']
  { constructors } 

    {class} function init: DNXmlColumnProperty;

  end;

  ///<summary>
  ///  Represents Xml Data Binding information.
  ///</summary>
  [DNTypeName('Aspose.Cells.XmlColumnProperty')]
  DNXmlColumnProperty = interface(DDN.mscorlib.DNObject)
  ['{F92A5C93-E079-3344-8737-E965DF892718}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlColumnProperty = class(TDNGenericImport<DNXmlColumnPropertyClass, DNXmlColumnProperty>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlDataBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FEB0AC4-1EB5-5FEE-AF4B-79BEB99B4055}']
  end;

  ///<summary>
  ///  Represents Xml Data Binding information.
  ///</summary>
  [DNTypeName('Aspose.Cells.XmlDataBinding')]
  DNXmlDataBinding = interface(DDN.mscorlib.DNObject)
  ['{A05C0C62-F0D5-3095-8E89-DEDB4DB877E7}']
  { getters & setters } 

    function get_Url: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets source url of this data binding.
    ///</summary>
    property Url: string read get_Url;
  end;

  TDNXmlDataBinding = class(TDNGenericImport<DNXmlDataBindingClass, DNXmlDataBinding>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DC81772-7F6F-5BDE-B632-3C37DD91F55B}']
  end;

  ///<summary>
  ///  Represents Xml map information.
  ///</summary>
  [DNTypeName('Aspose.Cells.XmlMap')]
  DNXmlMap = interface(DDN.mscorlib.DNObject)
  ['{C66BBD3F-3F74-3297-B582-C4F79AB235C4}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootElementName: string;
    function get_DataBinding: DNXmlDataBinding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the name of the object.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets root element name.
    ///</summary>
    property RootElementName: string read get_RootElementName;
    ///<summary>
    ///  Gets an <see cref="T:Aspose.Cells.XmlDataBinding" />
    ///  of this map.
    ///</summary>
    property DataBinding: DNXmlDataBinding read get_DataBinding;
  end;

  TDNXmlMap = class(TDNGenericImport<DNXmlMapClass, DNXmlMap>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagSettingClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{33CEB608-71BD-51EF-B305-1B69940B3DC2}']
  end;

  ///<summary>
  ///  Represents all <see cref="T:Aspose.Cells.Markup.SmartTagCollection" />
  ///  object in the worksheet.
  ///</summary>
  [DNTypeName('Aspose.Cells.Markup.SmartTagSetting')]
  DNSmartTagSetting = interface(DDN.mscorlib.DNCollectionBase)
  ['{89DA5177-863E-3884-9CC2-F85FA627C1C9}']
  { getters & setters } 

    function get_Item(index: Int32): DNSmartTagCollection; overload;
    function get_Item(row: Int32; column: Int32): DNSmartTagCollection; overload;
    function get_Item(cellName: string): DNSmartTagCollection; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a <see cref="T:Aspose.Cells.Markup.SmartTagCollection" />
    ///  object to a cell.
    ///</summary>
    ///  <param name="row">The row of the cell.</param>
    ///  <param name="column">The column of the cell.</param>
    ///<returns>Returns index of a <see cref="T:Aspose.Cells.Markup.SmartTagCollection" />
    ///  object in the worksheet.</returns>
    function Add(row: Int32; column: Int32): Int32; overload;
    ///<summary>
    ///  Add a cell smart tags.
    ///</summary>
    ///  <param name="cellName">The name of the cell.</param>
    ///<returns></returns>
    function Add(cellName: string): Int32; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSmartTagCollection read get_Item; default;
    property Item[row: Int32; column: Int32]: DNSmartTagCollection read get_Item; default;
    property Item[cellName: string]: DNSmartTagCollection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSmartTagSetting = class(TDNGenericImport<DNSmartTagSettingClass, DNSmartTagSetting>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMultipleFilterCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{F9E237A2-EF0B-57CF-B2EA-7241FB717A2A}']
  { constructors } 

    {class} function init: DNMultipleFilterCollection;

  end;

  ///<summary>
  ///  Represents the multiple filter collection.
  ///</summary>
  [DNTypeName('Aspose.Cells.MultipleFilterCollection')]
  DNMultipleFilterCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{489FF3F0-13E8-31CC-855A-EC40A21E87DF}']
  { getters & setters } 

    function get_MatchBlank: Boolean;
    procedure set_MatchBlank(value: Boolean);
    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds string filter.
    ///</summary>
    ///  <param name="filter">The filter data.</param>
    procedure Add(filter: string);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether to filter by blank.
    ///</summary>
    property MatchBlank: Boolean read get_MatchBlank write set_MatchBlank;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMultipleFilterCollection = class(TDNGenericImport<DNMultipleFilterCollectionClass, DNMultipleFilterCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{A3E0FBC4-C5B0-542A-9CD5-2F00098305EE}']
  end;

  ///<summary>
  ///  The exception that is thrown when Aspose.Cells specified error occurs.
  ///</summary>
  [DNTypeName('Aspose.Cells.CellsException')]
  DNCellsException = interface(DDN.mscorlib.DNApplicationException)
  ['{A6840196-2E9B-33B5-9A56-431BE6082E2D}']
  { getters & setters } 

    function get_Code: DNExceptionType;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Represents custom exception code.
    ///</summary>
    property Code: DNExceptionType read get_Code;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellsException = class(TDNGenericImport<DNCellsExceptionClass, DNCellsException>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellAreaClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{FEB5B743-082C-514D-9B63-DA74EA452B21}']
  { static methods } 

    ///<summary>
    ///  Creates a cell area.
    ///</summary>
    ///  <param name="startRow">The start row.</param>
    ///  <param name="startColumn">The start column.</param>
    ///  <param name="endRow">The end row.</param>
    ///  <param name="endColumn">The end column.</param>
    ///<returns>Return a <see cref="T:Aspose.Cells.CellArea" />
    ///  .</returns>
    {class} function CreateCellArea(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32): DNCellArea; overload;
    ///<summary>
    ///  Creates a cell area.
    ///</summary>
    ///  <param name="startCellName">The top-left cell of the range.</param>
    ///  <param name="endCellName">The bottom-right cell of the range.</param>
    ///<returns>Return a <see cref="T:Aspose.Cells.CellArea" />
    ///  .</returns>
    {class} function CreateCellArea(startCellName: string; endCellName: string): DNCellArea; overload;

  end;

  ///<summary>
  ///  Represent an area of cells.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Create Cell Area
  ///  CellArea ca = new CellArea();
  ///  ca.StartRow = 0;
  ///  ca.EndRow = 0;
  ///  ca.StartColumn = 0;
  ///  ca.EndColumn = 0;
  ///  [VB.NET]
  ///  'Create Cell Area
  ///  Dim ca As CellArea = New CellArea()
  ///  ca.StartRow = 0
  ///  ca.EndRow = 0
  ///  ca.StartColumn = 0
  ///  ca.EndColumn = 0
  ///</code></example>
  [DNTypeName('Aspose.Cells.CellArea')]
  DNCellArea = interface(DDN.mscorlib.DNValueType)
  ['{A41D0974-EEB5-39EC-A8F7-2D7384BAC0D1}']
  { fields getter & setter } 

   function __fakeFieldGet_StartRow: Int32;
   procedure __fakeFieldSet_StartRow(value: Int32);
   function __fakeFieldGet_EndRow: Int32;
   procedure __fakeFieldSet_EndRow(value: Int32);
   function __fakeFieldGet_StartColumn: Int32;
   procedure __fakeFieldSet_StartColumn(value: Int32);
   function __fakeFieldGet_EndColumn: Int32;
   procedure __fakeFieldSet_EndColumn(value: Int32);

  { fields } 

    ///<summary>
    ///  Gets or set the start row of this area.
    ///</summary>
   property StartRow: Int32 read __fakeFieldGet_StartRow write __fakeFieldSet_StartRow;
    ///<summary>
    ///  Gets or set the end row of this area.
    ///</summary>
   property EndRow: Int32 read __fakeFieldGet_EndRow write __fakeFieldSet_EndRow;
    ///<summary>
    ///  Gets or set the start column of this area.
    ///</summary>
   property StartColumn: Int32 read __fakeFieldGet_StartColumn write __fakeFieldSet_StartColumn;
    ///<summary>
    ///  Gets or set the end column of this area.
    ///</summary>
   property EndColumn: Int32 read __fakeFieldGet_EndColumn write __fakeFieldSet_EndColumn;

  { methods } 

    ///<summary>
    ///  Internal use only.
    ///</summary>
    ///  <param name="obj"></param>
    ///<returns></returns>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  Returns a string represents the current Worksheet object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNCellArea = class(TDNGenericImport<DNCellAreaClass, DNCellArea>) end;


implementation

end.
