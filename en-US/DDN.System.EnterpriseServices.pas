//----------------------------------------------------------------------------
//  System.EnterpriseServices.dll: System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.EnterpriseServices
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.EnterpriseServices;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Transactions;

type

{ enums }

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the level of access checking for an application, either at the process level only or at all levels, including component, interface, and method levels.</summary>
  [DNTypeName('System.EnterpriseServices.AccessChecksLevelOption')]
  DNAccessChecksLevelOption = type Integer;
  DNAccessChecksLevelOptionHelper = record helper for DNAccessChecksLevelOption
  public const
    ///<summary>Enables access checks only at the process level. No access checks are made at the component, interface, or method level.</summary>
    Application = 0;
    ///<summary>Enables access checks at every level on calls into the application.</summary>
    ApplicationComponent = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the manner in which serviced components are activated in the application.</summary>
  [DNTypeName('System.EnterpriseServices.ActivationOption')]
  DNActivationOption = type Integer;
  DNActivationOptionHelper = record helper for DNActivationOption
  public const
    ///<summary>Specifies that serviced components in the marked application are activated in the creator's process.</summary>
    Library_ = 0;
    ///<summary>Specifies that serviced components in the marked application are activated in a system-provided process.</summary>
    Server = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the remote procedure call (RPC) authentication mechanism. Applicable only when the <see cref="T:System.EnterpriseServices.ActivationOption" />
  ///  is set to <see langword="Server" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.AuthenticationOption')]
  DNAuthenticationOption = type Integer;
  DNAuthenticationOptionHelper = record helper for DNAuthenticationOption
  public const
    ///<summary>Uses the default authentication level for the specified authentication service. In COM+, this setting is provided by the <see langword="DefaultAuthenticationLevel" />
    ///  property in the <see langword="LocalComputer" />
    ///  collection.</summary>
    Default_ = 0;
    ///<summary>Authentication does not occur.</summary>
    None = 1;
    ///<summary>Authenticates credentials only when the connection is made.</summary>
    Connect = 2;
    ///<summary>Authenticates credentials at the beginning of every call.</summary>
    Call = 3;
    ///<summary>Authenticates credentials and verifies that all call data is received.</summary>
    Packet = 4;
    ///<summary>Authenticates credentials and verifies that no call data has been modified in transit.</summary>
    Integrity = 5;
    ///<summary>Authenticates credentials and encrypts the packet, including the data and the sender's identity and signature.</summary>
    Privacy = 6;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Indicates whether all work submitted by <see cref="T:System.EnterpriseServices.Activity" />
  ///  should be bound to only one single-threaded apartment (STA). This enumeration has no impact on the multithreaded apartment (MTA).</summary>
  [DNTypeName('System.EnterpriseServices.BindingOption')]
  DNBindingOption = type Integer;
  DNBindingOptionHelper = record helper for DNBindingOption
  public const
    ///<summary>The work submitted by the activity is not bound to a single STA.</summary>
    NoBinding = 0;
    ///<summary>The work submitted by the activity is bound to a single STA.</summary>
    BindingToPoolThread = 1;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  ///<summary>Specifies flags that control which phases of transaction completion should be received by the Compensating Resource Manager (CRM) Compensator, and whether recovery should fail if questionable transactions remain after recovery has been attempted.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions')]
  DNCompensatorOptions = type Integer;
  DNCompensatorOptionsHelper = record helper for DNCompensatorOptions
  public const
    ///<summary>Represents the prepare phase.</summary>
    PreparePhase = 1;
    ///<summary>Represents the commit phase.</summary>
    CommitPhase = 2;
    ///<summary>Represents the abort phase.</summary>
    AbortPhase = 4;
    ///<summary>Represents all phases.</summary>
    AllPhases = 7;
    ///<summary>Fails if in-doubt transactions remain after recovery has been attempted.</summary>
    FailIfInDoubtsRemain = 16;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  ///<summary>Describes the origin of a Compensating Resource Manager (CRM) log record.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags')]
  DNLogRecordFlags = type Integer;
  DNLogRecordFlagsHelper = record helper for DNLogRecordFlags
  public const
    ///<summary>Indicates the delivered record should be forgotten.</summary>
    ForgetTarget = 1;
    ///<summary>Log record was written during prepare.</summary>
    WrittenDuringPrepare = 2;
    ///<summary>Log record was written during commit.</summary>
    WrittenDuringCommit = 4;
    ///<summary>Log record was written during abort.</summary>
    WrittenDuringAbort = 8;
    ///<summary>Log record was written during recovery.</summary>
    WrittenDurringRecovery = 16;
    ///<summary>Log record was written during replay.</summary>
    WrittenDuringReplay = 32;
    ///<summary>Log record was written when replay was in progress.</summary>
    ReplayInProgress = 64;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  ///<summary>Specifies the state of the current Compensating Resource Manager (CRM) transaction.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.TransactionState')]
  DNTransactionState = type Integer;
  DNTransactionStateHelper = record helper for DNTransactionState
  public const
    ///<summary>The transaction is active.</summary>
    Active = 0;
    ///<summary>The transaction is commited.</summary>
    Committed = 1;
    ///<summary>The transaction is aborted.</summary>
    Aborted = 2;
    ///<summary>The transaction is in-doubt.</summary>
    Indoubt = 3;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the level of impersonation allowed when calling targets of a server application.</summary>
  [DNTypeName('System.EnterpriseServices.ImpersonationLevelOption')]
  DNImpersonationLevelOption = type Integer;
  DNImpersonationLevelOptionHelper = record helper for DNImpersonationLevelOption
  public const
    ///<summary>Uses the default impersonation level for the specified authentication service. In COM+, this setting is provided by the <see langword="DefaultImpersonationLevel" />
    ///  property in the <see langword="LocalComputer" />
    ///  collection.</summary>
    Default_ = 0;
    ///<summary>The client is anonymous to the server. The server process can impersonate the client, but the impersonation token does not contain any information about the client.</summary>
    Anonymous = 1;
    ///<summary>The system default level. The server can obtain the client's identity, and the server can impersonate the client to do ACL checks.</summary>
    Identify = 2;
    ///<summary>The server can impersonate the client's security context while acting on behalf of the client. The server can access local resources as the client.</summary>
    Impersonate = 3;
    ///<summary>The most powerful impersonation level. When this level is selected, the server (whether local or remote) can impersonate the client's security context while acting on behalf of the client </summary>
    Delegate = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Indicates whether to create a new context based on the current context or on the information in <see cref="T:System.EnterpriseServices.ServiceConfig" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.InheritanceOption')]
  DNInheritanceOption = type Integer;
  DNInheritanceOptionHelper = record helper for DNInheritanceOption
  public const
    ///<summary>The new context is created from the existing context. <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  is the default value for <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  .</summary>
    Inherit = 0;
    ///<summary>The new context is created from the default context.</summary>
    Ignore = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Flags used with the <see cref="T:System.EnterpriseServices.RegistrationHelper" />
  ///  class.</summary>
  [DNTypeName('System.EnterpriseServices.InstallationFlags')]
  DNInstallationFlags = type Integer;
  DNInstallationFlagsHelper = record helper for DNInstallationFlags
  public const
    ///<summary>Do the default installation, which configures, installs, and registers, and assumes that the application already exists.</summary>
    Default_ = 0;
    ///<summary>Do not export the type library; one can be found either by the generated or supplied type library name.</summary>
    ExpectExistingTypeLib = 1;
    ///<summary>Creates the target application. An error occurs if the target already exists.</summary>
    CreateTargetApplication = 2;
    ///<summary>Creates the application if it does not exist; otherwise use the existing application.</summary>
    FindOrCreateTargetApplication = 4;
    ///<summary>If using an existing application, ensures that the properties on this application match those in the assembly.</summary>
    ReconfigureExistingApplication = 8;
    ///<summary>Configures components only, do not configure methods or interfaces.</summary>
    ConfigureComponentsOnly = 16;
    ///<summary>When alert text is encountered, writes it to the Console.</summary>
    ReportWarningsToConsole = 32;
    ///<summary>Should not be used.</summary>
    Register_ = 256;
    ///<summary>Should not be used.</summary>
    Install = 512;
    ///<summary>Should not be used.</summary>
    Configure = 1024;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Indicates the context in which to run the COM+ partition.</summary>
  [DNTypeName('System.EnterpriseServices.PartitionOption')]
  DNPartitionOption = type Integer;
  DNPartitionOptionHelper = record helper for DNPartitionOption
  public const
    ///<summary>The enclosed context runs in the Global Partition. <see cref="F:System.EnterpriseServices.PartitionOption.Ignore" />
    ///  is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" />
    ///  when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" />
    ///  .</summary>
    Ignore = 0;
    ///<summary>The enclosed context runs in the current containing COM+ partition. This is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" />
    ///  when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  .</summary>
    Inherit = 1;
    ///<summary>The enclosed context runs in a COM+ partition that is different from the current containing partition.</summary>
    New = 2;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the mode for accessing shared properties in the shared property group manager.</summary>
  [DNTypeName('System.EnterpriseServices.PropertyLockMode')]
  DNPropertyLockMode = type Integer;
  DNPropertyLockModeHelper = record helper for DNPropertyLockMode
  public const
    ///<summary>Locks a property during a get or set, assuring that every get or set operation on a shared property is atomic.</summary>
    SetGet = 0;
    ///<summary>Locks all the properties in the shared property group for exclusive use by the caller, as long as the caller's current method is executing.</summary>
    Method = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the release mode for the properties in the new shared property group.</summary>
  [DNTypeName('System.EnterpriseServices.PropertyReleaseMode')]
  DNPropertyReleaseMode = type Integer;
  DNPropertyReleaseModeHelper = record helper for DNPropertyReleaseMode
  public const
    ///<summary>When all clients have released their references on the property group, the property group is automatically destroyed. This is the default COM mode.</summary>
    Standard = 0;
    ///<summary>The property group is not destroyed until the process in which it was created has terminated.</summary>
    Process = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Indicates how side-by-side assemblies are configured for <see cref="T:System.EnterpriseServices.ServiceConfig" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.SxsOption')]
  DNSxsOption = type Integer;
  DNSxsOptionHelper = record helper for DNSxsOption
  public const
    ///<summary>Side-by-side assemblies are not used within the enclosed context. <see cref="F:System.EnterpriseServices.SxsOption.Ignore" />
    ///  is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" />
    ///  when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" />
    ///  .</summary>
    Ignore = 0;
    ///<summary>The current side-by-side assembly of the enclosed context is used. <see cref="F:System.EnterpriseServices.SxsOption.Inherit" />
    ///  is the default setting for <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" />
    ///  when <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  is set to <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  .</summary>
    Inherit = 1;
    ///<summary>A new side-by-side assembly is created for the enclosed context.</summary>
    New = 2;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the type of automatic synchronization requested by the component.</summary>
  [DNTypeName('System.EnterpriseServices.SynchronizationOption')]
  DNSynchronizationOption = type Integer;
  DNSynchronizationOptionHelper = record helper for DNSynchronizationOption
  public const
    ///<summary>COM+ ignores the synchronization requirements of the component when determining context for the object.</summary>
    Disabled = 0;
    ///<summary>An object with this value never participates in synchronization, regardless of the status of its caller. This setting is only available for components that are non-transactional and do not use just-in-time (JIT) activation.</summary>
    NotSupported = 1;
    ///<summary>An object with this value participates in synchronization, if it exists.</summary>
    Supported = 2;
    ///<summary>Ensures that all objects created from the component are synchronized.</summary>
    Required = 3;
    ///<summary>An object with this value must participate in a new synchronization where COM+ manages contexts and apartments on behalf of all components involved in the call.</summary>
    RequiresNew = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Indicates the thread pool in which the work, submitted by <see cref="T:System.EnterpriseServices.Activity" />
  ///  , runs.</summary>
  [DNTypeName('System.EnterpriseServices.ThreadPoolOption')]
  DNThreadPoolOption = type Integer;
  DNThreadPoolOptionHelper = record helper for DNThreadPoolOption
  public const
    ///<summary>No thread pool is used. If this value is used to configure a <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  that is passed to an <see cref="T:System.EnterpriseServices.Activity" />
    ///  , an exception is thrown.</summary>
    None = 0;
    ///<summary>The same type of thread pool apartment as the caller's thread apartment is used.</summary>
    Inherit = 1;
    ///<summary>A single-threaded apartment (STA) is used.</summary>
    STA = 2;
    ///<summary>A multithreaded apartment (MTA) is used.</summary>
    MTA = 3;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the value of the <see cref="T:System.EnterpriseServices.TransactionAttribute" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.TransactionIsolationLevel')]
  DNTransactionIsolationLevel = type Integer;
  DNTransactionIsolationLevelHelper = record helper for DNTransactionIsolationLevel
  public const
    ///<summary>The isolation level for the component is obtained from the calling component's isolation level. If this is the root component, the isolation level used is <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Serializable" />
    ///  .</summary>
    Any = 0;
    ///<summary>Shared locks are issued and no exclusive locks are honored.</summary>
    ReadUncommitted = 1;
    ///<summary>Shared locks are held while the data is being read to avoid reading modified data, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</summary>
    ReadCommitted = 2;
    ///<summary>Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads, but phantom rows are still possible.</summary>
    RepeatableRead = 3;
    ///<summary>Prevents updating or inserting until the transaction is complete.</summary>
    Serializable = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the automatic transaction type requested by the component.</summary>
  [DNTypeName('System.EnterpriseServices.TransactionOption')]
  DNTransactionOption = type Integer;
  DNTransactionOptionHelper = record helper for DNTransactionOption
  public const
    ///<summary>Ignores any transaction in the current context.</summary>
    Disabled = 0;
    ///<summary>Creates the component in a context with no governing transaction.</summary>
    NotSupported = 1;
    ///<summary>Shares a transaction, if one exists.</summary>
    Supported = 2;
    ///<summary>Shares a transaction, if one exists, and creates a new transaction if necessary.</summary>
    Required = 3;
    ///<summary>Creates the component with a new transaction, regardless of the state of the current context.</summary>
    RequiresNew = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Indicates the transaction status.</summary>
  [DNTypeName('System.EnterpriseServices.TransactionStatus')]
  DNTransactionStatus = type Integer;
  DNTransactionStatusHelper = record helper for DNTransactionStatus
  public const
    ///<summary>The transaction has committed.</summary>
    Commited = 0;
    ///<summary>The transaction has neither committed nor aborted.</summary>
    LocallyOk = 1;
    ///<summary>No transactions are being used through <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
    ///  .</summary>
    NoTransaction = 2;
    ///<summary>The transaction is in the process of aborting.</summary>
    Aborting = 3;
    ///<summary>The transaction is aborted.</summary>
    Aborted = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Specifies the values allowed for transaction outcome voting.</summary>
  [DNTypeName('System.EnterpriseServices.TransactionVote')]
  DNTransactionVote = type Integer;
  DNTransactionVoteHelper = record helper for DNTransactionVote
  public const
    ///<summary>Commits the current transaction.</summary>
    Commit = 0;
    ///<summary>Aborts the current transaction.</summary>
    Abort_ = 1;
  end;




type


{ declares }

  DNIAsyncErrorNotify = interface; // type: System.EnterpriseServices.IAsyncErrorNotify, namespace: System.EnterpriseServices
  DNIClrObjectFactory = interface; // type: System.EnterpriseServices.Internal.IClrObjectFactory, namespace: System.EnterpriseServices.Internal
  DNIComManagedImportUtil = interface; // type: System.EnterpriseServices.Internal.IComManagedImportUtil, namespace: System.EnterpriseServices.Internal
  DNIComSoapIISVRoot = interface; // type: System.EnterpriseServices.Internal.IComSoapIISVRoot, namespace: System.EnterpriseServices.Internal
  DNIComSoapMetadata = interface; // type: System.EnterpriseServices.Internal.IComSoapMetadata, namespace: System.EnterpriseServices.Internal
  DNIComSoapPublisher = interface; // type: System.EnterpriseServices.Internal.IComSoapPublisher, namespace: System.EnterpriseServices.Internal
  DNIServerWebConfig = interface; // type: System.EnterpriseServices.Internal.IServerWebConfig, namespace: System.EnterpriseServices.Internal
  DNISoapClientImport = interface; // type: System.EnterpriseServices.Internal.ISoapClientImport, namespace: System.EnterpriseServices.Internal
  DNISoapServerTlb = interface; // type: System.EnterpriseServices.Internal.ISoapServerTlb, namespace: System.EnterpriseServices.Internal
  DNISoapServerVRoot = interface; // type: System.EnterpriseServices.Internal.ISoapServerVRoot, namespace: System.EnterpriseServices.Internal
  DNISoapUtility = interface; // type: System.EnterpriseServices.Internal.ISoapUtility, namespace: System.EnterpriseServices.Internal
  DNIPlaybackControl = interface; // type: System.EnterpriseServices.IPlaybackControl, namespace: System.EnterpriseServices
  DNIProcessInitControl = interface; // type: System.EnterpriseServices.IProcessInitControl, namespace: System.EnterpriseServices
  DNIProcessInitializer = interface; // type: System.EnterpriseServices.IProcessInitializer, namespace: System.EnterpriseServices
  DNIRegistrationHelper = interface; // type: System.EnterpriseServices.IRegistrationHelper, namespace: System.EnterpriseServices
  DNIRemoteDispatch = interface; // type: System.EnterpriseServices.IRemoteDispatch, namespace: System.EnterpriseServices
  DNIServiceCall = interface; // type: System.EnterpriseServices.IServiceCall, namespace: System.EnterpriseServices
  DNIServicedComponentInfo = interface; // type: System.EnterpriseServices.IServicedComponentInfo, namespace: System.EnterpriseServices
  DNITransaction = interface; // type: System.EnterpriseServices.ITransaction, namespace: System.EnterpriseServices
  DNApplicationAccessControlAttribute = interface; // type: System.EnterpriseServices.ApplicationAccessControlAttribute, namespace: System.EnterpriseServices
  DNApplicationActivationAttribute = interface; // type: System.EnterpriseServices.ApplicationActivationAttribute, namespace: System.EnterpriseServices
  DNApplicationIDAttribute = interface; // type: System.EnterpriseServices.ApplicationIDAttribute, namespace: System.EnterpriseServices
  DNApplicationNameAttribute = interface; // type: System.EnterpriseServices.ApplicationNameAttribute, namespace: System.EnterpriseServices
  DNApplicationQueuingAttribute = interface; // type: System.EnterpriseServices.ApplicationQueuingAttribute, namespace: System.EnterpriseServices
  DNAutoCompleteAttribute = interface; // type: System.EnterpriseServices.AutoCompleteAttribute, namespace: System.EnterpriseServices
  DNApplicationCrmEnabledAttribute = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNComponentAccessControlAttribute = interface; // type: System.EnterpriseServices.ComponentAccessControlAttribute, namespace: System.EnterpriseServices
  DNCOMTIIntrinsicsAttribute = interface; // type: System.EnterpriseServices.COMTIIntrinsicsAttribute, namespace: System.EnterpriseServices
  DNConstructionEnabledAttribute = interface; // type: System.EnterpriseServices.ConstructionEnabledAttribute, namespace: System.EnterpriseServices
  DNDescriptionAttribute = interface; // type: System.EnterpriseServices.DescriptionAttribute, namespace: System.EnterpriseServices
  DNEventClassAttribute = interface; // type: System.EnterpriseServices.EventClassAttribute, namespace: System.EnterpriseServices
  DNEventTrackingEnabledAttribute = interface; // type: System.EnterpriseServices.EventTrackingEnabledAttribute, namespace: System.EnterpriseServices
  DNExceptionClassAttribute = interface; // type: System.EnterpriseServices.ExceptionClassAttribute, namespace: System.EnterpriseServices
  DNIISIntrinsicsAttribute = interface; // type: System.EnterpriseServices.IISIntrinsicsAttribute, namespace: System.EnterpriseServices
  DNInterfaceQueuingAttribute = interface; // type: System.EnterpriseServices.InterfaceQueuingAttribute, namespace: System.EnterpriseServices
  DNJustInTimeActivationAttribute = interface; // type: System.EnterpriseServices.JustInTimeActivationAttribute, namespace: System.EnterpriseServices
  DNLoadBalancingSupportedAttribute = interface; // type: System.EnterpriseServices.LoadBalancingSupportedAttribute, namespace: System.EnterpriseServices
  DNMustRunInClientContextAttribute = interface; // type: System.EnterpriseServices.MustRunInClientContextAttribute, namespace: System.EnterpriseServices
  DNObjectPoolingAttribute = interface; // type: System.EnterpriseServices.ObjectPoolingAttribute, namespace: System.EnterpriseServices
  DNPrivateComponentAttribute = interface; // type: System.EnterpriseServices.PrivateComponentAttribute, namespace: System.EnterpriseServices
  DNSecureMethodAttribute = interface; // type: System.EnterpriseServices.SecureMethodAttribute, namespace: System.EnterpriseServices
  DNSecurityRoleAttribute = interface; // type: System.EnterpriseServices.SecurityRoleAttribute, namespace: System.EnterpriseServices
  DNSynchronizationAttribute = interface; // type: System.EnterpriseServices.SynchronizationAttribute, namespace: System.EnterpriseServices
  DNTransactionAttribute = interface; // type: System.EnterpriseServices.TransactionAttribute, namespace: System.EnterpriseServices
  DNActivity = interface; // type: System.EnterpriseServices.Activity, namespace: System.EnterpriseServices
  DNBYOT = interface; // type: System.EnterpriseServices.BYOT, namespace: System.EnterpriseServices
  DNClerk = interface; // type: System.EnterpriseServices.CompensatingResourceManager.Clerk, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNClerkInfo = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ClerkInfo, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNClerkMonitor = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNLogRecord = interface; // type: System.EnterpriseServices.CompensatingResourceManager.LogRecord, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNContextUtil = interface; // type: System.EnterpriseServices.ContextUtil, namespace: System.EnterpriseServices
  DNAppDomainHelper = interface; // type: System.EnterpriseServices.Internal.AppDomainHelper, namespace: System.EnterpriseServices.Internal
  DNClientRemotingConfig = interface; // type: System.EnterpriseServices.Internal.ClientRemotingConfig, namespace: System.EnterpriseServices.Internal
  DNClrObjectFactory = interface; // type: System.EnterpriseServices.Internal.ClrObjectFactory, namespace: System.EnterpriseServices.Internal
  DNComManagedImportUtil = interface; // type: System.EnterpriseServices.Internal.ComManagedImportUtil, namespace: System.EnterpriseServices.Internal
  DNComSoapPublishError = interface; // type: System.EnterpriseServices.Internal.ComSoapPublishError, namespace: System.EnterpriseServices.Internal
  DNGenerateMetadata = interface; // type: System.EnterpriseServices.Internal.GenerateMetadata, namespace: System.EnterpriseServices.Internal
  DNIISVirtualRoot = interface; // type: System.EnterpriseServices.Internal.IISVirtualRoot, namespace: System.EnterpriseServices.Internal
  DNPublish = interface; // type: System.EnterpriseServices.Internal.Publish, namespace: System.EnterpriseServices.Internal
  DNServerWebConfig = interface; // type: System.EnterpriseServices.Internal.ServerWebConfig, namespace: System.EnterpriseServices.Internal
  DNSoapClientImport = interface; // type: System.EnterpriseServices.Internal.SoapClientImport, namespace: System.EnterpriseServices.Internal
  DNSoapServerTlb = interface; // type: System.EnterpriseServices.Internal.SoapServerTlb, namespace: System.EnterpriseServices.Internal
  DNSoapServerVRoot = interface; // type: System.EnterpriseServices.Internal.SoapServerVRoot, namespace: System.EnterpriseServices.Internal
  DNSoapUtility = interface; // type: System.EnterpriseServices.Internal.SoapUtility, namespace: System.EnterpriseServices.Internal
  DNRegistrationConfig = interface; // type: System.EnterpriseServices.RegistrationConfig, namespace: System.EnterpriseServices
  DNRegistrationErrorInfo = interface; // type: System.EnterpriseServices.RegistrationErrorInfo, namespace: System.EnterpriseServices
  DNResourcePool = interface; // type: System.EnterpriseServices.ResourcePool, namespace: System.EnterpriseServices
  DNSecurityCallContext = interface; // type: System.EnterpriseServices.SecurityCallContext, namespace: System.EnterpriseServices
  DNSecurityCallers = interface; // type: System.EnterpriseServices.SecurityCallers, namespace: System.EnterpriseServices
  DNSecurityIdentity = interface; // type: System.EnterpriseServices.SecurityIdentity, namespace: System.EnterpriseServices
  DNServiceConfig = interface; // type: System.EnterpriseServices.ServiceConfig, namespace: System.EnterpriseServices
  DNServiceDomain = interface; // type: System.EnterpriseServices.ServiceDomain, namespace: System.EnterpriseServices
  DNSharedProperty = interface; // type: System.EnterpriseServices.SharedProperty, namespace: System.EnterpriseServices
  DNSharedPropertyGroup = interface; // type: System.EnterpriseServices.SharedPropertyGroup, namespace: System.EnterpriseServices
  DNSharedPropertyGroupManager = interface; // type: System.EnterpriseServices.SharedPropertyGroupManager, namespace: System.EnterpriseServices
  DNRegistrationException = interface; // type: System.EnterpriseServices.RegistrationException, namespace: System.EnterpriseServices
  DNServicedComponentException = interface; // type: System.EnterpriseServices.ServicedComponentException, namespace: System.EnterpriseServices
  DNServicedComponent = interface; // type: System.EnterpriseServices.ServicedComponent, namespace: System.EnterpriseServices
  DNCompensator = interface; // type: System.EnterpriseServices.CompensatingResourceManager.Compensator, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNRegistrationHelperTx = interface; // type: System.EnterpriseServices.RegistrationHelperTx, namespace: System.EnterpriseServices
  DNAssemblyLocator = interface; // type: System.EnterpriseServices.Internal.AssemblyLocator, namespace: System.EnterpriseServices.Internal
  DNRegistrationHelper = interface; // type: System.EnterpriseServices.RegistrationHelper, namespace: System.EnterpriseServices
  DNBOID = interface; // type: System.EnterpriseServices.BOID, namespace: System.EnterpriseServices
  DNXACTTRANSINFO = interface; // type: System.EnterpriseServices.XACTTRANSINFO, namespace: System.EnterpriseServices

{ delegates }

  ///<summary>Represents the method that handles the ending of a transaction.</summary>
  ///  <param name="resource">The object that is passed back to the delegate. </param>
  [DNTypeName('System.EnterpriseServices.ResourcePool+TransactionEndDelegate')]
  DNResourcePool_TransactionEndDelegate = procedure(resource: DDN.mscorlib.DNObject) of object;




{ objects }

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Implements error trapping on the asynchronous batch work that is submitted by the <see cref="T:System.EnterpriseServices.Activity" />
  ///  object.</summary>
  [DNTypeName('System.EnterpriseServices.IAsyncErrorNotify')]
  DNIAsyncErrorNotify = interface(DDN.mscorlib.DNObject)
  ['{FE6777FB-A674-4177-8F32-6D707E113484}']
  { methods } 

    ///<summary>Handles errors for asynchronous batch work.</summary>
    ///  <param name="hresult">The HRESULT of the error that occurred while the batch work was running asynchronously. </param>
    procedure OnError(hresult: Int32);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Activates SOAP-enabled COM+ application proxies from a client.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IClrObjectFactory')]
  DNIClrObjectFactory = interface(DDN.mscorlib.DNObject)
  ['{ECABAFD2-7F19-11D2-978E-0000F8757E2A}']
  { methods } 

    ///<summary>Activates a remote assembly through .NET remoting, using the assembly's configuration file.</summary>
    ///  <param name="assembly">The name of the assembly to activate. </param>
    ///  <param name="type">The name of the type to activate. </param>
    ///  <param name="mode">Not used. </param>
    ///<returns>An instance of the <see cref="T:System.Object" />
    ///  representing the type, with culture, arguments, and binding and activation attributes set to <see langword="null" />
    ///  , or <see langword="null" />
    ///  if the <paramref name="type" />
    ///  parameter is not found.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.Runtime.InteropServices.COMException">The class is not registered. </exception>
    function CreateFromAssembly(assembly: string; &type: string; mode: string): DDN.mscorlib.DNObject;
    ///<summary>Activates a remote assembly through .NET remoting, using the virtual root URL of the remote assembly.</summary>
    ///  <param name="VrootUrl">The virtual root URL of the remote object. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>An instance of the <see cref="T:System.Object" />
    ///  representing the type, with culture, arguments, and binding and activation attributes set to <see langword="null" />
    ///  , or <see langword="null" />
    ///  if the assembly identified by the <paramref name="VrootUrl" />
    ///  parameter is not found.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
    function CreateFromVroot(VrootUrl: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>Activates a remote assembly through .NET remoting, using the Web Services Description Language (WSDL) of the XML Web service.</summary>
    ///  <param name="WsdlUrl">The WSDL URL of the Web service. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>An instance of the <see cref="T:System.Object" />
    ///  representing the type, with culture, arguments, and binding and activation attributes set to <see langword="null" />
    ///  , or <see langword="null" />
    ///  if the assembly identified by the <paramref name="WsdlUrl" />
    ///  parameter is not found.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
    function CreateFromWsdl(WsdlUrl: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>Activates a remote assembly through .NET remoting, using the remote assembly's mailbox. Currently not implemented; throws a <see cref="T:System.Runtime.InteropServices.COMException" />
    ///  if called.</summary>
    ///  <param name="Mailbox">A mailbox on the Web service. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>This method throws an exception if called.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">Simple Mail Transfer Protocol (SMTP) is not implemented. </exception>
    function CreateFromMailbox(Mailbox: string; Mode: string): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Identifies and installs components in the COM+ catalog.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComManagedImportUtil')]
  DNIComManagedImportUtil = interface(DDN.mscorlib.DNObject)
  ['{C3F8F66B-91BE-4C99-A94F-CE3B0A951039}']
  { methods } 

    procedure GetComponentInfo(assemblyPath: string; out numComponents: string; out componentInfo: string);
    ///<summary>Installs an assembly into a COM+ application.</summary>
    ///  <param name="filename">The path for the assembly. </param>
    ///  <param name="parname">The COM+ partition name. </param>
    ///  <param name="appname">The COM+ application name. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
    procedure InstallAssembly(filename: string; parname: string; appname: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Interface definition for creating and deleting Internet Information Services (IIS) 6.0 virtual roots.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapIISVRoot')]
  DNIComSoapIISVRoot = interface(DDN.mscorlib.DNObject)
  ['{D8013EF0-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure Create(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    procedure Delete(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Specifies methods for generating common language runtime (CLR) metadata for a COM+ component.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapMetadata')]
  DNIComSoapMetadata = interface(DDN.mscorlib.DNObject)
  ['{D8013FF0-730B-45E2-BA24-874B7242C425}']
  { methods } 

    ///<summary>Generates an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library.</summary>
    ///  <param name="SrcTypeLibFileName">The name of the type library for which to generate an assembly.</param>
    ///  <param name="OutPath">The folder in which to generate an assembly.</param>
    ///<returns>The generated assembly name.</returns>
    function Generate(SrcTypeLibFileName: string; OutPath: string): string;
    function GenerateSigned(SrcTypeLibFileName: string; OutPath: string; InstallGac: Boolean; out Error: string): string;

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Publishes COM interfaces for SOAP-enabled COM+ applications.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapPublisher')]
  DNIComSoapPublisher = interface(DDN.mscorlib.DNObject)
  ['{D8013EEE-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure CreateVirtualRoot(Operation: string; FullUrl: string; out BaseUrl: string; out VirtualRoot: string; out PhysicalPath: string; out Error: string);
    procedure DeleteVirtualRoot(RootWebServer: string; FullUrl: string; out Error: string);
    procedure CreateMailBox(RootMailServer: string; MailBox: string; out SmtpName: string; out Domain: string; out PhysicalPath: string; out Error: string);
    procedure DeleteMailBox(RootMailServer: string; MailBox: string; out Error: string);
    procedure ProcessServerTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; Operation: string; out AssemblyName: string; out TypeName: string; out Error: string);
    procedure ProcessClientTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; VRoot: string; BaseUrl: string; Mode: string; Transport: string; out AssemblyName: string; out TypeName: string; out Error: string);
    ///<summary>Reflects over an assembly and returns the type name that matches the ProgID.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///  <param name="ProgId">The programmatic identifier of the class. </param>
    ///<returns>The type name that matches the ProgID.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    function GetTypeNameFromProgId(AssemblyPath: string; ProgId: string): string;
    ///<summary>Registers an assembly for COM interop.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception><exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />
    ///  . </exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  is not found, or a file name extension is not specified. </exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  is not a valid assembly. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception><exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not <see langword="static" />
    ///  .-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not valid. </exception>
    procedure RegisterAssembly(AssemblyPath: string);
    ///<summary>Unregisters a COM interop assembly.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />
    ///  . </exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  is not found, or a file name extension is not specified. </exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  is not a valid assembly. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception><exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not <see langword="static" />
    ///  .-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not valid. </exception>
    procedure UnRegisterAssembly(AssemblyPath: string);
    ///<summary>Installs an assembly in the global assembly cache.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    procedure GacInstall(AssemblyPath: string);
    ///<summary>Removes an assembly from the global assembly cache.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException"><paramref name="AssemblyPath" />
    ///  is empty. </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  is not found. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  is not a valid assembly. </exception>
    procedure GacRemove(AssemblyPath: string);
    procedure GetAssemblyNameForCache(TypeLibPath: string; out CachePath: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Creates a Web.config file for a SOAP-enabled COM+ application and adds component entries to the file for COM interfaces being published in the application.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IServerWebConfig')]
  DNIServerWebConfig = interface(DDN.mscorlib.DNObject)
  ['{6261E4B5-572A-4142-A2F9-1FE1A0C97097}']
  { methods } 

    procedure AddElement(FilePath: string; AssemblyName: string; TypeName: string; ProgId: string; Mode: string; out Error: string);
    procedure Create(FilePath: string; FileRootName: string; out Error: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Imports authenticated, encrypted SOAP client proxies.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapClientImport')]
  DNISoapClientImport = interface(DDN.mscorlib.DNObject)
  ['{E7F0F021-9201-47E4-94DA-1D1416DEC27A}']
  { methods } 

    ///<summary>Creates a .NET remoting client configuration file that includes security and authentication options.</summary>
    ///  <param name="progId">The programmatic identifier of the class. If an empty string (""), this method returns without doing anything. </param>
    ///  <param name="virtualRoot">The name of the virtual root. </param>
    ///  <param name="baseUrl">The base URL that contains the virtual root. </param>
    ///  <param name="authentication">The type of ASP.NET authentication to use. </param>
    ///  <param name="assemblyName">The name of the assembly. </param>
    ///  <param name="typeName">The name of the type. </param>
    ///<exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    procedure ProcessClientTlbEx(progId: string; virtualRoot: string; baseUrl: string; authentication: string; assemblyName: string; typeName: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Processes authenticated, encrypted SOAP components on servers.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapServerTlb')]
  DNISoapServerTlb = interface(DDN.mscorlib.DNObject)
  ['{1E7BA9F7-21DB-4482-929E-21BDE2DFE51C}']
  { methods } 

    procedure AddServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; clientActivated: string; wellKnown: string; discoFile: string; operation: string; out assemblyName: string; out typeName: string);
    ///<summary>Removes entries for a server type library from the Web.config and Default.disco files, depending on security options.</summary>
    ///  <param name="progId">The programmatic identifier of the class. </param>
    ///  <param name="classId">The class identifier (CLSID) for the type library. </param>
    ///  <param name="interfaceId">The IID for the type library. </param>
    ///  <param name="srcTlbPath">The path for the file containing the type library. </param>
    ///  <param name="rootWebServer">The root Web server. </param>
    ///  <param name="baseUrl">The base URL that contains the virtual root. </param>
    ///  <param name="virtualRoot">The name of the virtual root. </param>
    ///  <param name="operation">Not used. Specify <see langword="null" />
    ///  for this parameter.</param>
    ///  <param name="assemblyName">The name of the assembly. </param>
    ///  <param name="typeName">The type of the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    procedure DeleteServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; operation: string; assemblyName: string; typeName: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Publishes authenticated, encrypted SOAP virtual roots on servers.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapServerVRoot')]
  DNISoapServerVRoot = interface(DDN.mscorlib.DNObject)
  ['{A31B6577-71D2-4344-AEDF-ADC1B0DC5347}']
  { methods } 

    procedure CreateVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; homePage: string; discoFile: string; secureSockets: string; authentication: string; operation: string; out baseUrl: string; out virtualRoot: string; out physicalPath: string);
    ///<summary>Deletes a virtual root. Not fully implemented.</summary>
    ///  <param name="rootWebServer">The root Web server. </param>
    ///  <param name="baseUrl">The base URL that contains the virtual root. </param>
    ///  <param name="virtualRoot">The name of the virtual root. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception><exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to identify the system directory failed. </exception>
    procedure DeleteVirtualRootEx(rootWebServer: string; baseUrl: string; virtualRoot: string);
    procedure GetVirtualRootStatus(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out exists: string; out secureSockets: string; out windowsAuth: string; out anonymous: string; out homePage: string; out discoFile: string; out physicalPath: string; out baseUrl: string; out virtualRoot: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapUtility')]
  DNISoapUtility = interface(DDN.mscorlib.DNObject)
  ['{5AC4CB7E-F89F-429B-926B-C7F940936BF4}']
  { methods } 

    procedure GetServerPhysicalPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out physicalPath: string);
    procedure GetServerBinPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out binPath: string);
    ///<summary>Determines whether authenticated, encrypted SOAP interfaces are present.</summary>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    procedure Present;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</summary>
  [DNTypeName('System.EnterpriseServices.IPlaybackControl')]
  DNIPlaybackControl = interface(DDN.mscorlib.DNObject)
  ['{51372AFD-CAE7-11CF-BE81-00AA00A2FA25}']
  { methods } 

    ///<summary>Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</summary>
    procedure FinalClientRetry;
    ///<summary>Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</summary>
    procedure FinalServerRetry;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Supports setting the time-out for the <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
  ///  method.</summary>
  [DNTypeName('System.EnterpriseServices.IProcessInitControl')]
  DNIProcessInitControl = interface(DDN.mscorlib.DNObject)
  ['{72380D55-8D2B-43A3-8513-2B6EF31434E9}']
  { methods } 

    ///<summary>Sets the number of seconds remaining before the <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
    ///  method times out.</summary>
    ///  <param name="dwSecondsRemaining">The number of seconds that remain before the time taken to execute the start up method times out. </param>
    procedure ResetInitializerTimeout(dwSecondsRemaining: Int32);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Supports methods that can be called when a COM component starts up or shuts down.</summary>
  [DNTypeName('System.EnterpriseServices.IProcessInitializer')]
  DNIProcessInitializer = interface(DDN.mscorlib.DNObject)
  ['{1113F52D-DC7F-4943-AED6-88D04027E32A}']
  { methods } 

    ///<summary>Performs initialization at startup. Called when Dllhost.exe is started.</summary>
    ///  <param name="punkProcessControl">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" />
    ///  interface of the COM component starting up. In Microsoft Windows 2000, this argument is always <see langword="null" />
    ///  . </param>
    procedure Startup(punkProcessControl: DDN.mscorlib.DNObject);
    ///<summary>Performs shutdown actions. Called when Dllhost.exe is shut down.</summary>
    procedure Shutdown;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Installs and configures assemblies in the COM+ catalog.</summary>
  [DNTypeName('System.EnterpriseServices.IRegistrationHelper')]
  DNIRegistrationHelper = interface(DDN.mscorlib.DNObject)
  ['{55E3EA25-55CB-4650-8887-18E8D30BB4BC}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags);
    ///<summary>Uninstalls the assembly from the COM+ catalog.</summary>
    ///  <param name="assembly">The assembly name as a file or the strong name of an assembly in the global assembly cache (GAC). </param>
    ///  <param name="application">The name of the COM+ application. </param>
    procedure UninstallAssembly(assembly: string; application: string);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Implemented by the <see cref="T:System.EnterpriseServices.ServicedComponent" />
  ///  class to determine if the <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" />
  ///  class attribute is set to <see langword="true" />
  ///  or <see langword="false" />
  ///  for a remote method invocation.</summary>
  [DNTypeName('System.EnterpriseServices.IRemoteDispatch')]
  DNIRemoteDispatch = interface(DDN.mscorlib.DNObject)
  ['{6619A740-8154-43BE-A186-0319578E02DB}']
  { methods } 

    ///<summary>Ensures that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  class object's done bit is set to <see langword="true" />
    ///  after a remote method invocation.</summary>
    ///  <param name="s">A string to be converted into a request object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" />
    ///  interface.</param>
    ///<returns>A string converted from a response object that implements the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" />
    ///  interface.</returns>
    function RemoteDispatchAutoDone(s: string): string;
    ///<summary>Does not ensure that, in the COM+ context, the <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  class object's done bit is set to <see langword="true" />
    ///  after a remote method invocation.</summary>
    ///  <param name="s">A string to be converted into a request object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMessage" />
    ///  interface.</param>
    ///<returns>A string converted from a response object implementing the <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" />
    ///  interface.</returns>
    function RemoteDispatchNotAutoDone(s: string): string;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Implements the batch work that is submitted through the activity created by <see cref="T:System.EnterpriseServices.Activity" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.IServiceCall')]
  DNIServiceCall = interface(DDN.mscorlib.DNObject)
  ['{BD3E2E12-42DD-40F4-A09A-95A50C58304B}']
  { methods } 

    ///<summary>Starts the execution of the batch work implemented in this method.</summary>
    procedure OnCall;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Implemented by the <see cref="T:System.EnterpriseServices.ServicedComponent" />
  ///  class to obtain information about the component via the <see cref="M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)" />
  ///  method.</summary>
  [DNTypeName('System.EnterpriseServices.IServicedComponentInfo')]
  DNIServicedComponentInfo = interface(DDN.mscorlib.DNObject)
  ['{8165B19E-8D3A-4D0B-80C8-97DE310DB583}']
  { methods } 

    procedure GetComponentInfo(out infoMask: Int32; out infoArray: TArray<string>);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>Corresponds to the Distributed Transaction Coordinator (DTC) <see langword="ITransaction" />
  ///  interface and is supported by objects obtained through <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.ITransaction')]
  DNITransaction = interface(DDN.mscorlib.DNObject)
  ['{0FB15084-AF41-11CE-BD2B-204C4F4F5020}']
  { methods } 

    ///<summary>Commits the transaction.</summary>
    ///  <param name="fRetaining">Must be <see langword="false" />
    ///  . </param>
    ///  <param name="grfTC">A value taken from the OLE DB enumeration <see langword="XACTTC" />
    ///  . </param>
    ///  <param name="grfRM">Must be zero. </param>
    procedure Commit(fRetaining: Int32; grfTC: Int32; grfRM: Int32);
    procedure &Abort(out pboidReason: DNBOID; fRetaining: Int32; fAsync: Int32);
    procedure GetTransactionInfo(out pinfo: DNXACTTRANSINFO);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationAccessControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{ADA5F3F2-93BE-5D1E-BD55-88A6A550CE0E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" />
    ///  class, enabling the COM+ security configuration.</summary>
    {class} function init: DNApplicationAccessControlAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Value" />
    ///  property indicating whether to enable COM security configuration.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to allow configuration of security; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNApplicationAccessControlAttribute; overload;

  end;

  ///<summary>Specifies access controls to an assembly containing <see cref="T:System.EnterpriseServices.ServicedComponent" />
  ///  classes.</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationAccessControlAttribute')]
  DNApplicationAccessControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A97847C8-25CD-3920-A625-7CE6AAFDC1A4}']
  { getters & setters } 

    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_AccessChecksLevel: DNAccessChecksLevelOption;
    procedure set_AccessChecksLevel(value: DNAccessChecksLevelOption);
    function get_Authentication: DNAuthenticationOption;
    procedure set_Authentication(value: DNAuthenticationOption);
    function get_ImpersonationLevel: DNImpersonationLevelOption;
    procedure set_ImpersonationLevel(value: DNImpersonationLevelOption);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether to enable COM+ security configuration.</summary>
    ///<returns><see langword="true" />
    ///  if COM+ security configuration is enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property Value: Boolean read get_Value write set_Value;
    ///<summary>Gets or sets the access checking level to process level or to component level.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.AccessChecksLevelOption" />
    ///  values.</returns>
    property AccessChecksLevel: DNAccessChecksLevelOption read get_AccessChecksLevel write set_AccessChecksLevel;
    ///<summary>Gets or sets the remote procedure call (RPC) authentication level.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.AuthenticationOption" />
    ///  values.</returns>
    property Authentication: DNAuthenticationOption read get_Authentication write set_Authentication;
    ///<summary>Gets or sets the impersonation level that is allowed for calling targets of this application.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" />
    ///  values.</returns>
    property ImpersonationLevel: DNImpersonationLevelOption read get_ImpersonationLevel write set_ImpersonationLevel;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationAccessControlAttribute = class(TDNGenericImport<DNApplicationAccessControlAttributeClass, DNApplicationAccessControlAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationActivationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A565F613-319A-59A1-80DB-45AEFF2770F3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationActivationAttribute" />
    ///  class, setting the specified <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  value.</summary>
    ///  <param name="opt">One of the <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  values. </param>
    {class} function init(opt: DNActivationOption): DNApplicationActivationAttribute;

  end;

  ///<summary>Specifies whether components in the assembly run in the creator's process or in a system process.</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationActivationAttribute')]
  DNApplicationActivationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C98E118E-F497-3BAB-95F6-179AFF0F3F3E}']
  { getters & setters } 

    function get_Value: DNActivationOption;
    function get_SoapVRoot: string;
    procedure set_SoapVRoot(value: string);
    function get_SoapMailbox: string;
    procedure set_SoapMailbox(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the specified <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  value.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  values, either <see langword="Library" />
    ///  or <see langword="Server" />
    ///  .</returns>
    property Value: DNActivationOption read get_Value;
    ///<summary>Gets or sets a value representing a virtual root on the Web for the COM+ application.</summary>
    ///<returns>The virtual root on the Web for the COM+ application.</returns>
    property SoapVRoot: string read get_SoapVRoot write set_SoapVRoot;
    ///<summary>This property is not supported in the current version.</summary>
    ///<returns>This property is not supported in the current version.</returns>
    property SoapMailbox: string read get_SoapMailbox write set_SoapMailbox;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationActivationAttribute = class(TDNGenericImport<DNApplicationActivationAttributeClass, DNApplicationActivationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationIDAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{682ADE8A-7F2D-58C1-9AC8-867C18A7E4C7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationIDAttribute" />
    ///  class specifying the GUID representing the application ID for the COM+ application.</summary>
    ///  <param name="guid">The GUID associated with the COM+ application. </param>
    {class} function init(guid: string): DNApplicationIDAttribute;

  end;

  ///<summary>Specifies the application ID (as a GUID) for this assembly. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationIDAttribute')]
  DNApplicationIDAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D46C7808-27C1-310C-AF39-878F73C484DD}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNGuid;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the GUID of the COM+ application.</summary>
    ///<returns>The GUID representing the COM+ application.</returns>
    property Value: DDN.mscorlib.DNGuid read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationIDAttribute = class(TDNGenericImport<DNApplicationIDAttributeClass, DNApplicationIDAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{00AF6B53-F283-5C29-89B7-0AB09E8FD8A1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" />
    ///  class, specifying the name of the COM+ application to be used for the install of the components.</summary>
    ///  <param name="name">The name of the COM+ application. </param>
    {class} function init(name: string): DNApplicationNameAttribute;

  end;

  ///<summary>Specifies the name of the COM+ application to be used for the install of the components in the assembly. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationNameAttribute')]
  DNApplicationNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D58326F2-CF98-3EBB-A416-C9207B385E85}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating the name of the COM+ application that contains the components in the assembly.</summary>
    ///<returns>The name of the COM+ application.</returns>
    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationNameAttribute = class(TDNGenericImport<DNApplicationNameAttributeClass, DNApplicationNameAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationQueuingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8FB7BC14-8B88-5C1E-B9B0-C9DCF7014BD2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ApplicationQueuingAttribute" />
    ///  class, enabling queuing support for the assembly and initializing <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.Enabled" />
    ///  , <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.QueueListenerEnabled" />
    ///  , and <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.MaxListenerThreads" />
    ///  .</summary>
    {class} function init: DNApplicationQueuingAttribute;

  end;

  ///<summary>Enables queuing support for the marked assembly and enables the application to read method calls from Message Queuing queues. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationQueuingAttribute')]
  DNApplicationQueuingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CFC1BBA3-9ADC-3CA7-B32A-C579FC206DCA}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_QueueListenerEnabled: Boolean;
    procedure set_QueueListenerEnabled(value: Boolean);
    function get_MaxListenerThreads: Int32;
    procedure set_MaxListenerThreads(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether queuing support is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if queuing support is enabled; otherwise, <see langword="false" />
    ///  . The default value set by the constructor is <see langword="true" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>Gets or sets a value indicating whether the application will accept queued component calls from clients.</summary>
    ///<returns><see langword="true" />
    ///  if the application accepts queued component calls; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property QueueListenerEnabled: Boolean read get_QueueListenerEnabled write set_QueueListenerEnabled;
    ///<summary>Gets or sets the number of threads used to extract messages from the queue and activate the corresponding component.</summary>
    ///<returns>The maximum number of threads to use for processing messages arriving in the queue. The default is zero.</returns>
    property MaxListenerThreads: Int32 read get_MaxListenerThreads write set_MaxListenerThreads;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationQueuingAttribute = class(TDNGenericImport<DNApplicationQueuingAttributeClass, DNApplicationQueuingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNAutoCompleteAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{AB560E86-7DC4-5CE3-886B-08D7A7BC6B7A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" />
    ///  class, specifying that the application should automatically call <see cref="M:System.EnterpriseServices.ContextUtil.SetComplete" />
    ///  if the transaction completes successfully.</summary>
    {class} function init: DNAutoCompleteAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" />
    ///  class, specifying whether COM+ <see langword="AutoComplete" />
    ///  is enabled.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable <see langword="AutoComplete" />
    ///  in the COM+ object; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNAutoCompleteAttribute; overload;

  end;

  ///<summary>Marks the attributed method as an <see langword="AutoComplete" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.AutoCompleteAttribute')]
  DNAutoCompleteAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{716FFD45-C48F-3AC1-BBCD-A98B80168C94}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating the setting of the <see langword="AutoComplete" />
    ///  option in COM+.</summary>
    ///<returns><see langword="true" />
    ///  if <see langword="AutoComplete" />
    ///  is enabled in COM+; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAutoCompleteAttribute = class(TDNGenericImport<DNAutoCompleteAttributeClass, DNAutoCompleteAttribute>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNApplicationCrmEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C44CC22F-F869-5984-924A-7596BED1F200}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" />
    ///  class, setting the <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" />
    ///  property to <see langword="true" />
    ///  .</summary>
    {class} function init: DNApplicationCrmEnabledAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" />
    ///  class, optionally setting the <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" />
    ///  property to <see langword="false" />
    ///  .</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable Compensating Resource Manager (CRM); otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNApplicationCrmEnabledAttribute; overload;

  end;

  ///<summary>Enables Compensating Resource Manger (CRM) on the tagged application.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute')]
  DNApplicationCrmEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5660C538-2D43-3898-9B97-18D4E62301BF}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Enables or disables Compensating Resource Manager (CRM) on the tagged application.</summary>
    ///<returns><see langword="true" />
    ///  if CRM is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationCrmEnabledAttribute = class(TDNGenericImport<DNApplicationCrmEnabledAttributeClass, DNApplicationCrmEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNComponentAccessControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{21EAFF0C-BB12-594A-9C3C-1D39241D71B9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" />
    ///  class.</summary>
    {class} function init: DNComponentAccessControlAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.ComponentAccessControlAttribute.Value" />
    ///  property to indicate whether to enable COM+ security configuration.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable security checking on calls to a component; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNComponentAccessControlAttribute; overload;

  end;

  ///<summary>Enables security checking on calls to a component. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ComponentAccessControlAttribute')]
  DNComponentAccessControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{25D2DC1F-137C-314E-A3B5-C76FB6FA9261}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether to enable security checking on calls to a component.</summary>
    ///<returns><see langword="true" />
    ///  if security checking is to be enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComponentAccessControlAttribute = class(TDNGenericImport<DNComponentAccessControlAttributeClass, DNComponentAccessControlAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNCOMTIIntrinsicsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CD96A9E0-97C0-55FB-8BB1-089A30071B2C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" />
    ///  class, setting the <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" />
    ///  property to <see langword="true" />
    ///  .</summary>
    {class} function init: DNCOMTIIntrinsicsAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" />
    ///  class, enabling the setting of the <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" />
    ///  property.</summary>
    ///  <param name="val"><see langword="true" />
    ///  if the COMTI context properties are passed into the COM+ context; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNCOMTIIntrinsicsAttribute; overload;

  end;

  ///<summary>Enables you to pass context properties from the COM Transaction Integrator (COMTI) into the COM+ context.</summary>
  [DNTypeName('System.EnterpriseServices.COMTIIntrinsicsAttribute')]
  DNCOMTIIntrinsicsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{11D72D39-2416-31BB-96F3-9FAFB5BE5FB7}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether the COM Transaction Integrator (COMTI) context properties are passed into the COM+ context.</summary>
    ///<returns><see langword="true" />
    ///  if the COMTI context properties are passed into the COM+ context; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCOMTIIntrinsicsAttribute = class(TDNGenericImport<DNCOMTIIntrinsicsAttributeClass, DNCOMTIIntrinsicsAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNConstructionEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A61445E0-30CE-5960-94E2-1C100627449E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" />
    ///  class and initializes the default settings for <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" />
    ///  and <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Default" />
    ///  .</summary>
    {class} function init: DNConstructionEnabledAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" />
    ///  class, setting <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" />
    ///  to the specified value.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable COM+ object construction support; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNConstructionEnabledAttribute; overload;

  end;

  ///<summary>Enables COM+ object construction support. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ConstructionEnabledAttribute')]
  DNConstructionEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{663EA5B9-F869-312F-9E1E-C853AFF55C7C}']
  { getters & setters } 

    function get_Default: string;
    procedure set_Default(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a default value for the constructor string.</summary>
    ///<returns>The value to be used for the default constructor string. The default is an empty string ("").</returns>
    property &Default: string read get_Default write set_Default;
    ///<summary>Gets or sets a value indicating whether COM+ object construction support is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if COM+ object construction support is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConstructionEnabledAttribute = class(TDNGenericImport<DNConstructionEnabledAttributeClass, DNConstructionEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1ED5A3A6-44F5-5F41-8BC5-D2C010ED7268}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.DescriptionAttribute" />
    ///  class.</summary>
    ///  <param name="desc">The description of the assembly (application), component, method, or interface. </param>
    {class} function init(desc: string): DNDescriptionAttribute;

  end;

  ///<summary>Sets the description on an assembly (application), component, method, or interface. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.DescriptionAttribute')]
  DNDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{AE9ADC25-FB27-3A3A-8F4C-C89BAE68D1C1}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDescriptionAttribute = class(TDNGenericImport<DNDescriptionAttributeClass, DNDescriptionAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNEventClassAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BF18B6E9-1713-5537-8873-C23360EC87D5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.EventClassAttribute" />
    ///  class.</summary>
    {class} function init: DNEventClassAttribute;

  end;

  ///<summary>Marks the attributed class as an event class. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.EventClassAttribute')]
  DNEventClassAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CB4C3E3F-BEB0-360F-A0D8-E046CA327980}']
  { getters & setters } 

    function get_FireInParallel: Boolean;
    procedure set_FireInParallel(value: Boolean);
    function get_AllowInprocSubscribers: Boolean;
    procedure set_AllowInprocSubscribers(value: Boolean);
    function get_PublisherFilter: string;
    procedure set_PublisherFilter(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether events are to be delivered to subscribers in parallel.</summary>
    ///<returns><see langword="true" />
    ///  if events are to be delivered to subscribers in parallel; otherwise, <see langword="false" />
    ///  .</returns>
    property FireInParallel: Boolean read get_FireInParallel write set_FireInParallel;
    ///<summary>Gets or sets a value that indicates whether subscribers can be activated in the publisher's process.</summary>
    ///<returns><see langword="true" />
    ///  if subscribers can be activated in the publisher's process; otherwise, <see langword="false" />
    ///  .</returns>
    property AllowInprocSubscribers: Boolean read get_AllowInprocSubscribers write set_AllowInprocSubscribers;
    ///<summary>Gets or sets a publisher filter for an event method.</summary>
    ///<returns>The publisher filter.</returns>
    property PublisherFilter: string read get_PublisherFilter write set_PublisherFilter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventClassAttribute = class(TDNGenericImport<DNEventClassAttributeClass, DNEventClassAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNEventTrackingEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{25539F05-7FDD-5ECD-8DD2-8352549C86EA}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" />
    ///  class, enabling event tracking.</summary>
    {class} function init: DNEventTrackingEnabledAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" />
    ///  class, optionally disabling event tracking.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable event tracking; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNEventTrackingEnabledAttribute; overload;

  end;

  ///<summary>Enables event tracking for a component. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.EventTrackingEnabledAttribute')]
  DNEventTrackingEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{23F9D804-2D9F-3D68-A568-7729EC8841FB}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the value of the <see cref="P:System.EnterpriseServices.EventTrackingEnabledAttribute.Value" />
    ///  property, which indicates whether tracking is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if tracking is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventTrackingEnabledAttribute = class(TDNGenericImport<DNEventTrackingEnabledAttributeClass, DNEventTrackingEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNExceptionClassAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{16D8ED63-E880-5592-B361-395FB7EBF754}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ExceptionClassAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the exception class for the player to activate and play back before the message is routed to the dead letter queue. </param>
    {class} function init(name: string): DNExceptionClassAttribute;

  end;

  ///<summary>Sets the queuing exception class for the queued class. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ExceptionClassAttribute')]
  DNExceptionClassAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D1218C2B-C79C-3955-9B6B-1D28DBB1B658}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the exception class for the player to activate and play back before the message is routed to the dead letter queue.</summary>
    ///<returns>The name of the exception class for the player to activate and play back before the message is routed to the dead letter queue.</returns>
    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExceptionClassAttribute = class(TDNGenericImport<DNExceptionClassAttributeClass, DNExceptionClassAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNIISIntrinsicsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7564B395-7085-55BD-8964-1A5738E191B3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" />
    ///  class, enabling access to the ASP intrinsic values.</summary>
    {class} function init: DNIISIntrinsicsAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" />
    ///  class, optionally disabling access to the ASP intrinsic values.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable access to the ASP intrinsic values; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNIISIntrinsicsAttribute; overload;

  end;

  ///<summary>Enables access to ASP intrinsic values from <see cref="M:System.EnterpriseServices.ContextUtil.GetNamedProperty(System.String)" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.IISIntrinsicsAttribute')]
  DNIISIntrinsicsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CD0631E1-0884-3150-B28A-27B2E3F9E02F}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether access to the ASP intrinsic values is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if access is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNIISIntrinsicsAttribute = class(TDNGenericImport<DNIISIntrinsicsAttributeClass, DNIISIntrinsicsAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNInterfaceQueuingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B1190970-FA2F-5FCC-8573-F3A362DCA298}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" />
    ///  class setting the <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled" />
    ///  and <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Interface" />
    ///  properties to their default values.</summary>
    {class} function init: DNInterfaceQueuingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" />
    ///  class, optionally disabling queuing support.</summary>
    ///  <param name="enabled"><see langword="true" />
    ///  to enable queuing support; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(enabled: Boolean): DNInterfaceQueuingAttribute; overload;

  end;

  ///<summary>Enables queuing support for the marked interface. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.InterfaceQueuingAttribute')]
  DNInterfaceQueuingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5878DCE6-A2DB-3824-B9E3-6B3104F1F604}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Interface: string;
    procedure set_Interface(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether queuing support is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if queuing support is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>Gets or sets the name of the interface on which queuing is enabled.</summary>
    ///<returns>The name of the interface on which queuing is enabled.</returns>
    property &Interface: string read get_Interface write set_Interface;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInterfaceQueuingAttribute = class(TDNGenericImport<DNInterfaceQueuingAttributeClass, DNInterfaceQueuingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNJustInTimeActivationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C76A9B8B-C52D-56C6-BDEE-CD904EC42E56}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" />
    ///  class. The default constructor enables just-in-time (JIT) activation.</summary>
    {class} function init: DNJustInTimeActivationAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" />
    ///  class, optionally allowing the disabling of just-in-time (JIT) activation by passing <see langword="false" />
    ///  as the parameter.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable JIT activation; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNJustInTimeActivationAttribute; overload;

  end;

  ///<summary>Turns just-in-time (JIT) activation on or off. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.JustInTimeActivationAttribute')]
  DNJustInTimeActivationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F474818B-17F2-3355-879F-CE76A1E423E2}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the value of the <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" />
    ///  setting.</summary>
    ///<returns><see langword="true" />
    ///  if JIT activation is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNJustInTimeActivationAttribute = class(TDNGenericImport<DNJustInTimeActivationAttributeClass, DNJustInTimeActivationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNLoadBalancingSupportedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4622F06B-8A0C-5FF2-83BE-6625B6BAF21B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" />
    ///  class, specifying load balancing support.</summary>
    {class} function init: DNLoadBalancingSupportedAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" />
    ///  class, optionally disabling load balancing support.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to enable load balancing support; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNLoadBalancingSupportedAttribute; overload;

  end;

  ///<summary>Determines whether the component participates in load balancing, if the component load balancing service is installed and enabled on the server.</summary>
  [DNTypeName('System.EnterpriseServices.LoadBalancingSupportedAttribute')]
  DNLoadBalancingSupportedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3B52C20E-7B24-3318-8883-D12ED5B59D08}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether load balancing support is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if load balancing support is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLoadBalancingSupportedAttribute = class(TDNGenericImport<DNLoadBalancingSupportedAttributeClass, DNLoadBalancingSupportedAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNMustRunInClientContextAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{04E30D4F-7E68-575F-A8CA-736491220A0B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" />
    ///  class, requiring creation of the object in the context of the creator.</summary>
    {class} function init: DNMustRunInClientContextAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" />
    ///  class, optionally not creating the object in the context of the creator.</summary>
    ///  <param name="val"><see langword="true" />
    ///  to create the object in the context of the creator; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(val: Boolean): DNMustRunInClientContextAttribute; overload;

  end;

  ///<summary>Forces the attributed object to be created in the context of the creator, if possible. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.MustRunInClientContextAttribute')]
  DNMustRunInClientContextAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B76A034B-A3BF-3B69-BD16-98FB69E8DF75}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the attributed object is to be created in the context of the creator.</summary>
    ///<returns><see langword="true" />
    ///  if the object is to be created in the context of the creator; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMustRunInClientContextAttribute = class(TDNGenericImport<DNMustRunInClientContextAttributeClass, DNMustRunInClientContextAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNObjectPoolingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5DA85AD7-B7CA-5CF8-9788-1B20D0036C55}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />
    ///  , <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />
    ///  , <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />
    ///  , and <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout" />
    ///  properties to their default values.</summary>
    {class} function init: DNObjectPoolingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />
    ///  and <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />
    ///  properties.</summary>
    ///  <param name="minPoolSize">The minimum pool size. </param>
    ///  <param name="maxPoolSize">The maximum pool size. </param>
    {class} function init(minPoolSize: Int32; maxPoolSize: Int32): DNObjectPoolingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />
    ///  property.</summary>
    ///  <param name="enable"><see langword="true" />
    ///  to enable object pooling; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(enable: Boolean): DNObjectPoolingAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />
    ///  , <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />
    ///  , and <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />
    ///  properties.</summary>
    ///  <param name="enable"><see langword="true" />
    ///  to enable object pooling; otherwise, <see langword="false" />
    ///  . </param>
    ///  <param name="minPoolSize">The minimum pool size.</param>
    ///  <param name="maxPoolSize">The maximum pool size.</param>
    {class} function init(enable: Boolean; minPoolSize: Int32; maxPoolSize: Int32): DNObjectPoolingAttribute; overload;

  end;

  ///<summary>Enables and configures object pooling for a component. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ObjectPoolingAttribute')]
  DNObjectPoolingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C31DE944-F875-3456-ACE7-5E1D8C4DB52C}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_MaxPoolSize: Int32;
    procedure set_MaxPoolSize(value: Int32);
    function get_MinPoolSize: Int32;
    procedure set_MinPoolSize(value: Int32);
    function get_CreationTimeout: Int32;
    procedure set_CreationTimeout(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog.</summary>
    ///  <param name="info">A hash table that contains internal objects referenced by internal keys.</param>
    ///<returns><see langword="true" />
    ///  if the method has made changes.</returns>
    function AfterSaveChanges(info: DDN.mscorlib.DNHashtable): Boolean;
    ///<summary>Called internally by the .NET Framework infrastructure while installing and configuring assemblies in the COM+ catalog.</summary>
    ///  <param name="s">A string generated by the .NET Framework infrastructure that is checked for a special value that indicates a serviced component.</param>
    ///<returns><see langword="true" />
    ///  if the attribute is applied to a serviced component class.</returns>
    function IsValidTarget(s: string): Boolean;
    ///<summary>Called internally by the .NET Framework infrastructure while applying the <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  class attribute to a serviced component.</summary>
    ///  <param name="info">A hash table that contains an internal object to which object pooling properties are applied, referenced by an internal key.</param>
    ///<returns><see langword="true " />
    ///  if the method has made changes.</returns>
    function Apply(info: DDN.mscorlib.DNHashtable): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether object pooling is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if object pooling is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>Gets or sets the value for the maximum size of the pool.</summary>
    ///<returns>The maximum number of objects in the pool.</returns>
    property MaxPoolSize: Int32 read get_MaxPoolSize write set_MaxPoolSize;
    ///<summary>Gets or sets the value for the minimum size of the pool.</summary>
    ///<returns>The minimum number of objects in the pool.</returns>
    property MinPoolSize: Int32 read get_MinPoolSize write set_MinPoolSize;
    ///<summary>Gets or sets the length of time to wait for an object to become available in the pool before throwing an exception. This value is in milliseconds.</summary>
    ///<returns>The time-out value in milliseconds.</returns>
    property CreationTimeout: Int32 read get_CreationTimeout write set_CreationTimeout;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNObjectPoolingAttribute = class(TDNGenericImport<DNObjectPoolingAttributeClass, DNObjectPoolingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNPrivateComponentAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2FF08221-213D-5D73-907F-37B936E26FE4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.PrivateComponentAttribute" />
    ///  class.</summary>
    {class} function init: DNPrivateComponentAttribute;

  end;

  ///<summary>Identifies a component as a private component that is only seen and activated by components in the same application. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.PrivateComponentAttribute')]
  DNPrivateComponentAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C115C7F2-B678-3EE8-8841-D4382A90EC5E}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPrivateComponentAttribute = class(TDNGenericImport<DNPrivateComponentAttributeClass, DNPrivateComponentAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecureMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{814D1137-E47E-5C1B-BCF2-FD3C4147FA31}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SecureMethodAttribute" />
    ///  class.</summary>
    {class} function init: DNSecureMethodAttribute;

  end;

  ///<summary>Ensures that the infrastructure calls through an interface for a method or for each method in a class when using the security service. Classes need to use interfaces to use security services. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.SecureMethodAttribute')]
  DNSecureMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{05325407-D6C0-318C-9B09-87747E1EE1EF}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSecureMethodAttribute = class(TDNGenericImport<DNSecureMethodAttributeClass, DNSecureMethodAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityRoleAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F2AE9B18-0D03-530E-9882-6773099B915D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" />
    ///  property.</summary>
    ///  <param name="role">A security role for the application, component, interface, or method. </param>
    {class} function init(role: string): DNSecurityRoleAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" />
    ///  class and sets the <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" />
    ///  and <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess" />
    ///  properties.</summary>
    ///  <param name="role">A security role for the application, component, interface, or method. </param>
    ///  <param name="everyone"><see langword="true" />
    ///  to require that the newly created role have the Everyone user group added as a user; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(role: string; everyone: Boolean): DNSecurityRoleAttribute; overload;

  end;

  ///<summary>Configures a role for an application or component. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.SecurityRoleAttribute')]
  DNSecurityRoleAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1BA2F66F-B4E6-357D-9F73-B7A064E43A68}']
  { getters & setters } 

    function get_Role: string;
    procedure set_Role(value: string);
    function get_SetEveryoneAccess: Boolean;
    procedure set_SetEveryoneAccess(value: Boolean);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the security role.</summary>
    ///<returns>The security role applied to an application, component, interface, or method.</returns>
    property Role: string read get_Role write set_Role;
    ///<summary>Sets a value indicating whether to add the Everyone user group as a user.</summary>
    ///<returns><see langword="true" />
    ///  to require that a newly created role have the Everyone user group added as a user (roles that already exist on the application are not modified); otherwise, <see langword="false" />
    ///  to suppress adding the Everyone user group as a user.</returns>
    property SetEveryoneAccess: Boolean read get_SetEveryoneAccess write set_SetEveryoneAccess;
    ///<summary>Gets or sets the role description.</summary>
    ///<returns>The description for the role.</returns>
    property Description: string read get_Description write set_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSecurityRoleAttribute = class(TDNGenericImport<DNSecurityRoleAttributeClass, DNSecurityRoleAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSynchronizationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0C6894F5-C9ED-5398-A0D6-3DFB3F89D0BB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SynchronizationAttribute" />
    ///  class with the default <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  .</summary>
    {class} function init: DNSynchronizationAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SynchronizationAttribute" />
    ///  class with the specified <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  .</summary>
    ///  <param name="val">One of the <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  values. </param>
    {class} function init(val: DNSynchronizationOption): DNSynchronizationAttribute; overload;

  end;

  ///<summary>Sets the synchronization value of the component. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.SynchronizationAttribute')]
  DNSynchronizationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{EDEC979B-B058-35A1-A67A-9F7F5048CBB9}']
  { getters & setters } 

    function get_Value: DNSynchronizationOption;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the current setting of the <see cref="P:System.EnterpriseServices.SynchronizationAttribute.Value" />
    ///  property.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  values. The default is <see langword="Required" />
    ///  .</returns>
    property Value: DNSynchronizationOption read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSynchronizationAttribute = class(TDNGenericImport<DNSynchronizationAttributeClass, DNSynchronizationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNTransactionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0BB1AF05-7B19-51C7-8B98-5B99A7BAA643}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.TransactionAttribute" />
    ///  class, setting the component's requested transaction type to <see cref="F:System.EnterpriseServices.TransactionOption.Required" />
    ///  .</summary>
    {class} function init: DNTransactionAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.TransactionAttribute" />
    ///  class, specifying the transaction type.</summary>
    ///  <param name="val">The specified transaction type, a <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  value. </param>
    {class} function init(val: DNTransactionOption): DNTransactionAttribute; overload;

  end;

  ///<summary>Specifies the type of transaction that is available to the attributed object. Permissible values are members of the <see cref="T:System.EnterpriseServices.TransactionOption" />
  ///  enumeration.</summary>
  [DNTypeName('System.EnterpriseServices.TransactionAttribute')]
  DNTransactionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A6F8048-6543-3CF4-9841-9E49CD11C468}']
  { getters & setters } 

    function get_Value: DNTransactionOption;
    function get_Isolation: DNTransactionIsolationLevel;
    procedure set_Isolation(value: DNTransactionIsolationLevel);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  value for the transaction, optionally disabling the transaction service.</summary>
    ///<returns>The specified transaction type, a <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  value.</returns>
    property Value: DNTransactionOption read get_Value;
    ///<summary>Gets or sets the transaction isolation level.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.TransactionIsolationLevel" />
    ///  values.</returns>
    property Isolation: DNTransactionIsolationLevel read get_Isolation write set_Isolation;
    ///<summary>Gets or sets the time-out for this transaction.</summary>
    ///<returns>The transaction time-out in seconds.</returns>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTransactionAttribute = class(TDNGenericImport<DNTransactionAttributeClass, DNTransactionAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNActivityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59A8D36A-F461-5617-ABF9-62F828EB5653}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Activity" />
    ///  class.</summary>
    ///  <param name="cfg">A <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  that contains the configuration information for the services to be used. </param>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.Activity" />
    ///  is not supported on the current platform. </exception>
    {class} function init(cfg: DNServiceConfig): DNActivity;

  end;

  ///<summary>Creates an activity to do synchronous or asynchronous batch work that can use COM+ services without needing to create a COM+ component. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.Activity')]
  DNActivity = interface(DDN.mscorlib.DNObject)
  ['{CB79A8BC-5DCD-361F-9C7A-A97666E2331C}']
  { methods } 

    ///<summary>Runs the specified user-defined batch work synchronously.</summary>
    ///  <param name="serviceCall">A <see cref="T:System.EnterpriseServices.IServiceCall" />
    ///  object that is used to implement the batch work. </param>
    procedure SynchronousCall(serviceCall: DNIServiceCall);
    ///<summary>Runs the specified user-defined batch work asynchronously.</summary>
    ///  <param name="serviceCall">A <see cref="T:System.EnterpriseServices.IServiceCall" />
    ///  object that is used to implement the batch work. </param>
    procedure AsynchronousCall(serviceCall: DNIServiceCall);
    ///<summary>Binds the user-defined work to the current thread.</summary>
    procedure BindToCurrentThread;
    ///<summary>Unbinds the batch work that is submitted by the <see cref="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" />
    ///  or <see cref="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" />
    ///  methods from the thread on which the batch work is running.</summary>
    procedure UnbindFromThread;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNActivity = class(TDNGenericImport<DNActivityClass, DNActivity>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNBYOTClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27F6DAEB-7313-59E0-B1FC-301F0654D891}']
  { static methods } 

    ///<summary>Creates an object that is enlisted within a manual transaction using the Transaction Internet Protocol (TIP).</summary>
    ///  <param name="url">A TIP URL that specifies a transaction. </param>
    ///  <param name="t">The type. </param>
    ///<returns>The requested transaction.</returns>
    {class} function CreateWithTipTransaction(url: string; t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>Creates an object that is enlisted within a manual transaction.</summary>
    ///  <param name="transaction">The <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  or <see cref="T:System.Transactions.Transaction" />
    ///  object that specifies a transaction. </param>
    ///  <param name="t">The specified type. </param>
    ///<returns>The requested transaction.</returns>
    {class} function CreateWithTransaction(transaction: DDN.mscorlib.DNObject; t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;

  end;

  ///<summary>Wraps the COM+ <see langword="ByotServerEx" />
  ///  class and the COM+ DTC interfaces <see langword="ICreateWithTransactionEx" />
  ///  and <see langword="ICreateWithTipTransactionEx" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.BYOT')]
  DNBYOT = interface(DDN.mscorlib.DNObject)
  ['{0514E7B0-1ECC-37F6-BAFE-E8EF7952568A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBYOT = class(TDNGenericImport<DNBYOTClass, DNBYOT>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0D656CA-51D5-59B8-9E99-93C82C664479}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  class.</summary>
    ///  <param name="compensator">A type that represents the compensator. </param>
    ///  <param name="description">The description of the compensator. </param>
    ///  <param name="flags">A bitwise combination of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" />
    ///  values. </param>
    {class} function init(compensator: DDN.mscorlib.DNType; description: string; flags: DNCompensatorOptions): DNClerk; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  class.</summary>
    ///  <param name="compensator">The name of the compensator. </param>
    ///  <param name="description">The description of the compensator. </param>
    ///  <param name="flags">A bitwise combination of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" />
    ///  values. </param>
    {class} function init(compensator: string; description: string; flags: DNCompensatorOptions): DNClerk; overload;

  end;

  ///<summary>Writes records of transactional actions to a log.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.Clerk')]
  DNClerk = interface(DDN.mscorlib.DNObject)
  ['{B04A2AA6-EFD7-380B-8323-7FAC9B5C0330}']
  { getters & setters } 

    function get_TransactionUOW: string;
    function get_LogRecordCount: Int32;

  { methods } 

    ///<summary>Forces all log records to disk.</summary>
    procedure ForceLog;
    ///<summary>Does not deliver the last log record that was written by this instance of this interface.</summary>
    procedure ForgetLogRecord;
    ///<summary>Performs an immediate abort call on the transaction.</summary>
    procedure ForceTransactionToAbort;
    ///<summary>Writes unstructured log records to the log.</summary>
    ///  <param name="record">The log record to write to the log. </param>
    procedure WriteLogRecord(&record: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value representing the transaction unit of work (UOW).</summary>
    ///<returns>A GUID representing the UOW.</returns>
    property TransactionUOW: string read get_TransactionUOW;
    ///<summary>Gets the number of log records.</summary>
    ///<returns>The number of log records.</returns>
    property LogRecordCount: Int32 read get_LogRecordCount;
  end;

  TDNClerk = class(TDNGenericImport<DNClerkClass, DNClerk>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{920A28C5-DFC2-5EE2-AE85-866548118436}']
  end;

  ///<summary>Contains information describing an active Compensating Resource Manager (CRM) Clerk object.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ClerkInfo')]
  DNClerkInfo = interface(DDN.mscorlib.DNObject)
  ['{53A09FA6-9A71-332A-921D-BE130C97461A}']
  { getters & setters } 

    function get_Clerk: DNClerk;
    function get_InstanceId: string;
    function get_Compensator: string;
    function get_Description: string;
    function get_TransactionUOW: string;
    function get_ActivityId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />
    ///  for the current Clerk.</summary>
    ///<returns><see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />
    ///  for the current Clerk.</returns>
    property Clerk: DNClerk read get_Clerk;
    ///<summary>Gets the instance class ID (CLSID) of the current Compensating Resource Manager (CRM) Clerk.</summary>
    ///<returns>The instance CLSID of the current CRM Clerk.</returns>
    property InstanceId: string read get_InstanceId;
    ///<summary>Gets the ProgId of the Compensating Resource Manager (CRM) Compensator for the current CRM Clerk.</summary>
    ///<returns>The ProgId of the CRM Compensator for the current CRM Clerk.</returns>
    property Compensator: string read get_Compensator;
    ///<summary>Gets the description of the Compensating Resource Manager (CRM) Compensator for the current CRM Clerk. The description string is the string that was provided by the <see langword="ICrmLogControl::RegisterCompensator" />
    ///  method.</summary>
    ///<returns>The description of the CRM Compensator for the current CRM Clerk.</returns>
    property Description: string read get_Description;
    ///<summary>Gets the unit of work (UOW) of the transaction for the current Compensating Resource Manager (CRM) Clerk.</summary>
    ///<returns>The UOW of the transaction for the current CRM Clerk.</returns>
    property TransactionUOW: string read get_TransactionUOW;
    ///<summary>Gets the activity ID of the current Compensating Resource Manager (CRM) Worker.</summary>
    ///<returns>Gets the activity ID of the current Compensating Resource Manager (CRM) Worker.</returns>
    property ActivityId: string read get_ActivityId;
  end;

  TDNClerkInfo = class(TDNGenericImport<DNClerkInfoClass, DNClerkInfo>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkMonitorClass = interface(DNObjectClass)
  ['{544B8F46-2AC7-5E08-8BE0-712DB777BCC9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />
    ///  class.</summary>
    {class} function init: DNClerkMonitor;

  end;

  ///<summary>Contains a snapshot of all Clerks active in the process.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor')]
  DNClerkMonitor = interface(DDN.mscorlib.DNIEnumerable)
  ['{6C1C243A-2146-3342-8078-AC4BFB9DB4E9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNClerkInfo; overload;
    function get_Item(index: string): DNClerkInfo; overload;

  { methods } 

    ///<summary>Returns the enumeration of the clerks in the Compensating Resource Manager (CRM) monitor collection.</summary>
    ///<returns>An enumerator describing the clerks in the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Gets the Clerks collection object, which is a snapshot of the current state of the Clerks.</summary>
    procedure Populate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the count of the Clerk monitors in the Compensating Resource Manager (CRM) monitor collection.</summary>
    ///<returns>The number of Clerk monitors in the CRM monitor collection.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNClerkInfo read get_Item; default;
    property Item[index: string]: DNClerkInfo read get_Item; default;
  end;

  TDNClerkMonitor = class(TDNGenericImport<DNClerkMonitorClass, DNClerkMonitor>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNLogRecordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85C95C0C-2A4B-5D2A-A4EF-5F15424083A7}']
  end;

  ///<summary>Represents an unstructured log record delivered as a COM+ <see langword="CrmLogRecordRead" />
  ///  structure. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.LogRecord')]
  DNLogRecord = interface(DDN.mscorlib.DNObject)
  ['{33DF2DC3-AA47-3F6A-8D0D-8BECE780BB7D}']
  { getters & setters } 

    function get_Flags: DNLogRecordFlags;
    function get_Sequence: Int32;
    function get_Record: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates when the log record was written.</summary>
    ///<returns>A bitwise combination of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags" />
    ///  values which provides information about when this record was written.</returns>
    property Flags: DNLogRecordFlags read get_Flags;
    ///<summary>The sequence number of the log record.</summary>
    ///<returns>An integer value that specifies the sequence number of the log record.</returns>
    property Sequence: Int32 read get_Sequence;
    ///<summary>Gets the log record user data.</summary>
    ///<returns>A single BLOB that contains the user data.</returns>
    property &Record: DDN.mscorlib.DNObject read get_Record;
  end;

  TDNLogRecord = class(TDNGenericImport<DNLogRecordClass, DNLogRecord>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNContextUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D302562-ECBB-59BE-8D59-EA6209D42023}']
  { static getter & setter } 

    {class} function get_IsInTransaction: Boolean;
    {class} function get_IsSecurityEnabled: Boolean;
    {class} function get_Transaction: DDN.mscorlib.DNObject;
    {class} function get_SystemTransaction: DDN.System.Transactions.DNTransaction;
    {class} function get_TransactionId: DDN.mscorlib.DNGuid;
    {class} function get_ContextId: DDN.mscorlib.DNGuid;
    {class} function get_ActivityId: DDN.mscorlib.DNGuid;
    {class} function get_MyTransactionVote: DNTransactionVote;
    {class} procedure set_MyTransactionVote(value: DNTransactionVote);
    {class} function get_DeactivateOnReturn: Boolean;
    {class} procedure set_DeactivateOnReturn(value: Boolean);
    {class} function get_PartitionId: DDN.mscorlib.DNGuid;
    {class} function get_ApplicationId: DDN.mscorlib.DNGuid;
    {class} function get_ApplicationInstanceId: DDN.mscorlib.DNGuid;

  { static methods } 

    ///<summary>Determines whether the caller is in the specified role.</summary>
    ///  <param name="role">The name of the role to check. </param>
    ///<returns><see langword="true" />
    ///  if the caller is in the specified role; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
    {class} function IsCallerInRole(role: string): Boolean;
    ///<summary>Returns a named property from the COM+ context.</summary>
    ///  <param name="name">The name of the requested property. </param>
    ///<returns>The named property for the context.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} function GetNamedProperty(name: string): DDN.mscorlib.DNObject;
    ///<summary>Sets the named property for the COM+ context.</summary>
    ///  <param name="name">The name of the property to set. </param>
    ///  <param name="value">Object that represents the property value to set.</param>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} procedure SetNamedProperty(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>Sets the <see langword="consistent" />
    ///  bit to <see langword="true" />
    ///  and the <see langword="done" />
    ///  bit to <see langword="false" />
    ///  in the COM+ context.</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">No COM+ context is available. </exception>
    {class} procedure EnableCommit;
    ///<summary>Sets both the <see langword="consistent" />
    ///  bit and the <see langword="done" />
    ///  bit to <see langword="false" />
    ///  in the COM+ context.</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">No COM+ context is available.</exception>
    {class} procedure DisableCommit;
    ///<summary>Sets the <see langword="consistent" />
    ///  bit and the <see langword="done" />
    ///  bit to <see langword="true" />
    ///  in the COM+ context.</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
    {class} procedure SetComplete;
    ///<summary>Sets the <see langword="consistent" />
    ///  bit to <see langword="false" />
    ///  and the <see langword="done" />
    ///  bit to <see langword="true" />
    ///  in the COM+ context.</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
    {class} procedure SetAbort;
    ///<summary>Determines whether the serviced component is activated in the default context. Serviced components that do not have COM+ catalog information are activated in the default context.</summary>
    ///<returns>
    ///  true if the serviced component is activated in the default context; otherwise, false.</returns>
    {class} function IsDefaultContext: Boolean;

  { static propertys } 

    ///<summary>Gets a value that indicates whether the current context is transactional.</summary>
    ///<returns><see langword="true" />
    ///  if the current context is transactional; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
    {class} property IsInTransaction: Boolean read get_IsInTransaction;
    ///<summary>Gets a value that indicates whether role-based security is active in the current context.</summary>
    ///<returns><see langword="true" />
    ///  if the current context has security enabled; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception>
    {class} property IsSecurityEnabled: Boolean read get_IsSecurityEnabled;
    ///<summary>Gets an object describing the current COM+ DTC transaction.</summary>
    ///<returns>An object that represents the current transaction.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} property Transaction: DDN.mscorlib.DNObject read get_Transaction;
    ///<summary>Gets the current transaction context.</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  that represents the current transaction context.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} property SystemTransaction: DDN.System.Transactions.DNTransaction read get_SystemTransaction;
    ///<summary>Gets the GUID of the current COM+ DTC transaction.</summary>
    ///<returns>A GUID representing the current COM+ DTC transaction, if one exists.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} property TransactionId: DDN.mscorlib.DNGuid read get_TransactionId;
    ///<summary>Gets a GUID for the current context.</summary>
    ///<returns>The GUID for the current context.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} property ContextId: DDN.mscorlib.DNGuid read get_ContextId;
    ///<summary>Gets a GUID representing the activity containing the component.</summary>
    ///<returns>The GUID for an activity if the current context is part of an activity; otherwise, <see langword="GUID_NULL" />
    ///  .</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} property ActivityId: DDN.mscorlib.DNGuid read get_ActivityId;
    ///<summary>Gets or sets the <see langword="consistent" />
    ///  bit in the COM+ context.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.TransactionVote" />
    ///  values, either <see langword="Commit" />
    ///  or <see langword="Abort" />
    ///  .</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later.</exception>
    {class} property MyTransactionVote: DNTransactionVote read get_MyTransactionVote write set_MyTransactionVote;
    ///<summary>Gets or sets the <see langword="done" />
    ///  bit in the COM+ context.</summary>
    ///<returns><see langword="true" />
    ///  if the object is to be deactivated when the method returns; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows 2000 or later. </exception>
    {class} property DeactivateOnReturn: Boolean read get_DeactivateOnReturn write set_DeactivateOnReturn;
    ///<summary>Gets a GUID for the current partition.</summary>
    ///<returns>The GUID for the current partition.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows XP or later. </exception>
    {class} property PartitionId: DDN.mscorlib.DNGuid read get_PartitionId;
    ///<summary>Gets a GUID for the current application.</summary>
    ///<returns>The GUID for the current application.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows XP or later. </exception>
    {class} property ApplicationId: DDN.mscorlib.DNGuid read get_ApplicationId;
    ///<summary>Gets a GUID for the current application instance.</summary>
    ///<returns>The GUID for the current application instance.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no COM+ context available. </exception><exception cref="T:System.PlatformNotSupportedException">The platform is not Windows XP or later. </exception>
    {class} property ApplicationInstanceId: DDN.mscorlib.DNGuid read get_ApplicationInstanceId;
  end;

  ///<summary>Obtains information about the COM+ object context. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ContextUtil')]
  DNContextUtil = interface(DDN.mscorlib.DNObject)
  ['{7DA59565-0BF0-3D4C-A92D-E9618B61EDB9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContextUtil = class(TDNGenericImport<DNContextUtilClass, DNContextUtil>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNAppDomainHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{445B3EA0-D02A-5B06-9348-4213879D26DA}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.AppDomainHelper" />
    ///  class.</summary>
    {class} function init: DNAppDomainHelper;

  end;

  ///<summary>Switches into the given application domain, which the object should be bound to, and does a callback on the given function.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.AppDomainHelper')]
  DNAppDomainHelper = interface(DDN.mscorlib.DNObject)
  ['{EF24F689-14F8-4D92-B4AF-D7B1F0E70FD4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainHelper = class(TDNGenericImport<DNAppDomainHelperClass, DNAppDomainHelper>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNClientRemotingConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D848422F-FF85-51AC-8FF4-4F79A4E2CD01}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ClientRemotingConfig" />
    ///  class.</summary>
    {class} function init: DNClientRemotingConfig;

  { static methods } 

    ///<summary>Creates a client remoting configuration file for a client type library in a SOAP-enabled COM+ application.</summary>
    ///  <param name="DestinationDirectory">The folder in which to create the configuration file.</param>
    ///  <param name="VRoot">The name of the virtual root.</param>
    ///  <param name="BaseUrl">The base URL that contains the virtual root.</param>
    ///  <param name="AssemblyName">The display name of the assembly that contains common language runtime (CLR) metadata corresponding to the type library.</param>
    ///  <param name="TypeName">The fully qualified name of the assembly that contains CLR metadata corresponding to the type library.</param>
    ///  <param name="ProgId">The programmatic identifier of the class.</param>
    ///  <param name="Mode">The activation mode.</param>
    ///  <param name="Transport">Not used. Specify <see langword="null" />
    ///  for this parameter.</param>
    ///<returns><see langword="true" />
    ///  if the client remoting configuration file was successfully created; otherwise <see langword="false" />
    ///  .</returns>
    {class} function Write(DestinationDirectory: string; VRoot: string; BaseUrl: string; AssemblyName: string; TypeName: string; ProgId: string; Mode: string; Transport: string): Boolean;

  end;

  ///<summary>Defines a static <see cref="M:System.EnterpriseServices.Internal.ClientRemotingConfig.Write(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" />
  ///  method that creates a client remoting configuration file for a client type library.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ClientRemotingConfig')]
  DNClientRemotingConfig = interface(DDN.mscorlib.DNObject)
  ['{E7D574D5-2E51-3400-9FB6-A058F2D5B8AB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClientRemotingConfig = class(TDNGenericImport<DNClientRemotingConfigClass, DNClientRemotingConfig>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNClrObjectFactoryClass = interface(DNObjectClass)
  ['{009E135F-4F19-569A-9FDD-8ED14FA708A9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ClrObjectFactory" />
    ///  class.</summary>
    {class} function init: DNClrObjectFactory;

  end;

  ///<summary>Activates SOAP-enabled COM+ application proxies from a client.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ClrObjectFactory')]
  DNClrObjectFactory = interface(DNIClrObjectFactory)
  ['{ECABAFD1-7F19-11D2-978E-0000F8757E2A}']
  { methods } 

    ///<summary>Activates a remote assembly through .NET remoting, using the remote assembly's mailbox. Currently not implemented; throws a <see cref="T:System.Runtime.InteropServices.COMException" />
    ///  if called.</summary>
    ///  <param name="Mailbox">A mailbox on the Web service. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>This method throws an exception if called.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">Simple Mail Transfer Protocol (SMTP) is not implemented. </exception>
    function CreateFromMailbox(Mailbox: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>Activates a remote assembly through .NET remoting, using the assembly's configuration file.</summary>
    ///  <param name="AssemblyName">The name of the assembly to activate. </param>
    ///  <param name="TypeName">The name of the type to activate. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>An instance of the <see cref="T:System.Object" />
    ///  that represents the type, with culture, arguments, and binding and activation attributes set to <see langword="null" />
    ///  , or <see langword="null" />
    ///  if the <paramref name="TypeName" />
    ///  parameter is not found.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.Runtime.InteropServices.COMException">The class is not registered. </exception>
    function CreateFromAssembly(AssemblyName: string; TypeName: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>Activates a remote assembly through .NET remoting, using the virtual root URL of the remote assembly.</summary>
    ///  <param name="VrootUrl">The virtual root URL of the object to be activated. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>An instance of the <see cref="T:System.Object" />
    ///  representing the type, with culture, arguments, and binding and activation attributes set to <see langword="null" />
    ///  , or <see langword="null" />
    ///  if the assembly identified by the <paramref name="VrootUrl" />
    ///  parameter is not found.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
    function CreateFromVroot(VrootUrl: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>Activates a remote assembly through .NET remoting, using the Web Services Description Language (WSDL) of the XML Web service.</summary>
    ///  <param name="WsdlUrl">The WSDL URL of the Web service. </param>
    ///  <param name="Mode">Not used. </param>
    ///<returns>An instance of the <see cref="T:System.Object" />
    ///  representing the type, with culture, arguments, and binding and activation attributes set to <see langword="null" />
    ///  , or <see langword="null" />
    ///  if the assembly identified by the <paramref name="WsdlUrl" />
    ///  parameter is not found.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.Runtime.InteropServices.COMException">The thread token could not be opened. </exception>
    function CreateFromWsdl(WsdlUrl: string; Mode: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClrObjectFactory = class(TDNGenericImport<DNClrObjectFactoryClass, DNClrObjectFactory>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNComManagedImportUtilClass = interface(DNObjectClass)
  ['{65C4067C-684D-58A7-962C-C70357B6B789}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ComManagedImportUtil" />
    ///  class.</summary>
    {class} function init: DNComManagedImportUtil;

  end;

  ///<summary>Identifies and installs components in the COM+ catalog.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ComManagedImportUtil')]
  DNComManagedImportUtil = interface(DNIComManagedImportUtil)
  ['{3B0398C9-7812-4007-85CB-18C771F2206F}']
  { methods } 

    procedure GetComponentInfo(assemblyPath: string; out numComponents: string; out componentInfo: string);
    ///<summary>Installs an assembly into a COM+ application.</summary>
    ///  <param name="asmpath">The path for the assembly. </param>
    ///  <param name="parname">The COM+ partition name. </param>
    ///  <param name="appname">The COM+ application name. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
    procedure InstallAssembly(asmpath: string; parname: string; appname: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComManagedImportUtil = class(TDNGenericImport<DNComManagedImportUtilClass, DNComManagedImportUtil>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNComSoapPublishErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{05363E04-2B28-5390-8704-D952DC4E7EBF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ComSoapPublishError" />
    ///  class.</summary>
    {class} function init: DNComSoapPublishError;

  { static methods } 

    ///<summary>Writes to an event log an error encountered while publishing SOAP-enabled COM interfaces in COM+ applications.</summary>
    ///  <param name="s">An error message to be written to the event log.</param>
    {class} procedure Report(s: string);

  end;

  ///<summary>Error handler for publishing SOAP-enabled services in COM+ applications.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ComSoapPublishError')]
  DNComSoapPublishError = interface(DDN.mscorlib.DNObject)
  ['{B0F64827-79BB-3163-B1AB-A2EA0E1FDA23}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComSoapPublishError = class(TDNGenericImport<DNComSoapPublishErrorClass, DNComSoapPublishError>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNGenerateMetadataClass = interface(DNObjectClass)
  ['{049407B5-ACED-5E4D-81A7-79121ED484DF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.GenerateMetadata" />
    ///  class.</summary>
    {class} function init: DNGenerateMetadata;

  { static methods } 

    ///<summary>Searches for a specified file in a specified path.</summary>
    ///  <param name="path">The path to be searched for the file.</param>
    ///  <param name="fileName">The name of the file for which to search.</param>
    ///  <param name="extension">An extension to be added to the file name when searching for the file.</param>
    ///  <param name="numBufferChars">The size of the buffer that receives the valid path and file name.</param>
    ///  <param name="buffer">The buffer that receives the path and file name of the file found.</param>
    ///  <param name="filePart">The variable that receives the address of the last component of the valid path and file name.</param>
    ///<returns>If the search succeeds, the return value is the length of the string copied to <paramref name="buffer" />
    ///  . If the search fails, the return value is 0.</returns>
    {class} function SearchPath(path: string; fileName: string; extension: string; numBufferChars: Int32; buffer: string; filePart: TArray<Int32>): Int32;

  end;

  ///<summary>Generates common language runtime (CLR) metadata for a COM+ component.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.GenerateMetadata')]
  DNGenerateMetadata = interface(DNIComSoapMetadata)
  ['{D8013FF1-730B-45E2-BA24-874B7242C425}']
  { methods } 

    ///<summary>Generates, or locates, an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library.</summary>
    ///  <param name="strSrcTypeLib">The name of the type library for which to generate an assembly.</param>
    ///  <param name="outPath">The folder in which to generate an assembly or to locate an already existing assembly.</param>
    ///<returns>The generated assembly name; otherwise, an empty string if the inputs are invalid.</returns>
    function Generate(strSrcTypeLib: string; outPath: string): string;
    function GenerateSigned(strSrcTypeLib: string; outPath: string; InstallGac: Boolean; out Error: string): string;
    ///<summary>Generates, or locates, an assembly that contains common language runtime (CLR) metadata for a COM+ component represented by the specified type library, signs the assembly with a strong-named key pair, and installs it in the global assembly cache.</summary>
    ///  <param name="strSrcTypeLib">The name of the type library for which to generate an assembly.</param>
    ///  <param name="outPath">The folder in which to generate an assembly or to locate an already existing assembly.</param>
    ///  <param name="PublicKey">A public key used to import type library information into an assembly.</param>
    ///  <param name="KeyPair">A strong-named key pair used to sign the generated assembly.</param>
    ///<returns>The generated assembly name; otherwise, an empty string if the inputs are invalid.</returns>
    function GenerateMetaData(strSrcTypeLib: string; outPath: string; PublicKey: TArray<Byte>; KeyPair: DDN.mscorlib.DNStrongNameKeyPair): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGenerateMetadata = class(TDNGenericImport<DNGenerateMetadataClass, DNGenerateMetadata>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNIISVirtualRootClass = interface(DNObjectClass)
  ['{E7BB99AE-BA59-55F3-A31D-B44411014EC7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.IISVirtualRoot" />
    ///  class.</summary>
    {class} function init: DNIISVirtualRoot;

  end;

  ///<summary>Creates and deletes Internet Information Services (IIS) 6.0 virtual roots.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IISVirtualRoot')]
  DNIISVirtualRoot = interface(DNIComSoapIISVRoot)
  ['{D8013EF1-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure Create(RootWeb: string; inPhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    procedure Delete(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIISVirtualRoot = class(TDNGenericImport<DNIISVirtualRootClass, DNIISVirtualRoot>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNPublishClass = interface(DNObjectClass)
  ['{F9653B41-E721-52DC-9D88-E4BA4D4E2FAB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.Publish" />
    ///  class.</summary>
    {class} function init: DNPublish;

  { static methods } 

    ///<summary>Returns the path for the directory for storing client configuration files.</summary>
    ///  <param name="CreateDir">Set to <see langword="true" />
    ///  to create the directory, or <see langword="false" />
    ///  to return the path but not create the directory. </param>
    ///<returns>The path for the directory to contain the configuration files.</returns>
    ///<exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
    {class} function GetClientPhysicalPath(CreateDir: Boolean): string;
    {class} procedure ParseUrl(FullUrl: string; out BaseUrl: string; out VirtualRoot: string);

  end;

  ///<summary>Publishes COM interfaces for SOAP-enabled COM+ applications.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.Publish')]
  DNPublish = interface(DNIComSoapPublisher)
  ['{D8013EEF-730B-45E2-BA24-874B7242C425}']
  { methods } 

    ///<summary>Unregisters a COM interop assembly.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />
    ///  . </exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  is not found, or a file name extension is not specified. </exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  is not a valid assembly. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception><exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not <see langword="static" />
    ///  .-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not valid. </exception>
    procedure UnRegisterAssembly(AssemblyPath: string);
    procedure GetAssemblyNameForCache(TypeLibPath: string; out CachePath: string);
    procedure DeleteVirtualRoot(RootWebServer: string; FullUrl: string; out Error: string);
    ///<summary>Registers an assembly for COM interop.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception><exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />
    ///  . </exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  is not found, or a filename extension is not specified. </exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  is not a valid assembly. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences, or the assembly name is longer than MAX_PATH characters. </exception><exception cref="T:System.InvalidOperationException">A method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not <see langword="static" />
    ///  .-or- There is more than one method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  at a given level of the hierarchy.-or- The signature of the method marked with <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  is not valid. </exception>
    procedure RegisterAssembly(AssemblyPath: string);
    ///<summary>Installs an assembly in the global assembly cache.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    procedure GacInstall(AssemblyPath: string);
    ///<summary>Removes an assembly from the global assembly cache.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code.-or- The caller does not have path discovery permission. </exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException"><paramref name="AssemblyPath" />
    ///  is empty. </exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  is not found. </exception><exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences. </exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  is not a valid assembly. </exception>
    procedure GacRemove(AssemblyPath: string);
    procedure CreateVirtualRoot(Operation: string; FullUrl: string; out BaseUrl: string; out VirtualRoot: string; out PhysicalPath: string; out Error: string);
    procedure CreateMailBox(RootMailServer: string; MailBox: string; out SmtpName: string; out Domain: string; out PhysicalPath: string; out Error: string);
    procedure DeleteMailBox(RootMailServer: string; MailBox: string; out Error: string);
    procedure ProcessServerTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; Operation: string; out strAssemblyName: string; out TypeName: string; out Error: string);
    ///<summary>Reflects over an assembly and returns the type name that matches the ProgID.</summary>
    ///  <param name="AssemblyPath">The file system path for the assembly. </param>
    ///  <param name="ProgId">The programmatic identifier of the class. </param>
    ///<returns>The type name that matches the ProgID.</returns>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception>
    function GetTypeNameFromProgId(AssemblyPath: string; ProgId: string): string;
    procedure ProcessClientTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; VRoot: string; BaseUrl: string; Mode: string; Transport: string; out AssemblyName: string; out TypeName: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPublish = class(TDNGenericImport<DNPublishClass, DNPublish>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNServerWebConfigClass = interface(DNObjectClass)
  ['{E2A307EC-5E27-5C2C-A7E6-1FBAF13291B5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.ServerWebConfig" />
    ///  class.</summary>
    {class} function init: DNServerWebConfig;

  end;

  ///<summary>Creates a Web.config file for a SOAP-enabled COM+ application. Can also add component entries to the file for COM interfaces being published in the application.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ServerWebConfig')]
  DNServerWebConfig = interface(DNIServerWebConfig)
  ['{31D353B3-0A0A-3986-9B20-3EC4EE90B389}']
  { methods } 

    procedure Create(FilePath: string; FilePrefix: string; out Error: string);
    procedure AddElement(FilePath: string; AssemblyName: string; TypeName: string; ProgId: string; WkoMode: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerWebConfig = class(TDNGenericImport<DNServerWebConfigClass, DNServerWebConfig>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapClientImportClass = interface(DNObjectClass)
  ['{E554D222-7F34-5B64-97F5-238981E3A15B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapClientImport" />
    ///  class.</summary>
    {class} function init: DNSoapClientImport;

  end;

  ///<summary>Imports authenticated, encrypted SOAP client proxies. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapClientImport')]
  DNSoapClientImport = interface(DNISoapClientImport)
  ['{346D5B9F-45E1-45C0-AADF-1B7D221E9063}']
  { methods } 

    ///<summary>Creates a .NET remoting client configuration file that includes security and authentication options.</summary>
    ///  <param name="progId">The programmatic identifier of the class. If an empty string (""), this method returns without doing anything. </param>
    ///  <param name="virtualRoot">The name of the virtual root. </param>
    ///  <param name="baseUrl">The base URL that contains the virtual root. </param>
    ///  <param name="authentication">The type of ASP.NET authentication to use. </param>
    ///  <param name="assemblyName">The name of the assembly. </param>
    ///  <param name="typeName">The name of the type. </param>
    ///<exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    procedure ProcessClientTlbEx(progId: string; virtualRoot: string; baseUrl: string; authentication: string; assemblyName: string; typeName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapClientImport = class(TDNGenericImport<DNSoapClientImportClass, DNSoapClientImport>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapServerTlbClass = interface(DNObjectClass)
  ['{A75771B9-C99E-5402-AB7F-3337610F05F3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapServerTlb" />
    ///  class.</summary>
    {class} function init: DNSoapServerTlb;

  end;

  ///<summary>Processes authenticated, encrypted SOAP components on servers. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapServerTlb')]
  DNSoapServerTlb = interface(DNISoapServerTlb)
  ['{F6B6768F-F99E-4152-8ED2-0412F78517FB}']
  { methods } 

    procedure AddServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; clientActivated: string; wellKnown: string; discoFile: string; operation: string; out strAssemblyName: string; out typeName: string);
    ///<summary>Removes entries for a server type library from the Web.config and Default.disco files, depending on security options.</summary>
    ///  <param name="progId">The programmatic identifier of the class. </param>
    ///  <param name="classId">The class identifier (CLSID) for the type library. </param>
    ///  <param name="interfaceId">The IID for the type library. </param>
    ///  <param name="srcTlbPath">The path for the file containing the type library. </param>
    ///  <param name="rootWebServer">The root Web server. </param>
    ///  <param name="baseUrl">The base URL that contains the virtual root. </param>
    ///  <param name="virtualRoot">The name of the virtual root. </param>
    ///  <param name="operation">Not used. Specify <see langword="null" />
    ///  for this parameter.</param>
    ///  <param name="assemblyName">The name of the assembly. </param>
    ///  <param name="typeName">The type of the assembly. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    procedure DeleteServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; operation: string; assemblyName: string; typeName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerTlb = class(TDNGenericImport<DNSoapServerTlbClass, DNSoapServerTlb>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapServerVRootClass = interface(DNObjectClass)
  ['{168252C3-5FE0-5779-9735-360EA93C21E9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapServerVRoot" />
    ///  class.</summary>
    {class} function init: DNSoapServerVRoot;

  end;

  ///<summary>Publishes authenticated, encrypted SOAP virtual roots on servers. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapServerVRoot')]
  DNSoapServerVRoot = interface(DNISoapServerVRoot)
  ['{CAA817CC-0C04-4D22-A05C-2B7E162F4E8F}']
  { methods } 

    ///<summary>Deletes a virtual root. Not fully implemented.</summary>
    ///  <param name="rootWebServer">The root Web server. The default is "IIS://localhost/W3SVC/1/ROOT".</param>
    ///  <param name="inBaseUrl">The base URL that contains the virtual root. </param>
    ///  <param name="inVirtualRoot">The name of the virtual root. </param>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception><exception cref="T:System.EnterpriseServices.ServicedComponentException">The call to get the system directory failed. </exception>
    procedure DeleteVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string);
    procedure CreateVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; homePage: string; discoFile: string; secureSockets: string; authentication: string; operation: string; out baseUrl: string; out virtualRoot: string; out physicalPath: string);
    procedure GetVirtualRootStatus(RootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out Exists: string; out SSL: string; out WindowsAuth: string; out Anonymous: string; out HomePage: string; out DiscoFile: string; out PhysicalPath: string; out BaseUrl: string; out VirtualRoot: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerVRoot = class(TDNGenericImport<DNSoapServerVRootClass, DNSoapServerVRoot>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapUtilityClass = interface(DNObjectClass)
  ['{3B8306AE-156A-528F-ABCD-C9304A207401}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.SoapUtility" />
    ///  class.</summary>
    {class} function init: DNSoapUtility;

  end;

  ///<summary>Provides utilities to support the exporting of COM+ SOAP-enabled application proxies by the server and the importing of the proxies by the client. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapUtility')]
  DNSoapUtility = interface(DNISoapUtility)
  ['{5F9A955F-AA55-4127-A32B-33496AA8A44E}']
  { methods } 

    procedure GetServerPhysicalPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out physicalPath: string);
    ///<summary>Determines whether authenticated, encrypted SOAP interfaces are present.</summary>
    ///<exception cref="T:System.Security.SecurityException">A caller in the call chain does not have permission to access unmanaged code. </exception><exception cref="T:System.PlatformNotSupportedException">The SOAP utility is not available. </exception>
    procedure Present;
    procedure GetServerBinPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out binPath: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapUtility = class(TDNGenericImport<DNSoapUtilityClass, DNSoapUtility>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AEE6864-FC08-5F14-8019-B109ABA24DCF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationConfig" />
    ///  class.</summary>
    {class} function init: DNRegistrationConfig;

  end;

  ///<summary>Provides configuration information for installing assemblies into the COM+ catalog.</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationConfig')]
  DNRegistrationConfig = interface(DDN.mscorlib.DNObject)
  ['{36DCDA30-DC3B-4D93-BE42-90B2D74C64E7}']
  { getters & setters } 

    function get_AssemblyFile: string;
    procedure set_AssemblyFile(value: string);
    function get_InstallationFlags: DNInstallationFlags;
    procedure set_InstallationFlags(value: DNInstallationFlags);
    function get_Application: string;
    procedure set_Application(value: string);
    function get_TypeLibrary: string;
    procedure set_TypeLibrary(value: string);
    function get_Partition: string;
    procedure set_Partition(value: string);
    function get_ApplicationRootDirectory: string;
    procedure set_ApplicationRootDirectory(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the file name of the assembly to install.</summary>
    ///<returns>The file name of the assembly to install.</returns>
    property AssemblyFile: string read get_AssemblyFile write set_AssemblyFile;
    ///<summary>Gets or sets a flag that indicates how to install the assembly.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.InstallationFlags" />
    ///  values.</returns>
    property InstallationFlags: DNInstallationFlags read get_InstallationFlags write set_InstallationFlags;
    ///<summary>Gets or sets the name of the COM+ application in which the assembly is to be installed.</summary>
    ///<returns>The name of the COM+ application in which the assembly is to be installed.</returns>
    property Application: string read get_Application write set_Application;
    ///<summary>Gets or sets the name of the output Type Library Exporter (Tlbexp.exe) file.</summary>
    ///<returns>The name of the output Type Library Exporter (Tlbexp.exe) file.</returns>
    property TypeLibrary: string read get_TypeLibrary write set_TypeLibrary;
    ///<summary>Gets or sets the name of the COM+ partition.</summary>
    ///<returns>The name of the COM+ partition.</returns>
    property Partition: string read get_Partition write set_Partition;
    ///<summary>Gets or sets the name of the root directory of the application.</summary>
    ///<returns>The name of the root directory of the application.</returns>
    property ApplicationRootDirectory: string read get_ApplicationRootDirectory write set_ApplicationRootDirectory;
  end;

  TDNRegistrationConfig = class(TDNGenericImport<DNRegistrationConfigClass, DNRegistrationConfig>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationErrorInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B75C714-815C-5B70-97A3-5AA35A46653D}']
  end;

  ///<summary>Retrieves extended error information about methods related to multiple COM+ objects. This also includes methods that install, import, and export COM+ applications and components. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationErrorInfo')]
  DNRegistrationErrorInfo = interface(DDN.mscorlib.DNObject)
  ['{1F7EBE37-827C-3AC2-BEF1-882229B9724E}']
  { getters & setters } 

    function get_MajorRef: string;
    function get_MinorRef: string;
    function get_Name: string;
    function get_ErrorCode: Int32;
    function get_ErrorString: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the key value for the object that caused the error, if applicable.</summary>
    ///<returns>The key value for the object that caused the error, if applicable.</returns>
    property MajorRef: string read get_MajorRef;
    ///<summary>Gets a precise specification of the item that caused the error, such as a property name.</summary>
    ///<returns>A precise specification of the item, such as a property name, that caused the error. If multiple errors occurred, or this does not apply, <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.MinorRef" />
    ///  returns the string "&lt;Invalid&gt;".</returns>
    property MinorRef: string read get_MinorRef;
    ///<summary>Gets the name of the object or file that caused the error.</summary>
    ///<returns>The name of the object or file that caused the error.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the error code for the object or file.</summary>
    ///<returns>The error code for the object or file.</returns>
    property ErrorCode: Int32 read get_ErrorCode;
    ///<summary>Gets the description of the <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" />
    ///  .</summary>
    ///<returns>The description of the <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" />
    ///  .</returns>
    property ErrorString: string read get_ErrorString;
  end;

  TDNRegistrationErrorInfo = class(TDNGenericImport<DNRegistrationErrorInfoClass, DNRegistrationErrorInfo>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNResourcePoolClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3829389-780C-53D0-976F-3C7982C3DD1D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ResourcePool" />
    ///  class.</summary>
    ///  <param name="cb">A <see cref="T:System.EnterpriseServices.ResourcePool.TransactionEndDelegate" />
    ///  , that is called when a transaction is finished. All items currently stored in the transaction are handed back to the user through the delegate. </param>
    {class} function init(cb: DNResourcePool_TransactionEndDelegate): DNResourcePool;

  end;

  ///<summary>Stores objects in the current transaction. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ResourcePool')]
  DNResourcePool = interface(DDN.mscorlib.DNObject)
  ['{2B498504-E225-3BFA-9F6B-FDBB961FC7CC}']
  { methods } 

    ///<summary>Adds a resource to the current transaction.</summary>
    ///  <param name="resource">The resource to add. </param>
    ///<returns><see langword="true" />
    ///  if the resource object was added to the pool; otherwise, <see langword="false" />
    ///  .</returns>
    function PutResource(resource: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a resource from the current transaction.</summary>
    ///<returns>The resource object.</returns>
    function GetResource: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResourcePool = class(TDNGenericImport<DNResourcePoolClass, DNResourcePool>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityCallContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A35124B-AEB9-5950-8043-CBA6FABFC98F}']
  { static getter & setter } 

    {class} function get_CurrentCall: DNSecurityCallContext;

  { static propertys } 

    ///<summary>Gets a <see cref="T:System.EnterpriseServices.SecurityCallContext" />
    ///  object that describes the security call context.</summary>
    ///<returns>The <see cref="T:System.EnterpriseServices.SecurityCallContext" />
    ///  object that describes the security call context.</returns>
    {class} property CurrentCall: DNSecurityCallContext read get_CurrentCall;
  end;

  ///<summary>Describes the chain of callers leading up to the current method call.</summary>
  [DNTypeName('System.EnterpriseServices.SecurityCallContext')]
  DNSecurityCallContext = interface(DDN.mscorlib.DNObject)
  ['{CA1E2FB8-74B9-354B-B5FB-F4E771CC64F1}']
  { getters & setters } 

    function get_IsSecurityEnabled: Boolean;
    function get_DirectCaller: DNSecurityIdentity;
    function get_OriginalCaller: DNSecurityIdentity;
    function get_NumCallers: Int32;
    function get_MinAuthenticationLevel: Int32;
    function get_Callers: DNSecurityCallers;

  { methods } 

    ///<summary>Verifies that the direct caller is a member of the specified role.</summary>
    ///  <param name="role">The specified role. </param>
    ///<returns><see langword="true" />
    ///  if the direct caller is a member of the specified role; otherwise, <see langword="false" />
    ///  .</returns>
    function IsCallerInRole(role: string): Boolean;
    ///<summary>Verifies that the specified user is in the specified role.</summary>
    ///  <param name="user">The specified user. </param>
    ///  <param name="role">The specified role. </param>
    ///<returns><see langword="true" />
    ///  if the specified user is a member of the specified role; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUserInRole(user: string; role: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Determines whether security checks are enabled in the current context.</summary>
    ///<returns><see langword="true" />
    ///  if security checks are enabled in the current context; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSecurityEnabled: Boolean read get_IsSecurityEnabled;
    ///<summary>Gets a <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  object that describes the direct caller of this method.</summary>
    ///<returns>A <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  value.</returns>
    property DirectCaller: DNSecurityIdentity read get_DirectCaller;
    ///<summary>Gets a <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  that describes the original caller.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  values.</returns>
    property OriginalCaller: DNSecurityIdentity read get_OriginalCaller;
    ///<summary>Gets the <see langword="NumCallers" />
    ///  value from the <see langword="ISecurityCallContext" />
    ///  collection in COM+.</summary>
    ///<returns>The <see langword="NumCallers" />
    ///  value from the <see langword="ISecurityCallContext" />
    ///  collection in COM+.</returns>
    property NumCallers: Int32 read get_NumCallers;
    ///<summary>Gets the <see langword="MinAuthenticationLevel" />
    ///  value from the <see langword="ISecurityCallContext" />
    ///  collection in COM+.</summary>
    ///<returns>The <see langword="MinAuthenticationLevel" />
    ///  value from the <see langword="ISecurityCallContext" />
    ///  collection in COM+.</returns>
    property MinAuthenticationLevel: Int32 read get_MinAuthenticationLevel;
    ///<summary>Gets a <see cref="T:System.EnterpriseServices.SecurityCallers" />
    ///  object that describes the caller.</summary>
    ///<returns>The <see cref="T:System.EnterpriseServices.SecurityCallers" />
    ///  object that describes the caller.</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">There is no security context. </exception>
    property Callers: DNSecurityCallers read get_Callers;
  end;

  TDNSecurityCallContext = class(TDNGenericImport<DNSecurityCallContextClass, DNSecurityCallContext>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityCallersClass = interface(DNObjectClass)
  ['{94401CE8-5E29-5B0D-B1FB-B7F93514A003}']
  end;

  ///<summary>Provides an ordered collection of identities in the current call chain.</summary>
  [DNTypeName('System.EnterpriseServices.SecurityCallers')]
  DNSecurityCallers = interface(DDN.mscorlib.DNIEnumerable)
  ['{DDC8B304-618D-33A7-AD5E-9E4CC7F90A86}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(idx: Int32): DNSecurityIdentity;

  { methods } 

    ///<summary>Retrieves the enumeration interface for the object.</summary>
    ///<returns>The enumerator interface for the <see langword="ISecurityCallersColl" />
    ///  collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of callers in the chain.</summary>
    ///<returns>The number of callers in the chain.</returns>
    property Count: Int32 read get_Count;
    property Item[idx: Int32]: DNSecurityIdentity read get_Item; default;
  end;

  TDNSecurityCallers = class(TDNGenericImport<DNSecurityCallersClass, DNSecurityCallers>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityIdentityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1595778E-14E9-55A7-91A6-A32B0CAB8426}']
  end;

  ///<summary>Contains information that regards an identity in a COM+ call chain.</summary>
  [DNTypeName('System.EnterpriseServices.SecurityIdentity')]
  DNSecurityIdentity = interface(DDN.mscorlib.DNObject)
  ['{376B8ABA-A173-346D-88EA-51F506930D68}']
  { getters & setters } 

    function get_AccountName: string;
    function get_AuthenticationService: Int32;
    function get_ImpersonationLevel: DNImpersonationLevelOption;
    function get_AuthenticationLevel: DNAuthenticationOption;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the user described by this identity.</summary>
    ///<returns>The name of the user described by this identity.</returns>
    property AccountName: string read get_AccountName;
    ///<summary>Gets the authentication service described by this identity.</summary>
    ///<returns>The authentication service described by this identity.</returns>
    property AuthenticationService: Int32 read get_AuthenticationService;
    ///<summary>Gets the impersonation level of the user described by this identity.</summary>
    ///<returns>A <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" />
    ///  value.</returns>
    property ImpersonationLevel: DNImpersonationLevelOption read get_ImpersonationLevel;
    ///<summary>Gets the authentication level of the user described by this identity.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.AuthenticationOption" />
    ///  values.</returns>
    property AuthenticationLevel: DNAuthenticationOption read get_AuthenticationLevel;
  end;

  TDNSecurityIdentity = class(TDNGenericImport<DNSecurityIdentityClass, DNSecurityIdentity>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServiceConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54846460-F05C-5104-96A9-2B38C9909F1C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  class, setting the properties to configure the desired services.</summary>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  is not supported on the current platform. </exception>
    {class} function init: DNServiceConfig;

  end;

  ///<summary>Specifies and configures the services that are to be active in the domain which is entered when calling <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
  ///  or creating an <see cref="T:System.EnterpriseServices.Activity" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ServiceConfig')]
  DNServiceConfig = interface(DDN.mscorlib.DNObject)
  ['{29B2A650-9339-3D5A-882D-D5A744A1CA03}']
  { getters & setters } 

    function get_ThreadPool: DNThreadPoolOption;
    procedure set_ThreadPool(value: DNThreadPoolOption);
    function get_Inheritance: DNInheritanceOption;
    procedure set_Inheritance(value: DNInheritanceOption);
    function get_Binding: DNBindingOption;
    procedure set_Binding(value: DNBindingOption);
    function get_Transaction: DNTransactionOption;
    procedure set_Transaction(value: DNTransactionOption);
    function get_IsolationLevel: DNTransactionIsolationLevel;
    procedure set_IsolationLevel(value: DNTransactionIsolationLevel);
    function get_TransactionTimeout: Int32;
    procedure set_TransactionTimeout(value: Int32);
    function get_TipUrl: string;
    procedure set_TipUrl(value: string);
    function get_TransactionDescription: string;
    procedure set_TransactionDescription(value: string);
    function get_BringYourOwnTransaction: DNITransaction;
    procedure set_BringYourOwnTransaction(value: DNITransaction);
    function get_BringYourOwnSystemTransaction: DDN.System.Transactions.DNTransaction;
    procedure set_BringYourOwnSystemTransaction(value: DDN.System.Transactions.DNTransaction);
    function get_Synchronization: DNSynchronizationOption;
    procedure set_Synchronization(value: DNSynchronizationOption);
    function get_IISIntrinsicsEnabled: Boolean;
    procedure set_IISIntrinsicsEnabled(value: Boolean);
    function get_COMTIIntrinsicsEnabled: Boolean;
    procedure set_COMTIIntrinsicsEnabled(value: Boolean);
    function get_TrackingEnabled: Boolean;
    procedure set_TrackingEnabled(value: Boolean);
    function get_TrackingAppName: string;
    procedure set_TrackingAppName(value: string);
    function get_TrackingComponentName: string;
    procedure set_TrackingComponentName(value: string);
    function get_SxsOption: DNSxsOption;
    procedure set_SxsOption(value: DNSxsOption);
    function get_SxsDirectory: string;
    procedure set_SxsDirectory(value: string);
    function get_SxsName: string;
    procedure set_SxsName(value: string);
    function get_PartitionOption: DNPartitionOption;
    procedure set_PartitionOption(value: DNPartitionOption);
    function get_PartitionId: DDN.mscorlib.DNGuid;
    procedure set_PartitionId(value: DDN.mscorlib.DNGuid);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates the thread pool which runs the work submitted by the activity.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.ThreadPoolOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.ThreadPoolOption.None" />
    ///  .</returns>
    property ThreadPool: DNThreadPoolOption read get_ThreadPool write set_ThreadPool;
    ///<summary>Gets or sets a value that indicates whether to construct a new context based on the current context or to create a new context based solely on the information in <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  .</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.InheritanceOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  .</returns>
    property Inheritance: DNInheritanceOption read get_Inheritance write set_Inheritance;
    ///<summary>Gets or sets the binding option, which indicates whether all work submitted by the activity is to be bound to only one single-threaded apartment (STA).</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.BindingOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.BindingOption.NoBinding" />
    ///  .</returns>
    property Binding: DNBindingOption read get_Binding write set_Binding;
    ///<summary>Gets or sets a value that indicates how transactions are used in the enclosed work.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.TransactionOption.Disabled" />
    ///  .</returns>
    property Transaction: DNTransactionOption read get_Transaction write set_Transaction;
    ///<summary>Gets or sets the isolation level of the transaction.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.TransactionIsolationLevel" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Any" />
    ///  .</returns>
    property IsolationLevel: DNTransactionIsolationLevel read get_IsolationLevel write set_IsolationLevel;
    ///<summary>Gets or sets the transaction time-out for a new transaction.</summary>
    ///<returns>The transaction time-out, in seconds.</returns>
    property TransactionTimeout: Int32 read get_TransactionTimeout write set_TransactionTimeout;
    ///<summary>Gets or sets the Transaction Internet Protocol (TIP) URL that allows the enclosed code to run in an existing transaction.</summary>
    ///<returns>A TIP URL. The default value is <see langword="null" />
    ///  .</returns>
    property TipUrl: string read get_TipUrl write set_TipUrl;
    ///<summary>Gets or sets the name that is used when transaction statistics are displayed.</summary>
    ///<returns>The name used when transaction statistics are displayed. The default value is <see langword="null" />
    ///  .</returns>
    property TransactionDescription: string read get_TransactionDescription write set_TransactionDescription;
    ///<summary>Gets or sets a <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  that represents an existing transaction that supplies the settings used to run the transaction identified by <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  . The default is <see langword="null" />
    ///  .</returns>
    property BringYourOwnTransaction: DNITransaction read get_BringYourOwnTransaction write set_BringYourOwnTransaction;
    ///<summary>Gets or sets a <see cref="T:System.Transactions.Transaction" />
    ///  that represents an existing transaction that supplies the settings used to run the transaction identified by <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Transactions.Transaction" />
    ///  . The default is <see langword="null" />
    ///  .</returns>
    property BringYourOwnSystemTransaction: DDN.System.Transactions.DNTransaction read get_BringYourOwnSystemTransaction write set_BringYourOwnSystemTransaction;
    ///<summary>Gets or sets a value in that indicates the type of automatic synchronization requested by the component.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.SynchronizationOption.Disabled" />
    ///  .</returns>
    property Synchronization: DNSynchronizationOption read get_Synchronization write set_Synchronization;
    ///<summary>Gets or sets a value that indicates whether Internet Information Services (IIS) intrinsics are enabled.</summary>
    ///<returns><see langword="true" />
    ///  if IIS intrinsics are enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IISIntrinsicsEnabled: Boolean read get_IISIntrinsicsEnabled write set_IISIntrinsicsEnabled;
    ///<summary>Gets or sets a value that indicates whether COM Transaction Integrator (COMTI) intrinsics are enabled.</summary>
    ///<returns><see langword="true" />
    ///  if COMTI intrinsics are enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property COMTIIntrinsicsEnabled: Boolean read get_COMTIIntrinsicsEnabled write set_COMTIIntrinsicsEnabled;
    ///<summary>Gets or sets a value that indicates whether tracking is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if tracking is enabled; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property TrackingEnabled: Boolean read get_TrackingEnabled write set_TrackingEnabled;
    ///<summary>Gets or sets a text string that corresponds to the application ID under which tracker information is reported.</summary>
    ///<returns>The application ID under which tracker information is reported. The default value is <see langword="null" />
    ///  .</returns>
    property TrackingAppName: string read get_TrackingAppName write set_TrackingAppName;
    ///<summary>Gets or sets a text string that corresponds to the context name under which tracker information is reported.</summary>
    ///<returns>The context name under which tracker information is reported. The default value is <see langword="null" />
    ///  .</returns>
    property TrackingComponentName: string read get_TrackingComponentName write set_TrackingComponentName;
    ///<summary>Gets or sets a value that indicates how to configure the side-by-side assembly.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.SxsOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.SxsOption.Ignore" />
    ///  .</returns>
    property SxsOption: DNSxsOption read get_SxsOption write set_SxsOption;
    ///<summary>Gets or sets the directory for the side-by-side assembly for the enclosed work.</summary>
    ///<returns>The name of the directory to be used for the side-by-side assembly. The default value is <see langword="null" />
    ///  .</returns>
    property SxsDirectory: string read get_SxsDirectory write set_SxsDirectory;
    ///<summary>Gets or sets the file name of the side-by-side assembly for the enclosed work.</summary>
    ///<returns>The file name of the side-by-side assembly. The default value is <see langword="null" />
    ///  .</returns>
    property SxsName: string read get_SxsName write set_SxsName;
    ///<summary>Gets or sets a value that indicates how partitions are used for the enclosed work.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.PartitionOption" />
    ///  values. The default is <see cref="F:System.EnterpriseServices.PartitionOption.Ignore" />
    ///  .</returns>
    property PartitionOption: DNPartitionOption read get_PartitionOption write set_PartitionOption;
    ///<summary>Gets or sets the GUID for the COM+ partition that is to be used.</summary>
    ///<returns>The GUID for the partition to be used. The default is a zero GUID.</returns>
    property PartitionId: DDN.mscorlib.DNGuid read get_PartitionId write set_PartitionId;
  end;

  TDNServiceConfig = class(TDNGenericImport<DNServiceConfigClass, DNServiceConfig>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServiceDomainClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F88486FB-B370-5943-8DB7-24CD780FCBF9}']
  { static methods } 

    ///<summary>Creates the context specified by the <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  object and pushes it onto the context stack to become the current context.</summary>
    ///  <param name="cfg">A <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  that contains the configuration information for the services to be used within the enclosed code. </param>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  is not supported on the current platform. </exception>
    {class} procedure Enter(cfg: DNServiceConfig);
    ///<summary>Triggers the server and then the client side policies as if a method call were returning. The current context is then popped from the context stack, and the context that was running when <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
    ///  was called becomes the current context.</summary>
    ///<returns>One of the <see cref="T:System.EnterpriseServices.TransactionStatus" />
    ///  values.</returns>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  is not supported on the current platform. </exception>
    {class} function Leave: DNTransactionStatus;

  end;

  ///<summary>Allows a code segment identified by <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
  ///  and <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" />
  ///  to run in its own context and behave as if it were a method that is called on an object created within the context. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.ServiceDomain')]
  DNServiceDomain = interface(DDN.mscorlib.DNObject)
  ['{C422A96E-89D8-3924-A0B9-5D7D09321B35}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceDomain = class(TDNGenericImport<DNServiceDomainClass, DNServiceDomain>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1230EAEE-0333-53FD-8BDB-BDEBE0B3DADC}']
  end;

  ///<summary>Accesses a shared property. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.SharedProperty')]
  DNSharedProperty = interface(DDN.mscorlib.DNObject)
  ['{28FF2394-9D57-32DB-8B8F-11C5394CBDBF}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the shared property.</summary>
    ///<returns>The value of the shared property.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNSharedProperty = class(TDNGenericImport<DNSharedPropertyClass, DNSharedProperty>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3ED19F68-41CC-52C7-ADD5-223728917378}']
  end;

  ///<summary>Represents a collection of shared properties. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.SharedPropertyGroup')]
  DNSharedPropertyGroup = interface(DDN.mscorlib.DNObject)
  ['{ADA150DB-83FA-3667-BCF2-DC561D4A8521}']
  { methods } 

    function CreatePropertyByPosition(position: Int32; out fExists: Boolean): DNSharedProperty;
    ///<summary>Returns the property at the given position.</summary>
    ///  <param name="position">The index of the property. </param>
    ///<returns>The requested <see cref="T:System.EnterpriseServices.SharedProperty" />
    ///  .</returns>
    function PropertyByPosition(position: Int32): DNSharedProperty;
    function CreateProperty(name: string; out fExists: Boolean): DNSharedProperty;
    ///<summary>Returns the property with the given name.</summary>
    ///  <param name="name">The name of requested property. </param>
    ///<returns>The requested <see cref="T:System.EnterpriseServices.SharedProperty" />
    ///  .</returns>
    function &Property(name: string): DNSharedProperty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSharedPropertyGroup = class(TDNGenericImport<DNSharedPropertyGroupClass, DNSharedPropertyGroup>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyGroupManagerClass = interface(DNObjectClass)
  ['{D1996E05-77EC-5093-B8A1-91C6EE61D29D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.SharedPropertyGroupManager" />
    ///  class.</summary>
    {class} function init: DNSharedPropertyGroupManager;

  end;

  ///<summary>Controls access to shared property groups. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.SharedPropertyGroupManager')]
  DNSharedPropertyGroupManager = interface(DDN.mscorlib.DNIEnumerable)
  ['{A7F4D230-15E9-3C4A-AFF4-1D307B05E2E5}']
  { methods } 

    function CreatePropertyGroup(name: string; out dwIsoMode: DNPropertyLockMode; out dwRelMode: DNPropertyReleaseMode; out fExist: Boolean): DNSharedPropertyGroup;
    ///<summary>Finds the property group with the given name.</summary>
    ///  <param name="name">The name of requested property. </param>
    ///<returns>The requested <see cref="T:System.EnterpriseServices.SharedPropertyGroup" />
    ///  .</returns>
    function Group(name: string): DNSharedPropertyGroup;
    ///<summary>Retrieves the enumeration interface for the collection.</summary>
    ///<returns>The enumerator interface for the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSharedPropertyGroupManager = class(TDNGenericImport<DNSharedPropertyGroupManagerClass, DNSharedPropertyGroupManager>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{9C8154A6-E058-55CC-ADC9-8360CD7271DB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationException" />
    ///  class.</summary>
    {class} function init: DNRegistrationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationException" />
    ///  class with a specified error message.</summary>
    ///  <param name="msg">The message displayed to the client when the exception is thrown. </param>
    {class} function init(msg: string): DNRegistrationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationException" />
    ///  class with a specified error message and nested exception.</summary>
    ///  <param name="msg">The message displayed to the client when the exception is thrown. </param>
    ///  <param name="inner">The nested exception.</param>
    {class} function init(msg: string; inner: DDN.mscorlib.DNException): DNRegistrationException; overload;

  end;

  ///<summary>The exception that is thrown when a registration error is detected.</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationException')]
  DNRegistrationException = interface(DDN.mscorlib.DNSystemException)
  ['{8066FB71-AFA1-343E-8070-44AB4F3F85C9}']
  { getters & setters } 

    function get_ErrorInfo: TArray<DNRegistrationErrorInfo>;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object with the error information in <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />
    ///  .</summary>
    ///  <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object that contains serialized object data. </param>
    ///  <param name="ctx">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentException"><paramref name="info" />
    ///  parameter is <see langword="null" />
    ///  . </exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; ctx: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets an array of <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />
    ///  objects that describe registration errors.</summary>
    ///<returns>The array of <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />
    ///  objects.</returns>
    property ErrorInfo: TArray<DNRegistrationErrorInfo> read get_ErrorInfo;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRegistrationException = class(TDNGenericImport<DNRegistrationExceptionClass, DNRegistrationException>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServicedComponentExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{B61E51B1-0E6D-55B3-812D-BE8FF882A3DE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponentException" />
    ///  class.</summary>
    {class} function init: DNServicedComponentException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponentException" />
    ///  class with a specified error message.</summary>
    ///  <param name="message">The message displayed to the client when the exception is thrown. </param>
    {class} function init(message: string): DNServicedComponentException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponentException" />
    ///  class.</summary>
    ///  <param name="message">The message displayed to the client when the exception is thrown. </param>
    ///  <param name="innerException">The <see cref="P:System.Exception.InnerException" />
    ///  , if any, that threw the current exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNServicedComponentException; overload;

  end;

  ///<summary>The exception that is thrown when an error is detected in a serviced component.</summary>
  [DNTypeName('System.EnterpriseServices.ServicedComponentException')]
  DNServicedComponentException = interface(DDN.mscorlib.DNSystemException)
  ['{41FE3F34-02A0-34B0-BB22-FC0D20A153A3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNServicedComponentException = class(TDNGenericImport<DNServicedComponentExceptionClass, DNServicedComponentException>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServicedComponentClass = interface(DDN.mscorlib.DNContextBoundObjectClass)
  ['{6E2464DB-DCA1-5E80-8BA7-A0CF63F77F71}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  class.</summary>
    {class} function init: DNServicedComponent;

  { static methods } 

    ///<summary>Finalizes the object and removes the associated COM+ reference.</summary>
    ///  <param name="sc">The object to dispose. </param>
    {class} procedure DisposeObject(sc: DNServicedComponent);

  end;

  ///<summary>Represents the base class of all classes using COM+ services.</summary>
  [DNTypeName('System.EnterpriseServices.ServicedComponent')]
  DNServicedComponent = interface(DDN.mscorlib.DNContextBoundObject)
  ['{5F2E1501-189D-3DE1-81F2-CA8EE7C414C4}']
  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  .</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServicedComponent = class(TDNGenericImport<DNServicedComponentClass, DNServicedComponent>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNCompensatorClass = interface(DNServicedComponentClass)
  ['{A3EF45F7-78D0-51FC-97C3-38D8AC214D88}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" />
    ///  class.</summary>
    {class} function init: DNCompensator;

  end;

  ///<summary>Represents the base class for all Compensating Resource Manager (CRM) Compensators.</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.Compensator')]
  DNCompensator = interface(DNServicedComponent)
  ['{AB558A90-77EC-3C9A-A7E3-7B2260890A84}']
  { getters & setters } 

    function get_Clerk: DNClerk;

  { methods } 

    ///<summary>Notifies the Compensating Resource Manager (CRM) Compensator of the prepare phase of the transaction completion and the upcoming delivery of records.</summary>
    procedure BeginPrepare;
    ///<summary>Delivers a log record in forward order during the prepare phase.</summary>
    ///  <param name="rec">The log record to forward. </param>
    ///<returns><see langword="true" />
    ///  if the delivered record should be forgotten; otherwise, <see langword="false" />
    ///  .</returns>
    function PrepareRecord(rec: DNLogRecord): Boolean;
    ///<summary>Notifies the Compensating Resource Manager (CRM) Compensator that it has had all the log records available during the prepare phase.</summary>
    ///<returns><see langword="true" />
    ///  if successful; otherwise, <see langword="false" />
    ///  .</returns>
    function EndPrepare: Boolean;
    ///<summary>Notifies the Compensating Resource Manager (CRM) Compensator of the commit phase of the transaction completion and the upcoming delivery of records.</summary>
    ///  <param name="fRecovery"><see langword="true" />
    ///  to begin commit phase; otherwise, <see langword="false" />
    ///  . </param>
    procedure BeginCommit(fRecovery: Boolean);
    ///<summary>Delivers a log record in forward order during the commit phase.</summary>
    ///  <param name="rec">The log record to forward. </param>
    ///<returns><see langword="true" />
    ///  if the delivered record should be forgotten; otherwise, <see langword="false" />
    ///  .</returns>
    function CommitRecord(rec: DNLogRecord): Boolean;
    ///<summary>Notifies the Compensating Resource Manager (CRM) Compensator that it has delivered all the log records available during the commit phase.</summary>
    procedure EndCommit;
    ///<summary>Notifies the Compensating Resource Manager (CRM) Compensator of the abort phase of the transaction completion, and the upcoming delivery of records.</summary>
    ///  <param name="fRecovery"><see langword="true" />
    ///  to begin abort phase; otherwise, <see langword="false" />
    ///  . </param>
    procedure BeginAbort(fRecovery: Boolean);
    ///<summary>Delivers a log record to the Compensating Resource Manager (CRM) Compensator during the abort phase.</summary>
    ///  <param name="rec">The log record to be delivered. </param>
    ///<returns><see langword="true" />
    ///  if the delivered record should be forgotten; otherwise, <see langword="false" />
    ///  .</returns>
    function AbortRecord(rec: DNLogRecord): Boolean;
    ///<summary>Notifies the Compensating Resource Manager (CRM) Compensator that it has received all the log records available during the abort phase.</summary>
    procedure EndAbort;
    ///<summary>Releases all resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  .</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value representing the Compensating Resource Manager (CRM) <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  object.</returns>
    property Clerk: DNClerk read get_Clerk;
  end;

  TDNCompensator = class(TDNGenericImport<DNCompensatorClass, DNCompensator>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationHelperTxClass = interface(DNServicedComponentClass)
  ['{9D787985-1A11-54CE-B1C2-87781CFC733E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" />
    ///  class.</summary>
    {class} function init: DNRegistrationHelperTx;

  end;

  ///<summary>Used by the .NET Framework infrastructure to install and configure assemblies in the COM+ catalog while maintaining a newly established transaction.</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationHelperTx')]
  DNRegistrationHelperTx = interface(DNServicedComponent)
  ['{C89AC250-E18A-4FC7-ABD5-B8897B6A78A5}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags; sync: DDN.mscorlib.DNObject); overload;
    procedure InstallAssembly(assembly: string; out application: string; partition: string; out tlb: string; installFlags: DNInstallationFlags; sync: DDN.mscorlib.DNObject); overload;
    procedure InstallAssemblyFromConfig(out regConfig: DNRegistrationConfig; sync: DDN.mscorlib.DNObject);
    ///<summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
    ///  <param name="assembly">The file name of the assembly to uninstall.</param>
    ///  <param name="application">Either the name of the COM+ application that contains the components in the assembly or <see langword="null" />
    ///  .</param>
    ///  <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
    procedure UninstallAssembly(assembly: string; application: string; sync: DDN.mscorlib.DNObject); overload;
    ///<summary>Uninstalls an assembly from a COM+ application using transactional semantics.</summary>
    ///  <param name="assembly">The file name of the assembly to uninstall.</param>
    ///  <param name="application">Either the name of the COM+ application that contains the components in the assembly or <see langword="null" />
    ///  .</param>
    ///  <param name="partition">Either the name of the partition or <see langword="null" />
    ///  .</param>
    ///  <param name="sync">A synchronization object generated by the infrastructure that can wait until the specified assembly has been uninstalled.</param>
    procedure UninstallAssembly(assembly: string; application: string; partition: string; sync: DDN.mscorlib.DNObject); overload;
    procedure UninstallAssemblyFromConfig(out regConfig: DNRegistrationConfig; sync: DDN.mscorlib.DNObject);
    ///<summary>Gets a value indicating whether the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" />
    ///  class instance is transactional.</summary>
    ///<returns><see langword="true" />
    ///  if the current context for the <see cref="T:System.EnterpriseServices.RegistrationHelperTx" />
    ///  class instance is transactional; otherwise, <see langword="false" />
    ///  .</returns>
    function IsInTransaction: Boolean;
    ///<summary>Releases all resources used by the <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  .</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegistrationHelperTx = class(TDNGenericImport<DNRegistrationHelperTxClass, DNRegistrationHelperTx>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNAssemblyLocatorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{53633913-CE96-5A90-B2A7-51412C5C948F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.Internal.AssemblyLocator" />
    ///  class.</summary>
    {class} function init: DNAssemblyLocator;

  end;

  ///<summary>Locates an assembly and returns information about its modules.</summary>
  [DNTypeName('System.EnterpriseServices.Internal.AssemblyLocator')]
  DNAssemblyLocator = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{458AA3B5-265A-4B75-BC05-9BEA4630CF18}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssemblyLocator = class(TDNGenericImport<DNAssemblyLocatorClass, DNAssemblyLocator>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationHelperClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{BA9FA7EF-1C46-5229-AB26-A489367FC985}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.EnterpriseServices.RegistrationHelper" />
    ///  class.</summary>
    {class} function init: DNRegistrationHelper;

  end;

  ///<summary>Installs and configures assemblies in the COM+ catalog. This class cannot be inherited.</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationHelper')]
  DNRegistrationHelper = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{89A86E7B-C229-4008-9BAA-2F5C8411D7E0}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags); overload;
    procedure InstallAssembly(assembly: string; out application: string; partition: string; out tlb: string; installFlags: DNInstallationFlags); overload;
    procedure InstallAssemblyFromConfig(out regConfig: DNRegistrationConfig);
    ///<summary>Uninstalls the assembly from the given application.</summary>
    ///  <param name="assembly">The file name of the assembly to uninstall. </param>
    ///  <param name="application">If this name is not <see langword="null" />
    ///  , it is the name of the application that contains the components in the assembly. </param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
    procedure UninstallAssembly(assembly: string; application: string); overload;
    ///<summary>Uninstalls the assembly from the given application.</summary>
    ///  <param name="assembly">The file name of the assembly to uninstall. </param>
    ///  <param name="application">If this name is not <see langword="null" />
    ///  , it is the name of the application that contains the components in the assembly. </param>
    ///  <param name="partition">The name of the partition. This parameter can be <see langword="null" />
    ///  . </param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">The input assembly does not have a strong name. </exception>
    procedure UninstallAssembly(assembly: string; application: string; partition: string); overload;
    procedure UninstallAssemblyFromConfig(out regConfig: DNRegistrationConfig);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegistrationHelper = class(TDNGenericImport<DNRegistrationHelperClass, DNRegistrationHelper>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNBOIDClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1E7A8E3C-A692-5898-AA2C-05E34C5BE0DE}']
  end;

  ///<summary>Represents the unit of work associated with a transaction. This structure is used in <see cref="T:System.EnterpriseServices.XACTTRANSINFO" />
  ///  .</summary>
  [DNTypeName('System.EnterpriseServices.BOID')]
  DNBOID = interface(DDN.mscorlib.DNValueType)
  ['{FAABC7E6-B86E-3A2C-8EE9-3A1330C9B0A7}']
  { fields getter & setter } 

   function __fakeFieldGet_rgb: TArray<Byte>;
   procedure __fakeFieldSet_rgb(value: TArray<Byte>);

  { fields } 

    ///<summary>Represents an array that contains the data.</summary>
   property rgb: TArray<Byte> read __fakeFieldGet_rgb write __fakeFieldSet_rgb;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNBOID = class(TDNGenericImport<DNBOIDClass, DNBOID>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNXACTTRANSINFOClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{DC26BD62-E5EA-59FC-9B56-5D1F9ADC690B}']
  end;

  ///<summary>Represents a structure used in the <see cref="T:System.EnterpriseServices.ITransaction" />
  ///  interface.</summary>
  [DNTypeName('System.EnterpriseServices.XACTTRANSINFO')]
  DNXACTTRANSINFO = interface(DDN.mscorlib.DNValueType)
  ['{39EAA232-3312-3250-B373-E65B0A5521CF}']
  { fields getter & setter } 

   function __fakeFieldGet_uow: DNBOID;
   procedure __fakeFieldSet_uow(value: DNBOID);
   function __fakeFieldGet_isoLevel: Int32;
   procedure __fakeFieldSet_isoLevel(value: Int32);
   function __fakeFieldGet_isoFlags: Int32;
   procedure __fakeFieldSet_isoFlags(value: Int32);
   function __fakeFieldGet_grfTCSupported: Int32;
   procedure __fakeFieldSet_grfTCSupported(value: Int32);
   function __fakeFieldGet_grfRMSupported: Int32;
   procedure __fakeFieldSet_grfRMSupported(value: Int32);
   function __fakeFieldGet_grfTCSupportedRetaining: Int32;
   procedure __fakeFieldSet_grfTCSupportedRetaining(value: Int32);
   function __fakeFieldGet_grfRMSupportedRetaining: Int32;
   procedure __fakeFieldSet_grfRMSupportedRetaining(value: Int32);

  { fields } 

    ///<summary>Represents the unit of work associated with this transaction.</summary>
   property uow: DNBOID read __fakeFieldGet_uow write __fakeFieldSet_uow;
    ///<summary>Represents the isolation level associated with this transaction object. ISOLATIONLEVEL_UNSPECIFIED indicates that no isolation level was specified.</summary>
   property isoLevel: Int32 read __fakeFieldGet_isoLevel write __fakeFieldSet_isoLevel;
    ///<summary>Specifies zero. This field is reserved.</summary>
   property isoFlags: Int32 read __fakeFieldGet_isoFlags write __fakeFieldSet_isoFlags;
    ///<summary>Represents a bitmask that indicates which <see langword="grfTC" />
    ///  flags this transaction implementation supports.</summary>
   property grfTCSupported: Int32 read __fakeFieldGet_grfTCSupported write __fakeFieldSet_grfTCSupported;
    ///<summary>Specifies zero. This field is reserved.</summary>
   property grfRMSupported: Int32 read __fakeFieldGet_grfRMSupported write __fakeFieldSet_grfRMSupported;
    ///<summary>Specifies zero. This field is reserved.</summary>
   property grfTCSupportedRetaining: Int32 read __fakeFieldGet_grfTCSupportedRetaining write __fakeFieldSet_grfTCSupportedRetaining;
    ///<summary>Specifies zero. This field is reserved.</summary>
   property grfRMSupportedRetaining: Int32 read __fakeFieldGet_grfRMSupportedRetaining write __fakeFieldSet_grfRMSupportedRetaining;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNXACTTRANSINFO = class(TDNGenericImport<DNXACTTRANSINFOClass, DNXACTTRANSINFO>) end;


implementation


initialization
  LoadAssemblyModule('System.EnterpriseServices.dll', True);

finalization

end.
